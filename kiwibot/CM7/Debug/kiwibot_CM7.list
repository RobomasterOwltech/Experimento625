
kiwibot_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017840  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000648  08017ae0  08017ae0  00027ae0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018128  08018128  000301dc  2**0
                  CONTENTS
  4 .ARM          00000008  08018128  08018128  00028128  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018130  08018130  000301dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08018130  08018130  00028130  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08018134  08018134  00028134  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  24000000  08018138  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005574  240001dc  08018314  000301dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24005750  08018314  00035750  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0003020a  2**0
                  CONTENTS, READONLY
 13 .debug_info   0004099d  00000000  00000000  0003024d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006917  00000000  00000000  00070bea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000026f0  00000000  00000000  00077508  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001e46  00000000  00000000  00079bf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000450d0  00000000  00000000  0007ba3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00034d21  00000000  00000000  000c0b0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001b2edc  00000000  00000000  000f582f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000bc48  00000000  00000000  002a870c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  002b4354  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001dc 	.word	0x240001dc
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08017ac8 	.word	0x08017ac8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001e0 	.word	0x240001e0
 80002dc:	08017ac8 	.word	0x08017ac8

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	; 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295
 8000718:	f04f 30ff 	movne.w	r0, #4294967295
 800071c:	f000 b9a8 	b.w	8000a70 <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f83e 	bl	80007a8 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__aeabi_d2lz>:
 8000738:	b508      	push	{r3, lr}
 800073a:	4602      	mov	r2, r0
 800073c:	460b      	mov	r3, r1
 800073e:	ec43 2b17 	vmov	d7, r2, r3
 8000742:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800074a:	d403      	bmi.n	8000754 <__aeabi_d2lz+0x1c>
 800074c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000750:	f000 b80a 	b.w	8000768 <__aeabi_d2ulz>
 8000754:	eeb1 7b47 	vneg.f64	d7, d7
 8000758:	ec51 0b17 	vmov	r0, r1, d7
 800075c:	f000 f804 	bl	8000768 <__aeabi_d2ulz>
 8000760:	4240      	negs	r0, r0
 8000762:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000766:	bd08      	pop	{r3, pc}

08000768 <__aeabi_d2ulz>:
 8000768:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000798 <__aeabi_d2ulz+0x30>
 800076c:	ec41 0b17 	vmov	d7, r0, r1
 8000770:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80007a0 <__aeabi_d2ulz+0x38>
 8000774:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000778:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800077c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000780:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000784:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000788:	ee16 1a10 	vmov	r1, s12
 800078c:	ee17 0a90 	vmov	r0, s15
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	f3af 8000 	nop.w
 8000798:	00000000 	.word	0x00000000
 800079c:	3df00000 	.word	0x3df00000
 80007a0:	00000000 	.word	0x00000000
 80007a4:	41f00000 	.word	0x41f00000

080007a8 <__udivmoddi4>:
 80007a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007ac:	9e08      	ldr	r6, [sp, #32]
 80007ae:	460d      	mov	r5, r1
 80007b0:	4604      	mov	r4, r0
 80007b2:	460f      	mov	r7, r1
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d14a      	bne.n	800084e <__udivmoddi4+0xa6>
 80007b8:	428a      	cmp	r2, r1
 80007ba:	4694      	mov	ip, r2
 80007bc:	d965      	bls.n	800088a <__udivmoddi4+0xe2>
 80007be:	fab2 f382 	clz	r3, r2
 80007c2:	b143      	cbz	r3, 80007d6 <__udivmoddi4+0x2e>
 80007c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80007c8:	f1c3 0220 	rsb	r2, r3, #32
 80007cc:	409f      	lsls	r7, r3
 80007ce:	fa20 f202 	lsr.w	r2, r0, r2
 80007d2:	4317      	orrs	r7, r2
 80007d4:	409c      	lsls	r4, r3
 80007d6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80007da:	fa1f f58c 	uxth.w	r5, ip
 80007de:	fbb7 f1fe 	udiv	r1, r7, lr
 80007e2:	0c22      	lsrs	r2, r4, #16
 80007e4:	fb0e 7711 	mls	r7, lr, r1, r7
 80007e8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80007ec:	fb01 f005 	mul.w	r0, r1, r5
 80007f0:	4290      	cmp	r0, r2
 80007f2:	d90a      	bls.n	800080a <__udivmoddi4+0x62>
 80007f4:	eb1c 0202 	adds.w	r2, ip, r2
 80007f8:	f101 37ff 	add.w	r7, r1, #4294967295
 80007fc:	f080 811c 	bcs.w	8000a38 <__udivmoddi4+0x290>
 8000800:	4290      	cmp	r0, r2
 8000802:	f240 8119 	bls.w	8000a38 <__udivmoddi4+0x290>
 8000806:	3902      	subs	r1, #2
 8000808:	4462      	add	r2, ip
 800080a:	1a12      	subs	r2, r2, r0
 800080c:	b2a4      	uxth	r4, r4
 800080e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000812:	fb0e 2210 	mls	r2, lr, r0, r2
 8000816:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800081a:	fb00 f505 	mul.w	r5, r0, r5
 800081e:	42a5      	cmp	r5, r4
 8000820:	d90a      	bls.n	8000838 <__udivmoddi4+0x90>
 8000822:	eb1c 0404 	adds.w	r4, ip, r4
 8000826:	f100 32ff 	add.w	r2, r0, #4294967295
 800082a:	f080 8107 	bcs.w	8000a3c <__udivmoddi4+0x294>
 800082e:	42a5      	cmp	r5, r4
 8000830:	f240 8104 	bls.w	8000a3c <__udivmoddi4+0x294>
 8000834:	4464      	add	r4, ip
 8000836:	3802      	subs	r0, #2
 8000838:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800083c:	1b64      	subs	r4, r4, r5
 800083e:	2100      	movs	r1, #0
 8000840:	b11e      	cbz	r6, 800084a <__udivmoddi4+0xa2>
 8000842:	40dc      	lsrs	r4, r3
 8000844:	2300      	movs	r3, #0
 8000846:	e9c6 4300 	strd	r4, r3, [r6]
 800084a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800084e:	428b      	cmp	r3, r1
 8000850:	d908      	bls.n	8000864 <__udivmoddi4+0xbc>
 8000852:	2e00      	cmp	r6, #0
 8000854:	f000 80ed 	beq.w	8000a32 <__udivmoddi4+0x28a>
 8000858:	2100      	movs	r1, #0
 800085a:	e9c6 0500 	strd	r0, r5, [r6]
 800085e:	4608      	mov	r0, r1
 8000860:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000864:	fab3 f183 	clz	r1, r3
 8000868:	2900      	cmp	r1, #0
 800086a:	d149      	bne.n	8000900 <__udivmoddi4+0x158>
 800086c:	42ab      	cmp	r3, r5
 800086e:	d302      	bcc.n	8000876 <__udivmoddi4+0xce>
 8000870:	4282      	cmp	r2, r0
 8000872:	f200 80f8 	bhi.w	8000a66 <__udivmoddi4+0x2be>
 8000876:	1a84      	subs	r4, r0, r2
 8000878:	eb65 0203 	sbc.w	r2, r5, r3
 800087c:	2001      	movs	r0, #1
 800087e:	4617      	mov	r7, r2
 8000880:	2e00      	cmp	r6, #0
 8000882:	d0e2      	beq.n	800084a <__udivmoddi4+0xa2>
 8000884:	e9c6 4700 	strd	r4, r7, [r6]
 8000888:	e7df      	b.n	800084a <__udivmoddi4+0xa2>
 800088a:	b902      	cbnz	r2, 800088e <__udivmoddi4+0xe6>
 800088c:	deff      	udf	#255	; 0xff
 800088e:	fab2 f382 	clz	r3, r2
 8000892:	2b00      	cmp	r3, #0
 8000894:	f040 8090 	bne.w	80009b8 <__udivmoddi4+0x210>
 8000898:	1a8a      	subs	r2, r1, r2
 800089a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800089e:	fa1f fe8c 	uxth.w	lr, ip
 80008a2:	2101      	movs	r1, #1
 80008a4:	fbb2 f5f7 	udiv	r5, r2, r7
 80008a8:	fb07 2015 	mls	r0, r7, r5, r2
 80008ac:	0c22      	lsrs	r2, r4, #16
 80008ae:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80008b2:	fb0e f005 	mul.w	r0, lr, r5
 80008b6:	4290      	cmp	r0, r2
 80008b8:	d908      	bls.n	80008cc <__udivmoddi4+0x124>
 80008ba:	eb1c 0202 	adds.w	r2, ip, r2
 80008be:	f105 38ff 	add.w	r8, r5, #4294967295
 80008c2:	d202      	bcs.n	80008ca <__udivmoddi4+0x122>
 80008c4:	4290      	cmp	r0, r2
 80008c6:	f200 80cb 	bhi.w	8000a60 <__udivmoddi4+0x2b8>
 80008ca:	4645      	mov	r5, r8
 80008cc:	1a12      	subs	r2, r2, r0
 80008ce:	b2a4      	uxth	r4, r4
 80008d0:	fbb2 f0f7 	udiv	r0, r2, r7
 80008d4:	fb07 2210 	mls	r2, r7, r0, r2
 80008d8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80008dc:	fb0e fe00 	mul.w	lr, lr, r0
 80008e0:	45a6      	cmp	lr, r4
 80008e2:	d908      	bls.n	80008f6 <__udivmoddi4+0x14e>
 80008e4:	eb1c 0404 	adds.w	r4, ip, r4
 80008e8:	f100 32ff 	add.w	r2, r0, #4294967295
 80008ec:	d202      	bcs.n	80008f4 <__udivmoddi4+0x14c>
 80008ee:	45a6      	cmp	lr, r4
 80008f0:	f200 80bb 	bhi.w	8000a6a <__udivmoddi4+0x2c2>
 80008f4:	4610      	mov	r0, r2
 80008f6:	eba4 040e 	sub.w	r4, r4, lr
 80008fa:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80008fe:	e79f      	b.n	8000840 <__udivmoddi4+0x98>
 8000900:	f1c1 0720 	rsb	r7, r1, #32
 8000904:	408b      	lsls	r3, r1
 8000906:	fa22 fc07 	lsr.w	ip, r2, r7
 800090a:	ea4c 0c03 	orr.w	ip, ip, r3
 800090e:	fa05 f401 	lsl.w	r4, r5, r1
 8000912:	fa20 f307 	lsr.w	r3, r0, r7
 8000916:	40fd      	lsrs	r5, r7
 8000918:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800091c:	4323      	orrs	r3, r4
 800091e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000922:	fa1f fe8c 	uxth.w	lr, ip
 8000926:	fb09 5518 	mls	r5, r9, r8, r5
 800092a:	0c1c      	lsrs	r4, r3, #16
 800092c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000930:	fb08 f50e 	mul.w	r5, r8, lr
 8000934:	42a5      	cmp	r5, r4
 8000936:	fa02 f201 	lsl.w	r2, r2, r1
 800093a:	fa00 f001 	lsl.w	r0, r0, r1
 800093e:	d90b      	bls.n	8000958 <__udivmoddi4+0x1b0>
 8000940:	eb1c 0404 	adds.w	r4, ip, r4
 8000944:	f108 3aff 	add.w	sl, r8, #4294967295
 8000948:	f080 8088 	bcs.w	8000a5c <__udivmoddi4+0x2b4>
 800094c:	42a5      	cmp	r5, r4
 800094e:	f240 8085 	bls.w	8000a5c <__udivmoddi4+0x2b4>
 8000952:	f1a8 0802 	sub.w	r8, r8, #2
 8000956:	4464      	add	r4, ip
 8000958:	1b64      	subs	r4, r4, r5
 800095a:	b29d      	uxth	r5, r3
 800095c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000960:	fb09 4413 	mls	r4, r9, r3, r4
 8000964:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000968:	fb03 fe0e 	mul.w	lr, r3, lr
 800096c:	45a6      	cmp	lr, r4
 800096e:	d908      	bls.n	8000982 <__udivmoddi4+0x1da>
 8000970:	eb1c 0404 	adds.w	r4, ip, r4
 8000974:	f103 35ff 	add.w	r5, r3, #4294967295
 8000978:	d26c      	bcs.n	8000a54 <__udivmoddi4+0x2ac>
 800097a:	45a6      	cmp	lr, r4
 800097c:	d96a      	bls.n	8000a54 <__udivmoddi4+0x2ac>
 800097e:	3b02      	subs	r3, #2
 8000980:	4464      	add	r4, ip
 8000982:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000986:	fba3 9502 	umull	r9, r5, r3, r2
 800098a:	eba4 040e 	sub.w	r4, r4, lr
 800098e:	42ac      	cmp	r4, r5
 8000990:	46c8      	mov	r8, r9
 8000992:	46ae      	mov	lr, r5
 8000994:	d356      	bcc.n	8000a44 <__udivmoddi4+0x29c>
 8000996:	d053      	beq.n	8000a40 <__udivmoddi4+0x298>
 8000998:	b156      	cbz	r6, 80009b0 <__udivmoddi4+0x208>
 800099a:	ebb0 0208 	subs.w	r2, r0, r8
 800099e:	eb64 040e 	sbc.w	r4, r4, lr
 80009a2:	fa04 f707 	lsl.w	r7, r4, r7
 80009a6:	40ca      	lsrs	r2, r1
 80009a8:	40cc      	lsrs	r4, r1
 80009aa:	4317      	orrs	r7, r2
 80009ac:	e9c6 7400 	strd	r7, r4, [r6]
 80009b0:	4618      	mov	r0, r3
 80009b2:	2100      	movs	r1, #0
 80009b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009b8:	f1c3 0120 	rsb	r1, r3, #32
 80009bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80009c0:	fa20 f201 	lsr.w	r2, r0, r1
 80009c4:	fa25 f101 	lsr.w	r1, r5, r1
 80009c8:	409d      	lsls	r5, r3
 80009ca:	432a      	orrs	r2, r5
 80009cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009d0:	fa1f fe8c 	uxth.w	lr, ip
 80009d4:	fbb1 f0f7 	udiv	r0, r1, r7
 80009d8:	fb07 1510 	mls	r5, r7, r0, r1
 80009dc:	0c11      	lsrs	r1, r2, #16
 80009de:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80009e2:	fb00 f50e 	mul.w	r5, r0, lr
 80009e6:	428d      	cmp	r5, r1
 80009e8:	fa04 f403 	lsl.w	r4, r4, r3
 80009ec:	d908      	bls.n	8000a00 <__udivmoddi4+0x258>
 80009ee:	eb1c 0101 	adds.w	r1, ip, r1
 80009f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80009f6:	d22f      	bcs.n	8000a58 <__udivmoddi4+0x2b0>
 80009f8:	428d      	cmp	r5, r1
 80009fa:	d92d      	bls.n	8000a58 <__udivmoddi4+0x2b0>
 80009fc:	3802      	subs	r0, #2
 80009fe:	4461      	add	r1, ip
 8000a00:	1b49      	subs	r1, r1, r5
 8000a02:	b292      	uxth	r2, r2
 8000a04:	fbb1 f5f7 	udiv	r5, r1, r7
 8000a08:	fb07 1115 	mls	r1, r7, r5, r1
 8000a0c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000a10:	fb05 f10e 	mul.w	r1, r5, lr
 8000a14:	4291      	cmp	r1, r2
 8000a16:	d908      	bls.n	8000a2a <__udivmoddi4+0x282>
 8000a18:	eb1c 0202 	adds.w	r2, ip, r2
 8000a1c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000a20:	d216      	bcs.n	8000a50 <__udivmoddi4+0x2a8>
 8000a22:	4291      	cmp	r1, r2
 8000a24:	d914      	bls.n	8000a50 <__udivmoddi4+0x2a8>
 8000a26:	3d02      	subs	r5, #2
 8000a28:	4462      	add	r2, ip
 8000a2a:	1a52      	subs	r2, r2, r1
 8000a2c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000a30:	e738      	b.n	80008a4 <__udivmoddi4+0xfc>
 8000a32:	4631      	mov	r1, r6
 8000a34:	4630      	mov	r0, r6
 8000a36:	e708      	b.n	800084a <__udivmoddi4+0xa2>
 8000a38:	4639      	mov	r1, r7
 8000a3a:	e6e6      	b.n	800080a <__udivmoddi4+0x62>
 8000a3c:	4610      	mov	r0, r2
 8000a3e:	e6fb      	b.n	8000838 <__udivmoddi4+0x90>
 8000a40:	4548      	cmp	r0, r9
 8000a42:	d2a9      	bcs.n	8000998 <__udivmoddi4+0x1f0>
 8000a44:	ebb9 0802 	subs.w	r8, r9, r2
 8000a48:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000a4c:	3b01      	subs	r3, #1
 8000a4e:	e7a3      	b.n	8000998 <__udivmoddi4+0x1f0>
 8000a50:	4645      	mov	r5, r8
 8000a52:	e7ea      	b.n	8000a2a <__udivmoddi4+0x282>
 8000a54:	462b      	mov	r3, r5
 8000a56:	e794      	b.n	8000982 <__udivmoddi4+0x1da>
 8000a58:	4640      	mov	r0, r8
 8000a5a:	e7d1      	b.n	8000a00 <__udivmoddi4+0x258>
 8000a5c:	46d0      	mov	r8, sl
 8000a5e:	e77b      	b.n	8000958 <__udivmoddi4+0x1b0>
 8000a60:	3d02      	subs	r5, #2
 8000a62:	4462      	add	r2, ip
 8000a64:	e732      	b.n	80008cc <__udivmoddi4+0x124>
 8000a66:	4608      	mov	r0, r1
 8000a68:	e70a      	b.n	8000880 <__udivmoddi4+0xd8>
 8000a6a:	4464      	add	r4, ip
 8000a6c:	3802      	subs	r0, #2
 8000a6e:	e742      	b.n	80008f6 <__udivmoddi4+0x14e>

08000a70 <__aeabi_idiv0>:
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop

08000a74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a78:	4b3d      	ldr	r3, [pc, #244]	; (8000b70 <SystemInit+0xfc>)
 8000a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a7e:	4a3c      	ldr	r2, [pc, #240]	; (8000b70 <SystemInit+0xfc>)
 8000a80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000a88:	4b39      	ldr	r3, [pc, #228]	; (8000b70 <SystemInit+0xfc>)
 8000a8a:	691b      	ldr	r3, [r3, #16]
 8000a8c:	4a38      	ldr	r2, [pc, #224]	; (8000b70 <SystemInit+0xfc>)
 8000a8e:	f043 0310 	orr.w	r3, r3, #16
 8000a92:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000a94:	4b37      	ldr	r3, [pc, #220]	; (8000b74 <SystemInit+0x100>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	f003 030f 	and.w	r3, r3, #15
 8000a9c:	2b06      	cmp	r3, #6
 8000a9e:	d807      	bhi.n	8000ab0 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000aa0:	4b34      	ldr	r3, [pc, #208]	; (8000b74 <SystemInit+0x100>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	f023 030f 	bic.w	r3, r3, #15
 8000aa8:	4a32      	ldr	r2, [pc, #200]	; (8000b74 <SystemInit+0x100>)
 8000aaa:	f043 0307 	orr.w	r3, r3, #7
 8000aae:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000ab0:	4b31      	ldr	r3, [pc, #196]	; (8000b78 <SystemInit+0x104>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a30      	ldr	r2, [pc, #192]	; (8000b78 <SystemInit+0x104>)
 8000ab6:	f043 0301 	orr.w	r3, r3, #1
 8000aba:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000abc:	4b2e      	ldr	r3, [pc, #184]	; (8000b78 <SystemInit+0x104>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000ac2:	4b2d      	ldr	r3, [pc, #180]	; (8000b78 <SystemInit+0x104>)
 8000ac4:	681a      	ldr	r2, [r3, #0]
 8000ac6:	492c      	ldr	r1, [pc, #176]	; (8000b78 <SystemInit+0x104>)
 8000ac8:	4b2c      	ldr	r3, [pc, #176]	; (8000b7c <SystemInit+0x108>)
 8000aca:	4013      	ands	r3, r2
 8000acc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ace:	4b29      	ldr	r3, [pc, #164]	; (8000b74 <SystemInit+0x100>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	f003 0308 	and.w	r3, r3, #8
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d007      	beq.n	8000aea <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ada:	4b26      	ldr	r3, [pc, #152]	; (8000b74 <SystemInit+0x100>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	f023 030f 	bic.w	r3, r3, #15
 8000ae2:	4a24      	ldr	r2, [pc, #144]	; (8000b74 <SystemInit+0x100>)
 8000ae4:	f043 0307 	orr.w	r3, r3, #7
 8000ae8:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000aea:	4b23      	ldr	r3, [pc, #140]	; (8000b78 <SystemInit+0x104>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000af0:	4b21      	ldr	r3, [pc, #132]	; (8000b78 <SystemInit+0x104>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000af6:	4b20      	ldr	r3, [pc, #128]	; (8000b78 <SystemInit+0x104>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000afc:	4b1e      	ldr	r3, [pc, #120]	; (8000b78 <SystemInit+0x104>)
 8000afe:	4a20      	ldr	r2, [pc, #128]	; (8000b80 <SystemInit+0x10c>)
 8000b00:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000b02:	4b1d      	ldr	r3, [pc, #116]	; (8000b78 <SystemInit+0x104>)
 8000b04:	4a1f      	ldr	r2, [pc, #124]	; (8000b84 <SystemInit+0x110>)
 8000b06:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000b08:	4b1b      	ldr	r3, [pc, #108]	; (8000b78 <SystemInit+0x104>)
 8000b0a:	4a1f      	ldr	r2, [pc, #124]	; (8000b88 <SystemInit+0x114>)
 8000b0c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000b0e:	4b1a      	ldr	r3, [pc, #104]	; (8000b78 <SystemInit+0x104>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000b14:	4b18      	ldr	r3, [pc, #96]	; (8000b78 <SystemInit+0x104>)
 8000b16:	4a1c      	ldr	r2, [pc, #112]	; (8000b88 <SystemInit+0x114>)
 8000b18:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000b1a:	4b17      	ldr	r3, [pc, #92]	; (8000b78 <SystemInit+0x104>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000b20:	4b15      	ldr	r3, [pc, #84]	; (8000b78 <SystemInit+0x104>)
 8000b22:	4a19      	ldr	r2, [pc, #100]	; (8000b88 <SystemInit+0x114>)
 8000b24:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000b26:	4b14      	ldr	r3, [pc, #80]	; (8000b78 <SystemInit+0x104>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b2c:	4b12      	ldr	r3, [pc, #72]	; (8000b78 <SystemInit+0x104>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a11      	ldr	r2, [pc, #68]	; (8000b78 <SystemInit+0x104>)
 8000b32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b36:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000b38:	4b0f      	ldr	r3, [pc, #60]	; (8000b78 <SystemInit+0x104>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000b3e:	4b13      	ldr	r3, [pc, #76]	; (8000b8c <SystemInit+0x118>)
 8000b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b42:	4a12      	ldr	r2, [pc, #72]	; (8000b8c <SystemInit+0x118>)
 8000b44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b48:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000b4a:	4b11      	ldr	r3, [pc, #68]	; (8000b90 <SystemInit+0x11c>)
 8000b4c:	681a      	ldr	r2, [r3, #0]
 8000b4e:	4b11      	ldr	r3, [pc, #68]	; (8000b94 <SystemInit+0x120>)
 8000b50:	4013      	ands	r3, r2
 8000b52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000b56:	d202      	bcs.n	8000b5e <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000b58:	4b0f      	ldr	r3, [pc, #60]	; (8000b98 <SystemInit+0x124>)
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000b5e:	4b0f      	ldr	r3, [pc, #60]	; (8000b9c <SystemInit+0x128>)
 8000b60:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000b64:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000b66:	bf00      	nop
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr
 8000b70:	e000ed00 	.word	0xe000ed00
 8000b74:	52002000 	.word	0x52002000
 8000b78:	58024400 	.word	0x58024400
 8000b7c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000b80:	02020200 	.word	0x02020200
 8000b84:	01ff0000 	.word	0x01ff0000
 8000b88:	01010280 	.word	0x01010280
 8000b8c:	580000c0 	.word	0x580000c0
 8000b90:	5c001000 	.word	0x5c001000
 8000b94:	ffff0000 	.word	0xffff0000
 8000b98:	51008108 	.word	0x51008108
 8000b9c:	52004000 	.word	0x52004000

08000ba0 <_ZSt4ceilf>:
  using ::ceil;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  ceil(float __x)
  { return __builtin_ceilf(__x); }
 8000ba0:	b480      	push	{r7}
 8000ba2:	b083      	sub	sp, #12
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	ed87 0a01 	vstr	s0, [r7, #4]
 8000baa:	edd7 7a01 	vldr	s15, [r7, #4]
 8000bae:	fefa 7a67 	vrintp.f32	s15, s15
 8000bb2:	eeb0 0a67 	vmov.f32	s0, s15
 8000bb6:	370c      	adds	r7, #12
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr

08000bc0 <_ZN10LL_Control7EncoderC1EP17TIM_HandleTypeDefi>:
 *      Author: josue
 */

#include "Encoder.hpp"

LL_Control::Encoder::Encoder(TIM_HandleTypeDef * htim, int int_freq) {
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b084      	sub	sp, #16
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	60f8      	str	r0, [r7, #12]
 8000bc8:	60b9      	str	r1, [r7, #8]
 8000bca:	607a      	str	r2, [r7, #4]
 8000bcc:	4a09      	ldr	r2, [pc, #36]	; (8000bf4 <_ZN10LL_Control7EncoderC1EP17TIM_HandleTypeDefi+0x34>)
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	601a      	str	r2, [r3, #0]

	// Assignments
	this->htimCounter = htim;
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	68ba      	ldr	r2, [r7, #8]
 8000bd6:	605a      	str	r2, [r3, #4]
	this->int_freq = int_freq;
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	687a      	ldr	r2, [r7, #4]
 8000bdc:	611a      	str	r2, [r3, #16]

	set_encoderRes (537.667);
 8000bde:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8000bf8 <_ZN10LL_Control7EncoderC1EP17TIM_HandleTypeDefi+0x38>
 8000be2:	68f8      	ldr	r0, [r7, #12]
 8000be4:	f000 f838 	bl	8000c58 <_ZN10LL_Control7Encoder14set_encoderResEf>

}
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	4618      	mov	r0, r3
 8000bec:	3710      	adds	r7, #16
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	08017bc8 	.word	0x08017bc8
 8000bf8:	44066ab0 	.word	0x44066ab0

08000bfc <_ZN10LL_Control7EncoderD1Ev>:
LL_Control::Encoder::Encoder(){

}
LL_Control::Encoder::~Encoder() {
 8000bfc:	b480      	push	{r7}
 8000bfe:	b083      	sub	sp, #12
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
 8000c04:	4a04      	ldr	r2, [pc, #16]	; (8000c18 <_ZN10LL_Control7EncoderD1Ev+0x1c>)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	370c      	adds	r7, #12
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr
 8000c18:	08017bc8 	.word	0x08017bc8

08000c1c <_ZN10LL_Control7EncoderD0Ev>:
LL_Control::Encoder::~Encoder() {
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
}
 8000c24:	6878      	ldr	r0, [r7, #4]
 8000c26:	f7ff ffe9 	bl	8000bfc <_ZN10LL_Control7EncoderD1Ev>
 8000c2a:	211c      	movs	r1, #28
 8000c2c:	6878      	ldr	r0, [r7, #4]
 8000c2e:	f012 fbdd 	bl	80133ec <_ZdlPvj>
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	4618      	mov	r0, r3
 8000c36:	3708      	adds	r7, #8
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}

08000c3c <_ZN10LL_Control7Encoder11set_ticksPREi>:
void LL_Control::Encoder::set_ticksPR(int ticks){
 8000c3c:	b480      	push	{r7}
 8000c3e:	b083      	sub	sp, #12
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
 8000c44:	6039      	str	r1, [r7, #0]
	ticksPerRevolution = ticks;
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	683a      	ldr	r2, [r7, #0]
 8000c4a:	60da      	str	r2, [r3, #12]
}
 8000c4c:	bf00      	nop
 8000c4e:	370c      	adds	r7, #12
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr

08000c58 <_ZN10LL_Control7Encoder14set_encoderResEf>:
void LL_Control::Encoder::set_encoderRes(float res){
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
 8000c60:	ed87 0a00 	vstr	s0, [r7]
	encoderRes = res;
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	683a      	ldr	r2, [r7, #0]
 8000c68:	609a      	str	r2, [r3, #8]
	set_ticksPR((int) std::ceil(res) );
 8000c6a:	ed97 0a00 	vldr	s0, [r7]
 8000c6e:	f7ff ff97 	bl	8000ba0 <_ZSt4ceilf>
 8000c72:	eef0 7a40 	vmov.f32	s15, s0
 8000c76:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c7a:	ee17 1a90 	vmov	r1, s15
 8000c7e:	6878      	ldr	r0, [r7, #4]
 8000c80:	f7ff ffdc 	bl	8000c3c <_ZN10LL_Control7Encoder11set_ticksPREi>
}
 8000c84:	bf00      	nop
 8000c86:	3708      	adds	r7, #8
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}

08000c8c <_ZN10LL_Control7Encoder7get_velEv>:
float LL_Control::Encoder::get_vel(){
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
	return vel;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	699b      	ldr	r3, [r3, #24]
 8000c98:	ee07 3a90 	vmov	s15, r3
}
 8000c9c:	eeb0 0a67 	vmov.f32	s0, s15
 8000ca0:	370c      	adds	r7, #12
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr

08000caa <_ZN10LL_Control7Encoder13get_frequencyEv>:

int LL_Control::Encoder::get_frequency(){
 8000caa:	b480      	push	{r7}
 8000cac:	b083      	sub	sp, #12
 8000cae:	af00      	add	r7, sp, #0
 8000cb0:	6078      	str	r0, [r7, #4]
	return int_freq;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	691b      	ldr	r3, [r3, #16]
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	370c      	adds	r7, #12
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
	...

08000cc4 <_ZN10LL_Control7Encoder6updateEv>:

void LL_Control::Encoder::update(){
 8000cc4:	b480      	push	{r7}
 8000cc6:	b085      	sub	sp, #20
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]

	//HAL_GPIO_WritePin (GPIOE, GPIO_PIN_1, GPIO_PIN_SET);

	int tick =__HAL_TIM_GET_COUNTER(htimCounter);
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cd4:	60fb      	str	r3, [r7, #12]
	//int tick = htimCounter->Instance->CNT;

	// Code to avoid jumps when a revolution is completed
		// This basically happens when the encoder value changes drastically
		// from the last value to the new one
	if (std::abs(lastTick - tick) > ticksPerRevolution - 1){
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	68da      	ldr	r2, [r3, #12]
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	6959      	ldr	r1, [r3, #20]
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	1acb      	subs	r3, r1, r3
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	bfb8      	it	lt
 8000ce6:	425b      	neglt	r3, r3
 8000ce8:	429a      	cmp	r2, r3
 8000cea:	dc04      	bgt.n	8000cf6 <_ZN10LL_Control7Encoder6updateEv+0x32>
		tick -= ticksPerRevolution;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	68db      	ldr	r3, [r3, #12]
 8000cf0:	68fa      	ldr	r2, [r7, #12]
 8000cf2:	1ad3      	subs	r3, r2, r3
 8000cf4:	60fb      	str	r3, [r7, #12]
	}

	// Update angular velocities:
	//w_rightWheel = 2*pi*(lastTick_r - tick_r)/(encoderTickpRev*(0.02));
	vel = 2*pi*(lastTick - tick)*1000/(encoderRes*int_freq);
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	695a      	ldr	r2, [r3, #20]
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	1ad3      	subs	r3, r2, r3
 8000cfe:	ee07 3a90 	vmov	s15, r3
 8000d02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d06:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8000d48 <_ZN10LL_Control7Encoder6updateEv+0x84>
 8000d0a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d0e:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8000d4c <_ZN10LL_Control7Encoder6updateEv+0x88>
 8000d12:	ee67 6a87 	vmul.f32	s13, s15, s14
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	ed93 7a02 	vldr	s14, [r3, #8]
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	691b      	ldr	r3, [r3, #16]
 8000d20:	ee07 3a90 	vmov	s15, r3
 8000d24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d28:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000d2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	edc3 7a06 	vstr	s15, [r3, #24]

	// Update last readout
	lastTick = tick;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	68fa      	ldr	r2, [r7, #12]
 8000d3a:	615a      	str	r2, [r3, #20]
}
 8000d3c:	bf00      	nop
 8000d3e:	3714      	adds	r7, #20
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr
 8000d48:	40c90ff9 	.word	0x40c90ff9
 8000d4c:	447a0000 	.word	0x447a0000

08000d50 <_ZN8JoystickC1EP17ADC_HandleTypeDefS1_>:
 *      Author: serfa
 */

#include "Joystick.hpp"

Joystick::Joystick(ADC_HandleTypeDef *_hadc1, ADC_HandleTypeDef *_hadc2) {
 8000d50:	b480      	push	{r7}
 8000d52:	b085      	sub	sp, #20
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	60f8      	str	r0, [r7, #12]
 8000d58:	60b9      	str	r1, [r7, #8]
 8000d5a:	607a      	str	r2, [r7, #4]
	hadc1 = _hadc1;
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	68ba      	ldr	r2, [r7, #8]
 8000d60:	605a      	str	r2, [r3, #4]
	hadc2 = _hadc2;
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	687a      	ldr	r2, [r7, #4]
 8000d66:	609a      	str	r2, [r3, #8]
    out_min = -1;
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	f04f 32ff 	mov.w	r2, #4294967295
 8000d6e:	629a      	str	r2, [r3, #40]	; 0x28
    out_max =  1;
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	2201      	movs	r2, #1
 8000d74:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	4618      	mov	r0, r3
 8000d7a:	3714      	adds	r7, #20
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr

08000d84 <_ZN8Joystick4readEv>:
void Joystick::read(){
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start(hadc1);
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	4618      	mov	r0, r3
 8000d92:	f003 fabf 	bl	8004314 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(hadc1, HAL_MAX_DELAY);
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	f04f 31ff 	mov.w	r1, #4294967295
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f003 fb82 	bl	80044a8 <HAL_ADC_PollForConversion>
    x_adc = HAL_ADC_GetValue(hadc1);
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	4618      	mov	r0, r3
 8000daa:	f003 fc71 	bl	8004690 <HAL_ADC_GetValue>
 8000dae:	4603      	mov	r3, r0
 8000db0:	b29a      	uxth	r2, r3
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	819a      	strh	r2, [r3, #12]
    x_axis = x_adc / 1000;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	899b      	ldrh	r3, [r3, #12]
 8000dba:	4a19      	ldr	r2, [pc, #100]	; (8000e20 <_ZN8Joystick4readEv+0x9c>)
 8000dbc:	fba2 2303 	umull	r2, r3, r2, r3
 8000dc0:	099b      	lsrs	r3, r3, #6
 8000dc2:	b29b      	uxth	r3, r3
 8000dc4:	ee07 3a90 	vmov	s15, r3
 8000dc8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	edc3 7a04 	vstr	s15, [r3, #16]
    HAL_ADC_Start(hadc2);
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	689b      	ldr	r3, [r3, #8]
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f003 fa9c 	bl	8004314 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(hadc2, HAL_MAX_DELAY);
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	689b      	ldr	r3, [r3, #8]
 8000de0:	f04f 31ff 	mov.w	r1, #4294967295
 8000de4:	4618      	mov	r0, r3
 8000de6:	f003 fb5f 	bl	80044a8 <HAL_ADC_PollForConversion>
    y_adc = HAL_ADC_GetValue(hadc2);
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	689b      	ldr	r3, [r3, #8]
 8000dee:	4618      	mov	r0, r3
 8000df0:	f003 fc4e 	bl	8004690 <HAL_ADC_GetValue>
 8000df4:	4603      	mov	r3, r0
 8000df6:	b29a      	uxth	r2, r3
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	81da      	strh	r2, [r3, #14]
    y_axis = y_adc / 1000;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	89db      	ldrh	r3, [r3, #14]
 8000e00:	4a07      	ldr	r2, [pc, #28]	; (8000e20 <_ZN8Joystick4readEv+0x9c>)
 8000e02:	fba2 2303 	umull	r2, r3, r2, r3
 8000e06:	099b      	lsrs	r3, r3, #6
 8000e08:	b29b      	uxth	r3, r3
 8000e0a:	ee07 3a90 	vmov	s15, r3
 8000e0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	edc3 7a05 	vstr	s15, [r3, #20]
}
 8000e18:	bf00      	nop
 8000e1a:	3708      	adds	r7, #8
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	10624dd3 	.word	0x10624dd3

08000e24 <_ZN8Joystick3mapEfii>:
float Joystick::map(float x, int in_min, int in_max){
 8000e24:	b480      	push	{r7}
 8000e26:	b085      	sub	sp, #20
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	60f8      	str	r0, [r7, #12]
 8000e2c:	ed87 0a02 	vstr	s0, [r7, #8]
 8000e30:	6079      	str	r1, [r7, #4]
 8000e32:	603a      	str	r2, [r7, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	ee07 3a90 	vmov	s15, r3
 8000e3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e3e:	ed97 7a02 	vldr	s14, [r7, #8]
 8000e42:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e4e:	1ad3      	subs	r3, r2, r3
 8000e50:	ee07 3a90 	vmov	s15, r3
 8000e54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e58:	ee67 6a27 	vmul.f32	s13, s14, s15
 8000e5c:	683a      	ldr	r2, [r7, #0]
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	1ad3      	subs	r3, r2, r3
 8000e62:	ee07 3a90 	vmov	s15, r3
 8000e66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e72:	ee07 3a90 	vmov	s15, r3
 8000e76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e7a:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8000e7e:	eeb0 0a67 	vmov.f32	s0, s15
 8000e82:	3714      	adds	r7, #20
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr

08000e8c <_ZN8Joystick7set_posEv>:
void Joystick::set_pos(){
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
	x_pos = map(x_axis, 25, 65);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	edd3 7a04 	vldr	s15, [r3, #16]
 8000e9a:	2241      	movs	r2, #65	; 0x41
 8000e9c:	2119      	movs	r1, #25
 8000e9e:	eeb0 0a67 	vmov.f32	s0, s15
 8000ea2:	6878      	ldr	r0, [r7, #4]
 8000ea4:	f7ff ffbe 	bl	8000e24 <_ZN8Joystick3mapEfii>
 8000ea8:	eef0 7a40 	vmov.f32	s15, s0
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	edc3 7a06 	vstr	s15, [r3, #24]
	y_pos = map(y_axis, 1, 65);
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	edd3 7a05 	vldr	s15, [r3, #20]
 8000eb8:	2241      	movs	r2, #65	; 0x41
 8000eba:	2101      	movs	r1, #1
 8000ebc:	eeb0 0a67 	vmov.f32	s0, s15
 8000ec0:	6878      	ldr	r0, [r7, #4]
 8000ec2:	f7ff ffaf 	bl	8000e24 <_ZN8Joystick3mapEfii>
 8000ec6:	eef0 7a40 	vmov.f32	s15, s0
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	edc3 7a07 	vstr	s15, [r3, #28]

	if(x_pos < -1){
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	edd3 7a06 	vldr	s15, [r3, #24]
 8000ed6:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8000eda:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ede:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ee2:	d502      	bpl.n	8000eea <_ZN8Joystick7set_posEv+0x5e>
	    	x_pos = -1;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	4a30      	ldr	r2, [pc, #192]	; (8000fa8 <_ZN8Joystick7set_posEv+0x11c>)
 8000ee8:	619a      	str	r2, [r3, #24]
	}
	if(y_pos < -1){
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	edd3 7a07 	vldr	s15, [r3, #28]
 8000ef0:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8000ef4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ef8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000efc:	d502      	bpl.n	8000f04 <_ZN8Joystick7set_posEv+0x78>
	        y_pos = -1;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	4a29      	ldr	r2, [pc, #164]	; (8000fa8 <_ZN8Joystick7set_posEv+0x11c>)
 8000f02:	61da      	str	r2, [r3, #28]
	}
	if(x_pos > 1){
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	edd3 7a06 	vldr	s15, [r3, #24]
 8000f0a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000f0e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f16:	dd03      	ble.n	8000f20 <_ZN8Joystick7set_posEv+0x94>
	    	x_pos = 1;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000f1e:	619a      	str	r2, [r3, #24]
	}
	if(y_pos > 1){
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	edd3 7a07 	vldr	s15, [r3, #28]
 8000f26:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000f2a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f32:	dd03      	ble.n	8000f3c <_ZN8Joystick7set_posEv+0xb0>
	        y_pos = 1;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000f3a:	61da      	str	r2, [r3, #28]
	}

	if((x_axis < 50) && (x_axis > 20)){
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	edd3 7a04 	vldr	s15, [r3, #16]
 8000f42:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8000fac <_ZN8Joystick7set_posEv+0x120>
 8000f46:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f4e:	d50d      	bpl.n	8000f6c <_ZN8Joystick7set_posEv+0xe0>
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	edd3 7a04 	vldr	s15, [r3, #16]
 8000f56:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8000f5a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f62:	dd03      	ble.n	8000f6c <_ZN8Joystick7set_posEv+0xe0>
		x_pos = 0;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	f04f 0200 	mov.w	r2, #0
 8000f6a:	619a      	str	r2, [r3, #24]
	}
	if((y_axis < 50) && (y_axis > 20)){
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	edd3 7a05 	vldr	s15, [r3, #20]
 8000f72:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8000fac <_ZN8Joystick7set_posEv+0x120>
 8000f76:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f7e:	d400      	bmi.n	8000f82 <_ZN8Joystick7set_posEv+0xf6>
	    y_pos = 0;
	}

}
 8000f80:	e00e      	b.n	8000fa0 <_ZN8Joystick7set_posEv+0x114>
	if((y_axis < 50) && (y_axis > 20)){
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	edd3 7a05 	vldr	s15, [r3, #20]
 8000f88:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8000f8c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f94:	dc00      	bgt.n	8000f98 <_ZN8Joystick7set_posEv+0x10c>
}
 8000f96:	e003      	b.n	8000fa0 <_ZN8Joystick7set_posEv+0x114>
	    y_pos = 0;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	f04f 0200 	mov.w	r2, #0
 8000f9e:	61da      	str	r2, [r3, #28]
}
 8000fa0:	bf00      	nop
 8000fa2:	3708      	adds	r7, #8
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	bf800000 	.word	0xbf800000
 8000fac:	42480000 	.word	0x42480000

08000fb0 <_ZN8Joystick8get_xPosEv>:
float Joystick::get_xPos(){
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
	return x_pos;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	699b      	ldr	r3, [r3, #24]
 8000fbc:	ee07 3a90 	vmov	s15, r3
}
 8000fc0:	eeb0 0a67 	vmov.f32	s0, s15
 8000fc4:	370c      	adds	r7, #12
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr

08000fce <_ZN8Joystick8get_yPosEv>:
float Joystick::get_yPos(){
 8000fce:	b480      	push	{r7}
 8000fd0:	b083      	sub	sp, #12
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	6078      	str	r0, [r7, #4]
	return y_pos;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	69db      	ldr	r3, [r3, #28]
 8000fda:	ee07 3a90 	vmov	s15, r3
}
 8000fde:	eeb0 0a67 	vmov.f32	s0, s15
 8000fe2:	370c      	adds	r7, #12
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr

08000fec <_ZN8Joystick8get_xADCEv>:
uint16_t Joystick::get_xADC()
{
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
	return x_adc;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	899b      	ldrh	r3, [r3, #12]
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	370c      	adds	r7, #12
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr

08001004 <_ZN8Joystick8get_yADCEv>:
uint16_t Joystick::get_yADC()
{
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
	return y_adc;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	89db      	ldrh	r3, [r3, #14]
}
 8001010:	4618      	mov	r0, r3
 8001012:	370c      	adds	r7, #12
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr

0800101c <_ZN6KeypadC1EP19__I2C_HandleTypeDef>:
 */

#include "Keypad.hpp"
//extern I2C_HandleTypeDef hi2c1;

Keypad::Keypad(I2C_HandleTypeDef *_hi2c)
 800101c:	b4b0      	push	{r4, r5, r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
 8001024:	6039      	str	r1, [r7, #0]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4a0b      	ldr	r2, [pc, #44]	; (8001058 <_ZN6KeypadC1EP19__I2C_HandleTypeDef+0x3c>)
 800102a:	f103 0411 	add.w	r4, r3, #17
 800102e:	4615      	mov	r5, r2
 8001030:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001032:	6020      	str	r0, [r4, #0]
 8001034:	6061      	str	r1, [r4, #4]
 8001036:	60a2      	str	r2, [r4, #8]
 8001038:	60e3      	str	r3, [r4, #12]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4a07      	ldr	r2, [pc, #28]	; (800105c <_ZN6KeypadC1EP19__I2C_HandleTypeDef+0x40>)
 800103e:	3321      	adds	r3, #33	; 0x21
 8001040:	6810      	ldr	r0, [r2, #0]
 8001042:	6018      	str	r0, [r3, #0]
{
	hi2c1 = _hi2c; 
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	683a      	ldr	r2, [r7, #0]
 8001048:	60da      	str	r2, [r3, #12]
}
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	4618      	mov	r0, r3
 800104e:	370c      	adds	r7, #12
 8001050:	46bd      	mov	sp, r7
 8001052:	bcb0      	pop	{r4, r5, r7}
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	08017ae0 	.word	0x08017ae0
 800105c:	08017af0 	.word	0x08017af0

08001060 <_ZN6Keypad12lcd_send_cmdEc>:
void Keypad::lcd_send_cmd (char cmd)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b086      	sub	sp, #24
 8001064:	af02      	add	r7, sp, #8
 8001066:	6078      	str	r0, [r7, #4]
 8001068:	460b      	mov	r3, r1
 800106a:	70fb      	strb	r3, [r7, #3]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800106c:	78fb      	ldrb	r3, [r7, #3]
 800106e:	f023 030f 	bic.w	r3, r3, #15
 8001072:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8001074:	78fb      	ldrb	r3, [r7, #3]
 8001076:	011b      	lsls	r3, r3, #4
 8001078:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800107a:	7bfb      	ldrb	r3, [r7, #15]
 800107c:	f043 030c 	orr.w	r3, r3, #12
 8001080:	b2db      	uxtb	r3, r3
 8001082:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8001084:	7bfb      	ldrb	r3, [r7, #15]
 8001086:	f043 0308 	orr.w	r3, r3, #8
 800108a:	b2db      	uxtb	r3, r3
 800108c:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 800108e:	7bbb      	ldrb	r3, [r7, #14]
 8001090:	f043 030c 	orr.w	r3, r3, #12
 8001094:	b2db      	uxtb	r3, r3
 8001096:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8001098:	7bbb      	ldrb	r3, [r7, #14]
 800109a:	f043 0308 	orr.w	r3, r3, #8
 800109e:	b2db      	uxtb	r3, r3
 80010a0:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	68d8      	ldr	r0, [r3, #12]
 80010a6:	f107 0208 	add.w	r2, r7, #8
 80010aa:	2364      	movs	r3, #100	; 0x64
 80010ac:	9300      	str	r3, [sp, #0]
 80010ae:	2304      	movs	r3, #4
 80010b0:	214e      	movs	r1, #78	; 0x4e
 80010b2:	f006 fe8b 	bl	8007dcc <HAL_I2C_Master_Transmit>
}  
 80010b6:	bf00      	nop
 80010b8:	3710      	adds	r7, #16
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}

080010be <_ZN6Keypad13lcd_send_dataEc>:
void Keypad::lcd_send_data (char data)
{
 80010be:	b580      	push	{r7, lr}
 80010c0:	b086      	sub	sp, #24
 80010c2:	af02      	add	r7, sp, #8
 80010c4:	6078      	str	r0, [r7, #4]
 80010c6:	460b      	mov	r3, r1
 80010c8:	70fb      	strb	r3, [r7, #3]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80010ca:	78fb      	ldrb	r3, [r7, #3]
 80010cc:	f023 030f 	bic.w	r3, r3, #15
 80010d0:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80010d2:	78fb      	ldrb	r3, [r7, #3]
 80010d4:	011b      	lsls	r3, r3, #4
 80010d6:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80010d8:	7bfb      	ldrb	r3, [r7, #15]
 80010da:	f043 030d 	orr.w	r3, r3, #13
 80010de:	b2db      	uxtb	r3, r3
 80010e0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80010e2:	7bfb      	ldrb	r3, [r7, #15]
 80010e4:	f043 0309 	orr.w	r3, r3, #9
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80010ec:	7bbb      	ldrb	r3, [r7, #14]
 80010ee:	f043 030d 	orr.w	r3, r3, #13
 80010f2:	b2db      	uxtb	r3, r3
 80010f4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80010f6:	7bbb      	ldrb	r3, [r7, #14]
 80010f8:	f043 0309 	orr.w	r3, r3, #9
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	68d8      	ldr	r0, [r3, #12]
 8001104:	f107 0208 	add.w	r2, r7, #8
 8001108:	2364      	movs	r3, #100	; 0x64
 800110a:	9300      	str	r3, [sp, #0]
 800110c:	2304      	movs	r3, #4
 800110e:	214e      	movs	r1, #78	; 0x4e
 8001110:	f006 fe5c 	bl	8007dcc <HAL_I2C_Master_Transmit>
}
 8001114:	bf00      	nop
 8001116:	3710      	adds	r7, #16
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}

0800111c <_ZN6Keypad15lcd_send_stringEPc>:
void Keypad::lcd_send_string (char *str)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
 8001124:	6039      	str	r1, [r7, #0]
	while (*str) lcd_send_data (*str++);
 8001126:	e007      	b.n	8001138 <_ZN6Keypad15lcd_send_stringEPc+0x1c>
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	1c5a      	adds	r2, r3, #1
 800112c:	603a      	str	r2, [r7, #0]
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	4619      	mov	r1, r3
 8001132:	6878      	ldr	r0, [r7, #4]
 8001134:	f7ff ffc3 	bl	80010be <_ZN6Keypad13lcd_send_dataEc>
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d1f3      	bne.n	8001128 <_ZN6Keypad15lcd_send_stringEPc+0xc>
}
 8001140:	bf00      	nop
 8001142:	bf00      	nop
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}

0800114a <_ZN6Keypad11lcd_put_curEii>:
void Keypad::lcd_put_cur(int row, int col)
{
 800114a:	b580      	push	{r7, lr}
 800114c:	b084      	sub	sp, #16
 800114e:	af00      	add	r7, sp, #0
 8001150:	60f8      	str	r0, [r7, #12]
 8001152:	60b9      	str	r1, [r7, #8]
 8001154:	607a      	str	r2, [r7, #4]
	switch (row)
 8001156:	68bb      	ldr	r3, [r7, #8]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d003      	beq.n	8001164 <_ZN6Keypad11lcd_put_curEii+0x1a>
 800115c:	68bb      	ldr	r3, [r7, #8]
 800115e:	2b01      	cmp	r3, #1
 8001160:	d005      	beq.n	800116e <_ZN6Keypad11lcd_put_curEii+0x24>
 8001162:	e009      	b.n	8001178 <_ZN6Keypad11lcd_put_curEii+0x2e>
    {
        case 0:
            col |= 0x80;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800116a:	607b      	str	r3, [r7, #4]
            break;
 800116c:	e004      	b.n	8001178 <_ZN6Keypad11lcd_put_curEii+0x2e>
        case 1:
            col |= 0xC0;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001174:	607b      	str	r3, [r7, #4]
            break;
 8001176:	bf00      	nop
    }

    lcd_send_cmd (col);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	b2db      	uxtb	r3, r3
 800117c:	4619      	mov	r1, r3
 800117e:	68f8      	ldr	r0, [r7, #12]
 8001180:	f7ff ff6e 	bl	8001060 <_ZN6Keypad12lcd_send_cmdEc>
}
 8001184:	bf00      	nop
 8001186:	3710      	adds	r7, #16
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}

0800118c <_ZN6Keypad9lcd_clearEv>:
void Keypad::lcd_clear (void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b084      	sub	sp, #16
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
	lcd_send_cmd (0x80);
 8001194:	2180      	movs	r1, #128	; 0x80
 8001196:	6878      	ldr	r0, [r7, #4]
 8001198:	f7ff ff62 	bl	8001060 <_ZN6Keypad12lcd_send_cmdEc>
	for (int i=0; i<70; i++)
 800119c:	2300      	movs	r3, #0
 800119e:	60fb      	str	r3, [r7, #12]
 80011a0:	e006      	b.n	80011b0 <_ZN6Keypad9lcd_clearEv+0x24>
	{
		lcd_send_data (' ');
 80011a2:	2120      	movs	r1, #32
 80011a4:	6878      	ldr	r0, [r7, #4]
 80011a6:	f7ff ff8a 	bl	80010be <_ZN6Keypad13lcd_send_dataEc>
	for (int i=0; i<70; i++)
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	3301      	adds	r3, #1
 80011ae:	60fb      	str	r3, [r7, #12]
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	2b45      	cmp	r3, #69	; 0x45
 80011b4:	ddf5      	ble.n	80011a2 <_ZN6Keypad9lcd_clearEv+0x16>
	}
}
 80011b6:	bf00      	nop
 80011b8:	bf00      	nop
 80011ba:	3710      	adds	r7, #16
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}

080011c0 <_ZN6Keypad8lcd_initEv>:
void Keypad::lcd_init (void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 80011c8:	2032      	movs	r0, #50	; 0x32
 80011ca:	f002 fcef 	bl	8003bac <HAL_Delay>
	lcd_send_cmd (0x30);
 80011ce:	2130      	movs	r1, #48	; 0x30
 80011d0:	6878      	ldr	r0, [r7, #4]
 80011d2:	f7ff ff45 	bl	8001060 <_ZN6Keypad12lcd_send_cmdEc>
	HAL_Delay(5);  // wait for >4.1ms
 80011d6:	2005      	movs	r0, #5
 80011d8:	f002 fce8 	bl	8003bac <HAL_Delay>
	lcd_send_cmd (0x30);
 80011dc:	2130      	movs	r1, #48	; 0x30
 80011de:	6878      	ldr	r0, [r7, #4]
 80011e0:	f7ff ff3e 	bl	8001060 <_ZN6Keypad12lcd_send_cmdEc>
	HAL_Delay(1);  // wait for >100us
 80011e4:	2001      	movs	r0, #1
 80011e6:	f002 fce1 	bl	8003bac <HAL_Delay>
	lcd_send_cmd (0x30);
 80011ea:	2130      	movs	r1, #48	; 0x30
 80011ec:	6878      	ldr	r0, [r7, #4]
 80011ee:	f7ff ff37 	bl	8001060 <_ZN6Keypad12lcd_send_cmdEc>
	HAL_Delay(10);
 80011f2:	200a      	movs	r0, #10
 80011f4:	f002 fcda 	bl	8003bac <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 80011f8:	2120      	movs	r1, #32
 80011fa:	6878      	ldr	r0, [r7, #4]
 80011fc:	f7ff ff30 	bl	8001060 <_ZN6Keypad12lcd_send_cmdEc>
	HAL_Delay(10);
 8001200:	200a      	movs	r0, #10
 8001202:	f002 fcd3 	bl	8003bac <HAL_Delay>

  	// dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8001206:	2128      	movs	r1, #40	; 0x28
 8001208:	6878      	ldr	r0, [r7, #4]
 800120a:	f7ff ff29 	bl	8001060 <_ZN6Keypad12lcd_send_cmdEc>
	HAL_Delay(1);
 800120e:	2001      	movs	r0, #1
 8001210:	f002 fccc 	bl	8003bac <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8001214:	2108      	movs	r1, #8
 8001216:	6878      	ldr	r0, [r7, #4]
 8001218:	f7ff ff22 	bl	8001060 <_ZN6Keypad12lcd_send_cmdEc>
	HAL_Delay(1);
 800121c:	2001      	movs	r0, #1
 800121e:	f002 fcc5 	bl	8003bac <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8001222:	2101      	movs	r1, #1
 8001224:	6878      	ldr	r0, [r7, #4]
 8001226:	f7ff ff1b 	bl	8001060 <_ZN6Keypad12lcd_send_cmdEc>
	HAL_Delay(1);
 800122a:	2001      	movs	r0, #1
 800122c:	f002 fcbe 	bl	8003bac <HAL_Delay>
	HAL_Delay(1);
 8001230:	2001      	movs	r0, #1
 8001232:	f002 fcbb 	bl	8003bac <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8001236:	2106      	movs	r1, #6
 8001238:	6878      	ldr	r0, [r7, #4]
 800123a:	f7ff ff11 	bl	8001060 <_ZN6Keypad12lcd_send_cmdEc>
	HAL_Delay(1);
 800123e:	2001      	movs	r0, #1
 8001240:	f002 fcb4 	bl	8003bac <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8001244:	210c      	movs	r1, #12
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	f7ff ff0a 	bl	8001060 <_ZN6Keypad12lcd_send_cmdEc>
}   
 800124c:	bf00      	nop
 800124e:	3708      	adds	r7, #8
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}

08001254 <_ZN6Keypad11keypad_readEv>:
char Keypad::keypad_read()
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
	
  HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_RESET);
 800125c:	2200      	movs	r2, #0
 800125e:	2180      	movs	r1, #128	; 0x80
 8001260:	48b4      	ldr	r0, [pc, #720]	; (8001534 <_ZN6Keypad11keypad_readEv+0x2e0>)
 8001262:	f006 fcdb 	bl	8007c1c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, GPIO_PIN_SET);
 8001266:	2201      	movs	r2, #1
 8001268:	f44f 7180 	mov.w	r1, #256	; 0x100
 800126c:	48b1      	ldr	r0, [pc, #708]	; (8001534 <_ZN6Keypad11keypad_readEv+0x2e0>)
 800126e:	f006 fcd5 	bl	8007c1c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(R3_GPIO_Port, R3_Pin, GPIO_PIN_SET);
 8001272:	2201      	movs	r2, #1
 8001274:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001278:	48ae      	ldr	r0, [pc, #696]	; (8001534 <_ZN6Keypad11keypad_readEv+0x2e0>)
 800127a:	f006 fccf 	bl	8007c1c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(R4_GPIO_Port, R4_Pin, GPIO_PIN_SET);
 800127e:	2201      	movs	r2, #1
 8001280:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001284:	48ab      	ldr	r0, [pc, #684]	; (8001534 <_ZN6Keypad11keypad_readEv+0x2e0>)
 8001286:	f006 fcc9 	bl	8007c1c <HAL_GPIO_WritePin>

  if(!(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin))){
 800128a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800128e:	48a9      	ldr	r0, [pc, #676]	; (8001534 <_ZN6Keypad11keypad_readEv+0x2e0>)
 8001290:	f006 fcac 	bl	8007bec <HAL_GPIO_ReadPin>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	bf0c      	ite	eq
 800129a:	2301      	moveq	r3, #1
 800129c:	2300      	movne	r3, #0
 800129e:	b2db      	uxtb	r3, r3
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d017      	beq.n	80012d4 <_ZN6Keypad11keypad_readEv+0x80>
    HAL_Delay(4);
 80012a4:	2004      	movs	r0, #4
 80012a6:	f002 fc81 	bl	8003bac <HAL_Delay>
    while(!(HAL_GPIO_ReadPin (C1_GPIO_Port, C1_Pin)));
 80012aa:	bf00      	nop
 80012ac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012b0:	48a0      	ldr	r0, [pc, #640]	; (8001534 <_ZN6Keypad11keypad_readEv+0x2e0>)
 80012b2:	f006 fc9b 	bl	8007bec <HAL_GPIO_ReadPin>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	bf0c      	ite	eq
 80012bc:	2301      	moveq	r3, #1
 80012be:	2300      	movne	r3, #0
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d1f2      	bne.n	80012ac <_ZN6Keypad11keypad_readEv+0x58>
    HAL_Delay(4);
 80012c6:	2004      	movs	r0, #4
 80012c8:	f002 fc70 	bl	8003bac <HAL_Delay>
    val_key = keys[0][0];
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	7c5a      	ldrb	r2, [r3, #17]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	741a      	strb	r2, [r3, #16]
  }
  if(!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin))){
 80012d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012d8:	4896      	ldr	r0, [pc, #600]	; (8001534 <_ZN6Keypad11keypad_readEv+0x2e0>)
 80012da:	f006 fc87 	bl	8007bec <HAL_GPIO_ReadPin>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	bf0c      	ite	eq
 80012e4:	2301      	moveq	r3, #1
 80012e6:	2300      	movne	r3, #0
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d017      	beq.n	800131e <_ZN6Keypad11keypad_readEv+0xca>
    HAL_Delay(4);
 80012ee:	2004      	movs	r0, #4
 80012f0:	f002 fc5c 	bl	8003bac <HAL_Delay>
    while(!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin)));
 80012f4:	bf00      	nop
 80012f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012fa:	488e      	ldr	r0, [pc, #568]	; (8001534 <_ZN6Keypad11keypad_readEv+0x2e0>)
 80012fc:	f006 fc76 	bl	8007bec <HAL_GPIO_ReadPin>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	bf0c      	ite	eq
 8001306:	2301      	moveq	r3, #1
 8001308:	2300      	movne	r3, #0
 800130a:	b2db      	uxtb	r3, r3
 800130c:	2b00      	cmp	r3, #0
 800130e:	d1f2      	bne.n	80012f6 <_ZN6Keypad11keypad_readEv+0xa2>
    HAL_Delay(4);
 8001310:	2004      	movs	r0, #4
 8001312:	f002 fc4b 	bl	8003bac <HAL_Delay>
    val_key = keys[0][1];
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	7c9a      	ldrb	r2, [r3, #18]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	741a      	strb	r2, [r3, #16]
  }
  if(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin))){
 800131e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001322:	4884      	ldr	r0, [pc, #528]	; (8001534 <_ZN6Keypad11keypad_readEv+0x2e0>)
 8001324:	f006 fc62 	bl	8007bec <HAL_GPIO_ReadPin>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	bf0c      	ite	eq
 800132e:	2301      	moveq	r3, #1
 8001330:	2300      	movne	r3, #0
 8001332:	b2db      	uxtb	r3, r3
 8001334:	2b00      	cmp	r3, #0
 8001336:	d017      	beq.n	8001368 <_ZN6Keypad11keypad_readEv+0x114>
    HAL_Delay(4);
 8001338:	2004      	movs	r0, #4
 800133a:	f002 fc37 	bl	8003bac <HAL_Delay>
    while(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin)));
 800133e:	bf00      	nop
 8001340:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001344:	487b      	ldr	r0, [pc, #492]	; (8001534 <_ZN6Keypad11keypad_readEv+0x2e0>)
 8001346:	f006 fc51 	bl	8007bec <HAL_GPIO_ReadPin>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	bf0c      	ite	eq
 8001350:	2301      	moveq	r3, #1
 8001352:	2300      	movne	r3, #0
 8001354:	b2db      	uxtb	r3, r3
 8001356:	2b00      	cmp	r3, #0
 8001358:	d1f2      	bne.n	8001340 <_ZN6Keypad11keypad_readEv+0xec>
    HAL_Delay(4);
 800135a:	2004      	movs	r0, #4
 800135c:	f002 fc26 	bl	8003bac <HAL_Delay>
    val_key = keys[0][2];
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	7cda      	ldrb	r2, [r3, #19]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	741a      	strb	r2, [r3, #16]
  }
  if (!(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin))){
 8001368:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800136c:	4871      	ldr	r0, [pc, #452]	; (8001534 <_ZN6Keypad11keypad_readEv+0x2e0>)
 800136e:	f006 fc3d 	bl	8007bec <HAL_GPIO_ReadPin>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	bf0c      	ite	eq
 8001378:	2301      	moveq	r3, #1
 800137a:	2300      	movne	r3, #0
 800137c:	b2db      	uxtb	r3, r3
 800137e:	2b00      	cmp	r3, #0
 8001380:	d017      	beq.n	80013b2 <_ZN6Keypad11keypad_readEv+0x15e>
    HAL_Delay(4);
 8001382:	2004      	movs	r0, #4
 8001384:	f002 fc12 	bl	8003bac <HAL_Delay>
    while(!(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin)));
 8001388:	bf00      	nop
 800138a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800138e:	4869      	ldr	r0, [pc, #420]	; (8001534 <_ZN6Keypad11keypad_readEv+0x2e0>)
 8001390:	f006 fc2c 	bl	8007bec <HAL_GPIO_ReadPin>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	bf0c      	ite	eq
 800139a:	2301      	moveq	r3, #1
 800139c:	2300      	movne	r3, #0
 800139e:	b2db      	uxtb	r3, r3
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d1f2      	bne.n	800138a <_ZN6Keypad11keypad_readEv+0x136>
    HAL_Delay(4);
 80013a4:	2004      	movs	r0, #4
 80013a6:	f002 fc01 	bl	8003bac <HAL_Delay>
    val_key = keys[0][3];
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	7d1a      	ldrb	r2, [r3, #20]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	741a      	strb	r2, [r3, #16]
  }

  HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_SET);
 80013b2:	2201      	movs	r2, #1
 80013b4:	2180      	movs	r1, #128	; 0x80
 80013b6:	485f      	ldr	r0, [pc, #380]	; (8001534 <_ZN6Keypad11keypad_readEv+0x2e0>)
 80013b8:	f006 fc30 	bl	8007c1c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, GPIO_PIN_RESET);
 80013bc:	2200      	movs	r2, #0
 80013be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013c2:	485c      	ldr	r0, [pc, #368]	; (8001534 <_ZN6Keypad11keypad_readEv+0x2e0>)
 80013c4:	f006 fc2a 	bl	8007c1c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(R3_GPIO_Port, R3_Pin, GPIO_PIN_SET);
 80013c8:	2201      	movs	r2, #1
 80013ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013ce:	4859      	ldr	r0, [pc, #356]	; (8001534 <_ZN6Keypad11keypad_readEv+0x2e0>)
 80013d0:	f006 fc24 	bl	8007c1c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(R4_GPIO_Port, R4_Pin, GPIO_PIN_SET);
 80013d4:	2201      	movs	r2, #1
 80013d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013da:	4856      	ldr	r0, [pc, #344]	; (8001534 <_ZN6Keypad11keypad_readEv+0x2e0>)
 80013dc:	f006 fc1e 	bl	8007c1c <HAL_GPIO_WritePin>

  if(!(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin))){
 80013e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013e4:	4853      	ldr	r0, [pc, #332]	; (8001534 <_ZN6Keypad11keypad_readEv+0x2e0>)
 80013e6:	f006 fc01 	bl	8007bec <HAL_GPIO_ReadPin>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	bf0c      	ite	eq
 80013f0:	2301      	moveq	r3, #1
 80013f2:	2300      	movne	r3, #0
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d017      	beq.n	800142a <_ZN6Keypad11keypad_readEv+0x1d6>
    HAL_Delay(4);
 80013fa:	2004      	movs	r0, #4
 80013fc:	f002 fbd6 	bl	8003bac <HAL_Delay>
    while(!(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin)));
 8001400:	bf00      	nop
 8001402:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001406:	484b      	ldr	r0, [pc, #300]	; (8001534 <_ZN6Keypad11keypad_readEv+0x2e0>)
 8001408:	f006 fbf0 	bl	8007bec <HAL_GPIO_ReadPin>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	bf0c      	ite	eq
 8001412:	2301      	moveq	r3, #1
 8001414:	2300      	movne	r3, #0
 8001416:	b2db      	uxtb	r3, r3
 8001418:	2b00      	cmp	r3, #0
 800141a:	d1f2      	bne.n	8001402 <_ZN6Keypad11keypad_readEv+0x1ae>
    HAL_Delay(4);
 800141c:	2004      	movs	r0, #4
 800141e:	f002 fbc5 	bl	8003bac <HAL_Delay>
    val_key = keys[1][0];
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	7d5a      	ldrb	r2, [r3, #21]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	741a      	strb	r2, [r3, #16]
  }
  if(!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin))){
 800142a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800142e:	4841      	ldr	r0, [pc, #260]	; (8001534 <_ZN6Keypad11keypad_readEv+0x2e0>)
 8001430:	f006 fbdc 	bl	8007bec <HAL_GPIO_ReadPin>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	bf0c      	ite	eq
 800143a:	2301      	moveq	r3, #1
 800143c:	2300      	movne	r3, #0
 800143e:	b2db      	uxtb	r3, r3
 8001440:	2b00      	cmp	r3, #0
 8001442:	d017      	beq.n	8001474 <_ZN6Keypad11keypad_readEv+0x220>
    HAL_Delay(4);
 8001444:	2004      	movs	r0, #4
 8001446:	f002 fbb1 	bl	8003bac <HAL_Delay>
    while(!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin)));
 800144a:	bf00      	nop
 800144c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001450:	4838      	ldr	r0, [pc, #224]	; (8001534 <_ZN6Keypad11keypad_readEv+0x2e0>)
 8001452:	f006 fbcb 	bl	8007bec <HAL_GPIO_ReadPin>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	bf0c      	ite	eq
 800145c:	2301      	moveq	r3, #1
 800145e:	2300      	movne	r3, #0
 8001460:	b2db      	uxtb	r3, r3
 8001462:	2b00      	cmp	r3, #0
 8001464:	d1f2      	bne.n	800144c <_ZN6Keypad11keypad_readEv+0x1f8>
    HAL_Delay(4);
 8001466:	2004      	movs	r0, #4
 8001468:	f002 fba0 	bl	8003bac <HAL_Delay>
    val_key = keys[1][1];
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	7d9a      	ldrb	r2, [r3, #22]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	741a      	strb	r2, [r3, #16]
    }
  if(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin))){
 8001474:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001478:	482e      	ldr	r0, [pc, #184]	; (8001534 <_ZN6Keypad11keypad_readEv+0x2e0>)
 800147a:	f006 fbb7 	bl	8007bec <HAL_GPIO_ReadPin>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	bf0c      	ite	eq
 8001484:	2301      	moveq	r3, #1
 8001486:	2300      	movne	r3, #0
 8001488:	b2db      	uxtb	r3, r3
 800148a:	2b00      	cmp	r3, #0
 800148c:	d017      	beq.n	80014be <_ZN6Keypad11keypad_readEv+0x26a>
    HAL_Delay(4);
 800148e:	2004      	movs	r0, #4
 8001490:	f002 fb8c 	bl	8003bac <HAL_Delay>
    while(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin)));
 8001494:	bf00      	nop
 8001496:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800149a:	4826      	ldr	r0, [pc, #152]	; (8001534 <_ZN6Keypad11keypad_readEv+0x2e0>)
 800149c:	f006 fba6 	bl	8007bec <HAL_GPIO_ReadPin>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	bf0c      	ite	eq
 80014a6:	2301      	moveq	r3, #1
 80014a8:	2300      	movne	r3, #0
 80014aa:	b2db      	uxtb	r3, r3
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d1f2      	bne.n	8001496 <_ZN6Keypad11keypad_readEv+0x242>
    HAL_Delay(4);
 80014b0:	2004      	movs	r0, #4
 80014b2:	f002 fb7b 	bl	8003bac <HAL_Delay>
    val_key = keys[1][2];
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	7dda      	ldrb	r2, [r3, #23]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	741a      	strb	r2, [r3, #16]
  }
  if(!(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin))){
 80014be:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014c2:	481c      	ldr	r0, [pc, #112]	; (8001534 <_ZN6Keypad11keypad_readEv+0x2e0>)
 80014c4:	f006 fb92 	bl	8007bec <HAL_GPIO_ReadPin>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	bf0c      	ite	eq
 80014ce:	2301      	moveq	r3, #1
 80014d0:	2300      	movne	r3, #0
 80014d2:	b2db      	uxtb	r3, r3
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d017      	beq.n	8001508 <_ZN6Keypad11keypad_readEv+0x2b4>
    HAL_Delay(4);
 80014d8:	2004      	movs	r0, #4
 80014da:	f002 fb67 	bl	8003bac <HAL_Delay>
    while(!(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin)));
 80014de:	bf00      	nop
 80014e0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014e4:	4813      	ldr	r0, [pc, #76]	; (8001534 <_ZN6Keypad11keypad_readEv+0x2e0>)
 80014e6:	f006 fb81 	bl	8007bec <HAL_GPIO_ReadPin>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	bf0c      	ite	eq
 80014f0:	2301      	moveq	r3, #1
 80014f2:	2300      	movne	r3, #0
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d1f2      	bne.n	80014e0 <_ZN6Keypad11keypad_readEv+0x28c>
    HAL_Delay(4);
 80014fa:	2004      	movs	r0, #4
 80014fc:	f002 fb56 	bl	8003bac <HAL_Delay>
    val_key = keys[1][3];
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	7e1a      	ldrb	r2, [r3, #24]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	741a      	strb	r2, [r3, #16]
  }

  HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_SET);
 8001508:	2201      	movs	r2, #1
 800150a:	2180      	movs	r1, #128	; 0x80
 800150c:	4809      	ldr	r0, [pc, #36]	; (8001534 <_ZN6Keypad11keypad_readEv+0x2e0>)
 800150e:	f006 fb85 	bl	8007c1c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, GPIO_PIN_SET);
 8001512:	2201      	movs	r2, #1
 8001514:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001518:	4806      	ldr	r0, [pc, #24]	; (8001534 <_ZN6Keypad11keypad_readEv+0x2e0>)
 800151a:	f006 fb7f 	bl	8007c1c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(R3_GPIO_Port, R3_Pin, GPIO_PIN_RESET);
 800151e:	2200      	movs	r2, #0
 8001520:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001524:	4803      	ldr	r0, [pc, #12]	; (8001534 <_ZN6Keypad11keypad_readEv+0x2e0>)
 8001526:	f006 fb79 	bl	8007c1c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(R4_GPIO_Port, R4_Pin, GPIO_PIN_SET);
 800152a:	2201      	movs	r2, #1
 800152c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001530:	e002      	b.n	8001538 <_ZN6Keypad11keypad_readEv+0x2e4>
 8001532:	bf00      	nop
 8001534:	58021000 	.word	0x58021000
 8001538:	48a4      	ldr	r0, [pc, #656]	; (80017cc <_ZN6Keypad11keypad_readEv+0x578>)
 800153a:	f006 fb6f 	bl	8007c1c <HAL_GPIO_WritePin>

  if(!(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin))){
 800153e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001542:	48a2      	ldr	r0, [pc, #648]	; (80017cc <_ZN6Keypad11keypad_readEv+0x578>)
 8001544:	f006 fb52 	bl	8007bec <HAL_GPIO_ReadPin>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	bf0c      	ite	eq
 800154e:	2301      	moveq	r3, #1
 8001550:	2300      	movne	r3, #0
 8001552:	b2db      	uxtb	r3, r3
 8001554:	2b00      	cmp	r3, #0
 8001556:	d017      	beq.n	8001588 <_ZN6Keypad11keypad_readEv+0x334>
    HAL_Delay(4);
 8001558:	2004      	movs	r0, #4
 800155a:	f002 fb27 	bl	8003bac <HAL_Delay>
    while(!(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin)));
 800155e:	bf00      	nop
 8001560:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001564:	4899      	ldr	r0, [pc, #612]	; (80017cc <_ZN6Keypad11keypad_readEv+0x578>)
 8001566:	f006 fb41 	bl	8007bec <HAL_GPIO_ReadPin>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	bf0c      	ite	eq
 8001570:	2301      	moveq	r3, #1
 8001572:	2300      	movne	r3, #0
 8001574:	b2db      	uxtb	r3, r3
 8001576:	2b00      	cmp	r3, #0
 8001578:	d1f2      	bne.n	8001560 <_ZN6Keypad11keypad_readEv+0x30c>
    HAL_Delay(4);
 800157a:	2004      	movs	r0, #4
 800157c:	f002 fb16 	bl	8003bac <HAL_Delay>
    val_key = keys[2][0];
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	7e5a      	ldrb	r2, [r3, #25]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	741a      	strb	r2, [r3, #16]
  }
  if(!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin))){
 8001588:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800158c:	488f      	ldr	r0, [pc, #572]	; (80017cc <_ZN6Keypad11keypad_readEv+0x578>)
 800158e:	f006 fb2d 	bl	8007bec <HAL_GPIO_ReadPin>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	bf0c      	ite	eq
 8001598:	2301      	moveq	r3, #1
 800159a:	2300      	movne	r3, #0
 800159c:	b2db      	uxtb	r3, r3
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d017      	beq.n	80015d2 <_ZN6Keypad11keypad_readEv+0x37e>
    HAL_Delay(4);
 80015a2:	2004      	movs	r0, #4
 80015a4:	f002 fb02 	bl	8003bac <HAL_Delay>
    while(!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin)));
 80015a8:	bf00      	nop
 80015aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015ae:	4887      	ldr	r0, [pc, #540]	; (80017cc <_ZN6Keypad11keypad_readEv+0x578>)
 80015b0:	f006 fb1c 	bl	8007bec <HAL_GPIO_ReadPin>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	bf0c      	ite	eq
 80015ba:	2301      	moveq	r3, #1
 80015bc:	2300      	movne	r3, #0
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d1f2      	bne.n	80015aa <_ZN6Keypad11keypad_readEv+0x356>
    HAL_Delay(4);
 80015c4:	2004      	movs	r0, #4
 80015c6:	f002 faf1 	bl	8003bac <HAL_Delay>
    val_key = keys[2][1];
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	7e9a      	ldrb	r2, [r3, #26]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	741a      	strb	r2, [r3, #16]
  }
  if(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin))){
 80015d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015d6:	487d      	ldr	r0, [pc, #500]	; (80017cc <_ZN6Keypad11keypad_readEv+0x578>)
 80015d8:	f006 fb08 	bl	8007bec <HAL_GPIO_ReadPin>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	bf0c      	ite	eq
 80015e2:	2301      	moveq	r3, #1
 80015e4:	2300      	movne	r3, #0
 80015e6:	b2db      	uxtb	r3, r3
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d017      	beq.n	800161c <_ZN6Keypad11keypad_readEv+0x3c8>
    HAL_Delay(4);
 80015ec:	2004      	movs	r0, #4
 80015ee:	f002 fadd 	bl	8003bac <HAL_Delay>
    while(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin)));
 80015f2:	bf00      	nop
 80015f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015f8:	4874      	ldr	r0, [pc, #464]	; (80017cc <_ZN6Keypad11keypad_readEv+0x578>)
 80015fa:	f006 faf7 	bl	8007bec <HAL_GPIO_ReadPin>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	bf0c      	ite	eq
 8001604:	2301      	moveq	r3, #1
 8001606:	2300      	movne	r3, #0
 8001608:	b2db      	uxtb	r3, r3
 800160a:	2b00      	cmp	r3, #0
 800160c:	d1f2      	bne.n	80015f4 <_ZN6Keypad11keypad_readEv+0x3a0>
    HAL_Delay(4);
 800160e:	2004      	movs	r0, #4
 8001610:	f002 facc 	bl	8003bac <HAL_Delay>
    val_key = keys[2][2];
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	7eda      	ldrb	r2, [r3, #27]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	741a      	strb	r2, [r3, #16]
  }
  if(!(HAL_GPIO_ReadPin (C4_GPIO_Port, C4_Pin))){
 800161c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001620:	486a      	ldr	r0, [pc, #424]	; (80017cc <_ZN6Keypad11keypad_readEv+0x578>)
 8001622:	f006 fae3 	bl	8007bec <HAL_GPIO_ReadPin>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	bf0c      	ite	eq
 800162c:	2301      	moveq	r3, #1
 800162e:	2300      	movne	r3, #0
 8001630:	b2db      	uxtb	r3, r3
 8001632:	2b00      	cmp	r3, #0
 8001634:	d017      	beq.n	8001666 <_ZN6Keypad11keypad_readEv+0x412>
    HAL_Delay(4);
 8001636:	2004      	movs	r0, #4
 8001638:	f002 fab8 	bl	8003bac <HAL_Delay>
    while(!(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin)));
 800163c:	bf00      	nop
 800163e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001642:	4862      	ldr	r0, [pc, #392]	; (80017cc <_ZN6Keypad11keypad_readEv+0x578>)
 8001644:	f006 fad2 	bl	8007bec <HAL_GPIO_ReadPin>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	bf0c      	ite	eq
 800164e:	2301      	moveq	r3, #1
 8001650:	2300      	movne	r3, #0
 8001652:	b2db      	uxtb	r3, r3
 8001654:	2b00      	cmp	r3, #0
 8001656:	d1f2      	bne.n	800163e <_ZN6Keypad11keypad_readEv+0x3ea>
    HAL_Delay(4);
 8001658:	2004      	movs	r0, #4
 800165a:	f002 faa7 	bl	8003bac <HAL_Delay>
    val_key = keys[2][3];
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	7f1a      	ldrb	r2, [r3, #28]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	741a      	strb	r2, [r3, #16]
  }

  HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_SET);
 8001666:	2201      	movs	r2, #1
 8001668:	2180      	movs	r1, #128	; 0x80
 800166a:	4858      	ldr	r0, [pc, #352]	; (80017cc <_ZN6Keypad11keypad_readEv+0x578>)
 800166c:	f006 fad6 	bl	8007c1c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, GPIO_PIN_SET);
 8001670:	2201      	movs	r2, #1
 8001672:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001676:	4855      	ldr	r0, [pc, #340]	; (80017cc <_ZN6Keypad11keypad_readEv+0x578>)
 8001678:	f006 fad0 	bl	8007c1c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(R3_GPIO_Port, R3_Pin, GPIO_PIN_SET);
 800167c:	2201      	movs	r2, #1
 800167e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001682:	4852      	ldr	r0, [pc, #328]	; (80017cc <_ZN6Keypad11keypad_readEv+0x578>)
 8001684:	f006 faca 	bl	8007c1c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(R4_GPIO_Port, R4_Pin, GPIO_PIN_RESET);
 8001688:	2200      	movs	r2, #0
 800168a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800168e:	484f      	ldr	r0, [pc, #316]	; (80017cc <_ZN6Keypad11keypad_readEv+0x578>)
 8001690:	f006 fac4 	bl	8007c1c <HAL_GPIO_WritePin>

  if(!(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin))){
 8001694:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001698:	484c      	ldr	r0, [pc, #304]	; (80017cc <_ZN6Keypad11keypad_readEv+0x578>)
 800169a:	f006 faa7 	bl	8007bec <HAL_GPIO_ReadPin>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	bf0c      	ite	eq
 80016a4:	2301      	moveq	r3, #1
 80016a6:	2300      	movne	r3, #0
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d017      	beq.n	80016de <_ZN6Keypad11keypad_readEv+0x48a>
    HAL_Delay(4);
 80016ae:	2004      	movs	r0, #4
 80016b0:	f002 fa7c 	bl	8003bac <HAL_Delay>
    while(!(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin)));
 80016b4:	bf00      	nop
 80016b6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016ba:	4844      	ldr	r0, [pc, #272]	; (80017cc <_ZN6Keypad11keypad_readEv+0x578>)
 80016bc:	f006 fa96 	bl	8007bec <HAL_GPIO_ReadPin>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	bf0c      	ite	eq
 80016c6:	2301      	moveq	r3, #1
 80016c8:	2300      	movne	r3, #0
 80016ca:	b2db      	uxtb	r3, r3
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d1f2      	bne.n	80016b6 <_ZN6Keypad11keypad_readEv+0x462>
    HAL_Delay(4);
 80016d0:	2004      	movs	r0, #4
 80016d2:	f002 fa6b 	bl	8003bac <HAL_Delay>
    val_key = keys[3][0];
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	7f5a      	ldrb	r2, [r3, #29]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	741a      	strb	r2, [r3, #16]
  }
  if(!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin))){
 80016de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016e2:	483a      	ldr	r0, [pc, #232]	; (80017cc <_ZN6Keypad11keypad_readEv+0x578>)
 80016e4:	f006 fa82 	bl	8007bec <HAL_GPIO_ReadPin>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	bf0c      	ite	eq
 80016ee:	2301      	moveq	r3, #1
 80016f0:	2300      	movne	r3, #0
 80016f2:	b2db      	uxtb	r3, r3
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d017      	beq.n	8001728 <_ZN6Keypad11keypad_readEv+0x4d4>
    HAL_Delay(4);
 80016f8:	2004      	movs	r0, #4
 80016fa:	f002 fa57 	bl	8003bac <HAL_Delay>
    while (!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin)));
 80016fe:	bf00      	nop
 8001700:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001704:	4831      	ldr	r0, [pc, #196]	; (80017cc <_ZN6Keypad11keypad_readEv+0x578>)
 8001706:	f006 fa71 	bl	8007bec <HAL_GPIO_ReadPin>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	bf0c      	ite	eq
 8001710:	2301      	moveq	r3, #1
 8001712:	2300      	movne	r3, #0
 8001714:	b2db      	uxtb	r3, r3
 8001716:	2b00      	cmp	r3, #0
 8001718:	d1f2      	bne.n	8001700 <_ZN6Keypad11keypad_readEv+0x4ac>
    HAL_Delay(4);
 800171a:	2004      	movs	r0, #4
 800171c:	f002 fa46 	bl	8003bac <HAL_Delay>
    val_key = keys[3][1];
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	7f9a      	ldrb	r2, [r3, #30]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	741a      	strb	r2, [r3, #16]
  }
  if(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin))){
 8001728:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800172c:	4827      	ldr	r0, [pc, #156]	; (80017cc <_ZN6Keypad11keypad_readEv+0x578>)
 800172e:	f006 fa5d 	bl	8007bec <HAL_GPIO_ReadPin>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	bf0c      	ite	eq
 8001738:	2301      	moveq	r3, #1
 800173a:	2300      	movne	r3, #0
 800173c:	b2db      	uxtb	r3, r3
 800173e:	2b00      	cmp	r3, #0
 8001740:	d017      	beq.n	8001772 <_ZN6Keypad11keypad_readEv+0x51e>
    HAL_Delay(4);
 8001742:	2004      	movs	r0, #4
 8001744:	f002 fa32 	bl	8003bac <HAL_Delay>
    while(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin)));
 8001748:	bf00      	nop
 800174a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800174e:	481f      	ldr	r0, [pc, #124]	; (80017cc <_ZN6Keypad11keypad_readEv+0x578>)
 8001750:	f006 fa4c 	bl	8007bec <HAL_GPIO_ReadPin>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	bf0c      	ite	eq
 800175a:	2301      	moveq	r3, #1
 800175c:	2300      	movne	r3, #0
 800175e:	b2db      	uxtb	r3, r3
 8001760:	2b00      	cmp	r3, #0
 8001762:	d1f2      	bne.n	800174a <_ZN6Keypad11keypad_readEv+0x4f6>
    HAL_Delay(4);
 8001764:	2004      	movs	r0, #4
 8001766:	f002 fa21 	bl	8003bac <HAL_Delay>
    val_key = keys[3][2];
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	7fda      	ldrb	r2, [r3, #31]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	741a      	strb	r2, [r3, #16]
  }
  if(!(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin))){
 8001772:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001776:	4815      	ldr	r0, [pc, #84]	; (80017cc <_ZN6Keypad11keypad_readEv+0x578>)
 8001778:	f006 fa38 	bl	8007bec <HAL_GPIO_ReadPin>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	bf0c      	ite	eq
 8001782:	2301      	moveq	r3, #1
 8001784:	2300      	movne	r3, #0
 8001786:	b2db      	uxtb	r3, r3
 8001788:	2b00      	cmp	r3, #0
 800178a:	d018      	beq.n	80017be <_ZN6Keypad11keypad_readEv+0x56a>
    HAL_Delay(4);
 800178c:	2004      	movs	r0, #4
 800178e:	f002 fa0d 	bl	8003bac <HAL_Delay>
    while(!(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin)));
 8001792:	bf00      	nop
 8001794:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001798:	480c      	ldr	r0, [pc, #48]	; (80017cc <_ZN6Keypad11keypad_readEv+0x578>)
 800179a:	f006 fa27 	bl	8007bec <HAL_GPIO_ReadPin>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	bf0c      	ite	eq
 80017a4:	2301      	moveq	r3, #1
 80017a6:	2300      	movne	r3, #0
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d1f2      	bne.n	8001794 <_ZN6Keypad11keypad_readEv+0x540>
    HAL_Delay(4);
 80017ae:	2004      	movs	r0, #4
 80017b0:	f002 f9fc 	bl	8003bac <HAL_Delay>
    val_key = keys[3][3];
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	f893 2020 	ldrb.w	r2, [r3, #32]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	741a      	strb	r2, [r3, #16]
  }
  return val_key;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	7c1b      	ldrb	r3, [r3, #16]
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3708      	adds	r7, #8
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	58021000 	.word	0x58021000

080017d0 <_ZN6Keypad8is_validEc>:

bool Keypad::is_valid(char _key)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
 80017d8:	460b      	mov	r3, r1
 80017da:	70fb      	strb	r3, [r7, #3]
    
  if(_key == '0'){
 80017dc:	78fb      	ldrb	r3, [r7, #3]
 80017de:	2b30      	cmp	r3, #48	; 0x30
 80017e0:	d101      	bne.n	80017e6 <_ZN6Keypad8is_validEc+0x16>
	  return true;
 80017e2:	2301      	movs	r3, #1
 80017e4:	e02c      	b.n	8001840 <_ZN6Keypad8is_validEc+0x70>
  }
  if(_key == '1'){
 80017e6:	78fb      	ldrb	r3, [r7, #3]
 80017e8:	2b31      	cmp	r3, #49	; 0x31
 80017ea:	d101      	bne.n	80017f0 <_ZN6Keypad8is_validEc+0x20>
  	  return true;
 80017ec:	2301      	movs	r3, #1
 80017ee:	e027      	b.n	8001840 <_ZN6Keypad8is_validEc+0x70>
  }
  if(_key == '2'){
 80017f0:	78fb      	ldrb	r3, [r7, #3]
 80017f2:	2b32      	cmp	r3, #50	; 0x32
 80017f4:	d101      	bne.n	80017fa <_ZN6Keypad8is_validEc+0x2a>
  	  return true;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e022      	b.n	8001840 <_ZN6Keypad8is_validEc+0x70>
  }
  if(_key == '3'){
 80017fa:	78fb      	ldrb	r3, [r7, #3]
 80017fc:	2b33      	cmp	r3, #51	; 0x33
 80017fe:	d101      	bne.n	8001804 <_ZN6Keypad8is_validEc+0x34>
  	  return true;
 8001800:	2301      	movs	r3, #1
 8001802:	e01d      	b.n	8001840 <_ZN6Keypad8is_validEc+0x70>
  }
  if(_key == '4'){
 8001804:	78fb      	ldrb	r3, [r7, #3]
 8001806:	2b34      	cmp	r3, #52	; 0x34
 8001808:	d101      	bne.n	800180e <_ZN6Keypad8is_validEc+0x3e>
  	  return true;
 800180a:	2301      	movs	r3, #1
 800180c:	e018      	b.n	8001840 <_ZN6Keypad8is_validEc+0x70>
  }
  if(_key == '5'){
 800180e:	78fb      	ldrb	r3, [r7, #3]
 8001810:	2b35      	cmp	r3, #53	; 0x35
 8001812:	d101      	bne.n	8001818 <_ZN6Keypad8is_validEc+0x48>
  	  return true;
 8001814:	2301      	movs	r3, #1
 8001816:	e013      	b.n	8001840 <_ZN6Keypad8is_validEc+0x70>
  }
  if(_key == '6'){
 8001818:	78fb      	ldrb	r3, [r7, #3]
 800181a:	2b36      	cmp	r3, #54	; 0x36
 800181c:	d101      	bne.n	8001822 <_ZN6Keypad8is_validEc+0x52>
	  return true;
 800181e:	2301      	movs	r3, #1
 8001820:	e00e      	b.n	8001840 <_ZN6Keypad8is_validEc+0x70>
  }
  if(_key == '7'){
 8001822:	78fb      	ldrb	r3, [r7, #3]
 8001824:	2b37      	cmp	r3, #55	; 0x37
 8001826:	d101      	bne.n	800182c <_ZN6Keypad8is_validEc+0x5c>
	  return true;
 8001828:	2301      	movs	r3, #1
 800182a:	e009      	b.n	8001840 <_ZN6Keypad8is_validEc+0x70>
  }
  if(_key == '8'){
 800182c:	78fb      	ldrb	r3, [r7, #3]
 800182e:	2b38      	cmp	r3, #56	; 0x38
 8001830:	d101      	bne.n	8001836 <_ZN6Keypad8is_validEc+0x66>
	  return true;
 8001832:	2301      	movs	r3, #1
 8001834:	e004      	b.n	8001840 <_ZN6Keypad8is_validEc+0x70>
  }
  if(_key == '9'){
 8001836:	78fb      	ldrb	r3, [r7, #3]
 8001838:	2b39      	cmp	r3, #57	; 0x39
 800183a:	d101      	bne.n	8001840 <_ZN6Keypad8is_validEc+0x70>
	  return true;
 800183c:	2301      	movs	r3, #1
 800183e:	e7ff      	b.n	8001840 <_ZN6Keypad8is_validEc+0x70>
  }
}
 8001840:	4618      	mov	r0, r3
 8001842:	370c      	adds	r7, #12
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr

0800184c <_ZN6Keypad14check_passwordEPc>:
bool Keypad::check_password(char *_input)
{
 800184c:	b480      	push	{r7}
 800184e:	b085      	sub	sp, #20
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
 8001854:	6039      	str	r1, [r7, #0]

  int aciertos = 0;
 8001856:	2300      	movs	r3, #0
 8001858:	60fb      	str	r3, [r7, #12]
  for (int i = 0; i < 4; i++)
 800185a:	2300      	movs	r3, #0
 800185c:	60bb      	str	r3, [r7, #8]
 800185e:	e010      	b.n	8001882 <_ZN6Keypad14check_passwordEPc+0x36>
  {
    if (_input[i] == password[i])
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	683a      	ldr	r2, [r7, #0]
 8001864:	4413      	add	r3, r2
 8001866:	781a      	ldrb	r2, [r3, #0]
 8001868:	6879      	ldr	r1, [r7, #4]
 800186a:	68bb      	ldr	r3, [r7, #8]
 800186c:	440b      	add	r3, r1
 800186e:	3321      	adds	r3, #33	; 0x21
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	429a      	cmp	r2, r3
 8001874:	d102      	bne.n	800187c <_ZN6Keypad14check_passwordEPc+0x30>
    {
      aciertos++;
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	3301      	adds	r3, #1
 800187a:	60fb      	str	r3, [r7, #12]
  for (int i = 0; i < 4; i++)
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	3301      	adds	r3, #1
 8001880:	60bb      	str	r3, [r7, #8]
 8001882:	68bb      	ldr	r3, [r7, #8]
 8001884:	2b03      	cmp	r3, #3
 8001886:	ddeb      	ble.n	8001860 <_ZN6Keypad14check_passwordEPc+0x14>
    }
  }

  if(aciertos == 4){
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	2b04      	cmp	r3, #4
 800188c:	d101      	bne.n	8001892 <_ZN6Keypad14check_passwordEPc+0x46>
    return true;
 800188e:	2301      	movs	r3, #1
 8001890:	e000      	b.n	8001894 <_ZN6Keypad14check_passwordEPc+0x48>
  } else {
    return false;
 8001892:	2300      	movs	r3, #0
  }
}
 8001894:	4618      	mov	r0, r3
 8001896:	3714      	adds	r7, #20
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr

080018a0 <_ZN10LL_Control8Motor_PIC1EPNS_7EncoderEP17TIM_HandleTypeDefii>:
 *
 *
 * */


LL_Control::Motor_PI::Motor_PI(LL_Control::Encoder * e, TIM_HandleTypeDef * htim, int minFreq, int maxFreq) {
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b084      	sub	sp, #16
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	60f8      	str	r0, [r7, #12]
 80018a8:	60b9      	str	r1, [r7, #8]
 80018aa:	607a      	str	r2, [r7, #4]
 80018ac:	603b      	str	r3, [r7, #0]
 80018ae:	4a1c      	ldr	r2, [pc, #112]	; (8001920 <_ZN10LL_Control8Motor_PIC1EPNS_7EncoderEP17TIM_HandleTypeDefii+0x80>)
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	601a      	str	r2, [r3, #0]
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	2201      	movs	r2, #1
 80018b8:	619a      	str	r2, [r3, #24]
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80018c0:	629a      	str	r2, [r3, #40]	; 0x28
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80018c8:	62da      	str	r2, [r3, #44]	; 0x2c

	enc = e;
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	68ba      	ldr	r2, [r7, #8]
 80018ce:	605a      	str	r2, [r3, #4]
	htimPWM = htim;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	687a      	ldr	r2, [r7, #4]
 80018d4:	609a      	str	r2, [r3, #8]

	runFrequency = enc->get_frequency();
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	4618      	mov	r0, r3
 80018dc:	f7ff f9e5 	bl	8000caa <_ZN10LL_Control7Encoder13get_frequencyEv>
 80018e0:	4602      	mov	r2, r0
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	625a      	str	r2, [r3, #36]	; 0x24
    // Velocity
    set_MaxVel(32.0f);
 80018e6:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 8001924 <_ZN10LL_Control8Motor_PIC1EPNS_7EncoderEP17TIM_HandleTypeDefii+0x84>
 80018ea:	68f8      	ldr	r0, [r7, #12]
 80018ec:	f000 f840 	bl	8001970 <_ZN10LL_Control8Motor_PI10set_MaxVelEf>
    set_MinVel(-32.0f);
 80018f0:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8001928 <_ZN10LL_Control8Motor_PIC1EPNS_7EncoderEP17TIM_HandleTypeDefii+0x88>
 80018f4:	68f8      	ldr	r0, [r7, #12]
 80018f6:	f000 f84a 	bl	800198e <_ZN10LL_Control8Motor_PI10set_MinVelEf>
    // Frequency
    minFreqPWM = minFreq;
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	683a      	ldr	r2, [r7, #0]
 80018fe:	621a      	str	r2, [r3, #32]
    maxFreqPWM = maxFreq;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	69ba      	ldr	r2, [r7, #24]
 8001904:	61da      	str	r2, [r3, #28]
    // Threshold
    set_threshold(0.05);
 8001906:	ed9f 0a09 	vldr	s0, [pc, #36]	; 800192c <_ZN10LL_Control8Motor_PIC1EPNS_7EncoderEP17TIM_HandleTypeDefii+0x8c>
 800190a:	68f8      	ldr	r0, [r7, #12]
 800190c:	f000 f896 	bl	8001a3c <_ZN10LL_Control8Motor_PI13set_thresholdEf>

    // Don't move
    stop();
 8001910:	68f8      	ldr	r0, [r7, #12]
 8001912:	f000 f9c5 	bl	8001ca0 <_ZN10LL_Control8Motor_PI4stopEv>
}
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	4618      	mov	r0, r3
 800191a:	3710      	adds	r7, #16
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	08017bd8 	.word	0x08017bd8
 8001924:	42000000 	.word	0x42000000
 8001928:	c2000000 	.word	0xc2000000
 800192c:	3d4ccccd 	.word	0x3d4ccccd

08001930 <_ZN10LL_Control8Motor_PID1Ev>:

LL_Control::Motor_PI::~Motor_PI() {
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	4a04      	ldr	r2, [pc, #16]	; (800194c <_ZN10LL_Control8Motor_PID1Ev+0x1c>)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4618      	mov	r0, r3
 8001942:	370c      	adds	r7, #12
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr
 800194c:	08017bd8 	.word	0x08017bd8

08001950 <_ZN10LL_Control8Motor_PID0Ev>:
LL_Control::Motor_PI::~Motor_PI() {
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
}
 8001958:	6878      	ldr	r0, [r7, #4]
 800195a:	f7ff ffe9 	bl	8001930 <_ZN10LL_Control8Motor_PID1Ev>
 800195e:	214c      	movs	r1, #76	; 0x4c
 8001960:	6878      	ldr	r0, [r7, #4]
 8001962:	f011 fd43 	bl	80133ec <_ZdlPvj>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4618      	mov	r0, r3
 800196a:	3708      	adds	r7, #8
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}

08001970 <_ZN10LL_Control8Motor_PI10set_MaxVelEf>:

// ===== Setters =====

void LL_Control::Motor_PI::set_MaxVel(float nMax){
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
 8001978:	ed87 0a00 	vstr	s0, [r7]
	maxVel = nMax;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	683a      	ldr	r2, [r7, #0]
 8001980:	60da      	str	r2, [r3, #12]
}
 8001982:	bf00      	nop
 8001984:	370c      	adds	r7, #12
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr

0800198e <_ZN10LL_Control8Motor_PI10set_MinVelEf>:
void LL_Control::Motor_PI::set_MinVel(float nMin){
 800198e:	b480      	push	{r7}
 8001990:	b083      	sub	sp, #12
 8001992:	af00      	add	r7, sp, #0
 8001994:	6078      	str	r0, [r7, #4]
 8001996:	ed87 0a00 	vstr	s0, [r7]
	minVel = nMin;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	683a      	ldr	r2, [r7, #0]
 800199e:	611a      	str	r2, [r3, #16]
}
 80019a0:	bf00      	nop
 80019a2:	370c      	adds	r7, #12
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr

080019ac <_ZN10LL_Control8Motor_PI13set_referenceEf>:
void LL_Control::Motor_PI::set_reference(float ref){
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	ed87 0a00 	vstr	s0, [r7]
	// Limit the value if the ref is bigger
        // than our operational space
	if (ref > maxVel){
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	edd3 7a03 	vldr	s15, [r3, #12]
 80019be:	ed97 7a00 	vldr	s14, [r7]
 80019c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019ca:	dd03      	ble.n	80019d4 <_ZN10LL_Control8Motor_PI13set_referenceEf+0x28>
		ref = maxVel;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	603b      	str	r3, [r7, #0]
 80019d2:	e00c      	b.n	80019ee <_ZN10LL_Control8Motor_PI13set_referenceEf+0x42>
	}else if (ref < minVel){
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	edd3 7a04 	vldr	s15, [r3, #16]
 80019da:	ed97 7a00 	vldr	s14, [r7]
 80019de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019e6:	d502      	bpl.n	80019ee <_ZN10LL_Control8Motor_PI13set_referenceEf+0x42>
		ref = minVel;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	691b      	ldr	r3, [r3, #16]
 80019ec:	603b      	str	r3, [r7, #0]
	}
    reference = direction*ref;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	699b      	ldr	r3, [r3, #24]
 80019f2:	ee07 3a90 	vmov	s15, r3
 80019f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019fa:	edd7 7a00 	vldr	s15, [r7]
 80019fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
}
 8001a08:	bf00      	nop
 8001a0a:	370c      	adds	r7, #12
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr

08001a14 <_ZN10LL_Control8Motor_PI6set_KsEff>:
void LL_Control::Motor_PI::set_Ks(float k_i, float k_p){
 8001a14:	b480      	push	{r7}
 8001a16:	b085      	sub	sp, #20
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	60f8      	str	r0, [r7, #12]
 8001a1c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001a20:	edc7 0a01 	vstr	s1, [r7, #4]
	this->k_i = k_i;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	68ba      	ldr	r2, [r7, #8]
 8001a28:	629a      	str	r2, [r3, #40]	; 0x28
	this->k_p = k_p;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	687a      	ldr	r2, [r7, #4]
 8001a2e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001a30:	bf00      	nop
 8001a32:	3714      	adds	r7, #20
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr

08001a3c <_ZN10LL_Control8Motor_PI13set_thresholdEf>:
void LL_Control::Motor_PI::set_runFrequency(int f){
	runFrequency = f;
}
void LL_Control::Motor_PI::set_threshold(float t){
 8001a3c:	b480      	push	{r7}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
 8001a44:	ed87 0a00 	vstr	s0, [r7]
	threshold = t;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	683a      	ldr	r2, [r7, #0]
 8001a4c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001a4e:	bf00      	nop
 8001a50:	370c      	adds	r7, #12
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr

08001a5a <_ZN10LL_Control8Motor_PI7get_velEv>:

// ===== Getters =====
float LL_Control::Motor_PI::get_vel(){
 8001a5a:	b580      	push	{r7, lr}
 8001a5c:	b084      	sub	sp, #16
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	6078      	str	r0, [r7, #4]

	float vel = enc->get_vel();
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7ff f910 	bl	8000c8c <_ZN10LL_Control7Encoder7get_velEv>
 8001a6c:	ed87 0a03 	vstr	s0, [r7, #12]
	// Sometimes it overflows into an invalid value
		// We double check to clean even more the data
	// If the calculated value is bigger than our maximum velocity
	if (vel >  maxVel || vel < minVel){
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	edd3 7a03 	vldr	s15, [r3, #12]
 8001a76:	ed97 7a03 	vldr	s14, [r7, #12]
 8001a7a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a82:	dc09      	bgt.n	8001a98 <_ZN10LL_Control8Motor_PI7get_velEv+0x3e>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	edd3 7a04 	vldr	s15, [r3, #16]
 8001a8a:	ed97 7a03 	vldr	s14, [r7, #12]
 8001a8e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a96:	d502      	bpl.n	8001a9e <_ZN10LL_Control8Motor_PI7get_velEv+0x44>
		vel = lastVel;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	695b      	ldr	r3, [r3, #20]
 8001a9c:	60fb      	str	r3, [r7, #12]
	}

	// Update last reading
	lastVel = vel;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	68fa      	ldr	r2, [r7, #12]
 8001aa2:	615a      	str	r2, [r3, #20]

    // Should we invert this? 
	return vel;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	ee07 3a90 	vmov	s15, r3
}
 8001aaa:	eeb0 0a67 	vmov.f32	s0, s15
 8001aae:	3710      	adds	r7, #16
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}

08001ab4 <_ZN10LL_Control8Motor_PI3mapEfffff>:

// ===== Others =====
void LL_Control::Motor_PI::invert(){
    direction *= -1;
}
float LL_Control::Motor_PI::map(float x, float in_min, float in_max, float out_min, float out_max){
 8001ab4:	b480      	push	{r7}
 8001ab6:	b087      	sub	sp, #28
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6178      	str	r0, [r7, #20]
 8001abc:	ed87 0a04 	vstr	s0, [r7, #16]
 8001ac0:	edc7 0a03 	vstr	s1, [r7, #12]
 8001ac4:	ed87 1a02 	vstr	s2, [r7, #8]
 8001ac8:	edc7 1a01 	vstr	s3, [r7, #4]
 8001acc:	ed87 2a00 	vstr	s4, [r7]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8001ad0:	ed97 7a04 	vldr	s14, [r7, #16]
 8001ad4:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ad8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001adc:	edd7 6a00 	vldr	s13, [r7]
 8001ae0:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ae4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001ae8:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001aec:	ed97 7a02 	vldr	s14, [r7, #8]
 8001af0:	edd7 7a03 	vldr	s15, [r7, #12]
 8001af4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001af8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001afc:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b00:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8001b04:	eeb0 0a67 	vmov.f32	s0, s15
 8001b08:	371c      	adds	r7, #28
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr

08001b12 <_ZN10LL_Control8Motor_PI3mapEf>:
int LL_Control::Motor_PI::map(float x){
 8001b12:	b580      	push	{r7, lr}
 8001b14:	b082      	sub	sp, #8
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	6078      	str	r0, [r7, #4]
 8001b1a:	ed87 0a00 	vstr	s0, [r7]
	if (x > maxVel){
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	edd3 7a03 	vldr	s15, [r3, #12]
 8001b24:	ed97 7a00 	vldr	s14, [r7]
 8001b28:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b30:	dd03      	ble.n	8001b3a <_ZN10LL_Control8Motor_PI3mapEf+0x28>
		x = maxVel;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	68db      	ldr	r3, [r3, #12]
 8001b36:	603b      	str	r3, [r7, #0]
 8001b38:	e00c      	b.n	8001b54 <_ZN10LL_Control8Motor_PI3mapEf+0x42>
	}else if (x < minVel){
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	edd3 7a04 	vldr	s15, [r3, #16]
 8001b40:	ed97 7a00 	vldr	s14, [r7]
 8001b44:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b4c:	d502      	bpl.n	8001b54 <_ZN10LL_Control8Motor_PI3mapEf+0x42>
		x = minVel;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	691b      	ldr	r3, [r3, #16]
 8001b52:	603b      	str	r3, [r7, #0]
	}
	return (int) map(x, minVel, maxVel, minFreqPWM, maxFreqPWM);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	edd3 7a04 	vldr	s15, [r3, #16]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	ed93 7a03 	vldr	s14, [r3, #12]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6a1b      	ldr	r3, [r3, #32]
 8001b64:	ee06 3a90 	vmov	s13, r3
 8001b68:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	69db      	ldr	r3, [r3, #28]
 8001b70:	ee06 3a10 	vmov	s12, r3
 8001b74:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8001b78:	eeb0 2a46 	vmov.f32	s4, s12
 8001b7c:	eef0 1a66 	vmov.f32	s3, s13
 8001b80:	eeb0 1a47 	vmov.f32	s2, s14
 8001b84:	eef0 0a67 	vmov.f32	s1, s15
 8001b88:	ed97 0a00 	vldr	s0, [r7]
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	f7ff ff91 	bl	8001ab4 <_ZN10LL_Control8Motor_PI3mapEfffff>
 8001b92:	eef0 7a40 	vmov.f32	s15, s0
 8001b96:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b9a:	ee17 3a90 	vmov	r3, s15
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3708      	adds	r7, #8
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}

08001ba6 <_ZN10LL_Control8Motor_PI9go_to_refEv>:

void LL_Control::Motor_PI::go_to_ref(){
 8001ba6:	b580      	push	{r7, lr}
 8001ba8:	ed2d 8b02 	vpush	{d8}
 8001bac:	b082      	sub	sp, #8
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	6078      	str	r0, [r7, #4]

    // ===== #CONTROL =====
	error = reference - get_vel();
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	ed93 8a0d 	vldr	s16, [r3, #52]	; 0x34
 8001bb8:	6878      	ldr	r0, [r7, #4]
 8001bba:	f7ff ff4e 	bl	8001a5a <_ZN10LL_Control8Motor_PI7get_velEv>
 8001bbe:	eef0 7a40 	vmov.f32	s15, s0
 8001bc2:	ee78 7a67 	vsub.f32	s15, s16, s15
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44

	// Since we are not working with tasks, we can't actually make whiles
	if (error <= threshold && error >= -threshold){
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001bd8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001bdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001be0:	d80c      	bhi.n	8001bfc <_ZN10LL_Control8Motor_PI9go_to_refEv+0x56>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001bee:	eef1 7a67 	vneg.f32	s15, s15
 8001bf2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001bf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bfa:	da4a      	bge.n	8001c92 <_ZN10LL_Control8Motor_PI9go_to_refEv+0xec>
		return;
	}
    // If we are not on the threshold, keep altering PWM pulse
    
    // Update error on integral term
    intError += (float) (1.0f/runFrequency)*error ;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c06:	ee07 3a90 	vmov	s15, r3
 8001c0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c0e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8001c12:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8001c1c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
    	 * */
    //float intTerm = (1000/runFrequency)*error + lastError;

    // Regulate voltage to motor
        // Sadly, it isn't torque ;(
    control += (float) (1.0f/runFrequency)*(k_p*error + k_i*intError);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c34:	ee07 3a90 	vmov	s15, r3
 8001c38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c3c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8001c40:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	ed93 6a0b 	vldr	s12, [r3, #44]	; 0x2c
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8001c50:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	edd3 5a0a 	vldr	s11, [r3, #40]	; 0x28
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8001c60:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001c64:	ee76 7a27 	vadd.f32	s15, s12, s15
 8001c68:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48


    // Actually move motor
    //__HAL_TIM_SET_COMPARE(htimPWM, TIM_CHANNEL_1, control);
    htimPWM -> Instance-> CCR1 = map(control);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8001c7c:	eeb0 0a67 	vmov.f32	s0, s15
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	f7ff ff46 	bl	8001b12 <_ZN10LL_Control8Motor_PI3mapEf>
 8001c86:	4602      	mov	r2, r0
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	635a      	str	r2, [r3, #52]	; 0x34
 8001c90:	e000      	b.n	8001c94 <_ZN10LL_Control8Motor_PI9go_to_refEv+0xee>
		return;
 8001c92:	bf00      	nop

    // Update integral component
    //lastIntegral = intTerm;
}
 8001c94:	3708      	adds	r7, #8
 8001c96:	46bd      	mov	sp, r7
 8001c98:	ecbd 8b02 	vpop	{d8}
 8001c9c:	bd80      	pop	{r7, pc}
	...

08001ca0 <_ZN10LL_Control8Motor_PI4stopEv>:

void LL_Control::Motor_PI::stop(){
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
	set_reference(0.0);
 8001ca8:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8001cbc <_ZN10LL_Control8Motor_PI4stopEv+0x1c>
 8001cac:	6878      	ldr	r0, [r7, #4]
 8001cae:	f7ff fe7d 	bl	80019ac <_ZN10LL_Control8Motor_PI13set_referenceEf>
}
 8001cb2:	bf00      	nop
 8001cb4:	3708      	adds	r7, #8
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	00000000 	.word	0x00000000

08001cc0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8001cc6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001cca:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8001ccc:	bf00      	nop
 8001cce:	4b54      	ldr	r3, [pc, #336]	; (8001e20 <main+0x160>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d006      	beq.n	8001ce8 <main+0x28>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	1e5a      	subs	r2, r3, #1
 8001cde:	607a      	str	r2, [r7, #4]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	dd01      	ble.n	8001ce8 <main+0x28>
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e000      	b.n	8001cea <main+0x2a>
 8001ce8:	2300      	movs	r3, #0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d1ef      	bne.n	8001cce <main+0xe>
  if ( timeout < 0 )
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	da01      	bge.n	8001cf8 <main+0x38>
  {
  Error_Handler();
 8001cf4:	f001 f974 	bl	8002fe0 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001cf8:	f001 fefc 	bl	8003af4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001cfc:	f000 f8bc 	bl	8001e78 <_Z18SystemClock_Configv>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001d00:	f000 f946 	bl	8001f90 <_Z24PeriphCommonClock_Configv>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8001d04:	4b46      	ldr	r3, [pc, #280]	; (8001e20 <main+0x160>)
 8001d06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d0a:	4a45      	ldr	r2, [pc, #276]	; (8001e20 <main+0x160>)
 8001d0c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d10:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d14:	4b42      	ldr	r3, [pc, #264]	; (8001e20 <main+0x160>)
 8001d16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d1e:	603b      	str	r3, [r7, #0]
 8001d20:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8001d22:	2000      	movs	r0, #0
 8001d24:	f005 ff94 	bl	8007c50 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8001d28:	2100      	movs	r1, #0
 8001d2a:	2000      	movs	r0, #0
 8001d2c:	f005 ffaa 	bl	8007c84 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8001d30:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d34:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8001d36:	bf00      	nop
 8001d38:	4b39      	ldr	r3, [pc, #228]	; (8001e20 <main+0x160>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d106      	bne.n	8001d52 <main+0x92>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	1e5a      	subs	r2, r3, #1
 8001d48:	607a      	str	r2, [r7, #4]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	dd01      	ble.n	8001d52 <main+0x92>
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e000      	b.n	8001d54 <main+0x94>
 8001d52:	2300      	movs	r3, #0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d1ef      	bne.n	8001d38 <main+0x78>
if ( timeout < 0 )
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	da01      	bge.n	8001d62 <main+0xa2>
{
Error_Handler();
 8001d5e:	f001 f93f 	bl	8002fe0 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d62:	f000 fe25 	bl	80029b0 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8001d66:	f000 fdfb 	bl	8002960 <_ZL11MX_DMA_Initv>
  MX_USART3_UART_Init();
 8001d6a:	f000 fd63 	bl	8002834 <_ZL19MX_USART3_UART_Initv>
  MX_USB_OTG_FS_PCD_Init();
 8001d6e:	f000 fdc1 	bl	80028f4 <_ZL22MX_USB_OTG_FS_PCD_Initv>
  MX_TIM8_Init();
 8001d72:	f000 fcfb 	bl	800276c <_ZL12MX_TIM8_Initv>
  MX_TIM4_Init();
 8001d76:	f000 fc09 	bl	800258c <_ZL12MX_TIM4_Initv>
  MX_TIM2_Init();
 8001d7a:	f000 fae7 	bl	800234c <_ZL12MX_TIM2_Initv>
  MX_TIM3_Init();
 8001d7e:	f000 fb75 	bl	800246c <_ZL12MX_TIM3_Initv>
  MX_TIM1_Init();
 8001d82:	f000 fa81 	bl	8002288 <_ZL12MX_TIM1_Initv>
  MX_ADC1_Init();
 8001d86:	f000 f939 	bl	8001ffc <_ZL12MX_ADC1_Initv>
  MX_ADC2_Init();
 8001d8a:	f000 f9bf 	bl	800210c <_ZL12MX_ADC2_Initv>
  MX_I2C1_Init();
 8001d8e:	f000 fa2d 	bl	80021ec <_ZL12MX_I2C1_Initv>
  MX_TIM5_Init();
 8001d92:	f000 fc5b 	bl	800264c <_ZL12MX_TIM5_Initv>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001d96:	f00d ff3f 	bl	800fc18 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of Destination */
  DestinationHandle = osSemaphoreNew(1, 1, &Destination_attributes);
 8001d9a:	4a22      	ldr	r2, [pc, #136]	; (8001e24 <main+0x164>)
 8001d9c:	2101      	movs	r1, #1
 8001d9e:	2001      	movs	r0, #1
 8001da0:	f00e f831 	bl	800fe06 <osSemaphoreNew>
 8001da4:	4603      	mov	r3, r0
 8001da6:	4a20      	ldr	r2, [pc, #128]	; (8001e28 <main+0x168>)
 8001da8:	6013      	str	r3, [r2, #0]

  /* creation of Pass */
  PassHandle = osSemaphoreNew(1, 1, &Pass_attributes);
 8001daa:	4a20      	ldr	r2, [pc, #128]	; (8001e2c <main+0x16c>)
 8001dac:	2101      	movs	r1, #1
 8001dae:	2001      	movs	r0, #1
 8001db0:	f00e f829 	bl	800fe06 <osSemaphoreNew>
 8001db4:	4603      	mov	r3, r0
 8001db6:	4a1e      	ldr	r2, [pc, #120]	; (8001e30 <main+0x170>)
 8001db8:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of JoystickQueue */
  JoystickQueueHandle = osMessageQueueNew (16, sizeof(Data), &JoystickQueue_attributes);
 8001dba:	4a1e      	ldr	r2, [pc, #120]	; (8001e34 <main+0x174>)
 8001dbc:	2108      	movs	r1, #8
 8001dbe:	2010      	movs	r0, #16
 8001dc0:	f00e f940 	bl	8010044 <osMessageQueueNew>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	4a1c      	ldr	r2, [pc, #112]	; (8001e38 <main+0x178>)
 8001dc8:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001dca:	4a1c      	ldr	r2, [pc, #112]	; (8001e3c <main+0x17c>)
 8001dcc:	2100      	movs	r1, #0
 8001dce:	481c      	ldr	r0, [pc, #112]	; (8001e40 <main+0x180>)
 8001dd0:	f00d ff6c 	bl	800fcac <osThreadNew>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	4a1b      	ldr	r2, [pc, #108]	; (8001e44 <main+0x184>)
 8001dd8:	6013      	str	r3, [r2, #0]

  /* creation of Joystick */
  JoystickHandle = osThreadNew(StartJoystick, NULL, &Joystick_attributes);
 8001dda:	4a1b      	ldr	r2, [pc, #108]	; (8001e48 <main+0x188>)
 8001ddc:	2100      	movs	r1, #0
 8001dde:	481b      	ldr	r0, [pc, #108]	; (8001e4c <main+0x18c>)
 8001de0:	f00d ff64 	bl	800fcac <osThreadNew>
 8001de4:	4603      	mov	r3, r0
 8001de6:	4a1a      	ldr	r2, [pc, #104]	; (8001e50 <main+0x190>)
 8001de8:	6013      	str	r3, [r2, #0]

  /* creation of Chassis */
  ChassisHandle = osThreadNew(StartChassis, NULL, &Chassis_attributes);
 8001dea:	4a1a      	ldr	r2, [pc, #104]	; (8001e54 <main+0x194>)
 8001dec:	2100      	movs	r1, #0
 8001dee:	481a      	ldr	r0, [pc, #104]	; (8001e58 <main+0x198>)
 8001df0:	f00d ff5c 	bl	800fcac <osThreadNew>
 8001df4:	4603      	mov	r3, r0
 8001df6:	4a19      	ldr	r2, [pc, #100]	; (8001e5c <main+0x19c>)
 8001df8:	6013      	str	r3, [r2, #0]

  /* creation of UserInteraction */
  UserInteractionHandle = osThreadNew(StartUserInteraction, NULL, &UserInteraction_attributes);
 8001dfa:	4a19      	ldr	r2, [pc, #100]	; (8001e60 <main+0x1a0>)
 8001dfc:	2100      	movs	r1, #0
 8001dfe:	4819      	ldr	r0, [pc, #100]	; (8001e64 <main+0x1a4>)
 8001e00:	f00d ff54 	bl	800fcac <osThreadNew>
 8001e04:	4603      	mov	r3, r0
 8001e06:	4a18      	ldr	r2, [pc, #96]	; (8001e68 <main+0x1a8>)
 8001e08:	6013      	str	r3, [r2, #0]

  /* creation of Door */
  DoorHandle = osThreadNew(StartDoor, NULL, &Door_attributes);
 8001e0a:	4a18      	ldr	r2, [pc, #96]	; (8001e6c <main+0x1ac>)
 8001e0c:	2100      	movs	r1, #0
 8001e0e:	4818      	ldr	r0, [pc, #96]	; (8001e70 <main+0x1b0>)
 8001e10:	f00d ff4c 	bl	800fcac <osThreadNew>
 8001e14:	4603      	mov	r3, r0
 8001e16:	4a17      	ldr	r2, [pc, #92]	; (8001e74 <main+0x1b4>)
 8001e18:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001e1a:	f00d ff21 	bl	800fc60 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001e1e:	e7fe      	b.n	8001e1e <main+0x15e>
 8001e20:	58024400 	.word	0x58024400
 8001e24:	08017cac 	.word	0x08017cac
 8001e28:	24000b84 	.word	0x24000b84
 8001e2c:	08017cbc 	.word	0x08017cbc
 8001e30:	24000b88 	.word	0x24000b88
 8001e34:	08017c94 	.word	0x08017c94
 8001e38:	24000b80 	.word	0x24000b80
 8001e3c:	08017be0 	.word	0x08017be0
 8001e40:	08002b39 	.word	0x08002b39
 8001e44:	24000b6c 	.word	0x24000b6c
 8001e48:	08017c04 	.word	0x08017c04
 8001e4c:	08002b49 	.word	0x08002b49
 8001e50:	24000b70 	.word	0x24000b70
 8001e54:	08017c28 	.word	0x08017c28
 8001e58:	08002c65 	.word	0x08002c65
 8001e5c:	24000b74 	.word	0x24000b74
 8001e60:	08017c4c 	.word	0x08017c4c
 8001e64:	08002de5 	.word	0x08002de5
 8001e68:	24000b78 	.word	0x24000b78
 8001e6c:	08017c70 	.word	0x08017c70
 8001e70:	08002f69 	.word	0x08002f69
 8001e74:	24000b7c 	.word	0x24000b7c

08001e78 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b09c      	sub	sp, #112	; 0x70
 8001e7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e82:	224c      	movs	r2, #76	; 0x4c
 8001e84:	2100      	movs	r1, #0
 8001e86:	4618      	mov	r0, r3
 8001e88:	f012 fb09 	bl	801449e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e8c:	1d3b      	adds	r3, r7, #4
 8001e8e:	2220      	movs	r2, #32
 8001e90:	2100      	movs	r1, #0
 8001e92:	4618      	mov	r0, r3
 8001e94:	f012 fb03 	bl	801449e <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8001e98:	2004      	movs	r0, #4
 8001e9a:	f006 fc7b 	bl	8008794 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	603b      	str	r3, [r7, #0]
 8001ea2:	4b39      	ldr	r3, [pc, #228]	; (8001f88 <_Z18SystemClock_Configv+0x110>)
 8001ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ea6:	4a38      	ldr	r2, [pc, #224]	; (8001f88 <_Z18SystemClock_Configv+0x110>)
 8001ea8:	f023 0301 	bic.w	r3, r3, #1
 8001eac:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001eae:	4b36      	ldr	r3, [pc, #216]	; (8001f88 <_Z18SystemClock_Configv+0x110>)
 8001eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eb2:	f003 0301 	and.w	r3, r3, #1
 8001eb6:	603b      	str	r3, [r7, #0]
 8001eb8:	4b34      	ldr	r3, [pc, #208]	; (8001f8c <_Z18SystemClock_Configv+0x114>)
 8001eba:	699b      	ldr	r3, [r3, #24]
 8001ebc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001ec0:	4a32      	ldr	r2, [pc, #200]	; (8001f8c <_Z18SystemClock_Configv+0x114>)
 8001ec2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ec6:	6193      	str	r3, [r2, #24]
 8001ec8:	4b30      	ldr	r3, [pc, #192]	; (8001f8c <_Z18SystemClock_Configv+0x114>)
 8001eca:	699b      	ldr	r3, [r3, #24]
 8001ecc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001ed0:	603b      	str	r3, [r7, #0]
 8001ed2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001ed4:	bf00      	nop
 8001ed6:	4b2d      	ldr	r3, [pc, #180]	; (8001f8c <_Z18SystemClock_Configv+0x114>)
 8001ed8:	699b      	ldr	r3, [r3, #24]
 8001eda:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ede:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ee2:	bf14      	ite	ne
 8001ee4:	2301      	movne	r3, #1
 8001ee6:	2300      	moveq	r3, #0
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d1f3      	bne.n	8001ed6 <_Z18SystemClock_Configv+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001ef2:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001ef6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ef8:	2302      	movs	r3, #2
 8001efa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001efc:	2302      	movs	r3, #2
 8001efe:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001f00:	2301      	movs	r3, #1
 8001f02:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 18;
 8001f04:	2312      	movs	r3, #18
 8001f06:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001f08:	2302      	movs	r3, #2
 8001f0a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001f0c:	2302      	movs	r3, #2
 8001f0e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001f10:	2302      	movs	r3, #2
 8001f12:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001f14:	230c      	movs	r3, #12
 8001f16:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8001f18:	2302      	movs	r3, #2
 8001f1a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 8001f1c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001f20:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f26:	4618      	mov	r0, r3
 8001f28:	f006 fc9e 	bl	8008868 <HAL_RCC_OscConfig>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	bf14      	ite	ne
 8001f32:	2301      	movne	r3, #1
 8001f34:	2300      	moveq	r3, #0
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d001      	beq.n	8001f40 <_Z18SystemClock_Configv+0xc8>
  {
    Error_Handler();
 8001f3c:	f001 f850 	bl	8002fe0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f40:	233f      	movs	r3, #63	; 0x3f
 8001f42:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f44:	2303      	movs	r3, #3
 8001f46:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001f50:	2340      	movs	r3, #64	; 0x40
 8001f52:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001f54:	2340      	movs	r3, #64	; 0x40
 8001f56:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001f58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f5c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001f5e:	2340      	movs	r3, #64	; 0x40
 8001f60:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001f62:	1d3b      	adds	r3, r7, #4
 8001f64:	2101      	movs	r1, #1
 8001f66:	4618      	mov	r0, r3
 8001f68:	f007 f8d8 	bl	800911c <HAL_RCC_ClockConfig>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	bf14      	ite	ne
 8001f72:	2301      	movne	r3, #1
 8001f74:	2300      	moveq	r3, #0
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d001      	beq.n	8001f80 <_Z18SystemClock_Configv+0x108>
  {
    Error_Handler();
 8001f7c:	f001 f830 	bl	8002fe0 <Error_Handler>
  }
}
 8001f80:	bf00      	nop
 8001f82:	3770      	adds	r7, #112	; 0x70
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	58000400 	.word	0x58000400
 8001f8c:	58024800 	.word	0x58024800

08001f90 <_Z24PeriphCommonClock_Configv>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b0b0      	sub	sp, #192	; 0xc0
 8001f94:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f96:	463b      	mov	r3, r7
 8001f98:	22c0      	movs	r2, #192	; 0xc0
 8001f9a:	2100      	movs	r1, #0
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f012 fa7e 	bl	801449e <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001fa2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001fa6:	f04f 0300 	mov.w	r3, #0
 8001faa:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 18;
 8001fb2:	2312      	movs	r3, #18
 8001fb4:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 8001fb6:	2304      	movs	r3, #4
 8001fb8:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001fba:	2302      	movs	r3, #2
 8001fbc:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001fbe:	2302      	movs	r3, #2
 8001fc0:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001fc2:	23c0      	movs	r3, #192	; 0xc0
 8001fc4:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8001fc6:	2320      	movs	r3, #32
 8001fc8:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 6144;
 8001fca:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001fce:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001fd6:	463b      	mov	r3, r7
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f007 fc6d 	bl	80098b8 <HAL_RCCEx_PeriphCLKConfig>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	bf14      	ite	ne
 8001fe4:	2301      	movne	r3, #1
 8001fe6:	2300      	moveq	r3, #0
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d001      	beq.n	8001ff2 <_Z24PeriphCommonClock_Configv+0x62>
  {
    Error_Handler();
 8001fee:	f000 fff7 	bl	8002fe0 <Error_Handler>
  }
}
 8001ff2:	bf00      	nop
 8001ff4:	37c0      	adds	r7, #192	; 0xc0
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
	...

08001ffc <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b08a      	sub	sp, #40	; 0x28
 8002000:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8002002:	f107 031c 	add.w	r3, r7, #28
 8002006:	2200      	movs	r2, #0
 8002008:	601a      	str	r2, [r3, #0]
 800200a:	605a      	str	r2, [r3, #4]
 800200c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800200e:	463b      	mov	r3, r7
 8002010:	2200      	movs	r2, #0
 8002012:	601a      	str	r2, [r3, #0]
 8002014:	605a      	str	r2, [r3, #4]
 8002016:	609a      	str	r2, [r3, #8]
 8002018:	60da      	str	r2, [r3, #12]
 800201a:	611a      	str	r2, [r3, #16]
 800201c:	615a      	str	r2, [r3, #20]
 800201e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002020:	4b37      	ldr	r3, [pc, #220]	; (8002100 <_ZL12MX_ADC1_Initv+0x104>)
 8002022:	4a38      	ldr	r2, [pc, #224]	; (8002104 <_ZL12MX_ADC1_Initv+0x108>)
 8002024:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002026:	4b36      	ldr	r3, [pc, #216]	; (8002100 <_ZL12MX_ADC1_Initv+0x104>)
 8002028:	2200      	movs	r2, #0
 800202a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 800202c:	4b34      	ldr	r3, [pc, #208]	; (8002100 <_ZL12MX_ADC1_Initv+0x104>)
 800202e:	2200      	movs	r2, #0
 8002030:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002032:	4b33      	ldr	r3, [pc, #204]	; (8002100 <_ZL12MX_ADC1_Initv+0x104>)
 8002034:	2200      	movs	r2, #0
 8002036:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002038:	4b31      	ldr	r3, [pc, #196]	; (8002100 <_ZL12MX_ADC1_Initv+0x104>)
 800203a:	2204      	movs	r2, #4
 800203c:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800203e:	4b30      	ldr	r3, [pc, #192]	; (8002100 <_ZL12MX_ADC1_Initv+0x104>)
 8002040:	2200      	movs	r2, #0
 8002042:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002044:	4b2e      	ldr	r3, [pc, #184]	; (8002100 <_ZL12MX_ADC1_Initv+0x104>)
 8002046:	2200      	movs	r2, #0
 8002048:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 800204a:	4b2d      	ldr	r3, [pc, #180]	; (8002100 <_ZL12MX_ADC1_Initv+0x104>)
 800204c:	2201      	movs	r2, #1
 800204e:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002050:	4b2b      	ldr	r3, [pc, #172]	; (8002100 <_ZL12MX_ADC1_Initv+0x104>)
 8002052:	2200      	movs	r2, #0
 8002054:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002056:	4b2a      	ldr	r3, [pc, #168]	; (8002100 <_ZL12MX_ADC1_Initv+0x104>)
 8002058:	2200      	movs	r2, #0
 800205a:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800205c:	4b28      	ldr	r3, [pc, #160]	; (8002100 <_ZL12MX_ADC1_Initv+0x104>)
 800205e:	2200      	movs	r2, #0
 8002060:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8002062:	4b27      	ldr	r3, [pc, #156]	; (8002100 <_ZL12MX_ADC1_Initv+0x104>)
 8002064:	2200      	movs	r2, #0
 8002066:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002068:	4b25      	ldr	r3, [pc, #148]	; (8002100 <_ZL12MX_ADC1_Initv+0x104>)
 800206a:	2200      	movs	r2, #0
 800206c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800206e:	4b24      	ldr	r3, [pc, #144]	; (8002100 <_ZL12MX_ADC1_Initv+0x104>)
 8002070:	2200      	movs	r2, #0
 8002072:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8002074:	4b22      	ldr	r3, [pc, #136]	; (8002100 <_ZL12MX_ADC1_Initv+0x104>)
 8002076:	2200      	movs	r2, #0
 8002078:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800207c:	4820      	ldr	r0, [pc, #128]	; (8002100 <_ZL12MX_ADC1_Initv+0x104>)
 800207e:	f001 ffa7 	bl	8003fd0 <HAL_ADC_Init>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	bf14      	ite	ne
 8002088:	2301      	movne	r3, #1
 800208a:	2300      	moveq	r3, #0
 800208c:	b2db      	uxtb	r3, r3
 800208e:	2b00      	cmp	r3, #0
 8002090:	d001      	beq.n	8002096 <_ZL12MX_ADC1_Initv+0x9a>
  {
    Error_Handler();
 8002092:	f000 ffa5 	bl	8002fe0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8002096:	2300      	movs	r3, #0
 8002098:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800209a:	f107 031c 	add.w	r3, r7, #28
 800209e:	4619      	mov	r1, r3
 80020a0:	4817      	ldr	r0, [pc, #92]	; (8002100 <_ZL12MX_ADC1_Initv+0x104>)
 80020a2:	f003 f80f 	bl	80050c4 <HAL_ADCEx_MultiModeConfigChannel>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	bf14      	ite	ne
 80020ac:	2301      	movne	r3, #1
 80020ae:	2300      	moveq	r3, #0
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d001      	beq.n	80020ba <_ZL12MX_ADC1_Initv+0xbe>
  {
    Error_Handler();
 80020b6:	f000 ff93 	bl	8002fe0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_18;
 80020ba:	4b13      	ldr	r3, [pc, #76]	; (8002108 <_ZL12MX_ADC1_Initv+0x10c>)
 80020bc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80020be:	2306      	movs	r3, #6
 80020c0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80020c2:	2300      	movs	r3, #0
 80020c4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80020c6:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80020ca:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80020cc:	2304      	movs	r3, #4
 80020ce:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80020d0:	2300      	movs	r3, #0
 80020d2:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80020d4:	2300      	movs	r3, #0
 80020d6:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020d8:	463b      	mov	r3, r7
 80020da:	4619      	mov	r1, r3
 80020dc:	4808      	ldr	r0, [pc, #32]	; (8002100 <_ZL12MX_ADC1_Initv+0x104>)
 80020de:	f002 fae5 	bl	80046ac <HAL_ADC_ConfigChannel>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	bf14      	ite	ne
 80020e8:	2301      	movne	r3, #1
 80020ea:	2300      	moveq	r3, #0
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d001      	beq.n	80020f6 <_ZL12MX_ADC1_Initv+0xfa>
  {
    Error_Handler();
 80020f2:	f000 ff75 	bl	8002fe0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80020f6:	bf00      	nop
 80020f8:	3728      	adds	r7, #40	; 0x28
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	240001f8 	.word	0x240001f8
 8002104:	40022000 	.word	0x40022000
 8002108:	4b840000 	.word	0x4b840000

0800210c <_ZL12MX_ADC2_Initv>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b088      	sub	sp, #32
 8002110:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002112:	1d3b      	adds	r3, r7, #4
 8002114:	2200      	movs	r2, #0
 8002116:	601a      	str	r2, [r3, #0]
 8002118:	605a      	str	r2, [r3, #4]
 800211a:	609a      	str	r2, [r3, #8]
 800211c:	60da      	str	r2, [r3, #12]
 800211e:	611a      	str	r2, [r3, #16]
 8002120:	615a      	str	r2, [r3, #20]
 8002122:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8002124:	4b2e      	ldr	r3, [pc, #184]	; (80021e0 <_ZL12MX_ADC2_Initv+0xd4>)
 8002126:	4a2f      	ldr	r2, [pc, #188]	; (80021e4 <_ZL12MX_ADC2_Initv+0xd8>)
 8002128:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800212a:	4b2d      	ldr	r3, [pc, #180]	; (80021e0 <_ZL12MX_ADC2_Initv+0xd4>)
 800212c:	2200      	movs	r2, #0
 800212e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8002130:	4b2b      	ldr	r3, [pc, #172]	; (80021e0 <_ZL12MX_ADC2_Initv+0xd4>)
 8002132:	2200      	movs	r2, #0
 8002134:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002136:	4b2a      	ldr	r3, [pc, #168]	; (80021e0 <_ZL12MX_ADC2_Initv+0xd4>)
 8002138:	2200      	movs	r2, #0
 800213a:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800213c:	4b28      	ldr	r3, [pc, #160]	; (80021e0 <_ZL12MX_ADC2_Initv+0xd4>)
 800213e:	2204      	movs	r2, #4
 8002140:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8002142:	4b27      	ldr	r3, [pc, #156]	; (80021e0 <_ZL12MX_ADC2_Initv+0xd4>)
 8002144:	2200      	movs	r2, #0
 8002146:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8002148:	4b25      	ldr	r3, [pc, #148]	; (80021e0 <_ZL12MX_ADC2_Initv+0xd4>)
 800214a:	2200      	movs	r2, #0
 800214c:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 800214e:	4b24      	ldr	r3, [pc, #144]	; (80021e0 <_ZL12MX_ADC2_Initv+0xd4>)
 8002150:	2201      	movs	r2, #1
 8002152:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8002154:	4b22      	ldr	r3, [pc, #136]	; (80021e0 <_ZL12MX_ADC2_Initv+0xd4>)
 8002156:	2200      	movs	r2, #0
 8002158:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800215a:	4b21      	ldr	r3, [pc, #132]	; (80021e0 <_ZL12MX_ADC2_Initv+0xd4>)
 800215c:	2200      	movs	r2, #0
 800215e:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002160:	4b1f      	ldr	r3, [pc, #124]	; (80021e0 <_ZL12MX_ADC2_Initv+0xd4>)
 8002162:	2200      	movs	r2, #0
 8002164:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8002166:	4b1e      	ldr	r3, [pc, #120]	; (80021e0 <_ZL12MX_ADC2_Initv+0xd4>)
 8002168:	2200      	movs	r2, #0
 800216a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800216c:	4b1c      	ldr	r3, [pc, #112]	; (80021e0 <_ZL12MX_ADC2_Initv+0xd4>)
 800216e:	2200      	movs	r2, #0
 8002170:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8002172:	4b1b      	ldr	r3, [pc, #108]	; (80021e0 <_ZL12MX_ADC2_Initv+0xd4>)
 8002174:	2200      	movs	r2, #0
 8002176:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8002178:	4b19      	ldr	r3, [pc, #100]	; (80021e0 <_ZL12MX_ADC2_Initv+0xd4>)
 800217a:	2200      	movs	r2, #0
 800217c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8002180:	4817      	ldr	r0, [pc, #92]	; (80021e0 <_ZL12MX_ADC2_Initv+0xd4>)
 8002182:	f001 ff25 	bl	8003fd0 <HAL_ADC_Init>
 8002186:	4603      	mov	r3, r0
 8002188:	2b00      	cmp	r3, #0
 800218a:	bf14      	ite	ne
 800218c:	2301      	movne	r3, #1
 800218e:	2300      	moveq	r3, #0
 8002190:	b2db      	uxtb	r3, r3
 8002192:	2b00      	cmp	r3, #0
 8002194:	d001      	beq.n	800219a <_ZL12MX_ADC2_Initv+0x8e>
  {
    Error_Handler();
 8002196:	f000 ff23 	bl	8002fe0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_19;
 800219a:	4b13      	ldr	r3, [pc, #76]	; (80021e8 <_ZL12MX_ADC2_Initv+0xdc>)
 800219c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800219e:	2306      	movs	r3, #6
 80021a0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80021a2:	2300      	movs	r3, #0
 80021a4:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80021a6:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80021aa:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80021ac:	2304      	movs	r3, #4
 80021ae:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80021b0:	2300      	movs	r3, #0
 80021b2:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80021b4:	2300      	movs	r3, #0
 80021b6:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80021b8:	1d3b      	adds	r3, r7, #4
 80021ba:	4619      	mov	r1, r3
 80021bc:	4808      	ldr	r0, [pc, #32]	; (80021e0 <_ZL12MX_ADC2_Initv+0xd4>)
 80021be:	f002 fa75 	bl	80046ac <HAL_ADC_ConfigChannel>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	bf14      	ite	ne
 80021c8:	2301      	movne	r3, #1
 80021ca:	2300      	moveq	r3, #0
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d001      	beq.n	80021d6 <_ZL12MX_ADC2_Initv+0xca>
  {
    Error_Handler();
 80021d2:	f000 ff05 	bl	8002fe0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80021d6:	bf00      	nop
 80021d8:	3720      	adds	r7, #32
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	2400025c 	.word	0x2400025c
 80021e4:	40022100 	.word	0x40022100
 80021e8:	4fb80000 	.word	0x4fb80000

080021ec <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80021f0:	4b22      	ldr	r3, [pc, #136]	; (800227c <_ZL12MX_I2C1_Initv+0x90>)
 80021f2:	4a23      	ldr	r2, [pc, #140]	; (8002280 <_ZL12MX_I2C1_Initv+0x94>)
 80021f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00909FCE;
 80021f6:	4b21      	ldr	r3, [pc, #132]	; (800227c <_ZL12MX_I2C1_Initv+0x90>)
 80021f8:	4a22      	ldr	r2, [pc, #136]	; (8002284 <_ZL12MX_I2C1_Initv+0x98>)
 80021fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80021fc:	4b1f      	ldr	r3, [pc, #124]	; (800227c <_ZL12MX_I2C1_Initv+0x90>)
 80021fe:	2200      	movs	r2, #0
 8002200:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002202:	4b1e      	ldr	r3, [pc, #120]	; (800227c <_ZL12MX_I2C1_Initv+0x90>)
 8002204:	2201      	movs	r2, #1
 8002206:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002208:	4b1c      	ldr	r3, [pc, #112]	; (800227c <_ZL12MX_I2C1_Initv+0x90>)
 800220a:	2200      	movs	r2, #0
 800220c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800220e:	4b1b      	ldr	r3, [pc, #108]	; (800227c <_ZL12MX_I2C1_Initv+0x90>)
 8002210:	2200      	movs	r2, #0
 8002212:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002214:	4b19      	ldr	r3, [pc, #100]	; (800227c <_ZL12MX_I2C1_Initv+0x90>)
 8002216:	2200      	movs	r2, #0
 8002218:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800221a:	4b18      	ldr	r3, [pc, #96]	; (800227c <_ZL12MX_I2C1_Initv+0x90>)
 800221c:	2200      	movs	r2, #0
 800221e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002220:	4b16      	ldr	r3, [pc, #88]	; (800227c <_ZL12MX_I2C1_Initv+0x90>)
 8002222:	2200      	movs	r2, #0
 8002224:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002226:	4815      	ldr	r0, [pc, #84]	; (800227c <_ZL12MX_I2C1_Initv+0x90>)
 8002228:	f005 fd40 	bl	8007cac <HAL_I2C_Init>
 800222c:	4603      	mov	r3, r0
 800222e:	2b00      	cmp	r3, #0
 8002230:	bf14      	ite	ne
 8002232:	2301      	movne	r3, #1
 8002234:	2300      	moveq	r3, #0
 8002236:	b2db      	uxtb	r3, r3
 8002238:	2b00      	cmp	r3, #0
 800223a:	d001      	beq.n	8002240 <_ZL12MX_I2C1_Initv+0x54>
  {
    Error_Handler();
 800223c:	f000 fed0 	bl	8002fe0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002240:	2100      	movs	r1, #0
 8002242:	480e      	ldr	r0, [pc, #56]	; (800227c <_ZL12MX_I2C1_Initv+0x90>)
 8002244:	f006 f8c6 	bl	80083d4 <HAL_I2CEx_ConfigAnalogFilter>
 8002248:	4603      	mov	r3, r0
 800224a:	2b00      	cmp	r3, #0
 800224c:	bf14      	ite	ne
 800224e:	2301      	movne	r3, #1
 8002250:	2300      	moveq	r3, #0
 8002252:	b2db      	uxtb	r3, r3
 8002254:	2b00      	cmp	r3, #0
 8002256:	d001      	beq.n	800225c <_ZL12MX_I2C1_Initv+0x70>
  {
    Error_Handler();
 8002258:	f000 fec2 	bl	8002fe0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800225c:	2100      	movs	r1, #0
 800225e:	4807      	ldr	r0, [pc, #28]	; (800227c <_ZL12MX_I2C1_Initv+0x90>)
 8002260:	f006 f903 	bl	800846a <HAL_I2CEx_ConfigDigitalFilter>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	bf14      	ite	ne
 800226a:	2301      	movne	r3, #1
 800226c:	2300      	moveq	r3, #0
 800226e:	b2db      	uxtb	r3, r3
 8002270:	2b00      	cmp	r3, #0
 8002272:	d001      	beq.n	8002278 <_ZL12MX_I2C1_Initv+0x8c>
  {
    Error_Handler();
 8002274:	f000 feb4 	bl	8002fe0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002278:	bf00      	nop
 800227a:	bd80      	pop	{r7, pc}
 800227c:	240002c0 	.word	0x240002c0
 8002280:	40005400 	.word	0x40005400
 8002284:	00909fce 	.word	0x00909fce

08002288 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b088      	sub	sp, #32
 800228c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800228e:	f107 0310 	add.w	r3, r7, #16
 8002292:	2200      	movs	r2, #0
 8002294:	601a      	str	r2, [r3, #0]
 8002296:	605a      	str	r2, [r3, #4]
 8002298:	609a      	str	r2, [r3, #8]
 800229a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800229c:	1d3b      	adds	r3, r7, #4
 800229e:	2200      	movs	r2, #0
 80022a0:	601a      	str	r2, [r3, #0]
 80022a2:	605a      	str	r2, [r3, #4]
 80022a4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80022a6:	4b27      	ldr	r3, [pc, #156]	; (8002344 <_ZL12MX_TIM1_Initv+0xbc>)
 80022a8:	4a27      	ldr	r2, [pc, #156]	; (8002348 <_ZL12MX_TIM1_Initv+0xc0>)
 80022aa:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 74;
 80022ac:	4b25      	ldr	r3, [pc, #148]	; (8002344 <_ZL12MX_TIM1_Initv+0xbc>)
 80022ae:	224a      	movs	r2, #74	; 0x4a
 80022b0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022b2:	4b24      	ldr	r3, [pc, #144]	; (8002344 <_ZL12MX_TIM1_Initv+0xbc>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000;
 80022b8:	4b22      	ldr	r3, [pc, #136]	; (8002344 <_ZL12MX_TIM1_Initv+0xbc>)
 80022ba:	f644 6220 	movw	r2, #20000	; 0x4e20
 80022be:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022c0:	4b20      	ldr	r3, [pc, #128]	; (8002344 <_ZL12MX_TIM1_Initv+0xbc>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80022c6:	4b1f      	ldr	r3, [pc, #124]	; (8002344 <_ZL12MX_TIM1_Initv+0xbc>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80022cc:	4b1d      	ldr	r3, [pc, #116]	; (8002344 <_ZL12MX_TIM1_Initv+0xbc>)
 80022ce:	2280      	movs	r2, #128	; 0x80
 80022d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80022d2:	481c      	ldr	r0, [pc, #112]	; (8002344 <_ZL12MX_TIM1_Initv+0xbc>)
 80022d4:	f009 ffee 	bl	800c2b4 <HAL_TIM_Base_Init>
 80022d8:	4603      	mov	r3, r0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	bf14      	ite	ne
 80022de:	2301      	movne	r3, #1
 80022e0:	2300      	moveq	r3, #0
 80022e2:	b2db      	uxtb	r3, r3
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d001      	beq.n	80022ec <_ZL12MX_TIM1_Initv+0x64>
  {
    Error_Handler();
 80022e8:	f000 fe7a 	bl	8002fe0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022f0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80022f2:	f107 0310 	add.w	r3, r7, #16
 80022f6:	4619      	mov	r1, r3
 80022f8:	4812      	ldr	r0, [pc, #72]	; (8002344 <_ZL12MX_TIM1_Initv+0xbc>)
 80022fa:	f00a fda3 	bl	800ce44 <HAL_TIM_ConfigClockSource>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	bf14      	ite	ne
 8002304:	2301      	movne	r3, #1
 8002306:	2300      	moveq	r3, #0
 8002308:	b2db      	uxtb	r3, r3
 800230a:	2b00      	cmp	r3, #0
 800230c:	d001      	beq.n	8002312 <_ZL12MX_TIM1_Initv+0x8a>
  {
    Error_Handler();
 800230e:	f000 fe67 	bl	8002fe0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002312:	2300      	movs	r3, #0
 8002314:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002316:	2300      	movs	r3, #0
 8002318:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800231a:	2300      	movs	r3, #0
 800231c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800231e:	1d3b      	adds	r3, r7, #4
 8002320:	4619      	mov	r1, r3
 8002322:	4808      	ldr	r0, [pc, #32]	; (8002344 <_ZL12MX_TIM1_Initv+0xbc>)
 8002324:	f00b fae2 	bl	800d8ec <HAL_TIMEx_MasterConfigSynchronization>
 8002328:	4603      	mov	r3, r0
 800232a:	2b00      	cmp	r3, #0
 800232c:	bf14      	ite	ne
 800232e:	2301      	movne	r3, #1
 8002330:	2300      	moveq	r3, #0
 8002332:	b2db      	uxtb	r3, r3
 8002334:	2b00      	cmp	r3, #0
 8002336:	d001      	beq.n	800233c <_ZL12MX_TIM1_Initv+0xb4>
  {
    Error_Handler();
 8002338:	f000 fe52 	bl	8002fe0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800233c:	bf00      	nop
 800233e:	3720      	adds	r7, #32
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}
 8002344:	24000314 	.word	0x24000314
 8002348:	40010000 	.word	0x40010000

0800234c <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b08e      	sub	sp, #56	; 0x38
 8002350:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002352:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002356:	2200      	movs	r2, #0
 8002358:	601a      	str	r2, [r3, #0]
 800235a:	605a      	str	r2, [r3, #4]
 800235c:	609a      	str	r2, [r3, #8]
 800235e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002360:	f107 031c 	add.w	r3, r7, #28
 8002364:	2200      	movs	r2, #0
 8002366:	601a      	str	r2, [r3, #0]
 8002368:	605a      	str	r2, [r3, #4]
 800236a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800236c:	463b      	mov	r3, r7
 800236e:	2200      	movs	r2, #0
 8002370:	601a      	str	r2, [r3, #0]
 8002372:	605a      	str	r2, [r3, #4]
 8002374:	609a      	str	r2, [r3, #8]
 8002376:	60da      	str	r2, [r3, #12]
 8002378:	611a      	str	r2, [r3, #16]
 800237a:	615a      	str	r2, [r3, #20]
 800237c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800237e:	4b3a      	ldr	r3, [pc, #232]	; (8002468 <_ZL12MX_TIM2_Initv+0x11c>)
 8002380:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002384:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 75;
 8002386:	4b38      	ldr	r3, [pc, #224]	; (8002468 <_ZL12MX_TIM2_Initv+0x11c>)
 8002388:	224b      	movs	r2, #75	; 0x4b
 800238a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800238c:	4b36      	ldr	r3, [pc, #216]	; (8002468 <_ZL12MX_TIM2_Initv+0x11c>)
 800238e:	2200      	movs	r2, #0
 8002390:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1950;
 8002392:	4b35      	ldr	r3, [pc, #212]	; (8002468 <_ZL12MX_TIM2_Initv+0x11c>)
 8002394:	f240 729e 	movw	r2, #1950	; 0x79e
 8002398:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800239a:	4b33      	ldr	r3, [pc, #204]	; (8002468 <_ZL12MX_TIM2_Initv+0x11c>)
 800239c:	2200      	movs	r2, #0
 800239e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80023a0:	4b31      	ldr	r3, [pc, #196]	; (8002468 <_ZL12MX_TIM2_Initv+0x11c>)
 80023a2:	2280      	movs	r2, #128	; 0x80
 80023a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80023a6:	4830      	ldr	r0, [pc, #192]	; (8002468 <_ZL12MX_TIM2_Initv+0x11c>)
 80023a8:	f009 ff84 	bl	800c2b4 <HAL_TIM_Base_Init>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	bf14      	ite	ne
 80023b2:	2301      	movne	r3, #1
 80023b4:	2300      	moveq	r3, #0
 80023b6:	b2db      	uxtb	r3, r3
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d001      	beq.n	80023c0 <_ZL12MX_TIM2_Initv+0x74>
  {
    Error_Handler();
 80023bc:	f000 fe10 	bl	8002fe0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023c4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80023c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80023ca:	4619      	mov	r1, r3
 80023cc:	4826      	ldr	r0, [pc, #152]	; (8002468 <_ZL12MX_TIM2_Initv+0x11c>)
 80023ce:	f00a fd39 	bl	800ce44 <HAL_TIM_ConfigClockSource>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	bf14      	ite	ne
 80023d8:	2301      	movne	r3, #1
 80023da:	2300      	moveq	r3, #0
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d001      	beq.n	80023e6 <_ZL12MX_TIM2_Initv+0x9a>
  {
    Error_Handler();
 80023e2:	f000 fdfd 	bl	8002fe0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80023e6:	4820      	ldr	r0, [pc, #128]	; (8002468 <_ZL12MX_TIM2_Initv+0x11c>)
 80023e8:	f00a f834 	bl	800c454 <HAL_TIM_PWM_Init>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	bf14      	ite	ne
 80023f2:	2301      	movne	r3, #1
 80023f4:	2300      	moveq	r3, #0
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d001      	beq.n	8002400 <_ZL12MX_TIM2_Initv+0xb4>
  {
    Error_Handler();
 80023fc:	f000 fdf0 	bl	8002fe0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002400:	2300      	movs	r3, #0
 8002402:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002404:	2300      	movs	r3, #0
 8002406:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002408:	f107 031c 	add.w	r3, r7, #28
 800240c:	4619      	mov	r1, r3
 800240e:	4816      	ldr	r0, [pc, #88]	; (8002468 <_ZL12MX_TIM2_Initv+0x11c>)
 8002410:	f00b fa6c 	bl	800d8ec <HAL_TIMEx_MasterConfigSynchronization>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	bf14      	ite	ne
 800241a:	2301      	movne	r3, #1
 800241c:	2300      	moveq	r3, #0
 800241e:	b2db      	uxtb	r3, r3
 8002420:	2b00      	cmp	r3, #0
 8002422:	d001      	beq.n	8002428 <_ZL12MX_TIM2_Initv+0xdc>
  {
    Error_Handler();
 8002424:	f000 fddc 	bl	8002fe0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002428:	2360      	movs	r3, #96	; 0x60
 800242a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800242c:	2300      	movs	r3, #0
 800242e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002430:	2300      	movs	r3, #0
 8002432:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002434:	2300      	movs	r3, #0
 8002436:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002438:	463b      	mov	r3, r7
 800243a:	2200      	movs	r2, #0
 800243c:	4619      	mov	r1, r3
 800243e:	480a      	ldr	r0, [pc, #40]	; (8002468 <_ZL12MX_TIM2_Initv+0x11c>)
 8002440:	f00a fbec 	bl	800cc1c <HAL_TIM_PWM_ConfigChannel>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	bf14      	ite	ne
 800244a:	2301      	movne	r3, #1
 800244c:	2300      	moveq	r3, #0
 800244e:	b2db      	uxtb	r3, r3
 8002450:	2b00      	cmp	r3, #0
 8002452:	d001      	beq.n	8002458 <_ZL12MX_TIM2_Initv+0x10c>
  {
    Error_Handler();
 8002454:	f000 fdc4 	bl	8002fe0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002458:	4803      	ldr	r0, [pc, #12]	; (8002468 <_ZL12MX_TIM2_Initv+0x11c>)
 800245a:	f000 ffc9 	bl	80033f0 <HAL_TIM_MspPostInit>

}
 800245e:	bf00      	nop
 8002460:	3738      	adds	r7, #56	; 0x38
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	24000360 	.word	0x24000360

0800246c <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b08e      	sub	sp, #56	; 0x38
 8002470:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002472:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002476:	2200      	movs	r2, #0
 8002478:	601a      	str	r2, [r3, #0]
 800247a:	605a      	str	r2, [r3, #4]
 800247c:	609a      	str	r2, [r3, #8]
 800247e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002480:	f107 031c 	add.w	r3, r7, #28
 8002484:	2200      	movs	r2, #0
 8002486:	601a      	str	r2, [r3, #0]
 8002488:	605a      	str	r2, [r3, #4]
 800248a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800248c:	463b      	mov	r3, r7
 800248e:	2200      	movs	r2, #0
 8002490:	601a      	str	r2, [r3, #0]
 8002492:	605a      	str	r2, [r3, #4]
 8002494:	609a      	str	r2, [r3, #8]
 8002496:	60da      	str	r2, [r3, #12]
 8002498:	611a      	str	r2, [r3, #16]
 800249a:	615a      	str	r2, [r3, #20]
 800249c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800249e:	4b39      	ldr	r3, [pc, #228]	; (8002584 <_ZL12MX_TIM3_Initv+0x118>)
 80024a0:	4a39      	ldr	r2, [pc, #228]	; (8002588 <_ZL12MX_TIM3_Initv+0x11c>)
 80024a2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 75;
 80024a4:	4b37      	ldr	r3, [pc, #220]	; (8002584 <_ZL12MX_TIM3_Initv+0x118>)
 80024a6:	224b      	movs	r2, #75	; 0x4b
 80024a8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024aa:	4b36      	ldr	r3, [pc, #216]	; (8002584 <_ZL12MX_TIM3_Initv+0x118>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1950;
 80024b0:	4b34      	ldr	r3, [pc, #208]	; (8002584 <_ZL12MX_TIM3_Initv+0x118>)
 80024b2:	f240 729e 	movw	r2, #1950	; 0x79e
 80024b6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024b8:	4b32      	ldr	r3, [pc, #200]	; (8002584 <_ZL12MX_TIM3_Initv+0x118>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80024be:	4b31      	ldr	r3, [pc, #196]	; (8002584 <_ZL12MX_TIM3_Initv+0x118>)
 80024c0:	2280      	movs	r2, #128	; 0x80
 80024c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80024c4:	482f      	ldr	r0, [pc, #188]	; (8002584 <_ZL12MX_TIM3_Initv+0x118>)
 80024c6:	f009 fef5 	bl	800c2b4 <HAL_TIM_Base_Init>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	bf14      	ite	ne
 80024d0:	2301      	movne	r3, #1
 80024d2:	2300      	moveq	r3, #0
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d001      	beq.n	80024de <_ZL12MX_TIM3_Initv+0x72>
  {
    Error_Handler();
 80024da:	f000 fd81 	bl	8002fe0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024e2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80024e4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80024e8:	4619      	mov	r1, r3
 80024ea:	4826      	ldr	r0, [pc, #152]	; (8002584 <_ZL12MX_TIM3_Initv+0x118>)
 80024ec:	f00a fcaa 	bl	800ce44 <HAL_TIM_ConfigClockSource>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	bf14      	ite	ne
 80024f6:	2301      	movne	r3, #1
 80024f8:	2300      	moveq	r3, #0
 80024fa:	b2db      	uxtb	r3, r3
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d001      	beq.n	8002504 <_ZL12MX_TIM3_Initv+0x98>
  {
    Error_Handler();
 8002500:	f000 fd6e 	bl	8002fe0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002504:	481f      	ldr	r0, [pc, #124]	; (8002584 <_ZL12MX_TIM3_Initv+0x118>)
 8002506:	f009 ffa5 	bl	800c454 <HAL_TIM_PWM_Init>
 800250a:	4603      	mov	r3, r0
 800250c:	2b00      	cmp	r3, #0
 800250e:	bf14      	ite	ne
 8002510:	2301      	movne	r3, #1
 8002512:	2300      	moveq	r3, #0
 8002514:	b2db      	uxtb	r3, r3
 8002516:	2b00      	cmp	r3, #0
 8002518:	d001      	beq.n	800251e <_ZL12MX_TIM3_Initv+0xb2>
  {
    Error_Handler();
 800251a:	f000 fd61 	bl	8002fe0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800251e:	2300      	movs	r3, #0
 8002520:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002522:	2300      	movs	r3, #0
 8002524:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002526:	f107 031c 	add.w	r3, r7, #28
 800252a:	4619      	mov	r1, r3
 800252c:	4815      	ldr	r0, [pc, #84]	; (8002584 <_ZL12MX_TIM3_Initv+0x118>)
 800252e:	f00b f9dd 	bl	800d8ec <HAL_TIMEx_MasterConfigSynchronization>
 8002532:	4603      	mov	r3, r0
 8002534:	2b00      	cmp	r3, #0
 8002536:	bf14      	ite	ne
 8002538:	2301      	movne	r3, #1
 800253a:	2300      	moveq	r3, #0
 800253c:	b2db      	uxtb	r3, r3
 800253e:	2b00      	cmp	r3, #0
 8002540:	d001      	beq.n	8002546 <_ZL12MX_TIM3_Initv+0xda>
  {
    Error_Handler();
 8002542:	f000 fd4d 	bl	8002fe0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002546:	2360      	movs	r3, #96	; 0x60
 8002548:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800254a:	2300      	movs	r3, #0
 800254c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800254e:	2300      	movs	r3, #0
 8002550:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002552:	2300      	movs	r3, #0
 8002554:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002556:	463b      	mov	r3, r7
 8002558:	2200      	movs	r2, #0
 800255a:	4619      	mov	r1, r3
 800255c:	4809      	ldr	r0, [pc, #36]	; (8002584 <_ZL12MX_TIM3_Initv+0x118>)
 800255e:	f00a fb5d 	bl	800cc1c <HAL_TIM_PWM_ConfigChannel>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	bf14      	ite	ne
 8002568:	2301      	movne	r3, #1
 800256a:	2300      	moveq	r3, #0
 800256c:	b2db      	uxtb	r3, r3
 800256e:	2b00      	cmp	r3, #0
 8002570:	d001      	beq.n	8002576 <_ZL12MX_TIM3_Initv+0x10a>
  {
    Error_Handler();
 8002572:	f000 fd35 	bl	8002fe0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002576:	4803      	ldr	r0, [pc, #12]	; (8002584 <_ZL12MX_TIM3_Initv+0x118>)
 8002578:	f000 ff3a 	bl	80033f0 <HAL_TIM_MspPostInit>

}
 800257c:	bf00      	nop
 800257e:	3738      	adds	r7, #56	; 0x38
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}
 8002584:	240003ac 	.word	0x240003ac
 8002588:	40000400 	.word	0x40000400

0800258c <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b08c      	sub	sp, #48	; 0x30
 8002590:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002592:	f107 030c 	add.w	r3, r7, #12
 8002596:	2224      	movs	r2, #36	; 0x24
 8002598:	2100      	movs	r1, #0
 800259a:	4618      	mov	r0, r3
 800259c:	f011 ff7f 	bl	801449e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025a0:	463b      	mov	r3, r7
 80025a2:	2200      	movs	r2, #0
 80025a4:	601a      	str	r2, [r3, #0]
 80025a6:	605a      	str	r2, [r3, #4]
 80025a8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80025aa:	4b26      	ldr	r3, [pc, #152]	; (8002644 <_ZL12MX_TIM4_Initv+0xb8>)
 80025ac:	4a26      	ldr	r2, [pc, #152]	; (8002648 <_ZL12MX_TIM4_Initv+0xbc>)
 80025ae:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80025b0:	4b24      	ldr	r3, [pc, #144]	; (8002644 <_ZL12MX_TIM4_Initv+0xb8>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025b6:	4b23      	ldr	r3, [pc, #140]	; (8002644 <_ZL12MX_TIM4_Initv+0xb8>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 538;
 80025bc:	4b21      	ldr	r3, [pc, #132]	; (8002644 <_ZL12MX_TIM4_Initv+0xb8>)
 80025be:	f240 221a 	movw	r2, #538	; 0x21a
 80025c2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025c4:	4b1f      	ldr	r3, [pc, #124]	; (8002644 <_ZL12MX_TIM4_Initv+0xb8>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80025ca:	4b1e      	ldr	r3, [pc, #120]	; (8002644 <_ZL12MX_TIM4_Initv+0xb8>)
 80025cc:	2280      	movs	r2, #128	; 0x80
 80025ce:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80025d0:	2303      	movs	r3, #3
 80025d2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 80025d4:	2302      	movs	r3, #2
 80025d6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80025d8:	2301      	movs	r3, #1
 80025da:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80025dc:	2300      	movs	r3, #0
 80025de:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 1;
 80025e0:	2301      	movs	r3, #1
 80025e2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80025e4:	2302      	movs	r3, #2
 80025e6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80025e8:	2301      	movs	r3, #1
 80025ea:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80025ec:	2300      	movs	r3, #0
 80025ee:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 1;
 80025f0:	2301      	movs	r3, #1
 80025f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80025f4:	f107 030c 	add.w	r3, r7, #12
 80025f8:	4619      	mov	r1, r3
 80025fa:	4812      	ldr	r0, [pc, #72]	; (8002644 <_ZL12MX_TIM4_Initv+0xb8>)
 80025fc:	f00a f89a 	bl	800c734 <HAL_TIM_Encoder_Init>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	bf14      	ite	ne
 8002606:	2301      	movne	r3, #1
 8002608:	2300      	moveq	r3, #0
 800260a:	b2db      	uxtb	r3, r3
 800260c:	2b00      	cmp	r3, #0
 800260e:	d001      	beq.n	8002614 <_ZL12MX_TIM4_Initv+0x88>
  {
    Error_Handler();
 8002610:	f000 fce6 	bl	8002fe0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002614:	2300      	movs	r3, #0
 8002616:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002618:	2300      	movs	r3, #0
 800261a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800261c:	463b      	mov	r3, r7
 800261e:	4619      	mov	r1, r3
 8002620:	4808      	ldr	r0, [pc, #32]	; (8002644 <_ZL12MX_TIM4_Initv+0xb8>)
 8002622:	f00b f963 	bl	800d8ec <HAL_TIMEx_MasterConfigSynchronization>
 8002626:	4603      	mov	r3, r0
 8002628:	2b00      	cmp	r3, #0
 800262a:	bf14      	ite	ne
 800262c:	2301      	movne	r3, #1
 800262e:	2300      	moveq	r3, #0
 8002630:	b2db      	uxtb	r3, r3
 8002632:	2b00      	cmp	r3, #0
 8002634:	d001      	beq.n	800263a <_ZL12MX_TIM4_Initv+0xae>
  {
    Error_Handler();
 8002636:	f000 fcd3 	bl	8002fe0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800263a:	bf00      	nop
 800263c:	3730      	adds	r7, #48	; 0x30
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	240003f8 	.word	0x240003f8
 8002648:	40000800 	.word	0x40000800

0800264c <_ZL12MX_TIM5_Initv>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b08e      	sub	sp, #56	; 0x38
 8002650:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002652:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002656:	2200      	movs	r2, #0
 8002658:	601a      	str	r2, [r3, #0]
 800265a:	605a      	str	r2, [r3, #4]
 800265c:	609a      	str	r2, [r3, #8]
 800265e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002660:	f107 031c 	add.w	r3, r7, #28
 8002664:	2200      	movs	r2, #0
 8002666:	601a      	str	r2, [r3, #0]
 8002668:	605a      	str	r2, [r3, #4]
 800266a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800266c:	463b      	mov	r3, r7
 800266e:	2200      	movs	r2, #0
 8002670:	601a      	str	r2, [r3, #0]
 8002672:	605a      	str	r2, [r3, #4]
 8002674:	609a      	str	r2, [r3, #8]
 8002676:	60da      	str	r2, [r3, #12]
 8002678:	611a      	str	r2, [r3, #16]
 800267a:	615a      	str	r2, [r3, #20]
 800267c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800267e:	4b39      	ldr	r3, [pc, #228]	; (8002764 <_ZL12MX_TIM5_Initv+0x118>)
 8002680:	4a39      	ldr	r2, [pc, #228]	; (8002768 <_ZL12MX_TIM5_Initv+0x11c>)
 8002682:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 100-1;
 8002684:	4b37      	ldr	r3, [pc, #220]	; (8002764 <_ZL12MX_TIM5_Initv+0x118>)
 8002686:	2263      	movs	r2, #99	; 0x63
 8002688:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800268a:	4b36      	ldr	r3, [pc, #216]	; (8002764 <_ZL12MX_TIM5_Initv+0x118>)
 800268c:	2200      	movs	r2, #0
 800268e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 15000-1;
 8002690:	4b34      	ldr	r3, [pc, #208]	; (8002764 <_ZL12MX_TIM5_Initv+0x118>)
 8002692:	f643 2297 	movw	r2, #14999	; 0x3a97
 8002696:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002698:	4b32      	ldr	r3, [pc, #200]	; (8002764 <_ZL12MX_TIM5_Initv+0x118>)
 800269a:	2200      	movs	r2, #0
 800269c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800269e:	4b31      	ldr	r3, [pc, #196]	; (8002764 <_ZL12MX_TIM5_Initv+0x118>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80026a4:	482f      	ldr	r0, [pc, #188]	; (8002764 <_ZL12MX_TIM5_Initv+0x118>)
 80026a6:	f009 fe05 	bl	800c2b4 <HAL_TIM_Base_Init>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	bf14      	ite	ne
 80026b0:	2301      	movne	r3, #1
 80026b2:	2300      	moveq	r3, #0
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d001      	beq.n	80026be <_ZL12MX_TIM5_Initv+0x72>
  {
    Error_Handler();
 80026ba:	f000 fc91 	bl	8002fe0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026c2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80026c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80026c8:	4619      	mov	r1, r3
 80026ca:	4826      	ldr	r0, [pc, #152]	; (8002764 <_ZL12MX_TIM5_Initv+0x118>)
 80026cc:	f00a fbba 	bl	800ce44 <HAL_TIM_ConfigClockSource>
 80026d0:	4603      	mov	r3, r0
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	bf14      	ite	ne
 80026d6:	2301      	movne	r3, #1
 80026d8:	2300      	moveq	r3, #0
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d001      	beq.n	80026e4 <_ZL12MX_TIM5_Initv+0x98>
  {
    Error_Handler();
 80026e0:	f000 fc7e 	bl	8002fe0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80026e4:	481f      	ldr	r0, [pc, #124]	; (8002764 <_ZL12MX_TIM5_Initv+0x118>)
 80026e6:	f009 feb5 	bl	800c454 <HAL_TIM_PWM_Init>
 80026ea:	4603      	mov	r3, r0
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	bf14      	ite	ne
 80026f0:	2301      	movne	r3, #1
 80026f2:	2300      	moveq	r3, #0
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d001      	beq.n	80026fe <_ZL12MX_TIM5_Initv+0xb2>
  {
    Error_Handler();
 80026fa:	f000 fc71 	bl	8002fe0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026fe:	2300      	movs	r3, #0
 8002700:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002702:	2300      	movs	r3, #0
 8002704:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002706:	f107 031c 	add.w	r3, r7, #28
 800270a:	4619      	mov	r1, r3
 800270c:	4815      	ldr	r0, [pc, #84]	; (8002764 <_ZL12MX_TIM5_Initv+0x118>)
 800270e:	f00b f8ed 	bl	800d8ec <HAL_TIMEx_MasterConfigSynchronization>
 8002712:	4603      	mov	r3, r0
 8002714:	2b00      	cmp	r3, #0
 8002716:	bf14      	ite	ne
 8002718:	2301      	movne	r3, #1
 800271a:	2300      	moveq	r3, #0
 800271c:	b2db      	uxtb	r3, r3
 800271e:	2b00      	cmp	r3, #0
 8002720:	d001      	beq.n	8002726 <_ZL12MX_TIM5_Initv+0xda>
  {
    Error_Handler();
 8002722:	f000 fc5d 	bl	8002fe0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002726:	2360      	movs	r3, #96	; 0x60
 8002728:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800272a:	2300      	movs	r3, #0
 800272c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800272e:	2300      	movs	r3, #0
 8002730:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002732:	2300      	movs	r3, #0
 8002734:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002736:	463b      	mov	r3, r7
 8002738:	220c      	movs	r2, #12
 800273a:	4619      	mov	r1, r3
 800273c:	4809      	ldr	r0, [pc, #36]	; (8002764 <_ZL12MX_TIM5_Initv+0x118>)
 800273e:	f00a fa6d 	bl	800cc1c <HAL_TIM_PWM_ConfigChannel>
 8002742:	4603      	mov	r3, r0
 8002744:	2b00      	cmp	r3, #0
 8002746:	bf14      	ite	ne
 8002748:	2301      	movne	r3, #1
 800274a:	2300      	moveq	r3, #0
 800274c:	b2db      	uxtb	r3, r3
 800274e:	2b00      	cmp	r3, #0
 8002750:	d001      	beq.n	8002756 <_ZL12MX_TIM5_Initv+0x10a>
  {
    Error_Handler();
 8002752:	f000 fc45 	bl	8002fe0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8002756:	4803      	ldr	r0, [pc, #12]	; (8002764 <_ZL12MX_TIM5_Initv+0x118>)
 8002758:	f000 fe4a 	bl	80033f0 <HAL_TIM_MspPostInit>

}
 800275c:	bf00      	nop
 800275e:	3738      	adds	r7, #56	; 0x38
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}
 8002764:	24000444 	.word	0x24000444
 8002768:	40000c00 	.word	0x40000c00

0800276c <_ZL12MX_TIM8_Initv>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b08c      	sub	sp, #48	; 0x30
 8002770:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002772:	f107 030c 	add.w	r3, r7, #12
 8002776:	2224      	movs	r2, #36	; 0x24
 8002778:	2100      	movs	r1, #0
 800277a:	4618      	mov	r0, r3
 800277c:	f011 fe8f 	bl	801449e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002780:	463b      	mov	r3, r7
 8002782:	2200      	movs	r2, #0
 8002784:	601a      	str	r2, [r3, #0]
 8002786:	605a      	str	r2, [r3, #4]
 8002788:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800278a:	4b28      	ldr	r3, [pc, #160]	; (800282c <_ZL12MX_TIM8_Initv+0xc0>)
 800278c:	4a28      	ldr	r2, [pc, #160]	; (8002830 <_ZL12MX_TIM8_Initv+0xc4>)
 800278e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002790:	4b26      	ldr	r3, [pc, #152]	; (800282c <_ZL12MX_TIM8_Initv+0xc0>)
 8002792:	2200      	movs	r2, #0
 8002794:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002796:	4b25      	ldr	r3, [pc, #148]	; (800282c <_ZL12MX_TIM8_Initv+0xc0>)
 8002798:	2200      	movs	r2, #0
 800279a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 538;
 800279c:	4b23      	ldr	r3, [pc, #140]	; (800282c <_ZL12MX_TIM8_Initv+0xc0>)
 800279e:	f240 221a 	movw	r2, #538	; 0x21a
 80027a2:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027a4:	4b21      	ldr	r3, [pc, #132]	; (800282c <_ZL12MX_TIM8_Initv+0xc0>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80027aa:	4b20      	ldr	r3, [pc, #128]	; (800282c <_ZL12MX_TIM8_Initv+0xc0>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80027b0:	4b1e      	ldr	r3, [pc, #120]	; (800282c <_ZL12MX_TIM8_Initv+0xc0>)
 80027b2:	2280      	movs	r2, #128	; 0x80
 80027b4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80027b6:	2303      	movs	r3, #3
 80027b8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80027ba:	2300      	movs	r3, #0
 80027bc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80027be:	2301      	movs	r3, #1
 80027c0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80027c2:	2300      	movs	r3, #0
 80027c4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 1;
 80027c6:	2301      	movs	r3, #1
 80027c8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80027ca:	2300      	movs	r3, #0
 80027cc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80027ce:	2301      	movs	r3, #1
 80027d0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80027d2:	2300      	movs	r3, #0
 80027d4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 1;
 80027d6:	2301      	movs	r3, #1
 80027d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 80027da:	f107 030c 	add.w	r3, r7, #12
 80027de:	4619      	mov	r1, r3
 80027e0:	4812      	ldr	r0, [pc, #72]	; (800282c <_ZL12MX_TIM8_Initv+0xc0>)
 80027e2:	f009 ffa7 	bl	800c734 <HAL_TIM_Encoder_Init>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	bf14      	ite	ne
 80027ec:	2301      	movne	r3, #1
 80027ee:	2300      	moveq	r3, #0
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d001      	beq.n	80027fa <_ZL12MX_TIM8_Initv+0x8e>
  {
    Error_Handler();
 80027f6:	f000 fbf3 	bl	8002fe0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027fa:	2300      	movs	r3, #0
 80027fc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80027fe:	2300      	movs	r3, #0
 8002800:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002802:	2300      	movs	r3, #0
 8002804:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002806:	463b      	mov	r3, r7
 8002808:	4619      	mov	r1, r3
 800280a:	4808      	ldr	r0, [pc, #32]	; (800282c <_ZL12MX_TIM8_Initv+0xc0>)
 800280c:	f00b f86e 	bl	800d8ec <HAL_TIMEx_MasterConfigSynchronization>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	bf14      	ite	ne
 8002816:	2301      	movne	r3, #1
 8002818:	2300      	moveq	r3, #0
 800281a:	b2db      	uxtb	r3, r3
 800281c:	2b00      	cmp	r3, #0
 800281e:	d001      	beq.n	8002824 <_ZL12MX_TIM8_Initv+0xb8>
  {
    Error_Handler();
 8002820:	f000 fbde 	bl	8002fe0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8002824:	bf00      	nop
 8002826:	3730      	adds	r7, #48	; 0x30
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}
 800282c:	24000490 	.word	0x24000490
 8002830:	40010400 	.word	0x40010400

08002834 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002838:	4b2c      	ldr	r3, [pc, #176]	; (80028ec <_ZL19MX_USART3_UART_Initv+0xb8>)
 800283a:	4a2d      	ldr	r2, [pc, #180]	; (80028f0 <_ZL19MX_USART3_UART_Initv+0xbc>)
 800283c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800283e:	4b2b      	ldr	r3, [pc, #172]	; (80028ec <_ZL19MX_USART3_UART_Initv+0xb8>)
 8002840:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002844:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002846:	4b29      	ldr	r3, [pc, #164]	; (80028ec <_ZL19MX_USART3_UART_Initv+0xb8>)
 8002848:	2200      	movs	r2, #0
 800284a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800284c:	4b27      	ldr	r3, [pc, #156]	; (80028ec <_ZL19MX_USART3_UART_Initv+0xb8>)
 800284e:	2200      	movs	r2, #0
 8002850:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002852:	4b26      	ldr	r3, [pc, #152]	; (80028ec <_ZL19MX_USART3_UART_Initv+0xb8>)
 8002854:	2200      	movs	r2, #0
 8002856:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002858:	4b24      	ldr	r3, [pc, #144]	; (80028ec <_ZL19MX_USART3_UART_Initv+0xb8>)
 800285a:	220c      	movs	r2, #12
 800285c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800285e:	4b23      	ldr	r3, [pc, #140]	; (80028ec <_ZL19MX_USART3_UART_Initv+0xb8>)
 8002860:	2200      	movs	r2, #0
 8002862:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002864:	4b21      	ldr	r3, [pc, #132]	; (80028ec <_ZL19MX_USART3_UART_Initv+0xb8>)
 8002866:	2200      	movs	r2, #0
 8002868:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800286a:	4b20      	ldr	r3, [pc, #128]	; (80028ec <_ZL19MX_USART3_UART_Initv+0xb8>)
 800286c:	2200      	movs	r2, #0
 800286e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002870:	4b1e      	ldr	r3, [pc, #120]	; (80028ec <_ZL19MX_USART3_UART_Initv+0xb8>)
 8002872:	2200      	movs	r2, #0
 8002874:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002876:	4b1d      	ldr	r3, [pc, #116]	; (80028ec <_ZL19MX_USART3_UART_Initv+0xb8>)
 8002878:	2200      	movs	r2, #0
 800287a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800287c:	481b      	ldr	r0, [pc, #108]	; (80028ec <_ZL19MX_USART3_UART_Initv+0xb8>)
 800287e:	f00b f8e1 	bl	800da44 <HAL_UART_Init>
 8002882:	4603      	mov	r3, r0
 8002884:	2b00      	cmp	r3, #0
 8002886:	bf14      	ite	ne
 8002888:	2301      	movne	r3, #1
 800288a:	2300      	moveq	r3, #0
 800288c:	b2db      	uxtb	r3, r3
 800288e:	2b00      	cmp	r3, #0
 8002890:	d001      	beq.n	8002896 <_ZL19MX_USART3_UART_Initv+0x62>
  {
    Error_Handler();
 8002892:	f000 fba5 	bl	8002fe0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002896:	2100      	movs	r1, #0
 8002898:	4814      	ldr	r0, [pc, #80]	; (80028ec <_ZL19MX_USART3_UART_Initv+0xb8>)
 800289a:	f00c fda5 	bl	800f3e8 <HAL_UARTEx_SetTxFifoThreshold>
 800289e:	4603      	mov	r3, r0
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	bf14      	ite	ne
 80028a4:	2301      	movne	r3, #1
 80028a6:	2300      	moveq	r3, #0
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d001      	beq.n	80028b2 <_ZL19MX_USART3_UART_Initv+0x7e>
  {
    Error_Handler();
 80028ae:	f000 fb97 	bl	8002fe0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80028b2:	2100      	movs	r1, #0
 80028b4:	480d      	ldr	r0, [pc, #52]	; (80028ec <_ZL19MX_USART3_UART_Initv+0xb8>)
 80028b6:	f00c fdd5 	bl	800f464 <HAL_UARTEx_SetRxFifoThreshold>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2b00      	cmp	r3, #0
 80028be:	bf14      	ite	ne
 80028c0:	2301      	movne	r3, #1
 80028c2:	2300      	moveq	r3, #0
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d001      	beq.n	80028ce <_ZL19MX_USART3_UART_Initv+0x9a>
  {
    Error_Handler();
 80028ca:	f000 fb89 	bl	8002fe0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80028ce:	4807      	ldr	r0, [pc, #28]	; (80028ec <_ZL19MX_USART3_UART_Initv+0xb8>)
 80028d0:	f00c fd51 	bl	800f376 <HAL_UARTEx_DisableFifoMode>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	bf14      	ite	ne
 80028da:	2301      	movne	r3, #1
 80028dc:	2300      	moveq	r3, #0
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d001      	beq.n	80028e8 <_ZL19MX_USART3_UART_Initv+0xb4>
  {
    Error_Handler();
 80028e4:	f000 fb7c 	bl	8002fe0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80028e8:	bf00      	nop
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	240004dc 	.word	0x240004dc
 80028f0:	40004800 	.word	0x40004800

080028f4 <_ZL22MX_USB_OTG_FS_PCD_Initv>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80028f8:	4b17      	ldr	r3, [pc, #92]	; (8002958 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 80028fa:	4a18      	ldr	r2, [pc, #96]	; (800295c <_ZL22MX_USB_OTG_FS_PCD_Initv+0x68>)
 80028fc:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80028fe:	4b16      	ldr	r3, [pc, #88]	; (8002958 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8002900:	2209      	movs	r2, #9
 8002902:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002904:	4b14      	ldr	r3, [pc, #80]	; (8002958 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8002906:	2202      	movs	r2, #2
 8002908:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800290a:	4b13      	ldr	r3, [pc, #76]	; (8002958 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 800290c:	2200      	movs	r2, #0
 800290e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002910:	4b11      	ldr	r3, [pc, #68]	; (8002958 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8002912:	2202      	movs	r2, #2
 8002914:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8002916:	4b10      	ldr	r3, [pc, #64]	; (8002958 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8002918:	2200      	movs	r2, #0
 800291a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800291c:	4b0e      	ldr	r3, [pc, #56]	; (8002958 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 800291e:	2200      	movs	r2, #0
 8002920:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002922:	4b0d      	ldr	r3, [pc, #52]	; (8002958 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8002924:	2200      	movs	r2, #0
 8002926:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8002928:	4b0b      	ldr	r3, [pc, #44]	; (8002958 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 800292a:	2201      	movs	r2, #1
 800292c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800292e:	4b0a      	ldr	r3, [pc, #40]	; (8002958 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8002930:	2201      	movs	r2, #1
 8002932:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002934:	4b08      	ldr	r3, [pc, #32]	; (8002958 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8002936:	2200      	movs	r2, #0
 8002938:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800293a:	4807      	ldr	r0, [pc, #28]	; (8002958 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 800293c:	f005 fde1 	bl	8008502 <HAL_PCD_Init>
 8002940:	4603      	mov	r3, r0
 8002942:	2b00      	cmp	r3, #0
 8002944:	bf14      	ite	ne
 8002946:	2301      	movne	r3, #1
 8002948:	2300      	moveq	r3, #0
 800294a:	b2db      	uxtb	r3, r3
 800294c:	2b00      	cmp	r3, #0
 800294e:	d001      	beq.n	8002954 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>
  {
    Error_Handler();
 8002950:	f000 fb46 	bl	8002fe0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002954:	bf00      	nop
 8002956:	bd80      	pop	{r7, pc}
 8002958:	24000660 	.word	0x24000660
 800295c:	40080000 	.word	0x40080000

08002960 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b082      	sub	sp, #8
 8002964:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002966:	4b11      	ldr	r3, [pc, #68]	; (80029ac <_ZL11MX_DMA_Initv+0x4c>)
 8002968:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800296c:	4a0f      	ldr	r2, [pc, #60]	; (80029ac <_ZL11MX_DMA_Initv+0x4c>)
 800296e:	f043 0301 	orr.w	r3, r3, #1
 8002972:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002976:	4b0d      	ldr	r3, [pc, #52]	; (80029ac <_ZL11MX_DMA_Initv+0x4c>)
 8002978:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800297c:	f003 0301 	and.w	r3, r3, #1
 8002980:	607b      	str	r3, [r7, #4]
 8002982:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8002984:	2200      	movs	r2, #0
 8002986:	2105      	movs	r1, #5
 8002988:	200b      	movs	r0, #11
 800298a:	f002 fd31 	bl	80053f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800298e:	200b      	movs	r0, #11
 8002990:	f002 fd48 	bl	8005424 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8002994:	2200      	movs	r2, #0
 8002996:	2105      	movs	r1, #5
 8002998:	200c      	movs	r0, #12
 800299a:	f002 fd29 	bl	80053f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800299e:	200c      	movs	r0, #12
 80029a0:	f002 fd40 	bl	8005424 <HAL_NVIC_EnableIRQ>

}
 80029a4:	bf00      	nop
 80029a6:	3708      	adds	r7, #8
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	58024400 	.word	0x58024400

080029b0 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b08c      	sub	sp, #48	; 0x30
 80029b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029b6:	f107 031c 	add.w	r3, r7, #28
 80029ba:	2200      	movs	r2, #0
 80029bc:	601a      	str	r2, [r3, #0]
 80029be:	605a      	str	r2, [r3, #4]
 80029c0:	609a      	str	r2, [r3, #8]
 80029c2:	60da      	str	r2, [r3, #12]
 80029c4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80029c6:	4b58      	ldr	r3, [pc, #352]	; (8002b28 <_ZL12MX_GPIO_Initv+0x178>)
 80029c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029cc:	4a56      	ldr	r2, [pc, #344]	; (8002b28 <_ZL12MX_GPIO_Initv+0x178>)
 80029ce:	f043 0304 	orr.w	r3, r3, #4
 80029d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80029d6:	4b54      	ldr	r3, [pc, #336]	; (8002b28 <_ZL12MX_GPIO_Initv+0x178>)
 80029d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029dc:	f003 0304 	and.w	r3, r3, #4
 80029e0:	61bb      	str	r3, [r7, #24]
 80029e2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80029e4:	4b50      	ldr	r3, [pc, #320]	; (8002b28 <_ZL12MX_GPIO_Initv+0x178>)
 80029e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029ea:	4a4f      	ldr	r2, [pc, #316]	; (8002b28 <_ZL12MX_GPIO_Initv+0x178>)
 80029ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80029f4:	4b4c      	ldr	r3, [pc, #304]	; (8002b28 <_ZL12MX_GPIO_Initv+0x178>)
 80029f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029fe:	617b      	str	r3, [r7, #20]
 8002a00:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a02:	4b49      	ldr	r3, [pc, #292]	; (8002b28 <_ZL12MX_GPIO_Initv+0x178>)
 8002a04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a08:	4a47      	ldr	r2, [pc, #284]	; (8002b28 <_ZL12MX_GPIO_Initv+0x178>)
 8002a0a:	f043 0301 	orr.w	r3, r3, #1
 8002a0e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a12:	4b45      	ldr	r3, [pc, #276]	; (8002b28 <_ZL12MX_GPIO_Initv+0x178>)
 8002a14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a18:	f003 0301 	and.w	r3, r3, #1
 8002a1c:	613b      	str	r3, [r7, #16]
 8002a1e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a20:	4b41      	ldr	r3, [pc, #260]	; (8002b28 <_ZL12MX_GPIO_Initv+0x178>)
 8002a22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a26:	4a40      	ldr	r2, [pc, #256]	; (8002b28 <_ZL12MX_GPIO_Initv+0x178>)
 8002a28:	f043 0302 	orr.w	r3, r3, #2
 8002a2c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a30:	4b3d      	ldr	r3, [pc, #244]	; (8002b28 <_ZL12MX_GPIO_Initv+0x178>)
 8002a32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a36:	f003 0302 	and.w	r3, r3, #2
 8002a3a:	60fb      	str	r3, [r7, #12]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002a3e:	4b3a      	ldr	r3, [pc, #232]	; (8002b28 <_ZL12MX_GPIO_Initv+0x178>)
 8002a40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a44:	4a38      	ldr	r2, [pc, #224]	; (8002b28 <_ZL12MX_GPIO_Initv+0x178>)
 8002a46:	f043 0310 	orr.w	r3, r3, #16
 8002a4a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a4e:	4b36      	ldr	r3, [pc, #216]	; (8002b28 <_ZL12MX_GPIO_Initv+0x178>)
 8002a50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a54:	f003 0310 	and.w	r3, r3, #16
 8002a58:	60bb      	str	r3, [r7, #8]
 8002a5a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a5c:	4b32      	ldr	r3, [pc, #200]	; (8002b28 <_ZL12MX_GPIO_Initv+0x178>)
 8002a5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a62:	4a31      	ldr	r2, [pc, #196]	; (8002b28 <_ZL12MX_GPIO_Initv+0x178>)
 8002a64:	f043 0308 	orr.w	r3, r3, #8
 8002a68:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a6c:	4b2e      	ldr	r3, [pc, #184]	; (8002b28 <_ZL12MX_GPIO_Initv+0x178>)
 8002a6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a72:	f003 0308 	and.w	r3, r3, #8
 8002a76:	607b      	str	r3, [r7, #4]
 8002a78:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	f244 0101 	movw	r1, #16385	; 0x4001
 8002a80:	482a      	ldr	r0, [pc, #168]	; (8002b2c <_ZL12MX_GPIO_Initv+0x17c>)
 8002a82:	f005 f8cb 	bl	8007c1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, R1_Pin|R2_Pin|R3_Pin|R4_Pin
 8002a86:	2200      	movs	r2, #0
 8002a88:	f240 7182 	movw	r1, #1922	; 0x782
 8002a8c:	4828      	ldr	r0, [pc, #160]	; (8002b30 <_ZL12MX_GPIO_Initv+0x180>)
 8002a8e:	f005 f8c5 	bl	8007c1c <HAL_GPIO_WritePin>
                          |LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8002a92:	f244 0301 	movw	r3, #16385	; 0x4001
 8002a96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002aa0:	2302      	movs	r3, #2
 8002aa2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002aa4:	f107 031c 	add.w	r3, r7, #28
 8002aa8:	4619      	mov	r1, r3
 8002aaa:	4820      	ldr	r0, [pc, #128]	; (8002b2c <_ZL12MX_GPIO_Initv+0x17c>)
 8002aac:	f004 feee 	bl	800788c <HAL_GPIO_Init>

  /*Configure GPIO pins : R1_Pin R2_Pin R3_Pin R4_Pin */
  GPIO_InitStruct.Pin = R1_Pin|R2_Pin|R3_Pin|R4_Pin;
 8002ab0:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8002ab4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002aba:	2301      	movs	r3, #1
 8002abc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002ac2:	f107 031c 	add.w	r3, r7, #28
 8002ac6:	4619      	mov	r1, r3
 8002ac8:	4819      	ldr	r0, [pc, #100]	; (8002b30 <_ZL12MX_GPIO_Initv+0x180>)
 8002aca:	f004 fedf 	bl	800788c <HAL_GPIO_Init>

  /*Configure GPIO pins : C1_Pin C2_Pin C3_Pin C4_Pin */
  GPIO_InitStruct.Pin = C1_Pin|C2_Pin|C3_Pin|C4_Pin;
 8002ace:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 8002ad2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002adc:	f107 031c 	add.w	r3, r7, #28
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	4813      	ldr	r0, [pc, #76]	; (8002b30 <_ZL12MX_GPIO_Initv+0x180>)
 8002ae4:	f004 fed2 	bl	800788c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002ae8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002aec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002aee:	2300      	movs	r3, #0
 8002af0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af2:	2300      	movs	r3, #0
 8002af4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002af6:	f107 031c 	add.w	r3, r7, #28
 8002afa:	4619      	mov	r1, r3
 8002afc:	480d      	ldr	r0, [pc, #52]	; (8002b34 <_ZL12MX_GPIO_Initv+0x184>)
 8002afe:	f004 fec5 	bl	800788c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002b02:	2302      	movs	r3, #2
 8002b04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b06:	2301      	movs	r3, #1
 8002b08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b0e:	2302      	movs	r3, #2
 8002b10:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002b12:	f107 031c 	add.w	r3, r7, #28
 8002b16:	4619      	mov	r1, r3
 8002b18:	4805      	ldr	r0, [pc, #20]	; (8002b30 <_ZL12MX_GPIO_Initv+0x180>)
 8002b1a:	f004 feb7 	bl	800788c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002b1e:	bf00      	nop
 8002b20:	3730      	adds	r7, #48	; 0x30
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	58024400 	.word	0x58024400
 8002b2c:	58020400 	.word	0x58020400
 8002b30:	58021000 	.word	0x58021000
 8002b34:	58020800 	.word	0x58020800

08002b38 <_Z16StartDefaultTaskPv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b082      	sub	sp, #8
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002b40:	2001      	movs	r0, #1
 8002b42:	f00d f945 	bl	800fdd0 <osDelay>
 8002b46:	e7fb      	b.n	8002b40 <_Z16StartDefaultTaskPv+0x8>

08002b48 <_Z13StartJoystickPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartJoystick */
void StartJoystick(void *argument)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	ed2d 8b02 	vpush	{d8}
 8002b4e:	b09e      	sub	sp, #120	; 0x78
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartJoystick */
  Joystick j1(&hadc1, &hadc2);
 8002b54:	f107 0310 	add.w	r3, r7, #16
 8002b58:	4a3a      	ldr	r2, [pc, #232]	; (8002c44 <_Z13StartJoystickPv+0xfc>)
 8002b5a:	493b      	ldr	r1, [pc, #236]	; (8002c48 <_Z13StartJoystickPv+0x100>)
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f7fe f8f7 	bl	8000d50 <_ZN8JoystickC1EP17ADC_HandleTypeDefS1_>
  Data data_joystick;

  bool pressed = false;
 8002b62:	2300      	movs	r3, #0
 8002b64:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  osSemaphoreAcquire(DestinationHandle, osWaitForever);
 8002b68:	4b38      	ldr	r3, [pc, #224]	; (8002c4c <_Z13StartJoystickPv+0x104>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f04f 31ff 	mov.w	r1, #4294967295
 8002b70:	4618      	mov	r0, r3
 8002b72:	f00d f9d1 	bl	800ff18 <osSemaphoreAcquire>
  /* Infinite loop */
  for(;;)
  {
    j1.read();
 8002b76:	f107 0310 	add.w	r3, r7, #16
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f7fe f902 	bl	8000d84 <_ZN8Joystick4readEv>
    j1.set_pos();
 8002b80:	f107 0310 	add.w	r3, r7, #16
 8002b84:	4618      	mov	r0, r3
 8002b86:	f7fe f981 	bl	8000e8c <_ZN8Joystick7set_posEv>
    osDelay(10U);
 8002b8a:	200a      	movs	r0, #10
 8002b8c:	f00d f920 	bl	800fdd0 <osDelay>

    x_adc = j1.get_xADC();
 8002b90:	f107 0310 	add.w	r3, r7, #16
 8002b94:	4618      	mov	r0, r3
 8002b96:	f7fe fa29 	bl	8000fec <_ZN8Joystick8get_xADCEv>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	461a      	mov	r2, r3
 8002b9e:	4b2c      	ldr	r3, [pc, #176]	; (8002c50 <_Z13StartJoystickPv+0x108>)
 8002ba0:	801a      	strh	r2, [r3, #0]
    y_adc = j1.get_yADC();
 8002ba2:	f107 0310 	add.w	r3, r7, #16
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f7fe fa2c 	bl	8001004 <_ZN8Joystick8get_yADCEv>
 8002bac:	4603      	mov	r3, r0
 8002bae:	461a      	mov	r2, r3
 8002bb0:	4b28      	ldr	r3, [pc, #160]	; (8002c54 <_Z13StartJoystickPv+0x10c>)
 8002bb2:	801a      	strh	r2, [r3, #0]

    data_joystick = {j1.get_xPos(), j1.get_yPos()};
 8002bb4:	f107 0310 	add.w	r3, r7, #16
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f7fe f9f9 	bl	8000fb0 <_ZN8Joystick8get_xPosEv>
 8002bbe:	eeb0 8a40 	vmov.f32	s16, s0
 8002bc2:	f107 0310 	add.w	r3, r7, #16
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f7fe fa01 	bl	8000fce <_ZN8Joystick8get_yPosEv>
 8002bcc:	eef0 7a40 	vmov.f32	s15, s0
 8002bd0:	ed87 8a02 	vstr	s16, [r7, #8]
 8002bd4:	edc7 7a03 	vstr	s15, [r7, #12]
    osMessageQueuePut(JoystickQueueHandle,&data_joystick,0,200);
 8002bd8:	4b1f      	ldr	r3, [pc, #124]	; (8002c58 <_Z13StartJoystickPv+0x110>)
 8002bda:	6818      	ldr	r0, [r3, #0]
 8002bdc:	f107 0108 	add.w	r1, r7, #8
 8002be0:	23c8      	movs	r3, #200	; 0xc8
 8002be2:	2200      	movs	r2, #0
 8002be4:	f00d faa2 	bl	801012c <osMessageQueuePut>

    if ((HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_8))){
 8002be8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002bec:	481b      	ldr	r0, [pc, #108]	; (8002c5c <_Z13StartJoystickPv+0x114>)
 8002bee:	f004 fffd 	bl	8007bec <HAL_GPIO_ReadPin>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	bf14      	ite	ne
 8002bf8:	2301      	movne	r3, #1
 8002bfa:	2300      	moveq	r3, #0
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d00a      	beq.n	8002c18 <_Z13StartJoystickPv+0xd0>
          if(pressed){
 8002c02:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d003      	beq.n	8002c12 <_Z13StartJoystickPv+0xca>
        	  pressed = false;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002c10:	e002      	b.n	8002c18 <_Z13StartJoystickPv+0xd0>
          } else
        	  pressed = true;
 8002c12:	2301      	movs	r3, #1
 8002c14:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

        }
    if(pressed){
 8002c18:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d00a      	beq.n	8002c36 <_Z13StartJoystickPv+0xee>
       	HAL_GPIO_WritePin (GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8002c20:	2201      	movs	r2, #1
 8002c22:	2101      	movs	r1, #1
 8002c24:	480e      	ldr	r0, [pc, #56]	; (8002c60 <_Z13StartJoystickPv+0x118>)
 8002c26:	f004 fff9 	bl	8007c1c <HAL_GPIO_WritePin>
       	osSemaphoreRelease(DestinationHandle);
 8002c2a:	4b08      	ldr	r3, [pc, #32]	; (8002c4c <_Z13StartJoystickPv+0x104>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f00d f9c4 	bl	800ffbc <osSemaphoreRelease>
 8002c34:	e79f      	b.n	8002b76 <_Z13StartJoystickPv+0x2e>
    } else {
       	HAL_GPIO_WritePin (GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8002c36:	2200      	movs	r2, #0
 8002c38:	2101      	movs	r1, #1
 8002c3a:	4809      	ldr	r0, [pc, #36]	; (8002c60 <_Z13StartJoystickPv+0x118>)
 8002c3c:	f004 ffee 	bl	8007c1c <HAL_GPIO_WritePin>
    j1.read();
 8002c40:	e799      	b.n	8002b76 <_Z13StartJoystickPv+0x2e>
 8002c42:	bf00      	nop
 8002c44:	2400025c 	.word	0x2400025c
 8002c48:	240001f8 	.word	0x240001f8
 8002c4c:	24000b84 	.word	0x24000b84
 8002c50:	24000bbe 	.word	0x24000bbe
 8002c54:	24000bc0 	.word	0x24000bc0
 8002c58:	24000b80 	.word	0x24000b80
 8002c5c:	58020800 	.word	0x58020800
 8002c60:	58020400 	.word	0x58020400

08002c64 <_Z12StartChassisPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartChassis */
void StartChassis(void *argument)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b0bc      	sub	sp, #240	; 0xf0
 8002c68:	af04      	add	r7, sp, #16
 8002c6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartChassis */
  Data reference;

  HAL_TIM_Encoder_Start_IT(&htim8, TIM_CHANNEL_ALL);
 8002c6c:	213c      	movs	r1, #60	; 0x3c
 8002c6e:	4855      	ldr	r0, [pc, #340]	; (8002dc4 <_Z12StartChassisPv+0x160>)
 8002c70:	f009 fe06 	bl	800c880 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 8002c74:	213c      	movs	r1, #60	; 0x3c
 8002c76:	4854      	ldr	r0, [pc, #336]	; (8002dc8 <_Z12StartChassisPv+0x164>)
 8002c78:	f009 fe02 	bl	800c880 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 8002c7c:	2100      	movs	r1, #0
 8002c7e:	4853      	ldr	r0, [pc, #332]	; (8002dcc <_Z12StartChassisPv+0x168>)
 8002c80:	f009 fc4a 	bl	800c518 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 8002c84:	2100      	movs	r1, #0
 8002c86:	4852      	ldr	r0, [pc, #328]	; (8002dd0 <_Z12StartChassisPv+0x16c>)
 8002c88:	f009 fc46 	bl	800c518 <HAL_TIM_PWM_Start>

  LL_Control::Encoder encL(&htim4, 50);
 8002c8c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002c90:	2232      	movs	r2, #50	; 0x32
 8002c92:	494d      	ldr	r1, [pc, #308]	; (8002dc8 <_Z12StartChassisPv+0x164>)
 8002c94:	4618      	mov	r0, r3
 8002c96:	f7fd ff93 	bl	8000bc0 <_ZN10LL_Control7EncoderC1EP17TIM_HandleTypeDefi>
  LL_Control::Motor_PI  motorL(&encL, &htim2, 1050, 1950);
 8002c9a:	f107 01bc 	add.w	r1, r7, #188	; 0xbc
 8002c9e:	f107 0070 	add.w	r0, r7, #112	; 0x70
 8002ca2:	f240 739e 	movw	r3, #1950	; 0x79e
 8002ca6:	9300      	str	r3, [sp, #0]
 8002ca8:	f240 431a 	movw	r3, #1050	; 0x41a
 8002cac:	4a48      	ldr	r2, [pc, #288]	; (8002dd0 <_Z12StartChassisPv+0x16c>)
 8002cae:	f7fe fdf7 	bl	80018a0 <_ZN10LL_Control8Motor_PIC1EPNS_7EncoderEP17TIM_HandleTypeDefii>
  motorL.set_Ks(10.0f,5);
 8002cb2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002cb6:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 8002cba:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f7fe fea8 	bl	8001a14 <_ZN10LL_Control8Motor_PI6set_KsEff>
  motorL.stop();
 8002cc4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f7fe ffe9 	bl	8001ca0 <_ZN10LL_Control8Motor_PI4stopEv>

  LL_Control::Encoder encR(&htim8, 50);
 8002cce:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002cd2:	2232      	movs	r2, #50	; 0x32
 8002cd4:	493b      	ldr	r1, [pc, #236]	; (8002dc4 <_Z12StartChassisPv+0x160>)
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f7fd ff72 	bl	8000bc0 <_ZN10LL_Control7EncoderC1EP17TIM_HandleTypeDefi>
  LL_Control::Motor_PI  motorR(&encR, &htim3, 1050, 1950);
 8002cdc:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8002ce0:	f107 0008 	add.w	r0, r7, #8
 8002ce4:	f240 739e 	movw	r3, #1950	; 0x79e
 8002ce8:	9300      	str	r3, [sp, #0]
 8002cea:	f240 431a 	movw	r3, #1050	; 0x41a
 8002cee:	4a37      	ldr	r2, [pc, #220]	; (8002dcc <_Z12StartChassisPv+0x168>)
 8002cf0:	f7fe fdd6 	bl	80018a0 <_ZN10LL_Control8Motor_PIC1EPNS_7EncoderEP17TIM_HandleTypeDefii>
  motorR.set_Ks(10.0f,5);
 8002cf4:	f107 0308 	add.w	r3, r7, #8
 8002cf8:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 8002cfc:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8002d00:	4618      	mov	r0, r3
 8002d02:	f7fe fe87 	bl	8001a14 <_ZN10LL_Control8Motor_PI6set_KsEff>
  motorR.stop();
 8002d06:	f107 0308 	add.w	r3, r7, #8
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f7fe ffc8 	bl	8001ca0 <_ZN10LL_Control8Motor_PI4stopEv>

  /* Infinite loop */
  for(;;)
  {
  osMessageQueueGet(JoystickQueueHandle, &reference, NULL, osWaitForever);
 8002d10:	4b30      	ldr	r3, [pc, #192]	; (8002dd4 <_Z12StartChassisPv+0x170>)
 8002d12:	6818      	ldr	r0, [r3, #0]
 8002d14:	f107 01d8 	add.w	r1, r7, #216	; 0xd8
 8002d18:	f04f 33ff 	mov.w	r3, #4294967295
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	f00d fa65 	bl	80101ec <osMessageQueueGet>

  //motorL.set_reference(1);
  motorL.set_reference((reference.x_data*2)+(reference.y_data*2));
 8002d22:	edd7 7a36 	vldr	s15, [r7, #216]	; 0xd8
 8002d26:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002d2a:	edd7 7a37 	vldr	s15, [r7, #220]	; 0xdc
 8002d2e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002d32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d36:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002d3a:	eeb0 0a67 	vmov.f32	s0, s15
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f7fe fe34 	bl	80019ac <_ZN10LL_Control8Motor_PI13set_referenceEf>
    encL.update();
 8002d44:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f7fd ffbb 	bl	8000cc4 <_ZN10LL_Control7Encoder6updateEv>
    motorL.go_to_ref();
 8002d4e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002d52:	4618      	mov	r0, r3
 8002d54:	f7fe ff27 	bl	8001ba6 <_ZN10LL_Control8Motor_PI9go_to_refEv>

    //motorR.set_reference(-1);
    motorR.set_reference(-(reference.x_data*2)+(reference.y_data*2));
 8002d58:	edd7 7a37 	vldr	s15, [r7, #220]	; 0xdc
 8002d5c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002d60:	edd7 7a36 	vldr	s15, [r7, #216]	; 0xd8
 8002d64:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002d68:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d6c:	f107 0308 	add.w	r3, r7, #8
 8002d70:	eeb0 0a67 	vmov.f32	s0, s15
 8002d74:	4618      	mov	r0, r3
 8002d76:	f7fe fe19 	bl	80019ac <_ZN10LL_Control8Motor_PI13set_referenceEf>
    encR.update();
 8002d7a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f7fd ffa0 	bl	8000cc4 <_ZN10LL_Control7Encoder6updateEv>
    motorR.go_to_ref();
 8002d84:	f107 0308 	add.w	r3, r7, #8
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f7fe ff0c 	bl	8001ba6 <_ZN10LL_Control8Motor_PI9go_to_refEv>

    //pwm_vel1=motorL.get_vel();
    //pwm_vel2=motorR.get_vel();

    snprintf(msg, 50, "CH_1: %.2f, CH_2: %.2f \r\n", reference.x_data, reference.y_data);
 8002d8e:	edd7 7a36 	vldr	s15, [r7, #216]	; 0xd8
 8002d92:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002d96:	edd7 6a37 	vldr	s13, [r7, #220]	; 0xdc
 8002d9a:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8002d9e:	ed8d 6b02 	vstr	d6, [sp, #8]
 8002da2:	ed8d 7b00 	vstr	d7, [sp]
 8002da6:	4a0c      	ldr	r2, [pc, #48]	; (8002dd8 <_Z12StartChassisPv+0x174>)
 8002da8:	2132      	movs	r1, #50	; 0x32
 8002daa:	480c      	ldr	r0, [pc, #48]	; (8002ddc <_Z12StartChassisPv+0x178>)
 8002dac:	f011 fae0 	bl	8014370 <sniprintf>
    HAL_UART_Transmit(&huart3,(uint8_t*) msg,sizeof(msg),10);
 8002db0:	230a      	movs	r3, #10
 8002db2:	2232      	movs	r2, #50	; 0x32
 8002db4:	4909      	ldr	r1, [pc, #36]	; (8002ddc <_Z12StartChassisPv+0x178>)
 8002db6:	480a      	ldr	r0, [pc, #40]	; (8002de0 <_Z12StartChassisPv+0x17c>)
 8002db8:	f00a fe94 	bl	800dae4 <HAL_UART_Transmit>
    osDelay(20U);
 8002dbc:	2014      	movs	r0, #20
 8002dbe:	f00d f807 	bl	800fdd0 <osDelay>
  osMessageQueueGet(JoystickQueueHandle, &reference, NULL, osWaitForever);
 8002dc2:	e7a5      	b.n	8002d10 <_Z12StartChassisPv+0xac>
 8002dc4:	24000490 	.word	0x24000490
 8002dc8:	240003f8 	.word	0x240003f8
 8002dcc:	240003ac 	.word	0x240003ac
 8002dd0:	24000360 	.word	0x24000360
 8002dd4:	24000b80 	.word	0x24000b80
 8002dd8:	08017b50 	.word	0x08017b50
 8002ddc:	24000b8c 	.word	0x24000b8c
 8002de0:	240004dc 	.word	0x240004dc

08002de4 <_Z20StartUserInteractionPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUserInteraction */
void StartUserInteraction(void *argument)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b090      	sub	sp, #64	; 0x40
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartUserValidation */
    char key;
    char key1;
    int count = 0;
 8002dec:	2300      	movs	r3, #0
 8002dee:	63fb      	str	r3, [r7, #60]	; 0x3c
    char password[4];

    Keypad k1(&hi2c1);
 8002df0:	f107 0308 	add.w	r3, r7, #8
 8002df4:	4956      	ldr	r1, [pc, #344]	; (8002f50 <_Z20StartUserInteractionPv+0x16c>)
 8002df6:	4618      	mov	r0, r3
 8002df8:	f7fe f910 	bl	800101c <_ZN6KeypadC1EP19__I2C_HandleTypeDef>
    k1.lcd_init();
 8002dfc:	f107 0308 	add.w	r3, r7, #8
 8002e00:	4618      	mov	r0, r3
 8002e02:	f7fe f9dd 	bl	80011c0 <_ZN6Keypad8lcd_initEv>

    osSemaphoreAcquire(PassHandle, osWaitForever);
 8002e06:	4b53      	ldr	r3, [pc, #332]	; (8002f54 <_Z20StartUserInteractionPv+0x170>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f04f 31ff 	mov.w	r1, #4294967295
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f00d f882 	bl	800ff18 <osSemaphoreAcquire>
    /* Infinite loop */
    for(;;)
    {
      osSemaphoreAcquire(DestinationHandle, osWaitForever);
 8002e14:	4b50      	ldr	r3, [pc, #320]	; (8002f58 <_Z20StartUserInteractionPv+0x174>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f04f 31ff 	mov.w	r1, #4294967295
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f00d f87b 	bl	800ff18 <osSemaphoreAcquire>

      key  = k1.keypad_read();
 8002e22:	f107 0308 	add.w	r3, r7, #8
 8002e26:	4618      	mov	r0, r3
 8002e28:	f7fe fa14 	bl	8001254 <_ZN6Keypad11keypad_readEv>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
      osDelay(250);
 8002e32:	20fa      	movs	r0, #250	; 0xfa
 8002e34:	f00c ffcc 	bl	800fdd0 <osDelay>
      key1 = k1.keypad_read();
 8002e38:	f107 0308 	add.w	r3, r7, #8
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f7fe fa09 	bl	8001254 <_ZN6Keypad11keypad_readEv>
 8002e42:	4603      	mov	r3, r0
 8002e44:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

      if((key != key1) && (k1.is_valid(key1) == true)){
 8002e48:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8002e4c:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d00c      	beq.n	8002e6e <_Z20StartUserInteractionPv+0x8a>
 8002e54:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 8002e58:	f107 0308 	add.w	r3, r7, #8
 8002e5c:	4611      	mov	r1, r2
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f7fe fcb6 	bl	80017d0 <_ZN6Keypad8is_validEc>
 8002e64:	4603      	mov	r3, r0
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	d101      	bne.n	8002e6e <_Z20StartUserInteractionPv+0x8a>
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e000      	b.n	8002e70 <_Z20StartUserInteractionPv+0x8c>
 8002e6e:	2300      	movs	r3, #0
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d018      	beq.n	8002ea6 <_Z20StartUserInteractionPv+0xc2>
        k1.lcd_put_cur(1, count);
 8002e74:	f107 0308 	add.w	r3, r7, #8
 8002e78:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002e7a:	2101      	movs	r1, #1
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f7fe f964 	bl	800114a <_ZN6Keypad11lcd_put_curEii>
        k1.lcd_send_data(key1);
 8002e82:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 8002e86:	f107 0308 	add.w	r3, r7, #8
 8002e8a:	4611      	mov	r1, r2
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f7fe f916 	bl	80010be <_ZN6Keypad13lcd_send_dataEc>
        password[count] = key1;
 8002e92:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002e96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e98:	4413      	add	r3, r2
 8002e9a:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 8002e9e:	701a      	strb	r2, [r3, #0]
        count++;
 8002ea0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ea2:	3301      	adds	r3, #1
 8002ea4:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if((key == '*' || key1 == '*') && (count == 4) ){
 8002ea6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8002eaa:	2b2a      	cmp	r3, #42	; 0x2a
 8002eac:	d003      	beq.n	8002eb6 <_Z20StartUserInteractionPv+0xd2>
 8002eae:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8002eb2:	2b2a      	cmp	r3, #42	; 0x2a
 8002eb4:	d13e      	bne.n	8002f34 <_Z20StartUserInteractionPv+0x150>
 8002eb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002eb8:	2b04      	cmp	r3, #4
 8002eba:	d13b      	bne.n	8002f34 <_Z20StartUserInteractionPv+0x150>
        if(k1.check_password(password)){
 8002ebc:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002ec0:	f107 0308 	add.w	r3, r7, #8
 8002ec4:	4611      	mov	r1, r2
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f7fe fcc0 	bl	800184c <_ZN6Keypad14check_passwordEPc>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d018      	beq.n	8002f04 <_Z20StartUserInteractionPv+0x120>
          k1.lcd_put_cur(1, 0);
 8002ed2:	f107 0308 	add.w	r3, r7, #8
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	2101      	movs	r1, #1
 8002eda:	4618      	mov	r0, r3
 8002edc:	f7fe f935 	bl	800114a <_ZN6Keypad11lcd_put_curEii>
          k1.lcd_send_string ("Correct  ");
 8002ee0:	f107 0308 	add.w	r3, r7, #8
 8002ee4:	491d      	ldr	r1, [pc, #116]	; (8002f5c <_Z20StartUserInteractionPv+0x178>)
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f7fe f918 	bl	800111c <_ZN6Keypad15lcd_send_stringEPc>
          count = 0;
 8002eec:	2300      	movs	r3, #0
 8002eee:	63fb      	str	r3, [r7, #60]	; 0x3c
          osSemaphoreRelease(PassHandle);
 8002ef0:	4b18      	ldr	r3, [pc, #96]	; (8002f54 <_Z20StartUserInteractionPv+0x170>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f00d f861 	bl	800ffbc <osSemaphoreRelease>
          osDelay(3000);
 8002efa:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002efe:	f00c ff67 	bl	800fdd0 <osDelay>
 8002f02:	e012      	b.n	8002f2a <_Z20StartUserInteractionPv+0x146>
        } else {
          k1.lcd_put_cur(1, 0);
 8002f04:	f107 0308 	add.w	r3, r7, #8
 8002f08:	2200      	movs	r2, #0
 8002f0a:	2101      	movs	r1, #1
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f7fe f91c 	bl	800114a <_ZN6Keypad11lcd_put_curEii>
          k1.lcd_send_string ("Incorrect ");
 8002f12:	f107 0308 	add.w	r3, r7, #8
 8002f16:	4912      	ldr	r1, [pc, #72]	; (8002f60 <_Z20StartUserInteractionPv+0x17c>)
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f7fe f8ff 	bl	800111c <_ZN6Keypad15lcd_send_stringEPc>
          count = 0;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	63fb      	str	r3, [r7, #60]	; 0x3c
          osDelay(3000);
 8002f22:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002f26:	f00c ff53 	bl	800fdd0 <osDelay>
        };
        k1.lcd_clear();
 8002f2a:	f107 0308 	add.w	r3, r7, #8
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f7fe f92c 	bl	800118c <_ZN6Keypad9lcd_clearEv>
      }

      k1.lcd_put_cur(0, 0);
 8002f34:	f107 0308 	add.w	r3, r7, #8
 8002f38:	2200      	movs	r2, #0
 8002f3a:	2100      	movs	r1, #0
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f7fe f904 	bl	800114a <_ZN6Keypad11lcd_put_curEii>
      k1.lcd_send_string ("Insert pass:    ");
 8002f42:	f107 0308 	add.w	r3, r7, #8
 8002f46:	4907      	ldr	r1, [pc, #28]	; (8002f64 <_Z20StartUserInteractionPv+0x180>)
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f7fe f8e7 	bl	800111c <_ZN6Keypad15lcd_send_stringEPc>
      osSemaphoreAcquire(DestinationHandle, osWaitForever);
 8002f4e:	e761      	b.n	8002e14 <_Z20StartUserInteractionPv+0x30>
 8002f50:	240002c0 	.word	0x240002c0
 8002f54:	24000b88 	.word	0x24000b88
 8002f58:	24000b84 	.word	0x24000b84
 8002f5c:	08017b6c 	.word	0x08017b6c
 8002f60:	08017b78 	.word	0x08017b78
 8002f64:	08017b84 	.word	0x08017b84

08002f68 <_Z9StartDoorPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDoor */
void StartDoor(void *argument)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b082      	sub	sp, #8
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDoor */
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_4);
 8002f70:	210c      	movs	r1, #12
 8002f72:	480f      	ldr	r0, [pc, #60]	; (8002fb0 <_Z9StartDoorPv+0x48>)
 8002f74:	f009 fad0 	bl	800c518 <HAL_TIM_PWM_Start>
  /* Infinite loop */
  for(;;)
  {
    osSemaphoreAcquire(PassHandle, osWaitForever);
 8002f78:	4b0e      	ldr	r3, [pc, #56]	; (8002fb4 <_Z9StartDoorPv+0x4c>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f04f 31ff 	mov.w	r1, #4294967295
 8002f80:	4618      	mov	r0, r3
 8002f82:	f00c ffc9 	bl	800ff18 <osSemaphoreAcquire>

    osDelay(1);
 8002f86:	2001      	movs	r0, #1
 8002f88:	f00c ff22 	bl	800fdd0 <osDelay>
    TIM5->CCR4 = 1500;
 8002f8c:	4b0a      	ldr	r3, [pc, #40]	; (8002fb8 <_Z9StartDoorPv+0x50>)
 8002f8e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8002f92:	641a      	str	r2, [r3, #64]	; 0x40
    HAL_Delay(5000);
 8002f94:	f241 3088 	movw	r0, #5000	; 0x1388
 8002f98:	f000 fe08 	bl	8003bac <HAL_Delay>
    TIM5->CCR4 = 750;
 8002f9c:	4b06      	ldr	r3, [pc, #24]	; (8002fb8 <_Z9StartDoorPv+0x50>)
 8002f9e:	f240 22ee 	movw	r2, #750	; 0x2ee
 8002fa2:	641a      	str	r2, [r3, #64]	; 0x40
    HAL_Delay(5000);
 8002fa4:	f241 3088 	movw	r0, #5000	; 0x1388
 8002fa8:	f000 fe00 	bl	8003bac <HAL_Delay>
    osSemaphoreAcquire(PassHandle, osWaitForever);
 8002fac:	e7e4      	b.n	8002f78 <_Z9StartDoorPv+0x10>
 8002fae:	bf00      	nop
 8002fb0:	24000444 	.word	0x24000444
 8002fb4:	24000b88 	.word	0x24000b88
 8002fb8:	40000c00 	.word	0x40000c00

08002fbc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b082      	sub	sp, #8
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a04      	ldr	r2, [pc, #16]	; (8002fdc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d101      	bne.n	8002fd2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002fce:	f000 fdcd 	bl	8003b6c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002fd2:	bf00      	nop
 8002fd4:	3708      	adds	r7, #8
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	bf00      	nop
 8002fdc:	40014800 	.word	0x40014800

08002fe0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002fe4:	b672      	cpsid	i
}
 8002fe6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002fe8:	e7fe      	b.n	8002fe8 <Error_Handler+0x8>
	...

08002fec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b082      	sub	sp, #8
 8002ff0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ff2:	4b0c      	ldr	r3, [pc, #48]	; (8003024 <HAL_MspInit+0x38>)
 8002ff4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002ff8:	4a0a      	ldr	r2, [pc, #40]	; (8003024 <HAL_MspInit+0x38>)
 8002ffa:	f043 0302 	orr.w	r3, r3, #2
 8002ffe:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003002:	4b08      	ldr	r3, [pc, #32]	; (8003024 <HAL_MspInit+0x38>)
 8003004:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003008:	f003 0302 	and.w	r3, r3, #2
 800300c:	607b      	str	r3, [r7, #4]
 800300e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003010:	2200      	movs	r2, #0
 8003012:	210f      	movs	r1, #15
 8003014:	f06f 0001 	mvn.w	r0, #1
 8003018:	f002 f9ea 	bl	80053f0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800301c:	bf00      	nop
 800301e:	3708      	adds	r7, #8
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}
 8003024:	58024400 	.word	0x58024400

08003028 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b08c      	sub	sp, #48	; 0x30
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003030:	f107 031c 	add.w	r3, r7, #28
 8003034:	2200      	movs	r2, #0
 8003036:	601a      	str	r2, [r3, #0]
 8003038:	605a      	str	r2, [r3, #4]
 800303a:	609a      	str	r2, [r3, #8]
 800303c:	60da      	str	r2, [r3, #12]
 800303e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a39      	ldr	r2, [pc, #228]	; (800312c <HAL_ADC_MspInit+0x104>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d133      	bne.n	80030b2 <HAL_ADC_MspInit+0x8a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800304a:	4b39      	ldr	r3, [pc, #228]	; (8003130 <HAL_ADC_MspInit+0x108>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	3301      	adds	r3, #1
 8003050:	4a37      	ldr	r2, [pc, #220]	; (8003130 <HAL_ADC_MspInit+0x108>)
 8003052:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8003054:	4b36      	ldr	r3, [pc, #216]	; (8003130 <HAL_ADC_MspInit+0x108>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	2b01      	cmp	r3, #1
 800305a:	d10e      	bne.n	800307a <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800305c:	4b35      	ldr	r3, [pc, #212]	; (8003134 <HAL_ADC_MspInit+0x10c>)
 800305e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003062:	4a34      	ldr	r2, [pc, #208]	; (8003134 <HAL_ADC_MspInit+0x10c>)
 8003064:	f043 0320 	orr.w	r3, r3, #32
 8003068:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800306c:	4b31      	ldr	r3, [pc, #196]	; (8003134 <HAL_ADC_MspInit+0x10c>)
 800306e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003072:	f003 0320 	and.w	r3, r3, #32
 8003076:	61bb      	str	r3, [r7, #24]
 8003078:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800307a:	4b2e      	ldr	r3, [pc, #184]	; (8003134 <HAL_ADC_MspInit+0x10c>)
 800307c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003080:	4a2c      	ldr	r2, [pc, #176]	; (8003134 <HAL_ADC_MspInit+0x10c>)
 8003082:	f043 0301 	orr.w	r3, r3, #1
 8003086:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800308a:	4b2a      	ldr	r3, [pc, #168]	; (8003134 <HAL_ADC_MspInit+0x10c>)
 800308c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003090:	f003 0301 	and.w	r3, r3, #1
 8003094:	617b      	str	r3, [r7, #20]
 8003096:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_INP18
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003098:	2310      	movs	r3, #16
 800309a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800309c:	2303      	movs	r3, #3
 800309e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030a0:	2300      	movs	r3, #0
 80030a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030a4:	f107 031c 	add.w	r3, r7, #28
 80030a8:	4619      	mov	r1, r3
 80030aa:	4823      	ldr	r0, [pc, #140]	; (8003138 <HAL_ADC_MspInit+0x110>)
 80030ac:	f004 fbee 	bl	800788c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80030b0:	e037      	b.n	8003122 <HAL_ADC_MspInit+0xfa>
  else if(hadc->Instance==ADC2)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a21      	ldr	r2, [pc, #132]	; (800313c <HAL_ADC_MspInit+0x114>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d132      	bne.n	8003122 <HAL_ADC_MspInit+0xfa>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80030bc:	4b1c      	ldr	r3, [pc, #112]	; (8003130 <HAL_ADC_MspInit+0x108>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	3301      	adds	r3, #1
 80030c2:	4a1b      	ldr	r2, [pc, #108]	; (8003130 <HAL_ADC_MspInit+0x108>)
 80030c4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80030c6:	4b1a      	ldr	r3, [pc, #104]	; (8003130 <HAL_ADC_MspInit+0x108>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	2b01      	cmp	r3, #1
 80030cc:	d10e      	bne.n	80030ec <HAL_ADC_MspInit+0xc4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80030ce:	4b19      	ldr	r3, [pc, #100]	; (8003134 <HAL_ADC_MspInit+0x10c>)
 80030d0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80030d4:	4a17      	ldr	r2, [pc, #92]	; (8003134 <HAL_ADC_MspInit+0x10c>)
 80030d6:	f043 0320 	orr.w	r3, r3, #32
 80030da:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80030de:	4b15      	ldr	r3, [pc, #84]	; (8003134 <HAL_ADC_MspInit+0x10c>)
 80030e0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80030e4:	f003 0320 	and.w	r3, r3, #32
 80030e8:	613b      	str	r3, [r7, #16]
 80030ea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030ec:	4b11      	ldr	r3, [pc, #68]	; (8003134 <HAL_ADC_MspInit+0x10c>)
 80030ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030f2:	4a10      	ldr	r2, [pc, #64]	; (8003134 <HAL_ADC_MspInit+0x10c>)
 80030f4:	f043 0301 	orr.w	r3, r3, #1
 80030f8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80030fc:	4b0d      	ldr	r3, [pc, #52]	; (8003134 <HAL_ADC_MspInit+0x10c>)
 80030fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003102:	f003 0301 	and.w	r3, r3, #1
 8003106:	60fb      	str	r3, [r7, #12]
 8003108:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800310a:	2320      	movs	r3, #32
 800310c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800310e:	2303      	movs	r3, #3
 8003110:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003112:	2300      	movs	r3, #0
 8003114:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003116:	f107 031c 	add.w	r3, r7, #28
 800311a:	4619      	mov	r1, r3
 800311c:	4806      	ldr	r0, [pc, #24]	; (8003138 <HAL_ADC_MspInit+0x110>)
 800311e:	f004 fbb5 	bl	800788c <HAL_GPIO_Init>
}
 8003122:	bf00      	nop
 8003124:	3730      	adds	r7, #48	; 0x30
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
 800312a:	bf00      	nop
 800312c:	40022000 	.word	0x40022000
 8003130:	24000bc4 	.word	0x24000bc4
 8003134:	58024400 	.word	0x58024400
 8003138:	58020000 	.word	0x58020000
 800313c:	40022100 	.word	0x40022100

08003140 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b0ba      	sub	sp, #232	; 0xe8
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003148:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800314c:	2200      	movs	r2, #0
 800314e:	601a      	str	r2, [r3, #0]
 8003150:	605a      	str	r2, [r3, #4]
 8003152:	609a      	str	r2, [r3, #8]
 8003154:	60da      	str	r2, [r3, #12]
 8003156:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003158:	f107 0310 	add.w	r3, r7, #16
 800315c:	22c0      	movs	r2, #192	; 0xc0
 800315e:	2100      	movs	r1, #0
 8003160:	4618      	mov	r0, r3
 8003162:	f011 f99c 	bl	801449e <memset>
  if(hi2c->Instance==I2C1)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a27      	ldr	r2, [pc, #156]	; (8003208 <HAL_I2C_MspInit+0xc8>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d146      	bne.n	80031fe <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003170:	f04f 0208 	mov.w	r2, #8
 8003174:	f04f 0300 	mov.w	r3, #0
 8003178:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 800317c:	2300      	movs	r3, #0
 800317e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003182:	f107 0310 	add.w	r3, r7, #16
 8003186:	4618      	mov	r0, r3
 8003188:	f006 fb96 	bl	80098b8 <HAL_RCCEx_PeriphCLKConfig>
 800318c:	4603      	mov	r3, r0
 800318e:	2b00      	cmp	r3, #0
 8003190:	d001      	beq.n	8003196 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8003192:	f7ff ff25 	bl	8002fe0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003196:	4b1d      	ldr	r3, [pc, #116]	; (800320c <HAL_I2C_MspInit+0xcc>)
 8003198:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800319c:	4a1b      	ldr	r2, [pc, #108]	; (800320c <HAL_I2C_MspInit+0xcc>)
 800319e:	f043 0302 	orr.w	r3, r3, #2
 80031a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80031a6:	4b19      	ldr	r3, [pc, #100]	; (800320c <HAL_I2C_MspInit+0xcc>)
 80031a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031ac:	f003 0302 	and.w	r3, r3, #2
 80031b0:	60fb      	str	r3, [r7, #12]
 80031b2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80031b4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80031b8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80031bc:	2312      	movs	r3, #18
 80031be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031c2:	2300      	movs	r3, #0
 80031c4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031c8:	2300      	movs	r3, #0
 80031ca:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80031ce:	2304      	movs	r3, #4
 80031d0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031d4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80031d8:	4619      	mov	r1, r3
 80031da:	480d      	ldr	r0, [pc, #52]	; (8003210 <HAL_I2C_MspInit+0xd0>)
 80031dc:	f004 fb56 	bl	800788c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80031e0:	4b0a      	ldr	r3, [pc, #40]	; (800320c <HAL_I2C_MspInit+0xcc>)
 80031e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80031e6:	4a09      	ldr	r2, [pc, #36]	; (800320c <HAL_I2C_MspInit+0xcc>)
 80031e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80031ec:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80031f0:	4b06      	ldr	r3, [pc, #24]	; (800320c <HAL_I2C_MspInit+0xcc>)
 80031f2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80031f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031fa:	60bb      	str	r3, [r7, #8]
 80031fc:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80031fe:	bf00      	nop
 8003200:	37e8      	adds	r7, #232	; 0xe8
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop
 8003208:	40005400 	.word	0x40005400
 800320c:	58024400 	.word	0x58024400
 8003210:	58020400 	.word	0x58020400

08003214 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b086      	sub	sp, #24
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a2e      	ldr	r2, [pc, #184]	; (80032dc <HAL_TIM_Base_MspInit+0xc8>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d117      	bne.n	8003256 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003226:	4b2e      	ldr	r3, [pc, #184]	; (80032e0 <HAL_TIM_Base_MspInit+0xcc>)
 8003228:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800322c:	4a2c      	ldr	r2, [pc, #176]	; (80032e0 <HAL_TIM_Base_MspInit+0xcc>)
 800322e:	f043 0301 	orr.w	r3, r3, #1
 8003232:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003236:	4b2a      	ldr	r3, [pc, #168]	; (80032e0 <HAL_TIM_Base_MspInit+0xcc>)
 8003238:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800323c:	f003 0301 	and.w	r3, r3, #1
 8003240:	617b      	str	r3, [r7, #20]
 8003242:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 8003244:	2200      	movs	r2, #0
 8003246:	2105      	movs	r1, #5
 8003248:	2019      	movs	r0, #25
 800324a:	f002 f8d1 	bl	80053f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800324e:	2019      	movs	r0, #25
 8003250:	f002 f8e8 	bl	8005424 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8003254:	e03d      	b.n	80032d2 <HAL_TIM_Base_MspInit+0xbe>
  else if(htim_base->Instance==TIM2)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800325e:	d10f      	bne.n	8003280 <HAL_TIM_Base_MspInit+0x6c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003260:	4b1f      	ldr	r3, [pc, #124]	; (80032e0 <HAL_TIM_Base_MspInit+0xcc>)
 8003262:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003266:	4a1e      	ldr	r2, [pc, #120]	; (80032e0 <HAL_TIM_Base_MspInit+0xcc>)
 8003268:	f043 0301 	orr.w	r3, r3, #1
 800326c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003270:	4b1b      	ldr	r3, [pc, #108]	; (80032e0 <HAL_TIM_Base_MspInit+0xcc>)
 8003272:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003276:	f003 0301 	and.w	r3, r3, #1
 800327a:	613b      	str	r3, [r7, #16]
 800327c:	693b      	ldr	r3, [r7, #16]
}
 800327e:	e028      	b.n	80032d2 <HAL_TIM_Base_MspInit+0xbe>
  else if(htim_base->Instance==TIM3)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a17      	ldr	r2, [pc, #92]	; (80032e4 <HAL_TIM_Base_MspInit+0xd0>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d10f      	bne.n	80032aa <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800328a:	4b15      	ldr	r3, [pc, #84]	; (80032e0 <HAL_TIM_Base_MspInit+0xcc>)
 800328c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003290:	4a13      	ldr	r2, [pc, #76]	; (80032e0 <HAL_TIM_Base_MspInit+0xcc>)
 8003292:	f043 0302 	orr.w	r3, r3, #2
 8003296:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800329a:	4b11      	ldr	r3, [pc, #68]	; (80032e0 <HAL_TIM_Base_MspInit+0xcc>)
 800329c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80032a0:	f003 0302 	and.w	r3, r3, #2
 80032a4:	60fb      	str	r3, [r7, #12]
 80032a6:	68fb      	ldr	r3, [r7, #12]
}
 80032a8:	e013      	b.n	80032d2 <HAL_TIM_Base_MspInit+0xbe>
  else if(htim_base->Instance==TIM5)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a0e      	ldr	r2, [pc, #56]	; (80032e8 <HAL_TIM_Base_MspInit+0xd4>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d10e      	bne.n	80032d2 <HAL_TIM_Base_MspInit+0xbe>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80032b4:	4b0a      	ldr	r3, [pc, #40]	; (80032e0 <HAL_TIM_Base_MspInit+0xcc>)
 80032b6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80032ba:	4a09      	ldr	r2, [pc, #36]	; (80032e0 <HAL_TIM_Base_MspInit+0xcc>)
 80032bc:	f043 0308 	orr.w	r3, r3, #8
 80032c0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80032c4:	4b06      	ldr	r3, [pc, #24]	; (80032e0 <HAL_TIM_Base_MspInit+0xcc>)
 80032c6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80032ca:	f003 0308 	and.w	r3, r3, #8
 80032ce:	60bb      	str	r3, [r7, #8]
 80032d0:	68bb      	ldr	r3, [r7, #8]
}
 80032d2:	bf00      	nop
 80032d4:	3718      	adds	r7, #24
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	bf00      	nop
 80032dc:	40010000 	.word	0x40010000
 80032e0:	58024400 	.word	0x58024400
 80032e4:	40000400 	.word	0x40000400
 80032e8:	40000c00 	.word	0x40000c00

080032ec <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b08c      	sub	sp, #48	; 0x30
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032f4:	f107 031c 	add.w	r3, r7, #28
 80032f8:	2200      	movs	r2, #0
 80032fa:	601a      	str	r2, [r3, #0]
 80032fc:	605a      	str	r2, [r3, #4]
 80032fe:	609a      	str	r2, [r3, #8]
 8003300:	60da      	str	r2, [r3, #12]
 8003302:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a34      	ldr	r2, [pc, #208]	; (80033dc <HAL_TIM_Encoder_MspInit+0xf0>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d12f      	bne.n	800336e <HAL_TIM_Encoder_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800330e:	4b34      	ldr	r3, [pc, #208]	; (80033e0 <HAL_TIM_Encoder_MspInit+0xf4>)
 8003310:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003314:	4a32      	ldr	r2, [pc, #200]	; (80033e0 <HAL_TIM_Encoder_MspInit+0xf4>)
 8003316:	f043 0304 	orr.w	r3, r3, #4
 800331a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800331e:	4b30      	ldr	r3, [pc, #192]	; (80033e0 <HAL_TIM_Encoder_MspInit+0xf4>)
 8003320:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003324:	f003 0304 	and.w	r3, r3, #4
 8003328:	61bb      	str	r3, [r7, #24]
 800332a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800332c:	4b2c      	ldr	r3, [pc, #176]	; (80033e0 <HAL_TIM_Encoder_MspInit+0xf4>)
 800332e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003332:	4a2b      	ldr	r2, [pc, #172]	; (80033e0 <HAL_TIM_Encoder_MspInit+0xf4>)
 8003334:	f043 0308 	orr.w	r3, r3, #8
 8003338:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800333c:	4b28      	ldr	r3, [pc, #160]	; (80033e0 <HAL_TIM_Encoder_MspInit+0xf4>)
 800333e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003342:	f003 0308 	and.w	r3, r3, #8
 8003346:	617b      	str	r3, [r7, #20]
 8003348:	697b      	ldr	r3, [r7, #20]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = EL_1_Pin|EL_2_Pin;
 800334a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800334e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003350:	2302      	movs	r3, #2
 8003352:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003354:	2301      	movs	r3, #1
 8003356:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003358:	2302      	movs	r3, #2
 800335a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800335c:	2302      	movs	r3, #2
 800335e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003360:	f107 031c 	add.w	r3, r7, #28
 8003364:	4619      	mov	r1, r3
 8003366:	481f      	ldr	r0, [pc, #124]	; (80033e4 <HAL_TIM_Encoder_MspInit+0xf8>)
 8003368:	f004 fa90 	bl	800788c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800336c:	e032      	b.n	80033d4 <HAL_TIM_Encoder_MspInit+0xe8>
  else if(htim_encoder->Instance==TIM8)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a1d      	ldr	r2, [pc, #116]	; (80033e8 <HAL_TIM_Encoder_MspInit+0xfc>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d12d      	bne.n	80033d4 <HAL_TIM_Encoder_MspInit+0xe8>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003378:	4b19      	ldr	r3, [pc, #100]	; (80033e0 <HAL_TIM_Encoder_MspInit+0xf4>)
 800337a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800337e:	4a18      	ldr	r2, [pc, #96]	; (80033e0 <HAL_TIM_Encoder_MspInit+0xf4>)
 8003380:	f043 0302 	orr.w	r3, r3, #2
 8003384:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003388:	4b15      	ldr	r3, [pc, #84]	; (80033e0 <HAL_TIM_Encoder_MspInit+0xf4>)
 800338a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800338e:	f003 0302 	and.w	r3, r3, #2
 8003392:	613b      	str	r3, [r7, #16]
 8003394:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003396:	4b12      	ldr	r3, [pc, #72]	; (80033e0 <HAL_TIM_Encoder_MspInit+0xf4>)
 8003398:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800339c:	4a10      	ldr	r2, [pc, #64]	; (80033e0 <HAL_TIM_Encoder_MspInit+0xf4>)
 800339e:	f043 0304 	orr.w	r3, r3, #4
 80033a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80033a6:	4b0e      	ldr	r3, [pc, #56]	; (80033e0 <HAL_TIM_Encoder_MspInit+0xf4>)
 80033a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033ac:	f003 0304 	and.w	r3, r3, #4
 80033b0:	60fb      	str	r3, [r7, #12]
 80033b2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ER_2_Pin|ER_1_Pin;
 80033b4:	23c0      	movs	r3, #192	; 0xc0
 80033b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033b8:	2302      	movs	r3, #2
 80033ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80033bc:	2301      	movs	r3, #1
 80033be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80033c0:	2302      	movs	r3, #2
 80033c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80033c4:	2303      	movs	r3, #3
 80033c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033c8:	f107 031c 	add.w	r3, r7, #28
 80033cc:	4619      	mov	r1, r3
 80033ce:	4807      	ldr	r0, [pc, #28]	; (80033ec <HAL_TIM_Encoder_MspInit+0x100>)
 80033d0:	f004 fa5c 	bl	800788c <HAL_GPIO_Init>
}
 80033d4:	bf00      	nop
 80033d6:	3730      	adds	r7, #48	; 0x30
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}
 80033dc:	40000800 	.word	0x40000800
 80033e0:	58024400 	.word	0x58024400
 80033e4:	58020c00 	.word	0x58020c00
 80033e8:	40010400 	.word	0x40010400
 80033ec:	58020800 	.word	0x58020800

080033f0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b08a      	sub	sp, #40	; 0x28
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033f8:	f107 0314 	add.w	r3, r7, #20
 80033fc:	2200      	movs	r2, #0
 80033fe:	601a      	str	r2, [r3, #0]
 8003400:	605a      	str	r2, [r3, #4]
 8003402:	609a      	str	r2, [r3, #8]
 8003404:	60da      	str	r2, [r3, #12]
 8003406:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003410:	d11f      	bne.n	8003452 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003412:	4b36      	ldr	r3, [pc, #216]	; (80034ec <HAL_TIM_MspPostInit+0xfc>)
 8003414:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003418:	4a34      	ldr	r2, [pc, #208]	; (80034ec <HAL_TIM_MspPostInit+0xfc>)
 800341a:	f043 0301 	orr.w	r3, r3, #1
 800341e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003422:	4b32      	ldr	r3, [pc, #200]	; (80034ec <HAL_TIM_MspPostInit+0xfc>)
 8003424:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003428:	f003 0301 	and.w	r3, r3, #1
 800342c:	613b      	str	r3, [r7, #16]
 800342e:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = PWM_L_Pin;
 8003430:	2301      	movs	r3, #1
 8003432:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003434:	2302      	movs	r3, #2
 8003436:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003438:	2300      	movs	r3, #0
 800343a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800343c:	2302      	movs	r3, #2
 800343e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003440:	2301      	movs	r3, #1
 8003442:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_L_GPIO_Port, &GPIO_InitStruct);
 8003444:	f107 0314 	add.w	r3, r7, #20
 8003448:	4619      	mov	r1, r3
 800344a:	4829      	ldr	r0, [pc, #164]	; (80034f0 <HAL_TIM_MspPostInit+0x100>)
 800344c:	f004 fa1e 	bl	800788c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8003450:	e048      	b.n	80034e4 <HAL_TIM_MspPostInit+0xf4>
  else if(htim->Instance==TIM3)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a27      	ldr	r2, [pc, #156]	; (80034f4 <HAL_TIM_MspPostInit+0x104>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d11f      	bne.n	800349c <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800345c:	4b23      	ldr	r3, [pc, #140]	; (80034ec <HAL_TIM_MspPostInit+0xfc>)
 800345e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003462:	4a22      	ldr	r2, [pc, #136]	; (80034ec <HAL_TIM_MspPostInit+0xfc>)
 8003464:	f043 0301 	orr.w	r3, r3, #1
 8003468:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800346c:	4b1f      	ldr	r3, [pc, #124]	; (80034ec <HAL_TIM_MspPostInit+0xfc>)
 800346e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003472:	f003 0301 	and.w	r3, r3, #1
 8003476:	60fb      	str	r3, [r7, #12]
 8003478:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_R_Pin;
 800347a:	2340      	movs	r3, #64	; 0x40
 800347c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800347e:	2302      	movs	r3, #2
 8003480:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003482:	2300      	movs	r3, #0
 8003484:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003486:	2302      	movs	r3, #2
 8003488:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800348a:	2302      	movs	r3, #2
 800348c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_R_GPIO_Port, &GPIO_InitStruct);
 800348e:	f107 0314 	add.w	r3, r7, #20
 8003492:	4619      	mov	r1, r3
 8003494:	4816      	ldr	r0, [pc, #88]	; (80034f0 <HAL_TIM_MspPostInit+0x100>)
 8003496:	f004 f9f9 	bl	800788c <HAL_GPIO_Init>
}
 800349a:	e023      	b.n	80034e4 <HAL_TIM_MspPostInit+0xf4>
  else if(htim->Instance==TIM5)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a15      	ldr	r2, [pc, #84]	; (80034f8 <HAL_TIM_MspPostInit+0x108>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d11e      	bne.n	80034e4 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034a6:	4b11      	ldr	r3, [pc, #68]	; (80034ec <HAL_TIM_MspPostInit+0xfc>)
 80034a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034ac:	4a0f      	ldr	r2, [pc, #60]	; (80034ec <HAL_TIM_MspPostInit+0xfc>)
 80034ae:	f043 0301 	orr.w	r3, r3, #1
 80034b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80034b6:	4b0d      	ldr	r3, [pc, #52]	; (80034ec <HAL_TIM_MspPostInit+0xfc>)
 80034b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034bc:	f003 0301 	and.w	r3, r3, #1
 80034c0:	60bb      	str	r3, [r7, #8]
 80034c2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80034c4:	2308      	movs	r3, #8
 80034c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034c8:	2302      	movs	r3, #2
 80034ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034cc:	2300      	movs	r3, #0
 80034ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034d0:	2300      	movs	r3, #0
 80034d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80034d4:	2302      	movs	r3, #2
 80034d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034d8:	f107 0314 	add.w	r3, r7, #20
 80034dc:	4619      	mov	r1, r3
 80034de:	4804      	ldr	r0, [pc, #16]	; (80034f0 <HAL_TIM_MspPostInit+0x100>)
 80034e0:	f004 f9d4 	bl	800788c <HAL_GPIO_Init>
}
 80034e4:	bf00      	nop
 80034e6:	3728      	adds	r7, #40	; 0x28
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}
 80034ec:	58024400 	.word	0x58024400
 80034f0:	58020000 	.word	0x58020000
 80034f4:	40000400 	.word	0x40000400
 80034f8:	40000c00 	.word	0x40000c00

080034fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b0ba      	sub	sp, #232	; 0xe8
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003504:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003508:	2200      	movs	r2, #0
 800350a:	601a      	str	r2, [r3, #0]
 800350c:	605a      	str	r2, [r3, #4]
 800350e:	609a      	str	r2, [r3, #8]
 8003510:	60da      	str	r2, [r3, #12]
 8003512:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003514:	f107 0310 	add.w	r3, r7, #16
 8003518:	22c0      	movs	r2, #192	; 0xc0
 800351a:	2100      	movs	r1, #0
 800351c:	4618      	mov	r0, r3
 800351e:	f010 ffbe 	bl	801449e <memset>
  if(huart->Instance==USART3)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a59      	ldr	r2, [pc, #356]	; (800368c <HAL_UART_MspInit+0x190>)
 8003528:	4293      	cmp	r3, r2
 800352a:	f040 80aa 	bne.w	8003682 <HAL_UART_MspInit+0x186>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800352e:	f04f 0202 	mov.w	r2, #2
 8003532:	f04f 0300 	mov.w	r3, #0
 8003536:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800353a:	2300      	movs	r3, #0
 800353c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003540:	f107 0310 	add.w	r3, r7, #16
 8003544:	4618      	mov	r0, r3
 8003546:	f006 f9b7 	bl	80098b8 <HAL_RCCEx_PeriphCLKConfig>
 800354a:	4603      	mov	r3, r0
 800354c:	2b00      	cmp	r3, #0
 800354e:	d001      	beq.n	8003554 <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 8003550:	f7ff fd46 	bl	8002fe0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003554:	4b4e      	ldr	r3, [pc, #312]	; (8003690 <HAL_UART_MspInit+0x194>)
 8003556:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800355a:	4a4d      	ldr	r2, [pc, #308]	; (8003690 <HAL_UART_MspInit+0x194>)
 800355c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003560:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003564:	4b4a      	ldr	r3, [pc, #296]	; (8003690 <HAL_UART_MspInit+0x194>)
 8003566:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800356a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800356e:	60fb      	str	r3, [r7, #12]
 8003570:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003572:	4b47      	ldr	r3, [pc, #284]	; (8003690 <HAL_UART_MspInit+0x194>)
 8003574:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003578:	4a45      	ldr	r2, [pc, #276]	; (8003690 <HAL_UART_MspInit+0x194>)
 800357a:	f043 0308 	orr.w	r3, r3, #8
 800357e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003582:	4b43      	ldr	r3, [pc, #268]	; (8003690 <HAL_UART_MspInit+0x194>)
 8003584:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003588:	f003 0308 	and.w	r3, r3, #8
 800358c:	60bb      	str	r3, [r7, #8]
 800358e:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8003590:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003594:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003598:	2302      	movs	r3, #2
 800359a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800359e:	2300      	movs	r3, #0
 80035a0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035a4:	2300      	movs	r3, #0
 80035a6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80035aa:	2307      	movs	r3, #7
 80035ac:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80035b0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80035b4:	4619      	mov	r1, r3
 80035b6:	4837      	ldr	r0, [pc, #220]	; (8003694 <HAL_UART_MspInit+0x198>)
 80035b8:	f004 f968 	bl	800788c <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream0;
 80035bc:	4b36      	ldr	r3, [pc, #216]	; (8003698 <HAL_UART_MspInit+0x19c>)
 80035be:	4a37      	ldr	r2, [pc, #220]	; (800369c <HAL_UART_MspInit+0x1a0>)
 80035c0:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 80035c2:	4b35      	ldr	r3, [pc, #212]	; (8003698 <HAL_UART_MspInit+0x19c>)
 80035c4:	222d      	movs	r2, #45	; 0x2d
 80035c6:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80035c8:	4b33      	ldr	r3, [pc, #204]	; (8003698 <HAL_UART_MspInit+0x19c>)
 80035ca:	2200      	movs	r2, #0
 80035cc:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80035ce:	4b32      	ldr	r3, [pc, #200]	; (8003698 <HAL_UART_MspInit+0x19c>)
 80035d0:	2200      	movs	r2, #0
 80035d2:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80035d4:	4b30      	ldr	r3, [pc, #192]	; (8003698 <HAL_UART_MspInit+0x19c>)
 80035d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80035da:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80035dc:	4b2e      	ldr	r3, [pc, #184]	; (8003698 <HAL_UART_MspInit+0x19c>)
 80035de:	2200      	movs	r2, #0
 80035e0:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80035e2:	4b2d      	ldr	r3, [pc, #180]	; (8003698 <HAL_UART_MspInit+0x19c>)
 80035e4:	2200      	movs	r2, #0
 80035e6:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80035e8:	4b2b      	ldr	r3, [pc, #172]	; (8003698 <HAL_UART_MspInit+0x19c>)
 80035ea:	2200      	movs	r2, #0
 80035ec:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80035ee:	4b2a      	ldr	r3, [pc, #168]	; (8003698 <HAL_UART_MspInit+0x19c>)
 80035f0:	2200      	movs	r2, #0
 80035f2:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80035f4:	4b28      	ldr	r3, [pc, #160]	; (8003698 <HAL_UART_MspInit+0x19c>)
 80035f6:	2200      	movs	r2, #0
 80035f8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80035fa:	4827      	ldr	r0, [pc, #156]	; (8003698 <HAL_UART_MspInit+0x19c>)
 80035fc:	f001 ff20 	bl	8005440 <HAL_DMA_Init>
 8003600:	4603      	mov	r3, r0
 8003602:	2b00      	cmp	r3, #0
 8003604:	d001      	beq.n	800360a <HAL_UART_MspInit+0x10e>
    {
      Error_Handler();
 8003606:	f7ff fceb 	bl	8002fe0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	4a22      	ldr	r2, [pc, #136]	; (8003698 <HAL_UART_MspInit+0x19c>)
 800360e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8003612:	4a21      	ldr	r2, [pc, #132]	; (8003698 <HAL_UART_MspInit+0x19c>)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream1;
 8003618:	4b21      	ldr	r3, [pc, #132]	; (80036a0 <HAL_UART_MspInit+0x1a4>)
 800361a:	4a22      	ldr	r2, [pc, #136]	; (80036a4 <HAL_UART_MspInit+0x1a8>)
 800361c:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 800361e:	4b20      	ldr	r3, [pc, #128]	; (80036a0 <HAL_UART_MspInit+0x1a4>)
 8003620:	222e      	movs	r2, #46	; 0x2e
 8003622:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003624:	4b1e      	ldr	r3, [pc, #120]	; (80036a0 <HAL_UART_MspInit+0x1a4>)
 8003626:	2240      	movs	r2, #64	; 0x40
 8003628:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800362a:	4b1d      	ldr	r3, [pc, #116]	; (80036a0 <HAL_UART_MspInit+0x1a4>)
 800362c:	2200      	movs	r2, #0
 800362e:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003630:	4b1b      	ldr	r3, [pc, #108]	; (80036a0 <HAL_UART_MspInit+0x1a4>)
 8003632:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003636:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003638:	4b19      	ldr	r3, [pc, #100]	; (80036a0 <HAL_UART_MspInit+0x1a4>)
 800363a:	2200      	movs	r2, #0
 800363c:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800363e:	4b18      	ldr	r3, [pc, #96]	; (80036a0 <HAL_UART_MspInit+0x1a4>)
 8003640:	2200      	movs	r2, #0
 8003642:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8003644:	4b16      	ldr	r3, [pc, #88]	; (80036a0 <HAL_UART_MspInit+0x1a4>)
 8003646:	2200      	movs	r2, #0
 8003648:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800364a:	4b15      	ldr	r3, [pc, #84]	; (80036a0 <HAL_UART_MspInit+0x1a4>)
 800364c:	2200      	movs	r2, #0
 800364e:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003650:	4b13      	ldr	r3, [pc, #76]	; (80036a0 <HAL_UART_MspInit+0x1a4>)
 8003652:	2200      	movs	r2, #0
 8003654:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8003656:	4812      	ldr	r0, [pc, #72]	; (80036a0 <HAL_UART_MspInit+0x1a4>)
 8003658:	f001 fef2 	bl	8005440 <HAL_DMA_Init>
 800365c:	4603      	mov	r3, r0
 800365e:	2b00      	cmp	r3, #0
 8003660:	d001      	beq.n	8003666 <HAL_UART_MspInit+0x16a>
    {
      Error_Handler();
 8003662:	f7ff fcbd 	bl	8002fe0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	4a0d      	ldr	r2, [pc, #52]	; (80036a0 <HAL_UART_MspInit+0x1a4>)
 800366a:	67da      	str	r2, [r3, #124]	; 0x7c
 800366c:	4a0c      	ldr	r2, [pc, #48]	; (80036a0 <HAL_UART_MspInit+0x1a4>)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8003672:	2200      	movs	r2, #0
 8003674:	2105      	movs	r1, #5
 8003676:	2027      	movs	r0, #39	; 0x27
 8003678:	f001 feba 	bl	80053f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800367c:	2027      	movs	r0, #39	; 0x27
 800367e:	f001 fed1 	bl	8005424 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003682:	bf00      	nop
 8003684:	37e8      	adds	r7, #232	; 0xe8
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}
 800368a:	bf00      	nop
 800368c:	40004800 	.word	0x40004800
 8003690:	58024400 	.word	0x58024400
 8003694:	58020c00 	.word	0x58020c00
 8003698:	24000570 	.word	0x24000570
 800369c:	40020010 	.word	0x40020010
 80036a0:	240005e8 	.word	0x240005e8
 80036a4:	40020028 	.word	0x40020028

080036a8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b0ba      	sub	sp, #232	; 0xe8
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036b0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80036b4:	2200      	movs	r2, #0
 80036b6:	601a      	str	r2, [r3, #0]
 80036b8:	605a      	str	r2, [r3, #4]
 80036ba:	609a      	str	r2, [r3, #8]
 80036bc:	60da      	str	r2, [r3, #12]
 80036be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80036c0:	f107 0310 	add.w	r3, r7, #16
 80036c4:	22c0      	movs	r2, #192	; 0xc0
 80036c6:	2100      	movs	r1, #0
 80036c8:	4618      	mov	r0, r3
 80036ca:	f010 fee8 	bl	801449e <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a38      	ldr	r2, [pc, #224]	; (80037b4 <HAL_PCD_MspInit+0x10c>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d169      	bne.n	80037ac <HAL_PCD_MspInit+0x104>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80036d8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80036dc:	f04f 0300 	mov.w	r3, #0
 80036e0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 80036e4:	2301      	movs	r3, #1
 80036e6:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 18;
 80036e8:	2312      	movs	r3, #18
 80036ea:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 80036ec:	2302      	movs	r3, #2
 80036ee:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 3;
 80036f0:	2303      	movs	r3, #3
 80036f2:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 80036f4:	2302      	movs	r3, #2
 80036f6:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 80036f8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80036fc:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 6144;
 80036fe:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8003702:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8003704:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003708:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800370c:	f107 0310 	add.w	r3, r7, #16
 8003710:	4618      	mov	r0, r3
 8003712:	f006 f8d1 	bl	80098b8 <HAL_RCCEx_PeriphCLKConfig>
 8003716:	4603      	mov	r3, r0
 8003718:	2b00      	cmp	r3, #0
 800371a:	d001      	beq.n	8003720 <HAL_PCD_MspInit+0x78>
    {
      Error_Handler();
 800371c:	f7ff fc60 	bl	8002fe0 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8003720:	f005 f892 	bl	8008848 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003724:	4b24      	ldr	r3, [pc, #144]	; (80037b8 <HAL_PCD_MspInit+0x110>)
 8003726:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800372a:	4a23      	ldr	r2, [pc, #140]	; (80037b8 <HAL_PCD_MspInit+0x110>)
 800372c:	f043 0301 	orr.w	r3, r3, #1
 8003730:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003734:	4b20      	ldr	r3, [pc, #128]	; (80037b8 <HAL_PCD_MspInit+0x110>)
 8003736:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800373a:	f003 0301 	and.w	r3, r3, #1
 800373e:	60fb      	str	r3, [r7, #12]
 8003740:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8003742:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8003746:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800374a:	2302      	movs	r3, #2
 800374c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003750:	2300      	movs	r3, #0
 8003752:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003756:	2300      	movs	r3, #0
 8003758:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800375c:	230a      	movs	r3, #10
 800375e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003762:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003766:	4619      	mov	r1, r3
 8003768:	4814      	ldr	r0, [pc, #80]	; (80037bc <HAL_PCD_MspInit+0x114>)
 800376a:	f004 f88f 	bl	800788c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800376e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003772:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003776:	2300      	movs	r3, #0
 8003778:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800377c:	2300      	movs	r3, #0
 800377e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003782:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003786:	4619      	mov	r1, r3
 8003788:	480c      	ldr	r0, [pc, #48]	; (80037bc <HAL_PCD_MspInit+0x114>)
 800378a:	f004 f87f 	bl	800788c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800378e:	4b0a      	ldr	r3, [pc, #40]	; (80037b8 <HAL_PCD_MspInit+0x110>)
 8003790:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003794:	4a08      	ldr	r2, [pc, #32]	; (80037b8 <HAL_PCD_MspInit+0x110>)
 8003796:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800379a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800379e:	4b06      	ldr	r3, [pc, #24]	; (80037b8 <HAL_PCD_MspInit+0x110>)
 80037a0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80037a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80037a8:	60bb      	str	r3, [r7, #8]
 80037aa:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80037ac:	bf00      	nop
 80037ae:	37e8      	adds	r7, #232	; 0xe8
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}
 80037b4:	40080000 	.word	0x40080000
 80037b8:	58024400 	.word	0x58024400
 80037bc:	58020000 	.word	0x58020000

080037c0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b08e      	sub	sp, #56	; 0x38
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM17 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2b0f      	cmp	r3, #15
 80037cc:	d844      	bhi.n	8003858 <HAL_InitTick+0x98>
  {
  HAL_NVIC_SetPriority(TIM17_IRQn, TickPriority ,0U);
 80037ce:	2200      	movs	r2, #0
 80037d0:	6879      	ldr	r1, [r7, #4]
 80037d2:	2076      	movs	r0, #118	; 0x76
 80037d4:	f001 fe0c 	bl	80053f0 <HAL_NVIC_SetPriority>

  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM17_IRQn);
 80037d8:	2076      	movs	r0, #118	; 0x76
 80037da:	f001 fe23 	bl	8005424 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80037de:	4a24      	ldr	r2, [pc, #144]	; (8003870 <HAL_InitTick+0xb0>)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 80037e4:	4b23      	ldr	r3, [pc, #140]	; (8003874 <HAL_InitTick+0xb4>)
 80037e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80037ea:	4a22      	ldr	r2, [pc, #136]	; (8003874 <HAL_InitTick+0xb4>)
 80037ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037f0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80037f4:	4b1f      	ldr	r3, [pc, #124]	; (8003874 <HAL_InitTick+0xb4>)
 80037f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80037fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037fe:	60bb      	str	r3, [r7, #8]
 8003800:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003802:	f107 020c 	add.w	r2, r7, #12
 8003806:	f107 0310 	add.w	r3, r7, #16
 800380a:	4611      	mov	r1, r2
 800380c:	4618      	mov	r0, r3
 800380e:	f006 f811 	bl	8009834 <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8003812:	f005 fff9 	bl	8009808 <HAL_RCC_GetPCLK2Freq>
 8003816:	4603      	mov	r3, r0
 8003818:	005b      	lsls	r3, r3, #1
 800381a:	637b      	str	r3, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800381c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800381e:	4a16      	ldr	r2, [pc, #88]	; (8003878 <HAL_InitTick+0xb8>)
 8003820:	fba2 2303 	umull	r2, r3, r2, r3
 8003824:	0c9b      	lsrs	r3, r3, #18
 8003826:	3b01      	subs	r3, #1
 8003828:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 800382a:	4b14      	ldr	r3, [pc, #80]	; (800387c <HAL_InitTick+0xbc>)
 800382c:	4a14      	ldr	r2, [pc, #80]	; (8003880 <HAL_InitTick+0xc0>)
 800382e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 8003830:	4b12      	ldr	r3, [pc, #72]	; (800387c <HAL_InitTick+0xbc>)
 8003832:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003836:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8003838:	4a10      	ldr	r2, [pc, #64]	; (800387c <HAL_InitTick+0xbc>)
 800383a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800383c:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 800383e:	4b0f      	ldr	r3, [pc, #60]	; (800387c <HAL_InitTick+0xbc>)
 8003840:	2200      	movs	r2, #0
 8003842:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003844:	4b0d      	ldr	r3, [pc, #52]	; (800387c <HAL_InitTick+0xbc>)
 8003846:	2200      	movs	r2, #0
 8003848:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 800384a:	480c      	ldr	r0, [pc, #48]	; (800387c <HAL_InitTick+0xbc>)
 800384c:	f008 fd32 	bl	800c2b4 <HAL_TIM_Base_Init>
 8003850:	4603      	mov	r3, r0
 8003852:	2b00      	cmp	r3, #0
 8003854:	d107      	bne.n	8003866 <HAL_InitTick+0xa6>
 8003856:	e001      	b.n	800385c <HAL_InitTick+0x9c>
    return HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	e005      	b.n	8003868 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim17);
 800385c:	4807      	ldr	r0, [pc, #28]	; (800387c <HAL_InitTick+0xbc>)
 800385e:	f008 fd81 	bl	800c364 <HAL_TIM_Base_Start_IT>
 8003862:	4603      	mov	r3, r0
 8003864:	e000      	b.n	8003868 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 8003866:	2301      	movs	r3, #1
}
 8003868:	4618      	mov	r0, r3
 800386a:	3738      	adds	r7, #56	; 0x38
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}
 8003870:	24000008 	.word	0x24000008
 8003874:	58024400 	.word	0x58024400
 8003878:	431bde83 	.word	0x431bde83
 800387c:	24000bc8 	.word	0x24000bc8
 8003880:	40014800 	.word	0x40014800

08003884 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003884:	b480      	push	{r7}
 8003886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003888:	e7fe      	b.n	8003888 <NMI_Handler+0x4>

0800388a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800388a:	b480      	push	{r7}
 800388c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800388e:	e7fe      	b.n	800388e <HardFault_Handler+0x4>

08003890 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003890:	b480      	push	{r7}
 8003892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003894:	e7fe      	b.n	8003894 <MemManage_Handler+0x4>

08003896 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003896:	b480      	push	{r7}
 8003898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800389a:	e7fe      	b.n	800389a <BusFault_Handler+0x4>

0800389c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800389c:	b480      	push	{r7}
 800389e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80038a0:	e7fe      	b.n	80038a0 <UsageFault_Handler+0x4>

080038a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80038a2:	b480      	push	{r7}
 80038a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80038a6:	bf00      	nop
 80038a8:	46bd      	mov	sp, r7
 80038aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ae:	4770      	bx	lr

080038b0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80038b4:	4802      	ldr	r0, [pc, #8]	; (80038c0 <DMA1_Stream0_IRQHandler+0x10>)
 80038b6:	f002 fe83 	bl	80065c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80038ba:	bf00      	nop
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	bf00      	nop
 80038c0:	24000570 	.word	0x24000570

080038c4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80038c8:	4802      	ldr	r0, [pc, #8]	; (80038d4 <DMA1_Stream1_IRQHandler+0x10>)
 80038ca:	f002 fe79 	bl	80065c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80038ce:	bf00      	nop
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	bf00      	nop
 80038d4:	240005e8 	.word	0x240005e8

080038d8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80038dc:	4802      	ldr	r0, [pc, #8]	; (80038e8 <TIM1_UP_IRQHandler+0x10>)
 80038de:	f009 f87d 	bl	800c9dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80038e2:	bf00      	nop
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop
 80038e8:	24000314 	.word	0x24000314

080038ec <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80038f0:	4802      	ldr	r0, [pc, #8]	; (80038fc <USART3_IRQHandler+0x10>)
 80038f2:	f00a f985 	bl	800dc00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80038f6:	bf00      	nop
 80038f8:	bd80      	pop	{r7, pc}
 80038fa:	bf00      	nop
 80038fc:	240004dc 	.word	0x240004dc

08003900 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8003904:	4802      	ldr	r0, [pc, #8]	; (8003910 <TIM17_IRQHandler+0x10>)
 8003906:	f009 f869 	bl	800c9dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 800390a:	bf00      	nop
 800390c:	bd80      	pop	{r7, pc}
 800390e:	bf00      	nop
 8003910:	24000bc8 	.word	0x24000bc8

08003914 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003914:	b480      	push	{r7}
 8003916:	af00      	add	r7, sp, #0
  return 1;
 8003918:	2301      	movs	r3, #1
}
 800391a:	4618      	mov	r0, r3
 800391c:	46bd      	mov	sp, r7
 800391e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003922:	4770      	bx	lr

08003924 <_kill>:

int _kill(int pid, int sig)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b082      	sub	sp, #8
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
 800392c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800392e:	f010 fe6f 	bl	8014610 <__errno>
 8003932:	4603      	mov	r3, r0
 8003934:	2216      	movs	r2, #22
 8003936:	601a      	str	r2, [r3, #0]
  return -1;
 8003938:	f04f 33ff 	mov.w	r3, #4294967295
}
 800393c:	4618      	mov	r0, r3
 800393e:	3708      	adds	r7, #8
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}

08003944 <_exit>:

void _exit (int status)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b082      	sub	sp, #8
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800394c:	f04f 31ff 	mov.w	r1, #4294967295
 8003950:	6878      	ldr	r0, [r7, #4]
 8003952:	f7ff ffe7 	bl	8003924 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003956:	e7fe      	b.n	8003956 <_exit+0x12>

08003958 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b086      	sub	sp, #24
 800395c:	af00      	add	r7, sp, #0
 800395e:	60f8      	str	r0, [r7, #12]
 8003960:	60b9      	str	r1, [r7, #8]
 8003962:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003964:	2300      	movs	r3, #0
 8003966:	617b      	str	r3, [r7, #20]
 8003968:	e00a      	b.n	8003980 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800396a:	f3af 8000 	nop.w
 800396e:	4601      	mov	r1, r0
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	1c5a      	adds	r2, r3, #1
 8003974:	60ba      	str	r2, [r7, #8]
 8003976:	b2ca      	uxtb	r2, r1
 8003978:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	3301      	adds	r3, #1
 800397e:	617b      	str	r3, [r7, #20]
 8003980:	697a      	ldr	r2, [r7, #20]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	429a      	cmp	r2, r3
 8003986:	dbf0      	blt.n	800396a <_read+0x12>
  }

  return len;
 8003988:	687b      	ldr	r3, [r7, #4]
}
 800398a:	4618      	mov	r0, r3
 800398c:	3718      	adds	r7, #24
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}

08003992 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003992:	b580      	push	{r7, lr}
 8003994:	b086      	sub	sp, #24
 8003996:	af00      	add	r7, sp, #0
 8003998:	60f8      	str	r0, [r7, #12]
 800399a:	60b9      	str	r1, [r7, #8]
 800399c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800399e:	2300      	movs	r3, #0
 80039a0:	617b      	str	r3, [r7, #20]
 80039a2:	e009      	b.n	80039b8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	1c5a      	adds	r2, r3, #1
 80039a8:	60ba      	str	r2, [r7, #8]
 80039aa:	781b      	ldrb	r3, [r3, #0]
 80039ac:	4618      	mov	r0, r3
 80039ae:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	3301      	adds	r3, #1
 80039b6:	617b      	str	r3, [r7, #20]
 80039b8:	697a      	ldr	r2, [r7, #20]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	429a      	cmp	r2, r3
 80039be:	dbf1      	blt.n	80039a4 <_write+0x12>
  }
  return len;
 80039c0:	687b      	ldr	r3, [r7, #4]
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3718      	adds	r7, #24
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}

080039ca <_close>:

int _close(int file)
{
 80039ca:	b480      	push	{r7}
 80039cc:	b083      	sub	sp, #12
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80039d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	370c      	adds	r7, #12
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr

080039e2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80039e2:	b480      	push	{r7}
 80039e4:	b083      	sub	sp, #12
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	6078      	str	r0, [r7, #4]
 80039ea:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80039f2:	605a      	str	r2, [r3, #4]
  return 0;
 80039f4:	2300      	movs	r3, #0
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	370c      	adds	r7, #12
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr

08003a02 <_isatty>:

int _isatty(int file)
{
 8003a02:	b480      	push	{r7}
 8003a04:	b083      	sub	sp, #12
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003a0a:	2301      	movs	r3, #1
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	370c      	adds	r7, #12
 8003a10:	46bd      	mov	sp, r7
 8003a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a16:	4770      	bx	lr

08003a18 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b085      	sub	sp, #20
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	60f8      	str	r0, [r7, #12]
 8003a20:	60b9      	str	r1, [r7, #8]
 8003a22:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003a24:	2300      	movs	r3, #0
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	3714      	adds	r7, #20
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr
	...

08003a34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b086      	sub	sp, #24
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003a3c:	4a14      	ldr	r2, [pc, #80]	; (8003a90 <_sbrk+0x5c>)
 8003a3e:	4b15      	ldr	r3, [pc, #84]	; (8003a94 <_sbrk+0x60>)
 8003a40:	1ad3      	subs	r3, r2, r3
 8003a42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003a48:	4b13      	ldr	r3, [pc, #76]	; (8003a98 <_sbrk+0x64>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d102      	bne.n	8003a56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003a50:	4b11      	ldr	r3, [pc, #68]	; (8003a98 <_sbrk+0x64>)
 8003a52:	4a12      	ldr	r2, [pc, #72]	; (8003a9c <_sbrk+0x68>)
 8003a54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003a56:	4b10      	ldr	r3, [pc, #64]	; (8003a98 <_sbrk+0x64>)
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	4413      	add	r3, r2
 8003a5e:	693a      	ldr	r2, [r7, #16]
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d207      	bcs.n	8003a74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003a64:	f010 fdd4 	bl	8014610 <__errno>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	220c      	movs	r2, #12
 8003a6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003a6e:	f04f 33ff 	mov.w	r3, #4294967295
 8003a72:	e009      	b.n	8003a88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003a74:	4b08      	ldr	r3, [pc, #32]	; (8003a98 <_sbrk+0x64>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003a7a:	4b07      	ldr	r3, [pc, #28]	; (8003a98 <_sbrk+0x64>)
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4413      	add	r3, r2
 8003a82:	4a05      	ldr	r2, [pc, #20]	; (8003a98 <_sbrk+0x64>)
 8003a84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003a86:	68fb      	ldr	r3, [r7, #12]
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3718      	adds	r7, #24
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}
 8003a90:	24080000 	.word	0x24080000
 8003a94:	00000400 	.word	0x00000400
 8003a98:	24000c14 	.word	0x24000c14
 8003a9c:	24005750 	.word	0x24005750

08003aa0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003aa0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003ad8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003aa4:	f7fc ffe6 	bl	8000a74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003aa8:	480c      	ldr	r0, [pc, #48]	; (8003adc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003aaa:	490d      	ldr	r1, [pc, #52]	; (8003ae0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003aac:	4a0d      	ldr	r2, [pc, #52]	; (8003ae4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003aae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003ab0:	e002      	b.n	8003ab8 <LoopCopyDataInit>

08003ab2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003ab2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003ab4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003ab6:	3304      	adds	r3, #4

08003ab8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003ab8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003aba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003abc:	d3f9      	bcc.n	8003ab2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003abe:	4a0a      	ldr	r2, [pc, #40]	; (8003ae8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003ac0:	4c0a      	ldr	r4, [pc, #40]	; (8003aec <LoopFillZerobss+0x22>)
  movs r3, #0
 8003ac2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003ac4:	e001      	b.n	8003aca <LoopFillZerobss>

08003ac6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003ac6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003ac8:	3204      	adds	r2, #4

08003aca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003aca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003acc:	d3fb      	bcc.n	8003ac6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003ace:	f010 fda5 	bl	801461c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003ad2:	f7fe f8f5 	bl	8001cc0 <main>
  bx  lr
 8003ad6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003ad8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8003adc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003ae0:	240001dc 	.word	0x240001dc
  ldr r2, =_sidata
 8003ae4:	08018138 	.word	0x08018138
  ldr r2, =_sbss
 8003ae8:	240001dc 	.word	0x240001dc
  ldr r4, =_ebss
 8003aec:	24005750 	.word	0x24005750

08003af0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003af0:	e7fe      	b.n	8003af0 <ADC3_IRQHandler>
	...

08003af4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b082      	sub	sp, #8
 8003af8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003afa:	2003      	movs	r0, #3
 8003afc:	f001 fc6d 	bl	80053da <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003b00:	f005 fcc2 	bl	8009488 <HAL_RCC_GetSysClockFreq>
 8003b04:	4602      	mov	r2, r0
 8003b06:	4b15      	ldr	r3, [pc, #84]	; (8003b5c <HAL_Init+0x68>)
 8003b08:	699b      	ldr	r3, [r3, #24]
 8003b0a:	0a1b      	lsrs	r3, r3, #8
 8003b0c:	f003 030f 	and.w	r3, r3, #15
 8003b10:	4913      	ldr	r1, [pc, #76]	; (8003b60 <HAL_Init+0x6c>)
 8003b12:	5ccb      	ldrb	r3, [r1, r3]
 8003b14:	f003 031f 	and.w	r3, r3, #31
 8003b18:	fa22 f303 	lsr.w	r3, r2, r3
 8003b1c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003b1e:	4b0f      	ldr	r3, [pc, #60]	; (8003b5c <HAL_Init+0x68>)
 8003b20:	699b      	ldr	r3, [r3, #24]
 8003b22:	f003 030f 	and.w	r3, r3, #15
 8003b26:	4a0e      	ldr	r2, [pc, #56]	; (8003b60 <HAL_Init+0x6c>)
 8003b28:	5cd3      	ldrb	r3, [r2, r3]
 8003b2a:	f003 031f 	and.w	r3, r3, #31
 8003b2e:	687a      	ldr	r2, [r7, #4]
 8003b30:	fa22 f303 	lsr.w	r3, r2, r3
 8003b34:	4a0b      	ldr	r2, [pc, #44]	; (8003b64 <HAL_Init+0x70>)
 8003b36:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003b38:	4a0b      	ldr	r2, [pc, #44]	; (8003b68 <HAL_Init+0x74>)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003b3e:	200f      	movs	r0, #15
 8003b40:	f7ff fe3e 	bl	80037c0 <HAL_InitTick>
 8003b44:	4603      	mov	r3, r0
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d001      	beq.n	8003b4e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e002      	b.n	8003b54 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003b4e:	f7ff fa4d 	bl	8002fec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003b52:	2300      	movs	r3, #0
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	3708      	adds	r7, #8
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}
 8003b5c:	58024400 	.word	0x58024400
 8003b60:	08017bb0 	.word	0x08017bb0
 8003b64:	24000004 	.word	0x24000004
 8003b68:	24000000 	.word	0x24000000

08003b6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003b70:	4b06      	ldr	r3, [pc, #24]	; (8003b8c <HAL_IncTick+0x20>)
 8003b72:	781b      	ldrb	r3, [r3, #0]
 8003b74:	461a      	mov	r2, r3
 8003b76:	4b06      	ldr	r3, [pc, #24]	; (8003b90 <HAL_IncTick+0x24>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4413      	add	r3, r2
 8003b7c:	4a04      	ldr	r2, [pc, #16]	; (8003b90 <HAL_IncTick+0x24>)
 8003b7e:	6013      	str	r3, [r2, #0]
}
 8003b80:	bf00      	nop
 8003b82:	46bd      	mov	sp, r7
 8003b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b88:	4770      	bx	lr
 8003b8a:	bf00      	nop
 8003b8c:	2400000c 	.word	0x2400000c
 8003b90:	24000c18 	.word	0x24000c18

08003b94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b94:	b480      	push	{r7}
 8003b96:	af00      	add	r7, sp, #0
  return uwTick;
 8003b98:	4b03      	ldr	r3, [pc, #12]	; (8003ba8 <HAL_GetTick+0x14>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba4:	4770      	bx	lr
 8003ba6:	bf00      	nop
 8003ba8:	24000c18 	.word	0x24000c18

08003bac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b084      	sub	sp, #16
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003bb4:	f7ff ffee 	bl	8003b94 <HAL_GetTick>
 8003bb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bc4:	d005      	beq.n	8003bd2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003bc6:	4b0a      	ldr	r3, [pc, #40]	; (8003bf0 <HAL_Delay+0x44>)
 8003bc8:	781b      	ldrb	r3, [r3, #0]
 8003bca:	461a      	mov	r2, r3
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	4413      	add	r3, r2
 8003bd0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003bd2:	bf00      	nop
 8003bd4:	f7ff ffde 	bl	8003b94 <HAL_GetTick>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	1ad3      	subs	r3, r2, r3
 8003bde:	68fa      	ldr	r2, [r7, #12]
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d8f7      	bhi.n	8003bd4 <HAL_Delay+0x28>
  {
  }
}
 8003be4:	bf00      	nop
 8003be6:	bf00      	nop
 8003be8:	3710      	adds	r7, #16
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	bf00      	nop
 8003bf0:	2400000c 	.word	0x2400000c

08003bf4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003bf8:	4b03      	ldr	r3, [pc, #12]	; (8003c08 <HAL_GetREVID+0x14>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	0c1b      	lsrs	r3, r3, #16
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	46bd      	mov	sp, r7
 8003c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c06:	4770      	bx	lr
 8003c08:	5c001000 	.word	0x5c001000

08003c0c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b083      	sub	sp, #12
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
 8003c14:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	431a      	orrs	r2, r3
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	609a      	str	r2, [r3, #8]
}
 8003c26:	bf00      	nop
 8003c28:	370c      	adds	r7, #12
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c30:	4770      	bx	lr

08003c32 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003c32:	b480      	push	{r7}
 8003c34:	b083      	sub	sp, #12
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	6078      	str	r0, [r7, #4]
 8003c3a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	431a      	orrs	r2, r3
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	609a      	str	r2, [r3, #8]
}
 8003c4c:	bf00      	nop
 8003c4e:	370c      	adds	r7, #12
 8003c50:	46bd      	mov	sp, r7
 8003c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c56:	4770      	bx	lr

08003c58 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b083      	sub	sp, #12
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	370c      	adds	r7, #12
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr

08003c74 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b087      	sub	sp, #28
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	60f8      	str	r0, [r7, #12]
 8003c7c:	60b9      	str	r1, [r7, #8]
 8003c7e:	607a      	str	r2, [r7, #4]
 8003c80:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	3360      	adds	r3, #96	; 0x60
 8003c86:	461a      	mov	r2, r3
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	009b      	lsls	r3, r3, #2
 8003c8c:	4413      	add	r3, r2
 8003c8e:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	430b      	orrs	r3, r1
 8003ca2:	431a      	orrs	r2, r3
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8003ca8:	bf00      	nop
 8003caa:	371c      	adds	r7, #28
 8003cac:	46bd      	mov	sp, r7
 8003cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb2:	4770      	bx	lr

08003cb4 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b085      	sub	sp, #20
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	60f8      	str	r0, [r7, #12]
 8003cbc:	60b9      	str	r1, [r7, #8]
 8003cbe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	691b      	ldr	r3, [r3, #16]
 8003cc4:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	f003 031f 	and.w	r3, r3, #31
 8003cce:	6879      	ldr	r1, [r7, #4]
 8003cd0:	fa01 f303 	lsl.w	r3, r1, r3
 8003cd4:	431a      	orrs	r2, r3
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	611a      	str	r2, [r3, #16]
}
 8003cda:	bf00      	nop
 8003cdc:	3714      	adds	r7, #20
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce4:	4770      	bx	lr

08003ce6 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8003ce6:	b480      	push	{r7}
 8003ce8:	b087      	sub	sp, #28
 8003cea:	af00      	add	r7, sp, #0
 8003cec:	60f8      	str	r0, [r7, #12]
 8003cee:	60b9      	str	r1, [r7, #8]
 8003cf0:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	3360      	adds	r3, #96	; 0x60
 8003cf6:	461a      	mov	r2, r3
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	009b      	lsls	r3, r3, #2
 8003cfc:	4413      	add	r3, r2
 8003cfe:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	431a      	orrs	r2, r3
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	601a      	str	r2, [r3, #0]
  }
}
 8003d10:	bf00      	nop
 8003d12:	371c      	adds	r7, #28
 8003d14:	46bd      	mov	sp, r7
 8003d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1a:	4770      	bx	lr

08003d1c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b083      	sub	sp, #12
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	68db      	ldr	r3, [r3, #12]
 8003d28:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d101      	bne.n	8003d34 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003d30:	2301      	movs	r3, #1
 8003d32:	e000      	b.n	8003d36 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003d34:	2300      	movs	r3, #0
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	370c      	adds	r7, #12
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d40:	4770      	bx	lr

08003d42 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003d42:	b480      	push	{r7}
 8003d44:	b087      	sub	sp, #28
 8003d46:	af00      	add	r7, sp, #0
 8003d48:	60f8      	str	r0, [r7, #12]
 8003d4a:	60b9      	str	r1, [r7, #8]
 8003d4c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	3330      	adds	r3, #48	; 0x30
 8003d52:	461a      	mov	r2, r3
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	0a1b      	lsrs	r3, r3, #8
 8003d58:	009b      	lsls	r3, r3, #2
 8003d5a:	f003 030c 	and.w	r3, r3, #12
 8003d5e:	4413      	add	r3, r2
 8003d60:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	681a      	ldr	r2, [r3, #0]
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	f003 031f 	and.w	r3, r3, #31
 8003d6c:	211f      	movs	r1, #31
 8003d6e:	fa01 f303 	lsl.w	r3, r1, r3
 8003d72:	43db      	mvns	r3, r3
 8003d74:	401a      	ands	r2, r3
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	0e9b      	lsrs	r3, r3, #26
 8003d7a:	f003 011f 	and.w	r1, r3, #31
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	f003 031f 	and.w	r3, r3, #31
 8003d84:	fa01 f303 	lsl.w	r3, r1, r3
 8003d88:	431a      	orrs	r2, r3
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003d8e:	bf00      	nop
 8003d90:	371c      	adds	r7, #28
 8003d92:	46bd      	mov	sp, r7
 8003d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d98:	4770      	bx	lr

08003d9a <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003d9a:	b480      	push	{r7}
 8003d9c:	b087      	sub	sp, #28
 8003d9e:	af00      	add	r7, sp, #0
 8003da0:	60f8      	str	r0, [r7, #12]
 8003da2:	60b9      	str	r1, [r7, #8]
 8003da4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	3314      	adds	r3, #20
 8003daa:	461a      	mov	r2, r3
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	0e5b      	lsrs	r3, r3, #25
 8003db0:	009b      	lsls	r3, r3, #2
 8003db2:	f003 0304 	and.w	r3, r3, #4
 8003db6:	4413      	add	r3, r2
 8003db8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	0d1b      	lsrs	r3, r3, #20
 8003dc2:	f003 031f 	and.w	r3, r3, #31
 8003dc6:	2107      	movs	r1, #7
 8003dc8:	fa01 f303 	lsl.w	r3, r1, r3
 8003dcc:	43db      	mvns	r3, r3
 8003dce:	401a      	ands	r2, r3
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	0d1b      	lsrs	r3, r3, #20
 8003dd4:	f003 031f 	and.w	r3, r3, #31
 8003dd8:	6879      	ldr	r1, [r7, #4]
 8003dda:	fa01 f303 	lsl.w	r3, r1, r3
 8003dde:	431a      	orrs	r2, r3
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003de4:	bf00      	nop
 8003de6:	371c      	adds	r7, #28
 8003de8:	46bd      	mov	sp, r7
 8003dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dee:	4770      	bx	lr

08003df0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b085      	sub	sp, #20
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	60f8      	str	r0, [r7, #12]
 8003df8:	60b9      	str	r1, [r7, #8]
 8003dfa:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e08:	43db      	mvns	r3, r3
 8003e0a:	401a      	ands	r2, r3
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	f003 0318 	and.w	r3, r3, #24
 8003e12:	4908      	ldr	r1, [pc, #32]	; (8003e34 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003e14:	40d9      	lsrs	r1, r3
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	400b      	ands	r3, r1
 8003e1a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e1e:	431a      	orrs	r2, r3
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8003e26:	bf00      	nop
 8003e28:	3714      	adds	r7, #20
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e30:	4770      	bx	lr
 8003e32:	bf00      	nop
 8003e34:	000fffff 	.word	0x000fffff

08003e38 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b083      	sub	sp, #12
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	f003 031f 	and.w	r3, r3, #31
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	370c      	adds	r7, #12
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr

08003e54 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b083      	sub	sp, #12
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	370c      	adds	r7, #12
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6e:	4770      	bx	lr

08003e70 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b083      	sub	sp, #12
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	689a      	ldr	r2, [r3, #8]
 8003e7c:	4b04      	ldr	r3, [pc, #16]	; (8003e90 <LL_ADC_DisableDeepPowerDown+0x20>)
 8003e7e:	4013      	ands	r3, r2
 8003e80:	687a      	ldr	r2, [r7, #4]
 8003e82:	6093      	str	r3, [r2, #8]
}
 8003e84:	bf00      	nop
 8003e86:	370c      	adds	r7, #12
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8e:	4770      	bx	lr
 8003e90:	5fffffc0 	.word	0x5fffffc0

08003e94 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b083      	sub	sp, #12
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ea4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ea8:	d101      	bne.n	8003eae <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e000      	b.n	8003eb0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003eae:	2300      	movs	r3, #0
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	370c      	adds	r7, #12
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr

08003ebc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b083      	sub	sp, #12
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	689a      	ldr	r2, [r3, #8]
 8003ec8:	4b05      	ldr	r3, [pc, #20]	; (8003ee0 <LL_ADC_EnableInternalRegulator+0x24>)
 8003eca:	4013      	ands	r3, r2
 8003ecc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003ed4:	bf00      	nop
 8003ed6:	370c      	adds	r7, #12
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr
 8003ee0:	6fffffc0 	.word	0x6fffffc0

08003ee4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b083      	sub	sp, #12
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ef4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ef8:	d101      	bne.n	8003efe <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003efa:	2301      	movs	r3, #1
 8003efc:	e000      	b.n	8003f00 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003efe:	2300      	movs	r3, #0
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	370c      	adds	r7, #12
 8003f04:	46bd      	mov	sp, r7
 8003f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0a:	4770      	bx	lr

08003f0c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b083      	sub	sp, #12
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	689a      	ldr	r2, [r3, #8]
 8003f18:	4b05      	ldr	r3, [pc, #20]	; (8003f30 <LL_ADC_Enable+0x24>)
 8003f1a:	4013      	ands	r3, r2
 8003f1c:	f043 0201 	orr.w	r2, r3, #1
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003f24:	bf00      	nop
 8003f26:	370c      	adds	r7, #12
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2e:	4770      	bx	lr
 8003f30:	7fffffc0 	.word	0x7fffffc0

08003f34 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b083      	sub	sp, #12
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	f003 0301 	and.w	r3, r3, #1
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d101      	bne.n	8003f4c <LL_ADC_IsEnabled+0x18>
 8003f48:	2301      	movs	r3, #1
 8003f4a:	e000      	b.n	8003f4e <LL_ADC_IsEnabled+0x1a>
 8003f4c:	2300      	movs	r3, #0
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	370c      	adds	r7, #12
 8003f52:	46bd      	mov	sp, r7
 8003f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f58:	4770      	bx	lr
	...

08003f5c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b083      	sub	sp, #12
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	689a      	ldr	r2, [r3, #8]
 8003f68:	4b05      	ldr	r3, [pc, #20]	; (8003f80 <LL_ADC_REG_StartConversion+0x24>)
 8003f6a:	4013      	ands	r3, r2
 8003f6c:	f043 0204 	orr.w	r2, r3, #4
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003f74:	bf00      	nop
 8003f76:	370c      	adds	r7, #12
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7e:	4770      	bx	lr
 8003f80:	7fffffc0 	.word	0x7fffffc0

08003f84 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b083      	sub	sp, #12
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	f003 0304 	and.w	r3, r3, #4
 8003f94:	2b04      	cmp	r3, #4
 8003f96:	d101      	bne.n	8003f9c <LL_ADC_REG_IsConversionOngoing+0x18>
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e000      	b.n	8003f9e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003f9c:	2300      	movs	r3, #0
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	370c      	adds	r7, #12
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa8:	4770      	bx	lr

08003faa <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003faa:	b480      	push	{r7}
 8003fac:	b083      	sub	sp, #12
 8003fae:	af00      	add	r7, sp, #0
 8003fb0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	f003 0308 	and.w	r3, r3, #8
 8003fba:	2b08      	cmp	r3, #8
 8003fbc:	d101      	bne.n	8003fc2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e000      	b.n	8003fc4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003fc2:	2300      	movs	r3, #0
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	370c      	adds	r7, #12
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fce:	4770      	bx	lr

08003fd0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003fd0:	b590      	push	{r4, r7, lr}
 8003fd2:	b089      	sub	sp, #36	; 0x24
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d101      	bne.n	8003fea <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e18f      	b.n	800430a <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	68db      	ldr	r3, [r3, #12]
 8003fee:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d109      	bne.n	800400c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003ff8:	6878      	ldr	r0, [r7, #4]
 8003ffa:	f7ff f815 	bl	8003028 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2200      	movs	r2, #0
 8004002:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2200      	movs	r2, #0
 8004008:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4618      	mov	r0, r3
 8004012:	f7ff ff3f 	bl	8003e94 <LL_ADC_IsDeepPowerDownEnabled>
 8004016:	4603      	mov	r3, r0
 8004018:	2b00      	cmp	r3, #0
 800401a:	d004      	beq.n	8004026 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4618      	mov	r0, r3
 8004022:	f7ff ff25 	bl	8003e70 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4618      	mov	r0, r3
 800402c:	f7ff ff5a 	bl	8003ee4 <LL_ADC_IsInternalRegulatorEnabled>
 8004030:	4603      	mov	r3, r0
 8004032:	2b00      	cmp	r3, #0
 8004034:	d114      	bne.n	8004060 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4618      	mov	r0, r3
 800403c:	f7ff ff3e 	bl	8003ebc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004040:	4b87      	ldr	r3, [pc, #540]	; (8004260 <HAL_ADC_Init+0x290>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	099b      	lsrs	r3, r3, #6
 8004046:	4a87      	ldr	r2, [pc, #540]	; (8004264 <HAL_ADC_Init+0x294>)
 8004048:	fba2 2303 	umull	r2, r3, r2, r3
 800404c:	099b      	lsrs	r3, r3, #6
 800404e:	3301      	adds	r3, #1
 8004050:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004052:	e002      	b.n	800405a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	3b01      	subs	r3, #1
 8004058:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d1f9      	bne.n	8004054 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4618      	mov	r0, r3
 8004066:	f7ff ff3d 	bl	8003ee4 <LL_ADC_IsInternalRegulatorEnabled>
 800406a:	4603      	mov	r3, r0
 800406c:	2b00      	cmp	r3, #0
 800406e:	d10d      	bne.n	800408c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004074:	f043 0210 	orr.w	r2, r3, #16
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004080:	f043 0201 	orr.w	r2, r3, #1
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4618      	mov	r0, r3
 8004092:	f7ff ff77 	bl	8003f84 <LL_ADC_REG_IsConversionOngoing>
 8004096:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800409c:	f003 0310 	and.w	r3, r3, #16
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	f040 8129 	bne.w	80042f8 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	f040 8125 	bne.w	80042f8 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040b2:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80040b6:	f043 0202 	orr.w	r2, r3, #2
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4618      	mov	r0, r3
 80040c4:	f7ff ff36 	bl	8003f34 <LL_ADC_IsEnabled>
 80040c8:	4603      	mov	r3, r0
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d136      	bne.n	800413c <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a65      	ldr	r2, [pc, #404]	; (8004268 <HAL_ADC_Init+0x298>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d004      	beq.n	80040e2 <HAL_ADC_Init+0x112>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a63      	ldr	r2, [pc, #396]	; (800426c <HAL_ADC_Init+0x29c>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d10e      	bne.n	8004100 <HAL_ADC_Init+0x130>
 80040e2:	4861      	ldr	r0, [pc, #388]	; (8004268 <HAL_ADC_Init+0x298>)
 80040e4:	f7ff ff26 	bl	8003f34 <LL_ADC_IsEnabled>
 80040e8:	4604      	mov	r4, r0
 80040ea:	4860      	ldr	r0, [pc, #384]	; (800426c <HAL_ADC_Init+0x29c>)
 80040ec:	f7ff ff22 	bl	8003f34 <LL_ADC_IsEnabled>
 80040f0:	4603      	mov	r3, r0
 80040f2:	4323      	orrs	r3, r4
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	bf0c      	ite	eq
 80040f8:	2301      	moveq	r3, #1
 80040fa:	2300      	movne	r3, #0
 80040fc:	b2db      	uxtb	r3, r3
 80040fe:	e008      	b.n	8004112 <HAL_ADC_Init+0x142>
 8004100:	485b      	ldr	r0, [pc, #364]	; (8004270 <HAL_ADC_Init+0x2a0>)
 8004102:	f7ff ff17 	bl	8003f34 <LL_ADC_IsEnabled>
 8004106:	4603      	mov	r3, r0
 8004108:	2b00      	cmp	r3, #0
 800410a:	bf0c      	ite	eq
 800410c:	2301      	moveq	r3, #1
 800410e:	2300      	movne	r3, #0
 8004110:	b2db      	uxtb	r3, r3
 8004112:	2b00      	cmp	r3, #0
 8004114:	d012      	beq.n	800413c <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a53      	ldr	r2, [pc, #332]	; (8004268 <HAL_ADC_Init+0x298>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d004      	beq.n	800412a <HAL_ADC_Init+0x15a>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a51      	ldr	r2, [pc, #324]	; (800426c <HAL_ADC_Init+0x29c>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d101      	bne.n	800412e <HAL_ADC_Init+0x15e>
 800412a:	4a52      	ldr	r2, [pc, #328]	; (8004274 <HAL_ADC_Init+0x2a4>)
 800412c:	e000      	b.n	8004130 <HAL_ADC_Init+0x160>
 800412e:	4a52      	ldr	r2, [pc, #328]	; (8004278 <HAL_ADC_Init+0x2a8>)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	4619      	mov	r1, r3
 8004136:	4610      	mov	r0, r2
 8004138:	f7ff fd68 	bl	8003c0c <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 800413c:	f7ff fd5a 	bl	8003bf4 <HAL_GetREVID>
 8004140:	4603      	mov	r3, r0
 8004142:	f241 0203 	movw	r2, #4099	; 0x1003
 8004146:	4293      	cmp	r3, r2
 8004148:	d914      	bls.n	8004174 <HAL_ADC_Init+0x1a4>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	2b10      	cmp	r3, #16
 8004150:	d110      	bne.n	8004174 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	7d5b      	ldrb	r3, [r3, #21]
 8004156:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800415c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8004162:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	7f1b      	ldrb	r3, [r3, #28]
 8004168:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800416a:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800416c:	f043 030c 	orr.w	r3, r3, #12
 8004170:	61bb      	str	r3, [r7, #24]
 8004172:	e00d      	b.n	8004190 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	7d5b      	ldrb	r3, [r3, #21]
 8004178:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800417e:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8004184:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	7f1b      	ldrb	r3, [r3, #28]
 800418a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800418c:	4313      	orrs	r3, r2
 800418e:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	7f1b      	ldrb	r3, [r3, #28]
 8004194:	2b01      	cmp	r3, #1
 8004196:	d106      	bne.n	80041a6 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6a1b      	ldr	r3, [r3, #32]
 800419c:	3b01      	subs	r3, #1
 800419e:	045b      	lsls	r3, r3, #17
 80041a0:	69ba      	ldr	r2, [r7, #24]
 80041a2:	4313      	orrs	r3, r2
 80041a4:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d009      	beq.n	80041c2 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b2:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ba:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80041bc:	69ba      	ldr	r2, [r7, #24]
 80041be:	4313      	orrs	r3, r2
 80041c0:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	68da      	ldr	r2, [r3, #12]
 80041c8:	4b2c      	ldr	r3, [pc, #176]	; (800427c <HAL_ADC_Init+0x2ac>)
 80041ca:	4013      	ands	r3, r2
 80041cc:	687a      	ldr	r2, [r7, #4]
 80041ce:	6812      	ldr	r2, [r2, #0]
 80041d0:	69b9      	ldr	r1, [r7, #24]
 80041d2:	430b      	orrs	r3, r1
 80041d4:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4618      	mov	r0, r3
 80041dc:	f7ff fed2 	bl	8003f84 <LL_ADC_REG_IsConversionOngoing>
 80041e0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4618      	mov	r0, r3
 80041e8:	f7ff fedf 	bl	8003faa <LL_ADC_INJ_IsConversionOngoing>
 80041ec:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d15f      	bne.n	80042b4 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d15c      	bne.n	80042b4 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	7d1b      	ldrb	r3, [r3, #20]
 80041fe:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8004204:	4313      	orrs	r3, r2
 8004206:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	68da      	ldr	r2, [r3, #12]
 800420e:	4b1c      	ldr	r3, [pc, #112]	; (8004280 <HAL_ADC_Init+0x2b0>)
 8004210:	4013      	ands	r3, r2
 8004212:	687a      	ldr	r2, [r7, #4]
 8004214:	6812      	ldr	r2, [r2, #0]
 8004216:	69b9      	ldr	r1, [r7, #24]
 8004218:	430b      	orrs	r3, r1
 800421a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004222:	2b01      	cmp	r3, #1
 8004224:	d130      	bne.n	8004288 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800422a:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	691a      	ldr	r2, [r3, #16]
 8004232:	4b14      	ldr	r3, [pc, #80]	; (8004284 <HAL_ADC_Init+0x2b4>)
 8004234:	4013      	ands	r3, r2
 8004236:	687a      	ldr	r2, [r7, #4]
 8004238:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800423a:	3a01      	subs	r2, #1
 800423c:	0411      	lsls	r1, r2, #16
 800423e:	687a      	ldr	r2, [r7, #4]
 8004240:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004242:	4311      	orrs	r1, r2
 8004244:	687a      	ldr	r2, [r7, #4]
 8004246:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004248:	4311      	orrs	r1, r2
 800424a:	687a      	ldr	r2, [r7, #4]
 800424c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800424e:	430a      	orrs	r2, r1
 8004250:	431a      	orrs	r2, r3
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f042 0201 	orr.w	r2, r2, #1
 800425a:	611a      	str	r2, [r3, #16]
 800425c:	e01c      	b.n	8004298 <HAL_ADC_Init+0x2c8>
 800425e:	bf00      	nop
 8004260:	24000000 	.word	0x24000000
 8004264:	053e2d63 	.word	0x053e2d63
 8004268:	40022000 	.word	0x40022000
 800426c:	40022100 	.word	0x40022100
 8004270:	58026000 	.word	0x58026000
 8004274:	40022300 	.word	0x40022300
 8004278:	58026300 	.word	0x58026300
 800427c:	fff0c003 	.word	0xfff0c003
 8004280:	ffffbffc 	.word	0xffffbffc
 8004284:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	691a      	ldr	r2, [r3, #16]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f022 0201 	bic.w	r2, r2, #1
 8004296:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	691b      	ldr	r3, [r3, #16]
 800429e:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	430a      	orrs	r2, r1
 80042ac:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f000 fdd6 	bl	8004e60 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	68db      	ldr	r3, [r3, #12]
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d10c      	bne.n	80042d6 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042c2:	f023 010f 	bic.w	r1, r3, #15
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	699b      	ldr	r3, [r3, #24]
 80042ca:	1e5a      	subs	r2, r3, #1
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	430a      	orrs	r2, r1
 80042d2:	631a      	str	r2, [r3, #48]	; 0x30
 80042d4:	e007      	b.n	80042e6 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f022 020f 	bic.w	r2, r2, #15
 80042e4:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042ea:	f023 0303 	bic.w	r3, r3, #3
 80042ee:	f043 0201 	orr.w	r2, r3, #1
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	655a      	str	r2, [r3, #84]	; 0x54
 80042f6:	e007      	b.n	8004308 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042fc:	f043 0210 	orr.w	r2, r3, #16
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004304:	2301      	movs	r3, #1
 8004306:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004308:	7ffb      	ldrb	r3, [r7, #31]
}
 800430a:	4618      	mov	r0, r3
 800430c:	3724      	adds	r7, #36	; 0x24
 800430e:	46bd      	mov	sp, r7
 8004310:	bd90      	pop	{r4, r7, pc}
 8004312:	bf00      	nop

08004314 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b086      	sub	sp, #24
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a5c      	ldr	r2, [pc, #368]	; (8004494 <HAL_ADC_Start+0x180>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d004      	beq.n	8004330 <HAL_ADC_Start+0x1c>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a5b      	ldr	r2, [pc, #364]	; (8004498 <HAL_ADC_Start+0x184>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d101      	bne.n	8004334 <HAL_ADC_Start+0x20>
 8004330:	4b5a      	ldr	r3, [pc, #360]	; (800449c <HAL_ADC_Start+0x188>)
 8004332:	e000      	b.n	8004336 <HAL_ADC_Start+0x22>
 8004334:	4b5a      	ldr	r3, [pc, #360]	; (80044a0 <HAL_ADC_Start+0x18c>)
 8004336:	4618      	mov	r0, r3
 8004338:	f7ff fd7e 	bl	8003e38 <LL_ADC_GetMultimode>
 800433c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4618      	mov	r0, r3
 8004344:	f7ff fe1e 	bl	8003f84 <LL_ADC_REG_IsConversionOngoing>
 8004348:	4603      	mov	r3, r0
 800434a:	2b00      	cmp	r3, #0
 800434c:	f040 809a 	bne.w	8004484 <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004356:	2b01      	cmp	r3, #1
 8004358:	d101      	bne.n	800435e <HAL_ADC_Start+0x4a>
 800435a:	2302      	movs	r3, #2
 800435c:	e095      	b.n	800448a <HAL_ADC_Start+0x176>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2201      	movs	r2, #1
 8004362:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f000 fcf0 	bl	8004d4c <ADC_Enable>
 800436c:	4603      	mov	r3, r0
 800436e:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004370:	7dfb      	ldrb	r3, [r7, #23]
 8004372:	2b00      	cmp	r3, #0
 8004374:	f040 8081 	bne.w	800447a <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800437c:	4b49      	ldr	r3, [pc, #292]	; (80044a4 <HAL_ADC_Start+0x190>)
 800437e:	4013      	ands	r3, r2
 8004380:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a42      	ldr	r2, [pc, #264]	; (8004498 <HAL_ADC_Start+0x184>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d002      	beq.n	8004398 <HAL_ADC_Start+0x84>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	e000      	b.n	800439a <HAL_ADC_Start+0x86>
 8004398:	4b3e      	ldr	r3, [pc, #248]	; (8004494 <HAL_ADC_Start+0x180>)
 800439a:	687a      	ldr	r2, [r7, #4]
 800439c:	6812      	ldr	r2, [r2, #0]
 800439e:	4293      	cmp	r3, r2
 80043a0:	d002      	beq.n	80043a8 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d105      	bne.n	80043b4 <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043ac:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80043bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043c0:	d106      	bne.n	80043d0 <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043c6:	f023 0206 	bic.w	r2, r3, #6
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	659a      	str	r2, [r3, #88]	; 0x58
 80043ce:	e002      	b.n	80043d6 <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2200      	movs	r2, #0
 80043d4:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	221c      	movs	r2, #28
 80043dc:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2200      	movs	r2, #0
 80043e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a2b      	ldr	r2, [pc, #172]	; (8004498 <HAL_ADC_Start+0x184>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d002      	beq.n	80043f6 <HAL_ADC_Start+0xe2>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	e000      	b.n	80043f8 <HAL_ADC_Start+0xe4>
 80043f6:	4b27      	ldr	r3, [pc, #156]	; (8004494 <HAL_ADC_Start+0x180>)
 80043f8:	687a      	ldr	r2, [r7, #4]
 80043fa:	6812      	ldr	r2, [r2, #0]
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d008      	beq.n	8004412 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d005      	beq.n	8004412 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	2b05      	cmp	r3, #5
 800440a:	d002      	beq.n	8004412 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	2b09      	cmp	r3, #9
 8004410:	d114      	bne.n	800443c <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800441c:	2b00      	cmp	r3, #0
 800441e:	d007      	beq.n	8004430 <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004424:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004428:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4618      	mov	r0, r3
 8004436:	f7ff fd91 	bl	8003f5c <LL_ADC_REG_StartConversion>
 800443a:	e025      	b.n	8004488 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004440:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a12      	ldr	r2, [pc, #72]	; (8004498 <HAL_ADC_Start+0x184>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d002      	beq.n	8004458 <HAL_ADC_Start+0x144>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	e000      	b.n	800445a <HAL_ADC_Start+0x146>
 8004458:	4b0e      	ldr	r3, [pc, #56]	; (8004494 <HAL_ADC_Start+0x180>)
 800445a:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	68db      	ldr	r3, [r3, #12]
 8004460:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004464:	2b00      	cmp	r3, #0
 8004466:	d00f      	beq.n	8004488 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800446c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004470:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	655a      	str	r2, [r3, #84]	; 0x54
 8004478:	e006      	b.n	8004488 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2200      	movs	r2, #0
 800447e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8004482:	e001      	b.n	8004488 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004484:	2302      	movs	r3, #2
 8004486:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004488:	7dfb      	ldrb	r3, [r7, #23]
}
 800448a:	4618      	mov	r0, r3
 800448c:	3718      	adds	r7, #24
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}
 8004492:	bf00      	nop
 8004494:	40022000 	.word	0x40022000
 8004498:	40022100 	.word	0x40022100
 800449c:	40022300 	.word	0x40022300
 80044a0:	58026300 	.word	0x58026300
 80044a4:	fffff0fe 	.word	0xfffff0fe

080044a8 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b088      	sub	sp, #32
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
 80044b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a72      	ldr	r2, [pc, #456]	; (8004680 <HAL_ADC_PollForConversion+0x1d8>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d004      	beq.n	80044c6 <HAL_ADC_PollForConversion+0x1e>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a70      	ldr	r2, [pc, #448]	; (8004684 <HAL_ADC_PollForConversion+0x1dc>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d101      	bne.n	80044ca <HAL_ADC_PollForConversion+0x22>
 80044c6:	4b70      	ldr	r3, [pc, #448]	; (8004688 <HAL_ADC_PollForConversion+0x1e0>)
 80044c8:	e000      	b.n	80044cc <HAL_ADC_PollForConversion+0x24>
 80044ca:	4b70      	ldr	r3, [pc, #448]	; (800468c <HAL_ADC_PollForConversion+0x1e4>)
 80044cc:	4618      	mov	r0, r3
 80044ce:	f7ff fcb3 	bl	8003e38 <LL_ADC_GetMultimode>
 80044d2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	691b      	ldr	r3, [r3, #16]
 80044d8:	2b08      	cmp	r3, #8
 80044da:	d102      	bne.n	80044e2 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80044dc:	2308      	movs	r3, #8
 80044de:	61fb      	str	r3, [r7, #28]
 80044e0:	e037      	b.n	8004552 <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d005      	beq.n	80044f4 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	2b05      	cmp	r3, #5
 80044ec:	d002      	beq.n	80044f4 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	2b09      	cmp	r3, #9
 80044f2:	d111      	bne.n	8004518 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	68db      	ldr	r3, [r3, #12]
 80044fa:	f003 0301 	and.w	r3, r3, #1
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d007      	beq.n	8004512 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004506:	f043 0220 	orr.w	r2, r3, #32
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	e0b1      	b.n	8004676 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8004512:	2304      	movs	r3, #4
 8004514:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8004516:	e01c      	b.n	8004552 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a58      	ldr	r2, [pc, #352]	; (8004680 <HAL_ADC_PollForConversion+0x1d8>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d004      	beq.n	800452c <HAL_ADC_PollForConversion+0x84>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a57      	ldr	r2, [pc, #348]	; (8004684 <HAL_ADC_PollForConversion+0x1dc>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d101      	bne.n	8004530 <HAL_ADC_PollForConversion+0x88>
 800452c:	4b56      	ldr	r3, [pc, #344]	; (8004688 <HAL_ADC_PollForConversion+0x1e0>)
 800452e:	e000      	b.n	8004532 <HAL_ADC_PollForConversion+0x8a>
 8004530:	4b56      	ldr	r3, [pc, #344]	; (800468c <HAL_ADC_PollForConversion+0x1e4>)
 8004532:	4618      	mov	r0, r3
 8004534:	f7ff fc8e 	bl	8003e54 <LL_ADC_GetMultiDMATransfer>
 8004538:	4603      	mov	r3, r0
 800453a:	2b00      	cmp	r3, #0
 800453c:	d007      	beq.n	800454e <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004542:	f043 0220 	orr.w	r2, r3, #32
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	e093      	b.n	8004676 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800454e:	2304      	movs	r3, #4
 8004550:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8004552:	f7ff fb1f 	bl	8003b94 <HAL_GetTick>
 8004556:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8004558:	e021      	b.n	800459e <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004560:	d01d      	beq.n	800459e <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8004562:	f7ff fb17 	bl	8003b94 <HAL_GetTick>
 8004566:	4602      	mov	r2, r0
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	1ad3      	subs	r3, r2, r3
 800456c:	683a      	ldr	r2, [r7, #0]
 800456e:	429a      	cmp	r2, r3
 8004570:	d302      	bcc.n	8004578 <HAL_ADC_PollForConversion+0xd0>
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d112      	bne.n	800459e <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	681a      	ldr	r2, [r3, #0]
 800457e:	69fb      	ldr	r3, [r7, #28]
 8004580:	4013      	ands	r3, r2
 8004582:	2b00      	cmp	r3, #0
 8004584:	d10b      	bne.n	800459e <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800458a:	f043 0204 	orr.w	r2, r3, #4
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2200      	movs	r2, #0
 8004596:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 800459a:	2303      	movs	r3, #3
 800459c:	e06b      	b.n	8004676 <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	681a      	ldr	r2, [r3, #0]
 80045a4:	69fb      	ldr	r3, [r7, #28]
 80045a6:	4013      	ands	r3, r2
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d0d6      	beq.n	800455a <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045b0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4618      	mov	r0, r3
 80045be:	f7ff fbad 	bl	8003d1c <LL_ADC_REG_IsTriggerSourceSWStart>
 80045c2:	4603      	mov	r3, r0
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d01c      	beq.n	8004602 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	7d5b      	ldrb	r3, [r3, #21]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d118      	bne.n	8004602 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f003 0308 	and.w	r3, r3, #8
 80045da:	2b08      	cmp	r3, #8
 80045dc:	d111      	bne.n	8004602 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d105      	bne.n	8004602 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045fa:	f043 0201 	orr.w	r2, r3, #1
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a1f      	ldr	r2, [pc, #124]	; (8004684 <HAL_ADC_PollForConversion+0x1dc>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d002      	beq.n	8004612 <HAL_ADC_PollForConversion+0x16a>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	e000      	b.n	8004614 <HAL_ADC_PollForConversion+0x16c>
 8004612:	4b1b      	ldr	r3, [pc, #108]	; (8004680 <HAL_ADC_PollForConversion+0x1d8>)
 8004614:	687a      	ldr	r2, [r7, #4]
 8004616:	6812      	ldr	r2, [r2, #0]
 8004618:	4293      	cmp	r3, r2
 800461a:	d008      	beq.n	800462e <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d005      	beq.n	800462e <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	2b05      	cmp	r3, #5
 8004626:	d002      	beq.n	800462e <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	2b09      	cmp	r3, #9
 800462c:	d104      	bne.n	8004638 <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	68db      	ldr	r3, [r3, #12]
 8004634:	61bb      	str	r3, [r7, #24]
 8004636:	e00c      	b.n	8004652 <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a11      	ldr	r2, [pc, #68]	; (8004684 <HAL_ADC_PollForConversion+0x1dc>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d002      	beq.n	8004648 <HAL_ADC_PollForConversion+0x1a0>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	e000      	b.n	800464a <HAL_ADC_PollForConversion+0x1a2>
 8004648:	4b0d      	ldr	r3, [pc, #52]	; (8004680 <HAL_ADC_PollForConversion+0x1d8>)
 800464a:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	68db      	ldr	r3, [r3, #12]
 8004650:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8004652:	69fb      	ldr	r3, [r7, #28]
 8004654:	2b08      	cmp	r3, #8
 8004656:	d104      	bne.n	8004662 <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	2208      	movs	r2, #8
 800465e:	601a      	str	r2, [r3, #0]
 8004660:	e008      	b.n	8004674 <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8004662:	69bb      	ldr	r3, [r7, #24]
 8004664:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004668:	2b00      	cmp	r3, #0
 800466a:	d103      	bne.n	8004674 <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	220c      	movs	r2, #12
 8004672:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8004674:	2300      	movs	r3, #0
}
 8004676:	4618      	mov	r0, r3
 8004678:	3720      	adds	r7, #32
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}
 800467e:	bf00      	nop
 8004680:	40022000 	.word	0x40022000
 8004684:	40022100 	.word	0x40022100
 8004688:	40022300 	.word	0x40022300
 800468c:	58026300 	.word	0x58026300

08004690 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8004690:	b480      	push	{r7}
 8004692:	b083      	sub	sp, #12
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800469e:	4618      	mov	r0, r3
 80046a0:	370c      	adds	r7, #12
 80046a2:	46bd      	mov	sp, r7
 80046a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a8:	4770      	bx	lr
	...

080046ac <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80046ac:	b590      	push	{r4, r7, lr}
 80046ae:	b0a1      	sub	sp, #132	; 0x84
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
 80046b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80046b6:	2300      	movs	r3, #0
 80046b8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80046bc:	2300      	movs	r3, #0
 80046be:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	68db      	ldr	r3, [r3, #12]
 80046c4:	4a9d      	ldr	r2, [pc, #628]	; (800493c <HAL_ADC_ConfigChannel+0x290>)
 80046c6:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80046ce:	2b01      	cmp	r3, #1
 80046d0:	d101      	bne.n	80046d6 <HAL_ADC_ConfigChannel+0x2a>
 80046d2:	2302      	movs	r3, #2
 80046d4:	e321      	b.n	8004d1a <HAL_ADC_ConfigChannel+0x66e>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2201      	movs	r2, #1
 80046da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4618      	mov	r0, r3
 80046e4:	f7ff fc4e 	bl	8003f84 <LL_ADC_REG_IsConversionOngoing>
 80046e8:	4603      	mov	r3, r0
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	f040 8306 	bne.w	8004cfc <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d108      	bne.n	800470e <HAL_ADC_ConfigChannel+0x62>
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	0e9b      	lsrs	r3, r3, #26
 8004702:	f003 031f 	and.w	r3, r3, #31
 8004706:	2201      	movs	r2, #1
 8004708:	fa02 f303 	lsl.w	r3, r2, r3
 800470c:	e016      	b.n	800473c <HAL_ADC_ConfigChannel+0x90>
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004714:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004716:	fa93 f3a3 	rbit	r3, r3
 800471a:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800471c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800471e:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004720:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004722:	2b00      	cmp	r3, #0
 8004724:	d101      	bne.n	800472a <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8004726:	2320      	movs	r3, #32
 8004728:	e003      	b.n	8004732 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 800472a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800472c:	fab3 f383 	clz	r3, r3
 8004730:	b2db      	uxtb	r3, r3
 8004732:	f003 031f 	and.w	r3, r3, #31
 8004736:	2201      	movs	r2, #1
 8004738:	fa02 f303 	lsl.w	r3, r2, r3
 800473c:	687a      	ldr	r2, [r7, #4]
 800473e:	6812      	ldr	r2, [r2, #0]
 8004740:	69d1      	ldr	r1, [r2, #28]
 8004742:	687a      	ldr	r2, [r7, #4]
 8004744:	6812      	ldr	r2, [r2, #0]
 8004746:	430b      	orrs	r3, r1
 8004748:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6818      	ldr	r0, [r3, #0]
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	6859      	ldr	r1, [r3, #4]
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	461a      	mov	r2, r3
 8004758:	f7ff faf3 	bl	8003d42 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4618      	mov	r0, r3
 8004762:	f7ff fc0f 	bl	8003f84 <LL_ADC_REG_IsConversionOngoing>
 8004766:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4618      	mov	r0, r3
 800476e:	f7ff fc1c 	bl	8003faa <LL_ADC_INJ_IsConversionOngoing>
 8004772:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004774:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004776:	2b00      	cmp	r3, #0
 8004778:	f040 80b3 	bne.w	80048e2 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800477c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800477e:	2b00      	cmp	r3, #0
 8004780:	f040 80af 	bne.w	80048e2 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6818      	ldr	r0, [r3, #0]
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	6819      	ldr	r1, [r3, #0]
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	461a      	mov	r2, r3
 8004792:	f7ff fb02 	bl	8003d9a <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004796:	4b6a      	ldr	r3, [pc, #424]	; (8004940 <HAL_ADC_ConfigChannel+0x294>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800479e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80047a2:	d10b      	bne.n	80047bc <HAL_ADC_ConfigChannel+0x110>
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	695a      	ldr	r2, [r3, #20]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	68db      	ldr	r3, [r3, #12]
 80047ae:	089b      	lsrs	r3, r3, #2
 80047b0:	f003 0307 	and.w	r3, r3, #7
 80047b4:	005b      	lsls	r3, r3, #1
 80047b6:	fa02 f303 	lsl.w	r3, r2, r3
 80047ba:	e01d      	b.n	80047f8 <HAL_ADC_ConfigChannel+0x14c>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	68db      	ldr	r3, [r3, #12]
 80047c2:	f003 0310 	and.w	r3, r3, #16
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d10b      	bne.n	80047e2 <HAL_ADC_ConfigChannel+0x136>
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	695a      	ldr	r2, [r3, #20]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	68db      	ldr	r3, [r3, #12]
 80047d4:	089b      	lsrs	r3, r3, #2
 80047d6:	f003 0307 	and.w	r3, r3, #7
 80047da:	005b      	lsls	r3, r3, #1
 80047dc:	fa02 f303 	lsl.w	r3, r2, r3
 80047e0:	e00a      	b.n	80047f8 <HAL_ADC_ConfigChannel+0x14c>
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	695a      	ldr	r2, [r3, #20]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	68db      	ldr	r3, [r3, #12]
 80047ec:	089b      	lsrs	r3, r3, #2
 80047ee:	f003 0304 	and.w	r3, r3, #4
 80047f2:	005b      	lsls	r3, r3, #1
 80047f4:	fa02 f303 	lsl.w	r3, r2, r3
 80047f8:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	691b      	ldr	r3, [r3, #16]
 80047fe:	2b04      	cmp	r3, #4
 8004800:	d027      	beq.n	8004852 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6818      	ldr	r0, [r3, #0]
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	6919      	ldr	r1, [r3, #16]
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004810:	f7ff fa30 	bl	8003c74 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6818      	ldr	r0, [r3, #0]
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	6919      	ldr	r1, [r3, #16]
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	7e5b      	ldrb	r3, [r3, #25]
 8004820:	2b01      	cmp	r3, #1
 8004822:	d102      	bne.n	800482a <HAL_ADC_ConfigChannel+0x17e>
 8004824:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004828:	e000      	b.n	800482c <HAL_ADC_ConfigChannel+0x180>
 800482a:	2300      	movs	r3, #0
 800482c:	461a      	mov	r2, r3
 800482e:	f7ff fa5a 	bl	8003ce6 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6818      	ldr	r0, [r3, #0]
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	6919      	ldr	r1, [r3, #16]
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	7e1b      	ldrb	r3, [r3, #24]
 800483e:	2b01      	cmp	r3, #1
 8004840:	d102      	bne.n	8004848 <HAL_ADC_ConfigChannel+0x19c>
 8004842:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004846:	e000      	b.n	800484a <HAL_ADC_ConfigChannel+0x19e>
 8004848:	2300      	movs	r3, #0
 800484a:	461a      	mov	r2, r3
 800484c:	f7ff fa32 	bl	8003cb4 <LL_ADC_SetDataRightShift>
 8004850:	e047      	b.n	80048e2 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004858:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	069b      	lsls	r3, r3, #26
 8004862:	429a      	cmp	r2, r3
 8004864:	d107      	bne.n	8004876 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004874:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800487c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	069b      	lsls	r3, r3, #26
 8004886:	429a      	cmp	r2, r3
 8004888:	d107      	bne.n	800489a <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004898:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80048a0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	069b      	lsls	r3, r3, #26
 80048aa:	429a      	cmp	r2, r3
 80048ac:	d107      	bne.n	80048be <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80048bc:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048c4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	069b      	lsls	r3, r3, #26
 80048ce:	429a      	cmp	r2, r3
 80048d0:	d107      	bne.n	80048e2 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80048e0:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4618      	mov	r0, r3
 80048e8:	f7ff fb24 	bl	8003f34 <LL_ADC_IsEnabled>
 80048ec:	4603      	mov	r3, r0
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	f040 820d 	bne.w	8004d0e <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6818      	ldr	r0, [r3, #0]
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	6819      	ldr	r1, [r3, #0]
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	68db      	ldr	r3, [r3, #12]
 8004900:	461a      	mov	r2, r3
 8004902:	f7ff fa75 	bl	8003df0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	68db      	ldr	r3, [r3, #12]
 800490a:	4a0c      	ldr	r2, [pc, #48]	; (800493c <HAL_ADC_ConfigChannel+0x290>)
 800490c:	4293      	cmp	r3, r2
 800490e:	f040 8133 	bne.w	8004b78 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800491e:	2b00      	cmp	r3, #0
 8004920:	d110      	bne.n	8004944 <HAL_ADC_ConfigChannel+0x298>
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	0e9b      	lsrs	r3, r3, #26
 8004928:	3301      	adds	r3, #1
 800492a:	f003 031f 	and.w	r3, r3, #31
 800492e:	2b09      	cmp	r3, #9
 8004930:	bf94      	ite	ls
 8004932:	2301      	movls	r3, #1
 8004934:	2300      	movhi	r3, #0
 8004936:	b2db      	uxtb	r3, r3
 8004938:	e01e      	b.n	8004978 <HAL_ADC_ConfigChannel+0x2cc>
 800493a:	bf00      	nop
 800493c:	47ff0000 	.word	0x47ff0000
 8004940:	5c001000 	.word	0x5c001000
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800494a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800494c:	fa93 f3a3 	rbit	r3, r3
 8004950:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8004952:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004954:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8004956:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004958:	2b00      	cmp	r3, #0
 800495a:	d101      	bne.n	8004960 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 800495c:	2320      	movs	r3, #32
 800495e:	e003      	b.n	8004968 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8004960:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004962:	fab3 f383 	clz	r3, r3
 8004966:	b2db      	uxtb	r3, r3
 8004968:	3301      	adds	r3, #1
 800496a:	f003 031f 	and.w	r3, r3, #31
 800496e:	2b09      	cmp	r3, #9
 8004970:	bf94      	ite	ls
 8004972:	2301      	movls	r3, #1
 8004974:	2300      	movhi	r3, #0
 8004976:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004978:	2b00      	cmp	r3, #0
 800497a:	d079      	beq.n	8004a70 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004984:	2b00      	cmp	r3, #0
 8004986:	d107      	bne.n	8004998 <HAL_ADC_ConfigChannel+0x2ec>
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	0e9b      	lsrs	r3, r3, #26
 800498e:	3301      	adds	r3, #1
 8004990:	069b      	lsls	r3, r3, #26
 8004992:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004996:	e015      	b.n	80049c4 <HAL_ADC_ConfigChannel+0x318>
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800499e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049a0:	fa93 f3a3 	rbit	r3, r3
 80049a4:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80049a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049a8:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80049aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d101      	bne.n	80049b4 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 80049b0:	2320      	movs	r3, #32
 80049b2:	e003      	b.n	80049bc <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80049b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049b6:	fab3 f383 	clz	r3, r3
 80049ba:	b2db      	uxtb	r3, r3
 80049bc:	3301      	adds	r3, #1
 80049be:	069b      	lsls	r3, r3, #26
 80049c0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d109      	bne.n	80049e4 <HAL_ADC_ConfigChannel+0x338>
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	0e9b      	lsrs	r3, r3, #26
 80049d6:	3301      	adds	r3, #1
 80049d8:	f003 031f 	and.w	r3, r3, #31
 80049dc:	2101      	movs	r1, #1
 80049de:	fa01 f303 	lsl.w	r3, r1, r3
 80049e2:	e017      	b.n	8004a14 <HAL_ADC_ConfigChannel+0x368>
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049ec:	fa93 f3a3 	rbit	r3, r3
 80049f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80049f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049f4:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80049f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d101      	bne.n	8004a00 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 80049fc:	2320      	movs	r3, #32
 80049fe:	e003      	b.n	8004a08 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8004a00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a02:	fab3 f383 	clz	r3, r3
 8004a06:	b2db      	uxtb	r3, r3
 8004a08:	3301      	adds	r3, #1
 8004a0a:	f003 031f 	and.w	r3, r3, #31
 8004a0e:	2101      	movs	r1, #1
 8004a10:	fa01 f303 	lsl.w	r3, r1, r3
 8004a14:	ea42 0103 	orr.w	r1, r2, r3
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d10a      	bne.n	8004a3a <HAL_ADC_ConfigChannel+0x38e>
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	0e9b      	lsrs	r3, r3, #26
 8004a2a:	3301      	adds	r3, #1
 8004a2c:	f003 021f 	and.w	r2, r3, #31
 8004a30:	4613      	mov	r3, r2
 8004a32:	005b      	lsls	r3, r3, #1
 8004a34:	4413      	add	r3, r2
 8004a36:	051b      	lsls	r3, r3, #20
 8004a38:	e018      	b.n	8004a6c <HAL_ADC_ConfigChannel+0x3c0>
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a42:	fa93 f3a3 	rbit	r3, r3
 8004a46:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8004a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a4a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8004a4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d101      	bne.n	8004a56 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8004a52:	2320      	movs	r3, #32
 8004a54:	e003      	b.n	8004a5e <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8004a56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a58:	fab3 f383 	clz	r3, r3
 8004a5c:	b2db      	uxtb	r3, r3
 8004a5e:	3301      	adds	r3, #1
 8004a60:	f003 021f 	and.w	r2, r3, #31
 8004a64:	4613      	mov	r3, r2
 8004a66:	005b      	lsls	r3, r3, #1
 8004a68:	4413      	add	r3, r2
 8004a6a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004a6c:	430b      	orrs	r3, r1
 8004a6e:	e07e      	b.n	8004b6e <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d107      	bne.n	8004a8c <HAL_ADC_ConfigChannel+0x3e0>
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	0e9b      	lsrs	r3, r3, #26
 8004a82:	3301      	adds	r3, #1
 8004a84:	069b      	lsls	r3, r3, #26
 8004a86:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004a8a:	e015      	b.n	8004ab8 <HAL_ADC_ConfigChannel+0x40c>
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a94:	fa93 f3a3 	rbit	r3, r3
 8004a98:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8004a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8004a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d101      	bne.n	8004aa8 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8004aa4:	2320      	movs	r3, #32
 8004aa6:	e003      	b.n	8004ab0 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8004aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aaa:	fab3 f383 	clz	r3, r3
 8004aae:	b2db      	uxtb	r3, r3
 8004ab0:	3301      	adds	r3, #1
 8004ab2:	069b      	lsls	r3, r3, #26
 8004ab4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d109      	bne.n	8004ad8 <HAL_ADC_ConfigChannel+0x42c>
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	0e9b      	lsrs	r3, r3, #26
 8004aca:	3301      	adds	r3, #1
 8004acc:	f003 031f 	and.w	r3, r3, #31
 8004ad0:	2101      	movs	r1, #1
 8004ad2:	fa01 f303 	lsl.w	r3, r1, r3
 8004ad6:	e017      	b.n	8004b08 <HAL_ADC_ConfigChannel+0x45c>
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ade:	69fb      	ldr	r3, [r7, #28]
 8004ae0:	fa93 f3a3 	rbit	r3, r3
 8004ae4:	61bb      	str	r3, [r7, #24]
  return result;
 8004ae6:	69bb      	ldr	r3, [r7, #24]
 8004ae8:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004aea:	6a3b      	ldr	r3, [r7, #32]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d101      	bne.n	8004af4 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8004af0:	2320      	movs	r3, #32
 8004af2:	e003      	b.n	8004afc <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8004af4:	6a3b      	ldr	r3, [r7, #32]
 8004af6:	fab3 f383 	clz	r3, r3
 8004afa:	b2db      	uxtb	r3, r3
 8004afc:	3301      	adds	r3, #1
 8004afe:	f003 031f 	and.w	r3, r3, #31
 8004b02:	2101      	movs	r1, #1
 8004b04:	fa01 f303 	lsl.w	r3, r1, r3
 8004b08:	ea42 0103 	orr.w	r1, r2, r3
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d10d      	bne.n	8004b34 <HAL_ADC_ConfigChannel+0x488>
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	0e9b      	lsrs	r3, r3, #26
 8004b1e:	3301      	adds	r3, #1
 8004b20:	f003 021f 	and.w	r2, r3, #31
 8004b24:	4613      	mov	r3, r2
 8004b26:	005b      	lsls	r3, r3, #1
 8004b28:	4413      	add	r3, r2
 8004b2a:	3b1e      	subs	r3, #30
 8004b2c:	051b      	lsls	r3, r3, #20
 8004b2e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004b32:	e01b      	b.n	8004b6c <HAL_ADC_ConfigChannel+0x4c0>
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	fa93 f3a3 	rbit	r3, r3
 8004b40:	60fb      	str	r3, [r7, #12]
  return result;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d101      	bne.n	8004b50 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8004b4c:	2320      	movs	r3, #32
 8004b4e:	e003      	b.n	8004b58 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	fab3 f383 	clz	r3, r3
 8004b56:	b2db      	uxtb	r3, r3
 8004b58:	3301      	adds	r3, #1
 8004b5a:	f003 021f 	and.w	r2, r3, #31
 8004b5e:	4613      	mov	r3, r2
 8004b60:	005b      	lsls	r3, r3, #1
 8004b62:	4413      	add	r3, r2
 8004b64:	3b1e      	subs	r3, #30
 8004b66:	051b      	lsls	r3, r3, #20
 8004b68:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004b6c:	430b      	orrs	r3, r1
 8004b6e:	683a      	ldr	r2, [r7, #0]
 8004b70:	6892      	ldr	r2, [r2, #8]
 8004b72:	4619      	mov	r1, r3
 8004b74:	f7ff f911 	bl	8003d9a <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	f280 80c6 	bge.w	8004d0e <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a67      	ldr	r2, [pc, #412]	; (8004d24 <HAL_ADC_ConfigChannel+0x678>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d004      	beq.n	8004b96 <HAL_ADC_ConfigChannel+0x4ea>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a65      	ldr	r2, [pc, #404]	; (8004d28 <HAL_ADC_ConfigChannel+0x67c>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d101      	bne.n	8004b9a <HAL_ADC_ConfigChannel+0x4ee>
 8004b96:	4b65      	ldr	r3, [pc, #404]	; (8004d2c <HAL_ADC_ConfigChannel+0x680>)
 8004b98:	e000      	b.n	8004b9c <HAL_ADC_ConfigChannel+0x4f0>
 8004b9a:	4b65      	ldr	r3, [pc, #404]	; (8004d30 <HAL_ADC_ConfigChannel+0x684>)
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f7ff f85b 	bl	8003c58 <LL_ADC_GetCommonPathInternalCh>
 8004ba2:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a5e      	ldr	r2, [pc, #376]	; (8004d24 <HAL_ADC_ConfigChannel+0x678>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d004      	beq.n	8004bb8 <HAL_ADC_ConfigChannel+0x50c>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a5d      	ldr	r2, [pc, #372]	; (8004d28 <HAL_ADC_ConfigChannel+0x67c>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d10e      	bne.n	8004bd6 <HAL_ADC_ConfigChannel+0x52a>
 8004bb8:	485a      	ldr	r0, [pc, #360]	; (8004d24 <HAL_ADC_ConfigChannel+0x678>)
 8004bba:	f7ff f9bb 	bl	8003f34 <LL_ADC_IsEnabled>
 8004bbe:	4604      	mov	r4, r0
 8004bc0:	4859      	ldr	r0, [pc, #356]	; (8004d28 <HAL_ADC_ConfigChannel+0x67c>)
 8004bc2:	f7ff f9b7 	bl	8003f34 <LL_ADC_IsEnabled>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	4323      	orrs	r3, r4
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	bf0c      	ite	eq
 8004bce:	2301      	moveq	r3, #1
 8004bd0:	2300      	movne	r3, #0
 8004bd2:	b2db      	uxtb	r3, r3
 8004bd4:	e008      	b.n	8004be8 <HAL_ADC_ConfigChannel+0x53c>
 8004bd6:	4857      	ldr	r0, [pc, #348]	; (8004d34 <HAL_ADC_ConfigChannel+0x688>)
 8004bd8:	f7ff f9ac 	bl	8003f34 <LL_ADC_IsEnabled>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	bf0c      	ite	eq
 8004be2:	2301      	moveq	r3, #1
 8004be4:	2300      	movne	r3, #0
 8004be6:	b2db      	uxtb	r3, r3
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d07d      	beq.n	8004ce8 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a51      	ldr	r2, [pc, #324]	; (8004d38 <HAL_ADC_ConfigChannel+0x68c>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d130      	bne.n	8004c58 <HAL_ADC_ConfigChannel+0x5ac>
 8004bf6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bf8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d12b      	bne.n	8004c58 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a4b      	ldr	r2, [pc, #300]	; (8004d34 <HAL_ADC_ConfigChannel+0x688>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	f040 8081 	bne.w	8004d0e <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a44      	ldr	r2, [pc, #272]	; (8004d24 <HAL_ADC_ConfigChannel+0x678>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d004      	beq.n	8004c20 <HAL_ADC_ConfigChannel+0x574>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a43      	ldr	r2, [pc, #268]	; (8004d28 <HAL_ADC_ConfigChannel+0x67c>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d101      	bne.n	8004c24 <HAL_ADC_ConfigChannel+0x578>
 8004c20:	4a42      	ldr	r2, [pc, #264]	; (8004d2c <HAL_ADC_ConfigChannel+0x680>)
 8004c22:	e000      	b.n	8004c26 <HAL_ADC_ConfigChannel+0x57a>
 8004c24:	4a42      	ldr	r2, [pc, #264]	; (8004d30 <HAL_ADC_ConfigChannel+0x684>)
 8004c26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c28:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004c2c:	4619      	mov	r1, r3
 8004c2e:	4610      	mov	r0, r2
 8004c30:	f7fe ffff 	bl	8003c32 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004c34:	4b41      	ldr	r3, [pc, #260]	; (8004d3c <HAL_ADC_ConfigChannel+0x690>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	099b      	lsrs	r3, r3, #6
 8004c3a:	4a41      	ldr	r2, [pc, #260]	; (8004d40 <HAL_ADC_ConfigChannel+0x694>)
 8004c3c:	fba2 2303 	umull	r2, r3, r2, r3
 8004c40:	099b      	lsrs	r3, r3, #6
 8004c42:	3301      	adds	r3, #1
 8004c44:	005b      	lsls	r3, r3, #1
 8004c46:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004c48:	e002      	b.n	8004c50 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	3b01      	subs	r3, #1
 8004c4e:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d1f9      	bne.n	8004c4a <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004c56:	e05a      	b.n	8004d0e <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a39      	ldr	r2, [pc, #228]	; (8004d44 <HAL_ADC_ConfigChannel+0x698>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d11e      	bne.n	8004ca0 <HAL_ADC_ConfigChannel+0x5f4>
 8004c62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c64:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d119      	bne.n	8004ca0 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a30      	ldr	r2, [pc, #192]	; (8004d34 <HAL_ADC_ConfigChannel+0x688>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d14b      	bne.n	8004d0e <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a2a      	ldr	r2, [pc, #168]	; (8004d24 <HAL_ADC_ConfigChannel+0x678>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d004      	beq.n	8004c8a <HAL_ADC_ConfigChannel+0x5de>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a28      	ldr	r2, [pc, #160]	; (8004d28 <HAL_ADC_ConfigChannel+0x67c>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d101      	bne.n	8004c8e <HAL_ADC_ConfigChannel+0x5e2>
 8004c8a:	4a28      	ldr	r2, [pc, #160]	; (8004d2c <HAL_ADC_ConfigChannel+0x680>)
 8004c8c:	e000      	b.n	8004c90 <HAL_ADC_ConfigChannel+0x5e4>
 8004c8e:	4a28      	ldr	r2, [pc, #160]	; (8004d30 <HAL_ADC_ConfigChannel+0x684>)
 8004c90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c96:	4619      	mov	r1, r3
 8004c98:	4610      	mov	r0, r2
 8004c9a:	f7fe ffca 	bl	8003c32 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004c9e:	e036      	b.n	8004d0e <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a28      	ldr	r2, [pc, #160]	; (8004d48 <HAL_ADC_ConfigChannel+0x69c>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d131      	bne.n	8004d0e <HAL_ADC_ConfigChannel+0x662>
 8004caa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d12c      	bne.n	8004d0e <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a1e      	ldr	r2, [pc, #120]	; (8004d34 <HAL_ADC_ConfigChannel+0x688>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d127      	bne.n	8004d0e <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a18      	ldr	r2, [pc, #96]	; (8004d24 <HAL_ADC_ConfigChannel+0x678>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d004      	beq.n	8004cd2 <HAL_ADC_ConfigChannel+0x626>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a16      	ldr	r2, [pc, #88]	; (8004d28 <HAL_ADC_ConfigChannel+0x67c>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d101      	bne.n	8004cd6 <HAL_ADC_ConfigChannel+0x62a>
 8004cd2:	4a16      	ldr	r2, [pc, #88]	; (8004d2c <HAL_ADC_ConfigChannel+0x680>)
 8004cd4:	e000      	b.n	8004cd8 <HAL_ADC_ConfigChannel+0x62c>
 8004cd6:	4a16      	ldr	r2, [pc, #88]	; (8004d30 <HAL_ADC_ConfigChannel+0x684>)
 8004cd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cda:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004cde:	4619      	mov	r1, r3
 8004ce0:	4610      	mov	r0, r2
 8004ce2:	f7fe ffa6 	bl	8003c32 <LL_ADC_SetCommonPathInternalCh>
 8004ce6:	e012      	b.n	8004d0e <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cec:	f043 0220 	orr.w	r2, r3, #32
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8004cfa:	e008      	b.n	8004d0e <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d00:	f043 0220 	orr.w	r2, r3, #32
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004d08:	2301      	movs	r3, #1
 8004d0a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2200      	movs	r2, #0
 8004d12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004d16:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	3784      	adds	r7, #132	; 0x84
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd90      	pop	{r4, r7, pc}
 8004d22:	bf00      	nop
 8004d24:	40022000 	.word	0x40022000
 8004d28:	40022100 	.word	0x40022100
 8004d2c:	40022300 	.word	0x40022300
 8004d30:	58026300 	.word	0x58026300
 8004d34:	58026000 	.word	0x58026000
 8004d38:	cb840000 	.word	0xcb840000
 8004d3c:	24000000 	.word	0x24000000
 8004d40:	053e2d63 	.word	0x053e2d63
 8004d44:	c7520000 	.word	0xc7520000
 8004d48:	cfb80000 	.word	0xcfb80000

08004d4c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b084      	sub	sp, #16
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4618      	mov	r0, r3
 8004d5a:	f7ff f8eb 	bl	8003f34 <LL_ADC_IsEnabled>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d16e      	bne.n	8004e42 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	689a      	ldr	r2, [r3, #8]
 8004d6a:	4b38      	ldr	r3, [pc, #224]	; (8004e4c <ADC_Enable+0x100>)
 8004d6c:	4013      	ands	r3, r2
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d00d      	beq.n	8004d8e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d76:	f043 0210 	orr.w	r2, r3, #16
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d82:	f043 0201 	orr.w	r2, r3, #1
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	e05a      	b.n	8004e44 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4618      	mov	r0, r3
 8004d94:	f7ff f8ba 	bl	8003f0c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004d98:	f7fe fefc 	bl	8003b94 <HAL_GetTick>
 8004d9c:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a2b      	ldr	r2, [pc, #172]	; (8004e50 <ADC_Enable+0x104>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d004      	beq.n	8004db2 <ADC_Enable+0x66>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a29      	ldr	r2, [pc, #164]	; (8004e54 <ADC_Enable+0x108>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d101      	bne.n	8004db6 <ADC_Enable+0x6a>
 8004db2:	4b29      	ldr	r3, [pc, #164]	; (8004e58 <ADC_Enable+0x10c>)
 8004db4:	e000      	b.n	8004db8 <ADC_Enable+0x6c>
 8004db6:	4b29      	ldr	r3, [pc, #164]	; (8004e5c <ADC_Enable+0x110>)
 8004db8:	4618      	mov	r0, r3
 8004dba:	f7ff f83d 	bl	8003e38 <LL_ADC_GetMultimode>
 8004dbe:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a23      	ldr	r2, [pc, #140]	; (8004e54 <ADC_Enable+0x108>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d002      	beq.n	8004dd0 <ADC_Enable+0x84>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	e000      	b.n	8004dd2 <ADC_Enable+0x86>
 8004dd0:	4b1f      	ldr	r3, [pc, #124]	; (8004e50 <ADC_Enable+0x104>)
 8004dd2:	687a      	ldr	r2, [r7, #4]
 8004dd4:	6812      	ldr	r2, [r2, #0]
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d02c      	beq.n	8004e34 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d130      	bne.n	8004e42 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004de0:	e028      	b.n	8004e34 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4618      	mov	r0, r3
 8004de8:	f7ff f8a4 	bl	8003f34 <LL_ADC_IsEnabled>
 8004dec:	4603      	mov	r3, r0
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d104      	bne.n	8004dfc <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4618      	mov	r0, r3
 8004df8:	f7ff f888 	bl	8003f0c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004dfc:	f7fe feca 	bl	8003b94 <HAL_GetTick>
 8004e00:	4602      	mov	r2, r0
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	1ad3      	subs	r3, r2, r3
 8004e06:	2b02      	cmp	r3, #2
 8004e08:	d914      	bls.n	8004e34 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f003 0301 	and.w	r3, r3, #1
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	d00d      	beq.n	8004e34 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e1c:	f043 0210 	orr.w	r2, r3, #16
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e28:	f043 0201 	orr.w	r2, r3, #1
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8004e30:	2301      	movs	r3, #1
 8004e32:	e007      	b.n	8004e44 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f003 0301 	and.w	r3, r3, #1
 8004e3e:	2b01      	cmp	r3, #1
 8004e40:	d1cf      	bne.n	8004de2 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004e42:	2300      	movs	r3, #0
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	3710      	adds	r7, #16
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}
 8004e4c:	8000003f 	.word	0x8000003f
 8004e50:	40022000 	.word	0x40022000
 8004e54:	40022100 	.word	0x40022100
 8004e58:	40022300 	.word	0x40022300
 8004e5c:	58026300 	.word	0x58026300

08004e60 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b084      	sub	sp, #16
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a7a      	ldr	r2, [pc, #488]	; (8005058 <ADC_ConfigureBoostMode+0x1f8>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d004      	beq.n	8004e7c <ADC_ConfigureBoostMode+0x1c>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a79      	ldr	r2, [pc, #484]	; (800505c <ADC_ConfigureBoostMode+0x1fc>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d109      	bne.n	8004e90 <ADC_ConfigureBoostMode+0x30>
 8004e7c:	4b78      	ldr	r3, [pc, #480]	; (8005060 <ADC_ConfigureBoostMode+0x200>)
 8004e7e:	689b      	ldr	r3, [r3, #8]
 8004e80:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	bf14      	ite	ne
 8004e88:	2301      	movne	r3, #1
 8004e8a:	2300      	moveq	r3, #0
 8004e8c:	b2db      	uxtb	r3, r3
 8004e8e:	e008      	b.n	8004ea2 <ADC_ConfigureBoostMode+0x42>
 8004e90:	4b74      	ldr	r3, [pc, #464]	; (8005064 <ADC_ConfigureBoostMode+0x204>)
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	bf14      	ite	ne
 8004e9c:	2301      	movne	r3, #1
 8004e9e:	2300      	moveq	r3, #0
 8004ea0:	b2db      	uxtb	r3, r3
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d01c      	beq.n	8004ee0 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8004ea6:	f004 fc69 	bl	800977c <HAL_RCC_GetHCLKFreq>
 8004eaa:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004eb4:	d010      	beq.n	8004ed8 <ADC_ConfigureBoostMode+0x78>
 8004eb6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004eba:	d873      	bhi.n	8004fa4 <ADC_ConfigureBoostMode+0x144>
 8004ebc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ec0:	d002      	beq.n	8004ec8 <ADC_ConfigureBoostMode+0x68>
 8004ec2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004ec6:	d16d      	bne.n	8004fa4 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	0c1b      	lsrs	r3, r3, #16
 8004ece:	68fa      	ldr	r2, [r7, #12]
 8004ed0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ed4:	60fb      	str	r3, [r7, #12]
        break;
 8004ed6:	e068      	b.n	8004faa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	089b      	lsrs	r3, r3, #2
 8004edc:	60fb      	str	r3, [r7, #12]
        break;
 8004ede:	e064      	b.n	8004faa <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004ee0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004ee4:	f04f 0100 	mov.w	r1, #0
 8004ee8:	f005 fef0 	bl	800accc <HAL_RCCEx_GetPeriphCLKFreq>
 8004eec:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004ef6:	d051      	beq.n	8004f9c <ADC_ConfigureBoostMode+0x13c>
 8004ef8:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004efc:	d854      	bhi.n	8004fa8 <ADC_ConfigureBoostMode+0x148>
 8004efe:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004f02:	d047      	beq.n	8004f94 <ADC_ConfigureBoostMode+0x134>
 8004f04:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004f08:	d84e      	bhi.n	8004fa8 <ADC_ConfigureBoostMode+0x148>
 8004f0a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004f0e:	d03d      	beq.n	8004f8c <ADC_ConfigureBoostMode+0x12c>
 8004f10:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004f14:	d848      	bhi.n	8004fa8 <ADC_ConfigureBoostMode+0x148>
 8004f16:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004f1a:	d033      	beq.n	8004f84 <ADC_ConfigureBoostMode+0x124>
 8004f1c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004f20:	d842      	bhi.n	8004fa8 <ADC_ConfigureBoostMode+0x148>
 8004f22:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004f26:	d029      	beq.n	8004f7c <ADC_ConfigureBoostMode+0x11c>
 8004f28:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004f2c:	d83c      	bhi.n	8004fa8 <ADC_ConfigureBoostMode+0x148>
 8004f2e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004f32:	d01a      	beq.n	8004f6a <ADC_ConfigureBoostMode+0x10a>
 8004f34:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004f38:	d836      	bhi.n	8004fa8 <ADC_ConfigureBoostMode+0x148>
 8004f3a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004f3e:	d014      	beq.n	8004f6a <ADC_ConfigureBoostMode+0x10a>
 8004f40:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004f44:	d830      	bhi.n	8004fa8 <ADC_ConfigureBoostMode+0x148>
 8004f46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f4a:	d00e      	beq.n	8004f6a <ADC_ConfigureBoostMode+0x10a>
 8004f4c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f50:	d82a      	bhi.n	8004fa8 <ADC_ConfigureBoostMode+0x148>
 8004f52:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004f56:	d008      	beq.n	8004f6a <ADC_ConfigureBoostMode+0x10a>
 8004f58:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004f5c:	d824      	bhi.n	8004fa8 <ADC_ConfigureBoostMode+0x148>
 8004f5e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004f62:	d002      	beq.n	8004f6a <ADC_ConfigureBoostMode+0x10a>
 8004f64:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004f68:	d11e      	bne.n	8004fa8 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	0c9b      	lsrs	r3, r3, #18
 8004f70:	005b      	lsls	r3, r3, #1
 8004f72:	68fa      	ldr	r2, [r7, #12]
 8004f74:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f78:	60fb      	str	r3, [r7, #12]
        break;
 8004f7a:	e016      	b.n	8004faa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	091b      	lsrs	r3, r3, #4
 8004f80:	60fb      	str	r3, [r7, #12]
        break;
 8004f82:	e012      	b.n	8004faa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	095b      	lsrs	r3, r3, #5
 8004f88:	60fb      	str	r3, [r7, #12]
        break;
 8004f8a:	e00e      	b.n	8004faa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	099b      	lsrs	r3, r3, #6
 8004f90:	60fb      	str	r3, [r7, #12]
        break;
 8004f92:	e00a      	b.n	8004faa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	09db      	lsrs	r3, r3, #7
 8004f98:	60fb      	str	r3, [r7, #12]
        break;
 8004f9a:	e006      	b.n	8004faa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	0a1b      	lsrs	r3, r3, #8
 8004fa0:	60fb      	str	r3, [r7, #12]
        break;
 8004fa2:	e002      	b.n	8004faa <ADC_ConfigureBoostMode+0x14a>
        break;
 8004fa4:	bf00      	nop
 8004fa6:	e000      	b.n	8004faa <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8004fa8:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8004faa:	f7fe fe23 	bl	8003bf4 <HAL_GetREVID>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	f241 0203 	movw	r2, #4099	; 0x1003
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d815      	bhi.n	8004fe4 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	4a2b      	ldr	r2, [pc, #172]	; (8005068 <ADC_ConfigureBoostMode+0x208>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d908      	bls.n	8004fd2 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	689a      	ldr	r2, [r3, #8]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004fce:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004fd0:	e03e      	b.n	8005050 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	689a      	ldr	r2, [r3, #8]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004fe0:	609a      	str	r2, [r3, #8]
}
 8004fe2:	e035      	b.n	8005050 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	085b      	lsrs	r3, r3, #1
 8004fe8:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	4a1f      	ldr	r2, [pc, #124]	; (800506c <ADC_ConfigureBoostMode+0x20c>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d808      	bhi.n	8005004 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	689a      	ldr	r2, [r3, #8]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005000:	609a      	str	r2, [r3, #8]
}
 8005002:	e025      	b.n	8005050 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	4a1a      	ldr	r2, [pc, #104]	; (8005070 <ADC_ConfigureBoostMode+0x210>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d80a      	bhi.n	8005022 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800501e:	609a      	str	r2, [r3, #8]
}
 8005020:	e016      	b.n	8005050 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	4a13      	ldr	r2, [pc, #76]	; (8005074 <ADC_ConfigureBoostMode+0x214>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d80a      	bhi.n	8005040 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	689b      	ldr	r3, [r3, #8]
 8005030:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800503c:	609a      	str	r2, [r3, #8]
}
 800503e:	e007      	b.n	8005050 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	689a      	ldr	r2, [r3, #8]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800504e:	609a      	str	r2, [r3, #8]
}
 8005050:	bf00      	nop
 8005052:	3710      	adds	r7, #16
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}
 8005058:	40022000 	.word	0x40022000
 800505c:	40022100 	.word	0x40022100
 8005060:	40022300 	.word	0x40022300
 8005064:	58026300 	.word	0x58026300
 8005068:	01312d00 	.word	0x01312d00
 800506c:	005f5e10 	.word	0x005f5e10
 8005070:	00bebc20 	.word	0x00bebc20
 8005074:	017d7840 	.word	0x017d7840

08005078 <LL_ADC_IsEnabled>:
{
 8005078:	b480      	push	{r7}
 800507a:	b083      	sub	sp, #12
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	689b      	ldr	r3, [r3, #8]
 8005084:	f003 0301 	and.w	r3, r3, #1
 8005088:	2b01      	cmp	r3, #1
 800508a:	d101      	bne.n	8005090 <LL_ADC_IsEnabled+0x18>
 800508c:	2301      	movs	r3, #1
 800508e:	e000      	b.n	8005092 <LL_ADC_IsEnabled+0x1a>
 8005090:	2300      	movs	r3, #0
}
 8005092:	4618      	mov	r0, r3
 8005094:	370c      	adds	r7, #12
 8005096:	46bd      	mov	sp, r7
 8005098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509c:	4770      	bx	lr

0800509e <LL_ADC_REG_IsConversionOngoing>:
{
 800509e:	b480      	push	{r7}
 80050a0:	b083      	sub	sp, #12
 80050a2:	af00      	add	r7, sp, #0
 80050a4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	689b      	ldr	r3, [r3, #8]
 80050aa:	f003 0304 	and.w	r3, r3, #4
 80050ae:	2b04      	cmp	r3, #4
 80050b0:	d101      	bne.n	80050b6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80050b2:	2301      	movs	r3, #1
 80050b4:	e000      	b.n	80050b8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80050b6:	2300      	movs	r3, #0
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	370c      	adds	r7, #12
 80050bc:	46bd      	mov	sp, r7
 80050be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c2:	4770      	bx	lr

080050c4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80050c4:	b590      	push	{r4, r7, lr}
 80050c6:	b09f      	sub	sp, #124	; 0x7c
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
 80050cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80050ce:	2300      	movs	r3, #0
 80050d0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80050da:	2b01      	cmp	r3, #1
 80050dc:	d101      	bne.n	80050e2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80050de:	2302      	movs	r3, #2
 80050e0:	e0be      	b.n	8005260 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2201      	movs	r2, #1
 80050e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80050ea:	2300      	movs	r3, #0
 80050ec:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80050ee:	2300      	movs	r3, #0
 80050f0:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a5c      	ldr	r2, [pc, #368]	; (8005268 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d102      	bne.n	8005102 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80050fc:	4b5b      	ldr	r3, [pc, #364]	; (800526c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80050fe:	60bb      	str	r3, [r7, #8]
 8005100:	e001      	b.n	8005106 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8005102:	2300      	movs	r3, #0
 8005104:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d10b      	bne.n	8005124 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005110:	f043 0220 	orr.w	r2, r3, #32
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2200      	movs	r2, #0
 800511c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8005120:	2301      	movs	r3, #1
 8005122:	e09d      	b.n	8005260 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	4618      	mov	r0, r3
 8005128:	f7ff ffb9 	bl	800509e <LL_ADC_REG_IsConversionOngoing>
 800512c:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4618      	mov	r0, r3
 8005134:	f7ff ffb3 	bl	800509e <LL_ADC_REG_IsConversionOngoing>
 8005138:	4603      	mov	r3, r0
 800513a:	2b00      	cmp	r3, #0
 800513c:	d17f      	bne.n	800523e <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800513e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005140:	2b00      	cmp	r3, #0
 8005142:	d17c      	bne.n	800523e <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a47      	ldr	r2, [pc, #284]	; (8005268 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d004      	beq.n	8005158 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4a46      	ldr	r2, [pc, #280]	; (800526c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d101      	bne.n	800515c <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8005158:	4b45      	ldr	r3, [pc, #276]	; (8005270 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800515a:	e000      	b.n	800515e <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 800515c:	4b45      	ldr	r3, [pc, #276]	; (8005274 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800515e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d039      	beq.n	80051dc <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8005168:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800516a:	689b      	ldr	r3, [r3, #8]
 800516c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	431a      	orrs	r2, r3
 8005176:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005178:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a3a      	ldr	r2, [pc, #232]	; (8005268 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d004      	beq.n	800518e <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a38      	ldr	r2, [pc, #224]	; (800526c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d10e      	bne.n	80051ac <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800518e:	4836      	ldr	r0, [pc, #216]	; (8005268 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005190:	f7ff ff72 	bl	8005078 <LL_ADC_IsEnabled>
 8005194:	4604      	mov	r4, r0
 8005196:	4835      	ldr	r0, [pc, #212]	; (800526c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005198:	f7ff ff6e 	bl	8005078 <LL_ADC_IsEnabled>
 800519c:	4603      	mov	r3, r0
 800519e:	4323      	orrs	r3, r4
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	bf0c      	ite	eq
 80051a4:	2301      	moveq	r3, #1
 80051a6:	2300      	movne	r3, #0
 80051a8:	b2db      	uxtb	r3, r3
 80051aa:	e008      	b.n	80051be <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 80051ac:	4832      	ldr	r0, [pc, #200]	; (8005278 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80051ae:	f7ff ff63 	bl	8005078 <LL_ADC_IsEnabled>
 80051b2:	4603      	mov	r3, r0
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	bf0c      	ite	eq
 80051b8:	2301      	moveq	r3, #1
 80051ba:	2300      	movne	r3, #0
 80051bc:	b2db      	uxtb	r3, r3
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d047      	beq.n	8005252 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80051c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051c4:	689a      	ldr	r2, [r3, #8]
 80051c6:	4b2d      	ldr	r3, [pc, #180]	; (800527c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80051c8:	4013      	ands	r3, r2
 80051ca:	683a      	ldr	r2, [r7, #0]
 80051cc:	6811      	ldr	r1, [r2, #0]
 80051ce:	683a      	ldr	r2, [r7, #0]
 80051d0:	6892      	ldr	r2, [r2, #8]
 80051d2:	430a      	orrs	r2, r1
 80051d4:	431a      	orrs	r2, r3
 80051d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051d8:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80051da:	e03a      	b.n	8005252 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80051dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80051e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051e6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a1e      	ldr	r2, [pc, #120]	; (8005268 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d004      	beq.n	80051fc <HAL_ADCEx_MultiModeConfigChannel+0x138>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a1d      	ldr	r2, [pc, #116]	; (800526c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d10e      	bne.n	800521a <HAL_ADCEx_MultiModeConfigChannel+0x156>
 80051fc:	481a      	ldr	r0, [pc, #104]	; (8005268 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80051fe:	f7ff ff3b 	bl	8005078 <LL_ADC_IsEnabled>
 8005202:	4604      	mov	r4, r0
 8005204:	4819      	ldr	r0, [pc, #100]	; (800526c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005206:	f7ff ff37 	bl	8005078 <LL_ADC_IsEnabled>
 800520a:	4603      	mov	r3, r0
 800520c:	4323      	orrs	r3, r4
 800520e:	2b00      	cmp	r3, #0
 8005210:	bf0c      	ite	eq
 8005212:	2301      	moveq	r3, #1
 8005214:	2300      	movne	r3, #0
 8005216:	b2db      	uxtb	r3, r3
 8005218:	e008      	b.n	800522c <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800521a:	4817      	ldr	r0, [pc, #92]	; (8005278 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800521c:	f7ff ff2c 	bl	8005078 <LL_ADC_IsEnabled>
 8005220:	4603      	mov	r3, r0
 8005222:	2b00      	cmp	r3, #0
 8005224:	bf0c      	ite	eq
 8005226:	2301      	moveq	r3, #1
 8005228:	2300      	movne	r3, #0
 800522a:	b2db      	uxtb	r3, r3
 800522c:	2b00      	cmp	r3, #0
 800522e:	d010      	beq.n	8005252 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005230:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005232:	689a      	ldr	r2, [r3, #8]
 8005234:	4b11      	ldr	r3, [pc, #68]	; (800527c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8005236:	4013      	ands	r3, r2
 8005238:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800523a:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800523c:	e009      	b.n	8005252 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005242:	f043 0220 	orr.w	r2, r3, #32
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800524a:	2301      	movs	r3, #1
 800524c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8005250:	e000      	b.n	8005254 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005252:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2200      	movs	r2, #0
 8005258:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800525c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8005260:	4618      	mov	r0, r3
 8005262:	377c      	adds	r7, #124	; 0x7c
 8005264:	46bd      	mov	sp, r7
 8005266:	bd90      	pop	{r4, r7, pc}
 8005268:	40022000 	.word	0x40022000
 800526c:	40022100 	.word	0x40022100
 8005270:	40022300 	.word	0x40022300
 8005274:	58026300 	.word	0x58026300
 8005278:	58026000 	.word	0x58026000
 800527c:	fffff0e0 	.word	0xfffff0e0

08005280 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005280:	b480      	push	{r7}
 8005282:	b085      	sub	sp, #20
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	f003 0307 	and.w	r3, r3, #7
 800528e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005290:	4b0b      	ldr	r3, [pc, #44]	; (80052c0 <__NVIC_SetPriorityGrouping+0x40>)
 8005292:	68db      	ldr	r3, [r3, #12]
 8005294:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005296:	68ba      	ldr	r2, [r7, #8]
 8005298:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800529c:	4013      	ands	r3, r2
 800529e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80052a8:	4b06      	ldr	r3, [pc, #24]	; (80052c4 <__NVIC_SetPriorityGrouping+0x44>)
 80052aa:	4313      	orrs	r3, r2
 80052ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80052ae:	4a04      	ldr	r2, [pc, #16]	; (80052c0 <__NVIC_SetPriorityGrouping+0x40>)
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	60d3      	str	r3, [r2, #12]
}
 80052b4:	bf00      	nop
 80052b6:	3714      	adds	r7, #20
 80052b8:	46bd      	mov	sp, r7
 80052ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052be:	4770      	bx	lr
 80052c0:	e000ed00 	.word	0xe000ed00
 80052c4:	05fa0000 	.word	0x05fa0000

080052c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80052c8:	b480      	push	{r7}
 80052ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80052cc:	4b04      	ldr	r3, [pc, #16]	; (80052e0 <__NVIC_GetPriorityGrouping+0x18>)
 80052ce:	68db      	ldr	r3, [r3, #12]
 80052d0:	0a1b      	lsrs	r3, r3, #8
 80052d2:	f003 0307 	and.w	r3, r3, #7
}
 80052d6:	4618      	mov	r0, r3
 80052d8:	46bd      	mov	sp, r7
 80052da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052de:	4770      	bx	lr
 80052e0:	e000ed00 	.word	0xe000ed00

080052e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b083      	sub	sp, #12
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	4603      	mov	r3, r0
 80052ec:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80052ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	db0b      	blt.n	800530e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80052f6:	88fb      	ldrh	r3, [r7, #6]
 80052f8:	f003 021f 	and.w	r2, r3, #31
 80052fc:	4907      	ldr	r1, [pc, #28]	; (800531c <__NVIC_EnableIRQ+0x38>)
 80052fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005302:	095b      	lsrs	r3, r3, #5
 8005304:	2001      	movs	r0, #1
 8005306:	fa00 f202 	lsl.w	r2, r0, r2
 800530a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800530e:	bf00      	nop
 8005310:	370c      	adds	r7, #12
 8005312:	46bd      	mov	sp, r7
 8005314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005318:	4770      	bx	lr
 800531a:	bf00      	nop
 800531c:	e000e100 	.word	0xe000e100

08005320 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005320:	b480      	push	{r7}
 8005322:	b083      	sub	sp, #12
 8005324:	af00      	add	r7, sp, #0
 8005326:	4603      	mov	r3, r0
 8005328:	6039      	str	r1, [r7, #0]
 800532a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800532c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005330:	2b00      	cmp	r3, #0
 8005332:	db0a      	blt.n	800534a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	b2da      	uxtb	r2, r3
 8005338:	490c      	ldr	r1, [pc, #48]	; (800536c <__NVIC_SetPriority+0x4c>)
 800533a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800533e:	0112      	lsls	r2, r2, #4
 8005340:	b2d2      	uxtb	r2, r2
 8005342:	440b      	add	r3, r1
 8005344:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005348:	e00a      	b.n	8005360 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	b2da      	uxtb	r2, r3
 800534e:	4908      	ldr	r1, [pc, #32]	; (8005370 <__NVIC_SetPriority+0x50>)
 8005350:	88fb      	ldrh	r3, [r7, #6]
 8005352:	f003 030f 	and.w	r3, r3, #15
 8005356:	3b04      	subs	r3, #4
 8005358:	0112      	lsls	r2, r2, #4
 800535a:	b2d2      	uxtb	r2, r2
 800535c:	440b      	add	r3, r1
 800535e:	761a      	strb	r2, [r3, #24]
}
 8005360:	bf00      	nop
 8005362:	370c      	adds	r7, #12
 8005364:	46bd      	mov	sp, r7
 8005366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536a:	4770      	bx	lr
 800536c:	e000e100 	.word	0xe000e100
 8005370:	e000ed00 	.word	0xe000ed00

08005374 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005374:	b480      	push	{r7}
 8005376:	b089      	sub	sp, #36	; 0x24
 8005378:	af00      	add	r7, sp, #0
 800537a:	60f8      	str	r0, [r7, #12]
 800537c:	60b9      	str	r1, [r7, #8]
 800537e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	f003 0307 	and.w	r3, r3, #7
 8005386:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005388:	69fb      	ldr	r3, [r7, #28]
 800538a:	f1c3 0307 	rsb	r3, r3, #7
 800538e:	2b04      	cmp	r3, #4
 8005390:	bf28      	it	cs
 8005392:	2304      	movcs	r3, #4
 8005394:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005396:	69fb      	ldr	r3, [r7, #28]
 8005398:	3304      	adds	r3, #4
 800539a:	2b06      	cmp	r3, #6
 800539c:	d902      	bls.n	80053a4 <NVIC_EncodePriority+0x30>
 800539e:	69fb      	ldr	r3, [r7, #28]
 80053a0:	3b03      	subs	r3, #3
 80053a2:	e000      	b.n	80053a6 <NVIC_EncodePriority+0x32>
 80053a4:	2300      	movs	r3, #0
 80053a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80053a8:	f04f 32ff 	mov.w	r2, #4294967295
 80053ac:	69bb      	ldr	r3, [r7, #24]
 80053ae:	fa02 f303 	lsl.w	r3, r2, r3
 80053b2:	43da      	mvns	r2, r3
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	401a      	ands	r2, r3
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80053bc:	f04f 31ff 	mov.w	r1, #4294967295
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	fa01 f303 	lsl.w	r3, r1, r3
 80053c6:	43d9      	mvns	r1, r3
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80053cc:	4313      	orrs	r3, r2
         );
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	3724      	adds	r7, #36	; 0x24
 80053d2:	46bd      	mov	sp, r7
 80053d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d8:	4770      	bx	lr

080053da <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80053da:	b580      	push	{r7, lr}
 80053dc:	b082      	sub	sp, #8
 80053de:	af00      	add	r7, sp, #0
 80053e0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f7ff ff4c 	bl	8005280 <__NVIC_SetPriorityGrouping>
}
 80053e8:	bf00      	nop
 80053ea:	3708      	adds	r7, #8
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd80      	pop	{r7, pc}

080053f0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b086      	sub	sp, #24
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	4603      	mov	r3, r0
 80053f8:	60b9      	str	r1, [r7, #8]
 80053fa:	607a      	str	r2, [r7, #4]
 80053fc:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80053fe:	f7ff ff63 	bl	80052c8 <__NVIC_GetPriorityGrouping>
 8005402:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005404:	687a      	ldr	r2, [r7, #4]
 8005406:	68b9      	ldr	r1, [r7, #8]
 8005408:	6978      	ldr	r0, [r7, #20]
 800540a:	f7ff ffb3 	bl	8005374 <NVIC_EncodePriority>
 800540e:	4602      	mov	r2, r0
 8005410:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005414:	4611      	mov	r1, r2
 8005416:	4618      	mov	r0, r3
 8005418:	f7ff ff82 	bl	8005320 <__NVIC_SetPriority>
}
 800541c:	bf00      	nop
 800541e:	3718      	adds	r7, #24
 8005420:	46bd      	mov	sp, r7
 8005422:	bd80      	pop	{r7, pc}

08005424 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b082      	sub	sp, #8
 8005428:	af00      	add	r7, sp, #0
 800542a:	4603      	mov	r3, r0
 800542c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800542e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005432:	4618      	mov	r0, r3
 8005434:	f7ff ff56 	bl	80052e4 <__NVIC_EnableIRQ>
}
 8005438:	bf00      	nop
 800543a:	3708      	adds	r7, #8
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}

08005440 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b086      	sub	sp, #24
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8005448:	f7fe fba4 	bl	8003b94 <HAL_GetTick>
 800544c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d101      	bne.n	8005458 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8005454:	2301      	movs	r3, #1
 8005456:	e316      	b.n	8005a86 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a66      	ldr	r2, [pc, #408]	; (80055f8 <HAL_DMA_Init+0x1b8>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d04a      	beq.n	80054f8 <HAL_DMA_Init+0xb8>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4a65      	ldr	r2, [pc, #404]	; (80055fc <HAL_DMA_Init+0x1bc>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d045      	beq.n	80054f8 <HAL_DMA_Init+0xb8>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a63      	ldr	r2, [pc, #396]	; (8005600 <HAL_DMA_Init+0x1c0>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d040      	beq.n	80054f8 <HAL_DMA_Init+0xb8>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a62      	ldr	r2, [pc, #392]	; (8005604 <HAL_DMA_Init+0x1c4>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d03b      	beq.n	80054f8 <HAL_DMA_Init+0xb8>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a60      	ldr	r2, [pc, #384]	; (8005608 <HAL_DMA_Init+0x1c8>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d036      	beq.n	80054f8 <HAL_DMA_Init+0xb8>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4a5f      	ldr	r2, [pc, #380]	; (800560c <HAL_DMA_Init+0x1cc>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d031      	beq.n	80054f8 <HAL_DMA_Init+0xb8>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a5d      	ldr	r2, [pc, #372]	; (8005610 <HAL_DMA_Init+0x1d0>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d02c      	beq.n	80054f8 <HAL_DMA_Init+0xb8>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a5c      	ldr	r2, [pc, #368]	; (8005614 <HAL_DMA_Init+0x1d4>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d027      	beq.n	80054f8 <HAL_DMA_Init+0xb8>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a5a      	ldr	r2, [pc, #360]	; (8005618 <HAL_DMA_Init+0x1d8>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d022      	beq.n	80054f8 <HAL_DMA_Init+0xb8>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a59      	ldr	r2, [pc, #356]	; (800561c <HAL_DMA_Init+0x1dc>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d01d      	beq.n	80054f8 <HAL_DMA_Init+0xb8>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a57      	ldr	r2, [pc, #348]	; (8005620 <HAL_DMA_Init+0x1e0>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d018      	beq.n	80054f8 <HAL_DMA_Init+0xb8>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a56      	ldr	r2, [pc, #344]	; (8005624 <HAL_DMA_Init+0x1e4>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d013      	beq.n	80054f8 <HAL_DMA_Init+0xb8>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a54      	ldr	r2, [pc, #336]	; (8005628 <HAL_DMA_Init+0x1e8>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d00e      	beq.n	80054f8 <HAL_DMA_Init+0xb8>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a53      	ldr	r2, [pc, #332]	; (800562c <HAL_DMA_Init+0x1ec>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d009      	beq.n	80054f8 <HAL_DMA_Init+0xb8>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a51      	ldr	r2, [pc, #324]	; (8005630 <HAL_DMA_Init+0x1f0>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d004      	beq.n	80054f8 <HAL_DMA_Init+0xb8>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a50      	ldr	r2, [pc, #320]	; (8005634 <HAL_DMA_Init+0x1f4>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d101      	bne.n	80054fc <HAL_DMA_Init+0xbc>
 80054f8:	2301      	movs	r3, #1
 80054fa:	e000      	b.n	80054fe <HAL_DMA_Init+0xbe>
 80054fc:	2300      	movs	r3, #0
 80054fe:	2b00      	cmp	r3, #0
 8005500:	f000 813b 	beq.w	800577a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2202      	movs	r2, #2
 8005508:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2200      	movs	r2, #0
 8005510:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a37      	ldr	r2, [pc, #220]	; (80055f8 <HAL_DMA_Init+0x1b8>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d04a      	beq.n	80055b4 <HAL_DMA_Init+0x174>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4a36      	ldr	r2, [pc, #216]	; (80055fc <HAL_DMA_Init+0x1bc>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d045      	beq.n	80055b4 <HAL_DMA_Init+0x174>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a34      	ldr	r2, [pc, #208]	; (8005600 <HAL_DMA_Init+0x1c0>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d040      	beq.n	80055b4 <HAL_DMA_Init+0x174>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a33      	ldr	r2, [pc, #204]	; (8005604 <HAL_DMA_Init+0x1c4>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d03b      	beq.n	80055b4 <HAL_DMA_Init+0x174>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a31      	ldr	r2, [pc, #196]	; (8005608 <HAL_DMA_Init+0x1c8>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d036      	beq.n	80055b4 <HAL_DMA_Init+0x174>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a30      	ldr	r2, [pc, #192]	; (800560c <HAL_DMA_Init+0x1cc>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d031      	beq.n	80055b4 <HAL_DMA_Init+0x174>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a2e      	ldr	r2, [pc, #184]	; (8005610 <HAL_DMA_Init+0x1d0>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d02c      	beq.n	80055b4 <HAL_DMA_Init+0x174>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4a2d      	ldr	r2, [pc, #180]	; (8005614 <HAL_DMA_Init+0x1d4>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d027      	beq.n	80055b4 <HAL_DMA_Init+0x174>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a2b      	ldr	r2, [pc, #172]	; (8005618 <HAL_DMA_Init+0x1d8>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d022      	beq.n	80055b4 <HAL_DMA_Init+0x174>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a2a      	ldr	r2, [pc, #168]	; (800561c <HAL_DMA_Init+0x1dc>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d01d      	beq.n	80055b4 <HAL_DMA_Init+0x174>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a28      	ldr	r2, [pc, #160]	; (8005620 <HAL_DMA_Init+0x1e0>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d018      	beq.n	80055b4 <HAL_DMA_Init+0x174>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a27      	ldr	r2, [pc, #156]	; (8005624 <HAL_DMA_Init+0x1e4>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d013      	beq.n	80055b4 <HAL_DMA_Init+0x174>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a25      	ldr	r2, [pc, #148]	; (8005628 <HAL_DMA_Init+0x1e8>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d00e      	beq.n	80055b4 <HAL_DMA_Init+0x174>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a24      	ldr	r2, [pc, #144]	; (800562c <HAL_DMA_Init+0x1ec>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d009      	beq.n	80055b4 <HAL_DMA_Init+0x174>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a22      	ldr	r2, [pc, #136]	; (8005630 <HAL_DMA_Init+0x1f0>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d004      	beq.n	80055b4 <HAL_DMA_Init+0x174>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a21      	ldr	r2, [pc, #132]	; (8005634 <HAL_DMA_Init+0x1f4>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d108      	bne.n	80055c6 <HAL_DMA_Init+0x186>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	681a      	ldr	r2, [r3, #0]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f022 0201 	bic.w	r2, r2, #1
 80055c2:	601a      	str	r2, [r3, #0]
 80055c4:	e007      	b.n	80055d6 <HAL_DMA_Init+0x196>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	681a      	ldr	r2, [r3, #0]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f022 0201 	bic.w	r2, r2, #1
 80055d4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80055d6:	e02f      	b.n	8005638 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80055d8:	f7fe fadc 	bl	8003b94 <HAL_GetTick>
 80055dc:	4602      	mov	r2, r0
 80055de:	693b      	ldr	r3, [r7, #16]
 80055e0:	1ad3      	subs	r3, r2, r3
 80055e2:	2b05      	cmp	r3, #5
 80055e4:	d928      	bls.n	8005638 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2220      	movs	r2, #32
 80055ea:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2203      	movs	r2, #3
 80055f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80055f4:	2301      	movs	r3, #1
 80055f6:	e246      	b.n	8005a86 <HAL_DMA_Init+0x646>
 80055f8:	40020010 	.word	0x40020010
 80055fc:	40020028 	.word	0x40020028
 8005600:	40020040 	.word	0x40020040
 8005604:	40020058 	.word	0x40020058
 8005608:	40020070 	.word	0x40020070
 800560c:	40020088 	.word	0x40020088
 8005610:	400200a0 	.word	0x400200a0
 8005614:	400200b8 	.word	0x400200b8
 8005618:	40020410 	.word	0x40020410
 800561c:	40020428 	.word	0x40020428
 8005620:	40020440 	.word	0x40020440
 8005624:	40020458 	.word	0x40020458
 8005628:	40020470 	.word	0x40020470
 800562c:	40020488 	.word	0x40020488
 8005630:	400204a0 	.word	0x400204a0
 8005634:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f003 0301 	and.w	r3, r3, #1
 8005642:	2b00      	cmp	r3, #0
 8005644:	d1c8      	bne.n	80055d8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800564e:	697a      	ldr	r2, [r7, #20]
 8005650:	4b83      	ldr	r3, [pc, #524]	; (8005860 <HAL_DMA_Init+0x420>)
 8005652:	4013      	ands	r3, r2
 8005654:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800565e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	691b      	ldr	r3, [r3, #16]
 8005664:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800566a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	699b      	ldr	r3, [r3, #24]
 8005670:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005676:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6a1b      	ldr	r3, [r3, #32]
 800567c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800567e:	697a      	ldr	r2, [r7, #20]
 8005680:	4313      	orrs	r3, r2
 8005682:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005688:	2b04      	cmp	r3, #4
 800568a:	d107      	bne.n	800569c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005694:	4313      	orrs	r3, r2
 8005696:	697a      	ldr	r2, [r7, #20]
 8005698:	4313      	orrs	r3, r2
 800569a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800569c:	4b71      	ldr	r3, [pc, #452]	; (8005864 <HAL_DMA_Init+0x424>)
 800569e:	681a      	ldr	r2, [r3, #0]
 80056a0:	4b71      	ldr	r3, [pc, #452]	; (8005868 <HAL_DMA_Init+0x428>)
 80056a2:	4013      	ands	r3, r2
 80056a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80056a8:	d328      	bcc.n	80056fc <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	685b      	ldr	r3, [r3, #4]
 80056ae:	2b28      	cmp	r3, #40	; 0x28
 80056b0:	d903      	bls.n	80056ba <HAL_DMA_Init+0x27a>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	2b2e      	cmp	r3, #46	; 0x2e
 80056b8:	d917      	bls.n	80056ea <HAL_DMA_Init+0x2aa>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	685b      	ldr	r3, [r3, #4]
 80056be:	2b3e      	cmp	r3, #62	; 0x3e
 80056c0:	d903      	bls.n	80056ca <HAL_DMA_Init+0x28a>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	2b42      	cmp	r3, #66	; 0x42
 80056c8:	d90f      	bls.n	80056ea <HAL_DMA_Init+0x2aa>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	2b46      	cmp	r3, #70	; 0x46
 80056d0:	d903      	bls.n	80056da <HAL_DMA_Init+0x29a>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	2b48      	cmp	r3, #72	; 0x48
 80056d8:	d907      	bls.n	80056ea <HAL_DMA_Init+0x2aa>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	2b4e      	cmp	r3, #78	; 0x4e
 80056e0:	d905      	bls.n	80056ee <HAL_DMA_Init+0x2ae>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	685b      	ldr	r3, [r3, #4]
 80056e6:	2b52      	cmp	r3, #82	; 0x52
 80056e8:	d801      	bhi.n	80056ee <HAL_DMA_Init+0x2ae>
 80056ea:	2301      	movs	r3, #1
 80056ec:	e000      	b.n	80056f0 <HAL_DMA_Init+0x2b0>
 80056ee:	2300      	movs	r3, #0
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d003      	beq.n	80056fc <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80056fa:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	697a      	ldr	r2, [r7, #20]
 8005702:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	695b      	ldr	r3, [r3, #20]
 800570a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	f023 0307 	bic.w	r3, r3, #7
 8005712:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005718:	697a      	ldr	r2, [r7, #20]
 800571a:	4313      	orrs	r3, r2
 800571c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005722:	2b04      	cmp	r3, #4
 8005724:	d117      	bne.n	8005756 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800572a:	697a      	ldr	r2, [r7, #20]
 800572c:	4313      	orrs	r3, r2
 800572e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005734:	2b00      	cmp	r3, #0
 8005736:	d00e      	beq.n	8005756 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005738:	6878      	ldr	r0, [r7, #4]
 800573a:	f001 ff1d 	bl	8007578 <DMA_CheckFifoParam>
 800573e:	4603      	mov	r3, r0
 8005740:	2b00      	cmp	r3, #0
 8005742:	d008      	beq.n	8005756 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2240      	movs	r2, #64	; 0x40
 8005748:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2201      	movs	r2, #1
 800574e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8005752:	2301      	movs	r3, #1
 8005754:	e197      	b.n	8005a86 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	697a      	ldr	r2, [r7, #20]
 800575c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f001 fe58 	bl	8007414 <DMA_CalcBaseAndBitshift>
 8005764:	4603      	mov	r3, r0
 8005766:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800576c:	f003 031f 	and.w	r3, r3, #31
 8005770:	223f      	movs	r2, #63	; 0x3f
 8005772:	409a      	lsls	r2, r3
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	609a      	str	r2, [r3, #8]
 8005778:	e0cd      	b.n	8005916 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4a3b      	ldr	r2, [pc, #236]	; (800586c <HAL_DMA_Init+0x42c>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d022      	beq.n	80057ca <HAL_DMA_Init+0x38a>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4a39      	ldr	r2, [pc, #228]	; (8005870 <HAL_DMA_Init+0x430>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d01d      	beq.n	80057ca <HAL_DMA_Init+0x38a>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4a38      	ldr	r2, [pc, #224]	; (8005874 <HAL_DMA_Init+0x434>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d018      	beq.n	80057ca <HAL_DMA_Init+0x38a>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a36      	ldr	r2, [pc, #216]	; (8005878 <HAL_DMA_Init+0x438>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d013      	beq.n	80057ca <HAL_DMA_Init+0x38a>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4a35      	ldr	r2, [pc, #212]	; (800587c <HAL_DMA_Init+0x43c>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d00e      	beq.n	80057ca <HAL_DMA_Init+0x38a>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a33      	ldr	r2, [pc, #204]	; (8005880 <HAL_DMA_Init+0x440>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d009      	beq.n	80057ca <HAL_DMA_Init+0x38a>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4a32      	ldr	r2, [pc, #200]	; (8005884 <HAL_DMA_Init+0x444>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d004      	beq.n	80057ca <HAL_DMA_Init+0x38a>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a30      	ldr	r2, [pc, #192]	; (8005888 <HAL_DMA_Init+0x448>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d101      	bne.n	80057ce <HAL_DMA_Init+0x38e>
 80057ca:	2301      	movs	r3, #1
 80057cc:	e000      	b.n	80057d0 <HAL_DMA_Init+0x390>
 80057ce:	2300      	movs	r3, #0
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	f000 8097 	beq.w	8005904 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	4a24      	ldr	r2, [pc, #144]	; (800586c <HAL_DMA_Init+0x42c>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d021      	beq.n	8005824 <HAL_DMA_Init+0x3e4>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4a22      	ldr	r2, [pc, #136]	; (8005870 <HAL_DMA_Init+0x430>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d01c      	beq.n	8005824 <HAL_DMA_Init+0x3e4>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a21      	ldr	r2, [pc, #132]	; (8005874 <HAL_DMA_Init+0x434>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d017      	beq.n	8005824 <HAL_DMA_Init+0x3e4>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4a1f      	ldr	r2, [pc, #124]	; (8005878 <HAL_DMA_Init+0x438>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d012      	beq.n	8005824 <HAL_DMA_Init+0x3e4>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a1e      	ldr	r2, [pc, #120]	; (800587c <HAL_DMA_Init+0x43c>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d00d      	beq.n	8005824 <HAL_DMA_Init+0x3e4>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a1c      	ldr	r2, [pc, #112]	; (8005880 <HAL_DMA_Init+0x440>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d008      	beq.n	8005824 <HAL_DMA_Init+0x3e4>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4a1b      	ldr	r2, [pc, #108]	; (8005884 <HAL_DMA_Init+0x444>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d003      	beq.n	8005824 <HAL_DMA_Init+0x3e4>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a19      	ldr	r2, [pc, #100]	; (8005888 <HAL_DMA_Init+0x448>)
 8005822:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2202      	movs	r2, #2
 8005828:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2200      	movs	r2, #0
 8005830:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800583c:	697a      	ldr	r2, [r7, #20]
 800583e:	4b13      	ldr	r3, [pc, #76]	; (800588c <HAL_DMA_Init+0x44c>)
 8005840:	4013      	ands	r3, r2
 8005842:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	689b      	ldr	r3, [r3, #8]
 8005848:	2b40      	cmp	r3, #64	; 0x40
 800584a:	d021      	beq.n	8005890 <HAL_DMA_Init+0x450>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	689b      	ldr	r3, [r3, #8]
 8005850:	2b80      	cmp	r3, #128	; 0x80
 8005852:	d102      	bne.n	800585a <HAL_DMA_Init+0x41a>
 8005854:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005858:	e01b      	b.n	8005892 <HAL_DMA_Init+0x452>
 800585a:	2300      	movs	r3, #0
 800585c:	e019      	b.n	8005892 <HAL_DMA_Init+0x452>
 800585e:	bf00      	nop
 8005860:	fe10803f 	.word	0xfe10803f
 8005864:	5c001000 	.word	0x5c001000
 8005868:	ffff0000 	.word	0xffff0000
 800586c:	58025408 	.word	0x58025408
 8005870:	5802541c 	.word	0x5802541c
 8005874:	58025430 	.word	0x58025430
 8005878:	58025444 	.word	0x58025444
 800587c:	58025458 	.word	0x58025458
 8005880:	5802546c 	.word	0x5802546c
 8005884:	58025480 	.word	0x58025480
 8005888:	58025494 	.word	0x58025494
 800588c:	fffe000f 	.word	0xfffe000f
 8005890:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005892:	687a      	ldr	r2, [r7, #4]
 8005894:	68d2      	ldr	r2, [r2, #12]
 8005896:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005898:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	691b      	ldr	r3, [r3, #16]
 800589e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80058a0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	695b      	ldr	r3, [r3, #20]
 80058a6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80058a8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	699b      	ldr	r3, [r3, #24]
 80058ae:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80058b0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	69db      	ldr	r3, [r3, #28]
 80058b6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80058b8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6a1b      	ldr	r3, [r3, #32]
 80058be:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80058c0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80058c2:	697a      	ldr	r2, [r7, #20]
 80058c4:	4313      	orrs	r3, r2
 80058c6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	697a      	ldr	r2, [r7, #20]
 80058ce:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	461a      	mov	r2, r3
 80058d6:	4b6e      	ldr	r3, [pc, #440]	; (8005a90 <HAL_DMA_Init+0x650>)
 80058d8:	4413      	add	r3, r2
 80058da:	4a6e      	ldr	r2, [pc, #440]	; (8005a94 <HAL_DMA_Init+0x654>)
 80058dc:	fba2 2303 	umull	r2, r3, r2, r3
 80058e0:	091b      	lsrs	r3, r3, #4
 80058e2:	009a      	lsls	r2, r3, #2
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f001 fd93 	bl	8007414 <DMA_CalcBaseAndBitshift>
 80058ee:	4603      	mov	r3, r0
 80058f0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058f6:	f003 031f 	and.w	r3, r3, #31
 80058fa:	2201      	movs	r2, #1
 80058fc:	409a      	lsls	r2, r3
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	605a      	str	r2, [r3, #4]
 8005902:	e008      	b.n	8005916 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2240      	movs	r2, #64	; 0x40
 8005908:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2203      	movs	r2, #3
 800590e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8005912:	2301      	movs	r3, #1
 8005914:	e0b7      	b.n	8005a86 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4a5f      	ldr	r2, [pc, #380]	; (8005a98 <HAL_DMA_Init+0x658>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d072      	beq.n	8005a06 <HAL_DMA_Init+0x5c6>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a5d      	ldr	r2, [pc, #372]	; (8005a9c <HAL_DMA_Init+0x65c>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d06d      	beq.n	8005a06 <HAL_DMA_Init+0x5c6>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4a5c      	ldr	r2, [pc, #368]	; (8005aa0 <HAL_DMA_Init+0x660>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d068      	beq.n	8005a06 <HAL_DMA_Init+0x5c6>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a5a      	ldr	r2, [pc, #360]	; (8005aa4 <HAL_DMA_Init+0x664>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d063      	beq.n	8005a06 <HAL_DMA_Init+0x5c6>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a59      	ldr	r2, [pc, #356]	; (8005aa8 <HAL_DMA_Init+0x668>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d05e      	beq.n	8005a06 <HAL_DMA_Init+0x5c6>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a57      	ldr	r2, [pc, #348]	; (8005aac <HAL_DMA_Init+0x66c>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d059      	beq.n	8005a06 <HAL_DMA_Init+0x5c6>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4a56      	ldr	r2, [pc, #344]	; (8005ab0 <HAL_DMA_Init+0x670>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d054      	beq.n	8005a06 <HAL_DMA_Init+0x5c6>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a54      	ldr	r2, [pc, #336]	; (8005ab4 <HAL_DMA_Init+0x674>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d04f      	beq.n	8005a06 <HAL_DMA_Init+0x5c6>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a53      	ldr	r2, [pc, #332]	; (8005ab8 <HAL_DMA_Init+0x678>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d04a      	beq.n	8005a06 <HAL_DMA_Init+0x5c6>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a51      	ldr	r2, [pc, #324]	; (8005abc <HAL_DMA_Init+0x67c>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d045      	beq.n	8005a06 <HAL_DMA_Init+0x5c6>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4a50      	ldr	r2, [pc, #320]	; (8005ac0 <HAL_DMA_Init+0x680>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d040      	beq.n	8005a06 <HAL_DMA_Init+0x5c6>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a4e      	ldr	r2, [pc, #312]	; (8005ac4 <HAL_DMA_Init+0x684>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d03b      	beq.n	8005a06 <HAL_DMA_Init+0x5c6>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4a4d      	ldr	r2, [pc, #308]	; (8005ac8 <HAL_DMA_Init+0x688>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d036      	beq.n	8005a06 <HAL_DMA_Init+0x5c6>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a4b      	ldr	r2, [pc, #300]	; (8005acc <HAL_DMA_Init+0x68c>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d031      	beq.n	8005a06 <HAL_DMA_Init+0x5c6>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4a4a      	ldr	r2, [pc, #296]	; (8005ad0 <HAL_DMA_Init+0x690>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d02c      	beq.n	8005a06 <HAL_DMA_Init+0x5c6>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a48      	ldr	r2, [pc, #288]	; (8005ad4 <HAL_DMA_Init+0x694>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d027      	beq.n	8005a06 <HAL_DMA_Init+0x5c6>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a47      	ldr	r2, [pc, #284]	; (8005ad8 <HAL_DMA_Init+0x698>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d022      	beq.n	8005a06 <HAL_DMA_Init+0x5c6>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a45      	ldr	r2, [pc, #276]	; (8005adc <HAL_DMA_Init+0x69c>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d01d      	beq.n	8005a06 <HAL_DMA_Init+0x5c6>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4a44      	ldr	r2, [pc, #272]	; (8005ae0 <HAL_DMA_Init+0x6a0>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d018      	beq.n	8005a06 <HAL_DMA_Init+0x5c6>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a42      	ldr	r2, [pc, #264]	; (8005ae4 <HAL_DMA_Init+0x6a4>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d013      	beq.n	8005a06 <HAL_DMA_Init+0x5c6>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a41      	ldr	r2, [pc, #260]	; (8005ae8 <HAL_DMA_Init+0x6a8>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d00e      	beq.n	8005a06 <HAL_DMA_Init+0x5c6>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a3f      	ldr	r2, [pc, #252]	; (8005aec <HAL_DMA_Init+0x6ac>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d009      	beq.n	8005a06 <HAL_DMA_Init+0x5c6>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a3e      	ldr	r2, [pc, #248]	; (8005af0 <HAL_DMA_Init+0x6b0>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d004      	beq.n	8005a06 <HAL_DMA_Init+0x5c6>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a3c      	ldr	r2, [pc, #240]	; (8005af4 <HAL_DMA_Init+0x6b4>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d101      	bne.n	8005a0a <HAL_DMA_Init+0x5ca>
 8005a06:	2301      	movs	r3, #1
 8005a08:	e000      	b.n	8005a0c <HAL_DMA_Init+0x5cc>
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d032      	beq.n	8005a76 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005a10:	6878      	ldr	r0, [r7, #4]
 8005a12:	f001 fe2d 	bl	8007670 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	689b      	ldr	r3, [r3, #8]
 8005a1a:	2b80      	cmp	r3, #128	; 0x80
 8005a1c:	d102      	bne.n	8005a24 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2200      	movs	r2, #0
 8005a22:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	685a      	ldr	r2, [r3, #4]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a2c:	b2d2      	uxtb	r2, r2
 8005a2e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a34:	687a      	ldr	r2, [r7, #4]
 8005a36:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005a38:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d010      	beq.n	8005a64 <HAL_DMA_Init+0x624>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	685b      	ldr	r3, [r3, #4]
 8005a46:	2b08      	cmp	r3, #8
 8005a48:	d80c      	bhi.n	8005a64 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	f001 feaa 	bl	80077a4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a54:	2200      	movs	r2, #0
 8005a56:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a5c:	687a      	ldr	r2, [r7, #4]
 8005a5e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005a60:	605a      	str	r2, [r3, #4]
 8005a62:	e008      	b.n	8005a76 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2200      	movs	r2, #0
 8005a68:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2200      	movs	r2, #0
 8005a74:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2201      	movs	r2, #1
 8005a80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005a84:	2300      	movs	r3, #0
}
 8005a86:	4618      	mov	r0, r3
 8005a88:	3718      	adds	r7, #24
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bd80      	pop	{r7, pc}
 8005a8e:	bf00      	nop
 8005a90:	a7fdabf8 	.word	0xa7fdabf8
 8005a94:	cccccccd 	.word	0xcccccccd
 8005a98:	40020010 	.word	0x40020010
 8005a9c:	40020028 	.word	0x40020028
 8005aa0:	40020040 	.word	0x40020040
 8005aa4:	40020058 	.word	0x40020058
 8005aa8:	40020070 	.word	0x40020070
 8005aac:	40020088 	.word	0x40020088
 8005ab0:	400200a0 	.word	0x400200a0
 8005ab4:	400200b8 	.word	0x400200b8
 8005ab8:	40020410 	.word	0x40020410
 8005abc:	40020428 	.word	0x40020428
 8005ac0:	40020440 	.word	0x40020440
 8005ac4:	40020458 	.word	0x40020458
 8005ac8:	40020470 	.word	0x40020470
 8005acc:	40020488 	.word	0x40020488
 8005ad0:	400204a0 	.word	0x400204a0
 8005ad4:	400204b8 	.word	0x400204b8
 8005ad8:	58025408 	.word	0x58025408
 8005adc:	5802541c 	.word	0x5802541c
 8005ae0:	58025430 	.word	0x58025430
 8005ae4:	58025444 	.word	0x58025444
 8005ae8:	58025458 	.word	0x58025458
 8005aec:	5802546c 	.word	0x5802546c
 8005af0:	58025480 	.word	0x58025480
 8005af4:	58025494 	.word	0x58025494

08005af8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b086      	sub	sp, #24
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8005b00:	f7fe f848 	bl	8003b94 <HAL_GetTick>
 8005b04:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d101      	bne.n	8005b10 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	e2dc      	b.n	80060ca <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005b16:	b2db      	uxtb	r3, r3
 8005b18:	2b02      	cmp	r3, #2
 8005b1a:	d008      	beq.n	8005b2e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2280      	movs	r2, #128	; 0x80
 8005b20:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2200      	movs	r2, #0
 8005b26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	e2cd      	b.n	80060ca <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4a76      	ldr	r2, [pc, #472]	; (8005d0c <HAL_DMA_Abort+0x214>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d04a      	beq.n	8005bce <HAL_DMA_Abort+0xd6>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4a74      	ldr	r2, [pc, #464]	; (8005d10 <HAL_DMA_Abort+0x218>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d045      	beq.n	8005bce <HAL_DMA_Abort+0xd6>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4a73      	ldr	r2, [pc, #460]	; (8005d14 <HAL_DMA_Abort+0x21c>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d040      	beq.n	8005bce <HAL_DMA_Abort+0xd6>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a71      	ldr	r2, [pc, #452]	; (8005d18 <HAL_DMA_Abort+0x220>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d03b      	beq.n	8005bce <HAL_DMA_Abort+0xd6>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a70      	ldr	r2, [pc, #448]	; (8005d1c <HAL_DMA_Abort+0x224>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d036      	beq.n	8005bce <HAL_DMA_Abort+0xd6>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a6e      	ldr	r2, [pc, #440]	; (8005d20 <HAL_DMA_Abort+0x228>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d031      	beq.n	8005bce <HAL_DMA_Abort+0xd6>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a6d      	ldr	r2, [pc, #436]	; (8005d24 <HAL_DMA_Abort+0x22c>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d02c      	beq.n	8005bce <HAL_DMA_Abort+0xd6>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4a6b      	ldr	r2, [pc, #428]	; (8005d28 <HAL_DMA_Abort+0x230>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d027      	beq.n	8005bce <HAL_DMA_Abort+0xd6>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4a6a      	ldr	r2, [pc, #424]	; (8005d2c <HAL_DMA_Abort+0x234>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d022      	beq.n	8005bce <HAL_DMA_Abort+0xd6>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a68      	ldr	r2, [pc, #416]	; (8005d30 <HAL_DMA_Abort+0x238>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d01d      	beq.n	8005bce <HAL_DMA_Abort+0xd6>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4a67      	ldr	r2, [pc, #412]	; (8005d34 <HAL_DMA_Abort+0x23c>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d018      	beq.n	8005bce <HAL_DMA_Abort+0xd6>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a65      	ldr	r2, [pc, #404]	; (8005d38 <HAL_DMA_Abort+0x240>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d013      	beq.n	8005bce <HAL_DMA_Abort+0xd6>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a64      	ldr	r2, [pc, #400]	; (8005d3c <HAL_DMA_Abort+0x244>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d00e      	beq.n	8005bce <HAL_DMA_Abort+0xd6>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a62      	ldr	r2, [pc, #392]	; (8005d40 <HAL_DMA_Abort+0x248>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d009      	beq.n	8005bce <HAL_DMA_Abort+0xd6>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4a61      	ldr	r2, [pc, #388]	; (8005d44 <HAL_DMA_Abort+0x24c>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d004      	beq.n	8005bce <HAL_DMA_Abort+0xd6>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a5f      	ldr	r2, [pc, #380]	; (8005d48 <HAL_DMA_Abort+0x250>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d101      	bne.n	8005bd2 <HAL_DMA_Abort+0xda>
 8005bce:	2301      	movs	r3, #1
 8005bd0:	e000      	b.n	8005bd4 <HAL_DMA_Abort+0xdc>
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d013      	beq.n	8005c00 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	681a      	ldr	r2, [r3, #0]
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f022 021e 	bic.w	r2, r2, #30
 8005be6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	695a      	ldr	r2, [r3, #20]
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005bf6:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	617b      	str	r3, [r7, #20]
 8005bfe:	e00a      	b.n	8005c16 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	681a      	ldr	r2, [r3, #0]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f022 020e 	bic.w	r2, r2, #14
 8005c0e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4a3c      	ldr	r2, [pc, #240]	; (8005d0c <HAL_DMA_Abort+0x214>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d072      	beq.n	8005d06 <HAL_DMA_Abort+0x20e>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a3a      	ldr	r2, [pc, #232]	; (8005d10 <HAL_DMA_Abort+0x218>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d06d      	beq.n	8005d06 <HAL_DMA_Abort+0x20e>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4a39      	ldr	r2, [pc, #228]	; (8005d14 <HAL_DMA_Abort+0x21c>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d068      	beq.n	8005d06 <HAL_DMA_Abort+0x20e>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4a37      	ldr	r2, [pc, #220]	; (8005d18 <HAL_DMA_Abort+0x220>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d063      	beq.n	8005d06 <HAL_DMA_Abort+0x20e>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4a36      	ldr	r2, [pc, #216]	; (8005d1c <HAL_DMA_Abort+0x224>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d05e      	beq.n	8005d06 <HAL_DMA_Abort+0x20e>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4a34      	ldr	r2, [pc, #208]	; (8005d20 <HAL_DMA_Abort+0x228>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d059      	beq.n	8005d06 <HAL_DMA_Abort+0x20e>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4a33      	ldr	r2, [pc, #204]	; (8005d24 <HAL_DMA_Abort+0x22c>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d054      	beq.n	8005d06 <HAL_DMA_Abort+0x20e>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a31      	ldr	r2, [pc, #196]	; (8005d28 <HAL_DMA_Abort+0x230>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d04f      	beq.n	8005d06 <HAL_DMA_Abort+0x20e>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4a30      	ldr	r2, [pc, #192]	; (8005d2c <HAL_DMA_Abort+0x234>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d04a      	beq.n	8005d06 <HAL_DMA_Abort+0x20e>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4a2e      	ldr	r2, [pc, #184]	; (8005d30 <HAL_DMA_Abort+0x238>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d045      	beq.n	8005d06 <HAL_DMA_Abort+0x20e>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4a2d      	ldr	r2, [pc, #180]	; (8005d34 <HAL_DMA_Abort+0x23c>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d040      	beq.n	8005d06 <HAL_DMA_Abort+0x20e>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4a2b      	ldr	r2, [pc, #172]	; (8005d38 <HAL_DMA_Abort+0x240>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d03b      	beq.n	8005d06 <HAL_DMA_Abort+0x20e>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4a2a      	ldr	r2, [pc, #168]	; (8005d3c <HAL_DMA_Abort+0x244>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d036      	beq.n	8005d06 <HAL_DMA_Abort+0x20e>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4a28      	ldr	r2, [pc, #160]	; (8005d40 <HAL_DMA_Abort+0x248>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d031      	beq.n	8005d06 <HAL_DMA_Abort+0x20e>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4a27      	ldr	r2, [pc, #156]	; (8005d44 <HAL_DMA_Abort+0x24c>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d02c      	beq.n	8005d06 <HAL_DMA_Abort+0x20e>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4a25      	ldr	r2, [pc, #148]	; (8005d48 <HAL_DMA_Abort+0x250>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d027      	beq.n	8005d06 <HAL_DMA_Abort+0x20e>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a24      	ldr	r2, [pc, #144]	; (8005d4c <HAL_DMA_Abort+0x254>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d022      	beq.n	8005d06 <HAL_DMA_Abort+0x20e>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4a22      	ldr	r2, [pc, #136]	; (8005d50 <HAL_DMA_Abort+0x258>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d01d      	beq.n	8005d06 <HAL_DMA_Abort+0x20e>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a21      	ldr	r2, [pc, #132]	; (8005d54 <HAL_DMA_Abort+0x25c>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d018      	beq.n	8005d06 <HAL_DMA_Abort+0x20e>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a1f      	ldr	r2, [pc, #124]	; (8005d58 <HAL_DMA_Abort+0x260>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d013      	beq.n	8005d06 <HAL_DMA_Abort+0x20e>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4a1e      	ldr	r2, [pc, #120]	; (8005d5c <HAL_DMA_Abort+0x264>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d00e      	beq.n	8005d06 <HAL_DMA_Abort+0x20e>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a1c      	ldr	r2, [pc, #112]	; (8005d60 <HAL_DMA_Abort+0x268>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d009      	beq.n	8005d06 <HAL_DMA_Abort+0x20e>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4a1b      	ldr	r2, [pc, #108]	; (8005d64 <HAL_DMA_Abort+0x26c>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d004      	beq.n	8005d06 <HAL_DMA_Abort+0x20e>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a19      	ldr	r2, [pc, #100]	; (8005d68 <HAL_DMA_Abort+0x270>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d132      	bne.n	8005d6c <HAL_DMA_Abort+0x274>
 8005d06:	2301      	movs	r3, #1
 8005d08:	e031      	b.n	8005d6e <HAL_DMA_Abort+0x276>
 8005d0a:	bf00      	nop
 8005d0c:	40020010 	.word	0x40020010
 8005d10:	40020028 	.word	0x40020028
 8005d14:	40020040 	.word	0x40020040
 8005d18:	40020058 	.word	0x40020058
 8005d1c:	40020070 	.word	0x40020070
 8005d20:	40020088 	.word	0x40020088
 8005d24:	400200a0 	.word	0x400200a0
 8005d28:	400200b8 	.word	0x400200b8
 8005d2c:	40020410 	.word	0x40020410
 8005d30:	40020428 	.word	0x40020428
 8005d34:	40020440 	.word	0x40020440
 8005d38:	40020458 	.word	0x40020458
 8005d3c:	40020470 	.word	0x40020470
 8005d40:	40020488 	.word	0x40020488
 8005d44:	400204a0 	.word	0x400204a0
 8005d48:	400204b8 	.word	0x400204b8
 8005d4c:	58025408 	.word	0x58025408
 8005d50:	5802541c 	.word	0x5802541c
 8005d54:	58025430 	.word	0x58025430
 8005d58:	58025444 	.word	0x58025444
 8005d5c:	58025458 	.word	0x58025458
 8005d60:	5802546c 	.word	0x5802546c
 8005d64:	58025480 	.word	0x58025480
 8005d68:	58025494 	.word	0x58025494
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d007      	beq.n	8005d82 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d76:	681a      	ldr	r2, [r3, #0]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d7c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005d80:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4a6d      	ldr	r2, [pc, #436]	; (8005f3c <HAL_DMA_Abort+0x444>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d04a      	beq.n	8005e22 <HAL_DMA_Abort+0x32a>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a6b      	ldr	r2, [pc, #428]	; (8005f40 <HAL_DMA_Abort+0x448>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d045      	beq.n	8005e22 <HAL_DMA_Abort+0x32a>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a6a      	ldr	r2, [pc, #424]	; (8005f44 <HAL_DMA_Abort+0x44c>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d040      	beq.n	8005e22 <HAL_DMA_Abort+0x32a>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a68      	ldr	r2, [pc, #416]	; (8005f48 <HAL_DMA_Abort+0x450>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d03b      	beq.n	8005e22 <HAL_DMA_Abort+0x32a>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a67      	ldr	r2, [pc, #412]	; (8005f4c <HAL_DMA_Abort+0x454>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d036      	beq.n	8005e22 <HAL_DMA_Abort+0x32a>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a65      	ldr	r2, [pc, #404]	; (8005f50 <HAL_DMA_Abort+0x458>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d031      	beq.n	8005e22 <HAL_DMA_Abort+0x32a>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a64      	ldr	r2, [pc, #400]	; (8005f54 <HAL_DMA_Abort+0x45c>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d02c      	beq.n	8005e22 <HAL_DMA_Abort+0x32a>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a62      	ldr	r2, [pc, #392]	; (8005f58 <HAL_DMA_Abort+0x460>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d027      	beq.n	8005e22 <HAL_DMA_Abort+0x32a>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a61      	ldr	r2, [pc, #388]	; (8005f5c <HAL_DMA_Abort+0x464>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d022      	beq.n	8005e22 <HAL_DMA_Abort+0x32a>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a5f      	ldr	r2, [pc, #380]	; (8005f60 <HAL_DMA_Abort+0x468>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d01d      	beq.n	8005e22 <HAL_DMA_Abort+0x32a>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4a5e      	ldr	r2, [pc, #376]	; (8005f64 <HAL_DMA_Abort+0x46c>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d018      	beq.n	8005e22 <HAL_DMA_Abort+0x32a>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4a5c      	ldr	r2, [pc, #368]	; (8005f68 <HAL_DMA_Abort+0x470>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d013      	beq.n	8005e22 <HAL_DMA_Abort+0x32a>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4a5b      	ldr	r2, [pc, #364]	; (8005f6c <HAL_DMA_Abort+0x474>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d00e      	beq.n	8005e22 <HAL_DMA_Abort+0x32a>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4a59      	ldr	r2, [pc, #356]	; (8005f70 <HAL_DMA_Abort+0x478>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d009      	beq.n	8005e22 <HAL_DMA_Abort+0x32a>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a58      	ldr	r2, [pc, #352]	; (8005f74 <HAL_DMA_Abort+0x47c>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d004      	beq.n	8005e22 <HAL_DMA_Abort+0x32a>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a56      	ldr	r2, [pc, #344]	; (8005f78 <HAL_DMA_Abort+0x480>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d108      	bne.n	8005e34 <HAL_DMA_Abort+0x33c>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	681a      	ldr	r2, [r3, #0]
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f022 0201 	bic.w	r2, r2, #1
 8005e30:	601a      	str	r2, [r3, #0]
 8005e32:	e007      	b.n	8005e44 <HAL_DMA_Abort+0x34c>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	681a      	ldr	r2, [r3, #0]
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f022 0201 	bic.w	r2, r2, #1
 8005e42:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005e44:	e013      	b.n	8005e6e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005e46:	f7fd fea5 	bl	8003b94 <HAL_GetTick>
 8005e4a:	4602      	mov	r2, r0
 8005e4c:	693b      	ldr	r3, [r7, #16]
 8005e4e:	1ad3      	subs	r3, r2, r3
 8005e50:	2b05      	cmp	r3, #5
 8005e52:	d90c      	bls.n	8005e6e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2220      	movs	r2, #32
 8005e58:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2203      	movs	r2, #3
 8005e5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2200      	movs	r2, #0
 8005e66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	e12d      	b.n	80060ca <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f003 0301 	and.w	r3, r3, #1
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d1e5      	bne.n	8005e46 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4a2f      	ldr	r2, [pc, #188]	; (8005f3c <HAL_DMA_Abort+0x444>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d04a      	beq.n	8005f1a <HAL_DMA_Abort+0x422>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4a2d      	ldr	r2, [pc, #180]	; (8005f40 <HAL_DMA_Abort+0x448>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d045      	beq.n	8005f1a <HAL_DMA_Abort+0x422>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a2c      	ldr	r2, [pc, #176]	; (8005f44 <HAL_DMA_Abort+0x44c>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d040      	beq.n	8005f1a <HAL_DMA_Abort+0x422>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4a2a      	ldr	r2, [pc, #168]	; (8005f48 <HAL_DMA_Abort+0x450>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d03b      	beq.n	8005f1a <HAL_DMA_Abort+0x422>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4a29      	ldr	r2, [pc, #164]	; (8005f4c <HAL_DMA_Abort+0x454>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d036      	beq.n	8005f1a <HAL_DMA_Abort+0x422>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a27      	ldr	r2, [pc, #156]	; (8005f50 <HAL_DMA_Abort+0x458>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d031      	beq.n	8005f1a <HAL_DMA_Abort+0x422>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4a26      	ldr	r2, [pc, #152]	; (8005f54 <HAL_DMA_Abort+0x45c>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d02c      	beq.n	8005f1a <HAL_DMA_Abort+0x422>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a24      	ldr	r2, [pc, #144]	; (8005f58 <HAL_DMA_Abort+0x460>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d027      	beq.n	8005f1a <HAL_DMA_Abort+0x422>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4a23      	ldr	r2, [pc, #140]	; (8005f5c <HAL_DMA_Abort+0x464>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d022      	beq.n	8005f1a <HAL_DMA_Abort+0x422>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a21      	ldr	r2, [pc, #132]	; (8005f60 <HAL_DMA_Abort+0x468>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d01d      	beq.n	8005f1a <HAL_DMA_Abort+0x422>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4a20      	ldr	r2, [pc, #128]	; (8005f64 <HAL_DMA_Abort+0x46c>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d018      	beq.n	8005f1a <HAL_DMA_Abort+0x422>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4a1e      	ldr	r2, [pc, #120]	; (8005f68 <HAL_DMA_Abort+0x470>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d013      	beq.n	8005f1a <HAL_DMA_Abort+0x422>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4a1d      	ldr	r2, [pc, #116]	; (8005f6c <HAL_DMA_Abort+0x474>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d00e      	beq.n	8005f1a <HAL_DMA_Abort+0x422>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4a1b      	ldr	r2, [pc, #108]	; (8005f70 <HAL_DMA_Abort+0x478>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d009      	beq.n	8005f1a <HAL_DMA_Abort+0x422>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4a1a      	ldr	r2, [pc, #104]	; (8005f74 <HAL_DMA_Abort+0x47c>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d004      	beq.n	8005f1a <HAL_DMA_Abort+0x422>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4a18      	ldr	r2, [pc, #96]	; (8005f78 <HAL_DMA_Abort+0x480>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d101      	bne.n	8005f1e <HAL_DMA_Abort+0x426>
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	e000      	b.n	8005f20 <HAL_DMA_Abort+0x428>
 8005f1e:	2300      	movs	r3, #0
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d02b      	beq.n	8005f7c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f28:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f2e:	f003 031f 	and.w	r3, r3, #31
 8005f32:	223f      	movs	r2, #63	; 0x3f
 8005f34:	409a      	lsls	r2, r3
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	609a      	str	r2, [r3, #8]
 8005f3a:	e02a      	b.n	8005f92 <HAL_DMA_Abort+0x49a>
 8005f3c:	40020010 	.word	0x40020010
 8005f40:	40020028 	.word	0x40020028
 8005f44:	40020040 	.word	0x40020040
 8005f48:	40020058 	.word	0x40020058
 8005f4c:	40020070 	.word	0x40020070
 8005f50:	40020088 	.word	0x40020088
 8005f54:	400200a0 	.word	0x400200a0
 8005f58:	400200b8 	.word	0x400200b8
 8005f5c:	40020410 	.word	0x40020410
 8005f60:	40020428 	.word	0x40020428
 8005f64:	40020440 	.word	0x40020440
 8005f68:	40020458 	.word	0x40020458
 8005f6c:	40020470 	.word	0x40020470
 8005f70:	40020488 	.word	0x40020488
 8005f74:	400204a0 	.word	0x400204a0
 8005f78:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f80:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f86:	f003 031f 	and.w	r3, r3, #31
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	409a      	lsls	r2, r3
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4a4f      	ldr	r2, [pc, #316]	; (80060d4 <HAL_DMA_Abort+0x5dc>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d072      	beq.n	8006082 <HAL_DMA_Abort+0x58a>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a4d      	ldr	r2, [pc, #308]	; (80060d8 <HAL_DMA_Abort+0x5e0>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d06d      	beq.n	8006082 <HAL_DMA_Abort+0x58a>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a4c      	ldr	r2, [pc, #304]	; (80060dc <HAL_DMA_Abort+0x5e4>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d068      	beq.n	8006082 <HAL_DMA_Abort+0x58a>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4a4a      	ldr	r2, [pc, #296]	; (80060e0 <HAL_DMA_Abort+0x5e8>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d063      	beq.n	8006082 <HAL_DMA_Abort+0x58a>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4a49      	ldr	r2, [pc, #292]	; (80060e4 <HAL_DMA_Abort+0x5ec>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d05e      	beq.n	8006082 <HAL_DMA_Abort+0x58a>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a47      	ldr	r2, [pc, #284]	; (80060e8 <HAL_DMA_Abort+0x5f0>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d059      	beq.n	8006082 <HAL_DMA_Abort+0x58a>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a46      	ldr	r2, [pc, #280]	; (80060ec <HAL_DMA_Abort+0x5f4>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d054      	beq.n	8006082 <HAL_DMA_Abort+0x58a>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a44      	ldr	r2, [pc, #272]	; (80060f0 <HAL_DMA_Abort+0x5f8>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d04f      	beq.n	8006082 <HAL_DMA_Abort+0x58a>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4a43      	ldr	r2, [pc, #268]	; (80060f4 <HAL_DMA_Abort+0x5fc>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d04a      	beq.n	8006082 <HAL_DMA_Abort+0x58a>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a41      	ldr	r2, [pc, #260]	; (80060f8 <HAL_DMA_Abort+0x600>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d045      	beq.n	8006082 <HAL_DMA_Abort+0x58a>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a40      	ldr	r2, [pc, #256]	; (80060fc <HAL_DMA_Abort+0x604>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d040      	beq.n	8006082 <HAL_DMA_Abort+0x58a>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a3e      	ldr	r2, [pc, #248]	; (8006100 <HAL_DMA_Abort+0x608>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d03b      	beq.n	8006082 <HAL_DMA_Abort+0x58a>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4a3d      	ldr	r2, [pc, #244]	; (8006104 <HAL_DMA_Abort+0x60c>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d036      	beq.n	8006082 <HAL_DMA_Abort+0x58a>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a3b      	ldr	r2, [pc, #236]	; (8006108 <HAL_DMA_Abort+0x610>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d031      	beq.n	8006082 <HAL_DMA_Abort+0x58a>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4a3a      	ldr	r2, [pc, #232]	; (800610c <HAL_DMA_Abort+0x614>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d02c      	beq.n	8006082 <HAL_DMA_Abort+0x58a>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4a38      	ldr	r2, [pc, #224]	; (8006110 <HAL_DMA_Abort+0x618>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d027      	beq.n	8006082 <HAL_DMA_Abort+0x58a>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4a37      	ldr	r2, [pc, #220]	; (8006114 <HAL_DMA_Abort+0x61c>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d022      	beq.n	8006082 <HAL_DMA_Abort+0x58a>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a35      	ldr	r2, [pc, #212]	; (8006118 <HAL_DMA_Abort+0x620>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d01d      	beq.n	8006082 <HAL_DMA_Abort+0x58a>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4a34      	ldr	r2, [pc, #208]	; (800611c <HAL_DMA_Abort+0x624>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d018      	beq.n	8006082 <HAL_DMA_Abort+0x58a>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4a32      	ldr	r2, [pc, #200]	; (8006120 <HAL_DMA_Abort+0x628>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d013      	beq.n	8006082 <HAL_DMA_Abort+0x58a>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a31      	ldr	r2, [pc, #196]	; (8006124 <HAL_DMA_Abort+0x62c>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d00e      	beq.n	8006082 <HAL_DMA_Abort+0x58a>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a2f      	ldr	r2, [pc, #188]	; (8006128 <HAL_DMA_Abort+0x630>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d009      	beq.n	8006082 <HAL_DMA_Abort+0x58a>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a2e      	ldr	r2, [pc, #184]	; (800612c <HAL_DMA_Abort+0x634>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d004      	beq.n	8006082 <HAL_DMA_Abort+0x58a>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a2c      	ldr	r2, [pc, #176]	; (8006130 <HAL_DMA_Abort+0x638>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d101      	bne.n	8006086 <HAL_DMA_Abort+0x58e>
 8006082:	2301      	movs	r3, #1
 8006084:	e000      	b.n	8006088 <HAL_DMA_Abort+0x590>
 8006086:	2300      	movs	r3, #0
 8006088:	2b00      	cmp	r3, #0
 800608a:	d015      	beq.n	80060b8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006090:	687a      	ldr	r2, [r7, #4]
 8006092:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006094:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800609a:	2b00      	cmp	r3, #0
 800609c:	d00c      	beq.n	80060b8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80060a2:	681a      	ldr	r2, [r3, #0]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80060a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80060ac:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060b2:	687a      	ldr	r2, [r7, #4]
 80060b4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80060b6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2201      	movs	r2, #1
 80060bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2200      	movs	r2, #0
 80060c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80060c8:	2300      	movs	r3, #0
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	3718      	adds	r7, #24
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}
 80060d2:	bf00      	nop
 80060d4:	40020010 	.word	0x40020010
 80060d8:	40020028 	.word	0x40020028
 80060dc:	40020040 	.word	0x40020040
 80060e0:	40020058 	.word	0x40020058
 80060e4:	40020070 	.word	0x40020070
 80060e8:	40020088 	.word	0x40020088
 80060ec:	400200a0 	.word	0x400200a0
 80060f0:	400200b8 	.word	0x400200b8
 80060f4:	40020410 	.word	0x40020410
 80060f8:	40020428 	.word	0x40020428
 80060fc:	40020440 	.word	0x40020440
 8006100:	40020458 	.word	0x40020458
 8006104:	40020470 	.word	0x40020470
 8006108:	40020488 	.word	0x40020488
 800610c:	400204a0 	.word	0x400204a0
 8006110:	400204b8 	.word	0x400204b8
 8006114:	58025408 	.word	0x58025408
 8006118:	5802541c 	.word	0x5802541c
 800611c:	58025430 	.word	0x58025430
 8006120:	58025444 	.word	0x58025444
 8006124:	58025458 	.word	0x58025458
 8006128:	5802546c 	.word	0x5802546c
 800612c:	58025480 	.word	0x58025480
 8006130:	58025494 	.word	0x58025494

08006134 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b084      	sub	sp, #16
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d101      	bne.n	8006146 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8006142:	2301      	movs	r3, #1
 8006144:	e237      	b.n	80065b6 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800614c:	b2db      	uxtb	r3, r3
 800614e:	2b02      	cmp	r3, #2
 8006150:	d004      	beq.n	800615c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2280      	movs	r2, #128	; 0x80
 8006156:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006158:	2301      	movs	r3, #1
 800615a:	e22c      	b.n	80065b6 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4a5c      	ldr	r2, [pc, #368]	; (80062d4 <HAL_DMA_Abort_IT+0x1a0>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d04a      	beq.n	80061fc <HAL_DMA_Abort_IT+0xc8>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4a5b      	ldr	r2, [pc, #364]	; (80062d8 <HAL_DMA_Abort_IT+0x1a4>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d045      	beq.n	80061fc <HAL_DMA_Abort_IT+0xc8>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4a59      	ldr	r2, [pc, #356]	; (80062dc <HAL_DMA_Abort_IT+0x1a8>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d040      	beq.n	80061fc <HAL_DMA_Abort_IT+0xc8>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	4a58      	ldr	r2, [pc, #352]	; (80062e0 <HAL_DMA_Abort_IT+0x1ac>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d03b      	beq.n	80061fc <HAL_DMA_Abort_IT+0xc8>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4a56      	ldr	r2, [pc, #344]	; (80062e4 <HAL_DMA_Abort_IT+0x1b0>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d036      	beq.n	80061fc <HAL_DMA_Abort_IT+0xc8>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	4a55      	ldr	r2, [pc, #340]	; (80062e8 <HAL_DMA_Abort_IT+0x1b4>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d031      	beq.n	80061fc <HAL_DMA_Abort_IT+0xc8>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4a53      	ldr	r2, [pc, #332]	; (80062ec <HAL_DMA_Abort_IT+0x1b8>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d02c      	beq.n	80061fc <HAL_DMA_Abort_IT+0xc8>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	4a52      	ldr	r2, [pc, #328]	; (80062f0 <HAL_DMA_Abort_IT+0x1bc>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d027      	beq.n	80061fc <HAL_DMA_Abort_IT+0xc8>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4a50      	ldr	r2, [pc, #320]	; (80062f4 <HAL_DMA_Abort_IT+0x1c0>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d022      	beq.n	80061fc <HAL_DMA_Abort_IT+0xc8>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4a4f      	ldr	r2, [pc, #316]	; (80062f8 <HAL_DMA_Abort_IT+0x1c4>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d01d      	beq.n	80061fc <HAL_DMA_Abort_IT+0xc8>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	4a4d      	ldr	r2, [pc, #308]	; (80062fc <HAL_DMA_Abort_IT+0x1c8>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d018      	beq.n	80061fc <HAL_DMA_Abort_IT+0xc8>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	4a4c      	ldr	r2, [pc, #304]	; (8006300 <HAL_DMA_Abort_IT+0x1cc>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d013      	beq.n	80061fc <HAL_DMA_Abort_IT+0xc8>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	4a4a      	ldr	r2, [pc, #296]	; (8006304 <HAL_DMA_Abort_IT+0x1d0>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d00e      	beq.n	80061fc <HAL_DMA_Abort_IT+0xc8>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	4a49      	ldr	r2, [pc, #292]	; (8006308 <HAL_DMA_Abort_IT+0x1d4>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d009      	beq.n	80061fc <HAL_DMA_Abort_IT+0xc8>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	4a47      	ldr	r2, [pc, #284]	; (800630c <HAL_DMA_Abort_IT+0x1d8>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d004      	beq.n	80061fc <HAL_DMA_Abort_IT+0xc8>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	4a46      	ldr	r2, [pc, #280]	; (8006310 <HAL_DMA_Abort_IT+0x1dc>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d101      	bne.n	8006200 <HAL_DMA_Abort_IT+0xcc>
 80061fc:	2301      	movs	r3, #1
 80061fe:	e000      	b.n	8006202 <HAL_DMA_Abort_IT+0xce>
 8006200:	2300      	movs	r3, #0
 8006202:	2b00      	cmp	r3, #0
 8006204:	f000 8086 	beq.w	8006314 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2204      	movs	r2, #4
 800620c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4a2f      	ldr	r2, [pc, #188]	; (80062d4 <HAL_DMA_Abort_IT+0x1a0>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d04a      	beq.n	80062b0 <HAL_DMA_Abort_IT+0x17c>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4a2e      	ldr	r2, [pc, #184]	; (80062d8 <HAL_DMA_Abort_IT+0x1a4>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d045      	beq.n	80062b0 <HAL_DMA_Abort_IT+0x17c>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4a2c      	ldr	r2, [pc, #176]	; (80062dc <HAL_DMA_Abort_IT+0x1a8>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d040      	beq.n	80062b0 <HAL_DMA_Abort_IT+0x17c>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4a2b      	ldr	r2, [pc, #172]	; (80062e0 <HAL_DMA_Abort_IT+0x1ac>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d03b      	beq.n	80062b0 <HAL_DMA_Abort_IT+0x17c>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4a29      	ldr	r2, [pc, #164]	; (80062e4 <HAL_DMA_Abort_IT+0x1b0>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d036      	beq.n	80062b0 <HAL_DMA_Abort_IT+0x17c>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4a28      	ldr	r2, [pc, #160]	; (80062e8 <HAL_DMA_Abort_IT+0x1b4>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d031      	beq.n	80062b0 <HAL_DMA_Abort_IT+0x17c>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a26      	ldr	r2, [pc, #152]	; (80062ec <HAL_DMA_Abort_IT+0x1b8>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d02c      	beq.n	80062b0 <HAL_DMA_Abort_IT+0x17c>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a25      	ldr	r2, [pc, #148]	; (80062f0 <HAL_DMA_Abort_IT+0x1bc>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d027      	beq.n	80062b0 <HAL_DMA_Abort_IT+0x17c>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a23      	ldr	r2, [pc, #140]	; (80062f4 <HAL_DMA_Abort_IT+0x1c0>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d022      	beq.n	80062b0 <HAL_DMA_Abort_IT+0x17c>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a22      	ldr	r2, [pc, #136]	; (80062f8 <HAL_DMA_Abort_IT+0x1c4>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d01d      	beq.n	80062b0 <HAL_DMA_Abort_IT+0x17c>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a20      	ldr	r2, [pc, #128]	; (80062fc <HAL_DMA_Abort_IT+0x1c8>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d018      	beq.n	80062b0 <HAL_DMA_Abort_IT+0x17c>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4a1f      	ldr	r2, [pc, #124]	; (8006300 <HAL_DMA_Abort_IT+0x1cc>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d013      	beq.n	80062b0 <HAL_DMA_Abort_IT+0x17c>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4a1d      	ldr	r2, [pc, #116]	; (8006304 <HAL_DMA_Abort_IT+0x1d0>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d00e      	beq.n	80062b0 <HAL_DMA_Abort_IT+0x17c>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4a1c      	ldr	r2, [pc, #112]	; (8006308 <HAL_DMA_Abort_IT+0x1d4>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d009      	beq.n	80062b0 <HAL_DMA_Abort_IT+0x17c>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a1a      	ldr	r2, [pc, #104]	; (800630c <HAL_DMA_Abort_IT+0x1d8>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d004      	beq.n	80062b0 <HAL_DMA_Abort_IT+0x17c>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a19      	ldr	r2, [pc, #100]	; (8006310 <HAL_DMA_Abort_IT+0x1dc>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d108      	bne.n	80062c2 <HAL_DMA_Abort_IT+0x18e>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	681a      	ldr	r2, [r3, #0]
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f022 0201 	bic.w	r2, r2, #1
 80062be:	601a      	str	r2, [r3, #0]
 80062c0:	e178      	b.n	80065b4 <HAL_DMA_Abort_IT+0x480>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	681a      	ldr	r2, [r3, #0]
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f022 0201 	bic.w	r2, r2, #1
 80062d0:	601a      	str	r2, [r3, #0]
 80062d2:	e16f      	b.n	80065b4 <HAL_DMA_Abort_IT+0x480>
 80062d4:	40020010 	.word	0x40020010
 80062d8:	40020028 	.word	0x40020028
 80062dc:	40020040 	.word	0x40020040
 80062e0:	40020058 	.word	0x40020058
 80062e4:	40020070 	.word	0x40020070
 80062e8:	40020088 	.word	0x40020088
 80062ec:	400200a0 	.word	0x400200a0
 80062f0:	400200b8 	.word	0x400200b8
 80062f4:	40020410 	.word	0x40020410
 80062f8:	40020428 	.word	0x40020428
 80062fc:	40020440 	.word	0x40020440
 8006300:	40020458 	.word	0x40020458
 8006304:	40020470 	.word	0x40020470
 8006308:	40020488 	.word	0x40020488
 800630c:	400204a0 	.word	0x400204a0
 8006310:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	681a      	ldr	r2, [r3, #0]
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f022 020e 	bic.w	r2, r2, #14
 8006322:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4a6c      	ldr	r2, [pc, #432]	; (80064dc <HAL_DMA_Abort_IT+0x3a8>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d04a      	beq.n	80063c4 <HAL_DMA_Abort_IT+0x290>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4a6b      	ldr	r2, [pc, #428]	; (80064e0 <HAL_DMA_Abort_IT+0x3ac>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d045      	beq.n	80063c4 <HAL_DMA_Abort_IT+0x290>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4a69      	ldr	r2, [pc, #420]	; (80064e4 <HAL_DMA_Abort_IT+0x3b0>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d040      	beq.n	80063c4 <HAL_DMA_Abort_IT+0x290>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	4a68      	ldr	r2, [pc, #416]	; (80064e8 <HAL_DMA_Abort_IT+0x3b4>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d03b      	beq.n	80063c4 <HAL_DMA_Abort_IT+0x290>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4a66      	ldr	r2, [pc, #408]	; (80064ec <HAL_DMA_Abort_IT+0x3b8>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d036      	beq.n	80063c4 <HAL_DMA_Abort_IT+0x290>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	4a65      	ldr	r2, [pc, #404]	; (80064f0 <HAL_DMA_Abort_IT+0x3bc>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d031      	beq.n	80063c4 <HAL_DMA_Abort_IT+0x290>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4a63      	ldr	r2, [pc, #396]	; (80064f4 <HAL_DMA_Abort_IT+0x3c0>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d02c      	beq.n	80063c4 <HAL_DMA_Abort_IT+0x290>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4a62      	ldr	r2, [pc, #392]	; (80064f8 <HAL_DMA_Abort_IT+0x3c4>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d027      	beq.n	80063c4 <HAL_DMA_Abort_IT+0x290>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4a60      	ldr	r2, [pc, #384]	; (80064fc <HAL_DMA_Abort_IT+0x3c8>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d022      	beq.n	80063c4 <HAL_DMA_Abort_IT+0x290>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4a5f      	ldr	r2, [pc, #380]	; (8006500 <HAL_DMA_Abort_IT+0x3cc>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d01d      	beq.n	80063c4 <HAL_DMA_Abort_IT+0x290>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4a5d      	ldr	r2, [pc, #372]	; (8006504 <HAL_DMA_Abort_IT+0x3d0>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d018      	beq.n	80063c4 <HAL_DMA_Abort_IT+0x290>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4a5c      	ldr	r2, [pc, #368]	; (8006508 <HAL_DMA_Abort_IT+0x3d4>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d013      	beq.n	80063c4 <HAL_DMA_Abort_IT+0x290>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a5a      	ldr	r2, [pc, #360]	; (800650c <HAL_DMA_Abort_IT+0x3d8>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d00e      	beq.n	80063c4 <HAL_DMA_Abort_IT+0x290>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a59      	ldr	r2, [pc, #356]	; (8006510 <HAL_DMA_Abort_IT+0x3dc>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d009      	beq.n	80063c4 <HAL_DMA_Abort_IT+0x290>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4a57      	ldr	r2, [pc, #348]	; (8006514 <HAL_DMA_Abort_IT+0x3e0>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d004      	beq.n	80063c4 <HAL_DMA_Abort_IT+0x290>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4a56      	ldr	r2, [pc, #344]	; (8006518 <HAL_DMA_Abort_IT+0x3e4>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d108      	bne.n	80063d6 <HAL_DMA_Abort_IT+0x2a2>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	681a      	ldr	r2, [r3, #0]
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f022 0201 	bic.w	r2, r2, #1
 80063d2:	601a      	str	r2, [r3, #0]
 80063d4:	e007      	b.n	80063e6 <HAL_DMA_Abort_IT+0x2b2>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	681a      	ldr	r2, [r3, #0]
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f022 0201 	bic.w	r2, r2, #1
 80063e4:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4a3c      	ldr	r2, [pc, #240]	; (80064dc <HAL_DMA_Abort_IT+0x3a8>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d072      	beq.n	80064d6 <HAL_DMA_Abort_IT+0x3a2>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a3a      	ldr	r2, [pc, #232]	; (80064e0 <HAL_DMA_Abort_IT+0x3ac>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d06d      	beq.n	80064d6 <HAL_DMA_Abort_IT+0x3a2>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a39      	ldr	r2, [pc, #228]	; (80064e4 <HAL_DMA_Abort_IT+0x3b0>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d068      	beq.n	80064d6 <HAL_DMA_Abort_IT+0x3a2>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4a37      	ldr	r2, [pc, #220]	; (80064e8 <HAL_DMA_Abort_IT+0x3b4>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d063      	beq.n	80064d6 <HAL_DMA_Abort_IT+0x3a2>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4a36      	ldr	r2, [pc, #216]	; (80064ec <HAL_DMA_Abort_IT+0x3b8>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d05e      	beq.n	80064d6 <HAL_DMA_Abort_IT+0x3a2>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4a34      	ldr	r2, [pc, #208]	; (80064f0 <HAL_DMA_Abort_IT+0x3bc>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d059      	beq.n	80064d6 <HAL_DMA_Abort_IT+0x3a2>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4a33      	ldr	r2, [pc, #204]	; (80064f4 <HAL_DMA_Abort_IT+0x3c0>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d054      	beq.n	80064d6 <HAL_DMA_Abort_IT+0x3a2>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4a31      	ldr	r2, [pc, #196]	; (80064f8 <HAL_DMA_Abort_IT+0x3c4>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d04f      	beq.n	80064d6 <HAL_DMA_Abort_IT+0x3a2>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4a30      	ldr	r2, [pc, #192]	; (80064fc <HAL_DMA_Abort_IT+0x3c8>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d04a      	beq.n	80064d6 <HAL_DMA_Abort_IT+0x3a2>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4a2e      	ldr	r2, [pc, #184]	; (8006500 <HAL_DMA_Abort_IT+0x3cc>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d045      	beq.n	80064d6 <HAL_DMA_Abort_IT+0x3a2>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4a2d      	ldr	r2, [pc, #180]	; (8006504 <HAL_DMA_Abort_IT+0x3d0>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d040      	beq.n	80064d6 <HAL_DMA_Abort_IT+0x3a2>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4a2b      	ldr	r2, [pc, #172]	; (8006508 <HAL_DMA_Abort_IT+0x3d4>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d03b      	beq.n	80064d6 <HAL_DMA_Abort_IT+0x3a2>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4a2a      	ldr	r2, [pc, #168]	; (800650c <HAL_DMA_Abort_IT+0x3d8>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d036      	beq.n	80064d6 <HAL_DMA_Abort_IT+0x3a2>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a28      	ldr	r2, [pc, #160]	; (8006510 <HAL_DMA_Abort_IT+0x3dc>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d031      	beq.n	80064d6 <HAL_DMA_Abort_IT+0x3a2>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a27      	ldr	r2, [pc, #156]	; (8006514 <HAL_DMA_Abort_IT+0x3e0>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d02c      	beq.n	80064d6 <HAL_DMA_Abort_IT+0x3a2>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a25      	ldr	r2, [pc, #148]	; (8006518 <HAL_DMA_Abort_IT+0x3e4>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d027      	beq.n	80064d6 <HAL_DMA_Abort_IT+0x3a2>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a24      	ldr	r2, [pc, #144]	; (800651c <HAL_DMA_Abort_IT+0x3e8>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d022      	beq.n	80064d6 <HAL_DMA_Abort_IT+0x3a2>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a22      	ldr	r2, [pc, #136]	; (8006520 <HAL_DMA_Abort_IT+0x3ec>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d01d      	beq.n	80064d6 <HAL_DMA_Abort_IT+0x3a2>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4a21      	ldr	r2, [pc, #132]	; (8006524 <HAL_DMA_Abort_IT+0x3f0>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d018      	beq.n	80064d6 <HAL_DMA_Abort_IT+0x3a2>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4a1f      	ldr	r2, [pc, #124]	; (8006528 <HAL_DMA_Abort_IT+0x3f4>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d013      	beq.n	80064d6 <HAL_DMA_Abort_IT+0x3a2>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4a1e      	ldr	r2, [pc, #120]	; (800652c <HAL_DMA_Abort_IT+0x3f8>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d00e      	beq.n	80064d6 <HAL_DMA_Abort_IT+0x3a2>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4a1c      	ldr	r2, [pc, #112]	; (8006530 <HAL_DMA_Abort_IT+0x3fc>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d009      	beq.n	80064d6 <HAL_DMA_Abort_IT+0x3a2>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4a1b      	ldr	r2, [pc, #108]	; (8006534 <HAL_DMA_Abort_IT+0x400>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d004      	beq.n	80064d6 <HAL_DMA_Abort_IT+0x3a2>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4a19      	ldr	r2, [pc, #100]	; (8006538 <HAL_DMA_Abort_IT+0x404>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d132      	bne.n	800653c <HAL_DMA_Abort_IT+0x408>
 80064d6:	2301      	movs	r3, #1
 80064d8:	e031      	b.n	800653e <HAL_DMA_Abort_IT+0x40a>
 80064da:	bf00      	nop
 80064dc:	40020010 	.word	0x40020010
 80064e0:	40020028 	.word	0x40020028
 80064e4:	40020040 	.word	0x40020040
 80064e8:	40020058 	.word	0x40020058
 80064ec:	40020070 	.word	0x40020070
 80064f0:	40020088 	.word	0x40020088
 80064f4:	400200a0 	.word	0x400200a0
 80064f8:	400200b8 	.word	0x400200b8
 80064fc:	40020410 	.word	0x40020410
 8006500:	40020428 	.word	0x40020428
 8006504:	40020440 	.word	0x40020440
 8006508:	40020458 	.word	0x40020458
 800650c:	40020470 	.word	0x40020470
 8006510:	40020488 	.word	0x40020488
 8006514:	400204a0 	.word	0x400204a0
 8006518:	400204b8 	.word	0x400204b8
 800651c:	58025408 	.word	0x58025408
 8006520:	5802541c 	.word	0x5802541c
 8006524:	58025430 	.word	0x58025430
 8006528:	58025444 	.word	0x58025444
 800652c:	58025458 	.word	0x58025458
 8006530:	5802546c 	.word	0x5802546c
 8006534:	58025480 	.word	0x58025480
 8006538:	58025494 	.word	0x58025494
 800653c:	2300      	movs	r3, #0
 800653e:	2b00      	cmp	r3, #0
 8006540:	d028      	beq.n	8006594 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006546:	681a      	ldr	r2, [r3, #0]
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800654c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006550:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006556:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800655c:	f003 031f 	and.w	r3, r3, #31
 8006560:	2201      	movs	r2, #1
 8006562:	409a      	lsls	r2, r3
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800656c:	687a      	ldr	r2, [r7, #4]
 800656e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006570:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006576:	2b00      	cmp	r3, #0
 8006578:	d00c      	beq.n	8006594 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800657e:	681a      	ldr	r2, [r3, #0]
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006584:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006588:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800658e:	687a      	ldr	r2, [r7, #4]
 8006590:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006592:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2201      	movs	r2, #1
 8006598:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2200      	movs	r2, #0
 80065a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d003      	beq.n	80065b4 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80065b4:	2300      	movs	r3, #0
}
 80065b6:	4618      	mov	r0, r3
 80065b8:	3710      	adds	r7, #16
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bd80      	pop	{r7, pc}
 80065be:	bf00      	nop

080065c0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b08a      	sub	sp, #40	; 0x28
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80065c8:	2300      	movs	r3, #0
 80065ca:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80065cc:	4b67      	ldr	r3, [pc, #412]	; (800676c <HAL_DMA_IRQHandler+0x1ac>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4a67      	ldr	r2, [pc, #412]	; (8006770 <HAL_DMA_IRQHandler+0x1b0>)
 80065d2:	fba2 2303 	umull	r2, r3, r2, r3
 80065d6:	0a9b      	lsrs	r3, r3, #10
 80065d8:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065de:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065e4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80065e6:	6a3b      	ldr	r3, [r7, #32]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80065ec:	69fb      	ldr	r3, [r7, #28]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4a5f      	ldr	r2, [pc, #380]	; (8006774 <HAL_DMA_IRQHandler+0x1b4>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d04a      	beq.n	8006692 <HAL_DMA_IRQHandler+0xd2>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4a5d      	ldr	r2, [pc, #372]	; (8006778 <HAL_DMA_IRQHandler+0x1b8>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d045      	beq.n	8006692 <HAL_DMA_IRQHandler+0xd2>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4a5c      	ldr	r2, [pc, #368]	; (800677c <HAL_DMA_IRQHandler+0x1bc>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d040      	beq.n	8006692 <HAL_DMA_IRQHandler+0xd2>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4a5a      	ldr	r2, [pc, #360]	; (8006780 <HAL_DMA_IRQHandler+0x1c0>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d03b      	beq.n	8006692 <HAL_DMA_IRQHandler+0xd2>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	4a59      	ldr	r2, [pc, #356]	; (8006784 <HAL_DMA_IRQHandler+0x1c4>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d036      	beq.n	8006692 <HAL_DMA_IRQHandler+0xd2>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4a57      	ldr	r2, [pc, #348]	; (8006788 <HAL_DMA_IRQHandler+0x1c8>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d031      	beq.n	8006692 <HAL_DMA_IRQHandler+0xd2>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	4a56      	ldr	r2, [pc, #344]	; (800678c <HAL_DMA_IRQHandler+0x1cc>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d02c      	beq.n	8006692 <HAL_DMA_IRQHandler+0xd2>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	4a54      	ldr	r2, [pc, #336]	; (8006790 <HAL_DMA_IRQHandler+0x1d0>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d027      	beq.n	8006692 <HAL_DMA_IRQHandler+0xd2>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	4a53      	ldr	r2, [pc, #332]	; (8006794 <HAL_DMA_IRQHandler+0x1d4>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d022      	beq.n	8006692 <HAL_DMA_IRQHandler+0xd2>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4a51      	ldr	r2, [pc, #324]	; (8006798 <HAL_DMA_IRQHandler+0x1d8>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d01d      	beq.n	8006692 <HAL_DMA_IRQHandler+0xd2>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4a50      	ldr	r2, [pc, #320]	; (800679c <HAL_DMA_IRQHandler+0x1dc>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d018      	beq.n	8006692 <HAL_DMA_IRQHandler+0xd2>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	4a4e      	ldr	r2, [pc, #312]	; (80067a0 <HAL_DMA_IRQHandler+0x1e0>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d013      	beq.n	8006692 <HAL_DMA_IRQHandler+0xd2>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4a4d      	ldr	r2, [pc, #308]	; (80067a4 <HAL_DMA_IRQHandler+0x1e4>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d00e      	beq.n	8006692 <HAL_DMA_IRQHandler+0xd2>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4a4b      	ldr	r2, [pc, #300]	; (80067a8 <HAL_DMA_IRQHandler+0x1e8>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d009      	beq.n	8006692 <HAL_DMA_IRQHandler+0xd2>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4a4a      	ldr	r2, [pc, #296]	; (80067ac <HAL_DMA_IRQHandler+0x1ec>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d004      	beq.n	8006692 <HAL_DMA_IRQHandler+0xd2>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4a48      	ldr	r2, [pc, #288]	; (80067b0 <HAL_DMA_IRQHandler+0x1f0>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d101      	bne.n	8006696 <HAL_DMA_IRQHandler+0xd6>
 8006692:	2301      	movs	r3, #1
 8006694:	e000      	b.n	8006698 <HAL_DMA_IRQHandler+0xd8>
 8006696:	2300      	movs	r3, #0
 8006698:	2b00      	cmp	r3, #0
 800669a:	f000 842b 	beq.w	8006ef4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066a2:	f003 031f 	and.w	r3, r3, #31
 80066a6:	2208      	movs	r2, #8
 80066a8:	409a      	lsls	r2, r3
 80066aa:	69bb      	ldr	r3, [r7, #24]
 80066ac:	4013      	ands	r3, r2
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	f000 80a2 	beq.w	80067f8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	4a2e      	ldr	r2, [pc, #184]	; (8006774 <HAL_DMA_IRQHandler+0x1b4>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d04a      	beq.n	8006754 <HAL_DMA_IRQHandler+0x194>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4a2d      	ldr	r2, [pc, #180]	; (8006778 <HAL_DMA_IRQHandler+0x1b8>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d045      	beq.n	8006754 <HAL_DMA_IRQHandler+0x194>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4a2b      	ldr	r2, [pc, #172]	; (800677c <HAL_DMA_IRQHandler+0x1bc>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d040      	beq.n	8006754 <HAL_DMA_IRQHandler+0x194>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4a2a      	ldr	r2, [pc, #168]	; (8006780 <HAL_DMA_IRQHandler+0x1c0>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d03b      	beq.n	8006754 <HAL_DMA_IRQHandler+0x194>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4a28      	ldr	r2, [pc, #160]	; (8006784 <HAL_DMA_IRQHandler+0x1c4>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d036      	beq.n	8006754 <HAL_DMA_IRQHandler+0x194>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4a27      	ldr	r2, [pc, #156]	; (8006788 <HAL_DMA_IRQHandler+0x1c8>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d031      	beq.n	8006754 <HAL_DMA_IRQHandler+0x194>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4a25      	ldr	r2, [pc, #148]	; (800678c <HAL_DMA_IRQHandler+0x1cc>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d02c      	beq.n	8006754 <HAL_DMA_IRQHandler+0x194>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4a24      	ldr	r2, [pc, #144]	; (8006790 <HAL_DMA_IRQHandler+0x1d0>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d027      	beq.n	8006754 <HAL_DMA_IRQHandler+0x194>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4a22      	ldr	r2, [pc, #136]	; (8006794 <HAL_DMA_IRQHandler+0x1d4>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d022      	beq.n	8006754 <HAL_DMA_IRQHandler+0x194>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4a21      	ldr	r2, [pc, #132]	; (8006798 <HAL_DMA_IRQHandler+0x1d8>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d01d      	beq.n	8006754 <HAL_DMA_IRQHandler+0x194>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4a1f      	ldr	r2, [pc, #124]	; (800679c <HAL_DMA_IRQHandler+0x1dc>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d018      	beq.n	8006754 <HAL_DMA_IRQHandler+0x194>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	4a1e      	ldr	r2, [pc, #120]	; (80067a0 <HAL_DMA_IRQHandler+0x1e0>)
 8006728:	4293      	cmp	r3, r2
 800672a:	d013      	beq.n	8006754 <HAL_DMA_IRQHandler+0x194>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4a1c      	ldr	r2, [pc, #112]	; (80067a4 <HAL_DMA_IRQHandler+0x1e4>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d00e      	beq.n	8006754 <HAL_DMA_IRQHandler+0x194>
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	4a1b      	ldr	r2, [pc, #108]	; (80067a8 <HAL_DMA_IRQHandler+0x1e8>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d009      	beq.n	8006754 <HAL_DMA_IRQHandler+0x194>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	4a19      	ldr	r2, [pc, #100]	; (80067ac <HAL_DMA_IRQHandler+0x1ec>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d004      	beq.n	8006754 <HAL_DMA_IRQHandler+0x194>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	4a18      	ldr	r2, [pc, #96]	; (80067b0 <HAL_DMA_IRQHandler+0x1f0>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d12f      	bne.n	80067b4 <HAL_DMA_IRQHandler+0x1f4>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f003 0304 	and.w	r3, r3, #4
 800675e:	2b00      	cmp	r3, #0
 8006760:	bf14      	ite	ne
 8006762:	2301      	movne	r3, #1
 8006764:	2300      	moveq	r3, #0
 8006766:	b2db      	uxtb	r3, r3
 8006768:	e02e      	b.n	80067c8 <HAL_DMA_IRQHandler+0x208>
 800676a:	bf00      	nop
 800676c:	24000000 	.word	0x24000000
 8006770:	1b4e81b5 	.word	0x1b4e81b5
 8006774:	40020010 	.word	0x40020010
 8006778:	40020028 	.word	0x40020028
 800677c:	40020040 	.word	0x40020040
 8006780:	40020058 	.word	0x40020058
 8006784:	40020070 	.word	0x40020070
 8006788:	40020088 	.word	0x40020088
 800678c:	400200a0 	.word	0x400200a0
 8006790:	400200b8 	.word	0x400200b8
 8006794:	40020410 	.word	0x40020410
 8006798:	40020428 	.word	0x40020428
 800679c:	40020440 	.word	0x40020440
 80067a0:	40020458 	.word	0x40020458
 80067a4:	40020470 	.word	0x40020470
 80067a8:	40020488 	.word	0x40020488
 80067ac:	400204a0 	.word	0x400204a0
 80067b0:	400204b8 	.word	0x400204b8
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f003 0308 	and.w	r3, r3, #8
 80067be:	2b00      	cmp	r3, #0
 80067c0:	bf14      	ite	ne
 80067c2:	2301      	movne	r3, #1
 80067c4:	2300      	moveq	r3, #0
 80067c6:	b2db      	uxtb	r3, r3
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d015      	beq.n	80067f8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	681a      	ldr	r2, [r3, #0]
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f022 0204 	bic.w	r2, r2, #4
 80067da:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067e0:	f003 031f 	and.w	r3, r3, #31
 80067e4:	2208      	movs	r2, #8
 80067e6:	409a      	lsls	r2, r3
 80067e8:	6a3b      	ldr	r3, [r7, #32]
 80067ea:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067f0:	f043 0201 	orr.w	r2, r3, #1
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067fc:	f003 031f 	and.w	r3, r3, #31
 8006800:	69ba      	ldr	r2, [r7, #24]
 8006802:	fa22 f303 	lsr.w	r3, r2, r3
 8006806:	f003 0301 	and.w	r3, r3, #1
 800680a:	2b00      	cmp	r3, #0
 800680c:	d06e      	beq.n	80068ec <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	4a69      	ldr	r2, [pc, #420]	; (80069b8 <HAL_DMA_IRQHandler+0x3f8>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d04a      	beq.n	80068ae <HAL_DMA_IRQHandler+0x2ee>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4a67      	ldr	r2, [pc, #412]	; (80069bc <HAL_DMA_IRQHandler+0x3fc>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d045      	beq.n	80068ae <HAL_DMA_IRQHandler+0x2ee>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	4a66      	ldr	r2, [pc, #408]	; (80069c0 <HAL_DMA_IRQHandler+0x400>)
 8006828:	4293      	cmp	r3, r2
 800682a:	d040      	beq.n	80068ae <HAL_DMA_IRQHandler+0x2ee>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4a64      	ldr	r2, [pc, #400]	; (80069c4 <HAL_DMA_IRQHandler+0x404>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d03b      	beq.n	80068ae <HAL_DMA_IRQHandler+0x2ee>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	4a63      	ldr	r2, [pc, #396]	; (80069c8 <HAL_DMA_IRQHandler+0x408>)
 800683c:	4293      	cmp	r3, r2
 800683e:	d036      	beq.n	80068ae <HAL_DMA_IRQHandler+0x2ee>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	4a61      	ldr	r2, [pc, #388]	; (80069cc <HAL_DMA_IRQHandler+0x40c>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d031      	beq.n	80068ae <HAL_DMA_IRQHandler+0x2ee>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	4a60      	ldr	r2, [pc, #384]	; (80069d0 <HAL_DMA_IRQHandler+0x410>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d02c      	beq.n	80068ae <HAL_DMA_IRQHandler+0x2ee>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	4a5e      	ldr	r2, [pc, #376]	; (80069d4 <HAL_DMA_IRQHandler+0x414>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d027      	beq.n	80068ae <HAL_DMA_IRQHandler+0x2ee>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	4a5d      	ldr	r2, [pc, #372]	; (80069d8 <HAL_DMA_IRQHandler+0x418>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d022      	beq.n	80068ae <HAL_DMA_IRQHandler+0x2ee>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4a5b      	ldr	r2, [pc, #364]	; (80069dc <HAL_DMA_IRQHandler+0x41c>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d01d      	beq.n	80068ae <HAL_DMA_IRQHandler+0x2ee>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4a5a      	ldr	r2, [pc, #360]	; (80069e0 <HAL_DMA_IRQHandler+0x420>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d018      	beq.n	80068ae <HAL_DMA_IRQHandler+0x2ee>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4a58      	ldr	r2, [pc, #352]	; (80069e4 <HAL_DMA_IRQHandler+0x424>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d013      	beq.n	80068ae <HAL_DMA_IRQHandler+0x2ee>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4a57      	ldr	r2, [pc, #348]	; (80069e8 <HAL_DMA_IRQHandler+0x428>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d00e      	beq.n	80068ae <HAL_DMA_IRQHandler+0x2ee>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4a55      	ldr	r2, [pc, #340]	; (80069ec <HAL_DMA_IRQHandler+0x42c>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d009      	beq.n	80068ae <HAL_DMA_IRQHandler+0x2ee>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	4a54      	ldr	r2, [pc, #336]	; (80069f0 <HAL_DMA_IRQHandler+0x430>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d004      	beq.n	80068ae <HAL_DMA_IRQHandler+0x2ee>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	4a52      	ldr	r2, [pc, #328]	; (80069f4 <HAL_DMA_IRQHandler+0x434>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d10a      	bne.n	80068c4 <HAL_DMA_IRQHandler+0x304>
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	695b      	ldr	r3, [r3, #20]
 80068b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	bf14      	ite	ne
 80068bc:	2301      	movne	r3, #1
 80068be:	2300      	moveq	r3, #0
 80068c0:	b2db      	uxtb	r3, r3
 80068c2:	e003      	b.n	80068cc <HAL_DMA_IRQHandler+0x30c>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	2300      	movs	r3, #0
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d00d      	beq.n	80068ec <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068d4:	f003 031f 	and.w	r3, r3, #31
 80068d8:	2201      	movs	r2, #1
 80068da:	409a      	lsls	r2, r3
 80068dc:	6a3b      	ldr	r3, [r7, #32]
 80068de:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068e4:	f043 0202 	orr.w	r2, r3, #2
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068f0:	f003 031f 	and.w	r3, r3, #31
 80068f4:	2204      	movs	r2, #4
 80068f6:	409a      	lsls	r2, r3
 80068f8:	69bb      	ldr	r3, [r7, #24]
 80068fa:	4013      	ands	r3, r2
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	f000 808f 	beq.w	8006a20 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4a2c      	ldr	r2, [pc, #176]	; (80069b8 <HAL_DMA_IRQHandler+0x3f8>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d04a      	beq.n	80069a2 <HAL_DMA_IRQHandler+0x3e2>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	4a2a      	ldr	r2, [pc, #168]	; (80069bc <HAL_DMA_IRQHandler+0x3fc>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d045      	beq.n	80069a2 <HAL_DMA_IRQHandler+0x3e2>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	4a29      	ldr	r2, [pc, #164]	; (80069c0 <HAL_DMA_IRQHandler+0x400>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d040      	beq.n	80069a2 <HAL_DMA_IRQHandler+0x3e2>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	4a27      	ldr	r2, [pc, #156]	; (80069c4 <HAL_DMA_IRQHandler+0x404>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d03b      	beq.n	80069a2 <HAL_DMA_IRQHandler+0x3e2>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	4a26      	ldr	r2, [pc, #152]	; (80069c8 <HAL_DMA_IRQHandler+0x408>)
 8006930:	4293      	cmp	r3, r2
 8006932:	d036      	beq.n	80069a2 <HAL_DMA_IRQHandler+0x3e2>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4a24      	ldr	r2, [pc, #144]	; (80069cc <HAL_DMA_IRQHandler+0x40c>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d031      	beq.n	80069a2 <HAL_DMA_IRQHandler+0x3e2>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	4a23      	ldr	r2, [pc, #140]	; (80069d0 <HAL_DMA_IRQHandler+0x410>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d02c      	beq.n	80069a2 <HAL_DMA_IRQHandler+0x3e2>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4a21      	ldr	r2, [pc, #132]	; (80069d4 <HAL_DMA_IRQHandler+0x414>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d027      	beq.n	80069a2 <HAL_DMA_IRQHandler+0x3e2>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4a20      	ldr	r2, [pc, #128]	; (80069d8 <HAL_DMA_IRQHandler+0x418>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d022      	beq.n	80069a2 <HAL_DMA_IRQHandler+0x3e2>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4a1e      	ldr	r2, [pc, #120]	; (80069dc <HAL_DMA_IRQHandler+0x41c>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d01d      	beq.n	80069a2 <HAL_DMA_IRQHandler+0x3e2>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4a1d      	ldr	r2, [pc, #116]	; (80069e0 <HAL_DMA_IRQHandler+0x420>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d018      	beq.n	80069a2 <HAL_DMA_IRQHandler+0x3e2>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4a1b      	ldr	r2, [pc, #108]	; (80069e4 <HAL_DMA_IRQHandler+0x424>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d013      	beq.n	80069a2 <HAL_DMA_IRQHandler+0x3e2>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	4a1a      	ldr	r2, [pc, #104]	; (80069e8 <HAL_DMA_IRQHandler+0x428>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d00e      	beq.n	80069a2 <HAL_DMA_IRQHandler+0x3e2>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4a18      	ldr	r2, [pc, #96]	; (80069ec <HAL_DMA_IRQHandler+0x42c>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d009      	beq.n	80069a2 <HAL_DMA_IRQHandler+0x3e2>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	4a17      	ldr	r2, [pc, #92]	; (80069f0 <HAL_DMA_IRQHandler+0x430>)
 8006994:	4293      	cmp	r3, r2
 8006996:	d004      	beq.n	80069a2 <HAL_DMA_IRQHandler+0x3e2>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	4a15      	ldr	r2, [pc, #84]	; (80069f4 <HAL_DMA_IRQHandler+0x434>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d12a      	bne.n	80069f8 <HAL_DMA_IRQHandler+0x438>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f003 0302 	and.w	r3, r3, #2
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	bf14      	ite	ne
 80069b0:	2301      	movne	r3, #1
 80069b2:	2300      	moveq	r3, #0
 80069b4:	b2db      	uxtb	r3, r3
 80069b6:	e023      	b.n	8006a00 <HAL_DMA_IRQHandler+0x440>
 80069b8:	40020010 	.word	0x40020010
 80069bc:	40020028 	.word	0x40020028
 80069c0:	40020040 	.word	0x40020040
 80069c4:	40020058 	.word	0x40020058
 80069c8:	40020070 	.word	0x40020070
 80069cc:	40020088 	.word	0x40020088
 80069d0:	400200a0 	.word	0x400200a0
 80069d4:	400200b8 	.word	0x400200b8
 80069d8:	40020410 	.word	0x40020410
 80069dc:	40020428 	.word	0x40020428
 80069e0:	40020440 	.word	0x40020440
 80069e4:	40020458 	.word	0x40020458
 80069e8:	40020470 	.word	0x40020470
 80069ec:	40020488 	.word	0x40020488
 80069f0:	400204a0 	.word	0x400204a0
 80069f4:	400204b8 	.word	0x400204b8
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	2300      	movs	r3, #0
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d00d      	beq.n	8006a20 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a08:	f003 031f 	and.w	r3, r3, #31
 8006a0c:	2204      	movs	r2, #4
 8006a0e:	409a      	lsls	r2, r3
 8006a10:	6a3b      	ldr	r3, [r7, #32]
 8006a12:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a18:	f043 0204 	orr.w	r2, r3, #4
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a24:	f003 031f 	and.w	r3, r3, #31
 8006a28:	2210      	movs	r2, #16
 8006a2a:	409a      	lsls	r2, r3
 8006a2c:	69bb      	ldr	r3, [r7, #24]
 8006a2e:	4013      	ands	r3, r2
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	f000 80a6 	beq.w	8006b82 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4a85      	ldr	r2, [pc, #532]	; (8006c50 <HAL_DMA_IRQHandler+0x690>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d04a      	beq.n	8006ad6 <HAL_DMA_IRQHandler+0x516>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	4a83      	ldr	r2, [pc, #524]	; (8006c54 <HAL_DMA_IRQHandler+0x694>)
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d045      	beq.n	8006ad6 <HAL_DMA_IRQHandler+0x516>
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	4a82      	ldr	r2, [pc, #520]	; (8006c58 <HAL_DMA_IRQHandler+0x698>)
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d040      	beq.n	8006ad6 <HAL_DMA_IRQHandler+0x516>
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	4a80      	ldr	r2, [pc, #512]	; (8006c5c <HAL_DMA_IRQHandler+0x69c>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d03b      	beq.n	8006ad6 <HAL_DMA_IRQHandler+0x516>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	4a7f      	ldr	r2, [pc, #508]	; (8006c60 <HAL_DMA_IRQHandler+0x6a0>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d036      	beq.n	8006ad6 <HAL_DMA_IRQHandler+0x516>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	4a7d      	ldr	r2, [pc, #500]	; (8006c64 <HAL_DMA_IRQHandler+0x6a4>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d031      	beq.n	8006ad6 <HAL_DMA_IRQHandler+0x516>
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4a7c      	ldr	r2, [pc, #496]	; (8006c68 <HAL_DMA_IRQHandler+0x6a8>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d02c      	beq.n	8006ad6 <HAL_DMA_IRQHandler+0x516>
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	4a7a      	ldr	r2, [pc, #488]	; (8006c6c <HAL_DMA_IRQHandler+0x6ac>)
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d027      	beq.n	8006ad6 <HAL_DMA_IRQHandler+0x516>
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4a79      	ldr	r2, [pc, #484]	; (8006c70 <HAL_DMA_IRQHandler+0x6b0>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d022      	beq.n	8006ad6 <HAL_DMA_IRQHandler+0x516>
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4a77      	ldr	r2, [pc, #476]	; (8006c74 <HAL_DMA_IRQHandler+0x6b4>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d01d      	beq.n	8006ad6 <HAL_DMA_IRQHandler+0x516>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	4a76      	ldr	r2, [pc, #472]	; (8006c78 <HAL_DMA_IRQHandler+0x6b8>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d018      	beq.n	8006ad6 <HAL_DMA_IRQHandler+0x516>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	4a74      	ldr	r2, [pc, #464]	; (8006c7c <HAL_DMA_IRQHandler+0x6bc>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d013      	beq.n	8006ad6 <HAL_DMA_IRQHandler+0x516>
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	4a73      	ldr	r2, [pc, #460]	; (8006c80 <HAL_DMA_IRQHandler+0x6c0>)
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d00e      	beq.n	8006ad6 <HAL_DMA_IRQHandler+0x516>
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	4a71      	ldr	r2, [pc, #452]	; (8006c84 <HAL_DMA_IRQHandler+0x6c4>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d009      	beq.n	8006ad6 <HAL_DMA_IRQHandler+0x516>
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	4a70      	ldr	r2, [pc, #448]	; (8006c88 <HAL_DMA_IRQHandler+0x6c8>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d004      	beq.n	8006ad6 <HAL_DMA_IRQHandler+0x516>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	4a6e      	ldr	r2, [pc, #440]	; (8006c8c <HAL_DMA_IRQHandler+0x6cc>)
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d10a      	bne.n	8006aec <HAL_DMA_IRQHandler+0x52c>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f003 0308 	and.w	r3, r3, #8
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	bf14      	ite	ne
 8006ae4:	2301      	movne	r3, #1
 8006ae6:	2300      	moveq	r3, #0
 8006ae8:	b2db      	uxtb	r3, r3
 8006aea:	e009      	b.n	8006b00 <HAL_DMA_IRQHandler+0x540>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f003 0304 	and.w	r3, r3, #4
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	bf14      	ite	ne
 8006afa:	2301      	movne	r3, #1
 8006afc:	2300      	moveq	r3, #0
 8006afe:	b2db      	uxtb	r3, r3
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d03e      	beq.n	8006b82 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b08:	f003 031f 	and.w	r3, r3, #31
 8006b0c:	2210      	movs	r2, #16
 8006b0e:	409a      	lsls	r2, r3
 8006b10:	6a3b      	ldr	r3, [r7, #32]
 8006b12:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d018      	beq.n	8006b54 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d108      	bne.n	8006b42 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d024      	beq.n	8006b82 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b3c:	6878      	ldr	r0, [r7, #4]
 8006b3e:	4798      	blx	r3
 8006b40:	e01f      	b.n	8006b82 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d01b      	beq.n	8006b82 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	4798      	blx	r3
 8006b52:	e016      	b.n	8006b82 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d107      	bne.n	8006b72 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	681a      	ldr	r2, [r3, #0]
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f022 0208 	bic.w	r2, r2, #8
 8006b70:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d003      	beq.n	8006b82 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b86:	f003 031f 	and.w	r3, r3, #31
 8006b8a:	2220      	movs	r2, #32
 8006b8c:	409a      	lsls	r2, r3
 8006b8e:	69bb      	ldr	r3, [r7, #24]
 8006b90:	4013      	ands	r3, r2
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	f000 8110 	beq.w	8006db8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	4a2c      	ldr	r2, [pc, #176]	; (8006c50 <HAL_DMA_IRQHandler+0x690>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d04a      	beq.n	8006c38 <HAL_DMA_IRQHandler+0x678>
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	4a2b      	ldr	r2, [pc, #172]	; (8006c54 <HAL_DMA_IRQHandler+0x694>)
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d045      	beq.n	8006c38 <HAL_DMA_IRQHandler+0x678>
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4a29      	ldr	r2, [pc, #164]	; (8006c58 <HAL_DMA_IRQHandler+0x698>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d040      	beq.n	8006c38 <HAL_DMA_IRQHandler+0x678>
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4a28      	ldr	r2, [pc, #160]	; (8006c5c <HAL_DMA_IRQHandler+0x69c>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d03b      	beq.n	8006c38 <HAL_DMA_IRQHandler+0x678>
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4a26      	ldr	r2, [pc, #152]	; (8006c60 <HAL_DMA_IRQHandler+0x6a0>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d036      	beq.n	8006c38 <HAL_DMA_IRQHandler+0x678>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	4a25      	ldr	r2, [pc, #148]	; (8006c64 <HAL_DMA_IRQHandler+0x6a4>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d031      	beq.n	8006c38 <HAL_DMA_IRQHandler+0x678>
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4a23      	ldr	r2, [pc, #140]	; (8006c68 <HAL_DMA_IRQHandler+0x6a8>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d02c      	beq.n	8006c38 <HAL_DMA_IRQHandler+0x678>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	4a22      	ldr	r2, [pc, #136]	; (8006c6c <HAL_DMA_IRQHandler+0x6ac>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d027      	beq.n	8006c38 <HAL_DMA_IRQHandler+0x678>
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	4a20      	ldr	r2, [pc, #128]	; (8006c70 <HAL_DMA_IRQHandler+0x6b0>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d022      	beq.n	8006c38 <HAL_DMA_IRQHandler+0x678>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4a1f      	ldr	r2, [pc, #124]	; (8006c74 <HAL_DMA_IRQHandler+0x6b4>)
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d01d      	beq.n	8006c38 <HAL_DMA_IRQHandler+0x678>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4a1d      	ldr	r2, [pc, #116]	; (8006c78 <HAL_DMA_IRQHandler+0x6b8>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d018      	beq.n	8006c38 <HAL_DMA_IRQHandler+0x678>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4a1c      	ldr	r2, [pc, #112]	; (8006c7c <HAL_DMA_IRQHandler+0x6bc>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d013      	beq.n	8006c38 <HAL_DMA_IRQHandler+0x678>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4a1a      	ldr	r2, [pc, #104]	; (8006c80 <HAL_DMA_IRQHandler+0x6c0>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d00e      	beq.n	8006c38 <HAL_DMA_IRQHandler+0x678>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	4a19      	ldr	r2, [pc, #100]	; (8006c84 <HAL_DMA_IRQHandler+0x6c4>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d009      	beq.n	8006c38 <HAL_DMA_IRQHandler+0x678>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4a17      	ldr	r2, [pc, #92]	; (8006c88 <HAL_DMA_IRQHandler+0x6c8>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d004      	beq.n	8006c38 <HAL_DMA_IRQHandler+0x678>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	4a16      	ldr	r2, [pc, #88]	; (8006c8c <HAL_DMA_IRQHandler+0x6cc>)
 8006c34:	4293      	cmp	r3, r2
 8006c36:	d12b      	bne.n	8006c90 <HAL_DMA_IRQHandler+0x6d0>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f003 0310 	and.w	r3, r3, #16
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	bf14      	ite	ne
 8006c46:	2301      	movne	r3, #1
 8006c48:	2300      	moveq	r3, #0
 8006c4a:	b2db      	uxtb	r3, r3
 8006c4c:	e02a      	b.n	8006ca4 <HAL_DMA_IRQHandler+0x6e4>
 8006c4e:	bf00      	nop
 8006c50:	40020010 	.word	0x40020010
 8006c54:	40020028 	.word	0x40020028
 8006c58:	40020040 	.word	0x40020040
 8006c5c:	40020058 	.word	0x40020058
 8006c60:	40020070 	.word	0x40020070
 8006c64:	40020088 	.word	0x40020088
 8006c68:	400200a0 	.word	0x400200a0
 8006c6c:	400200b8 	.word	0x400200b8
 8006c70:	40020410 	.word	0x40020410
 8006c74:	40020428 	.word	0x40020428
 8006c78:	40020440 	.word	0x40020440
 8006c7c:	40020458 	.word	0x40020458
 8006c80:	40020470 	.word	0x40020470
 8006c84:	40020488 	.word	0x40020488
 8006c88:	400204a0 	.word	0x400204a0
 8006c8c:	400204b8 	.word	0x400204b8
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f003 0302 	and.w	r3, r3, #2
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	bf14      	ite	ne
 8006c9e:	2301      	movne	r3, #1
 8006ca0:	2300      	moveq	r3, #0
 8006ca2:	b2db      	uxtb	r3, r3
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	f000 8087 	beq.w	8006db8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cae:	f003 031f 	and.w	r3, r3, #31
 8006cb2:	2220      	movs	r2, #32
 8006cb4:	409a      	lsls	r2, r3
 8006cb6:	6a3b      	ldr	r3, [r7, #32]
 8006cb8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006cc0:	b2db      	uxtb	r3, r3
 8006cc2:	2b04      	cmp	r3, #4
 8006cc4:	d139      	bne.n	8006d3a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	681a      	ldr	r2, [r3, #0]
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f022 0216 	bic.w	r2, r2, #22
 8006cd4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	695a      	ldr	r2, [r3, #20]
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006ce4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d103      	bne.n	8006cf6 <HAL_DMA_IRQHandler+0x736>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d007      	beq.n	8006d06 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	681a      	ldr	r2, [r3, #0]
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f022 0208 	bic.w	r2, r2, #8
 8006d04:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d0a:	f003 031f 	and.w	r3, r3, #31
 8006d0e:	223f      	movs	r2, #63	; 0x3f
 8006d10:	409a      	lsls	r2, r3
 8006d12:	6a3b      	ldr	r3, [r7, #32]
 8006d14:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2201      	movs	r2, #1
 8006d1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2200      	movs	r2, #0
 8006d22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	f000 834a 	beq.w	80073c4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d34:	6878      	ldr	r0, [r7, #4]
 8006d36:	4798      	blx	r3
          }
          return;
 8006d38:	e344      	b.n	80073c4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d018      	beq.n	8006d7a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d108      	bne.n	8006d68 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d02c      	beq.n	8006db8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	4798      	blx	r3
 8006d66:	e027      	b.n	8006db8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d023      	beq.n	8006db8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d74:	6878      	ldr	r0, [r7, #4]
 8006d76:	4798      	blx	r3
 8006d78:	e01e      	b.n	8006db8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d10f      	bne.n	8006da8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	681a      	ldr	r2, [r3, #0]
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f022 0210 	bic.w	r2, r2, #16
 8006d96:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2201      	movs	r2, #1
 8006d9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2200      	movs	r2, #0
 8006da4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d003      	beq.n	8006db8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	f000 8306 	beq.w	80073ce <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dc6:	f003 0301 	and.w	r3, r3, #1
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	f000 8088 	beq.w	8006ee0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2204      	movs	r2, #4
 8006dd4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	4a7a      	ldr	r2, [pc, #488]	; (8006fc8 <HAL_DMA_IRQHandler+0xa08>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d04a      	beq.n	8006e78 <HAL_DMA_IRQHandler+0x8b8>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	4a79      	ldr	r2, [pc, #484]	; (8006fcc <HAL_DMA_IRQHandler+0xa0c>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d045      	beq.n	8006e78 <HAL_DMA_IRQHandler+0x8b8>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4a77      	ldr	r2, [pc, #476]	; (8006fd0 <HAL_DMA_IRQHandler+0xa10>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d040      	beq.n	8006e78 <HAL_DMA_IRQHandler+0x8b8>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4a76      	ldr	r2, [pc, #472]	; (8006fd4 <HAL_DMA_IRQHandler+0xa14>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d03b      	beq.n	8006e78 <HAL_DMA_IRQHandler+0x8b8>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	4a74      	ldr	r2, [pc, #464]	; (8006fd8 <HAL_DMA_IRQHandler+0xa18>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d036      	beq.n	8006e78 <HAL_DMA_IRQHandler+0x8b8>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	4a73      	ldr	r2, [pc, #460]	; (8006fdc <HAL_DMA_IRQHandler+0xa1c>)
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d031      	beq.n	8006e78 <HAL_DMA_IRQHandler+0x8b8>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	4a71      	ldr	r2, [pc, #452]	; (8006fe0 <HAL_DMA_IRQHandler+0xa20>)
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d02c      	beq.n	8006e78 <HAL_DMA_IRQHandler+0x8b8>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	4a70      	ldr	r2, [pc, #448]	; (8006fe4 <HAL_DMA_IRQHandler+0xa24>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d027      	beq.n	8006e78 <HAL_DMA_IRQHandler+0x8b8>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	4a6e      	ldr	r2, [pc, #440]	; (8006fe8 <HAL_DMA_IRQHandler+0xa28>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d022      	beq.n	8006e78 <HAL_DMA_IRQHandler+0x8b8>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	4a6d      	ldr	r2, [pc, #436]	; (8006fec <HAL_DMA_IRQHandler+0xa2c>)
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	d01d      	beq.n	8006e78 <HAL_DMA_IRQHandler+0x8b8>
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	4a6b      	ldr	r2, [pc, #428]	; (8006ff0 <HAL_DMA_IRQHandler+0xa30>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d018      	beq.n	8006e78 <HAL_DMA_IRQHandler+0x8b8>
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	4a6a      	ldr	r2, [pc, #424]	; (8006ff4 <HAL_DMA_IRQHandler+0xa34>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d013      	beq.n	8006e78 <HAL_DMA_IRQHandler+0x8b8>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	4a68      	ldr	r2, [pc, #416]	; (8006ff8 <HAL_DMA_IRQHandler+0xa38>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d00e      	beq.n	8006e78 <HAL_DMA_IRQHandler+0x8b8>
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	4a67      	ldr	r2, [pc, #412]	; (8006ffc <HAL_DMA_IRQHandler+0xa3c>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d009      	beq.n	8006e78 <HAL_DMA_IRQHandler+0x8b8>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	4a65      	ldr	r2, [pc, #404]	; (8007000 <HAL_DMA_IRQHandler+0xa40>)
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	d004      	beq.n	8006e78 <HAL_DMA_IRQHandler+0x8b8>
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	4a64      	ldr	r2, [pc, #400]	; (8007004 <HAL_DMA_IRQHandler+0xa44>)
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d108      	bne.n	8006e8a <HAL_DMA_IRQHandler+0x8ca>
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	681a      	ldr	r2, [r3, #0]
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f022 0201 	bic.w	r2, r2, #1
 8006e86:	601a      	str	r2, [r3, #0]
 8006e88:	e007      	b.n	8006e9a <HAL_DMA_IRQHandler+0x8da>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	681a      	ldr	r2, [r3, #0]
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f022 0201 	bic.w	r2, r2, #1
 8006e98:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	3301      	adds	r3, #1
 8006e9e:	60fb      	str	r3, [r7, #12]
 8006ea0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ea2:	429a      	cmp	r2, r3
 8006ea4:	d307      	bcc.n	8006eb6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f003 0301 	and.w	r3, r3, #1
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d1f2      	bne.n	8006e9a <HAL_DMA_IRQHandler+0x8da>
 8006eb4:	e000      	b.n	8006eb8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8006eb6:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f003 0301 	and.w	r3, r3, #1
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d004      	beq.n	8006ed0 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2203      	movs	r2, #3
 8006eca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8006ece:	e003      	b.n	8006ed8 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2201      	movs	r2, #1
 8006ed4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2200      	movs	r2, #0
 8006edc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	f000 8272 	beq.w	80073ce <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	4798      	blx	r3
 8006ef2:	e26c      	b.n	80073ce <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	4a43      	ldr	r2, [pc, #268]	; (8007008 <HAL_DMA_IRQHandler+0xa48>)
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d022      	beq.n	8006f44 <HAL_DMA_IRQHandler+0x984>
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	4a42      	ldr	r2, [pc, #264]	; (800700c <HAL_DMA_IRQHandler+0xa4c>)
 8006f04:	4293      	cmp	r3, r2
 8006f06:	d01d      	beq.n	8006f44 <HAL_DMA_IRQHandler+0x984>
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	4a40      	ldr	r2, [pc, #256]	; (8007010 <HAL_DMA_IRQHandler+0xa50>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d018      	beq.n	8006f44 <HAL_DMA_IRQHandler+0x984>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	4a3f      	ldr	r2, [pc, #252]	; (8007014 <HAL_DMA_IRQHandler+0xa54>)
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d013      	beq.n	8006f44 <HAL_DMA_IRQHandler+0x984>
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	4a3d      	ldr	r2, [pc, #244]	; (8007018 <HAL_DMA_IRQHandler+0xa58>)
 8006f22:	4293      	cmp	r3, r2
 8006f24:	d00e      	beq.n	8006f44 <HAL_DMA_IRQHandler+0x984>
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	4a3c      	ldr	r2, [pc, #240]	; (800701c <HAL_DMA_IRQHandler+0xa5c>)
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	d009      	beq.n	8006f44 <HAL_DMA_IRQHandler+0x984>
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	4a3a      	ldr	r2, [pc, #232]	; (8007020 <HAL_DMA_IRQHandler+0xa60>)
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d004      	beq.n	8006f44 <HAL_DMA_IRQHandler+0x984>
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	4a39      	ldr	r2, [pc, #228]	; (8007024 <HAL_DMA_IRQHandler+0xa64>)
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d101      	bne.n	8006f48 <HAL_DMA_IRQHandler+0x988>
 8006f44:	2301      	movs	r3, #1
 8006f46:	e000      	b.n	8006f4a <HAL_DMA_IRQHandler+0x98a>
 8006f48:	2300      	movs	r3, #0
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	f000 823f 	beq.w	80073ce <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f5c:	f003 031f 	and.w	r3, r3, #31
 8006f60:	2204      	movs	r2, #4
 8006f62:	409a      	lsls	r2, r3
 8006f64:	697b      	ldr	r3, [r7, #20]
 8006f66:	4013      	ands	r3, r2
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	f000 80cd 	beq.w	8007108 <HAL_DMA_IRQHandler+0xb48>
 8006f6e:	693b      	ldr	r3, [r7, #16]
 8006f70:	f003 0304 	and.w	r3, r3, #4
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	f000 80c7 	beq.w	8007108 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f7e:	f003 031f 	and.w	r3, r3, #31
 8006f82:	2204      	movs	r2, #4
 8006f84:	409a      	lsls	r2, r3
 8006f86:	69fb      	ldr	r3, [r7, #28]
 8006f88:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006f8a:	693b      	ldr	r3, [r7, #16]
 8006f8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d049      	beq.n	8007028 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006f94:	693b      	ldr	r3, [r7, #16]
 8006f96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d109      	bne.n	8006fb2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	f000 8210 	beq.w	80073c8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006fac:	6878      	ldr	r0, [r7, #4]
 8006fae:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006fb0:	e20a      	b.n	80073c8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	f000 8206 	beq.w	80073c8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fc0:	6878      	ldr	r0, [r7, #4]
 8006fc2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006fc4:	e200      	b.n	80073c8 <HAL_DMA_IRQHandler+0xe08>
 8006fc6:	bf00      	nop
 8006fc8:	40020010 	.word	0x40020010
 8006fcc:	40020028 	.word	0x40020028
 8006fd0:	40020040 	.word	0x40020040
 8006fd4:	40020058 	.word	0x40020058
 8006fd8:	40020070 	.word	0x40020070
 8006fdc:	40020088 	.word	0x40020088
 8006fe0:	400200a0 	.word	0x400200a0
 8006fe4:	400200b8 	.word	0x400200b8
 8006fe8:	40020410 	.word	0x40020410
 8006fec:	40020428 	.word	0x40020428
 8006ff0:	40020440 	.word	0x40020440
 8006ff4:	40020458 	.word	0x40020458
 8006ff8:	40020470 	.word	0x40020470
 8006ffc:	40020488 	.word	0x40020488
 8007000:	400204a0 	.word	0x400204a0
 8007004:	400204b8 	.word	0x400204b8
 8007008:	58025408 	.word	0x58025408
 800700c:	5802541c 	.word	0x5802541c
 8007010:	58025430 	.word	0x58025430
 8007014:	58025444 	.word	0x58025444
 8007018:	58025458 	.word	0x58025458
 800701c:	5802546c 	.word	0x5802546c
 8007020:	58025480 	.word	0x58025480
 8007024:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007028:	693b      	ldr	r3, [r7, #16]
 800702a:	f003 0320 	and.w	r3, r3, #32
 800702e:	2b00      	cmp	r3, #0
 8007030:	d160      	bne.n	80070f4 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	4a7f      	ldr	r2, [pc, #508]	; (8007234 <HAL_DMA_IRQHandler+0xc74>)
 8007038:	4293      	cmp	r3, r2
 800703a:	d04a      	beq.n	80070d2 <HAL_DMA_IRQHandler+0xb12>
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	4a7d      	ldr	r2, [pc, #500]	; (8007238 <HAL_DMA_IRQHandler+0xc78>)
 8007042:	4293      	cmp	r3, r2
 8007044:	d045      	beq.n	80070d2 <HAL_DMA_IRQHandler+0xb12>
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	4a7c      	ldr	r2, [pc, #496]	; (800723c <HAL_DMA_IRQHandler+0xc7c>)
 800704c:	4293      	cmp	r3, r2
 800704e:	d040      	beq.n	80070d2 <HAL_DMA_IRQHandler+0xb12>
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	4a7a      	ldr	r2, [pc, #488]	; (8007240 <HAL_DMA_IRQHandler+0xc80>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d03b      	beq.n	80070d2 <HAL_DMA_IRQHandler+0xb12>
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	4a79      	ldr	r2, [pc, #484]	; (8007244 <HAL_DMA_IRQHandler+0xc84>)
 8007060:	4293      	cmp	r3, r2
 8007062:	d036      	beq.n	80070d2 <HAL_DMA_IRQHandler+0xb12>
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	4a77      	ldr	r2, [pc, #476]	; (8007248 <HAL_DMA_IRQHandler+0xc88>)
 800706a:	4293      	cmp	r3, r2
 800706c:	d031      	beq.n	80070d2 <HAL_DMA_IRQHandler+0xb12>
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	4a76      	ldr	r2, [pc, #472]	; (800724c <HAL_DMA_IRQHandler+0xc8c>)
 8007074:	4293      	cmp	r3, r2
 8007076:	d02c      	beq.n	80070d2 <HAL_DMA_IRQHandler+0xb12>
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	4a74      	ldr	r2, [pc, #464]	; (8007250 <HAL_DMA_IRQHandler+0xc90>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d027      	beq.n	80070d2 <HAL_DMA_IRQHandler+0xb12>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	4a73      	ldr	r2, [pc, #460]	; (8007254 <HAL_DMA_IRQHandler+0xc94>)
 8007088:	4293      	cmp	r3, r2
 800708a:	d022      	beq.n	80070d2 <HAL_DMA_IRQHandler+0xb12>
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	4a71      	ldr	r2, [pc, #452]	; (8007258 <HAL_DMA_IRQHandler+0xc98>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d01d      	beq.n	80070d2 <HAL_DMA_IRQHandler+0xb12>
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	4a70      	ldr	r2, [pc, #448]	; (800725c <HAL_DMA_IRQHandler+0xc9c>)
 800709c:	4293      	cmp	r3, r2
 800709e:	d018      	beq.n	80070d2 <HAL_DMA_IRQHandler+0xb12>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	4a6e      	ldr	r2, [pc, #440]	; (8007260 <HAL_DMA_IRQHandler+0xca0>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d013      	beq.n	80070d2 <HAL_DMA_IRQHandler+0xb12>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	4a6d      	ldr	r2, [pc, #436]	; (8007264 <HAL_DMA_IRQHandler+0xca4>)
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d00e      	beq.n	80070d2 <HAL_DMA_IRQHandler+0xb12>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	4a6b      	ldr	r2, [pc, #428]	; (8007268 <HAL_DMA_IRQHandler+0xca8>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d009      	beq.n	80070d2 <HAL_DMA_IRQHandler+0xb12>
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	4a6a      	ldr	r2, [pc, #424]	; (800726c <HAL_DMA_IRQHandler+0xcac>)
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d004      	beq.n	80070d2 <HAL_DMA_IRQHandler+0xb12>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	4a68      	ldr	r2, [pc, #416]	; (8007270 <HAL_DMA_IRQHandler+0xcb0>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d108      	bne.n	80070e4 <HAL_DMA_IRQHandler+0xb24>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	681a      	ldr	r2, [r3, #0]
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f022 0208 	bic.w	r2, r2, #8
 80070e0:	601a      	str	r2, [r3, #0]
 80070e2:	e007      	b.n	80070f4 <HAL_DMA_IRQHandler+0xb34>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	681a      	ldr	r2, [r3, #0]
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f022 0204 	bic.w	r2, r2, #4
 80070f2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	f000 8165 	beq.w	80073c8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007106:	e15f      	b.n	80073c8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800710c:	f003 031f 	and.w	r3, r3, #31
 8007110:	2202      	movs	r2, #2
 8007112:	409a      	lsls	r2, r3
 8007114:	697b      	ldr	r3, [r7, #20]
 8007116:	4013      	ands	r3, r2
 8007118:	2b00      	cmp	r3, #0
 800711a:	f000 80c5 	beq.w	80072a8 <HAL_DMA_IRQHandler+0xce8>
 800711e:	693b      	ldr	r3, [r7, #16]
 8007120:	f003 0302 	and.w	r3, r3, #2
 8007124:	2b00      	cmp	r3, #0
 8007126:	f000 80bf 	beq.w	80072a8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800712e:	f003 031f 	and.w	r3, r3, #31
 8007132:	2202      	movs	r2, #2
 8007134:	409a      	lsls	r2, r3
 8007136:	69fb      	ldr	r3, [r7, #28]
 8007138:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800713a:	693b      	ldr	r3, [r7, #16]
 800713c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007140:	2b00      	cmp	r3, #0
 8007142:	d018      	beq.n	8007176 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007144:	693b      	ldr	r3, [r7, #16]
 8007146:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800714a:	2b00      	cmp	r3, #0
 800714c:	d109      	bne.n	8007162 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007152:	2b00      	cmp	r3, #0
 8007154:	f000 813a 	beq.w	80073cc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800715c:	6878      	ldr	r0, [r7, #4]
 800715e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007160:	e134      	b.n	80073cc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007166:	2b00      	cmp	r3, #0
 8007168:	f000 8130 	beq.w	80073cc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007170:	6878      	ldr	r0, [r7, #4]
 8007172:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007174:	e12a      	b.n	80073cc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007176:	693b      	ldr	r3, [r7, #16]
 8007178:	f003 0320 	and.w	r3, r3, #32
 800717c:	2b00      	cmp	r3, #0
 800717e:	f040 8089 	bne.w	8007294 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	4a2b      	ldr	r2, [pc, #172]	; (8007234 <HAL_DMA_IRQHandler+0xc74>)
 8007188:	4293      	cmp	r3, r2
 800718a:	d04a      	beq.n	8007222 <HAL_DMA_IRQHandler+0xc62>
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	4a29      	ldr	r2, [pc, #164]	; (8007238 <HAL_DMA_IRQHandler+0xc78>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d045      	beq.n	8007222 <HAL_DMA_IRQHandler+0xc62>
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	4a28      	ldr	r2, [pc, #160]	; (800723c <HAL_DMA_IRQHandler+0xc7c>)
 800719c:	4293      	cmp	r3, r2
 800719e:	d040      	beq.n	8007222 <HAL_DMA_IRQHandler+0xc62>
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	4a26      	ldr	r2, [pc, #152]	; (8007240 <HAL_DMA_IRQHandler+0xc80>)
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d03b      	beq.n	8007222 <HAL_DMA_IRQHandler+0xc62>
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	4a25      	ldr	r2, [pc, #148]	; (8007244 <HAL_DMA_IRQHandler+0xc84>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d036      	beq.n	8007222 <HAL_DMA_IRQHandler+0xc62>
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	4a23      	ldr	r2, [pc, #140]	; (8007248 <HAL_DMA_IRQHandler+0xc88>)
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d031      	beq.n	8007222 <HAL_DMA_IRQHandler+0xc62>
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	4a22      	ldr	r2, [pc, #136]	; (800724c <HAL_DMA_IRQHandler+0xc8c>)
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d02c      	beq.n	8007222 <HAL_DMA_IRQHandler+0xc62>
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	4a20      	ldr	r2, [pc, #128]	; (8007250 <HAL_DMA_IRQHandler+0xc90>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d027      	beq.n	8007222 <HAL_DMA_IRQHandler+0xc62>
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	4a1f      	ldr	r2, [pc, #124]	; (8007254 <HAL_DMA_IRQHandler+0xc94>)
 80071d8:	4293      	cmp	r3, r2
 80071da:	d022      	beq.n	8007222 <HAL_DMA_IRQHandler+0xc62>
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	4a1d      	ldr	r2, [pc, #116]	; (8007258 <HAL_DMA_IRQHandler+0xc98>)
 80071e2:	4293      	cmp	r3, r2
 80071e4:	d01d      	beq.n	8007222 <HAL_DMA_IRQHandler+0xc62>
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	4a1c      	ldr	r2, [pc, #112]	; (800725c <HAL_DMA_IRQHandler+0xc9c>)
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d018      	beq.n	8007222 <HAL_DMA_IRQHandler+0xc62>
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	4a1a      	ldr	r2, [pc, #104]	; (8007260 <HAL_DMA_IRQHandler+0xca0>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d013      	beq.n	8007222 <HAL_DMA_IRQHandler+0xc62>
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	4a19      	ldr	r2, [pc, #100]	; (8007264 <HAL_DMA_IRQHandler+0xca4>)
 8007200:	4293      	cmp	r3, r2
 8007202:	d00e      	beq.n	8007222 <HAL_DMA_IRQHandler+0xc62>
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	4a17      	ldr	r2, [pc, #92]	; (8007268 <HAL_DMA_IRQHandler+0xca8>)
 800720a:	4293      	cmp	r3, r2
 800720c:	d009      	beq.n	8007222 <HAL_DMA_IRQHandler+0xc62>
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	4a16      	ldr	r2, [pc, #88]	; (800726c <HAL_DMA_IRQHandler+0xcac>)
 8007214:	4293      	cmp	r3, r2
 8007216:	d004      	beq.n	8007222 <HAL_DMA_IRQHandler+0xc62>
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	4a14      	ldr	r2, [pc, #80]	; (8007270 <HAL_DMA_IRQHandler+0xcb0>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d128      	bne.n	8007274 <HAL_DMA_IRQHandler+0xcb4>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	681a      	ldr	r2, [r3, #0]
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f022 0214 	bic.w	r2, r2, #20
 8007230:	601a      	str	r2, [r3, #0]
 8007232:	e027      	b.n	8007284 <HAL_DMA_IRQHandler+0xcc4>
 8007234:	40020010 	.word	0x40020010
 8007238:	40020028 	.word	0x40020028
 800723c:	40020040 	.word	0x40020040
 8007240:	40020058 	.word	0x40020058
 8007244:	40020070 	.word	0x40020070
 8007248:	40020088 	.word	0x40020088
 800724c:	400200a0 	.word	0x400200a0
 8007250:	400200b8 	.word	0x400200b8
 8007254:	40020410 	.word	0x40020410
 8007258:	40020428 	.word	0x40020428
 800725c:	40020440 	.word	0x40020440
 8007260:	40020458 	.word	0x40020458
 8007264:	40020470 	.word	0x40020470
 8007268:	40020488 	.word	0x40020488
 800726c:	400204a0 	.word	0x400204a0
 8007270:	400204b8 	.word	0x400204b8
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	681a      	ldr	r2, [r3, #0]
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f022 020a 	bic.w	r2, r2, #10
 8007282:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2201      	movs	r2, #1
 8007288:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2200      	movs	r2, #0
 8007290:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007298:	2b00      	cmp	r3, #0
 800729a:	f000 8097 	beq.w	80073cc <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80072a6:	e091      	b.n	80073cc <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072ac:	f003 031f 	and.w	r3, r3, #31
 80072b0:	2208      	movs	r2, #8
 80072b2:	409a      	lsls	r2, r3
 80072b4:	697b      	ldr	r3, [r7, #20]
 80072b6:	4013      	ands	r3, r2
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	f000 8088 	beq.w	80073ce <HAL_DMA_IRQHandler+0xe0e>
 80072be:	693b      	ldr	r3, [r7, #16]
 80072c0:	f003 0308 	and.w	r3, r3, #8
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	f000 8082 	beq.w	80073ce <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	4a41      	ldr	r2, [pc, #260]	; (80073d4 <HAL_DMA_IRQHandler+0xe14>)
 80072d0:	4293      	cmp	r3, r2
 80072d2:	d04a      	beq.n	800736a <HAL_DMA_IRQHandler+0xdaa>
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	4a3f      	ldr	r2, [pc, #252]	; (80073d8 <HAL_DMA_IRQHandler+0xe18>)
 80072da:	4293      	cmp	r3, r2
 80072dc:	d045      	beq.n	800736a <HAL_DMA_IRQHandler+0xdaa>
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	4a3e      	ldr	r2, [pc, #248]	; (80073dc <HAL_DMA_IRQHandler+0xe1c>)
 80072e4:	4293      	cmp	r3, r2
 80072e6:	d040      	beq.n	800736a <HAL_DMA_IRQHandler+0xdaa>
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	4a3c      	ldr	r2, [pc, #240]	; (80073e0 <HAL_DMA_IRQHandler+0xe20>)
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d03b      	beq.n	800736a <HAL_DMA_IRQHandler+0xdaa>
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	4a3b      	ldr	r2, [pc, #236]	; (80073e4 <HAL_DMA_IRQHandler+0xe24>)
 80072f8:	4293      	cmp	r3, r2
 80072fa:	d036      	beq.n	800736a <HAL_DMA_IRQHandler+0xdaa>
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	4a39      	ldr	r2, [pc, #228]	; (80073e8 <HAL_DMA_IRQHandler+0xe28>)
 8007302:	4293      	cmp	r3, r2
 8007304:	d031      	beq.n	800736a <HAL_DMA_IRQHandler+0xdaa>
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	4a38      	ldr	r2, [pc, #224]	; (80073ec <HAL_DMA_IRQHandler+0xe2c>)
 800730c:	4293      	cmp	r3, r2
 800730e:	d02c      	beq.n	800736a <HAL_DMA_IRQHandler+0xdaa>
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	4a36      	ldr	r2, [pc, #216]	; (80073f0 <HAL_DMA_IRQHandler+0xe30>)
 8007316:	4293      	cmp	r3, r2
 8007318:	d027      	beq.n	800736a <HAL_DMA_IRQHandler+0xdaa>
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	4a35      	ldr	r2, [pc, #212]	; (80073f4 <HAL_DMA_IRQHandler+0xe34>)
 8007320:	4293      	cmp	r3, r2
 8007322:	d022      	beq.n	800736a <HAL_DMA_IRQHandler+0xdaa>
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	4a33      	ldr	r2, [pc, #204]	; (80073f8 <HAL_DMA_IRQHandler+0xe38>)
 800732a:	4293      	cmp	r3, r2
 800732c:	d01d      	beq.n	800736a <HAL_DMA_IRQHandler+0xdaa>
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	4a32      	ldr	r2, [pc, #200]	; (80073fc <HAL_DMA_IRQHandler+0xe3c>)
 8007334:	4293      	cmp	r3, r2
 8007336:	d018      	beq.n	800736a <HAL_DMA_IRQHandler+0xdaa>
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	4a30      	ldr	r2, [pc, #192]	; (8007400 <HAL_DMA_IRQHandler+0xe40>)
 800733e:	4293      	cmp	r3, r2
 8007340:	d013      	beq.n	800736a <HAL_DMA_IRQHandler+0xdaa>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	4a2f      	ldr	r2, [pc, #188]	; (8007404 <HAL_DMA_IRQHandler+0xe44>)
 8007348:	4293      	cmp	r3, r2
 800734a:	d00e      	beq.n	800736a <HAL_DMA_IRQHandler+0xdaa>
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	4a2d      	ldr	r2, [pc, #180]	; (8007408 <HAL_DMA_IRQHandler+0xe48>)
 8007352:	4293      	cmp	r3, r2
 8007354:	d009      	beq.n	800736a <HAL_DMA_IRQHandler+0xdaa>
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	4a2c      	ldr	r2, [pc, #176]	; (800740c <HAL_DMA_IRQHandler+0xe4c>)
 800735c:	4293      	cmp	r3, r2
 800735e:	d004      	beq.n	800736a <HAL_DMA_IRQHandler+0xdaa>
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	4a2a      	ldr	r2, [pc, #168]	; (8007410 <HAL_DMA_IRQHandler+0xe50>)
 8007366:	4293      	cmp	r3, r2
 8007368:	d108      	bne.n	800737c <HAL_DMA_IRQHandler+0xdbc>
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	681a      	ldr	r2, [r3, #0]
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f022 021c 	bic.w	r2, r2, #28
 8007378:	601a      	str	r2, [r3, #0]
 800737a:	e007      	b.n	800738c <HAL_DMA_IRQHandler+0xdcc>
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	681a      	ldr	r2, [r3, #0]
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f022 020e 	bic.w	r2, r2, #14
 800738a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007390:	f003 031f 	and.w	r3, r3, #31
 8007394:	2201      	movs	r2, #1
 8007396:	409a      	lsls	r2, r3
 8007398:	69fb      	ldr	r3, [r7, #28]
 800739a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2201      	movs	r2, #1
 80073a0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2201      	movs	r2, #1
 80073a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2200      	movs	r2, #0
 80073ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d009      	beq.n	80073ce <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073be:	6878      	ldr	r0, [r7, #4]
 80073c0:	4798      	blx	r3
 80073c2:	e004      	b.n	80073ce <HAL_DMA_IRQHandler+0xe0e>
          return;
 80073c4:	bf00      	nop
 80073c6:	e002      	b.n	80073ce <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80073c8:	bf00      	nop
 80073ca:	e000      	b.n	80073ce <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80073cc:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80073ce:	3728      	adds	r7, #40	; 0x28
 80073d0:	46bd      	mov	sp, r7
 80073d2:	bd80      	pop	{r7, pc}
 80073d4:	40020010 	.word	0x40020010
 80073d8:	40020028 	.word	0x40020028
 80073dc:	40020040 	.word	0x40020040
 80073e0:	40020058 	.word	0x40020058
 80073e4:	40020070 	.word	0x40020070
 80073e8:	40020088 	.word	0x40020088
 80073ec:	400200a0 	.word	0x400200a0
 80073f0:	400200b8 	.word	0x400200b8
 80073f4:	40020410 	.word	0x40020410
 80073f8:	40020428 	.word	0x40020428
 80073fc:	40020440 	.word	0x40020440
 8007400:	40020458 	.word	0x40020458
 8007404:	40020470 	.word	0x40020470
 8007408:	40020488 	.word	0x40020488
 800740c:	400204a0 	.word	0x400204a0
 8007410:	400204b8 	.word	0x400204b8

08007414 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007414:	b480      	push	{r7}
 8007416:	b085      	sub	sp, #20
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	4a42      	ldr	r2, [pc, #264]	; (800752c <DMA_CalcBaseAndBitshift+0x118>)
 8007422:	4293      	cmp	r3, r2
 8007424:	d04a      	beq.n	80074bc <DMA_CalcBaseAndBitshift+0xa8>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	4a41      	ldr	r2, [pc, #260]	; (8007530 <DMA_CalcBaseAndBitshift+0x11c>)
 800742c:	4293      	cmp	r3, r2
 800742e:	d045      	beq.n	80074bc <DMA_CalcBaseAndBitshift+0xa8>
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	4a3f      	ldr	r2, [pc, #252]	; (8007534 <DMA_CalcBaseAndBitshift+0x120>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d040      	beq.n	80074bc <DMA_CalcBaseAndBitshift+0xa8>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	4a3e      	ldr	r2, [pc, #248]	; (8007538 <DMA_CalcBaseAndBitshift+0x124>)
 8007440:	4293      	cmp	r3, r2
 8007442:	d03b      	beq.n	80074bc <DMA_CalcBaseAndBitshift+0xa8>
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	4a3c      	ldr	r2, [pc, #240]	; (800753c <DMA_CalcBaseAndBitshift+0x128>)
 800744a:	4293      	cmp	r3, r2
 800744c:	d036      	beq.n	80074bc <DMA_CalcBaseAndBitshift+0xa8>
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	4a3b      	ldr	r2, [pc, #236]	; (8007540 <DMA_CalcBaseAndBitshift+0x12c>)
 8007454:	4293      	cmp	r3, r2
 8007456:	d031      	beq.n	80074bc <DMA_CalcBaseAndBitshift+0xa8>
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	4a39      	ldr	r2, [pc, #228]	; (8007544 <DMA_CalcBaseAndBitshift+0x130>)
 800745e:	4293      	cmp	r3, r2
 8007460:	d02c      	beq.n	80074bc <DMA_CalcBaseAndBitshift+0xa8>
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	4a38      	ldr	r2, [pc, #224]	; (8007548 <DMA_CalcBaseAndBitshift+0x134>)
 8007468:	4293      	cmp	r3, r2
 800746a:	d027      	beq.n	80074bc <DMA_CalcBaseAndBitshift+0xa8>
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	4a36      	ldr	r2, [pc, #216]	; (800754c <DMA_CalcBaseAndBitshift+0x138>)
 8007472:	4293      	cmp	r3, r2
 8007474:	d022      	beq.n	80074bc <DMA_CalcBaseAndBitshift+0xa8>
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	4a35      	ldr	r2, [pc, #212]	; (8007550 <DMA_CalcBaseAndBitshift+0x13c>)
 800747c:	4293      	cmp	r3, r2
 800747e:	d01d      	beq.n	80074bc <DMA_CalcBaseAndBitshift+0xa8>
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	4a33      	ldr	r2, [pc, #204]	; (8007554 <DMA_CalcBaseAndBitshift+0x140>)
 8007486:	4293      	cmp	r3, r2
 8007488:	d018      	beq.n	80074bc <DMA_CalcBaseAndBitshift+0xa8>
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	4a32      	ldr	r2, [pc, #200]	; (8007558 <DMA_CalcBaseAndBitshift+0x144>)
 8007490:	4293      	cmp	r3, r2
 8007492:	d013      	beq.n	80074bc <DMA_CalcBaseAndBitshift+0xa8>
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	4a30      	ldr	r2, [pc, #192]	; (800755c <DMA_CalcBaseAndBitshift+0x148>)
 800749a:	4293      	cmp	r3, r2
 800749c:	d00e      	beq.n	80074bc <DMA_CalcBaseAndBitshift+0xa8>
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	4a2f      	ldr	r2, [pc, #188]	; (8007560 <DMA_CalcBaseAndBitshift+0x14c>)
 80074a4:	4293      	cmp	r3, r2
 80074a6:	d009      	beq.n	80074bc <DMA_CalcBaseAndBitshift+0xa8>
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	4a2d      	ldr	r2, [pc, #180]	; (8007564 <DMA_CalcBaseAndBitshift+0x150>)
 80074ae:	4293      	cmp	r3, r2
 80074b0:	d004      	beq.n	80074bc <DMA_CalcBaseAndBitshift+0xa8>
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	4a2c      	ldr	r2, [pc, #176]	; (8007568 <DMA_CalcBaseAndBitshift+0x154>)
 80074b8:	4293      	cmp	r3, r2
 80074ba:	d101      	bne.n	80074c0 <DMA_CalcBaseAndBitshift+0xac>
 80074bc:	2301      	movs	r3, #1
 80074be:	e000      	b.n	80074c2 <DMA_CalcBaseAndBitshift+0xae>
 80074c0:	2300      	movs	r3, #0
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d024      	beq.n	8007510 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	b2db      	uxtb	r3, r3
 80074cc:	3b10      	subs	r3, #16
 80074ce:	4a27      	ldr	r2, [pc, #156]	; (800756c <DMA_CalcBaseAndBitshift+0x158>)
 80074d0:	fba2 2303 	umull	r2, r3, r2, r3
 80074d4:	091b      	lsrs	r3, r3, #4
 80074d6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	f003 0307 	and.w	r3, r3, #7
 80074de:	4a24      	ldr	r2, [pc, #144]	; (8007570 <DMA_CalcBaseAndBitshift+0x15c>)
 80074e0:	5cd3      	ldrb	r3, [r2, r3]
 80074e2:	461a      	mov	r2, r3
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	2b03      	cmp	r3, #3
 80074ec:	d908      	bls.n	8007500 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	461a      	mov	r2, r3
 80074f4:	4b1f      	ldr	r3, [pc, #124]	; (8007574 <DMA_CalcBaseAndBitshift+0x160>)
 80074f6:	4013      	ands	r3, r2
 80074f8:	1d1a      	adds	r2, r3, #4
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	659a      	str	r2, [r3, #88]	; 0x58
 80074fe:	e00d      	b.n	800751c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	461a      	mov	r2, r3
 8007506:	4b1b      	ldr	r3, [pc, #108]	; (8007574 <DMA_CalcBaseAndBitshift+0x160>)
 8007508:	4013      	ands	r3, r2
 800750a:	687a      	ldr	r2, [r7, #4]
 800750c:	6593      	str	r3, [r2, #88]	; 0x58
 800750e:	e005      	b.n	800751c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007520:	4618      	mov	r0, r3
 8007522:	3714      	adds	r7, #20
 8007524:	46bd      	mov	sp, r7
 8007526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752a:	4770      	bx	lr
 800752c:	40020010 	.word	0x40020010
 8007530:	40020028 	.word	0x40020028
 8007534:	40020040 	.word	0x40020040
 8007538:	40020058 	.word	0x40020058
 800753c:	40020070 	.word	0x40020070
 8007540:	40020088 	.word	0x40020088
 8007544:	400200a0 	.word	0x400200a0
 8007548:	400200b8 	.word	0x400200b8
 800754c:	40020410 	.word	0x40020410
 8007550:	40020428 	.word	0x40020428
 8007554:	40020440 	.word	0x40020440
 8007558:	40020458 	.word	0x40020458
 800755c:	40020470 	.word	0x40020470
 8007560:	40020488 	.word	0x40020488
 8007564:	400204a0 	.word	0x400204a0
 8007568:	400204b8 	.word	0x400204b8
 800756c:	aaaaaaab 	.word	0xaaaaaaab
 8007570:	08017ccc 	.word	0x08017ccc
 8007574:	fffffc00 	.word	0xfffffc00

08007578 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007578:	b480      	push	{r7}
 800757a:	b085      	sub	sp, #20
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007580:	2300      	movs	r3, #0
 8007582:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	699b      	ldr	r3, [r3, #24]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d120      	bne.n	80075ce <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007590:	2b03      	cmp	r3, #3
 8007592:	d858      	bhi.n	8007646 <DMA_CheckFifoParam+0xce>
 8007594:	a201      	add	r2, pc, #4	; (adr r2, 800759c <DMA_CheckFifoParam+0x24>)
 8007596:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800759a:	bf00      	nop
 800759c:	080075ad 	.word	0x080075ad
 80075a0:	080075bf 	.word	0x080075bf
 80075a4:	080075ad 	.word	0x080075ad
 80075a8:	08007647 	.word	0x08007647
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d048      	beq.n	800764a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80075b8:	2301      	movs	r3, #1
 80075ba:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80075bc:	e045      	b.n	800764a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075c2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80075c6:	d142      	bne.n	800764e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80075c8:	2301      	movs	r3, #1
 80075ca:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80075cc:	e03f      	b.n	800764e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	699b      	ldr	r3, [r3, #24]
 80075d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80075d6:	d123      	bne.n	8007620 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075dc:	2b03      	cmp	r3, #3
 80075de:	d838      	bhi.n	8007652 <DMA_CheckFifoParam+0xda>
 80075e0:	a201      	add	r2, pc, #4	; (adr r2, 80075e8 <DMA_CheckFifoParam+0x70>)
 80075e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075e6:	bf00      	nop
 80075e8:	080075f9 	.word	0x080075f9
 80075ec:	080075ff 	.word	0x080075ff
 80075f0:	080075f9 	.word	0x080075f9
 80075f4:	08007611 	.word	0x08007611
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80075f8:	2301      	movs	r3, #1
 80075fa:	73fb      	strb	r3, [r7, #15]
        break;
 80075fc:	e030      	b.n	8007660 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007602:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007606:	2b00      	cmp	r3, #0
 8007608:	d025      	beq.n	8007656 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800760a:	2301      	movs	r3, #1
 800760c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800760e:	e022      	b.n	8007656 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007614:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007618:	d11f      	bne.n	800765a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800761a:	2301      	movs	r3, #1
 800761c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800761e:	e01c      	b.n	800765a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007624:	2b02      	cmp	r3, #2
 8007626:	d902      	bls.n	800762e <DMA_CheckFifoParam+0xb6>
 8007628:	2b03      	cmp	r3, #3
 800762a:	d003      	beq.n	8007634 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800762c:	e018      	b.n	8007660 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800762e:	2301      	movs	r3, #1
 8007630:	73fb      	strb	r3, [r7, #15]
        break;
 8007632:	e015      	b.n	8007660 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007638:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800763c:	2b00      	cmp	r3, #0
 800763e:	d00e      	beq.n	800765e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007640:	2301      	movs	r3, #1
 8007642:	73fb      	strb	r3, [r7, #15]
    break;
 8007644:	e00b      	b.n	800765e <DMA_CheckFifoParam+0xe6>
        break;
 8007646:	bf00      	nop
 8007648:	e00a      	b.n	8007660 <DMA_CheckFifoParam+0xe8>
        break;
 800764a:	bf00      	nop
 800764c:	e008      	b.n	8007660 <DMA_CheckFifoParam+0xe8>
        break;
 800764e:	bf00      	nop
 8007650:	e006      	b.n	8007660 <DMA_CheckFifoParam+0xe8>
        break;
 8007652:	bf00      	nop
 8007654:	e004      	b.n	8007660 <DMA_CheckFifoParam+0xe8>
        break;
 8007656:	bf00      	nop
 8007658:	e002      	b.n	8007660 <DMA_CheckFifoParam+0xe8>
        break;
 800765a:	bf00      	nop
 800765c:	e000      	b.n	8007660 <DMA_CheckFifoParam+0xe8>
    break;
 800765e:	bf00      	nop
    }
  }

  return status;
 8007660:	7bfb      	ldrb	r3, [r7, #15]
}
 8007662:	4618      	mov	r0, r3
 8007664:	3714      	adds	r7, #20
 8007666:	46bd      	mov	sp, r7
 8007668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766c:	4770      	bx	lr
 800766e:	bf00      	nop

08007670 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007670:	b480      	push	{r7}
 8007672:	b085      	sub	sp, #20
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	4a38      	ldr	r2, [pc, #224]	; (8007764 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8007684:	4293      	cmp	r3, r2
 8007686:	d022      	beq.n	80076ce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	4a36      	ldr	r2, [pc, #216]	; (8007768 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800768e:	4293      	cmp	r3, r2
 8007690:	d01d      	beq.n	80076ce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	4a35      	ldr	r2, [pc, #212]	; (800776c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8007698:	4293      	cmp	r3, r2
 800769a:	d018      	beq.n	80076ce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	4a33      	ldr	r2, [pc, #204]	; (8007770 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80076a2:	4293      	cmp	r3, r2
 80076a4:	d013      	beq.n	80076ce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	4a32      	ldr	r2, [pc, #200]	; (8007774 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d00e      	beq.n	80076ce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	4a30      	ldr	r2, [pc, #192]	; (8007778 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d009      	beq.n	80076ce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	4a2f      	ldr	r2, [pc, #188]	; (800777c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d004      	beq.n	80076ce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	4a2d      	ldr	r2, [pc, #180]	; (8007780 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80076ca:	4293      	cmp	r3, r2
 80076cc:	d101      	bne.n	80076d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80076ce:	2301      	movs	r3, #1
 80076d0:	e000      	b.n	80076d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80076d2:	2300      	movs	r3, #0
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d01a      	beq.n	800770e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	b2db      	uxtb	r3, r3
 80076de:	3b08      	subs	r3, #8
 80076e0:	4a28      	ldr	r2, [pc, #160]	; (8007784 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80076e2:	fba2 2303 	umull	r2, r3, r2, r3
 80076e6:	091b      	lsrs	r3, r3, #4
 80076e8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80076ea:	68fa      	ldr	r2, [r7, #12]
 80076ec:	4b26      	ldr	r3, [pc, #152]	; (8007788 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80076ee:	4413      	add	r3, r2
 80076f0:	009b      	lsls	r3, r3, #2
 80076f2:	461a      	mov	r2, r3
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	4a24      	ldr	r2, [pc, #144]	; (800778c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80076fc:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	f003 031f 	and.w	r3, r3, #31
 8007704:	2201      	movs	r2, #1
 8007706:	409a      	lsls	r2, r3
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800770c:	e024      	b.n	8007758 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	b2db      	uxtb	r3, r3
 8007714:	3b10      	subs	r3, #16
 8007716:	4a1e      	ldr	r2, [pc, #120]	; (8007790 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007718:	fba2 2303 	umull	r2, r3, r2, r3
 800771c:	091b      	lsrs	r3, r3, #4
 800771e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007720:	68bb      	ldr	r3, [r7, #8]
 8007722:	4a1c      	ldr	r2, [pc, #112]	; (8007794 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007724:	4293      	cmp	r3, r2
 8007726:	d806      	bhi.n	8007736 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	4a1b      	ldr	r2, [pc, #108]	; (8007798 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800772c:	4293      	cmp	r3, r2
 800772e:	d902      	bls.n	8007736 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	3308      	adds	r3, #8
 8007734:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8007736:	68fa      	ldr	r2, [r7, #12]
 8007738:	4b18      	ldr	r3, [pc, #96]	; (800779c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800773a:	4413      	add	r3, r2
 800773c:	009b      	lsls	r3, r3, #2
 800773e:	461a      	mov	r2, r3
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	4a16      	ldr	r2, [pc, #88]	; (80077a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007748:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	f003 031f 	and.w	r3, r3, #31
 8007750:	2201      	movs	r2, #1
 8007752:	409a      	lsls	r2, r3
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007758:	bf00      	nop
 800775a:	3714      	adds	r7, #20
 800775c:	46bd      	mov	sp, r7
 800775e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007762:	4770      	bx	lr
 8007764:	58025408 	.word	0x58025408
 8007768:	5802541c 	.word	0x5802541c
 800776c:	58025430 	.word	0x58025430
 8007770:	58025444 	.word	0x58025444
 8007774:	58025458 	.word	0x58025458
 8007778:	5802546c 	.word	0x5802546c
 800777c:	58025480 	.word	0x58025480
 8007780:	58025494 	.word	0x58025494
 8007784:	cccccccd 	.word	0xcccccccd
 8007788:	16009600 	.word	0x16009600
 800778c:	58025880 	.word	0x58025880
 8007790:	aaaaaaab 	.word	0xaaaaaaab
 8007794:	400204b8 	.word	0x400204b8
 8007798:	4002040f 	.word	0x4002040f
 800779c:	10008200 	.word	0x10008200
 80077a0:	40020880 	.word	0x40020880

080077a4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80077a4:	b480      	push	{r7}
 80077a6:	b085      	sub	sp, #20
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	685b      	ldr	r3, [r3, #4]
 80077b0:	b2db      	uxtb	r3, r3
 80077b2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d04a      	beq.n	8007850 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	2b08      	cmp	r3, #8
 80077be:	d847      	bhi.n	8007850 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	4a25      	ldr	r2, [pc, #148]	; (800785c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80077c6:	4293      	cmp	r3, r2
 80077c8:	d022      	beq.n	8007810 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	4a24      	ldr	r2, [pc, #144]	; (8007860 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80077d0:	4293      	cmp	r3, r2
 80077d2:	d01d      	beq.n	8007810 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	4a22      	ldr	r2, [pc, #136]	; (8007864 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80077da:	4293      	cmp	r3, r2
 80077dc:	d018      	beq.n	8007810 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	4a21      	ldr	r2, [pc, #132]	; (8007868 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80077e4:	4293      	cmp	r3, r2
 80077e6:	d013      	beq.n	8007810 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	4a1f      	ldr	r2, [pc, #124]	; (800786c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80077ee:	4293      	cmp	r3, r2
 80077f0:	d00e      	beq.n	8007810 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	4a1e      	ldr	r2, [pc, #120]	; (8007870 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80077f8:	4293      	cmp	r3, r2
 80077fa:	d009      	beq.n	8007810 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	4a1c      	ldr	r2, [pc, #112]	; (8007874 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8007802:	4293      	cmp	r3, r2
 8007804:	d004      	beq.n	8007810 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	4a1b      	ldr	r2, [pc, #108]	; (8007878 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800780c:	4293      	cmp	r3, r2
 800780e:	d101      	bne.n	8007814 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007810:	2301      	movs	r3, #1
 8007812:	e000      	b.n	8007816 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007814:	2300      	movs	r3, #0
 8007816:	2b00      	cmp	r3, #0
 8007818:	d00a      	beq.n	8007830 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800781a:	68fa      	ldr	r2, [r7, #12]
 800781c:	4b17      	ldr	r3, [pc, #92]	; (800787c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800781e:	4413      	add	r3, r2
 8007820:	009b      	lsls	r3, r3, #2
 8007822:	461a      	mov	r2, r3
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	4a15      	ldr	r2, [pc, #84]	; (8007880 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800782c:	671a      	str	r2, [r3, #112]	; 0x70
 800782e:	e009      	b.n	8007844 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007830:	68fa      	ldr	r2, [r7, #12]
 8007832:	4b14      	ldr	r3, [pc, #80]	; (8007884 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007834:	4413      	add	r3, r2
 8007836:	009b      	lsls	r3, r3, #2
 8007838:	461a      	mov	r2, r3
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	4a11      	ldr	r2, [pc, #68]	; (8007888 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8007842:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	3b01      	subs	r3, #1
 8007848:	2201      	movs	r2, #1
 800784a:	409a      	lsls	r2, r3
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8007850:	bf00      	nop
 8007852:	3714      	adds	r7, #20
 8007854:	46bd      	mov	sp, r7
 8007856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785a:	4770      	bx	lr
 800785c:	58025408 	.word	0x58025408
 8007860:	5802541c 	.word	0x5802541c
 8007864:	58025430 	.word	0x58025430
 8007868:	58025444 	.word	0x58025444
 800786c:	58025458 	.word	0x58025458
 8007870:	5802546c 	.word	0x5802546c
 8007874:	58025480 	.word	0x58025480
 8007878:	58025494 	.word	0x58025494
 800787c:	1600963f 	.word	0x1600963f
 8007880:	58025940 	.word	0x58025940
 8007884:	1000823f 	.word	0x1000823f
 8007888:	40020940 	.word	0x40020940

0800788c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800788c:	b480      	push	{r7}
 800788e:	b089      	sub	sp, #36	; 0x24
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
 8007894:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007896:	2300      	movs	r3, #0
 8007898:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800789a:	4b89      	ldr	r3, [pc, #548]	; (8007ac0 <HAL_GPIO_Init+0x234>)
 800789c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800789e:	e194      	b.n	8007bca <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	681a      	ldr	r2, [r3, #0]
 80078a4:	2101      	movs	r1, #1
 80078a6:	69fb      	ldr	r3, [r7, #28]
 80078a8:	fa01 f303 	lsl.w	r3, r1, r3
 80078ac:	4013      	ands	r3, r2
 80078ae:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80078b0:	693b      	ldr	r3, [r7, #16]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	f000 8186 	beq.w	8007bc4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	685b      	ldr	r3, [r3, #4]
 80078bc:	f003 0303 	and.w	r3, r3, #3
 80078c0:	2b01      	cmp	r3, #1
 80078c2:	d005      	beq.n	80078d0 <HAL_GPIO_Init+0x44>
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	685b      	ldr	r3, [r3, #4]
 80078c8:	f003 0303 	and.w	r3, r3, #3
 80078cc:	2b02      	cmp	r3, #2
 80078ce:	d130      	bne.n	8007932 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	689b      	ldr	r3, [r3, #8]
 80078d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80078d6:	69fb      	ldr	r3, [r7, #28]
 80078d8:	005b      	lsls	r3, r3, #1
 80078da:	2203      	movs	r2, #3
 80078dc:	fa02 f303 	lsl.w	r3, r2, r3
 80078e0:	43db      	mvns	r3, r3
 80078e2:	69ba      	ldr	r2, [r7, #24]
 80078e4:	4013      	ands	r3, r2
 80078e6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	68da      	ldr	r2, [r3, #12]
 80078ec:	69fb      	ldr	r3, [r7, #28]
 80078ee:	005b      	lsls	r3, r3, #1
 80078f0:	fa02 f303 	lsl.w	r3, r2, r3
 80078f4:	69ba      	ldr	r2, [r7, #24]
 80078f6:	4313      	orrs	r3, r2
 80078f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	69ba      	ldr	r2, [r7, #24]
 80078fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	685b      	ldr	r3, [r3, #4]
 8007904:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007906:	2201      	movs	r2, #1
 8007908:	69fb      	ldr	r3, [r7, #28]
 800790a:	fa02 f303 	lsl.w	r3, r2, r3
 800790e:	43db      	mvns	r3, r3
 8007910:	69ba      	ldr	r2, [r7, #24]
 8007912:	4013      	ands	r3, r2
 8007914:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	685b      	ldr	r3, [r3, #4]
 800791a:	091b      	lsrs	r3, r3, #4
 800791c:	f003 0201 	and.w	r2, r3, #1
 8007920:	69fb      	ldr	r3, [r7, #28]
 8007922:	fa02 f303 	lsl.w	r3, r2, r3
 8007926:	69ba      	ldr	r2, [r7, #24]
 8007928:	4313      	orrs	r3, r2
 800792a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	69ba      	ldr	r2, [r7, #24]
 8007930:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	685b      	ldr	r3, [r3, #4]
 8007936:	f003 0303 	and.w	r3, r3, #3
 800793a:	2b03      	cmp	r3, #3
 800793c:	d017      	beq.n	800796e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	68db      	ldr	r3, [r3, #12]
 8007942:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007944:	69fb      	ldr	r3, [r7, #28]
 8007946:	005b      	lsls	r3, r3, #1
 8007948:	2203      	movs	r2, #3
 800794a:	fa02 f303 	lsl.w	r3, r2, r3
 800794e:	43db      	mvns	r3, r3
 8007950:	69ba      	ldr	r2, [r7, #24]
 8007952:	4013      	ands	r3, r2
 8007954:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007956:	683b      	ldr	r3, [r7, #0]
 8007958:	689a      	ldr	r2, [r3, #8]
 800795a:	69fb      	ldr	r3, [r7, #28]
 800795c:	005b      	lsls	r3, r3, #1
 800795e:	fa02 f303 	lsl.w	r3, r2, r3
 8007962:	69ba      	ldr	r2, [r7, #24]
 8007964:	4313      	orrs	r3, r2
 8007966:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	69ba      	ldr	r2, [r7, #24]
 800796c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	685b      	ldr	r3, [r3, #4]
 8007972:	f003 0303 	and.w	r3, r3, #3
 8007976:	2b02      	cmp	r3, #2
 8007978:	d123      	bne.n	80079c2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800797a:	69fb      	ldr	r3, [r7, #28]
 800797c:	08da      	lsrs	r2, r3, #3
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	3208      	adds	r2, #8
 8007982:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007986:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007988:	69fb      	ldr	r3, [r7, #28]
 800798a:	f003 0307 	and.w	r3, r3, #7
 800798e:	009b      	lsls	r3, r3, #2
 8007990:	220f      	movs	r2, #15
 8007992:	fa02 f303 	lsl.w	r3, r2, r3
 8007996:	43db      	mvns	r3, r3
 8007998:	69ba      	ldr	r2, [r7, #24]
 800799a:	4013      	ands	r3, r2
 800799c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	691a      	ldr	r2, [r3, #16]
 80079a2:	69fb      	ldr	r3, [r7, #28]
 80079a4:	f003 0307 	and.w	r3, r3, #7
 80079a8:	009b      	lsls	r3, r3, #2
 80079aa:	fa02 f303 	lsl.w	r3, r2, r3
 80079ae:	69ba      	ldr	r2, [r7, #24]
 80079b0:	4313      	orrs	r3, r2
 80079b2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80079b4:	69fb      	ldr	r3, [r7, #28]
 80079b6:	08da      	lsrs	r2, r3, #3
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	3208      	adds	r2, #8
 80079bc:	69b9      	ldr	r1, [r7, #24]
 80079be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80079c8:	69fb      	ldr	r3, [r7, #28]
 80079ca:	005b      	lsls	r3, r3, #1
 80079cc:	2203      	movs	r2, #3
 80079ce:	fa02 f303 	lsl.w	r3, r2, r3
 80079d2:	43db      	mvns	r3, r3
 80079d4:	69ba      	ldr	r2, [r7, #24]
 80079d6:	4013      	ands	r3, r2
 80079d8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	685b      	ldr	r3, [r3, #4]
 80079de:	f003 0203 	and.w	r2, r3, #3
 80079e2:	69fb      	ldr	r3, [r7, #28]
 80079e4:	005b      	lsls	r3, r3, #1
 80079e6:	fa02 f303 	lsl.w	r3, r2, r3
 80079ea:	69ba      	ldr	r2, [r7, #24]
 80079ec:	4313      	orrs	r3, r2
 80079ee:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	69ba      	ldr	r2, [r7, #24]
 80079f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	685b      	ldr	r3, [r3, #4]
 80079fa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	f000 80e0 	beq.w	8007bc4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007a04:	4b2f      	ldr	r3, [pc, #188]	; (8007ac4 <HAL_GPIO_Init+0x238>)
 8007a06:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007a0a:	4a2e      	ldr	r2, [pc, #184]	; (8007ac4 <HAL_GPIO_Init+0x238>)
 8007a0c:	f043 0302 	orr.w	r3, r3, #2
 8007a10:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007a14:	4b2b      	ldr	r3, [pc, #172]	; (8007ac4 <HAL_GPIO_Init+0x238>)
 8007a16:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007a1a:	f003 0302 	and.w	r3, r3, #2
 8007a1e:	60fb      	str	r3, [r7, #12]
 8007a20:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007a22:	4a29      	ldr	r2, [pc, #164]	; (8007ac8 <HAL_GPIO_Init+0x23c>)
 8007a24:	69fb      	ldr	r3, [r7, #28]
 8007a26:	089b      	lsrs	r3, r3, #2
 8007a28:	3302      	adds	r3, #2
 8007a2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007a30:	69fb      	ldr	r3, [r7, #28]
 8007a32:	f003 0303 	and.w	r3, r3, #3
 8007a36:	009b      	lsls	r3, r3, #2
 8007a38:	220f      	movs	r2, #15
 8007a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8007a3e:	43db      	mvns	r3, r3
 8007a40:	69ba      	ldr	r2, [r7, #24]
 8007a42:	4013      	ands	r3, r2
 8007a44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	4a20      	ldr	r2, [pc, #128]	; (8007acc <HAL_GPIO_Init+0x240>)
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d052      	beq.n	8007af4 <HAL_GPIO_Init+0x268>
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	4a1f      	ldr	r2, [pc, #124]	; (8007ad0 <HAL_GPIO_Init+0x244>)
 8007a52:	4293      	cmp	r3, r2
 8007a54:	d031      	beq.n	8007aba <HAL_GPIO_Init+0x22e>
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	4a1e      	ldr	r2, [pc, #120]	; (8007ad4 <HAL_GPIO_Init+0x248>)
 8007a5a:	4293      	cmp	r3, r2
 8007a5c:	d02b      	beq.n	8007ab6 <HAL_GPIO_Init+0x22a>
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	4a1d      	ldr	r2, [pc, #116]	; (8007ad8 <HAL_GPIO_Init+0x24c>)
 8007a62:	4293      	cmp	r3, r2
 8007a64:	d025      	beq.n	8007ab2 <HAL_GPIO_Init+0x226>
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	4a1c      	ldr	r2, [pc, #112]	; (8007adc <HAL_GPIO_Init+0x250>)
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	d01f      	beq.n	8007aae <HAL_GPIO_Init+0x222>
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	4a1b      	ldr	r2, [pc, #108]	; (8007ae0 <HAL_GPIO_Init+0x254>)
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d019      	beq.n	8007aaa <HAL_GPIO_Init+0x21e>
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	4a1a      	ldr	r2, [pc, #104]	; (8007ae4 <HAL_GPIO_Init+0x258>)
 8007a7a:	4293      	cmp	r3, r2
 8007a7c:	d013      	beq.n	8007aa6 <HAL_GPIO_Init+0x21a>
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	4a19      	ldr	r2, [pc, #100]	; (8007ae8 <HAL_GPIO_Init+0x25c>)
 8007a82:	4293      	cmp	r3, r2
 8007a84:	d00d      	beq.n	8007aa2 <HAL_GPIO_Init+0x216>
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	4a18      	ldr	r2, [pc, #96]	; (8007aec <HAL_GPIO_Init+0x260>)
 8007a8a:	4293      	cmp	r3, r2
 8007a8c:	d007      	beq.n	8007a9e <HAL_GPIO_Init+0x212>
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	4a17      	ldr	r2, [pc, #92]	; (8007af0 <HAL_GPIO_Init+0x264>)
 8007a92:	4293      	cmp	r3, r2
 8007a94:	d101      	bne.n	8007a9a <HAL_GPIO_Init+0x20e>
 8007a96:	2309      	movs	r3, #9
 8007a98:	e02d      	b.n	8007af6 <HAL_GPIO_Init+0x26a>
 8007a9a:	230a      	movs	r3, #10
 8007a9c:	e02b      	b.n	8007af6 <HAL_GPIO_Init+0x26a>
 8007a9e:	2308      	movs	r3, #8
 8007aa0:	e029      	b.n	8007af6 <HAL_GPIO_Init+0x26a>
 8007aa2:	2307      	movs	r3, #7
 8007aa4:	e027      	b.n	8007af6 <HAL_GPIO_Init+0x26a>
 8007aa6:	2306      	movs	r3, #6
 8007aa8:	e025      	b.n	8007af6 <HAL_GPIO_Init+0x26a>
 8007aaa:	2305      	movs	r3, #5
 8007aac:	e023      	b.n	8007af6 <HAL_GPIO_Init+0x26a>
 8007aae:	2304      	movs	r3, #4
 8007ab0:	e021      	b.n	8007af6 <HAL_GPIO_Init+0x26a>
 8007ab2:	2303      	movs	r3, #3
 8007ab4:	e01f      	b.n	8007af6 <HAL_GPIO_Init+0x26a>
 8007ab6:	2302      	movs	r3, #2
 8007ab8:	e01d      	b.n	8007af6 <HAL_GPIO_Init+0x26a>
 8007aba:	2301      	movs	r3, #1
 8007abc:	e01b      	b.n	8007af6 <HAL_GPIO_Init+0x26a>
 8007abe:	bf00      	nop
 8007ac0:	58000080 	.word	0x58000080
 8007ac4:	58024400 	.word	0x58024400
 8007ac8:	58000400 	.word	0x58000400
 8007acc:	58020000 	.word	0x58020000
 8007ad0:	58020400 	.word	0x58020400
 8007ad4:	58020800 	.word	0x58020800
 8007ad8:	58020c00 	.word	0x58020c00
 8007adc:	58021000 	.word	0x58021000
 8007ae0:	58021400 	.word	0x58021400
 8007ae4:	58021800 	.word	0x58021800
 8007ae8:	58021c00 	.word	0x58021c00
 8007aec:	58022000 	.word	0x58022000
 8007af0:	58022400 	.word	0x58022400
 8007af4:	2300      	movs	r3, #0
 8007af6:	69fa      	ldr	r2, [r7, #28]
 8007af8:	f002 0203 	and.w	r2, r2, #3
 8007afc:	0092      	lsls	r2, r2, #2
 8007afe:	4093      	lsls	r3, r2
 8007b00:	69ba      	ldr	r2, [r7, #24]
 8007b02:	4313      	orrs	r3, r2
 8007b04:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007b06:	4938      	ldr	r1, [pc, #224]	; (8007be8 <HAL_GPIO_Init+0x35c>)
 8007b08:	69fb      	ldr	r3, [r7, #28]
 8007b0a:	089b      	lsrs	r3, r3, #2
 8007b0c:	3302      	adds	r3, #2
 8007b0e:	69ba      	ldr	r2, [r7, #24]
 8007b10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007b14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007b1c:	693b      	ldr	r3, [r7, #16]
 8007b1e:	43db      	mvns	r3, r3
 8007b20:	69ba      	ldr	r2, [r7, #24]
 8007b22:	4013      	ands	r3, r2
 8007b24:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	685b      	ldr	r3, [r3, #4]
 8007b2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d003      	beq.n	8007b3a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8007b32:	69ba      	ldr	r2, [r7, #24]
 8007b34:	693b      	ldr	r3, [r7, #16]
 8007b36:	4313      	orrs	r3, r2
 8007b38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007b3a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007b3e:	69bb      	ldr	r3, [r7, #24]
 8007b40:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007b42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b46:	685b      	ldr	r3, [r3, #4]
 8007b48:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007b4a:	693b      	ldr	r3, [r7, #16]
 8007b4c:	43db      	mvns	r3, r3
 8007b4e:	69ba      	ldr	r2, [r7, #24]
 8007b50:	4013      	ands	r3, r2
 8007b52:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	685b      	ldr	r3, [r3, #4]
 8007b58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d003      	beq.n	8007b68 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8007b60:	69ba      	ldr	r2, [r7, #24]
 8007b62:	693b      	ldr	r3, [r7, #16]
 8007b64:	4313      	orrs	r3, r2
 8007b66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007b68:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007b6c:	69bb      	ldr	r3, [r7, #24]
 8007b6e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007b70:	697b      	ldr	r3, [r7, #20]
 8007b72:	685b      	ldr	r3, [r3, #4]
 8007b74:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007b76:	693b      	ldr	r3, [r7, #16]
 8007b78:	43db      	mvns	r3, r3
 8007b7a:	69ba      	ldr	r2, [r7, #24]
 8007b7c:	4013      	ands	r3, r2
 8007b7e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	685b      	ldr	r3, [r3, #4]
 8007b84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d003      	beq.n	8007b94 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8007b8c:	69ba      	ldr	r2, [r7, #24]
 8007b8e:	693b      	ldr	r3, [r7, #16]
 8007b90:	4313      	orrs	r3, r2
 8007b92:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007b94:	697b      	ldr	r3, [r7, #20]
 8007b96:	69ba      	ldr	r2, [r7, #24]
 8007b98:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007b9a:	697b      	ldr	r3, [r7, #20]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007ba0:	693b      	ldr	r3, [r7, #16]
 8007ba2:	43db      	mvns	r3, r3
 8007ba4:	69ba      	ldr	r2, [r7, #24]
 8007ba6:	4013      	ands	r3, r2
 8007ba8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	685b      	ldr	r3, [r3, #4]
 8007bae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d003      	beq.n	8007bbe <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8007bb6:	69ba      	ldr	r2, [r7, #24]
 8007bb8:	693b      	ldr	r3, [r7, #16]
 8007bba:	4313      	orrs	r3, r2
 8007bbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007bbe:	697b      	ldr	r3, [r7, #20]
 8007bc0:	69ba      	ldr	r2, [r7, #24]
 8007bc2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007bc4:	69fb      	ldr	r3, [r7, #28]
 8007bc6:	3301      	adds	r3, #1
 8007bc8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	681a      	ldr	r2, [r3, #0]
 8007bce:	69fb      	ldr	r3, [r7, #28]
 8007bd0:	fa22 f303 	lsr.w	r3, r2, r3
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	f47f ae63 	bne.w	80078a0 <HAL_GPIO_Init+0x14>
  }
}
 8007bda:	bf00      	nop
 8007bdc:	bf00      	nop
 8007bde:	3724      	adds	r7, #36	; 0x24
 8007be0:	46bd      	mov	sp, r7
 8007be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be6:	4770      	bx	lr
 8007be8:	58000400 	.word	0x58000400

08007bec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007bec:	b480      	push	{r7}
 8007bee:	b085      	sub	sp, #20
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
 8007bf4:	460b      	mov	r3, r1
 8007bf6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	691a      	ldr	r2, [r3, #16]
 8007bfc:	887b      	ldrh	r3, [r7, #2]
 8007bfe:	4013      	ands	r3, r2
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d002      	beq.n	8007c0a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007c04:	2301      	movs	r3, #1
 8007c06:	73fb      	strb	r3, [r7, #15]
 8007c08:	e001      	b.n	8007c0e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007c0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c10:	4618      	mov	r0, r3
 8007c12:	3714      	adds	r7, #20
 8007c14:	46bd      	mov	sp, r7
 8007c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1a:	4770      	bx	lr

08007c1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007c1c:	b480      	push	{r7}
 8007c1e:	b083      	sub	sp, #12
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
 8007c24:	460b      	mov	r3, r1
 8007c26:	807b      	strh	r3, [r7, #2]
 8007c28:	4613      	mov	r3, r2
 8007c2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007c2c:	787b      	ldrb	r3, [r7, #1]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d003      	beq.n	8007c3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007c32:	887a      	ldrh	r2, [r7, #2]
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007c38:	e003      	b.n	8007c42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007c3a:	887b      	ldrh	r3, [r7, #2]
 8007c3c:	041a      	lsls	r2, r3, #16
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	619a      	str	r2, [r3, #24]
}
 8007c42:	bf00      	nop
 8007c44:	370c      	adds	r7, #12
 8007c46:	46bd      	mov	sp, r7
 8007c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4c:	4770      	bx	lr
	...

08007c50 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8007c50:	b480      	push	{r7}
 8007c52:	b083      	sub	sp, #12
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8007c58:	4a08      	ldr	r2, [pc, #32]	; (8007c7c <HAL_HSEM_FastTake+0x2c>)
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	3320      	adds	r3, #32
 8007c5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c62:	4a07      	ldr	r2, [pc, #28]	; (8007c80 <HAL_HSEM_FastTake+0x30>)
 8007c64:	4293      	cmp	r3, r2
 8007c66:	d101      	bne.n	8007c6c <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8007c68:	2300      	movs	r3, #0
 8007c6a:	e000      	b.n	8007c6e <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8007c6c:	2301      	movs	r3, #1
}
 8007c6e:	4618      	mov	r0, r3
 8007c70:	370c      	adds	r7, #12
 8007c72:	46bd      	mov	sp, r7
 8007c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c78:	4770      	bx	lr
 8007c7a:	bf00      	nop
 8007c7c:	58026400 	.word	0x58026400
 8007c80:	80000300 	.word	0x80000300

08007c84 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8007c84:	b480      	push	{r7}
 8007c86:	b083      	sub	sp, #12
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
 8007c8c:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8007c8e:	4906      	ldr	r1, [pc, #24]	; (8007ca8 <HAL_HSEM_Release+0x24>)
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8007c9c:	bf00      	nop
 8007c9e:	370c      	adds	r7, #12
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca6:	4770      	bx	lr
 8007ca8:	58026400 	.word	0x58026400

08007cac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b082      	sub	sp, #8
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d101      	bne.n	8007cbe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007cba:	2301      	movs	r3, #1
 8007cbc:	e07f      	b.n	8007dbe <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007cc4:	b2db      	uxtb	r3, r3
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d106      	bne.n	8007cd8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	2200      	movs	r2, #0
 8007cce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007cd2:	6878      	ldr	r0, [r7, #4]
 8007cd4:	f7fb fa34 	bl	8003140 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2224      	movs	r2, #36	; 0x24
 8007cdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	681a      	ldr	r2, [r3, #0]
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	f022 0201 	bic.w	r2, r2, #1
 8007cee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	685a      	ldr	r2, [r3, #4]
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007cfc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	689a      	ldr	r2, [r3, #8]
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007d0c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	68db      	ldr	r3, [r3, #12]
 8007d12:	2b01      	cmp	r3, #1
 8007d14:	d107      	bne.n	8007d26 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	689a      	ldr	r2, [r3, #8]
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007d22:	609a      	str	r2, [r3, #8]
 8007d24:	e006      	b.n	8007d34 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	689a      	ldr	r2, [r3, #8]
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8007d32:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	68db      	ldr	r3, [r3, #12]
 8007d38:	2b02      	cmp	r3, #2
 8007d3a:	d104      	bne.n	8007d46 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007d44:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	6859      	ldr	r1, [r3, #4]
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681a      	ldr	r2, [r3, #0]
 8007d50:	4b1d      	ldr	r3, [pc, #116]	; (8007dc8 <HAL_I2C_Init+0x11c>)
 8007d52:	430b      	orrs	r3, r1
 8007d54:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	68da      	ldr	r2, [r3, #12]
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007d64:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	691a      	ldr	r2, [r3, #16]
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	695b      	ldr	r3, [r3, #20]
 8007d6e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	699b      	ldr	r3, [r3, #24]
 8007d76:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	430a      	orrs	r2, r1
 8007d7e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	69d9      	ldr	r1, [r3, #28]
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	6a1a      	ldr	r2, [r3, #32]
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	430a      	orrs	r2, r1
 8007d8e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	681a      	ldr	r2, [r3, #0]
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f042 0201 	orr.w	r2, r2, #1
 8007d9e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2200      	movs	r2, #0
 8007da4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2220      	movs	r2, #32
 8007daa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	2200      	movs	r2, #0
 8007db2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2200      	movs	r2, #0
 8007db8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007dbc:	2300      	movs	r3, #0
}
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	3708      	adds	r7, #8
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	bd80      	pop	{r7, pc}
 8007dc6:	bf00      	nop
 8007dc8:	02008000 	.word	0x02008000

08007dcc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b088      	sub	sp, #32
 8007dd0:	af02      	add	r7, sp, #8
 8007dd2:	60f8      	str	r0, [r7, #12]
 8007dd4:	607a      	str	r2, [r7, #4]
 8007dd6:	461a      	mov	r2, r3
 8007dd8:	460b      	mov	r3, r1
 8007dda:	817b      	strh	r3, [r7, #10]
 8007ddc:	4613      	mov	r3, r2
 8007dde:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007de6:	b2db      	uxtb	r3, r3
 8007de8:	2b20      	cmp	r3, #32
 8007dea:	f040 80da 	bne.w	8007fa2 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007df4:	2b01      	cmp	r3, #1
 8007df6:	d101      	bne.n	8007dfc <HAL_I2C_Master_Transmit+0x30>
 8007df8:	2302      	movs	r3, #2
 8007dfa:	e0d3      	b.n	8007fa4 <HAL_I2C_Master_Transmit+0x1d8>
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	2201      	movs	r2, #1
 8007e00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007e04:	f7fb fec6 	bl	8003b94 <HAL_GetTick>
 8007e08:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007e0a:	697b      	ldr	r3, [r7, #20]
 8007e0c:	9300      	str	r3, [sp, #0]
 8007e0e:	2319      	movs	r3, #25
 8007e10:	2201      	movs	r2, #1
 8007e12:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007e16:	68f8      	ldr	r0, [r7, #12]
 8007e18:	f000 f8f0 	bl	8007ffc <I2C_WaitOnFlagUntilTimeout>
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d001      	beq.n	8007e26 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8007e22:	2301      	movs	r3, #1
 8007e24:	e0be      	b.n	8007fa4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	2221      	movs	r2, #33	; 0x21
 8007e2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	2210      	movs	r2, #16
 8007e32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	2200      	movs	r2, #0
 8007e3a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	687a      	ldr	r2, [r7, #4]
 8007e40:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	893a      	ldrh	r2, [r7, #8]
 8007e46:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e52:	b29b      	uxth	r3, r3
 8007e54:	2bff      	cmp	r3, #255	; 0xff
 8007e56:	d90e      	bls.n	8007e76 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	22ff      	movs	r2, #255	; 0xff
 8007e5c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e62:	b2da      	uxtb	r2, r3
 8007e64:	8979      	ldrh	r1, [r7, #10]
 8007e66:	4b51      	ldr	r3, [pc, #324]	; (8007fac <HAL_I2C_Master_Transmit+0x1e0>)
 8007e68:	9300      	str	r3, [sp, #0]
 8007e6a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007e6e:	68f8      	ldr	r0, [r7, #12]
 8007e70:	f000 fa7e 	bl	8008370 <I2C_TransferConfig>
 8007e74:	e06c      	b.n	8007f50 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e7a:	b29a      	uxth	r2, r3
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e84:	b2da      	uxtb	r2, r3
 8007e86:	8979      	ldrh	r1, [r7, #10]
 8007e88:	4b48      	ldr	r3, [pc, #288]	; (8007fac <HAL_I2C_Master_Transmit+0x1e0>)
 8007e8a:	9300      	str	r3, [sp, #0]
 8007e8c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007e90:	68f8      	ldr	r0, [r7, #12]
 8007e92:	f000 fa6d 	bl	8008370 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8007e96:	e05b      	b.n	8007f50 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007e98:	697a      	ldr	r2, [r7, #20]
 8007e9a:	6a39      	ldr	r1, [r7, #32]
 8007e9c:	68f8      	ldr	r0, [r7, #12]
 8007e9e:	f000 f8fc 	bl	800809a <I2C_WaitOnTXISFlagUntilTimeout>
 8007ea2:	4603      	mov	r3, r0
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d001      	beq.n	8007eac <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8007ea8:	2301      	movs	r3, #1
 8007eaa:	e07b      	b.n	8007fa4 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eb0:	781a      	ldrb	r2, [r3, #0]
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ebc:	1c5a      	adds	r2, r3, #1
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ec6:	b29b      	uxth	r3, r3
 8007ec8:	3b01      	subs	r3, #1
 8007eca:	b29a      	uxth	r2, r3
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ed4:	3b01      	subs	r3, #1
 8007ed6:	b29a      	uxth	r2, r3
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ee0:	b29b      	uxth	r3, r3
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d034      	beq.n	8007f50 <HAL_I2C_Master_Transmit+0x184>
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d130      	bne.n	8007f50 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007eee:	697b      	ldr	r3, [r7, #20]
 8007ef0:	9300      	str	r3, [sp, #0]
 8007ef2:	6a3b      	ldr	r3, [r7, #32]
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	2180      	movs	r1, #128	; 0x80
 8007ef8:	68f8      	ldr	r0, [r7, #12]
 8007efa:	f000 f87f 	bl	8007ffc <I2C_WaitOnFlagUntilTimeout>
 8007efe:	4603      	mov	r3, r0
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d001      	beq.n	8007f08 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8007f04:	2301      	movs	r3, #1
 8007f06:	e04d      	b.n	8007fa4 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f0c:	b29b      	uxth	r3, r3
 8007f0e:	2bff      	cmp	r3, #255	; 0xff
 8007f10:	d90e      	bls.n	8007f30 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	22ff      	movs	r2, #255	; 0xff
 8007f16:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f1c:	b2da      	uxtb	r2, r3
 8007f1e:	8979      	ldrh	r1, [r7, #10]
 8007f20:	2300      	movs	r3, #0
 8007f22:	9300      	str	r3, [sp, #0]
 8007f24:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007f28:	68f8      	ldr	r0, [r7, #12]
 8007f2a:	f000 fa21 	bl	8008370 <I2C_TransferConfig>
 8007f2e:	e00f      	b.n	8007f50 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f34:	b29a      	uxth	r2, r3
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f3e:	b2da      	uxtb	r2, r3
 8007f40:	8979      	ldrh	r1, [r7, #10]
 8007f42:	2300      	movs	r3, #0
 8007f44:	9300      	str	r3, [sp, #0]
 8007f46:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007f4a:	68f8      	ldr	r0, [r7, #12]
 8007f4c:	f000 fa10 	bl	8008370 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f54:	b29b      	uxth	r3, r3
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d19e      	bne.n	8007e98 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007f5a:	697a      	ldr	r2, [r7, #20]
 8007f5c:	6a39      	ldr	r1, [r7, #32]
 8007f5e:	68f8      	ldr	r0, [r7, #12]
 8007f60:	f000 f8e2 	bl	8008128 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007f64:	4603      	mov	r3, r0
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d001      	beq.n	8007f6e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8007f6a:	2301      	movs	r3, #1
 8007f6c:	e01a      	b.n	8007fa4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	2220      	movs	r2, #32
 8007f74:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	6859      	ldr	r1, [r3, #4]
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	681a      	ldr	r2, [r3, #0]
 8007f80:	4b0b      	ldr	r3, [pc, #44]	; (8007fb0 <HAL_I2C_Master_Transmit+0x1e4>)
 8007f82:	400b      	ands	r3, r1
 8007f84:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	2220      	movs	r2, #32
 8007f8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	2200      	movs	r2, #0
 8007f92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	2200      	movs	r2, #0
 8007f9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	e000      	b.n	8007fa4 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8007fa2:	2302      	movs	r3, #2
  }
}
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	3718      	adds	r7, #24
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	bd80      	pop	{r7, pc}
 8007fac:	80002000 	.word	0x80002000
 8007fb0:	fe00e800 	.word	0xfe00e800

08007fb4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007fb4:	b480      	push	{r7}
 8007fb6:	b083      	sub	sp, #12
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	699b      	ldr	r3, [r3, #24]
 8007fc2:	f003 0302 	and.w	r3, r3, #2
 8007fc6:	2b02      	cmp	r3, #2
 8007fc8:	d103      	bne.n	8007fd2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	2200      	movs	r2, #0
 8007fd0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	699b      	ldr	r3, [r3, #24]
 8007fd8:	f003 0301 	and.w	r3, r3, #1
 8007fdc:	2b01      	cmp	r3, #1
 8007fde:	d007      	beq.n	8007ff0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	699a      	ldr	r2, [r3, #24]
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	f042 0201 	orr.w	r2, r2, #1
 8007fee:	619a      	str	r2, [r3, #24]
  }
}
 8007ff0:	bf00      	nop
 8007ff2:	370c      	adds	r7, #12
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffa:	4770      	bx	lr

08007ffc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b084      	sub	sp, #16
 8008000:	af00      	add	r7, sp, #0
 8008002:	60f8      	str	r0, [r7, #12]
 8008004:	60b9      	str	r1, [r7, #8]
 8008006:	603b      	str	r3, [r7, #0]
 8008008:	4613      	mov	r3, r2
 800800a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800800c:	e031      	b.n	8008072 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008014:	d02d      	beq.n	8008072 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008016:	f7fb fdbd 	bl	8003b94 <HAL_GetTick>
 800801a:	4602      	mov	r2, r0
 800801c:	69bb      	ldr	r3, [r7, #24]
 800801e:	1ad3      	subs	r3, r2, r3
 8008020:	683a      	ldr	r2, [r7, #0]
 8008022:	429a      	cmp	r2, r3
 8008024:	d302      	bcc.n	800802c <I2C_WaitOnFlagUntilTimeout+0x30>
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d122      	bne.n	8008072 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	699a      	ldr	r2, [r3, #24]
 8008032:	68bb      	ldr	r3, [r7, #8]
 8008034:	4013      	ands	r3, r2
 8008036:	68ba      	ldr	r2, [r7, #8]
 8008038:	429a      	cmp	r2, r3
 800803a:	bf0c      	ite	eq
 800803c:	2301      	moveq	r3, #1
 800803e:	2300      	movne	r3, #0
 8008040:	b2db      	uxtb	r3, r3
 8008042:	461a      	mov	r2, r3
 8008044:	79fb      	ldrb	r3, [r7, #7]
 8008046:	429a      	cmp	r2, r3
 8008048:	d113      	bne.n	8008072 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800804e:	f043 0220 	orr.w	r2, r3, #32
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	2220      	movs	r2, #32
 800805a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	2200      	movs	r2, #0
 8008062:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	2200      	movs	r2, #0
 800806a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800806e:	2301      	movs	r3, #1
 8008070:	e00f      	b.n	8008092 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	699a      	ldr	r2, [r3, #24]
 8008078:	68bb      	ldr	r3, [r7, #8]
 800807a:	4013      	ands	r3, r2
 800807c:	68ba      	ldr	r2, [r7, #8]
 800807e:	429a      	cmp	r2, r3
 8008080:	bf0c      	ite	eq
 8008082:	2301      	moveq	r3, #1
 8008084:	2300      	movne	r3, #0
 8008086:	b2db      	uxtb	r3, r3
 8008088:	461a      	mov	r2, r3
 800808a:	79fb      	ldrb	r3, [r7, #7]
 800808c:	429a      	cmp	r2, r3
 800808e:	d0be      	beq.n	800800e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008090:	2300      	movs	r3, #0
}
 8008092:	4618      	mov	r0, r3
 8008094:	3710      	adds	r7, #16
 8008096:	46bd      	mov	sp, r7
 8008098:	bd80      	pop	{r7, pc}

0800809a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800809a:	b580      	push	{r7, lr}
 800809c:	b084      	sub	sp, #16
 800809e:	af00      	add	r7, sp, #0
 80080a0:	60f8      	str	r0, [r7, #12]
 80080a2:	60b9      	str	r1, [r7, #8]
 80080a4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80080a6:	e033      	b.n	8008110 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80080a8:	687a      	ldr	r2, [r7, #4]
 80080aa:	68b9      	ldr	r1, [r7, #8]
 80080ac:	68f8      	ldr	r0, [r7, #12]
 80080ae:	f000 f87f 	bl	80081b0 <I2C_IsErrorOccurred>
 80080b2:	4603      	mov	r3, r0
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d001      	beq.n	80080bc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80080b8:	2301      	movs	r3, #1
 80080ba:	e031      	b.n	8008120 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80080bc:	68bb      	ldr	r3, [r7, #8]
 80080be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080c2:	d025      	beq.n	8008110 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80080c4:	f7fb fd66 	bl	8003b94 <HAL_GetTick>
 80080c8:	4602      	mov	r2, r0
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	1ad3      	subs	r3, r2, r3
 80080ce:	68ba      	ldr	r2, [r7, #8]
 80080d0:	429a      	cmp	r2, r3
 80080d2:	d302      	bcc.n	80080da <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80080d4:	68bb      	ldr	r3, [r7, #8]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d11a      	bne.n	8008110 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	699b      	ldr	r3, [r3, #24]
 80080e0:	f003 0302 	and.w	r3, r3, #2
 80080e4:	2b02      	cmp	r3, #2
 80080e6:	d013      	beq.n	8008110 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080ec:	f043 0220 	orr.w	r2, r3, #32
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	2220      	movs	r2, #32
 80080f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	2200      	movs	r2, #0
 8008100:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	2200      	movs	r2, #0
 8008108:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800810c:	2301      	movs	r3, #1
 800810e:	e007      	b.n	8008120 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	699b      	ldr	r3, [r3, #24]
 8008116:	f003 0302 	and.w	r3, r3, #2
 800811a:	2b02      	cmp	r3, #2
 800811c:	d1c4      	bne.n	80080a8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800811e:	2300      	movs	r3, #0
}
 8008120:	4618      	mov	r0, r3
 8008122:	3710      	adds	r7, #16
 8008124:	46bd      	mov	sp, r7
 8008126:	bd80      	pop	{r7, pc}

08008128 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b084      	sub	sp, #16
 800812c:	af00      	add	r7, sp, #0
 800812e:	60f8      	str	r0, [r7, #12]
 8008130:	60b9      	str	r1, [r7, #8]
 8008132:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008134:	e02f      	b.n	8008196 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008136:	687a      	ldr	r2, [r7, #4]
 8008138:	68b9      	ldr	r1, [r7, #8]
 800813a:	68f8      	ldr	r0, [r7, #12]
 800813c:	f000 f838 	bl	80081b0 <I2C_IsErrorOccurred>
 8008140:	4603      	mov	r3, r0
 8008142:	2b00      	cmp	r3, #0
 8008144:	d001      	beq.n	800814a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008146:	2301      	movs	r3, #1
 8008148:	e02d      	b.n	80081a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800814a:	f7fb fd23 	bl	8003b94 <HAL_GetTick>
 800814e:	4602      	mov	r2, r0
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	1ad3      	subs	r3, r2, r3
 8008154:	68ba      	ldr	r2, [r7, #8]
 8008156:	429a      	cmp	r2, r3
 8008158:	d302      	bcc.n	8008160 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800815a:	68bb      	ldr	r3, [r7, #8]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d11a      	bne.n	8008196 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	699b      	ldr	r3, [r3, #24]
 8008166:	f003 0320 	and.w	r3, r3, #32
 800816a:	2b20      	cmp	r3, #32
 800816c:	d013      	beq.n	8008196 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008172:	f043 0220 	orr.w	r2, r3, #32
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	2220      	movs	r2, #32
 800817e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	2200      	movs	r2, #0
 8008186:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	2200      	movs	r2, #0
 800818e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8008192:	2301      	movs	r3, #1
 8008194:	e007      	b.n	80081a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	699b      	ldr	r3, [r3, #24]
 800819c:	f003 0320 	and.w	r3, r3, #32
 80081a0:	2b20      	cmp	r3, #32
 80081a2:	d1c8      	bne.n	8008136 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80081a4:	2300      	movs	r3, #0
}
 80081a6:	4618      	mov	r0, r3
 80081a8:	3710      	adds	r7, #16
 80081aa:	46bd      	mov	sp, r7
 80081ac:	bd80      	pop	{r7, pc}
	...

080081b0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b08a      	sub	sp, #40	; 0x28
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	60f8      	str	r0, [r7, #12]
 80081b8:	60b9      	str	r1, [r7, #8]
 80081ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80081bc:	2300      	movs	r3, #0
 80081be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	699b      	ldr	r3, [r3, #24]
 80081c8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80081ca:	2300      	movs	r3, #0
 80081cc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80081d2:	69bb      	ldr	r3, [r7, #24]
 80081d4:	f003 0310 	and.w	r3, r3, #16
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d068      	beq.n	80082ae <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	2210      	movs	r2, #16
 80081e2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80081e4:	e049      	b.n	800827a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80081e6:	68bb      	ldr	r3, [r7, #8]
 80081e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081ec:	d045      	beq.n	800827a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80081ee:	f7fb fcd1 	bl	8003b94 <HAL_GetTick>
 80081f2:	4602      	mov	r2, r0
 80081f4:	69fb      	ldr	r3, [r7, #28]
 80081f6:	1ad3      	subs	r3, r2, r3
 80081f8:	68ba      	ldr	r2, [r7, #8]
 80081fa:	429a      	cmp	r2, r3
 80081fc:	d302      	bcc.n	8008204 <I2C_IsErrorOccurred+0x54>
 80081fe:	68bb      	ldr	r3, [r7, #8]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d13a      	bne.n	800827a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	685b      	ldr	r3, [r3, #4]
 800820a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800820e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008216:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	699b      	ldr	r3, [r3, #24]
 800821e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008222:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008226:	d121      	bne.n	800826c <I2C_IsErrorOccurred+0xbc>
 8008228:	697b      	ldr	r3, [r7, #20]
 800822a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800822e:	d01d      	beq.n	800826c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8008230:	7cfb      	ldrb	r3, [r7, #19]
 8008232:	2b20      	cmp	r3, #32
 8008234:	d01a      	beq.n	800826c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	685a      	ldr	r2, [r3, #4]
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008244:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8008246:	f7fb fca5 	bl	8003b94 <HAL_GetTick>
 800824a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800824c:	e00e      	b.n	800826c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800824e:	f7fb fca1 	bl	8003b94 <HAL_GetTick>
 8008252:	4602      	mov	r2, r0
 8008254:	69fb      	ldr	r3, [r7, #28]
 8008256:	1ad3      	subs	r3, r2, r3
 8008258:	2b19      	cmp	r3, #25
 800825a:	d907      	bls.n	800826c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800825c:	6a3b      	ldr	r3, [r7, #32]
 800825e:	f043 0320 	orr.w	r3, r3, #32
 8008262:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8008264:	2301      	movs	r3, #1
 8008266:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800826a:	e006      	b.n	800827a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	699b      	ldr	r3, [r3, #24]
 8008272:	f003 0320 	and.w	r3, r3, #32
 8008276:	2b20      	cmp	r3, #32
 8008278:	d1e9      	bne.n	800824e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	699b      	ldr	r3, [r3, #24]
 8008280:	f003 0320 	and.w	r3, r3, #32
 8008284:	2b20      	cmp	r3, #32
 8008286:	d003      	beq.n	8008290 <I2C_IsErrorOccurred+0xe0>
 8008288:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800828c:	2b00      	cmp	r3, #0
 800828e:	d0aa      	beq.n	80081e6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8008290:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008294:	2b00      	cmp	r3, #0
 8008296:	d103      	bne.n	80082a0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	2220      	movs	r2, #32
 800829e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80082a0:	6a3b      	ldr	r3, [r7, #32]
 80082a2:	f043 0304 	orr.w	r3, r3, #4
 80082a6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80082a8:	2301      	movs	r3, #1
 80082aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	699b      	ldr	r3, [r3, #24]
 80082b4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80082b6:	69bb      	ldr	r3, [r7, #24]
 80082b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d00b      	beq.n	80082d8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80082c0:	6a3b      	ldr	r3, [r7, #32]
 80082c2:	f043 0301 	orr.w	r3, r3, #1
 80082c6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80082d0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80082d2:	2301      	movs	r3, #1
 80082d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80082d8:	69bb      	ldr	r3, [r7, #24]
 80082da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d00b      	beq.n	80082fa <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80082e2:	6a3b      	ldr	r3, [r7, #32]
 80082e4:	f043 0308 	orr.w	r3, r3, #8
 80082e8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80082f2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80082f4:	2301      	movs	r3, #1
 80082f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80082fa:	69bb      	ldr	r3, [r7, #24]
 80082fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008300:	2b00      	cmp	r3, #0
 8008302:	d00b      	beq.n	800831c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8008304:	6a3b      	ldr	r3, [r7, #32]
 8008306:	f043 0302 	orr.w	r3, r3, #2
 800830a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008314:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008316:	2301      	movs	r3, #1
 8008318:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800831c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008320:	2b00      	cmp	r3, #0
 8008322:	d01c      	beq.n	800835e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008324:	68f8      	ldr	r0, [r7, #12]
 8008326:	f7ff fe45 	bl	8007fb4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	6859      	ldr	r1, [r3, #4]
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	681a      	ldr	r2, [r3, #0]
 8008334:	4b0d      	ldr	r3, [pc, #52]	; (800836c <I2C_IsErrorOccurred+0x1bc>)
 8008336:	400b      	ands	r3, r1
 8008338:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800833e:	6a3b      	ldr	r3, [r7, #32]
 8008340:	431a      	orrs	r2, r3
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	2220      	movs	r2, #32
 800834a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	2200      	movs	r2, #0
 8008352:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	2200      	movs	r2, #0
 800835a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800835e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008362:	4618      	mov	r0, r3
 8008364:	3728      	adds	r7, #40	; 0x28
 8008366:	46bd      	mov	sp, r7
 8008368:	bd80      	pop	{r7, pc}
 800836a:	bf00      	nop
 800836c:	fe00e800 	.word	0xfe00e800

08008370 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8008370:	b480      	push	{r7}
 8008372:	b087      	sub	sp, #28
 8008374:	af00      	add	r7, sp, #0
 8008376:	60f8      	str	r0, [r7, #12]
 8008378:	607b      	str	r3, [r7, #4]
 800837a:	460b      	mov	r3, r1
 800837c:	817b      	strh	r3, [r7, #10]
 800837e:	4613      	mov	r3, r2
 8008380:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008382:	897b      	ldrh	r3, [r7, #10]
 8008384:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008388:	7a7b      	ldrb	r3, [r7, #9]
 800838a:	041b      	lsls	r3, r3, #16
 800838c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008390:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008396:	6a3b      	ldr	r3, [r7, #32]
 8008398:	4313      	orrs	r3, r2
 800839a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800839e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	685a      	ldr	r2, [r3, #4]
 80083a6:	6a3b      	ldr	r3, [r7, #32]
 80083a8:	0d5b      	lsrs	r3, r3, #21
 80083aa:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80083ae:	4b08      	ldr	r3, [pc, #32]	; (80083d0 <I2C_TransferConfig+0x60>)
 80083b0:	430b      	orrs	r3, r1
 80083b2:	43db      	mvns	r3, r3
 80083b4:	ea02 0103 	and.w	r1, r2, r3
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	697a      	ldr	r2, [r7, #20]
 80083be:	430a      	orrs	r2, r1
 80083c0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80083c2:	bf00      	nop
 80083c4:	371c      	adds	r7, #28
 80083c6:	46bd      	mov	sp, r7
 80083c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083cc:	4770      	bx	lr
 80083ce:	bf00      	nop
 80083d0:	03ff63ff 	.word	0x03ff63ff

080083d4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80083d4:	b480      	push	{r7}
 80083d6:	b083      	sub	sp, #12
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
 80083dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80083e4:	b2db      	uxtb	r3, r3
 80083e6:	2b20      	cmp	r3, #32
 80083e8:	d138      	bne.n	800845c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80083f0:	2b01      	cmp	r3, #1
 80083f2:	d101      	bne.n	80083f8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80083f4:	2302      	movs	r3, #2
 80083f6:	e032      	b.n	800845e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2201      	movs	r2, #1
 80083fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2224      	movs	r2, #36	; 0x24
 8008404:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	681a      	ldr	r2, [r3, #0]
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	f022 0201 	bic.w	r2, r2, #1
 8008416:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	681a      	ldr	r2, [r3, #0]
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008426:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	6819      	ldr	r1, [r3, #0]
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	683a      	ldr	r2, [r7, #0]
 8008434:	430a      	orrs	r2, r1
 8008436:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	681a      	ldr	r2, [r3, #0]
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	f042 0201 	orr.w	r2, r2, #1
 8008446:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2220      	movs	r2, #32
 800844c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2200      	movs	r2, #0
 8008454:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008458:	2300      	movs	r3, #0
 800845a:	e000      	b.n	800845e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800845c:	2302      	movs	r3, #2
  }
}
 800845e:	4618      	mov	r0, r3
 8008460:	370c      	adds	r7, #12
 8008462:	46bd      	mov	sp, r7
 8008464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008468:	4770      	bx	lr

0800846a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800846a:	b480      	push	{r7}
 800846c:	b085      	sub	sp, #20
 800846e:	af00      	add	r7, sp, #0
 8008470:	6078      	str	r0, [r7, #4]
 8008472:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800847a:	b2db      	uxtb	r3, r3
 800847c:	2b20      	cmp	r3, #32
 800847e:	d139      	bne.n	80084f4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008486:	2b01      	cmp	r3, #1
 8008488:	d101      	bne.n	800848e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800848a:	2302      	movs	r3, #2
 800848c:	e033      	b.n	80084f6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	2201      	movs	r2, #1
 8008492:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	2224      	movs	r2, #36	; 0x24
 800849a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	681a      	ldr	r2, [r3, #0]
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	f022 0201 	bic.w	r2, r2, #1
 80084ac:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80084bc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80084be:	683b      	ldr	r3, [r7, #0]
 80084c0:	021b      	lsls	r3, r3, #8
 80084c2:	68fa      	ldr	r2, [r7, #12]
 80084c4:	4313      	orrs	r3, r2
 80084c6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	68fa      	ldr	r2, [r7, #12]
 80084ce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	681a      	ldr	r2, [r3, #0]
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	f042 0201 	orr.w	r2, r2, #1
 80084de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2220      	movs	r2, #32
 80084e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2200      	movs	r2, #0
 80084ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80084f0:	2300      	movs	r3, #0
 80084f2:	e000      	b.n	80084f6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80084f4:	2302      	movs	r3, #2
  }
}
 80084f6:	4618      	mov	r0, r3
 80084f8:	3714      	adds	r7, #20
 80084fa:	46bd      	mov	sp, r7
 80084fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008500:	4770      	bx	lr

08008502 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8008502:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008504:	b08f      	sub	sp, #60	; 0x3c
 8008506:	af0a      	add	r7, sp, #40	; 0x28
 8008508:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d101      	bne.n	8008514 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8008510:	2301      	movs	r3, #1
 8008512:	e116      	b.n	8008742 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8008520:	b2db      	uxtb	r3, r3
 8008522:	2b00      	cmp	r3, #0
 8008524:	d106      	bne.n	8008534 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	2200      	movs	r2, #0
 800852a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800852e:	6878      	ldr	r0, [r7, #4]
 8008530:	f7fb f8ba 	bl	80036a8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2203      	movs	r2, #3
 8008538:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800853c:	68bb      	ldr	r3, [r7, #8]
 800853e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008540:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008544:	2b00      	cmp	r3, #0
 8008546:	d102      	bne.n	800854e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2200      	movs	r2, #0
 800854c:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	4618      	mov	r0, r3
 8008554:	f007 f880 	bl	800f658 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	603b      	str	r3, [r7, #0]
 800855e:	687e      	ldr	r6, [r7, #4]
 8008560:	466d      	mov	r5, sp
 8008562:	f106 0410 	add.w	r4, r6, #16
 8008566:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008568:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800856a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800856c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800856e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008572:	e885 0003 	stmia.w	r5, {r0, r1}
 8008576:	1d33      	adds	r3, r6, #4
 8008578:	cb0e      	ldmia	r3, {r1, r2, r3}
 800857a:	6838      	ldr	r0, [r7, #0]
 800857c:	f006 fffe 	bl	800f57c <USB_CoreInit>
 8008580:	4603      	mov	r3, r0
 8008582:	2b00      	cmp	r3, #0
 8008584:	d005      	beq.n	8008592 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	2202      	movs	r2, #2
 800858a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800858e:	2301      	movs	r3, #1
 8008590:	e0d7      	b.n	8008742 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	2100      	movs	r1, #0
 8008598:	4618      	mov	r0, r3
 800859a:	f007 f86e 	bl	800f67a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800859e:	2300      	movs	r3, #0
 80085a0:	73fb      	strb	r3, [r7, #15]
 80085a2:	e04a      	b.n	800863a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80085a4:	7bfa      	ldrb	r2, [r7, #15]
 80085a6:	6879      	ldr	r1, [r7, #4]
 80085a8:	4613      	mov	r3, r2
 80085aa:	00db      	lsls	r3, r3, #3
 80085ac:	4413      	add	r3, r2
 80085ae:	009b      	lsls	r3, r3, #2
 80085b0:	440b      	add	r3, r1
 80085b2:	333d      	adds	r3, #61	; 0x3d
 80085b4:	2201      	movs	r2, #1
 80085b6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80085b8:	7bfa      	ldrb	r2, [r7, #15]
 80085ba:	6879      	ldr	r1, [r7, #4]
 80085bc:	4613      	mov	r3, r2
 80085be:	00db      	lsls	r3, r3, #3
 80085c0:	4413      	add	r3, r2
 80085c2:	009b      	lsls	r3, r3, #2
 80085c4:	440b      	add	r3, r1
 80085c6:	333c      	adds	r3, #60	; 0x3c
 80085c8:	7bfa      	ldrb	r2, [r7, #15]
 80085ca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80085cc:	7bfa      	ldrb	r2, [r7, #15]
 80085ce:	7bfb      	ldrb	r3, [r7, #15]
 80085d0:	b298      	uxth	r0, r3
 80085d2:	6879      	ldr	r1, [r7, #4]
 80085d4:	4613      	mov	r3, r2
 80085d6:	00db      	lsls	r3, r3, #3
 80085d8:	4413      	add	r3, r2
 80085da:	009b      	lsls	r3, r3, #2
 80085dc:	440b      	add	r3, r1
 80085de:	3356      	adds	r3, #86	; 0x56
 80085e0:	4602      	mov	r2, r0
 80085e2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80085e4:	7bfa      	ldrb	r2, [r7, #15]
 80085e6:	6879      	ldr	r1, [r7, #4]
 80085e8:	4613      	mov	r3, r2
 80085ea:	00db      	lsls	r3, r3, #3
 80085ec:	4413      	add	r3, r2
 80085ee:	009b      	lsls	r3, r3, #2
 80085f0:	440b      	add	r3, r1
 80085f2:	3340      	adds	r3, #64	; 0x40
 80085f4:	2200      	movs	r2, #0
 80085f6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80085f8:	7bfa      	ldrb	r2, [r7, #15]
 80085fa:	6879      	ldr	r1, [r7, #4]
 80085fc:	4613      	mov	r3, r2
 80085fe:	00db      	lsls	r3, r3, #3
 8008600:	4413      	add	r3, r2
 8008602:	009b      	lsls	r3, r3, #2
 8008604:	440b      	add	r3, r1
 8008606:	3344      	adds	r3, #68	; 0x44
 8008608:	2200      	movs	r2, #0
 800860a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800860c:	7bfa      	ldrb	r2, [r7, #15]
 800860e:	6879      	ldr	r1, [r7, #4]
 8008610:	4613      	mov	r3, r2
 8008612:	00db      	lsls	r3, r3, #3
 8008614:	4413      	add	r3, r2
 8008616:	009b      	lsls	r3, r3, #2
 8008618:	440b      	add	r3, r1
 800861a:	3348      	adds	r3, #72	; 0x48
 800861c:	2200      	movs	r2, #0
 800861e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8008620:	7bfa      	ldrb	r2, [r7, #15]
 8008622:	6879      	ldr	r1, [r7, #4]
 8008624:	4613      	mov	r3, r2
 8008626:	00db      	lsls	r3, r3, #3
 8008628:	4413      	add	r3, r2
 800862a:	009b      	lsls	r3, r3, #2
 800862c:	440b      	add	r3, r1
 800862e:	334c      	adds	r3, #76	; 0x4c
 8008630:	2200      	movs	r2, #0
 8008632:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008634:	7bfb      	ldrb	r3, [r7, #15]
 8008636:	3301      	adds	r3, #1
 8008638:	73fb      	strb	r3, [r7, #15]
 800863a:	7bfa      	ldrb	r2, [r7, #15]
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	685b      	ldr	r3, [r3, #4]
 8008640:	429a      	cmp	r2, r3
 8008642:	d3af      	bcc.n	80085a4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008644:	2300      	movs	r3, #0
 8008646:	73fb      	strb	r3, [r7, #15]
 8008648:	e044      	b.n	80086d4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800864a:	7bfa      	ldrb	r2, [r7, #15]
 800864c:	6879      	ldr	r1, [r7, #4]
 800864e:	4613      	mov	r3, r2
 8008650:	00db      	lsls	r3, r3, #3
 8008652:	4413      	add	r3, r2
 8008654:	009b      	lsls	r3, r3, #2
 8008656:	440b      	add	r3, r1
 8008658:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800865c:	2200      	movs	r2, #0
 800865e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8008660:	7bfa      	ldrb	r2, [r7, #15]
 8008662:	6879      	ldr	r1, [r7, #4]
 8008664:	4613      	mov	r3, r2
 8008666:	00db      	lsls	r3, r3, #3
 8008668:	4413      	add	r3, r2
 800866a:	009b      	lsls	r3, r3, #2
 800866c:	440b      	add	r3, r1
 800866e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8008672:	7bfa      	ldrb	r2, [r7, #15]
 8008674:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8008676:	7bfa      	ldrb	r2, [r7, #15]
 8008678:	6879      	ldr	r1, [r7, #4]
 800867a:	4613      	mov	r3, r2
 800867c:	00db      	lsls	r3, r3, #3
 800867e:	4413      	add	r3, r2
 8008680:	009b      	lsls	r3, r3, #2
 8008682:	440b      	add	r3, r1
 8008684:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008688:	2200      	movs	r2, #0
 800868a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800868c:	7bfa      	ldrb	r2, [r7, #15]
 800868e:	6879      	ldr	r1, [r7, #4]
 8008690:	4613      	mov	r3, r2
 8008692:	00db      	lsls	r3, r3, #3
 8008694:	4413      	add	r3, r2
 8008696:	009b      	lsls	r3, r3, #2
 8008698:	440b      	add	r3, r1
 800869a:	f503 7321 	add.w	r3, r3, #644	; 0x284
 800869e:	2200      	movs	r2, #0
 80086a0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80086a2:	7bfa      	ldrb	r2, [r7, #15]
 80086a4:	6879      	ldr	r1, [r7, #4]
 80086a6:	4613      	mov	r3, r2
 80086a8:	00db      	lsls	r3, r3, #3
 80086aa:	4413      	add	r3, r2
 80086ac:	009b      	lsls	r3, r3, #2
 80086ae:	440b      	add	r3, r1
 80086b0:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80086b4:	2200      	movs	r2, #0
 80086b6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80086b8:	7bfa      	ldrb	r2, [r7, #15]
 80086ba:	6879      	ldr	r1, [r7, #4]
 80086bc:	4613      	mov	r3, r2
 80086be:	00db      	lsls	r3, r3, #3
 80086c0:	4413      	add	r3, r2
 80086c2:	009b      	lsls	r3, r3, #2
 80086c4:	440b      	add	r3, r1
 80086c6:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80086ca:	2200      	movs	r2, #0
 80086cc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80086ce:	7bfb      	ldrb	r3, [r7, #15]
 80086d0:	3301      	adds	r3, #1
 80086d2:	73fb      	strb	r3, [r7, #15]
 80086d4:	7bfa      	ldrb	r2, [r7, #15]
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	685b      	ldr	r3, [r3, #4]
 80086da:	429a      	cmp	r2, r3
 80086dc:	d3b5      	bcc.n	800864a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	603b      	str	r3, [r7, #0]
 80086e4:	687e      	ldr	r6, [r7, #4]
 80086e6:	466d      	mov	r5, sp
 80086e8:	f106 0410 	add.w	r4, r6, #16
 80086ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80086ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80086f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80086f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80086f4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80086f8:	e885 0003 	stmia.w	r5, {r0, r1}
 80086fc:	1d33      	adds	r3, r6, #4
 80086fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008700:	6838      	ldr	r0, [r7, #0]
 8008702:	f007 f807 	bl	800f714 <USB_DevInit>
 8008706:	4603      	mov	r3, r0
 8008708:	2b00      	cmp	r3, #0
 800870a:	d005      	beq.n	8008718 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2202      	movs	r2, #2
 8008710:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8008714:	2301      	movs	r3, #1
 8008716:	e014      	b.n	8008742 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	2200      	movs	r2, #0
 800871c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2201      	movs	r2, #1
 8008724:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800872c:	2b01      	cmp	r3, #1
 800872e:	d102      	bne.n	8008736 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8008730:	6878      	ldr	r0, [r7, #4]
 8008732:	f000 f80b 	bl	800874c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	4618      	mov	r0, r3
 800873c:	f007 f9c5 	bl	800faca <USB_DevDisconnect>

  return HAL_OK;
 8008740:	2300      	movs	r3, #0
}
 8008742:	4618      	mov	r0, r3
 8008744:	3714      	adds	r7, #20
 8008746:	46bd      	mov	sp, r7
 8008748:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800874c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800874c:	b480      	push	{r7}
 800874e:	b085      	sub	sp, #20
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	2201      	movs	r2, #1
 800875e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	2200      	movs	r2, #0
 8008766:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	699b      	ldr	r3, [r3, #24]
 800876e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800877a:	4b05      	ldr	r3, [pc, #20]	; (8008790 <HAL_PCDEx_ActivateLPM+0x44>)
 800877c:	4313      	orrs	r3, r2
 800877e:	68fa      	ldr	r2, [r7, #12]
 8008780:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8008782:	2300      	movs	r3, #0
}
 8008784:	4618      	mov	r0, r3
 8008786:	3714      	adds	r7, #20
 8008788:	46bd      	mov	sp, r7
 800878a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878e:	4770      	bx	lr
 8008790:	10000003 	.word	0x10000003

08008794 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008794:	b580      	push	{r7, lr}
 8008796:	b084      	sub	sp, #16
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800879c:	4b29      	ldr	r3, [pc, #164]	; (8008844 <HAL_PWREx_ConfigSupply+0xb0>)
 800879e:	68db      	ldr	r3, [r3, #12]
 80087a0:	f003 0307 	and.w	r3, r3, #7
 80087a4:	2b06      	cmp	r3, #6
 80087a6:	d00a      	beq.n	80087be <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80087a8:	4b26      	ldr	r3, [pc, #152]	; (8008844 <HAL_PWREx_ConfigSupply+0xb0>)
 80087aa:	68db      	ldr	r3, [r3, #12]
 80087ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80087b0:	687a      	ldr	r2, [r7, #4]
 80087b2:	429a      	cmp	r2, r3
 80087b4:	d001      	beq.n	80087ba <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80087b6:	2301      	movs	r3, #1
 80087b8:	e040      	b.n	800883c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80087ba:	2300      	movs	r3, #0
 80087bc:	e03e      	b.n	800883c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80087be:	4b21      	ldr	r3, [pc, #132]	; (8008844 <HAL_PWREx_ConfigSupply+0xb0>)
 80087c0:	68db      	ldr	r3, [r3, #12]
 80087c2:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80087c6:	491f      	ldr	r1, [pc, #124]	; (8008844 <HAL_PWREx_ConfigSupply+0xb0>)
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	4313      	orrs	r3, r2
 80087cc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80087ce:	f7fb f9e1 	bl	8003b94 <HAL_GetTick>
 80087d2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80087d4:	e009      	b.n	80087ea <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80087d6:	f7fb f9dd 	bl	8003b94 <HAL_GetTick>
 80087da:	4602      	mov	r2, r0
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	1ad3      	subs	r3, r2, r3
 80087e0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80087e4:	d901      	bls.n	80087ea <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80087e6:	2301      	movs	r3, #1
 80087e8:	e028      	b.n	800883c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80087ea:	4b16      	ldr	r3, [pc, #88]	; (8008844 <HAL_PWREx_ConfigSupply+0xb0>)
 80087ec:	685b      	ldr	r3, [r3, #4]
 80087ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80087f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80087f6:	d1ee      	bne.n	80087d6 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2b1e      	cmp	r3, #30
 80087fc:	d008      	beq.n	8008810 <HAL_PWREx_ConfigSupply+0x7c>
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	2b2e      	cmp	r3, #46	; 0x2e
 8008802:	d005      	beq.n	8008810 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2b1d      	cmp	r3, #29
 8008808:	d002      	beq.n	8008810 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	2b2d      	cmp	r3, #45	; 0x2d
 800880e:	d114      	bne.n	800883a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8008810:	f7fb f9c0 	bl	8003b94 <HAL_GetTick>
 8008814:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8008816:	e009      	b.n	800882c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008818:	f7fb f9bc 	bl	8003b94 <HAL_GetTick>
 800881c:	4602      	mov	r2, r0
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	1ad3      	subs	r3, r2, r3
 8008822:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008826:	d901      	bls.n	800882c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8008828:	2301      	movs	r3, #1
 800882a:	e007      	b.n	800883c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800882c:	4b05      	ldr	r3, [pc, #20]	; (8008844 <HAL_PWREx_ConfigSupply+0xb0>)
 800882e:	68db      	ldr	r3, [r3, #12]
 8008830:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008834:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008838:	d1ee      	bne.n	8008818 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800883a:	2300      	movs	r3, #0
}
 800883c:	4618      	mov	r0, r3
 800883e:	3710      	adds	r7, #16
 8008840:	46bd      	mov	sp, r7
 8008842:	bd80      	pop	{r7, pc}
 8008844:	58024800 	.word	0x58024800

08008848 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8008848:	b480      	push	{r7}
 800884a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800884c:	4b05      	ldr	r3, [pc, #20]	; (8008864 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800884e:	68db      	ldr	r3, [r3, #12]
 8008850:	4a04      	ldr	r2, [pc, #16]	; (8008864 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8008852:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008856:	60d3      	str	r3, [r2, #12]
}
 8008858:	bf00      	nop
 800885a:	46bd      	mov	sp, r7
 800885c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008860:	4770      	bx	lr
 8008862:	bf00      	nop
 8008864:	58024800 	.word	0x58024800

08008868 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b08c      	sub	sp, #48	; 0x30
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d102      	bne.n	800887c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8008876:	2301      	movs	r3, #1
 8008878:	f000 bc48 	b.w	800910c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	f003 0301 	and.w	r3, r3, #1
 8008884:	2b00      	cmp	r3, #0
 8008886:	f000 8088 	beq.w	800899a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800888a:	4b99      	ldr	r3, [pc, #612]	; (8008af0 <HAL_RCC_OscConfig+0x288>)
 800888c:	691b      	ldr	r3, [r3, #16]
 800888e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008892:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008894:	4b96      	ldr	r3, [pc, #600]	; (8008af0 <HAL_RCC_OscConfig+0x288>)
 8008896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008898:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800889a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800889c:	2b10      	cmp	r3, #16
 800889e:	d007      	beq.n	80088b0 <HAL_RCC_OscConfig+0x48>
 80088a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088a2:	2b18      	cmp	r3, #24
 80088a4:	d111      	bne.n	80088ca <HAL_RCC_OscConfig+0x62>
 80088a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088a8:	f003 0303 	and.w	r3, r3, #3
 80088ac:	2b02      	cmp	r3, #2
 80088ae:	d10c      	bne.n	80088ca <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80088b0:	4b8f      	ldr	r3, [pc, #572]	; (8008af0 <HAL_RCC_OscConfig+0x288>)
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d06d      	beq.n	8008998 <HAL_RCC_OscConfig+0x130>
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	685b      	ldr	r3, [r3, #4]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d169      	bne.n	8008998 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80088c4:	2301      	movs	r3, #1
 80088c6:	f000 bc21 	b.w	800910c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	685b      	ldr	r3, [r3, #4]
 80088ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80088d2:	d106      	bne.n	80088e2 <HAL_RCC_OscConfig+0x7a>
 80088d4:	4b86      	ldr	r3, [pc, #536]	; (8008af0 <HAL_RCC_OscConfig+0x288>)
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	4a85      	ldr	r2, [pc, #532]	; (8008af0 <HAL_RCC_OscConfig+0x288>)
 80088da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80088de:	6013      	str	r3, [r2, #0]
 80088e0:	e02e      	b.n	8008940 <HAL_RCC_OscConfig+0xd8>
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	685b      	ldr	r3, [r3, #4]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d10c      	bne.n	8008904 <HAL_RCC_OscConfig+0x9c>
 80088ea:	4b81      	ldr	r3, [pc, #516]	; (8008af0 <HAL_RCC_OscConfig+0x288>)
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	4a80      	ldr	r2, [pc, #512]	; (8008af0 <HAL_RCC_OscConfig+0x288>)
 80088f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80088f4:	6013      	str	r3, [r2, #0]
 80088f6:	4b7e      	ldr	r3, [pc, #504]	; (8008af0 <HAL_RCC_OscConfig+0x288>)
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	4a7d      	ldr	r2, [pc, #500]	; (8008af0 <HAL_RCC_OscConfig+0x288>)
 80088fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008900:	6013      	str	r3, [r2, #0]
 8008902:	e01d      	b.n	8008940 <HAL_RCC_OscConfig+0xd8>
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	685b      	ldr	r3, [r3, #4]
 8008908:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800890c:	d10c      	bne.n	8008928 <HAL_RCC_OscConfig+0xc0>
 800890e:	4b78      	ldr	r3, [pc, #480]	; (8008af0 <HAL_RCC_OscConfig+0x288>)
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	4a77      	ldr	r2, [pc, #476]	; (8008af0 <HAL_RCC_OscConfig+0x288>)
 8008914:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008918:	6013      	str	r3, [r2, #0]
 800891a:	4b75      	ldr	r3, [pc, #468]	; (8008af0 <HAL_RCC_OscConfig+0x288>)
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	4a74      	ldr	r2, [pc, #464]	; (8008af0 <HAL_RCC_OscConfig+0x288>)
 8008920:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008924:	6013      	str	r3, [r2, #0]
 8008926:	e00b      	b.n	8008940 <HAL_RCC_OscConfig+0xd8>
 8008928:	4b71      	ldr	r3, [pc, #452]	; (8008af0 <HAL_RCC_OscConfig+0x288>)
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	4a70      	ldr	r2, [pc, #448]	; (8008af0 <HAL_RCC_OscConfig+0x288>)
 800892e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008932:	6013      	str	r3, [r2, #0]
 8008934:	4b6e      	ldr	r3, [pc, #440]	; (8008af0 <HAL_RCC_OscConfig+0x288>)
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	4a6d      	ldr	r2, [pc, #436]	; (8008af0 <HAL_RCC_OscConfig+0x288>)
 800893a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800893e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	685b      	ldr	r3, [r3, #4]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d013      	beq.n	8008970 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008948:	f7fb f924 	bl	8003b94 <HAL_GetTick>
 800894c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800894e:	e008      	b.n	8008962 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008950:	f7fb f920 	bl	8003b94 <HAL_GetTick>
 8008954:	4602      	mov	r2, r0
 8008956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008958:	1ad3      	subs	r3, r2, r3
 800895a:	2b64      	cmp	r3, #100	; 0x64
 800895c:	d901      	bls.n	8008962 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800895e:	2303      	movs	r3, #3
 8008960:	e3d4      	b.n	800910c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008962:	4b63      	ldr	r3, [pc, #396]	; (8008af0 <HAL_RCC_OscConfig+0x288>)
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800896a:	2b00      	cmp	r3, #0
 800896c:	d0f0      	beq.n	8008950 <HAL_RCC_OscConfig+0xe8>
 800896e:	e014      	b.n	800899a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008970:	f7fb f910 	bl	8003b94 <HAL_GetTick>
 8008974:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008976:	e008      	b.n	800898a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008978:	f7fb f90c 	bl	8003b94 <HAL_GetTick>
 800897c:	4602      	mov	r2, r0
 800897e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008980:	1ad3      	subs	r3, r2, r3
 8008982:	2b64      	cmp	r3, #100	; 0x64
 8008984:	d901      	bls.n	800898a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8008986:	2303      	movs	r3, #3
 8008988:	e3c0      	b.n	800910c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800898a:	4b59      	ldr	r3, [pc, #356]	; (8008af0 <HAL_RCC_OscConfig+0x288>)
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008992:	2b00      	cmp	r3, #0
 8008994:	d1f0      	bne.n	8008978 <HAL_RCC_OscConfig+0x110>
 8008996:	e000      	b.n	800899a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008998:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	f003 0302 	and.w	r3, r3, #2
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	f000 80ca 	beq.w	8008b3c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80089a8:	4b51      	ldr	r3, [pc, #324]	; (8008af0 <HAL_RCC_OscConfig+0x288>)
 80089aa:	691b      	ldr	r3, [r3, #16]
 80089ac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80089b0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80089b2:	4b4f      	ldr	r3, [pc, #316]	; (8008af0 <HAL_RCC_OscConfig+0x288>)
 80089b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089b6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80089b8:	6a3b      	ldr	r3, [r7, #32]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d007      	beq.n	80089ce <HAL_RCC_OscConfig+0x166>
 80089be:	6a3b      	ldr	r3, [r7, #32]
 80089c0:	2b18      	cmp	r3, #24
 80089c2:	d156      	bne.n	8008a72 <HAL_RCC_OscConfig+0x20a>
 80089c4:	69fb      	ldr	r3, [r7, #28]
 80089c6:	f003 0303 	and.w	r3, r3, #3
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d151      	bne.n	8008a72 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80089ce:	4b48      	ldr	r3, [pc, #288]	; (8008af0 <HAL_RCC_OscConfig+0x288>)
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	f003 0304 	and.w	r3, r3, #4
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d005      	beq.n	80089e6 <HAL_RCC_OscConfig+0x17e>
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	68db      	ldr	r3, [r3, #12]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d101      	bne.n	80089e6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80089e2:	2301      	movs	r3, #1
 80089e4:	e392      	b.n	800910c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80089e6:	4b42      	ldr	r3, [pc, #264]	; (8008af0 <HAL_RCC_OscConfig+0x288>)
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	f023 0219 	bic.w	r2, r3, #25
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	68db      	ldr	r3, [r3, #12]
 80089f2:	493f      	ldr	r1, [pc, #252]	; (8008af0 <HAL_RCC_OscConfig+0x288>)
 80089f4:	4313      	orrs	r3, r2
 80089f6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089f8:	f7fb f8cc 	bl	8003b94 <HAL_GetTick>
 80089fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80089fe:	e008      	b.n	8008a12 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008a00:	f7fb f8c8 	bl	8003b94 <HAL_GetTick>
 8008a04:	4602      	mov	r2, r0
 8008a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a08:	1ad3      	subs	r3, r2, r3
 8008a0a:	2b02      	cmp	r3, #2
 8008a0c:	d901      	bls.n	8008a12 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8008a0e:	2303      	movs	r3, #3
 8008a10:	e37c      	b.n	800910c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008a12:	4b37      	ldr	r3, [pc, #220]	; (8008af0 <HAL_RCC_OscConfig+0x288>)
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	f003 0304 	and.w	r3, r3, #4
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d0f0      	beq.n	8008a00 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008a1e:	f7fb f8e9 	bl	8003bf4 <HAL_GetREVID>
 8008a22:	4603      	mov	r3, r0
 8008a24:	f241 0203 	movw	r2, #4099	; 0x1003
 8008a28:	4293      	cmp	r3, r2
 8008a2a:	d817      	bhi.n	8008a5c <HAL_RCC_OscConfig+0x1f4>
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	691b      	ldr	r3, [r3, #16]
 8008a30:	2b40      	cmp	r3, #64	; 0x40
 8008a32:	d108      	bne.n	8008a46 <HAL_RCC_OscConfig+0x1de>
 8008a34:	4b2e      	ldr	r3, [pc, #184]	; (8008af0 <HAL_RCC_OscConfig+0x288>)
 8008a36:	685b      	ldr	r3, [r3, #4]
 8008a38:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8008a3c:	4a2c      	ldr	r2, [pc, #176]	; (8008af0 <HAL_RCC_OscConfig+0x288>)
 8008a3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008a42:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008a44:	e07a      	b.n	8008b3c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008a46:	4b2a      	ldr	r3, [pc, #168]	; (8008af0 <HAL_RCC_OscConfig+0x288>)
 8008a48:	685b      	ldr	r3, [r3, #4]
 8008a4a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	691b      	ldr	r3, [r3, #16]
 8008a52:	031b      	lsls	r3, r3, #12
 8008a54:	4926      	ldr	r1, [pc, #152]	; (8008af0 <HAL_RCC_OscConfig+0x288>)
 8008a56:	4313      	orrs	r3, r2
 8008a58:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008a5a:	e06f      	b.n	8008b3c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008a5c:	4b24      	ldr	r3, [pc, #144]	; (8008af0 <HAL_RCC_OscConfig+0x288>)
 8008a5e:	685b      	ldr	r3, [r3, #4]
 8008a60:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	691b      	ldr	r3, [r3, #16]
 8008a68:	061b      	lsls	r3, r3, #24
 8008a6a:	4921      	ldr	r1, [pc, #132]	; (8008af0 <HAL_RCC_OscConfig+0x288>)
 8008a6c:	4313      	orrs	r3, r2
 8008a6e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008a70:	e064      	b.n	8008b3c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	68db      	ldr	r3, [r3, #12]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d047      	beq.n	8008b0a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008a7a:	4b1d      	ldr	r3, [pc, #116]	; (8008af0 <HAL_RCC_OscConfig+0x288>)
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	f023 0219 	bic.w	r2, r3, #25
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	68db      	ldr	r3, [r3, #12]
 8008a86:	491a      	ldr	r1, [pc, #104]	; (8008af0 <HAL_RCC_OscConfig+0x288>)
 8008a88:	4313      	orrs	r3, r2
 8008a8a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a8c:	f7fb f882 	bl	8003b94 <HAL_GetTick>
 8008a90:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008a92:	e008      	b.n	8008aa6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008a94:	f7fb f87e 	bl	8003b94 <HAL_GetTick>
 8008a98:	4602      	mov	r2, r0
 8008a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a9c:	1ad3      	subs	r3, r2, r3
 8008a9e:	2b02      	cmp	r3, #2
 8008aa0:	d901      	bls.n	8008aa6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8008aa2:	2303      	movs	r3, #3
 8008aa4:	e332      	b.n	800910c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008aa6:	4b12      	ldr	r3, [pc, #72]	; (8008af0 <HAL_RCC_OscConfig+0x288>)
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	f003 0304 	and.w	r3, r3, #4
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d0f0      	beq.n	8008a94 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008ab2:	f7fb f89f 	bl	8003bf4 <HAL_GetREVID>
 8008ab6:	4603      	mov	r3, r0
 8008ab8:	f241 0203 	movw	r2, #4099	; 0x1003
 8008abc:	4293      	cmp	r3, r2
 8008abe:	d819      	bhi.n	8008af4 <HAL_RCC_OscConfig+0x28c>
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	691b      	ldr	r3, [r3, #16]
 8008ac4:	2b40      	cmp	r3, #64	; 0x40
 8008ac6:	d108      	bne.n	8008ada <HAL_RCC_OscConfig+0x272>
 8008ac8:	4b09      	ldr	r3, [pc, #36]	; (8008af0 <HAL_RCC_OscConfig+0x288>)
 8008aca:	685b      	ldr	r3, [r3, #4]
 8008acc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8008ad0:	4a07      	ldr	r2, [pc, #28]	; (8008af0 <HAL_RCC_OscConfig+0x288>)
 8008ad2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008ad6:	6053      	str	r3, [r2, #4]
 8008ad8:	e030      	b.n	8008b3c <HAL_RCC_OscConfig+0x2d4>
 8008ada:	4b05      	ldr	r3, [pc, #20]	; (8008af0 <HAL_RCC_OscConfig+0x288>)
 8008adc:	685b      	ldr	r3, [r3, #4]
 8008ade:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	691b      	ldr	r3, [r3, #16]
 8008ae6:	031b      	lsls	r3, r3, #12
 8008ae8:	4901      	ldr	r1, [pc, #4]	; (8008af0 <HAL_RCC_OscConfig+0x288>)
 8008aea:	4313      	orrs	r3, r2
 8008aec:	604b      	str	r3, [r1, #4]
 8008aee:	e025      	b.n	8008b3c <HAL_RCC_OscConfig+0x2d4>
 8008af0:	58024400 	.word	0x58024400
 8008af4:	4b9a      	ldr	r3, [pc, #616]	; (8008d60 <HAL_RCC_OscConfig+0x4f8>)
 8008af6:	685b      	ldr	r3, [r3, #4]
 8008af8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	691b      	ldr	r3, [r3, #16]
 8008b00:	061b      	lsls	r3, r3, #24
 8008b02:	4997      	ldr	r1, [pc, #604]	; (8008d60 <HAL_RCC_OscConfig+0x4f8>)
 8008b04:	4313      	orrs	r3, r2
 8008b06:	604b      	str	r3, [r1, #4]
 8008b08:	e018      	b.n	8008b3c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008b0a:	4b95      	ldr	r3, [pc, #596]	; (8008d60 <HAL_RCC_OscConfig+0x4f8>)
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	4a94      	ldr	r2, [pc, #592]	; (8008d60 <HAL_RCC_OscConfig+0x4f8>)
 8008b10:	f023 0301 	bic.w	r3, r3, #1
 8008b14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b16:	f7fb f83d 	bl	8003b94 <HAL_GetTick>
 8008b1a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008b1c:	e008      	b.n	8008b30 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008b1e:	f7fb f839 	bl	8003b94 <HAL_GetTick>
 8008b22:	4602      	mov	r2, r0
 8008b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b26:	1ad3      	subs	r3, r2, r3
 8008b28:	2b02      	cmp	r3, #2
 8008b2a:	d901      	bls.n	8008b30 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8008b2c:	2303      	movs	r3, #3
 8008b2e:	e2ed      	b.n	800910c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008b30:	4b8b      	ldr	r3, [pc, #556]	; (8008d60 <HAL_RCC_OscConfig+0x4f8>)
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	f003 0304 	and.w	r3, r3, #4
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d1f0      	bne.n	8008b1e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	f003 0310 	and.w	r3, r3, #16
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	f000 80a9 	beq.w	8008c9c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008b4a:	4b85      	ldr	r3, [pc, #532]	; (8008d60 <HAL_RCC_OscConfig+0x4f8>)
 8008b4c:	691b      	ldr	r3, [r3, #16]
 8008b4e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008b52:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008b54:	4b82      	ldr	r3, [pc, #520]	; (8008d60 <HAL_RCC_OscConfig+0x4f8>)
 8008b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b58:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008b5a:	69bb      	ldr	r3, [r7, #24]
 8008b5c:	2b08      	cmp	r3, #8
 8008b5e:	d007      	beq.n	8008b70 <HAL_RCC_OscConfig+0x308>
 8008b60:	69bb      	ldr	r3, [r7, #24]
 8008b62:	2b18      	cmp	r3, #24
 8008b64:	d13a      	bne.n	8008bdc <HAL_RCC_OscConfig+0x374>
 8008b66:	697b      	ldr	r3, [r7, #20]
 8008b68:	f003 0303 	and.w	r3, r3, #3
 8008b6c:	2b01      	cmp	r3, #1
 8008b6e:	d135      	bne.n	8008bdc <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008b70:	4b7b      	ldr	r3, [pc, #492]	; (8008d60 <HAL_RCC_OscConfig+0x4f8>)
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d005      	beq.n	8008b88 <HAL_RCC_OscConfig+0x320>
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	69db      	ldr	r3, [r3, #28]
 8008b80:	2b80      	cmp	r3, #128	; 0x80
 8008b82:	d001      	beq.n	8008b88 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8008b84:	2301      	movs	r3, #1
 8008b86:	e2c1      	b.n	800910c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008b88:	f7fb f834 	bl	8003bf4 <HAL_GetREVID>
 8008b8c:	4603      	mov	r3, r0
 8008b8e:	f241 0203 	movw	r2, #4099	; 0x1003
 8008b92:	4293      	cmp	r3, r2
 8008b94:	d817      	bhi.n	8008bc6 <HAL_RCC_OscConfig+0x35e>
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	6a1b      	ldr	r3, [r3, #32]
 8008b9a:	2b20      	cmp	r3, #32
 8008b9c:	d108      	bne.n	8008bb0 <HAL_RCC_OscConfig+0x348>
 8008b9e:	4b70      	ldr	r3, [pc, #448]	; (8008d60 <HAL_RCC_OscConfig+0x4f8>)
 8008ba0:	685b      	ldr	r3, [r3, #4]
 8008ba2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008ba6:	4a6e      	ldr	r2, [pc, #440]	; (8008d60 <HAL_RCC_OscConfig+0x4f8>)
 8008ba8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008bac:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008bae:	e075      	b.n	8008c9c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008bb0:	4b6b      	ldr	r3, [pc, #428]	; (8008d60 <HAL_RCC_OscConfig+0x4f8>)
 8008bb2:	685b      	ldr	r3, [r3, #4]
 8008bb4:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	6a1b      	ldr	r3, [r3, #32]
 8008bbc:	069b      	lsls	r3, r3, #26
 8008bbe:	4968      	ldr	r1, [pc, #416]	; (8008d60 <HAL_RCC_OscConfig+0x4f8>)
 8008bc0:	4313      	orrs	r3, r2
 8008bc2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008bc4:	e06a      	b.n	8008c9c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008bc6:	4b66      	ldr	r3, [pc, #408]	; (8008d60 <HAL_RCC_OscConfig+0x4f8>)
 8008bc8:	68db      	ldr	r3, [r3, #12]
 8008bca:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	6a1b      	ldr	r3, [r3, #32]
 8008bd2:	061b      	lsls	r3, r3, #24
 8008bd4:	4962      	ldr	r1, [pc, #392]	; (8008d60 <HAL_RCC_OscConfig+0x4f8>)
 8008bd6:	4313      	orrs	r3, r2
 8008bd8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008bda:	e05f      	b.n	8008c9c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	69db      	ldr	r3, [r3, #28]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d042      	beq.n	8008c6a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008be4:	4b5e      	ldr	r3, [pc, #376]	; (8008d60 <HAL_RCC_OscConfig+0x4f8>)
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	4a5d      	ldr	r2, [pc, #372]	; (8008d60 <HAL_RCC_OscConfig+0x4f8>)
 8008bea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008bee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008bf0:	f7fa ffd0 	bl	8003b94 <HAL_GetTick>
 8008bf4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008bf6:	e008      	b.n	8008c0a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008bf8:	f7fa ffcc 	bl	8003b94 <HAL_GetTick>
 8008bfc:	4602      	mov	r2, r0
 8008bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c00:	1ad3      	subs	r3, r2, r3
 8008c02:	2b02      	cmp	r3, #2
 8008c04:	d901      	bls.n	8008c0a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8008c06:	2303      	movs	r3, #3
 8008c08:	e280      	b.n	800910c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008c0a:	4b55      	ldr	r3, [pc, #340]	; (8008d60 <HAL_RCC_OscConfig+0x4f8>)
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d0f0      	beq.n	8008bf8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008c16:	f7fa ffed 	bl	8003bf4 <HAL_GetREVID>
 8008c1a:	4603      	mov	r3, r0
 8008c1c:	f241 0203 	movw	r2, #4099	; 0x1003
 8008c20:	4293      	cmp	r3, r2
 8008c22:	d817      	bhi.n	8008c54 <HAL_RCC_OscConfig+0x3ec>
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	6a1b      	ldr	r3, [r3, #32]
 8008c28:	2b20      	cmp	r3, #32
 8008c2a:	d108      	bne.n	8008c3e <HAL_RCC_OscConfig+0x3d6>
 8008c2c:	4b4c      	ldr	r3, [pc, #304]	; (8008d60 <HAL_RCC_OscConfig+0x4f8>)
 8008c2e:	685b      	ldr	r3, [r3, #4]
 8008c30:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008c34:	4a4a      	ldr	r2, [pc, #296]	; (8008d60 <HAL_RCC_OscConfig+0x4f8>)
 8008c36:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008c3a:	6053      	str	r3, [r2, #4]
 8008c3c:	e02e      	b.n	8008c9c <HAL_RCC_OscConfig+0x434>
 8008c3e:	4b48      	ldr	r3, [pc, #288]	; (8008d60 <HAL_RCC_OscConfig+0x4f8>)
 8008c40:	685b      	ldr	r3, [r3, #4]
 8008c42:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	6a1b      	ldr	r3, [r3, #32]
 8008c4a:	069b      	lsls	r3, r3, #26
 8008c4c:	4944      	ldr	r1, [pc, #272]	; (8008d60 <HAL_RCC_OscConfig+0x4f8>)
 8008c4e:	4313      	orrs	r3, r2
 8008c50:	604b      	str	r3, [r1, #4]
 8008c52:	e023      	b.n	8008c9c <HAL_RCC_OscConfig+0x434>
 8008c54:	4b42      	ldr	r3, [pc, #264]	; (8008d60 <HAL_RCC_OscConfig+0x4f8>)
 8008c56:	68db      	ldr	r3, [r3, #12]
 8008c58:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	6a1b      	ldr	r3, [r3, #32]
 8008c60:	061b      	lsls	r3, r3, #24
 8008c62:	493f      	ldr	r1, [pc, #252]	; (8008d60 <HAL_RCC_OscConfig+0x4f8>)
 8008c64:	4313      	orrs	r3, r2
 8008c66:	60cb      	str	r3, [r1, #12]
 8008c68:	e018      	b.n	8008c9c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008c6a:	4b3d      	ldr	r3, [pc, #244]	; (8008d60 <HAL_RCC_OscConfig+0x4f8>)
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	4a3c      	ldr	r2, [pc, #240]	; (8008d60 <HAL_RCC_OscConfig+0x4f8>)
 8008c70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008c74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c76:	f7fa ff8d 	bl	8003b94 <HAL_GetTick>
 8008c7a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008c7c:	e008      	b.n	8008c90 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008c7e:	f7fa ff89 	bl	8003b94 <HAL_GetTick>
 8008c82:	4602      	mov	r2, r0
 8008c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c86:	1ad3      	subs	r3, r2, r3
 8008c88:	2b02      	cmp	r3, #2
 8008c8a:	d901      	bls.n	8008c90 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008c8c:	2303      	movs	r3, #3
 8008c8e:	e23d      	b.n	800910c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008c90:	4b33      	ldr	r3, [pc, #204]	; (8008d60 <HAL_RCC_OscConfig+0x4f8>)
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d1f0      	bne.n	8008c7e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	f003 0308 	and.w	r3, r3, #8
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d036      	beq.n	8008d16 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	695b      	ldr	r3, [r3, #20]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d019      	beq.n	8008ce4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008cb0:	4b2b      	ldr	r3, [pc, #172]	; (8008d60 <HAL_RCC_OscConfig+0x4f8>)
 8008cb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008cb4:	4a2a      	ldr	r2, [pc, #168]	; (8008d60 <HAL_RCC_OscConfig+0x4f8>)
 8008cb6:	f043 0301 	orr.w	r3, r3, #1
 8008cba:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008cbc:	f7fa ff6a 	bl	8003b94 <HAL_GetTick>
 8008cc0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008cc2:	e008      	b.n	8008cd6 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008cc4:	f7fa ff66 	bl	8003b94 <HAL_GetTick>
 8008cc8:	4602      	mov	r2, r0
 8008cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ccc:	1ad3      	subs	r3, r2, r3
 8008cce:	2b02      	cmp	r3, #2
 8008cd0:	d901      	bls.n	8008cd6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8008cd2:	2303      	movs	r3, #3
 8008cd4:	e21a      	b.n	800910c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008cd6:	4b22      	ldr	r3, [pc, #136]	; (8008d60 <HAL_RCC_OscConfig+0x4f8>)
 8008cd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008cda:	f003 0302 	and.w	r3, r3, #2
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d0f0      	beq.n	8008cc4 <HAL_RCC_OscConfig+0x45c>
 8008ce2:	e018      	b.n	8008d16 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008ce4:	4b1e      	ldr	r3, [pc, #120]	; (8008d60 <HAL_RCC_OscConfig+0x4f8>)
 8008ce6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ce8:	4a1d      	ldr	r2, [pc, #116]	; (8008d60 <HAL_RCC_OscConfig+0x4f8>)
 8008cea:	f023 0301 	bic.w	r3, r3, #1
 8008cee:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008cf0:	f7fa ff50 	bl	8003b94 <HAL_GetTick>
 8008cf4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008cf6:	e008      	b.n	8008d0a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008cf8:	f7fa ff4c 	bl	8003b94 <HAL_GetTick>
 8008cfc:	4602      	mov	r2, r0
 8008cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d00:	1ad3      	subs	r3, r2, r3
 8008d02:	2b02      	cmp	r3, #2
 8008d04:	d901      	bls.n	8008d0a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8008d06:	2303      	movs	r3, #3
 8008d08:	e200      	b.n	800910c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008d0a:	4b15      	ldr	r3, [pc, #84]	; (8008d60 <HAL_RCC_OscConfig+0x4f8>)
 8008d0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d0e:	f003 0302 	and.w	r3, r3, #2
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d1f0      	bne.n	8008cf8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	f003 0320 	and.w	r3, r3, #32
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d039      	beq.n	8008d96 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	699b      	ldr	r3, [r3, #24]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d01c      	beq.n	8008d64 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008d2a:	4b0d      	ldr	r3, [pc, #52]	; (8008d60 <HAL_RCC_OscConfig+0x4f8>)
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	4a0c      	ldr	r2, [pc, #48]	; (8008d60 <HAL_RCC_OscConfig+0x4f8>)
 8008d30:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008d34:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008d36:	f7fa ff2d 	bl	8003b94 <HAL_GetTick>
 8008d3a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008d3c:	e008      	b.n	8008d50 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008d3e:	f7fa ff29 	bl	8003b94 <HAL_GetTick>
 8008d42:	4602      	mov	r2, r0
 8008d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d46:	1ad3      	subs	r3, r2, r3
 8008d48:	2b02      	cmp	r3, #2
 8008d4a:	d901      	bls.n	8008d50 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8008d4c:	2303      	movs	r3, #3
 8008d4e:	e1dd      	b.n	800910c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008d50:	4b03      	ldr	r3, [pc, #12]	; (8008d60 <HAL_RCC_OscConfig+0x4f8>)
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d0f0      	beq.n	8008d3e <HAL_RCC_OscConfig+0x4d6>
 8008d5c:	e01b      	b.n	8008d96 <HAL_RCC_OscConfig+0x52e>
 8008d5e:	bf00      	nop
 8008d60:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008d64:	4b9b      	ldr	r3, [pc, #620]	; (8008fd4 <HAL_RCC_OscConfig+0x76c>)
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	4a9a      	ldr	r2, [pc, #616]	; (8008fd4 <HAL_RCC_OscConfig+0x76c>)
 8008d6a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008d6e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008d70:	f7fa ff10 	bl	8003b94 <HAL_GetTick>
 8008d74:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008d76:	e008      	b.n	8008d8a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008d78:	f7fa ff0c 	bl	8003b94 <HAL_GetTick>
 8008d7c:	4602      	mov	r2, r0
 8008d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d80:	1ad3      	subs	r3, r2, r3
 8008d82:	2b02      	cmp	r3, #2
 8008d84:	d901      	bls.n	8008d8a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8008d86:	2303      	movs	r3, #3
 8008d88:	e1c0      	b.n	800910c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008d8a:	4b92      	ldr	r3, [pc, #584]	; (8008fd4 <HAL_RCC_OscConfig+0x76c>)
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d1f0      	bne.n	8008d78 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	f003 0304 	and.w	r3, r3, #4
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	f000 8081 	beq.w	8008ea6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008da4:	4b8c      	ldr	r3, [pc, #560]	; (8008fd8 <HAL_RCC_OscConfig+0x770>)
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	4a8b      	ldr	r2, [pc, #556]	; (8008fd8 <HAL_RCC_OscConfig+0x770>)
 8008daa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008dae:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008db0:	f7fa fef0 	bl	8003b94 <HAL_GetTick>
 8008db4:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008db6:	e008      	b.n	8008dca <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008db8:	f7fa feec 	bl	8003b94 <HAL_GetTick>
 8008dbc:	4602      	mov	r2, r0
 8008dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dc0:	1ad3      	subs	r3, r2, r3
 8008dc2:	2b64      	cmp	r3, #100	; 0x64
 8008dc4:	d901      	bls.n	8008dca <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8008dc6:	2303      	movs	r3, #3
 8008dc8:	e1a0      	b.n	800910c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008dca:	4b83      	ldr	r3, [pc, #524]	; (8008fd8 <HAL_RCC_OscConfig+0x770>)
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d0f0      	beq.n	8008db8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	689b      	ldr	r3, [r3, #8]
 8008dda:	2b01      	cmp	r3, #1
 8008ddc:	d106      	bne.n	8008dec <HAL_RCC_OscConfig+0x584>
 8008dde:	4b7d      	ldr	r3, [pc, #500]	; (8008fd4 <HAL_RCC_OscConfig+0x76c>)
 8008de0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008de2:	4a7c      	ldr	r2, [pc, #496]	; (8008fd4 <HAL_RCC_OscConfig+0x76c>)
 8008de4:	f043 0301 	orr.w	r3, r3, #1
 8008de8:	6713      	str	r3, [r2, #112]	; 0x70
 8008dea:	e02d      	b.n	8008e48 <HAL_RCC_OscConfig+0x5e0>
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	689b      	ldr	r3, [r3, #8]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d10c      	bne.n	8008e0e <HAL_RCC_OscConfig+0x5a6>
 8008df4:	4b77      	ldr	r3, [pc, #476]	; (8008fd4 <HAL_RCC_OscConfig+0x76c>)
 8008df6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008df8:	4a76      	ldr	r2, [pc, #472]	; (8008fd4 <HAL_RCC_OscConfig+0x76c>)
 8008dfa:	f023 0301 	bic.w	r3, r3, #1
 8008dfe:	6713      	str	r3, [r2, #112]	; 0x70
 8008e00:	4b74      	ldr	r3, [pc, #464]	; (8008fd4 <HAL_RCC_OscConfig+0x76c>)
 8008e02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e04:	4a73      	ldr	r2, [pc, #460]	; (8008fd4 <HAL_RCC_OscConfig+0x76c>)
 8008e06:	f023 0304 	bic.w	r3, r3, #4
 8008e0a:	6713      	str	r3, [r2, #112]	; 0x70
 8008e0c:	e01c      	b.n	8008e48 <HAL_RCC_OscConfig+0x5e0>
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	689b      	ldr	r3, [r3, #8]
 8008e12:	2b05      	cmp	r3, #5
 8008e14:	d10c      	bne.n	8008e30 <HAL_RCC_OscConfig+0x5c8>
 8008e16:	4b6f      	ldr	r3, [pc, #444]	; (8008fd4 <HAL_RCC_OscConfig+0x76c>)
 8008e18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e1a:	4a6e      	ldr	r2, [pc, #440]	; (8008fd4 <HAL_RCC_OscConfig+0x76c>)
 8008e1c:	f043 0304 	orr.w	r3, r3, #4
 8008e20:	6713      	str	r3, [r2, #112]	; 0x70
 8008e22:	4b6c      	ldr	r3, [pc, #432]	; (8008fd4 <HAL_RCC_OscConfig+0x76c>)
 8008e24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e26:	4a6b      	ldr	r2, [pc, #428]	; (8008fd4 <HAL_RCC_OscConfig+0x76c>)
 8008e28:	f043 0301 	orr.w	r3, r3, #1
 8008e2c:	6713      	str	r3, [r2, #112]	; 0x70
 8008e2e:	e00b      	b.n	8008e48 <HAL_RCC_OscConfig+0x5e0>
 8008e30:	4b68      	ldr	r3, [pc, #416]	; (8008fd4 <HAL_RCC_OscConfig+0x76c>)
 8008e32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e34:	4a67      	ldr	r2, [pc, #412]	; (8008fd4 <HAL_RCC_OscConfig+0x76c>)
 8008e36:	f023 0301 	bic.w	r3, r3, #1
 8008e3a:	6713      	str	r3, [r2, #112]	; 0x70
 8008e3c:	4b65      	ldr	r3, [pc, #404]	; (8008fd4 <HAL_RCC_OscConfig+0x76c>)
 8008e3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e40:	4a64      	ldr	r2, [pc, #400]	; (8008fd4 <HAL_RCC_OscConfig+0x76c>)
 8008e42:	f023 0304 	bic.w	r3, r3, #4
 8008e46:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	689b      	ldr	r3, [r3, #8]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d015      	beq.n	8008e7c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e50:	f7fa fea0 	bl	8003b94 <HAL_GetTick>
 8008e54:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008e56:	e00a      	b.n	8008e6e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008e58:	f7fa fe9c 	bl	8003b94 <HAL_GetTick>
 8008e5c:	4602      	mov	r2, r0
 8008e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e60:	1ad3      	subs	r3, r2, r3
 8008e62:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e66:	4293      	cmp	r3, r2
 8008e68:	d901      	bls.n	8008e6e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8008e6a:	2303      	movs	r3, #3
 8008e6c:	e14e      	b.n	800910c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008e6e:	4b59      	ldr	r3, [pc, #356]	; (8008fd4 <HAL_RCC_OscConfig+0x76c>)
 8008e70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e72:	f003 0302 	and.w	r3, r3, #2
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d0ee      	beq.n	8008e58 <HAL_RCC_OscConfig+0x5f0>
 8008e7a:	e014      	b.n	8008ea6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e7c:	f7fa fe8a 	bl	8003b94 <HAL_GetTick>
 8008e80:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008e82:	e00a      	b.n	8008e9a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008e84:	f7fa fe86 	bl	8003b94 <HAL_GetTick>
 8008e88:	4602      	mov	r2, r0
 8008e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e8c:	1ad3      	subs	r3, r2, r3
 8008e8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e92:	4293      	cmp	r3, r2
 8008e94:	d901      	bls.n	8008e9a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8008e96:	2303      	movs	r3, #3
 8008e98:	e138      	b.n	800910c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008e9a:	4b4e      	ldr	r3, [pc, #312]	; (8008fd4 <HAL_RCC_OscConfig+0x76c>)
 8008e9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e9e:	f003 0302 	and.w	r3, r3, #2
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d1ee      	bne.n	8008e84 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	f000 812d 	beq.w	800910a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008eb0:	4b48      	ldr	r3, [pc, #288]	; (8008fd4 <HAL_RCC_OscConfig+0x76c>)
 8008eb2:	691b      	ldr	r3, [r3, #16]
 8008eb4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008eb8:	2b18      	cmp	r3, #24
 8008eba:	f000 80bd 	beq.w	8009038 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ec2:	2b02      	cmp	r3, #2
 8008ec4:	f040 809e 	bne.w	8009004 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008ec8:	4b42      	ldr	r3, [pc, #264]	; (8008fd4 <HAL_RCC_OscConfig+0x76c>)
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	4a41      	ldr	r2, [pc, #260]	; (8008fd4 <HAL_RCC_OscConfig+0x76c>)
 8008ece:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008ed2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ed4:	f7fa fe5e 	bl	8003b94 <HAL_GetTick>
 8008ed8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008eda:	e008      	b.n	8008eee <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008edc:	f7fa fe5a 	bl	8003b94 <HAL_GetTick>
 8008ee0:	4602      	mov	r2, r0
 8008ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ee4:	1ad3      	subs	r3, r2, r3
 8008ee6:	2b02      	cmp	r3, #2
 8008ee8:	d901      	bls.n	8008eee <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8008eea:	2303      	movs	r3, #3
 8008eec:	e10e      	b.n	800910c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008eee:	4b39      	ldr	r3, [pc, #228]	; (8008fd4 <HAL_RCC_OscConfig+0x76c>)
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d1f0      	bne.n	8008edc <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008efa:	4b36      	ldr	r3, [pc, #216]	; (8008fd4 <HAL_RCC_OscConfig+0x76c>)
 8008efc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008efe:	4b37      	ldr	r3, [pc, #220]	; (8008fdc <HAL_RCC_OscConfig+0x774>)
 8008f00:	4013      	ands	r3, r2
 8008f02:	687a      	ldr	r2, [r7, #4]
 8008f04:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8008f06:	687a      	ldr	r2, [r7, #4]
 8008f08:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008f0a:	0112      	lsls	r2, r2, #4
 8008f0c:	430a      	orrs	r2, r1
 8008f0e:	4931      	ldr	r1, [pc, #196]	; (8008fd4 <HAL_RCC_OscConfig+0x76c>)
 8008f10:	4313      	orrs	r3, r2
 8008f12:	628b      	str	r3, [r1, #40]	; 0x28
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f18:	3b01      	subs	r3, #1
 8008f1a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f22:	3b01      	subs	r3, #1
 8008f24:	025b      	lsls	r3, r3, #9
 8008f26:	b29b      	uxth	r3, r3
 8008f28:	431a      	orrs	r2, r3
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f2e:	3b01      	subs	r3, #1
 8008f30:	041b      	lsls	r3, r3, #16
 8008f32:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008f36:	431a      	orrs	r2, r3
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f3c:	3b01      	subs	r3, #1
 8008f3e:	061b      	lsls	r3, r3, #24
 8008f40:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008f44:	4923      	ldr	r1, [pc, #140]	; (8008fd4 <HAL_RCC_OscConfig+0x76c>)
 8008f46:	4313      	orrs	r3, r2
 8008f48:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8008f4a:	4b22      	ldr	r3, [pc, #136]	; (8008fd4 <HAL_RCC_OscConfig+0x76c>)
 8008f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f4e:	4a21      	ldr	r2, [pc, #132]	; (8008fd4 <HAL_RCC_OscConfig+0x76c>)
 8008f50:	f023 0301 	bic.w	r3, r3, #1
 8008f54:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008f56:	4b1f      	ldr	r3, [pc, #124]	; (8008fd4 <HAL_RCC_OscConfig+0x76c>)
 8008f58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008f5a:	4b21      	ldr	r3, [pc, #132]	; (8008fe0 <HAL_RCC_OscConfig+0x778>)
 8008f5c:	4013      	ands	r3, r2
 8008f5e:	687a      	ldr	r2, [r7, #4]
 8008f60:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008f62:	00d2      	lsls	r2, r2, #3
 8008f64:	491b      	ldr	r1, [pc, #108]	; (8008fd4 <HAL_RCC_OscConfig+0x76c>)
 8008f66:	4313      	orrs	r3, r2
 8008f68:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008f6a:	4b1a      	ldr	r3, [pc, #104]	; (8008fd4 <HAL_RCC_OscConfig+0x76c>)
 8008f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f6e:	f023 020c 	bic.w	r2, r3, #12
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f76:	4917      	ldr	r1, [pc, #92]	; (8008fd4 <HAL_RCC_OscConfig+0x76c>)
 8008f78:	4313      	orrs	r3, r2
 8008f7a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008f7c:	4b15      	ldr	r3, [pc, #84]	; (8008fd4 <HAL_RCC_OscConfig+0x76c>)
 8008f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f80:	f023 0202 	bic.w	r2, r3, #2
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f88:	4912      	ldr	r1, [pc, #72]	; (8008fd4 <HAL_RCC_OscConfig+0x76c>)
 8008f8a:	4313      	orrs	r3, r2
 8008f8c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008f8e:	4b11      	ldr	r3, [pc, #68]	; (8008fd4 <HAL_RCC_OscConfig+0x76c>)
 8008f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f92:	4a10      	ldr	r2, [pc, #64]	; (8008fd4 <HAL_RCC_OscConfig+0x76c>)
 8008f94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008f98:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f9a:	4b0e      	ldr	r3, [pc, #56]	; (8008fd4 <HAL_RCC_OscConfig+0x76c>)
 8008f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f9e:	4a0d      	ldr	r2, [pc, #52]	; (8008fd4 <HAL_RCC_OscConfig+0x76c>)
 8008fa0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008fa4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008fa6:	4b0b      	ldr	r3, [pc, #44]	; (8008fd4 <HAL_RCC_OscConfig+0x76c>)
 8008fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008faa:	4a0a      	ldr	r2, [pc, #40]	; (8008fd4 <HAL_RCC_OscConfig+0x76c>)
 8008fac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008fb0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8008fb2:	4b08      	ldr	r3, [pc, #32]	; (8008fd4 <HAL_RCC_OscConfig+0x76c>)
 8008fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fb6:	4a07      	ldr	r2, [pc, #28]	; (8008fd4 <HAL_RCC_OscConfig+0x76c>)
 8008fb8:	f043 0301 	orr.w	r3, r3, #1
 8008fbc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008fbe:	4b05      	ldr	r3, [pc, #20]	; (8008fd4 <HAL_RCC_OscConfig+0x76c>)
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	4a04      	ldr	r2, [pc, #16]	; (8008fd4 <HAL_RCC_OscConfig+0x76c>)
 8008fc4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008fc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008fca:	f7fa fde3 	bl	8003b94 <HAL_GetTick>
 8008fce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008fd0:	e011      	b.n	8008ff6 <HAL_RCC_OscConfig+0x78e>
 8008fd2:	bf00      	nop
 8008fd4:	58024400 	.word	0x58024400
 8008fd8:	58024800 	.word	0x58024800
 8008fdc:	fffffc0c 	.word	0xfffffc0c
 8008fe0:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008fe4:	f7fa fdd6 	bl	8003b94 <HAL_GetTick>
 8008fe8:	4602      	mov	r2, r0
 8008fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fec:	1ad3      	subs	r3, r2, r3
 8008fee:	2b02      	cmp	r3, #2
 8008ff0:	d901      	bls.n	8008ff6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8008ff2:	2303      	movs	r3, #3
 8008ff4:	e08a      	b.n	800910c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008ff6:	4b47      	ldr	r3, [pc, #284]	; (8009114 <HAL_RCC_OscConfig+0x8ac>)
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d0f0      	beq.n	8008fe4 <HAL_RCC_OscConfig+0x77c>
 8009002:	e082      	b.n	800910a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009004:	4b43      	ldr	r3, [pc, #268]	; (8009114 <HAL_RCC_OscConfig+0x8ac>)
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	4a42      	ldr	r2, [pc, #264]	; (8009114 <HAL_RCC_OscConfig+0x8ac>)
 800900a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800900e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009010:	f7fa fdc0 	bl	8003b94 <HAL_GetTick>
 8009014:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009016:	e008      	b.n	800902a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009018:	f7fa fdbc 	bl	8003b94 <HAL_GetTick>
 800901c:	4602      	mov	r2, r0
 800901e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009020:	1ad3      	subs	r3, r2, r3
 8009022:	2b02      	cmp	r3, #2
 8009024:	d901      	bls.n	800902a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8009026:	2303      	movs	r3, #3
 8009028:	e070      	b.n	800910c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800902a:	4b3a      	ldr	r3, [pc, #232]	; (8009114 <HAL_RCC_OscConfig+0x8ac>)
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009032:	2b00      	cmp	r3, #0
 8009034:	d1f0      	bne.n	8009018 <HAL_RCC_OscConfig+0x7b0>
 8009036:	e068      	b.n	800910a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8009038:	4b36      	ldr	r3, [pc, #216]	; (8009114 <HAL_RCC_OscConfig+0x8ac>)
 800903a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800903c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800903e:	4b35      	ldr	r3, [pc, #212]	; (8009114 <HAL_RCC_OscConfig+0x8ac>)
 8009040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009042:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009048:	2b01      	cmp	r3, #1
 800904a:	d031      	beq.n	80090b0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800904c:	693b      	ldr	r3, [r7, #16]
 800904e:	f003 0203 	and.w	r2, r3, #3
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009056:	429a      	cmp	r2, r3
 8009058:	d12a      	bne.n	80090b0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800905a:	693b      	ldr	r3, [r7, #16]
 800905c:	091b      	lsrs	r3, r3, #4
 800905e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009066:	429a      	cmp	r2, r3
 8009068:	d122      	bne.n	80090b0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009074:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009076:	429a      	cmp	r2, r3
 8009078:	d11a      	bne.n	80090b0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	0a5b      	lsrs	r3, r3, #9
 800907e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009086:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009088:	429a      	cmp	r2, r3
 800908a:	d111      	bne.n	80090b0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	0c1b      	lsrs	r3, r3, #16
 8009090:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009098:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800909a:	429a      	cmp	r2, r3
 800909c:	d108      	bne.n	80090b0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	0e1b      	lsrs	r3, r3, #24
 80090a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090aa:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80090ac:	429a      	cmp	r2, r3
 80090ae:	d001      	beq.n	80090b4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80090b0:	2301      	movs	r3, #1
 80090b2:	e02b      	b.n	800910c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80090b4:	4b17      	ldr	r3, [pc, #92]	; (8009114 <HAL_RCC_OscConfig+0x8ac>)
 80090b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090b8:	08db      	lsrs	r3, r3, #3
 80090ba:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80090be:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80090c4:	693a      	ldr	r2, [r7, #16]
 80090c6:	429a      	cmp	r2, r3
 80090c8:	d01f      	beq.n	800910a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80090ca:	4b12      	ldr	r3, [pc, #72]	; (8009114 <HAL_RCC_OscConfig+0x8ac>)
 80090cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090ce:	4a11      	ldr	r2, [pc, #68]	; (8009114 <HAL_RCC_OscConfig+0x8ac>)
 80090d0:	f023 0301 	bic.w	r3, r3, #1
 80090d4:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80090d6:	f7fa fd5d 	bl	8003b94 <HAL_GetTick>
 80090da:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80090dc:	bf00      	nop
 80090de:	f7fa fd59 	bl	8003b94 <HAL_GetTick>
 80090e2:	4602      	mov	r2, r0
 80090e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090e6:	4293      	cmp	r3, r2
 80090e8:	d0f9      	beq.n	80090de <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80090ea:	4b0a      	ldr	r3, [pc, #40]	; (8009114 <HAL_RCC_OscConfig+0x8ac>)
 80090ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80090ee:	4b0a      	ldr	r3, [pc, #40]	; (8009118 <HAL_RCC_OscConfig+0x8b0>)
 80090f0:	4013      	ands	r3, r2
 80090f2:	687a      	ldr	r2, [r7, #4]
 80090f4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80090f6:	00d2      	lsls	r2, r2, #3
 80090f8:	4906      	ldr	r1, [pc, #24]	; (8009114 <HAL_RCC_OscConfig+0x8ac>)
 80090fa:	4313      	orrs	r3, r2
 80090fc:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80090fe:	4b05      	ldr	r3, [pc, #20]	; (8009114 <HAL_RCC_OscConfig+0x8ac>)
 8009100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009102:	4a04      	ldr	r2, [pc, #16]	; (8009114 <HAL_RCC_OscConfig+0x8ac>)
 8009104:	f043 0301 	orr.w	r3, r3, #1
 8009108:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800910a:	2300      	movs	r3, #0
}
 800910c:	4618      	mov	r0, r3
 800910e:	3730      	adds	r7, #48	; 0x30
 8009110:	46bd      	mov	sp, r7
 8009112:	bd80      	pop	{r7, pc}
 8009114:	58024400 	.word	0x58024400
 8009118:	ffff0007 	.word	0xffff0007

0800911c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800911c:	b580      	push	{r7, lr}
 800911e:	b086      	sub	sp, #24
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
 8009124:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d101      	bne.n	8009130 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800912c:	2301      	movs	r3, #1
 800912e:	e19c      	b.n	800946a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009130:	4b8a      	ldr	r3, [pc, #552]	; (800935c <HAL_RCC_ClockConfig+0x240>)
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	f003 030f 	and.w	r3, r3, #15
 8009138:	683a      	ldr	r2, [r7, #0]
 800913a:	429a      	cmp	r2, r3
 800913c:	d910      	bls.n	8009160 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800913e:	4b87      	ldr	r3, [pc, #540]	; (800935c <HAL_RCC_ClockConfig+0x240>)
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	f023 020f 	bic.w	r2, r3, #15
 8009146:	4985      	ldr	r1, [pc, #532]	; (800935c <HAL_RCC_ClockConfig+0x240>)
 8009148:	683b      	ldr	r3, [r7, #0]
 800914a:	4313      	orrs	r3, r2
 800914c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800914e:	4b83      	ldr	r3, [pc, #524]	; (800935c <HAL_RCC_ClockConfig+0x240>)
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	f003 030f 	and.w	r3, r3, #15
 8009156:	683a      	ldr	r2, [r7, #0]
 8009158:	429a      	cmp	r2, r3
 800915a:	d001      	beq.n	8009160 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800915c:	2301      	movs	r3, #1
 800915e:	e184      	b.n	800946a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	f003 0304 	and.w	r3, r3, #4
 8009168:	2b00      	cmp	r3, #0
 800916a:	d010      	beq.n	800918e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	691a      	ldr	r2, [r3, #16]
 8009170:	4b7b      	ldr	r3, [pc, #492]	; (8009360 <HAL_RCC_ClockConfig+0x244>)
 8009172:	699b      	ldr	r3, [r3, #24]
 8009174:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009178:	429a      	cmp	r2, r3
 800917a:	d908      	bls.n	800918e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800917c:	4b78      	ldr	r3, [pc, #480]	; (8009360 <HAL_RCC_ClockConfig+0x244>)
 800917e:	699b      	ldr	r3, [r3, #24]
 8009180:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	691b      	ldr	r3, [r3, #16]
 8009188:	4975      	ldr	r1, [pc, #468]	; (8009360 <HAL_RCC_ClockConfig+0x244>)
 800918a:	4313      	orrs	r3, r2
 800918c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	f003 0308 	and.w	r3, r3, #8
 8009196:	2b00      	cmp	r3, #0
 8009198:	d010      	beq.n	80091bc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	695a      	ldr	r2, [r3, #20]
 800919e:	4b70      	ldr	r3, [pc, #448]	; (8009360 <HAL_RCC_ClockConfig+0x244>)
 80091a0:	69db      	ldr	r3, [r3, #28]
 80091a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80091a6:	429a      	cmp	r2, r3
 80091a8:	d908      	bls.n	80091bc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80091aa:	4b6d      	ldr	r3, [pc, #436]	; (8009360 <HAL_RCC_ClockConfig+0x244>)
 80091ac:	69db      	ldr	r3, [r3, #28]
 80091ae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	695b      	ldr	r3, [r3, #20]
 80091b6:	496a      	ldr	r1, [pc, #424]	; (8009360 <HAL_RCC_ClockConfig+0x244>)
 80091b8:	4313      	orrs	r3, r2
 80091ba:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	f003 0310 	and.w	r3, r3, #16
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d010      	beq.n	80091ea <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	699a      	ldr	r2, [r3, #24]
 80091cc:	4b64      	ldr	r3, [pc, #400]	; (8009360 <HAL_RCC_ClockConfig+0x244>)
 80091ce:	69db      	ldr	r3, [r3, #28]
 80091d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80091d4:	429a      	cmp	r2, r3
 80091d6:	d908      	bls.n	80091ea <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80091d8:	4b61      	ldr	r3, [pc, #388]	; (8009360 <HAL_RCC_ClockConfig+0x244>)
 80091da:	69db      	ldr	r3, [r3, #28]
 80091dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	699b      	ldr	r3, [r3, #24]
 80091e4:	495e      	ldr	r1, [pc, #376]	; (8009360 <HAL_RCC_ClockConfig+0x244>)
 80091e6:	4313      	orrs	r3, r2
 80091e8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	f003 0320 	and.w	r3, r3, #32
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d010      	beq.n	8009218 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	69da      	ldr	r2, [r3, #28]
 80091fa:	4b59      	ldr	r3, [pc, #356]	; (8009360 <HAL_RCC_ClockConfig+0x244>)
 80091fc:	6a1b      	ldr	r3, [r3, #32]
 80091fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009202:	429a      	cmp	r2, r3
 8009204:	d908      	bls.n	8009218 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8009206:	4b56      	ldr	r3, [pc, #344]	; (8009360 <HAL_RCC_ClockConfig+0x244>)
 8009208:	6a1b      	ldr	r3, [r3, #32]
 800920a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	69db      	ldr	r3, [r3, #28]
 8009212:	4953      	ldr	r1, [pc, #332]	; (8009360 <HAL_RCC_ClockConfig+0x244>)
 8009214:	4313      	orrs	r3, r2
 8009216:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	f003 0302 	and.w	r3, r3, #2
 8009220:	2b00      	cmp	r3, #0
 8009222:	d010      	beq.n	8009246 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	68da      	ldr	r2, [r3, #12]
 8009228:	4b4d      	ldr	r3, [pc, #308]	; (8009360 <HAL_RCC_ClockConfig+0x244>)
 800922a:	699b      	ldr	r3, [r3, #24]
 800922c:	f003 030f 	and.w	r3, r3, #15
 8009230:	429a      	cmp	r2, r3
 8009232:	d908      	bls.n	8009246 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009234:	4b4a      	ldr	r3, [pc, #296]	; (8009360 <HAL_RCC_ClockConfig+0x244>)
 8009236:	699b      	ldr	r3, [r3, #24]
 8009238:	f023 020f 	bic.w	r2, r3, #15
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	68db      	ldr	r3, [r3, #12]
 8009240:	4947      	ldr	r1, [pc, #284]	; (8009360 <HAL_RCC_ClockConfig+0x244>)
 8009242:	4313      	orrs	r3, r2
 8009244:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	f003 0301 	and.w	r3, r3, #1
 800924e:	2b00      	cmp	r3, #0
 8009250:	d055      	beq.n	80092fe <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8009252:	4b43      	ldr	r3, [pc, #268]	; (8009360 <HAL_RCC_ClockConfig+0x244>)
 8009254:	699b      	ldr	r3, [r3, #24]
 8009256:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	689b      	ldr	r3, [r3, #8]
 800925e:	4940      	ldr	r1, [pc, #256]	; (8009360 <HAL_RCC_ClockConfig+0x244>)
 8009260:	4313      	orrs	r3, r2
 8009262:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	685b      	ldr	r3, [r3, #4]
 8009268:	2b02      	cmp	r3, #2
 800926a:	d107      	bne.n	800927c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800926c:	4b3c      	ldr	r3, [pc, #240]	; (8009360 <HAL_RCC_ClockConfig+0x244>)
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009274:	2b00      	cmp	r3, #0
 8009276:	d121      	bne.n	80092bc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009278:	2301      	movs	r3, #1
 800927a:	e0f6      	b.n	800946a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	685b      	ldr	r3, [r3, #4]
 8009280:	2b03      	cmp	r3, #3
 8009282:	d107      	bne.n	8009294 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009284:	4b36      	ldr	r3, [pc, #216]	; (8009360 <HAL_RCC_ClockConfig+0x244>)
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800928c:	2b00      	cmp	r3, #0
 800928e:	d115      	bne.n	80092bc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009290:	2301      	movs	r3, #1
 8009292:	e0ea      	b.n	800946a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	685b      	ldr	r3, [r3, #4]
 8009298:	2b01      	cmp	r3, #1
 800929a:	d107      	bne.n	80092ac <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800929c:	4b30      	ldr	r3, [pc, #192]	; (8009360 <HAL_RCC_ClockConfig+0x244>)
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d109      	bne.n	80092bc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80092a8:	2301      	movs	r3, #1
 80092aa:	e0de      	b.n	800946a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80092ac:	4b2c      	ldr	r3, [pc, #176]	; (8009360 <HAL_RCC_ClockConfig+0x244>)
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	f003 0304 	and.w	r3, r3, #4
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d101      	bne.n	80092bc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80092b8:	2301      	movs	r3, #1
 80092ba:	e0d6      	b.n	800946a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80092bc:	4b28      	ldr	r3, [pc, #160]	; (8009360 <HAL_RCC_ClockConfig+0x244>)
 80092be:	691b      	ldr	r3, [r3, #16]
 80092c0:	f023 0207 	bic.w	r2, r3, #7
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	685b      	ldr	r3, [r3, #4]
 80092c8:	4925      	ldr	r1, [pc, #148]	; (8009360 <HAL_RCC_ClockConfig+0x244>)
 80092ca:	4313      	orrs	r3, r2
 80092cc:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80092ce:	f7fa fc61 	bl	8003b94 <HAL_GetTick>
 80092d2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80092d4:	e00a      	b.n	80092ec <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80092d6:	f7fa fc5d 	bl	8003b94 <HAL_GetTick>
 80092da:	4602      	mov	r2, r0
 80092dc:	697b      	ldr	r3, [r7, #20]
 80092de:	1ad3      	subs	r3, r2, r3
 80092e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80092e4:	4293      	cmp	r3, r2
 80092e6:	d901      	bls.n	80092ec <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80092e8:	2303      	movs	r3, #3
 80092ea:	e0be      	b.n	800946a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80092ec:	4b1c      	ldr	r3, [pc, #112]	; (8009360 <HAL_RCC_ClockConfig+0x244>)
 80092ee:	691b      	ldr	r3, [r3, #16]
 80092f0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	685b      	ldr	r3, [r3, #4]
 80092f8:	00db      	lsls	r3, r3, #3
 80092fa:	429a      	cmp	r2, r3
 80092fc:	d1eb      	bne.n	80092d6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	f003 0302 	and.w	r3, r3, #2
 8009306:	2b00      	cmp	r3, #0
 8009308:	d010      	beq.n	800932c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	68da      	ldr	r2, [r3, #12]
 800930e:	4b14      	ldr	r3, [pc, #80]	; (8009360 <HAL_RCC_ClockConfig+0x244>)
 8009310:	699b      	ldr	r3, [r3, #24]
 8009312:	f003 030f 	and.w	r3, r3, #15
 8009316:	429a      	cmp	r2, r3
 8009318:	d208      	bcs.n	800932c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800931a:	4b11      	ldr	r3, [pc, #68]	; (8009360 <HAL_RCC_ClockConfig+0x244>)
 800931c:	699b      	ldr	r3, [r3, #24]
 800931e:	f023 020f 	bic.w	r2, r3, #15
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	68db      	ldr	r3, [r3, #12]
 8009326:	490e      	ldr	r1, [pc, #56]	; (8009360 <HAL_RCC_ClockConfig+0x244>)
 8009328:	4313      	orrs	r3, r2
 800932a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800932c:	4b0b      	ldr	r3, [pc, #44]	; (800935c <HAL_RCC_ClockConfig+0x240>)
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	f003 030f 	and.w	r3, r3, #15
 8009334:	683a      	ldr	r2, [r7, #0]
 8009336:	429a      	cmp	r2, r3
 8009338:	d214      	bcs.n	8009364 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800933a:	4b08      	ldr	r3, [pc, #32]	; (800935c <HAL_RCC_ClockConfig+0x240>)
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	f023 020f 	bic.w	r2, r3, #15
 8009342:	4906      	ldr	r1, [pc, #24]	; (800935c <HAL_RCC_ClockConfig+0x240>)
 8009344:	683b      	ldr	r3, [r7, #0]
 8009346:	4313      	orrs	r3, r2
 8009348:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800934a:	4b04      	ldr	r3, [pc, #16]	; (800935c <HAL_RCC_ClockConfig+0x240>)
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	f003 030f 	and.w	r3, r3, #15
 8009352:	683a      	ldr	r2, [r7, #0]
 8009354:	429a      	cmp	r2, r3
 8009356:	d005      	beq.n	8009364 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8009358:	2301      	movs	r3, #1
 800935a:	e086      	b.n	800946a <HAL_RCC_ClockConfig+0x34e>
 800935c:	52002000 	.word	0x52002000
 8009360:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	f003 0304 	and.w	r3, r3, #4
 800936c:	2b00      	cmp	r3, #0
 800936e:	d010      	beq.n	8009392 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	691a      	ldr	r2, [r3, #16]
 8009374:	4b3f      	ldr	r3, [pc, #252]	; (8009474 <HAL_RCC_ClockConfig+0x358>)
 8009376:	699b      	ldr	r3, [r3, #24]
 8009378:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800937c:	429a      	cmp	r2, r3
 800937e:	d208      	bcs.n	8009392 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009380:	4b3c      	ldr	r3, [pc, #240]	; (8009474 <HAL_RCC_ClockConfig+0x358>)
 8009382:	699b      	ldr	r3, [r3, #24]
 8009384:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	691b      	ldr	r3, [r3, #16]
 800938c:	4939      	ldr	r1, [pc, #228]	; (8009474 <HAL_RCC_ClockConfig+0x358>)
 800938e:	4313      	orrs	r3, r2
 8009390:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	f003 0308 	and.w	r3, r3, #8
 800939a:	2b00      	cmp	r3, #0
 800939c:	d010      	beq.n	80093c0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	695a      	ldr	r2, [r3, #20]
 80093a2:	4b34      	ldr	r3, [pc, #208]	; (8009474 <HAL_RCC_ClockConfig+0x358>)
 80093a4:	69db      	ldr	r3, [r3, #28]
 80093a6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80093aa:	429a      	cmp	r2, r3
 80093ac:	d208      	bcs.n	80093c0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80093ae:	4b31      	ldr	r3, [pc, #196]	; (8009474 <HAL_RCC_ClockConfig+0x358>)
 80093b0:	69db      	ldr	r3, [r3, #28]
 80093b2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	695b      	ldr	r3, [r3, #20]
 80093ba:	492e      	ldr	r1, [pc, #184]	; (8009474 <HAL_RCC_ClockConfig+0x358>)
 80093bc:	4313      	orrs	r3, r2
 80093be:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	f003 0310 	and.w	r3, r3, #16
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d010      	beq.n	80093ee <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	699a      	ldr	r2, [r3, #24]
 80093d0:	4b28      	ldr	r3, [pc, #160]	; (8009474 <HAL_RCC_ClockConfig+0x358>)
 80093d2:	69db      	ldr	r3, [r3, #28]
 80093d4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80093d8:	429a      	cmp	r2, r3
 80093da:	d208      	bcs.n	80093ee <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80093dc:	4b25      	ldr	r3, [pc, #148]	; (8009474 <HAL_RCC_ClockConfig+0x358>)
 80093de:	69db      	ldr	r3, [r3, #28]
 80093e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	699b      	ldr	r3, [r3, #24]
 80093e8:	4922      	ldr	r1, [pc, #136]	; (8009474 <HAL_RCC_ClockConfig+0x358>)
 80093ea:	4313      	orrs	r3, r2
 80093ec:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	f003 0320 	and.w	r3, r3, #32
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d010      	beq.n	800941c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	69da      	ldr	r2, [r3, #28]
 80093fe:	4b1d      	ldr	r3, [pc, #116]	; (8009474 <HAL_RCC_ClockConfig+0x358>)
 8009400:	6a1b      	ldr	r3, [r3, #32]
 8009402:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009406:	429a      	cmp	r2, r3
 8009408:	d208      	bcs.n	800941c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800940a:	4b1a      	ldr	r3, [pc, #104]	; (8009474 <HAL_RCC_ClockConfig+0x358>)
 800940c:	6a1b      	ldr	r3, [r3, #32]
 800940e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	69db      	ldr	r3, [r3, #28]
 8009416:	4917      	ldr	r1, [pc, #92]	; (8009474 <HAL_RCC_ClockConfig+0x358>)
 8009418:	4313      	orrs	r3, r2
 800941a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800941c:	f000 f834 	bl	8009488 <HAL_RCC_GetSysClockFreq>
 8009420:	4602      	mov	r2, r0
 8009422:	4b14      	ldr	r3, [pc, #80]	; (8009474 <HAL_RCC_ClockConfig+0x358>)
 8009424:	699b      	ldr	r3, [r3, #24]
 8009426:	0a1b      	lsrs	r3, r3, #8
 8009428:	f003 030f 	and.w	r3, r3, #15
 800942c:	4912      	ldr	r1, [pc, #72]	; (8009478 <HAL_RCC_ClockConfig+0x35c>)
 800942e:	5ccb      	ldrb	r3, [r1, r3]
 8009430:	f003 031f 	and.w	r3, r3, #31
 8009434:	fa22 f303 	lsr.w	r3, r2, r3
 8009438:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800943a:	4b0e      	ldr	r3, [pc, #56]	; (8009474 <HAL_RCC_ClockConfig+0x358>)
 800943c:	699b      	ldr	r3, [r3, #24]
 800943e:	f003 030f 	and.w	r3, r3, #15
 8009442:	4a0d      	ldr	r2, [pc, #52]	; (8009478 <HAL_RCC_ClockConfig+0x35c>)
 8009444:	5cd3      	ldrb	r3, [r2, r3]
 8009446:	f003 031f 	and.w	r3, r3, #31
 800944a:	693a      	ldr	r2, [r7, #16]
 800944c:	fa22 f303 	lsr.w	r3, r2, r3
 8009450:	4a0a      	ldr	r2, [pc, #40]	; (800947c <HAL_RCC_ClockConfig+0x360>)
 8009452:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009454:	4a0a      	ldr	r2, [pc, #40]	; (8009480 <HAL_RCC_ClockConfig+0x364>)
 8009456:	693b      	ldr	r3, [r7, #16]
 8009458:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800945a:	4b0a      	ldr	r3, [pc, #40]	; (8009484 <HAL_RCC_ClockConfig+0x368>)
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	4618      	mov	r0, r3
 8009460:	f7fa f9ae 	bl	80037c0 <HAL_InitTick>
 8009464:	4603      	mov	r3, r0
 8009466:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8009468:	7bfb      	ldrb	r3, [r7, #15]
}
 800946a:	4618      	mov	r0, r3
 800946c:	3718      	adds	r7, #24
 800946e:	46bd      	mov	sp, r7
 8009470:	bd80      	pop	{r7, pc}
 8009472:	bf00      	nop
 8009474:	58024400 	.word	0x58024400
 8009478:	08017bb0 	.word	0x08017bb0
 800947c:	24000004 	.word	0x24000004
 8009480:	24000000 	.word	0x24000000
 8009484:	24000008 	.word	0x24000008

08009488 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009488:	b480      	push	{r7}
 800948a:	b089      	sub	sp, #36	; 0x24
 800948c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800948e:	4bb3      	ldr	r3, [pc, #716]	; (800975c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009490:	691b      	ldr	r3, [r3, #16]
 8009492:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009496:	2b18      	cmp	r3, #24
 8009498:	f200 8155 	bhi.w	8009746 <HAL_RCC_GetSysClockFreq+0x2be>
 800949c:	a201      	add	r2, pc, #4	; (adr r2, 80094a4 <HAL_RCC_GetSysClockFreq+0x1c>)
 800949e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094a2:	bf00      	nop
 80094a4:	08009509 	.word	0x08009509
 80094a8:	08009747 	.word	0x08009747
 80094ac:	08009747 	.word	0x08009747
 80094b0:	08009747 	.word	0x08009747
 80094b4:	08009747 	.word	0x08009747
 80094b8:	08009747 	.word	0x08009747
 80094bc:	08009747 	.word	0x08009747
 80094c0:	08009747 	.word	0x08009747
 80094c4:	0800952f 	.word	0x0800952f
 80094c8:	08009747 	.word	0x08009747
 80094cc:	08009747 	.word	0x08009747
 80094d0:	08009747 	.word	0x08009747
 80094d4:	08009747 	.word	0x08009747
 80094d8:	08009747 	.word	0x08009747
 80094dc:	08009747 	.word	0x08009747
 80094e0:	08009747 	.word	0x08009747
 80094e4:	08009535 	.word	0x08009535
 80094e8:	08009747 	.word	0x08009747
 80094ec:	08009747 	.word	0x08009747
 80094f0:	08009747 	.word	0x08009747
 80094f4:	08009747 	.word	0x08009747
 80094f8:	08009747 	.word	0x08009747
 80094fc:	08009747 	.word	0x08009747
 8009500:	08009747 	.word	0x08009747
 8009504:	0800953b 	.word	0x0800953b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009508:	4b94      	ldr	r3, [pc, #592]	; (800975c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	f003 0320 	and.w	r3, r3, #32
 8009510:	2b00      	cmp	r3, #0
 8009512:	d009      	beq.n	8009528 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009514:	4b91      	ldr	r3, [pc, #580]	; (800975c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	08db      	lsrs	r3, r3, #3
 800951a:	f003 0303 	and.w	r3, r3, #3
 800951e:	4a90      	ldr	r2, [pc, #576]	; (8009760 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009520:	fa22 f303 	lsr.w	r3, r2, r3
 8009524:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8009526:	e111      	b.n	800974c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8009528:	4b8d      	ldr	r3, [pc, #564]	; (8009760 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800952a:	61bb      	str	r3, [r7, #24]
      break;
 800952c:	e10e      	b.n	800974c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800952e:	4b8d      	ldr	r3, [pc, #564]	; (8009764 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009530:	61bb      	str	r3, [r7, #24]
      break;
 8009532:	e10b      	b.n	800974c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8009534:	4b8c      	ldr	r3, [pc, #560]	; (8009768 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8009536:	61bb      	str	r3, [r7, #24]
      break;
 8009538:	e108      	b.n	800974c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800953a:	4b88      	ldr	r3, [pc, #544]	; (800975c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800953c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800953e:	f003 0303 	and.w	r3, r3, #3
 8009542:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8009544:	4b85      	ldr	r3, [pc, #532]	; (800975c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009548:	091b      	lsrs	r3, r3, #4
 800954a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800954e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009550:	4b82      	ldr	r3, [pc, #520]	; (800975c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009554:	f003 0301 	and.w	r3, r3, #1
 8009558:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800955a:	4b80      	ldr	r3, [pc, #512]	; (800975c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800955c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800955e:	08db      	lsrs	r3, r3, #3
 8009560:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009564:	68fa      	ldr	r2, [r7, #12]
 8009566:	fb02 f303 	mul.w	r3, r2, r3
 800956a:	ee07 3a90 	vmov	s15, r3
 800956e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009572:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8009576:	693b      	ldr	r3, [r7, #16]
 8009578:	2b00      	cmp	r3, #0
 800957a:	f000 80e1 	beq.w	8009740 <HAL_RCC_GetSysClockFreq+0x2b8>
 800957e:	697b      	ldr	r3, [r7, #20]
 8009580:	2b02      	cmp	r3, #2
 8009582:	f000 8083 	beq.w	800968c <HAL_RCC_GetSysClockFreq+0x204>
 8009586:	697b      	ldr	r3, [r7, #20]
 8009588:	2b02      	cmp	r3, #2
 800958a:	f200 80a1 	bhi.w	80096d0 <HAL_RCC_GetSysClockFreq+0x248>
 800958e:	697b      	ldr	r3, [r7, #20]
 8009590:	2b00      	cmp	r3, #0
 8009592:	d003      	beq.n	800959c <HAL_RCC_GetSysClockFreq+0x114>
 8009594:	697b      	ldr	r3, [r7, #20]
 8009596:	2b01      	cmp	r3, #1
 8009598:	d056      	beq.n	8009648 <HAL_RCC_GetSysClockFreq+0x1c0>
 800959a:	e099      	b.n	80096d0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800959c:	4b6f      	ldr	r3, [pc, #444]	; (800975c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	f003 0320 	and.w	r3, r3, #32
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d02d      	beq.n	8009604 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80095a8:	4b6c      	ldr	r3, [pc, #432]	; (800975c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	08db      	lsrs	r3, r3, #3
 80095ae:	f003 0303 	and.w	r3, r3, #3
 80095b2:	4a6b      	ldr	r2, [pc, #428]	; (8009760 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80095b4:	fa22 f303 	lsr.w	r3, r2, r3
 80095b8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	ee07 3a90 	vmov	s15, r3
 80095c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095c4:	693b      	ldr	r3, [r7, #16]
 80095c6:	ee07 3a90 	vmov	s15, r3
 80095ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80095d2:	4b62      	ldr	r3, [pc, #392]	; (800975c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80095d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095da:	ee07 3a90 	vmov	s15, r3
 80095de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095e2:	ed97 6a02 	vldr	s12, [r7, #8]
 80095e6:	eddf 5a61 	vldr	s11, [pc, #388]	; 800976c <HAL_RCC_GetSysClockFreq+0x2e4>
 80095ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80095ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80095f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80095f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80095fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095fe:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8009602:	e087      	b.n	8009714 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009604:	693b      	ldr	r3, [r7, #16]
 8009606:	ee07 3a90 	vmov	s15, r3
 800960a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800960e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8009770 <HAL_RCC_GetSysClockFreq+0x2e8>
 8009612:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009616:	4b51      	ldr	r3, [pc, #324]	; (800975c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800961a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800961e:	ee07 3a90 	vmov	s15, r3
 8009622:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009626:	ed97 6a02 	vldr	s12, [r7, #8]
 800962a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800976c <HAL_RCC_GetSysClockFreq+0x2e4>
 800962e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009632:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009636:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800963a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800963e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009642:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009646:	e065      	b.n	8009714 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009648:	693b      	ldr	r3, [r7, #16]
 800964a:	ee07 3a90 	vmov	s15, r3
 800964e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009652:	eddf 6a48 	vldr	s13, [pc, #288]	; 8009774 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009656:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800965a:	4b40      	ldr	r3, [pc, #256]	; (800975c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800965c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800965e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009662:	ee07 3a90 	vmov	s15, r3
 8009666:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800966a:	ed97 6a02 	vldr	s12, [r7, #8]
 800966e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800976c <HAL_RCC_GetSysClockFreq+0x2e4>
 8009672:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009676:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800967a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800967e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009682:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009686:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800968a:	e043      	b.n	8009714 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800968c:	693b      	ldr	r3, [r7, #16]
 800968e:	ee07 3a90 	vmov	s15, r3
 8009692:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009696:	eddf 6a38 	vldr	s13, [pc, #224]	; 8009778 <HAL_RCC_GetSysClockFreq+0x2f0>
 800969a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800969e:	4b2f      	ldr	r3, [pc, #188]	; (800975c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80096a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096a6:	ee07 3a90 	vmov	s15, r3
 80096aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80096b2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800976c <HAL_RCC_GetSysClockFreq+0x2e4>
 80096b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80096c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80096c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096ca:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80096ce:	e021      	b.n	8009714 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80096d0:	693b      	ldr	r3, [r7, #16]
 80096d2:	ee07 3a90 	vmov	s15, r3
 80096d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096da:	eddf 6a26 	vldr	s13, [pc, #152]	; 8009774 <HAL_RCC_GetSysClockFreq+0x2ec>
 80096de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096e2:	4b1e      	ldr	r3, [pc, #120]	; (800975c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80096e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096ea:	ee07 3a90 	vmov	s15, r3
 80096ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80096f6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800976c <HAL_RCC_GetSysClockFreq+0x2e4>
 80096fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009702:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009706:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800970a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800970e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009712:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8009714:	4b11      	ldr	r3, [pc, #68]	; (800975c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009718:	0a5b      	lsrs	r3, r3, #9
 800971a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800971e:	3301      	adds	r3, #1
 8009720:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8009722:	683b      	ldr	r3, [r7, #0]
 8009724:	ee07 3a90 	vmov	s15, r3
 8009728:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800972c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009730:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009734:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009738:	ee17 3a90 	vmov	r3, s15
 800973c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800973e:	e005      	b.n	800974c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8009740:	2300      	movs	r3, #0
 8009742:	61bb      	str	r3, [r7, #24]
      break;
 8009744:	e002      	b.n	800974c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8009746:	4b07      	ldr	r3, [pc, #28]	; (8009764 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009748:	61bb      	str	r3, [r7, #24]
      break;
 800974a:	bf00      	nop
  }

  return sysclockfreq;
 800974c:	69bb      	ldr	r3, [r7, #24]
}
 800974e:	4618      	mov	r0, r3
 8009750:	3724      	adds	r7, #36	; 0x24
 8009752:	46bd      	mov	sp, r7
 8009754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009758:	4770      	bx	lr
 800975a:	bf00      	nop
 800975c:	58024400 	.word	0x58024400
 8009760:	03d09000 	.word	0x03d09000
 8009764:	003d0900 	.word	0x003d0900
 8009768:	007a1200 	.word	0x007a1200
 800976c:	46000000 	.word	0x46000000
 8009770:	4c742400 	.word	0x4c742400
 8009774:	4a742400 	.word	0x4a742400
 8009778:	4af42400 	.word	0x4af42400

0800977c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800977c:	b580      	push	{r7, lr}
 800977e:	b082      	sub	sp, #8
 8009780:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009782:	f7ff fe81 	bl	8009488 <HAL_RCC_GetSysClockFreq>
 8009786:	4602      	mov	r2, r0
 8009788:	4b10      	ldr	r3, [pc, #64]	; (80097cc <HAL_RCC_GetHCLKFreq+0x50>)
 800978a:	699b      	ldr	r3, [r3, #24]
 800978c:	0a1b      	lsrs	r3, r3, #8
 800978e:	f003 030f 	and.w	r3, r3, #15
 8009792:	490f      	ldr	r1, [pc, #60]	; (80097d0 <HAL_RCC_GetHCLKFreq+0x54>)
 8009794:	5ccb      	ldrb	r3, [r1, r3]
 8009796:	f003 031f 	and.w	r3, r3, #31
 800979a:	fa22 f303 	lsr.w	r3, r2, r3
 800979e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80097a0:	4b0a      	ldr	r3, [pc, #40]	; (80097cc <HAL_RCC_GetHCLKFreq+0x50>)
 80097a2:	699b      	ldr	r3, [r3, #24]
 80097a4:	f003 030f 	and.w	r3, r3, #15
 80097a8:	4a09      	ldr	r2, [pc, #36]	; (80097d0 <HAL_RCC_GetHCLKFreq+0x54>)
 80097aa:	5cd3      	ldrb	r3, [r2, r3]
 80097ac:	f003 031f 	and.w	r3, r3, #31
 80097b0:	687a      	ldr	r2, [r7, #4]
 80097b2:	fa22 f303 	lsr.w	r3, r2, r3
 80097b6:	4a07      	ldr	r2, [pc, #28]	; (80097d4 <HAL_RCC_GetHCLKFreq+0x58>)
 80097b8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80097ba:	4a07      	ldr	r2, [pc, #28]	; (80097d8 <HAL_RCC_GetHCLKFreq+0x5c>)
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80097c0:	4b04      	ldr	r3, [pc, #16]	; (80097d4 <HAL_RCC_GetHCLKFreq+0x58>)
 80097c2:	681b      	ldr	r3, [r3, #0]
}
 80097c4:	4618      	mov	r0, r3
 80097c6:	3708      	adds	r7, #8
 80097c8:	46bd      	mov	sp, r7
 80097ca:	bd80      	pop	{r7, pc}
 80097cc:	58024400 	.word	0x58024400
 80097d0:	08017bb0 	.word	0x08017bb0
 80097d4:	24000004 	.word	0x24000004
 80097d8:	24000000 	.word	0x24000000

080097dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80097dc:	b580      	push	{r7, lr}
 80097de:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80097e0:	f7ff ffcc 	bl	800977c <HAL_RCC_GetHCLKFreq>
 80097e4:	4602      	mov	r2, r0
 80097e6:	4b06      	ldr	r3, [pc, #24]	; (8009800 <HAL_RCC_GetPCLK1Freq+0x24>)
 80097e8:	69db      	ldr	r3, [r3, #28]
 80097ea:	091b      	lsrs	r3, r3, #4
 80097ec:	f003 0307 	and.w	r3, r3, #7
 80097f0:	4904      	ldr	r1, [pc, #16]	; (8009804 <HAL_RCC_GetPCLK1Freq+0x28>)
 80097f2:	5ccb      	ldrb	r3, [r1, r3]
 80097f4:	f003 031f 	and.w	r3, r3, #31
 80097f8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80097fc:	4618      	mov	r0, r3
 80097fe:	bd80      	pop	{r7, pc}
 8009800:	58024400 	.word	0x58024400
 8009804:	08017bb0 	.word	0x08017bb0

08009808 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009808:	b580      	push	{r7, lr}
 800980a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800980c:	f7ff ffb6 	bl	800977c <HAL_RCC_GetHCLKFreq>
 8009810:	4602      	mov	r2, r0
 8009812:	4b06      	ldr	r3, [pc, #24]	; (800982c <HAL_RCC_GetPCLK2Freq+0x24>)
 8009814:	69db      	ldr	r3, [r3, #28]
 8009816:	0a1b      	lsrs	r3, r3, #8
 8009818:	f003 0307 	and.w	r3, r3, #7
 800981c:	4904      	ldr	r1, [pc, #16]	; (8009830 <HAL_RCC_GetPCLK2Freq+0x28>)
 800981e:	5ccb      	ldrb	r3, [r1, r3]
 8009820:	f003 031f 	and.w	r3, r3, #31
 8009824:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009828:	4618      	mov	r0, r3
 800982a:	bd80      	pop	{r7, pc}
 800982c:	58024400 	.word	0x58024400
 8009830:	08017bb0 	.word	0x08017bb0

08009834 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8009834:	b480      	push	{r7}
 8009836:	b083      	sub	sp, #12
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]
 800983c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	223f      	movs	r2, #63	; 0x3f
 8009842:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8009844:	4b1a      	ldr	r3, [pc, #104]	; (80098b0 <HAL_RCC_GetClockConfig+0x7c>)
 8009846:	691b      	ldr	r3, [r3, #16]
 8009848:	f003 0207 	and.w	r2, r3, #7
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8009850:	4b17      	ldr	r3, [pc, #92]	; (80098b0 <HAL_RCC_GetClockConfig+0x7c>)
 8009852:	699b      	ldr	r3, [r3, #24]
 8009854:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800985c:	4b14      	ldr	r3, [pc, #80]	; (80098b0 <HAL_RCC_GetClockConfig+0x7c>)
 800985e:	699b      	ldr	r3, [r3, #24]
 8009860:	f003 020f 	and.w	r2, r3, #15
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8009868:	4b11      	ldr	r3, [pc, #68]	; (80098b0 <HAL_RCC_GetClockConfig+0x7c>)
 800986a:	699b      	ldr	r3, [r3, #24]
 800986c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8009874:	4b0e      	ldr	r3, [pc, #56]	; (80098b0 <HAL_RCC_GetClockConfig+0x7c>)
 8009876:	69db      	ldr	r3, [r3, #28]
 8009878:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8009880:	4b0b      	ldr	r3, [pc, #44]	; (80098b0 <HAL_RCC_GetClockConfig+0x7c>)
 8009882:	69db      	ldr	r3, [r3, #28]
 8009884:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800988c:	4b08      	ldr	r3, [pc, #32]	; (80098b0 <HAL_RCC_GetClockConfig+0x7c>)
 800988e:	6a1b      	ldr	r3, [r3, #32]
 8009890:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8009898:	4b06      	ldr	r3, [pc, #24]	; (80098b4 <HAL_RCC_GetClockConfig+0x80>)
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	f003 020f 	and.w	r2, r3, #15
 80098a0:	683b      	ldr	r3, [r7, #0]
 80098a2:	601a      	str	r2, [r3, #0]
}
 80098a4:	bf00      	nop
 80098a6:	370c      	adds	r7, #12
 80098a8:	46bd      	mov	sp, r7
 80098aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ae:	4770      	bx	lr
 80098b0:	58024400 	.word	0x58024400
 80098b4:	52002000 	.word	0x52002000

080098b8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80098b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80098bc:	b0ca      	sub	sp, #296	; 0x128
 80098be:	af00      	add	r7, sp, #0
 80098c0:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80098c4:	2300      	movs	r3, #0
 80098c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80098ca:	2300      	movs	r3, #0
 80098cc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80098d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098d8:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80098dc:	2500      	movs	r5, #0
 80098de:	ea54 0305 	orrs.w	r3, r4, r5
 80098e2:	d049      	beq.n	8009978 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80098e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80098ea:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80098ee:	d02f      	beq.n	8009950 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80098f0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80098f4:	d828      	bhi.n	8009948 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80098f6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80098fa:	d01a      	beq.n	8009932 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80098fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009900:	d822      	bhi.n	8009948 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009902:	2b00      	cmp	r3, #0
 8009904:	d003      	beq.n	800990e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8009906:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800990a:	d007      	beq.n	800991c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800990c:	e01c      	b.n	8009948 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800990e:	4bb8      	ldr	r3, [pc, #736]	; (8009bf0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009912:	4ab7      	ldr	r2, [pc, #732]	; (8009bf0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009914:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009918:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800991a:	e01a      	b.n	8009952 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800991c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009920:	3308      	adds	r3, #8
 8009922:	2102      	movs	r1, #2
 8009924:	4618      	mov	r0, r3
 8009926:	f002 fb61 	bl	800bfec <RCCEx_PLL2_Config>
 800992a:	4603      	mov	r3, r0
 800992c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009930:	e00f      	b.n	8009952 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009932:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009936:	3328      	adds	r3, #40	; 0x28
 8009938:	2102      	movs	r1, #2
 800993a:	4618      	mov	r0, r3
 800993c:	f002 fc08 	bl	800c150 <RCCEx_PLL3_Config>
 8009940:	4603      	mov	r3, r0
 8009942:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009946:	e004      	b.n	8009952 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009948:	2301      	movs	r3, #1
 800994a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800994e:	e000      	b.n	8009952 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8009950:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009952:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009956:	2b00      	cmp	r3, #0
 8009958:	d10a      	bne.n	8009970 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800995a:	4ba5      	ldr	r3, [pc, #660]	; (8009bf0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800995c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800995e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8009962:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009966:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009968:	4aa1      	ldr	r2, [pc, #644]	; (8009bf0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800996a:	430b      	orrs	r3, r1
 800996c:	6513      	str	r3, [r2, #80]	; 0x50
 800996e:	e003      	b.n	8009978 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009970:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009974:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009978:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800997c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009980:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8009984:	f04f 0900 	mov.w	r9, #0
 8009988:	ea58 0309 	orrs.w	r3, r8, r9
 800998c:	d047      	beq.n	8009a1e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800998e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009992:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009994:	2b04      	cmp	r3, #4
 8009996:	d82a      	bhi.n	80099ee <HAL_RCCEx_PeriphCLKConfig+0x136>
 8009998:	a201      	add	r2, pc, #4	; (adr r2, 80099a0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800999a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800999e:	bf00      	nop
 80099a0:	080099b5 	.word	0x080099b5
 80099a4:	080099c3 	.word	0x080099c3
 80099a8:	080099d9 	.word	0x080099d9
 80099ac:	080099f7 	.word	0x080099f7
 80099b0:	080099f7 	.word	0x080099f7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80099b4:	4b8e      	ldr	r3, [pc, #568]	; (8009bf0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80099b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099b8:	4a8d      	ldr	r2, [pc, #564]	; (8009bf0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80099ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80099be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80099c0:	e01a      	b.n	80099f8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80099c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099c6:	3308      	adds	r3, #8
 80099c8:	2100      	movs	r1, #0
 80099ca:	4618      	mov	r0, r3
 80099cc:	f002 fb0e 	bl	800bfec <RCCEx_PLL2_Config>
 80099d0:	4603      	mov	r3, r0
 80099d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80099d6:	e00f      	b.n	80099f8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80099d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099dc:	3328      	adds	r3, #40	; 0x28
 80099de:	2100      	movs	r1, #0
 80099e0:	4618      	mov	r0, r3
 80099e2:	f002 fbb5 	bl	800c150 <RCCEx_PLL3_Config>
 80099e6:	4603      	mov	r3, r0
 80099e8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80099ec:	e004      	b.n	80099f8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80099ee:	2301      	movs	r3, #1
 80099f0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80099f4:	e000      	b.n	80099f8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80099f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80099f8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d10a      	bne.n	8009a16 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009a00:	4b7b      	ldr	r3, [pc, #492]	; (8009bf0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009a02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a04:	f023 0107 	bic.w	r1, r3, #7
 8009a08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a0e:	4a78      	ldr	r2, [pc, #480]	; (8009bf0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009a10:	430b      	orrs	r3, r1
 8009a12:	6513      	str	r3, [r2, #80]	; 0x50
 8009a14:	e003      	b.n	8009a1e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a16:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009a1a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8009a1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a26:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8009a2a:	f04f 0b00 	mov.w	fp, #0
 8009a2e:	ea5a 030b 	orrs.w	r3, sl, fp
 8009a32:	d04c      	beq.n	8009ace <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8009a34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a3e:	d030      	beq.n	8009aa2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8009a40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a44:	d829      	bhi.n	8009a9a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009a46:	2bc0      	cmp	r3, #192	; 0xc0
 8009a48:	d02d      	beq.n	8009aa6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8009a4a:	2bc0      	cmp	r3, #192	; 0xc0
 8009a4c:	d825      	bhi.n	8009a9a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009a4e:	2b80      	cmp	r3, #128	; 0x80
 8009a50:	d018      	beq.n	8009a84 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8009a52:	2b80      	cmp	r3, #128	; 0x80
 8009a54:	d821      	bhi.n	8009a9a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d002      	beq.n	8009a60 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8009a5a:	2b40      	cmp	r3, #64	; 0x40
 8009a5c:	d007      	beq.n	8009a6e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8009a5e:	e01c      	b.n	8009a9a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009a60:	4b63      	ldr	r3, [pc, #396]	; (8009bf0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a64:	4a62      	ldr	r2, [pc, #392]	; (8009bf0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009a66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009a6a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009a6c:	e01c      	b.n	8009aa8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009a6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a72:	3308      	adds	r3, #8
 8009a74:	2100      	movs	r1, #0
 8009a76:	4618      	mov	r0, r3
 8009a78:	f002 fab8 	bl	800bfec <RCCEx_PLL2_Config>
 8009a7c:	4603      	mov	r3, r0
 8009a7e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009a82:	e011      	b.n	8009aa8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009a84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a88:	3328      	adds	r3, #40	; 0x28
 8009a8a:	2100      	movs	r1, #0
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	f002 fb5f 	bl	800c150 <RCCEx_PLL3_Config>
 8009a92:	4603      	mov	r3, r0
 8009a94:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009a98:	e006      	b.n	8009aa8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009a9a:	2301      	movs	r3, #1
 8009a9c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009aa0:	e002      	b.n	8009aa8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8009aa2:	bf00      	nop
 8009aa4:	e000      	b.n	8009aa8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8009aa6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009aa8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d10a      	bne.n	8009ac6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8009ab0:	4b4f      	ldr	r3, [pc, #316]	; (8009bf0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009ab2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ab4:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8009ab8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009abc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009abe:	4a4c      	ldr	r2, [pc, #304]	; (8009bf0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009ac0:	430b      	orrs	r3, r1
 8009ac2:	6513      	str	r3, [r2, #80]	; 0x50
 8009ac4:	e003      	b.n	8009ace <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ac6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009aca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009ace:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ad6:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8009ada:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009ade:	2300      	movs	r3, #0
 8009ae0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8009ae4:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8009ae8:	460b      	mov	r3, r1
 8009aea:	4313      	orrs	r3, r2
 8009aec:	d053      	beq.n	8009b96 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8009aee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009af2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009af6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009afa:	d035      	beq.n	8009b68 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8009afc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009b00:	d82e      	bhi.n	8009b60 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009b02:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009b06:	d031      	beq.n	8009b6c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8009b08:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009b0c:	d828      	bhi.n	8009b60 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009b0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009b12:	d01a      	beq.n	8009b4a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8009b14:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009b18:	d822      	bhi.n	8009b60 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d003      	beq.n	8009b26 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8009b1e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009b22:	d007      	beq.n	8009b34 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8009b24:	e01c      	b.n	8009b60 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009b26:	4b32      	ldr	r3, [pc, #200]	; (8009bf0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b2a:	4a31      	ldr	r2, [pc, #196]	; (8009bf0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009b2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009b30:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009b32:	e01c      	b.n	8009b6e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009b34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b38:	3308      	adds	r3, #8
 8009b3a:	2100      	movs	r1, #0
 8009b3c:	4618      	mov	r0, r3
 8009b3e:	f002 fa55 	bl	800bfec <RCCEx_PLL2_Config>
 8009b42:	4603      	mov	r3, r0
 8009b44:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009b48:	e011      	b.n	8009b6e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009b4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b4e:	3328      	adds	r3, #40	; 0x28
 8009b50:	2100      	movs	r1, #0
 8009b52:	4618      	mov	r0, r3
 8009b54:	f002 fafc 	bl	800c150 <RCCEx_PLL3_Config>
 8009b58:	4603      	mov	r3, r0
 8009b5a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009b5e:	e006      	b.n	8009b6e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009b60:	2301      	movs	r3, #1
 8009b62:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009b66:	e002      	b.n	8009b6e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8009b68:	bf00      	nop
 8009b6a:	e000      	b.n	8009b6e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8009b6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009b6e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d10b      	bne.n	8009b8e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009b76:	4b1e      	ldr	r3, [pc, #120]	; (8009bf0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009b78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b7a:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8009b7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b82:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009b86:	4a1a      	ldr	r2, [pc, #104]	; (8009bf0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009b88:	430b      	orrs	r3, r1
 8009b8a:	6593      	str	r3, [r2, #88]	; 0x58
 8009b8c:	e003      	b.n	8009b96 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b8e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009b92:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009b96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b9e:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8009ba2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009bac:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8009bb0:	460b      	mov	r3, r1
 8009bb2:	4313      	orrs	r3, r2
 8009bb4:	d056      	beq.n	8009c64 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8009bb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009bba:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009bbe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009bc2:	d038      	beq.n	8009c36 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8009bc4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009bc8:	d831      	bhi.n	8009c2e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009bca:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009bce:	d034      	beq.n	8009c3a <HAL_RCCEx_PeriphCLKConfig+0x382>
 8009bd0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009bd4:	d82b      	bhi.n	8009c2e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009bd6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009bda:	d01d      	beq.n	8009c18 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8009bdc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009be0:	d825      	bhi.n	8009c2e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d006      	beq.n	8009bf4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8009be6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009bea:	d00a      	beq.n	8009c02 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8009bec:	e01f      	b.n	8009c2e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009bee:	bf00      	nop
 8009bf0:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009bf4:	4ba2      	ldr	r3, [pc, #648]	; (8009e80 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bf8:	4aa1      	ldr	r2, [pc, #644]	; (8009e80 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009bfa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009bfe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009c00:	e01c      	b.n	8009c3c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009c02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c06:	3308      	adds	r3, #8
 8009c08:	2100      	movs	r1, #0
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	f002 f9ee 	bl	800bfec <RCCEx_PLL2_Config>
 8009c10:	4603      	mov	r3, r0
 8009c12:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009c16:	e011      	b.n	8009c3c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009c18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c1c:	3328      	adds	r3, #40	; 0x28
 8009c1e:	2100      	movs	r1, #0
 8009c20:	4618      	mov	r0, r3
 8009c22:	f002 fa95 	bl	800c150 <RCCEx_PLL3_Config>
 8009c26:	4603      	mov	r3, r0
 8009c28:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009c2c:	e006      	b.n	8009c3c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009c2e:	2301      	movs	r3, #1
 8009c30:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009c34:	e002      	b.n	8009c3c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8009c36:	bf00      	nop
 8009c38:	e000      	b.n	8009c3c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8009c3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009c3c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d10b      	bne.n	8009c5c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009c44:	4b8e      	ldr	r3, [pc, #568]	; (8009e80 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009c46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c48:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8009c4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c50:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009c54:	4a8a      	ldr	r2, [pc, #552]	; (8009e80 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009c56:	430b      	orrs	r3, r1
 8009c58:	6593      	str	r3, [r2, #88]	; 0x58
 8009c5a:	e003      	b.n	8009c64 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c5c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009c60:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009c64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c6c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8009c70:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009c74:	2300      	movs	r3, #0
 8009c76:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009c7a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8009c7e:	460b      	mov	r3, r1
 8009c80:	4313      	orrs	r3, r2
 8009c82:	d03a      	beq.n	8009cfa <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8009c84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c8a:	2b30      	cmp	r3, #48	; 0x30
 8009c8c:	d01f      	beq.n	8009cce <HAL_RCCEx_PeriphCLKConfig+0x416>
 8009c8e:	2b30      	cmp	r3, #48	; 0x30
 8009c90:	d819      	bhi.n	8009cc6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8009c92:	2b20      	cmp	r3, #32
 8009c94:	d00c      	beq.n	8009cb0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8009c96:	2b20      	cmp	r3, #32
 8009c98:	d815      	bhi.n	8009cc6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d019      	beq.n	8009cd2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8009c9e:	2b10      	cmp	r3, #16
 8009ca0:	d111      	bne.n	8009cc6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009ca2:	4b77      	ldr	r3, [pc, #476]	; (8009e80 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ca6:	4a76      	ldr	r2, [pc, #472]	; (8009e80 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009ca8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009cac:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8009cae:	e011      	b.n	8009cd4 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009cb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009cb4:	3308      	adds	r3, #8
 8009cb6:	2102      	movs	r1, #2
 8009cb8:	4618      	mov	r0, r3
 8009cba:	f002 f997 	bl	800bfec <RCCEx_PLL2_Config>
 8009cbe:	4603      	mov	r3, r0
 8009cc0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8009cc4:	e006      	b.n	8009cd4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009cc6:	2301      	movs	r3, #1
 8009cc8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009ccc:	e002      	b.n	8009cd4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8009cce:	bf00      	nop
 8009cd0:	e000      	b.n	8009cd4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8009cd2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009cd4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d10a      	bne.n	8009cf2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009cdc:	4b68      	ldr	r3, [pc, #416]	; (8009e80 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009cde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ce0:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8009ce4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ce8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009cea:	4a65      	ldr	r2, [pc, #404]	; (8009e80 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009cec:	430b      	orrs	r3, r1
 8009cee:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009cf0:	e003      	b.n	8009cfa <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009cf2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009cf6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009cfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d02:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8009d06:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009d10:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8009d14:	460b      	mov	r3, r1
 8009d16:	4313      	orrs	r3, r2
 8009d18:	d051      	beq.n	8009dbe <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8009d1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009d20:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009d24:	d035      	beq.n	8009d92 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8009d26:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009d2a:	d82e      	bhi.n	8009d8a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009d2c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009d30:	d031      	beq.n	8009d96 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8009d32:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009d36:	d828      	bhi.n	8009d8a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009d38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009d3c:	d01a      	beq.n	8009d74 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8009d3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009d42:	d822      	bhi.n	8009d8a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d003      	beq.n	8009d50 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8009d48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d4c:	d007      	beq.n	8009d5e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8009d4e:	e01c      	b.n	8009d8a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009d50:	4b4b      	ldr	r3, [pc, #300]	; (8009e80 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d54:	4a4a      	ldr	r2, [pc, #296]	; (8009e80 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009d56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009d5a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009d5c:	e01c      	b.n	8009d98 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009d5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d62:	3308      	adds	r3, #8
 8009d64:	2100      	movs	r1, #0
 8009d66:	4618      	mov	r0, r3
 8009d68:	f002 f940 	bl	800bfec <RCCEx_PLL2_Config>
 8009d6c:	4603      	mov	r3, r0
 8009d6e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009d72:	e011      	b.n	8009d98 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009d74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d78:	3328      	adds	r3, #40	; 0x28
 8009d7a:	2100      	movs	r1, #0
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	f002 f9e7 	bl	800c150 <RCCEx_PLL3_Config>
 8009d82:	4603      	mov	r3, r0
 8009d84:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009d88:	e006      	b.n	8009d98 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009d8a:	2301      	movs	r3, #1
 8009d8c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009d90:	e002      	b.n	8009d98 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8009d92:	bf00      	nop
 8009d94:	e000      	b.n	8009d98 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8009d96:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009d98:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d10a      	bne.n	8009db6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009da0:	4b37      	ldr	r3, [pc, #220]	; (8009e80 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009da2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009da4:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8009da8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009dac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009dae:	4a34      	ldr	r2, [pc, #208]	; (8009e80 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009db0:	430b      	orrs	r3, r1
 8009db2:	6513      	str	r3, [r2, #80]	; 0x50
 8009db4:	e003      	b.n	8009dbe <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009db6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009dba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009dbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dc6:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8009dca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009dce:	2300      	movs	r3, #0
 8009dd0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009dd4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8009dd8:	460b      	mov	r3, r1
 8009dda:	4313      	orrs	r3, r2
 8009ddc:	d056      	beq.n	8009e8c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8009dde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009de2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009de4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009de8:	d033      	beq.n	8009e52 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8009dea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009dee:	d82c      	bhi.n	8009e4a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009df0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009df4:	d02f      	beq.n	8009e56 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8009df6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009dfa:	d826      	bhi.n	8009e4a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009dfc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009e00:	d02b      	beq.n	8009e5a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8009e02:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009e06:	d820      	bhi.n	8009e4a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009e08:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009e0c:	d012      	beq.n	8009e34 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8009e0e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009e12:	d81a      	bhi.n	8009e4a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d022      	beq.n	8009e5e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8009e18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e1c:	d115      	bne.n	8009e4a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009e1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e22:	3308      	adds	r3, #8
 8009e24:	2101      	movs	r1, #1
 8009e26:	4618      	mov	r0, r3
 8009e28:	f002 f8e0 	bl	800bfec <RCCEx_PLL2_Config>
 8009e2c:	4603      	mov	r3, r0
 8009e2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009e32:	e015      	b.n	8009e60 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009e34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e38:	3328      	adds	r3, #40	; 0x28
 8009e3a:	2101      	movs	r1, #1
 8009e3c:	4618      	mov	r0, r3
 8009e3e:	f002 f987 	bl	800c150 <RCCEx_PLL3_Config>
 8009e42:	4603      	mov	r3, r0
 8009e44:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009e48:	e00a      	b.n	8009e60 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009e4a:	2301      	movs	r3, #1
 8009e4c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009e50:	e006      	b.n	8009e60 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009e52:	bf00      	nop
 8009e54:	e004      	b.n	8009e60 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009e56:	bf00      	nop
 8009e58:	e002      	b.n	8009e60 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009e5a:	bf00      	nop
 8009e5c:	e000      	b.n	8009e60 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009e5e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009e60:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d10d      	bne.n	8009e84 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009e68:	4b05      	ldr	r3, [pc, #20]	; (8009e80 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009e6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e6c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8009e70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009e76:	4a02      	ldr	r2, [pc, #8]	; (8009e80 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009e78:	430b      	orrs	r3, r1
 8009e7a:	6513      	str	r3, [r2, #80]	; 0x50
 8009e7c:	e006      	b.n	8009e8c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8009e7e:	bf00      	nop
 8009e80:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e84:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009e88:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009e8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e94:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8009e98:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009e9c:	2300      	movs	r3, #0
 8009e9e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009ea2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8009ea6:	460b      	mov	r3, r1
 8009ea8:	4313      	orrs	r3, r2
 8009eaa:	d055      	beq.n	8009f58 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8009eac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009eb0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009eb4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009eb8:	d033      	beq.n	8009f22 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8009eba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009ebe:	d82c      	bhi.n	8009f1a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009ec0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ec4:	d02f      	beq.n	8009f26 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8009ec6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009eca:	d826      	bhi.n	8009f1a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009ecc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009ed0:	d02b      	beq.n	8009f2a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8009ed2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009ed6:	d820      	bhi.n	8009f1a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009ed8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009edc:	d012      	beq.n	8009f04 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8009ede:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009ee2:	d81a      	bhi.n	8009f1a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d022      	beq.n	8009f2e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8009ee8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009eec:	d115      	bne.n	8009f1a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009eee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ef2:	3308      	adds	r3, #8
 8009ef4:	2101      	movs	r1, #1
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	f002 f878 	bl	800bfec <RCCEx_PLL2_Config>
 8009efc:	4603      	mov	r3, r0
 8009efe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009f02:	e015      	b.n	8009f30 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009f04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f08:	3328      	adds	r3, #40	; 0x28
 8009f0a:	2101      	movs	r1, #1
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	f002 f91f 	bl	800c150 <RCCEx_PLL3_Config>
 8009f12:	4603      	mov	r3, r0
 8009f14:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009f18:	e00a      	b.n	8009f30 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8009f1a:	2301      	movs	r3, #1
 8009f1c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009f20:	e006      	b.n	8009f30 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009f22:	bf00      	nop
 8009f24:	e004      	b.n	8009f30 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009f26:	bf00      	nop
 8009f28:	e002      	b.n	8009f30 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009f2a:	bf00      	nop
 8009f2c:	e000      	b.n	8009f30 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009f2e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009f30:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d10b      	bne.n	8009f50 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009f38:	4ba3      	ldr	r3, [pc, #652]	; (800a1c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009f3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f3c:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8009f40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f44:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009f48:	4a9f      	ldr	r2, [pc, #636]	; (800a1c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009f4a:	430b      	orrs	r3, r1
 8009f4c:	6593      	str	r3, [r2, #88]	; 0x58
 8009f4e:	e003      	b.n	8009f58 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f50:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009f54:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009f58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f60:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8009f64:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009f68:	2300      	movs	r3, #0
 8009f6a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009f6e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009f72:	460b      	mov	r3, r1
 8009f74:	4313      	orrs	r3, r2
 8009f76:	d037      	beq.n	8009fe8 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8009f78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009f82:	d00e      	beq.n	8009fa2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8009f84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009f88:	d816      	bhi.n	8009fb8 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d018      	beq.n	8009fc0 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8009f8e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009f92:	d111      	bne.n	8009fb8 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009f94:	4b8c      	ldr	r3, [pc, #560]	; (800a1c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f98:	4a8b      	ldr	r2, [pc, #556]	; (800a1c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009f9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009f9e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009fa0:	e00f      	b.n	8009fc2 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009fa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009fa6:	3308      	adds	r3, #8
 8009fa8:	2101      	movs	r1, #1
 8009faa:	4618      	mov	r0, r3
 8009fac:	f002 f81e 	bl	800bfec <RCCEx_PLL2_Config>
 8009fb0:	4603      	mov	r3, r0
 8009fb2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009fb6:	e004      	b.n	8009fc2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009fb8:	2301      	movs	r3, #1
 8009fba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009fbe:	e000      	b.n	8009fc2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8009fc0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009fc2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d10a      	bne.n	8009fe0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009fca:	4b7f      	ldr	r3, [pc, #508]	; (800a1c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009fcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009fce:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8009fd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009fd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009fd8:	4a7b      	ldr	r2, [pc, #492]	; (800a1c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009fda:	430b      	orrs	r3, r1
 8009fdc:	6513      	str	r3, [r2, #80]	; 0x50
 8009fde:	e003      	b.n	8009fe8 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009fe0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009fe4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009fe8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ff0:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8009ff4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009ff8:	2300      	movs	r3, #0
 8009ffa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009ffe:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800a002:	460b      	mov	r3, r1
 800a004:	4313      	orrs	r3, r2
 800a006:	d039      	beq.n	800a07c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800a008:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a00c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a00e:	2b03      	cmp	r3, #3
 800a010:	d81c      	bhi.n	800a04c <HAL_RCCEx_PeriphCLKConfig+0x794>
 800a012:	a201      	add	r2, pc, #4	; (adr r2, 800a018 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800a014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a018:	0800a055 	.word	0x0800a055
 800a01c:	0800a029 	.word	0x0800a029
 800a020:	0800a037 	.word	0x0800a037
 800a024:	0800a055 	.word	0x0800a055
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a028:	4b67      	ldr	r3, [pc, #412]	; (800a1c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a02a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a02c:	4a66      	ldr	r2, [pc, #408]	; (800a1c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a02e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a032:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800a034:	e00f      	b.n	800a056 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a036:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a03a:	3308      	adds	r3, #8
 800a03c:	2102      	movs	r1, #2
 800a03e:	4618      	mov	r0, r3
 800a040:	f001 ffd4 	bl	800bfec <RCCEx_PLL2_Config>
 800a044:	4603      	mov	r3, r0
 800a046:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800a04a:	e004      	b.n	800a056 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800a04c:	2301      	movs	r3, #1
 800a04e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a052:	e000      	b.n	800a056 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800a054:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a056:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d10a      	bne.n	800a074 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800a05e:	4b5a      	ldr	r3, [pc, #360]	; (800a1c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a060:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a062:	f023 0103 	bic.w	r1, r3, #3
 800a066:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a06a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a06c:	4a56      	ldr	r2, [pc, #344]	; (800a1c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a06e:	430b      	orrs	r3, r1
 800a070:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a072:	e003      	b.n	800a07c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a074:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a078:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a07c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a080:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a084:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800a088:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a08c:	2300      	movs	r3, #0
 800a08e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a092:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800a096:	460b      	mov	r3, r1
 800a098:	4313      	orrs	r3, r2
 800a09a:	f000 809f 	beq.w	800a1dc <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a09e:	4b4b      	ldr	r3, [pc, #300]	; (800a1cc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	4a4a      	ldr	r2, [pc, #296]	; (800a1cc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800a0a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a0a8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a0aa:	f7f9 fd73 	bl	8003b94 <HAL_GetTick>
 800a0ae:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a0b2:	e00b      	b.n	800a0cc <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a0b4:	f7f9 fd6e 	bl	8003b94 <HAL_GetTick>
 800a0b8:	4602      	mov	r2, r0
 800a0ba:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800a0be:	1ad3      	subs	r3, r2, r3
 800a0c0:	2b64      	cmp	r3, #100	; 0x64
 800a0c2:	d903      	bls.n	800a0cc <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800a0c4:	2303      	movs	r3, #3
 800a0c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a0ca:	e005      	b.n	800a0d8 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a0cc:	4b3f      	ldr	r3, [pc, #252]	; (800a1cc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d0ed      	beq.n	800a0b4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800a0d8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d179      	bne.n	800a1d4 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800a0e0:	4b39      	ldr	r3, [pc, #228]	; (800a1c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a0e2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a0e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a0e8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a0ec:	4053      	eors	r3, r2
 800a0ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d015      	beq.n	800a122 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a0f6:	4b34      	ldr	r3, [pc, #208]	; (800a1c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a0f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a0fe:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a102:	4b31      	ldr	r3, [pc, #196]	; (800a1c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a104:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a106:	4a30      	ldr	r2, [pc, #192]	; (800a1c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a108:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a10c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a10e:	4b2e      	ldr	r3, [pc, #184]	; (800a1c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a110:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a112:	4a2d      	ldr	r2, [pc, #180]	; (800a1c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a114:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a118:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800a11a:	4a2b      	ldr	r2, [pc, #172]	; (800a1c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a11c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a120:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800a122:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a126:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a12a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a12e:	d118      	bne.n	800a162 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a130:	f7f9 fd30 	bl	8003b94 <HAL_GetTick>
 800a134:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a138:	e00d      	b.n	800a156 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a13a:	f7f9 fd2b 	bl	8003b94 <HAL_GetTick>
 800a13e:	4602      	mov	r2, r0
 800a140:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800a144:	1ad2      	subs	r2, r2, r3
 800a146:	f241 3388 	movw	r3, #5000	; 0x1388
 800a14a:	429a      	cmp	r2, r3
 800a14c:	d903      	bls.n	800a156 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800a14e:	2303      	movs	r3, #3
 800a150:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800a154:	e005      	b.n	800a162 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a156:	4b1c      	ldr	r3, [pc, #112]	; (800a1c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a158:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a15a:	f003 0302 	and.w	r3, r3, #2
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d0eb      	beq.n	800a13a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800a162:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a166:	2b00      	cmp	r3, #0
 800a168:	d129      	bne.n	800a1be <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a16a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a16e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a172:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a176:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a17a:	d10e      	bne.n	800a19a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800a17c:	4b12      	ldr	r3, [pc, #72]	; (800a1c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a17e:	691b      	ldr	r3, [r3, #16]
 800a180:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800a184:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a188:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a18c:	091a      	lsrs	r2, r3, #4
 800a18e:	4b10      	ldr	r3, [pc, #64]	; (800a1d0 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800a190:	4013      	ands	r3, r2
 800a192:	4a0d      	ldr	r2, [pc, #52]	; (800a1c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a194:	430b      	orrs	r3, r1
 800a196:	6113      	str	r3, [r2, #16]
 800a198:	e005      	b.n	800a1a6 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800a19a:	4b0b      	ldr	r3, [pc, #44]	; (800a1c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a19c:	691b      	ldr	r3, [r3, #16]
 800a19e:	4a0a      	ldr	r2, [pc, #40]	; (800a1c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a1a0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a1a4:	6113      	str	r3, [r2, #16]
 800a1a6:	4b08      	ldr	r3, [pc, #32]	; (800a1c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a1a8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800a1aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a1ae:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a1b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a1b6:	4a04      	ldr	r2, [pc, #16]	; (800a1c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a1b8:	430b      	orrs	r3, r1
 800a1ba:	6713      	str	r3, [r2, #112]	; 0x70
 800a1bc:	e00e      	b.n	800a1dc <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a1be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a1c2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800a1c6:	e009      	b.n	800a1dc <HAL_RCCEx_PeriphCLKConfig+0x924>
 800a1c8:	58024400 	.word	0x58024400
 800a1cc:	58024800 	.word	0x58024800
 800a1d0:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1d4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a1d8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800a1dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a1e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1e4:	f002 0301 	and.w	r3, r2, #1
 800a1e8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a1f2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a1f6:	460b      	mov	r3, r1
 800a1f8:	4313      	orrs	r3, r2
 800a1fa:	f000 8089 	beq.w	800a310 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800a1fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a202:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a204:	2b28      	cmp	r3, #40	; 0x28
 800a206:	d86b      	bhi.n	800a2e0 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800a208:	a201      	add	r2, pc, #4	; (adr r2, 800a210 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800a20a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a20e:	bf00      	nop
 800a210:	0800a2e9 	.word	0x0800a2e9
 800a214:	0800a2e1 	.word	0x0800a2e1
 800a218:	0800a2e1 	.word	0x0800a2e1
 800a21c:	0800a2e1 	.word	0x0800a2e1
 800a220:	0800a2e1 	.word	0x0800a2e1
 800a224:	0800a2e1 	.word	0x0800a2e1
 800a228:	0800a2e1 	.word	0x0800a2e1
 800a22c:	0800a2e1 	.word	0x0800a2e1
 800a230:	0800a2b5 	.word	0x0800a2b5
 800a234:	0800a2e1 	.word	0x0800a2e1
 800a238:	0800a2e1 	.word	0x0800a2e1
 800a23c:	0800a2e1 	.word	0x0800a2e1
 800a240:	0800a2e1 	.word	0x0800a2e1
 800a244:	0800a2e1 	.word	0x0800a2e1
 800a248:	0800a2e1 	.word	0x0800a2e1
 800a24c:	0800a2e1 	.word	0x0800a2e1
 800a250:	0800a2cb 	.word	0x0800a2cb
 800a254:	0800a2e1 	.word	0x0800a2e1
 800a258:	0800a2e1 	.word	0x0800a2e1
 800a25c:	0800a2e1 	.word	0x0800a2e1
 800a260:	0800a2e1 	.word	0x0800a2e1
 800a264:	0800a2e1 	.word	0x0800a2e1
 800a268:	0800a2e1 	.word	0x0800a2e1
 800a26c:	0800a2e1 	.word	0x0800a2e1
 800a270:	0800a2e9 	.word	0x0800a2e9
 800a274:	0800a2e1 	.word	0x0800a2e1
 800a278:	0800a2e1 	.word	0x0800a2e1
 800a27c:	0800a2e1 	.word	0x0800a2e1
 800a280:	0800a2e1 	.word	0x0800a2e1
 800a284:	0800a2e1 	.word	0x0800a2e1
 800a288:	0800a2e1 	.word	0x0800a2e1
 800a28c:	0800a2e1 	.word	0x0800a2e1
 800a290:	0800a2e9 	.word	0x0800a2e9
 800a294:	0800a2e1 	.word	0x0800a2e1
 800a298:	0800a2e1 	.word	0x0800a2e1
 800a29c:	0800a2e1 	.word	0x0800a2e1
 800a2a0:	0800a2e1 	.word	0x0800a2e1
 800a2a4:	0800a2e1 	.word	0x0800a2e1
 800a2a8:	0800a2e1 	.word	0x0800a2e1
 800a2ac:	0800a2e1 	.word	0x0800a2e1
 800a2b0:	0800a2e9 	.word	0x0800a2e9
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a2b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a2b8:	3308      	adds	r3, #8
 800a2ba:	2101      	movs	r1, #1
 800a2bc:	4618      	mov	r0, r3
 800a2be:	f001 fe95 	bl	800bfec <RCCEx_PLL2_Config>
 800a2c2:	4603      	mov	r3, r0
 800a2c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a2c8:	e00f      	b.n	800a2ea <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a2ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a2ce:	3328      	adds	r3, #40	; 0x28
 800a2d0:	2101      	movs	r1, #1
 800a2d2:	4618      	mov	r0, r3
 800a2d4:	f001 ff3c 	bl	800c150 <RCCEx_PLL3_Config>
 800a2d8:	4603      	mov	r3, r0
 800a2da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a2de:	e004      	b.n	800a2ea <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a2e0:	2301      	movs	r3, #1
 800a2e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a2e6:	e000      	b.n	800a2ea <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800a2e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a2ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d10a      	bne.n	800a308 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800a2f2:	4bbf      	ldr	r3, [pc, #764]	; (800a5f0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a2f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2f6:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800a2fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a2fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a300:	4abb      	ldr	r2, [pc, #748]	; (800a5f0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a302:	430b      	orrs	r3, r1
 800a304:	6553      	str	r3, [r2, #84]	; 0x54
 800a306:	e003      	b.n	800a310 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a308:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a30c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a310:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a314:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a318:	f002 0302 	and.w	r3, r2, #2
 800a31c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a320:	2300      	movs	r3, #0
 800a322:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800a326:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800a32a:	460b      	mov	r3, r1
 800a32c:	4313      	orrs	r3, r2
 800a32e:	d041      	beq.n	800a3b4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800a330:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a334:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a336:	2b05      	cmp	r3, #5
 800a338:	d824      	bhi.n	800a384 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800a33a:	a201      	add	r2, pc, #4	; (adr r2, 800a340 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800a33c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a340:	0800a38d 	.word	0x0800a38d
 800a344:	0800a359 	.word	0x0800a359
 800a348:	0800a36f 	.word	0x0800a36f
 800a34c:	0800a38d 	.word	0x0800a38d
 800a350:	0800a38d 	.word	0x0800a38d
 800a354:	0800a38d 	.word	0x0800a38d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a358:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a35c:	3308      	adds	r3, #8
 800a35e:	2101      	movs	r1, #1
 800a360:	4618      	mov	r0, r3
 800a362:	f001 fe43 	bl	800bfec <RCCEx_PLL2_Config>
 800a366:	4603      	mov	r3, r0
 800a368:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a36c:	e00f      	b.n	800a38e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a36e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a372:	3328      	adds	r3, #40	; 0x28
 800a374:	2101      	movs	r1, #1
 800a376:	4618      	mov	r0, r3
 800a378:	f001 feea 	bl	800c150 <RCCEx_PLL3_Config>
 800a37c:	4603      	mov	r3, r0
 800a37e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a382:	e004      	b.n	800a38e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a384:	2301      	movs	r3, #1
 800a386:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a38a:	e000      	b.n	800a38e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800a38c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a38e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a392:	2b00      	cmp	r3, #0
 800a394:	d10a      	bne.n	800a3ac <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a396:	4b96      	ldr	r3, [pc, #600]	; (800a5f0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a398:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a39a:	f023 0107 	bic.w	r1, r3, #7
 800a39e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a3a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a3a4:	4a92      	ldr	r2, [pc, #584]	; (800a5f0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a3a6:	430b      	orrs	r3, r1
 800a3a8:	6553      	str	r3, [r2, #84]	; 0x54
 800a3aa:	e003      	b.n	800a3b4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a3ac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a3b0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a3b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a3b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3bc:	f002 0304 	and.w	r3, r2, #4
 800a3c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a3c4:	2300      	movs	r3, #0
 800a3c6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a3ca:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800a3ce:	460b      	mov	r3, r1
 800a3d0:	4313      	orrs	r3, r2
 800a3d2:	d044      	beq.n	800a45e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800a3d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a3d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a3dc:	2b05      	cmp	r3, #5
 800a3de:	d825      	bhi.n	800a42c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800a3e0:	a201      	add	r2, pc, #4	; (adr r2, 800a3e8 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800a3e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3e6:	bf00      	nop
 800a3e8:	0800a435 	.word	0x0800a435
 800a3ec:	0800a401 	.word	0x0800a401
 800a3f0:	0800a417 	.word	0x0800a417
 800a3f4:	0800a435 	.word	0x0800a435
 800a3f8:	0800a435 	.word	0x0800a435
 800a3fc:	0800a435 	.word	0x0800a435
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a400:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a404:	3308      	adds	r3, #8
 800a406:	2101      	movs	r1, #1
 800a408:	4618      	mov	r0, r3
 800a40a:	f001 fdef 	bl	800bfec <RCCEx_PLL2_Config>
 800a40e:	4603      	mov	r3, r0
 800a410:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a414:	e00f      	b.n	800a436 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a416:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a41a:	3328      	adds	r3, #40	; 0x28
 800a41c:	2101      	movs	r1, #1
 800a41e:	4618      	mov	r0, r3
 800a420:	f001 fe96 	bl	800c150 <RCCEx_PLL3_Config>
 800a424:	4603      	mov	r3, r0
 800a426:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a42a:	e004      	b.n	800a436 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a42c:	2301      	movs	r3, #1
 800a42e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a432:	e000      	b.n	800a436 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800a434:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a436:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d10b      	bne.n	800a456 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a43e:	4b6c      	ldr	r3, [pc, #432]	; (800a5f0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a440:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a442:	f023 0107 	bic.w	r1, r3, #7
 800a446:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a44a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a44e:	4a68      	ldr	r2, [pc, #416]	; (800a5f0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a450:	430b      	orrs	r3, r1
 800a452:	6593      	str	r3, [r2, #88]	; 0x58
 800a454:	e003      	b.n	800a45e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a456:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a45a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a45e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a462:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a466:	f002 0320 	and.w	r3, r2, #32
 800a46a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a46e:	2300      	movs	r3, #0
 800a470:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a474:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a478:	460b      	mov	r3, r1
 800a47a:	4313      	orrs	r3, r2
 800a47c:	d055      	beq.n	800a52a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800a47e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a482:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a486:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a48a:	d033      	beq.n	800a4f4 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800a48c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a490:	d82c      	bhi.n	800a4ec <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a492:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a496:	d02f      	beq.n	800a4f8 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800a498:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a49c:	d826      	bhi.n	800a4ec <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a49e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a4a2:	d02b      	beq.n	800a4fc <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800a4a4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a4a8:	d820      	bhi.n	800a4ec <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a4aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a4ae:	d012      	beq.n	800a4d6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800a4b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a4b4:	d81a      	bhi.n	800a4ec <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d022      	beq.n	800a500 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800a4ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a4be:	d115      	bne.n	800a4ec <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a4c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a4c4:	3308      	adds	r3, #8
 800a4c6:	2100      	movs	r1, #0
 800a4c8:	4618      	mov	r0, r3
 800a4ca:	f001 fd8f 	bl	800bfec <RCCEx_PLL2_Config>
 800a4ce:	4603      	mov	r3, r0
 800a4d0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a4d4:	e015      	b.n	800a502 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a4d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a4da:	3328      	adds	r3, #40	; 0x28
 800a4dc:	2102      	movs	r1, #2
 800a4de:	4618      	mov	r0, r3
 800a4e0:	f001 fe36 	bl	800c150 <RCCEx_PLL3_Config>
 800a4e4:	4603      	mov	r3, r0
 800a4e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a4ea:	e00a      	b.n	800a502 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a4ec:	2301      	movs	r3, #1
 800a4ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a4f2:	e006      	b.n	800a502 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a4f4:	bf00      	nop
 800a4f6:	e004      	b.n	800a502 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a4f8:	bf00      	nop
 800a4fa:	e002      	b.n	800a502 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a4fc:	bf00      	nop
 800a4fe:	e000      	b.n	800a502 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a500:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a502:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a506:	2b00      	cmp	r3, #0
 800a508:	d10b      	bne.n	800a522 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a50a:	4b39      	ldr	r3, [pc, #228]	; (800a5f0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a50c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a50e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800a512:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a516:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a51a:	4a35      	ldr	r2, [pc, #212]	; (800a5f0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a51c:	430b      	orrs	r3, r1
 800a51e:	6553      	str	r3, [r2, #84]	; 0x54
 800a520:	e003      	b.n	800a52a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a522:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a526:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a52a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a52e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a532:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800a536:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a53a:	2300      	movs	r3, #0
 800a53c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800a540:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800a544:	460b      	mov	r3, r1
 800a546:	4313      	orrs	r3, r2
 800a548:	d058      	beq.n	800a5fc <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800a54a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a54e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a552:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a556:	d033      	beq.n	800a5c0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800a558:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a55c:	d82c      	bhi.n	800a5b8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a55e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a562:	d02f      	beq.n	800a5c4 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800a564:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a568:	d826      	bhi.n	800a5b8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a56a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a56e:	d02b      	beq.n	800a5c8 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800a570:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a574:	d820      	bhi.n	800a5b8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a576:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a57a:	d012      	beq.n	800a5a2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800a57c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a580:	d81a      	bhi.n	800a5b8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a582:	2b00      	cmp	r3, #0
 800a584:	d022      	beq.n	800a5cc <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800a586:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a58a:	d115      	bne.n	800a5b8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a58c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a590:	3308      	adds	r3, #8
 800a592:	2100      	movs	r1, #0
 800a594:	4618      	mov	r0, r3
 800a596:	f001 fd29 	bl	800bfec <RCCEx_PLL2_Config>
 800a59a:	4603      	mov	r3, r0
 800a59c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a5a0:	e015      	b.n	800a5ce <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a5a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a5a6:	3328      	adds	r3, #40	; 0x28
 800a5a8:	2102      	movs	r1, #2
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	f001 fdd0 	bl	800c150 <RCCEx_PLL3_Config>
 800a5b0:	4603      	mov	r3, r0
 800a5b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a5b6:	e00a      	b.n	800a5ce <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a5b8:	2301      	movs	r3, #1
 800a5ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a5be:	e006      	b.n	800a5ce <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a5c0:	bf00      	nop
 800a5c2:	e004      	b.n	800a5ce <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a5c4:	bf00      	nop
 800a5c6:	e002      	b.n	800a5ce <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a5c8:	bf00      	nop
 800a5ca:	e000      	b.n	800a5ce <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a5cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a5ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d10e      	bne.n	800a5f4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a5d6:	4b06      	ldr	r3, [pc, #24]	; (800a5f0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a5d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a5da:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800a5de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a5e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a5e6:	4a02      	ldr	r2, [pc, #8]	; (800a5f0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a5e8:	430b      	orrs	r3, r1
 800a5ea:	6593      	str	r3, [r2, #88]	; 0x58
 800a5ec:	e006      	b.n	800a5fc <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800a5ee:	bf00      	nop
 800a5f0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a5f4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a5f8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a5fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a600:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a604:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800a608:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a60c:	2300      	movs	r3, #0
 800a60e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a612:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800a616:	460b      	mov	r3, r1
 800a618:	4313      	orrs	r3, r2
 800a61a:	d055      	beq.n	800a6c8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800a61c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a620:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a624:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a628:	d033      	beq.n	800a692 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800a62a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a62e:	d82c      	bhi.n	800a68a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a630:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a634:	d02f      	beq.n	800a696 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800a636:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a63a:	d826      	bhi.n	800a68a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a63c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a640:	d02b      	beq.n	800a69a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800a642:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a646:	d820      	bhi.n	800a68a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a648:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a64c:	d012      	beq.n	800a674 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800a64e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a652:	d81a      	bhi.n	800a68a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a654:	2b00      	cmp	r3, #0
 800a656:	d022      	beq.n	800a69e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800a658:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a65c:	d115      	bne.n	800a68a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a65e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a662:	3308      	adds	r3, #8
 800a664:	2100      	movs	r1, #0
 800a666:	4618      	mov	r0, r3
 800a668:	f001 fcc0 	bl	800bfec <RCCEx_PLL2_Config>
 800a66c:	4603      	mov	r3, r0
 800a66e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a672:	e015      	b.n	800a6a0 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a674:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a678:	3328      	adds	r3, #40	; 0x28
 800a67a:	2102      	movs	r1, #2
 800a67c:	4618      	mov	r0, r3
 800a67e:	f001 fd67 	bl	800c150 <RCCEx_PLL3_Config>
 800a682:	4603      	mov	r3, r0
 800a684:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a688:	e00a      	b.n	800a6a0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a68a:	2301      	movs	r3, #1
 800a68c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a690:	e006      	b.n	800a6a0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a692:	bf00      	nop
 800a694:	e004      	b.n	800a6a0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a696:	bf00      	nop
 800a698:	e002      	b.n	800a6a0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a69a:	bf00      	nop
 800a69c:	e000      	b.n	800a6a0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a69e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a6a0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d10b      	bne.n	800a6c0 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a6a8:	4ba1      	ldr	r3, [pc, #644]	; (800a930 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a6aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a6ac:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800a6b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a6b4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a6b8:	4a9d      	ldr	r2, [pc, #628]	; (800a930 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a6ba:	430b      	orrs	r3, r1
 800a6bc:	6593      	str	r3, [r2, #88]	; 0x58
 800a6be:	e003      	b.n	800a6c8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a6c0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a6c4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800a6c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a6cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6d0:	f002 0308 	and.w	r3, r2, #8
 800a6d4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a6d8:	2300      	movs	r3, #0
 800a6da:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a6de:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800a6e2:	460b      	mov	r3, r1
 800a6e4:	4313      	orrs	r3, r2
 800a6e6:	d01e      	beq.n	800a726 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800a6e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a6ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a6f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a6f4:	d10c      	bne.n	800a710 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a6f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a6fa:	3328      	adds	r3, #40	; 0x28
 800a6fc:	2102      	movs	r1, #2
 800a6fe:	4618      	mov	r0, r3
 800a700:	f001 fd26 	bl	800c150 <RCCEx_PLL3_Config>
 800a704:	4603      	mov	r3, r0
 800a706:	2b00      	cmp	r3, #0
 800a708:	d002      	beq.n	800a710 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800a70a:	2301      	movs	r3, #1
 800a70c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800a710:	4b87      	ldr	r3, [pc, #540]	; (800a930 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a712:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a714:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a718:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a71c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a720:	4a83      	ldr	r2, [pc, #524]	; (800a930 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a722:	430b      	orrs	r3, r1
 800a724:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a726:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a72a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a72e:	f002 0310 	and.w	r3, r2, #16
 800a732:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a736:	2300      	movs	r3, #0
 800a738:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a73c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800a740:	460b      	mov	r3, r1
 800a742:	4313      	orrs	r3, r2
 800a744:	d01e      	beq.n	800a784 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800a746:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a74a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a74e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a752:	d10c      	bne.n	800a76e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a754:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a758:	3328      	adds	r3, #40	; 0x28
 800a75a:	2102      	movs	r1, #2
 800a75c:	4618      	mov	r0, r3
 800a75e:	f001 fcf7 	bl	800c150 <RCCEx_PLL3_Config>
 800a762:	4603      	mov	r3, r0
 800a764:	2b00      	cmp	r3, #0
 800a766:	d002      	beq.n	800a76e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800a768:	2301      	movs	r3, #1
 800a76a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a76e:	4b70      	ldr	r3, [pc, #448]	; (800a930 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a770:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a772:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a776:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a77a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a77e:	4a6c      	ldr	r2, [pc, #432]	; (800a930 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a780:	430b      	orrs	r3, r1
 800a782:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a784:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a78c:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800a790:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a794:	2300      	movs	r3, #0
 800a796:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a79a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800a79e:	460b      	mov	r3, r1
 800a7a0:	4313      	orrs	r3, r2
 800a7a2:	d03e      	beq.n	800a822 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800a7a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a7a8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a7ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a7b0:	d022      	beq.n	800a7f8 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800a7b2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a7b6:	d81b      	bhi.n	800a7f0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d003      	beq.n	800a7c4 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800a7bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a7c0:	d00b      	beq.n	800a7da <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800a7c2:	e015      	b.n	800a7f0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a7c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a7c8:	3308      	adds	r3, #8
 800a7ca:	2100      	movs	r1, #0
 800a7cc:	4618      	mov	r0, r3
 800a7ce:	f001 fc0d 	bl	800bfec <RCCEx_PLL2_Config>
 800a7d2:	4603      	mov	r3, r0
 800a7d4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a7d8:	e00f      	b.n	800a7fa <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a7da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a7de:	3328      	adds	r3, #40	; 0x28
 800a7e0:	2102      	movs	r1, #2
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	f001 fcb4 	bl	800c150 <RCCEx_PLL3_Config>
 800a7e8:	4603      	mov	r3, r0
 800a7ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a7ee:	e004      	b.n	800a7fa <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a7f0:	2301      	movs	r3, #1
 800a7f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a7f6:	e000      	b.n	800a7fa <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800a7f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a7fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d10b      	bne.n	800a81a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a802:	4b4b      	ldr	r3, [pc, #300]	; (800a930 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a804:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a806:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800a80a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a80e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a812:	4a47      	ldr	r2, [pc, #284]	; (800a930 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a814:	430b      	orrs	r3, r1
 800a816:	6593      	str	r3, [r2, #88]	; 0x58
 800a818:	e003      	b.n	800a822 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a81a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a81e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a822:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a82a:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800a82e:	67bb      	str	r3, [r7, #120]	; 0x78
 800a830:	2300      	movs	r3, #0
 800a832:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a834:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800a838:	460b      	mov	r3, r1
 800a83a:	4313      	orrs	r3, r2
 800a83c:	d03b      	beq.n	800a8b6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800a83e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a842:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a846:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a84a:	d01f      	beq.n	800a88c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800a84c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a850:	d818      	bhi.n	800a884 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800a852:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a856:	d003      	beq.n	800a860 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800a858:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a85c:	d007      	beq.n	800a86e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800a85e:	e011      	b.n	800a884 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a860:	4b33      	ldr	r3, [pc, #204]	; (800a930 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a864:	4a32      	ldr	r2, [pc, #200]	; (800a930 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a866:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a86a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800a86c:	e00f      	b.n	800a88e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a86e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a872:	3328      	adds	r3, #40	; 0x28
 800a874:	2101      	movs	r1, #1
 800a876:	4618      	mov	r0, r3
 800a878:	f001 fc6a 	bl	800c150 <RCCEx_PLL3_Config>
 800a87c:	4603      	mov	r3, r0
 800a87e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800a882:	e004      	b.n	800a88e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a884:	2301      	movs	r3, #1
 800a886:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a88a:	e000      	b.n	800a88e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800a88c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a88e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a892:	2b00      	cmp	r3, #0
 800a894:	d10b      	bne.n	800a8ae <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a896:	4b26      	ldr	r3, [pc, #152]	; (800a930 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a898:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a89a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800a89e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a8a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8a6:	4a22      	ldr	r2, [pc, #136]	; (800a930 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a8a8:	430b      	orrs	r3, r1
 800a8aa:	6553      	str	r3, [r2, #84]	; 0x54
 800a8ac:	e003      	b.n	800a8b6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a8ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a8b2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a8b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a8ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8be:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800a8c2:	673b      	str	r3, [r7, #112]	; 0x70
 800a8c4:	2300      	movs	r3, #0
 800a8c6:	677b      	str	r3, [r7, #116]	; 0x74
 800a8c8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800a8cc:	460b      	mov	r3, r1
 800a8ce:	4313      	orrs	r3, r2
 800a8d0:	d034      	beq.n	800a93c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800a8d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a8d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d003      	beq.n	800a8e4 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800a8dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a8e0:	d007      	beq.n	800a8f2 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800a8e2:	e011      	b.n	800a908 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a8e4:	4b12      	ldr	r3, [pc, #72]	; (800a930 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a8e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8e8:	4a11      	ldr	r2, [pc, #68]	; (800a930 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a8ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a8ee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a8f0:	e00e      	b.n	800a910 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a8f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a8f6:	3308      	adds	r3, #8
 800a8f8:	2102      	movs	r1, #2
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	f001 fb76 	bl	800bfec <RCCEx_PLL2_Config>
 800a900:	4603      	mov	r3, r0
 800a902:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a906:	e003      	b.n	800a910 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800a908:	2301      	movs	r3, #1
 800a90a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a90e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a910:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a914:	2b00      	cmp	r3, #0
 800a916:	d10d      	bne.n	800a934 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a918:	4b05      	ldr	r3, [pc, #20]	; (800a930 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a91a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a91c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a920:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a924:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a926:	4a02      	ldr	r2, [pc, #8]	; (800a930 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a928:	430b      	orrs	r3, r1
 800a92a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a92c:	e006      	b.n	800a93c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800a92e:	bf00      	nop
 800a930:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a934:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a938:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a93c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a940:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a944:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800a948:	66bb      	str	r3, [r7, #104]	; 0x68
 800a94a:	2300      	movs	r3, #0
 800a94c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a94e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800a952:	460b      	mov	r3, r1
 800a954:	4313      	orrs	r3, r2
 800a956:	d00c      	beq.n	800a972 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a958:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a95c:	3328      	adds	r3, #40	; 0x28
 800a95e:	2102      	movs	r1, #2
 800a960:	4618      	mov	r0, r3
 800a962:	f001 fbf5 	bl	800c150 <RCCEx_PLL3_Config>
 800a966:	4603      	mov	r3, r0
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d002      	beq.n	800a972 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800a96c:	2301      	movs	r3, #1
 800a96e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a972:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a97a:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800a97e:	663b      	str	r3, [r7, #96]	; 0x60
 800a980:	2300      	movs	r3, #0
 800a982:	667b      	str	r3, [r7, #100]	; 0x64
 800a984:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800a988:	460b      	mov	r3, r1
 800a98a:	4313      	orrs	r3, r2
 800a98c:	d038      	beq.n	800aa00 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800a98e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a992:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a996:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a99a:	d018      	beq.n	800a9ce <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800a99c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a9a0:	d811      	bhi.n	800a9c6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800a9a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a9a6:	d014      	beq.n	800a9d2 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800a9a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a9ac:	d80b      	bhi.n	800a9c6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d011      	beq.n	800a9d6 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800a9b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a9b6:	d106      	bne.n	800a9c6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a9b8:	4bc3      	ldr	r3, [pc, #780]	; (800acc8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a9ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9bc:	4ac2      	ldr	r2, [pc, #776]	; (800acc8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a9be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a9c2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800a9c4:	e008      	b.n	800a9d8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a9c6:	2301      	movs	r3, #1
 800a9c8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a9cc:	e004      	b.n	800a9d8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a9ce:	bf00      	nop
 800a9d0:	e002      	b.n	800a9d8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a9d2:	bf00      	nop
 800a9d4:	e000      	b.n	800a9d8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a9d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a9d8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d10b      	bne.n	800a9f8 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a9e0:	4bb9      	ldr	r3, [pc, #740]	; (800acc8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a9e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a9e4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a9e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a9ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a9f0:	4ab5      	ldr	r2, [pc, #724]	; (800acc8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a9f2:	430b      	orrs	r3, r1
 800a9f4:	6553      	str	r3, [r2, #84]	; 0x54
 800a9f6:	e003      	b.n	800aa00 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a9f8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a9fc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800aa00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa08:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800aa0c:	65bb      	str	r3, [r7, #88]	; 0x58
 800aa0e:	2300      	movs	r3, #0
 800aa10:	65fb      	str	r3, [r7, #92]	; 0x5c
 800aa12:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800aa16:	460b      	mov	r3, r1
 800aa18:	4313      	orrs	r3, r2
 800aa1a:	d009      	beq.n	800aa30 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800aa1c:	4baa      	ldr	r3, [pc, #680]	; (800acc8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800aa1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa20:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800aa24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aa2a:	4aa7      	ldr	r2, [pc, #668]	; (800acc8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800aa2c:	430b      	orrs	r3, r1
 800aa2e:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800aa30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa38:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800aa3c:	653b      	str	r3, [r7, #80]	; 0x50
 800aa3e:	2300      	movs	r3, #0
 800aa40:	657b      	str	r3, [r7, #84]	; 0x54
 800aa42:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800aa46:	460b      	mov	r3, r1
 800aa48:	4313      	orrs	r3, r2
 800aa4a:	d00a      	beq.n	800aa62 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800aa4c:	4b9e      	ldr	r3, [pc, #632]	; (800acc8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800aa4e:	691b      	ldr	r3, [r3, #16]
 800aa50:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800aa54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa58:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800aa5c:	4a9a      	ldr	r2, [pc, #616]	; (800acc8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800aa5e:	430b      	orrs	r3, r1
 800aa60:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800aa62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa6a:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800aa6e:	64bb      	str	r3, [r7, #72]	; 0x48
 800aa70:	2300      	movs	r3, #0
 800aa72:	64fb      	str	r3, [r7, #76]	; 0x4c
 800aa74:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800aa78:	460b      	mov	r3, r1
 800aa7a:	4313      	orrs	r3, r2
 800aa7c:	d009      	beq.n	800aa92 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800aa7e:	4b92      	ldr	r3, [pc, #584]	; (800acc8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800aa80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa82:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800aa86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aa8c:	4a8e      	ldr	r2, [pc, #568]	; (800acc8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800aa8e:	430b      	orrs	r3, r1
 800aa90:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800aa92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa9a:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800aa9e:	643b      	str	r3, [r7, #64]	; 0x40
 800aaa0:	2300      	movs	r3, #0
 800aaa2:	647b      	str	r3, [r7, #68]	; 0x44
 800aaa4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800aaa8:	460b      	mov	r3, r1
 800aaaa:	4313      	orrs	r3, r2
 800aaac:	d00e      	beq.n	800aacc <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800aaae:	4b86      	ldr	r3, [pc, #536]	; (800acc8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800aab0:	691b      	ldr	r3, [r3, #16]
 800aab2:	4a85      	ldr	r2, [pc, #532]	; (800acc8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800aab4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800aab8:	6113      	str	r3, [r2, #16]
 800aaba:	4b83      	ldr	r3, [pc, #524]	; (800acc8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800aabc:	6919      	ldr	r1, [r3, #16]
 800aabe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aac2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800aac6:	4a80      	ldr	r2, [pc, #512]	; (800acc8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800aac8:	430b      	orrs	r3, r1
 800aaca:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800aacc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aad4:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800aad8:	63bb      	str	r3, [r7, #56]	; 0x38
 800aada:	2300      	movs	r3, #0
 800aadc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aade:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800aae2:	460b      	mov	r3, r1
 800aae4:	4313      	orrs	r3, r2
 800aae6:	d009      	beq.n	800aafc <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800aae8:	4b77      	ldr	r3, [pc, #476]	; (800acc8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800aaea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aaec:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800aaf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aaf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aaf6:	4a74      	ldr	r2, [pc, #464]	; (800acc8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800aaf8:	430b      	orrs	r3, r1
 800aafa:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800aafc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab04:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800ab08:	633b      	str	r3, [r7, #48]	; 0x30
 800ab0a:	2300      	movs	r3, #0
 800ab0c:	637b      	str	r3, [r7, #52]	; 0x34
 800ab0e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800ab12:	460b      	mov	r3, r1
 800ab14:	4313      	orrs	r3, r2
 800ab16:	d00a      	beq.n	800ab2e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800ab18:	4b6b      	ldr	r3, [pc, #428]	; (800acc8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ab1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab1c:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800ab20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ab28:	4a67      	ldr	r2, [pc, #412]	; (800acc8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ab2a:	430b      	orrs	r3, r1
 800ab2c:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800ab2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab36:	2100      	movs	r1, #0
 800ab38:	62b9      	str	r1, [r7, #40]	; 0x28
 800ab3a:	f003 0301 	and.w	r3, r3, #1
 800ab3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ab40:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800ab44:	460b      	mov	r3, r1
 800ab46:	4313      	orrs	r3, r2
 800ab48:	d011      	beq.n	800ab6e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ab4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab4e:	3308      	adds	r3, #8
 800ab50:	2100      	movs	r1, #0
 800ab52:	4618      	mov	r0, r3
 800ab54:	f001 fa4a 	bl	800bfec <RCCEx_PLL2_Config>
 800ab58:	4603      	mov	r3, r0
 800ab5a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800ab5e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d003      	beq.n	800ab6e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab66:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ab6a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800ab6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab76:	2100      	movs	r1, #0
 800ab78:	6239      	str	r1, [r7, #32]
 800ab7a:	f003 0302 	and.w	r3, r3, #2
 800ab7e:	627b      	str	r3, [r7, #36]	; 0x24
 800ab80:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800ab84:	460b      	mov	r3, r1
 800ab86:	4313      	orrs	r3, r2
 800ab88:	d011      	beq.n	800abae <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ab8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab8e:	3308      	adds	r3, #8
 800ab90:	2101      	movs	r1, #1
 800ab92:	4618      	mov	r0, r3
 800ab94:	f001 fa2a 	bl	800bfec <RCCEx_PLL2_Config>
 800ab98:	4603      	mov	r3, r0
 800ab9a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800ab9e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d003      	beq.n	800abae <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aba6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800abaa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800abae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800abb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abb6:	2100      	movs	r1, #0
 800abb8:	61b9      	str	r1, [r7, #24]
 800abba:	f003 0304 	and.w	r3, r3, #4
 800abbe:	61fb      	str	r3, [r7, #28]
 800abc0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800abc4:	460b      	mov	r3, r1
 800abc6:	4313      	orrs	r3, r2
 800abc8:	d011      	beq.n	800abee <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800abca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800abce:	3308      	adds	r3, #8
 800abd0:	2102      	movs	r1, #2
 800abd2:	4618      	mov	r0, r3
 800abd4:	f001 fa0a 	bl	800bfec <RCCEx_PLL2_Config>
 800abd8:	4603      	mov	r3, r0
 800abda:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800abde:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d003      	beq.n	800abee <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800abe6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800abea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800abee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800abf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abf6:	2100      	movs	r1, #0
 800abf8:	6139      	str	r1, [r7, #16]
 800abfa:	f003 0308 	and.w	r3, r3, #8
 800abfe:	617b      	str	r3, [r7, #20]
 800ac00:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800ac04:	460b      	mov	r3, r1
 800ac06:	4313      	orrs	r3, r2
 800ac08:	d011      	beq.n	800ac2e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ac0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac0e:	3328      	adds	r3, #40	; 0x28
 800ac10:	2100      	movs	r1, #0
 800ac12:	4618      	mov	r0, r3
 800ac14:	f001 fa9c 	bl	800c150 <RCCEx_PLL3_Config>
 800ac18:	4603      	mov	r3, r0
 800ac1a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800ac1e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d003      	beq.n	800ac2e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac26:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ac2a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800ac2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac36:	2100      	movs	r1, #0
 800ac38:	60b9      	str	r1, [r7, #8]
 800ac3a:	f003 0310 	and.w	r3, r3, #16
 800ac3e:	60fb      	str	r3, [r7, #12]
 800ac40:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800ac44:	460b      	mov	r3, r1
 800ac46:	4313      	orrs	r3, r2
 800ac48:	d011      	beq.n	800ac6e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ac4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac4e:	3328      	adds	r3, #40	; 0x28
 800ac50:	2101      	movs	r1, #1
 800ac52:	4618      	mov	r0, r3
 800ac54:	f001 fa7c 	bl	800c150 <RCCEx_PLL3_Config>
 800ac58:	4603      	mov	r3, r0
 800ac5a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800ac5e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d003      	beq.n	800ac6e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac66:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ac6a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800ac6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac76:	2100      	movs	r1, #0
 800ac78:	6039      	str	r1, [r7, #0]
 800ac7a:	f003 0320 	and.w	r3, r3, #32
 800ac7e:	607b      	str	r3, [r7, #4]
 800ac80:	e9d7 1200 	ldrd	r1, r2, [r7]
 800ac84:	460b      	mov	r3, r1
 800ac86:	4313      	orrs	r3, r2
 800ac88:	d011      	beq.n	800acae <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ac8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac8e:	3328      	adds	r3, #40	; 0x28
 800ac90:	2102      	movs	r1, #2
 800ac92:	4618      	mov	r0, r3
 800ac94:	f001 fa5c 	bl	800c150 <RCCEx_PLL3_Config>
 800ac98:	4603      	mov	r3, r0
 800ac9a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800ac9e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d003      	beq.n	800acae <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aca6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800acaa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800acae:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d101      	bne.n	800acba <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800acb6:	2300      	movs	r3, #0
 800acb8:	e000      	b.n	800acbc <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800acba:	2301      	movs	r3, #1
}
 800acbc:	4618      	mov	r0, r3
 800acbe:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800acc2:	46bd      	mov	sp, r7
 800acc4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800acc8:	58024400 	.word	0x58024400

0800accc <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800accc:	b580      	push	{r7, lr}
 800acce:	b090      	sub	sp, #64	; 0x40
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800acd6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800acda:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800acde:	430b      	orrs	r3, r1
 800ace0:	f040 8094 	bne.w	800ae0c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800ace4:	4b9e      	ldr	r3, [pc, #632]	; (800af60 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ace6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ace8:	f003 0307 	and.w	r3, r3, #7
 800acec:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800acee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acf0:	2b04      	cmp	r3, #4
 800acf2:	f200 8087 	bhi.w	800ae04 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800acf6:	a201      	add	r2, pc, #4	; (adr r2, 800acfc <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800acf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acfc:	0800ad11 	.word	0x0800ad11
 800ad00:	0800ad39 	.word	0x0800ad39
 800ad04:	0800ad61 	.word	0x0800ad61
 800ad08:	0800adfd 	.word	0x0800adfd
 800ad0c:	0800ad89 	.word	0x0800ad89
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ad10:	4b93      	ldr	r3, [pc, #588]	; (800af60 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ad18:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ad1c:	d108      	bne.n	800ad30 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ad1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ad22:	4618      	mov	r0, r3
 800ad24:	f001 f810 	bl	800bd48 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ad28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ad2c:	f000 bd45 	b.w	800b7ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ad30:	2300      	movs	r3, #0
 800ad32:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ad34:	f000 bd41 	b.w	800b7ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ad38:	4b89      	ldr	r3, [pc, #548]	; (800af60 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ad40:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ad44:	d108      	bne.n	800ad58 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ad46:	f107 0318 	add.w	r3, r7, #24
 800ad4a:	4618      	mov	r0, r3
 800ad4c:	f000 fd54 	bl	800b7f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ad50:	69bb      	ldr	r3, [r7, #24]
 800ad52:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ad54:	f000 bd31 	b.w	800b7ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ad58:	2300      	movs	r3, #0
 800ad5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ad5c:	f000 bd2d 	b.w	800b7ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ad60:	4b7f      	ldr	r3, [pc, #508]	; (800af60 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ad68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ad6c:	d108      	bne.n	800ad80 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ad6e:	f107 030c 	add.w	r3, r7, #12
 800ad72:	4618      	mov	r0, r3
 800ad74:	f000 fe94 	bl	800baa0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ad7c:	f000 bd1d 	b.w	800b7ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ad80:	2300      	movs	r3, #0
 800ad82:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ad84:	f000 bd19 	b.w	800b7ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ad88:	4b75      	ldr	r3, [pc, #468]	; (800af60 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ad8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ad8c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ad90:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ad92:	4b73      	ldr	r3, [pc, #460]	; (800af60 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	f003 0304 	and.w	r3, r3, #4
 800ad9a:	2b04      	cmp	r3, #4
 800ad9c:	d10c      	bne.n	800adb8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800ad9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d109      	bne.n	800adb8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ada4:	4b6e      	ldr	r3, [pc, #440]	; (800af60 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	08db      	lsrs	r3, r3, #3
 800adaa:	f003 0303 	and.w	r3, r3, #3
 800adae:	4a6d      	ldr	r2, [pc, #436]	; (800af64 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800adb0:	fa22 f303 	lsr.w	r3, r2, r3
 800adb4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800adb6:	e01f      	b.n	800adf8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800adb8:	4b69      	ldr	r3, [pc, #420]	; (800af60 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800adc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800adc4:	d106      	bne.n	800add4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800adc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800adc8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800adcc:	d102      	bne.n	800add4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800adce:	4b66      	ldr	r3, [pc, #408]	; (800af68 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800add0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800add2:	e011      	b.n	800adf8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800add4:	4b62      	ldr	r3, [pc, #392]	; (800af60 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800addc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ade0:	d106      	bne.n	800adf0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800ade2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ade4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ade8:	d102      	bne.n	800adf0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800adea:	4b60      	ldr	r3, [pc, #384]	; (800af6c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800adec:	63fb      	str	r3, [r7, #60]	; 0x3c
 800adee:	e003      	b.n	800adf8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800adf0:	2300      	movs	r3, #0
 800adf2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800adf4:	f000 bce1 	b.w	800b7ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800adf8:	f000 bcdf 	b.w	800b7ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800adfc:	4b5c      	ldr	r3, [pc, #368]	; (800af70 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800adfe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae00:	f000 bcdb 	b.w	800b7ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800ae04:	2300      	movs	r3, #0
 800ae06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae08:	f000 bcd7 	b.w	800b7ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800ae0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ae10:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800ae14:	430b      	orrs	r3, r1
 800ae16:	f040 80ad 	bne.w	800af74 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800ae1a:	4b51      	ldr	r3, [pc, #324]	; (800af60 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ae1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae1e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800ae22:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800ae24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ae2a:	d056      	beq.n	800aeda <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800ae2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ae32:	f200 8090 	bhi.w	800af56 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800ae36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae38:	2bc0      	cmp	r3, #192	; 0xc0
 800ae3a:	f000 8088 	beq.w	800af4e <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800ae3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae40:	2bc0      	cmp	r3, #192	; 0xc0
 800ae42:	f200 8088 	bhi.w	800af56 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800ae46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae48:	2b80      	cmp	r3, #128	; 0x80
 800ae4a:	d032      	beq.n	800aeb2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800ae4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae4e:	2b80      	cmp	r3, #128	; 0x80
 800ae50:	f200 8081 	bhi.w	800af56 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800ae54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d003      	beq.n	800ae62 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800ae5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae5c:	2b40      	cmp	r3, #64	; 0x40
 800ae5e:	d014      	beq.n	800ae8a <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800ae60:	e079      	b.n	800af56 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ae62:	4b3f      	ldr	r3, [pc, #252]	; (800af60 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ae6a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ae6e:	d108      	bne.n	800ae82 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ae70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ae74:	4618      	mov	r0, r3
 800ae76:	f000 ff67 	bl	800bd48 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ae7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae7e:	f000 bc9c 	b.w	800b7ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ae82:	2300      	movs	r3, #0
 800ae84:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae86:	f000 bc98 	b.w	800b7ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ae8a:	4b35      	ldr	r3, [pc, #212]	; (800af60 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ae92:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ae96:	d108      	bne.n	800aeaa <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ae98:	f107 0318 	add.w	r3, r7, #24
 800ae9c:	4618      	mov	r0, r3
 800ae9e:	f000 fcab 	bl	800b7f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800aea2:	69bb      	ldr	r3, [r7, #24]
 800aea4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aea6:	f000 bc88 	b.w	800b7ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aeaa:	2300      	movs	r3, #0
 800aeac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aeae:	f000 bc84 	b.w	800b7ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800aeb2:	4b2b      	ldr	r3, [pc, #172]	; (800af60 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800aeba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aebe:	d108      	bne.n	800aed2 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aec0:	f107 030c 	add.w	r3, r7, #12
 800aec4:	4618      	mov	r0, r3
 800aec6:	f000 fdeb 	bl	800baa0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aece:	f000 bc74 	b.w	800b7ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aed2:	2300      	movs	r3, #0
 800aed4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aed6:	f000 bc70 	b.w	800b7ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800aeda:	4b21      	ldr	r3, [pc, #132]	; (800af60 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800aedc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aede:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800aee2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800aee4:	4b1e      	ldr	r3, [pc, #120]	; (800af60 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	f003 0304 	and.w	r3, r3, #4
 800aeec:	2b04      	cmp	r3, #4
 800aeee:	d10c      	bne.n	800af0a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800aef0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d109      	bne.n	800af0a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aef6:	4b1a      	ldr	r3, [pc, #104]	; (800af60 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	08db      	lsrs	r3, r3, #3
 800aefc:	f003 0303 	and.w	r3, r3, #3
 800af00:	4a18      	ldr	r2, [pc, #96]	; (800af64 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800af02:	fa22 f303 	lsr.w	r3, r2, r3
 800af06:	63fb      	str	r3, [r7, #60]	; 0x3c
 800af08:	e01f      	b.n	800af4a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800af0a:	4b15      	ldr	r3, [pc, #84]	; (800af60 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800af16:	d106      	bne.n	800af26 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800af18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af1a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800af1e:	d102      	bne.n	800af26 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800af20:	4b11      	ldr	r3, [pc, #68]	; (800af68 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800af22:	63fb      	str	r3, [r7, #60]	; 0x3c
 800af24:	e011      	b.n	800af4a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800af26:	4b0e      	ldr	r3, [pc, #56]	; (800af60 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800af2e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800af32:	d106      	bne.n	800af42 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800af34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af36:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800af3a:	d102      	bne.n	800af42 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800af3c:	4b0b      	ldr	r3, [pc, #44]	; (800af6c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800af3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800af40:	e003      	b.n	800af4a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800af42:	2300      	movs	r3, #0
 800af44:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800af46:	f000 bc38 	b.w	800b7ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800af4a:	f000 bc36 	b.w	800b7ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800af4e:	4b08      	ldr	r3, [pc, #32]	; (800af70 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800af50:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800af52:	f000 bc32 	b.w	800b7ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800af56:	2300      	movs	r3, #0
 800af58:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800af5a:	f000 bc2e 	b.w	800b7ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800af5e:	bf00      	nop
 800af60:	58024400 	.word	0x58024400
 800af64:	03d09000 	.word	0x03d09000
 800af68:	003d0900 	.word	0x003d0900
 800af6c:	007a1200 	.word	0x007a1200
 800af70:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800af74:	e9d7 2300 	ldrd	r2, r3, [r7]
 800af78:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800af7c:	430b      	orrs	r3, r1
 800af7e:	f040 809c 	bne.w	800b0ba <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800af82:	4b9e      	ldr	r3, [pc, #632]	; (800b1fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800af84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af86:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800af8a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800af8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af8e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800af92:	d054      	beq.n	800b03e <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800af94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af96:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800af9a:	f200 808b 	bhi.w	800b0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800af9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afa0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800afa4:	f000 8083 	beq.w	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800afa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afaa:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800afae:	f200 8081 	bhi.w	800b0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800afb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afb4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800afb8:	d02f      	beq.n	800b01a <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800afba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afbc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800afc0:	d878      	bhi.n	800b0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800afc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d004      	beq.n	800afd2 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800afc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800afce:	d012      	beq.n	800aff6 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800afd0:	e070      	b.n	800b0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800afd2:	4b8a      	ldr	r3, [pc, #552]	; (800b1fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800afda:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800afde:	d107      	bne.n	800aff0 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800afe0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800afe4:	4618      	mov	r0, r3
 800afe6:	f000 feaf 	bl	800bd48 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800afea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800afee:	e3e4      	b.n	800b7ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aff0:	2300      	movs	r3, #0
 800aff2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aff4:	e3e1      	b.n	800b7ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aff6:	4b81      	ldr	r3, [pc, #516]	; (800b1fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800affe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b002:	d107      	bne.n	800b014 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b004:	f107 0318 	add.w	r3, r7, #24
 800b008:	4618      	mov	r0, r3
 800b00a:	f000 fbf5 	bl	800b7f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b00e:	69bb      	ldr	r3, [r7, #24]
 800b010:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b012:	e3d2      	b.n	800b7ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b014:	2300      	movs	r3, #0
 800b016:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b018:	e3cf      	b.n	800b7ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b01a:	4b78      	ldr	r3, [pc, #480]	; (800b1fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b022:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b026:	d107      	bne.n	800b038 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b028:	f107 030c 	add.w	r3, r7, #12
 800b02c:	4618      	mov	r0, r3
 800b02e:	f000 fd37 	bl	800baa0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b036:	e3c0      	b.n	800b7ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b038:	2300      	movs	r3, #0
 800b03a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b03c:	e3bd      	b.n	800b7ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b03e:	4b6f      	ldr	r3, [pc, #444]	; (800b1fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b040:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b042:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b046:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b048:	4b6c      	ldr	r3, [pc, #432]	; (800b1fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	f003 0304 	and.w	r3, r3, #4
 800b050:	2b04      	cmp	r3, #4
 800b052:	d10c      	bne.n	800b06e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800b054:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b056:	2b00      	cmp	r3, #0
 800b058:	d109      	bne.n	800b06e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b05a:	4b68      	ldr	r3, [pc, #416]	; (800b1fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	08db      	lsrs	r3, r3, #3
 800b060:	f003 0303 	and.w	r3, r3, #3
 800b064:	4a66      	ldr	r2, [pc, #408]	; (800b200 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800b066:	fa22 f303 	lsr.w	r3, r2, r3
 800b06a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b06c:	e01e      	b.n	800b0ac <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b06e:	4b63      	ldr	r3, [pc, #396]	; (800b1fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b076:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b07a:	d106      	bne.n	800b08a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800b07c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b07e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b082:	d102      	bne.n	800b08a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b084:	4b5f      	ldr	r3, [pc, #380]	; (800b204 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800b086:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b088:	e010      	b.n	800b0ac <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b08a:	4b5c      	ldr	r3, [pc, #368]	; (800b1fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b092:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b096:	d106      	bne.n	800b0a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800b098:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b09a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b09e:	d102      	bne.n	800b0a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b0a0:	4b59      	ldr	r3, [pc, #356]	; (800b208 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800b0a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b0a4:	e002      	b.n	800b0ac <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b0a6:	2300      	movs	r3, #0
 800b0a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b0aa:	e386      	b.n	800b7ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b0ac:	e385      	b.n	800b7ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b0ae:	4b57      	ldr	r3, [pc, #348]	; (800b20c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800b0b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b0b2:	e382      	b.n	800b7ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800b0b4:	2300      	movs	r3, #0
 800b0b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b0b8:	e37f      	b.n	800b7ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800b0ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b0be:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800b0c2:	430b      	orrs	r3, r1
 800b0c4:	f040 80a7 	bne.w	800b216 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800b0c8:	4b4c      	ldr	r3, [pc, #304]	; (800b1fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b0ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b0cc:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800b0d0:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800b0d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0d4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b0d8:	d055      	beq.n	800b186 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800b0da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0dc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b0e0:	f200 8096 	bhi.w	800b210 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800b0e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0e6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b0ea:	f000 8084 	beq.w	800b1f6 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800b0ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0f0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b0f4:	f200 808c 	bhi.w	800b210 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800b0f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0fa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b0fe:	d030      	beq.n	800b162 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800b100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b102:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b106:	f200 8083 	bhi.w	800b210 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800b10a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d004      	beq.n	800b11a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800b110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b112:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b116:	d012      	beq.n	800b13e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800b118:	e07a      	b.n	800b210 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b11a:	4b38      	ldr	r3, [pc, #224]	; (800b1fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b122:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b126:	d107      	bne.n	800b138 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b128:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b12c:	4618      	mov	r0, r3
 800b12e:	f000 fe0b 	bl	800bd48 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b134:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b136:	e340      	b.n	800b7ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b138:	2300      	movs	r3, #0
 800b13a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b13c:	e33d      	b.n	800b7ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b13e:	4b2f      	ldr	r3, [pc, #188]	; (800b1fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b146:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b14a:	d107      	bne.n	800b15c <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b14c:	f107 0318 	add.w	r3, r7, #24
 800b150:	4618      	mov	r0, r3
 800b152:	f000 fb51 	bl	800b7f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b156:	69bb      	ldr	r3, [r7, #24]
 800b158:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b15a:	e32e      	b.n	800b7ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b15c:	2300      	movs	r3, #0
 800b15e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b160:	e32b      	b.n	800b7ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b162:	4b26      	ldr	r3, [pc, #152]	; (800b1fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b16a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b16e:	d107      	bne.n	800b180 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b170:	f107 030c 	add.w	r3, r7, #12
 800b174:	4618      	mov	r0, r3
 800b176:	f000 fc93 	bl	800baa0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b17e:	e31c      	b.n	800b7ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b180:	2300      	movs	r3, #0
 800b182:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b184:	e319      	b.n	800b7ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b186:	4b1d      	ldr	r3, [pc, #116]	; (800b1fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b188:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b18a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b18e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b190:	4b1a      	ldr	r3, [pc, #104]	; (800b1fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	f003 0304 	and.w	r3, r3, #4
 800b198:	2b04      	cmp	r3, #4
 800b19a:	d10c      	bne.n	800b1b6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800b19c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d109      	bne.n	800b1b6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b1a2:	4b16      	ldr	r3, [pc, #88]	; (800b1fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	08db      	lsrs	r3, r3, #3
 800b1a8:	f003 0303 	and.w	r3, r3, #3
 800b1ac:	4a14      	ldr	r2, [pc, #80]	; (800b200 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800b1ae:	fa22 f303 	lsr.w	r3, r2, r3
 800b1b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b1b4:	e01e      	b.n	800b1f4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b1b6:	4b11      	ldr	r3, [pc, #68]	; (800b1fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b1be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b1c2:	d106      	bne.n	800b1d2 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800b1c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b1ca:	d102      	bne.n	800b1d2 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b1cc:	4b0d      	ldr	r3, [pc, #52]	; (800b204 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800b1ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b1d0:	e010      	b.n	800b1f4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b1d2:	4b0a      	ldr	r3, [pc, #40]	; (800b1fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b1da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b1de:	d106      	bne.n	800b1ee <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800b1e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b1e6:	d102      	bne.n	800b1ee <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b1e8:	4b07      	ldr	r3, [pc, #28]	; (800b208 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800b1ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b1ec:	e002      	b.n	800b1f4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b1ee:	2300      	movs	r3, #0
 800b1f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b1f2:	e2e2      	b.n	800b7ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b1f4:	e2e1      	b.n	800b7ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b1f6:	4b05      	ldr	r3, [pc, #20]	; (800b20c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800b1f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b1fa:	e2de      	b.n	800b7ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b1fc:	58024400 	.word	0x58024400
 800b200:	03d09000 	.word	0x03d09000
 800b204:	003d0900 	.word	0x003d0900
 800b208:	007a1200 	.word	0x007a1200
 800b20c:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800b210:	2300      	movs	r3, #0
 800b212:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b214:	e2d1      	b.n	800b7ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800b216:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b21a:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800b21e:	430b      	orrs	r3, r1
 800b220:	f040 809c 	bne.w	800b35c <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800b224:	4b93      	ldr	r3, [pc, #588]	; (800b474 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b226:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b228:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800b22c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b22e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b230:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b234:	d054      	beq.n	800b2e0 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800b236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b238:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b23c:	f200 808b 	bhi.w	800b356 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800b240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b242:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b246:	f000 8083 	beq.w	800b350 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800b24a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b24c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b250:	f200 8081 	bhi.w	800b356 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800b254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b256:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b25a:	d02f      	beq.n	800b2bc <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800b25c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b25e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b262:	d878      	bhi.n	800b356 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800b264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b266:	2b00      	cmp	r3, #0
 800b268:	d004      	beq.n	800b274 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800b26a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b26c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b270:	d012      	beq.n	800b298 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800b272:	e070      	b.n	800b356 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b274:	4b7f      	ldr	r3, [pc, #508]	; (800b474 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b27c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b280:	d107      	bne.n	800b292 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b282:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b286:	4618      	mov	r0, r3
 800b288:	f000 fd5e 	bl	800bd48 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b28c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b28e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b290:	e293      	b.n	800b7ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b292:	2300      	movs	r3, #0
 800b294:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b296:	e290      	b.n	800b7ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b298:	4b76      	ldr	r3, [pc, #472]	; (800b474 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b2a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b2a4:	d107      	bne.n	800b2b6 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b2a6:	f107 0318 	add.w	r3, r7, #24
 800b2aa:	4618      	mov	r0, r3
 800b2ac:	f000 faa4 	bl	800b7f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b2b0:	69bb      	ldr	r3, [r7, #24]
 800b2b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b2b4:	e281      	b.n	800b7ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b2b6:	2300      	movs	r3, #0
 800b2b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b2ba:	e27e      	b.n	800b7ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b2bc:	4b6d      	ldr	r3, [pc, #436]	; (800b474 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b2c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b2c8:	d107      	bne.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b2ca:	f107 030c 	add.w	r3, r7, #12
 800b2ce:	4618      	mov	r0, r3
 800b2d0:	f000 fbe6 	bl	800baa0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b2d8:	e26f      	b.n	800b7ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b2da:	2300      	movs	r3, #0
 800b2dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b2de:	e26c      	b.n	800b7ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b2e0:	4b64      	ldr	r3, [pc, #400]	; (800b474 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b2e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b2e4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b2e8:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b2ea:	4b62      	ldr	r3, [pc, #392]	; (800b474 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	f003 0304 	and.w	r3, r3, #4
 800b2f2:	2b04      	cmp	r3, #4
 800b2f4:	d10c      	bne.n	800b310 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800b2f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d109      	bne.n	800b310 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b2fc:	4b5d      	ldr	r3, [pc, #372]	; (800b474 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	08db      	lsrs	r3, r3, #3
 800b302:	f003 0303 	and.w	r3, r3, #3
 800b306:	4a5c      	ldr	r2, [pc, #368]	; (800b478 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800b308:	fa22 f303 	lsr.w	r3, r2, r3
 800b30c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b30e:	e01e      	b.n	800b34e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b310:	4b58      	ldr	r3, [pc, #352]	; (800b474 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b318:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b31c:	d106      	bne.n	800b32c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800b31e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b320:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b324:	d102      	bne.n	800b32c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b326:	4b55      	ldr	r3, [pc, #340]	; (800b47c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800b328:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b32a:	e010      	b.n	800b34e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b32c:	4b51      	ldr	r3, [pc, #324]	; (800b474 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b334:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b338:	d106      	bne.n	800b348 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800b33a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b33c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b340:	d102      	bne.n	800b348 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b342:	4b4f      	ldr	r3, [pc, #316]	; (800b480 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800b344:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b346:	e002      	b.n	800b34e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b348:	2300      	movs	r3, #0
 800b34a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b34c:	e235      	b.n	800b7ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b34e:	e234      	b.n	800b7ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b350:	4b4c      	ldr	r3, [pc, #304]	; (800b484 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800b352:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b354:	e231      	b.n	800b7ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b356:	2300      	movs	r3, #0
 800b358:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b35a:	e22e      	b.n	800b7ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800b35c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b360:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800b364:	430b      	orrs	r3, r1
 800b366:	f040 808f 	bne.w	800b488 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800b36a:	4b42      	ldr	r3, [pc, #264]	; (800b474 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b36c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b36e:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800b372:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800b374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b376:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b37a:	d06b      	beq.n	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800b37c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b37e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b382:	d874      	bhi.n	800b46e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b386:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b38a:	d056      	beq.n	800b43a <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800b38c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b38e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b392:	d86c      	bhi.n	800b46e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b396:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b39a:	d03b      	beq.n	800b414 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800b39c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b39e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b3a2:	d864      	bhi.n	800b46e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b3a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b3aa:	d021      	beq.n	800b3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800b3ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3ae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b3b2:	d85c      	bhi.n	800b46e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b3b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d004      	beq.n	800b3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800b3ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b3c0:	d004      	beq.n	800b3cc <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800b3c2:	e054      	b.n	800b46e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800b3c4:	f7fe fa0a 	bl	80097dc <HAL_RCC_GetPCLK1Freq>
 800b3c8:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b3ca:	e1f6      	b.n	800b7ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b3cc:	4b29      	ldr	r3, [pc, #164]	; (800b474 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b3d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b3d8:	d107      	bne.n	800b3ea <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b3da:	f107 0318 	add.w	r3, r7, #24
 800b3de:	4618      	mov	r0, r3
 800b3e0:	f000 fa0a 	bl	800b7f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b3e4:	69fb      	ldr	r3, [r7, #28]
 800b3e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b3e8:	e1e7      	b.n	800b7ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b3ea:	2300      	movs	r3, #0
 800b3ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b3ee:	e1e4      	b.n	800b7ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b3f0:	4b20      	ldr	r3, [pc, #128]	; (800b474 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b3f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b3fc:	d107      	bne.n	800b40e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b3fe:	f107 030c 	add.w	r3, r7, #12
 800b402:	4618      	mov	r0, r3
 800b404:	f000 fb4c 	bl	800baa0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b408:	693b      	ldr	r3, [r7, #16]
 800b40a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b40c:	e1d5      	b.n	800b7ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b40e:	2300      	movs	r3, #0
 800b410:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b412:	e1d2      	b.n	800b7ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b414:	4b17      	ldr	r3, [pc, #92]	; (800b474 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	f003 0304 	and.w	r3, r3, #4
 800b41c:	2b04      	cmp	r3, #4
 800b41e:	d109      	bne.n	800b434 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b420:	4b14      	ldr	r3, [pc, #80]	; (800b474 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	08db      	lsrs	r3, r3, #3
 800b426:	f003 0303 	and.w	r3, r3, #3
 800b42a:	4a13      	ldr	r2, [pc, #76]	; (800b478 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800b42c:	fa22 f303 	lsr.w	r3, r2, r3
 800b430:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b432:	e1c2      	b.n	800b7ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b434:	2300      	movs	r3, #0
 800b436:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b438:	e1bf      	b.n	800b7ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b43a:	4b0e      	ldr	r3, [pc, #56]	; (800b474 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b442:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b446:	d102      	bne.n	800b44e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800b448:	4b0c      	ldr	r3, [pc, #48]	; (800b47c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800b44a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b44c:	e1b5      	b.n	800b7ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b44e:	2300      	movs	r3, #0
 800b450:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b452:	e1b2      	b.n	800b7ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b454:	4b07      	ldr	r3, [pc, #28]	; (800b474 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b45c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b460:	d102      	bne.n	800b468 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800b462:	4b07      	ldr	r3, [pc, #28]	; (800b480 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800b464:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b466:	e1a8      	b.n	800b7ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b468:	2300      	movs	r3, #0
 800b46a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b46c:	e1a5      	b.n	800b7ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b46e:	2300      	movs	r3, #0
 800b470:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b472:	e1a2      	b.n	800b7ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b474:	58024400 	.word	0x58024400
 800b478:	03d09000 	.word	0x03d09000
 800b47c:	003d0900 	.word	0x003d0900
 800b480:	007a1200 	.word	0x007a1200
 800b484:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800b488:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b48c:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800b490:	430b      	orrs	r3, r1
 800b492:	d173      	bne.n	800b57c <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800b494:	4b9c      	ldr	r3, [pc, #624]	; (800b708 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b496:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b498:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b49c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b49e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b4a4:	d02f      	beq.n	800b506 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800b4a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b4ac:	d863      	bhi.n	800b576 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800b4ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d004      	beq.n	800b4be <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800b4b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b4ba:	d012      	beq.n	800b4e2 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800b4bc:	e05b      	b.n	800b576 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b4be:	4b92      	ldr	r3, [pc, #584]	; (800b708 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b4c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b4ca:	d107      	bne.n	800b4dc <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b4cc:	f107 0318 	add.w	r3, r7, #24
 800b4d0:	4618      	mov	r0, r3
 800b4d2:	f000 f991 	bl	800b7f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b4d6:	69bb      	ldr	r3, [r7, #24]
 800b4d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b4da:	e16e      	b.n	800b7ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b4dc:	2300      	movs	r3, #0
 800b4de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b4e0:	e16b      	b.n	800b7ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b4e2:	4b89      	ldr	r3, [pc, #548]	; (800b708 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b4ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b4ee:	d107      	bne.n	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b4f0:	f107 030c 	add.w	r3, r7, #12
 800b4f4:	4618      	mov	r0, r3
 800b4f6:	f000 fad3 	bl	800baa0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800b4fa:	697b      	ldr	r3, [r7, #20]
 800b4fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b4fe:	e15c      	b.n	800b7ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b500:	2300      	movs	r3, #0
 800b502:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b504:	e159      	b.n	800b7ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b506:	4b80      	ldr	r3, [pc, #512]	; (800b708 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b50a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b50e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b510:	4b7d      	ldr	r3, [pc, #500]	; (800b708 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	f003 0304 	and.w	r3, r3, #4
 800b518:	2b04      	cmp	r3, #4
 800b51a:	d10c      	bne.n	800b536 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800b51c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d109      	bne.n	800b536 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b522:	4b79      	ldr	r3, [pc, #484]	; (800b708 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	08db      	lsrs	r3, r3, #3
 800b528:	f003 0303 	and.w	r3, r3, #3
 800b52c:	4a77      	ldr	r2, [pc, #476]	; (800b70c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800b52e:	fa22 f303 	lsr.w	r3, r2, r3
 800b532:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b534:	e01e      	b.n	800b574 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b536:	4b74      	ldr	r3, [pc, #464]	; (800b708 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b53e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b542:	d106      	bne.n	800b552 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800b544:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b546:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b54a:	d102      	bne.n	800b552 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b54c:	4b70      	ldr	r3, [pc, #448]	; (800b710 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800b54e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b550:	e010      	b.n	800b574 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b552:	4b6d      	ldr	r3, [pc, #436]	; (800b708 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b55a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b55e:	d106      	bne.n	800b56e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800b560:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b562:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b566:	d102      	bne.n	800b56e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b568:	4b6a      	ldr	r3, [pc, #424]	; (800b714 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800b56a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b56c:	e002      	b.n	800b574 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b56e:	2300      	movs	r3, #0
 800b570:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b572:	e122      	b.n	800b7ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b574:	e121      	b.n	800b7ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800b576:	2300      	movs	r3, #0
 800b578:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b57a:	e11e      	b.n	800b7ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800b57c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b580:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800b584:	430b      	orrs	r3, r1
 800b586:	d133      	bne.n	800b5f0 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800b588:	4b5f      	ldr	r3, [pc, #380]	; (800b708 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b58a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b58c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b590:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b594:	2b00      	cmp	r3, #0
 800b596:	d004      	beq.n	800b5a2 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800b598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b59a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b59e:	d012      	beq.n	800b5c6 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800b5a0:	e023      	b.n	800b5ea <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b5a2:	4b59      	ldr	r3, [pc, #356]	; (800b708 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b5aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b5ae:	d107      	bne.n	800b5c0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b5b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b5b4:	4618      	mov	r0, r3
 800b5b6:	f000 fbc7 	bl	800bd48 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b5ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b5be:	e0fc      	b.n	800b7ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b5c0:	2300      	movs	r3, #0
 800b5c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b5c4:	e0f9      	b.n	800b7ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b5c6:	4b50      	ldr	r3, [pc, #320]	; (800b708 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b5ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b5d2:	d107      	bne.n	800b5e4 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b5d4:	f107 0318 	add.w	r3, r7, #24
 800b5d8:	4618      	mov	r0, r3
 800b5da:	f000 f90d 	bl	800b7f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800b5de:	6a3b      	ldr	r3, [r7, #32]
 800b5e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b5e2:	e0ea      	b.n	800b7ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b5e4:	2300      	movs	r3, #0
 800b5e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b5e8:	e0e7      	b.n	800b7ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800b5ea:	2300      	movs	r3, #0
 800b5ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b5ee:	e0e4      	b.n	800b7ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800b5f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b5f4:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800b5f8:	430b      	orrs	r3, r1
 800b5fa:	f040 808d 	bne.w	800b718 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800b5fe:	4b42      	ldr	r3, [pc, #264]	; (800b708 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b600:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b602:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800b606:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b60a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b60e:	d06b      	beq.n	800b6e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800b610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b612:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b616:	d874      	bhi.n	800b702 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b61a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b61e:	d056      	beq.n	800b6ce <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800b620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b622:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b626:	d86c      	bhi.n	800b702 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b62a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b62e:	d03b      	beq.n	800b6a8 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800b630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b632:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b636:	d864      	bhi.n	800b702 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b63a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b63e:	d021      	beq.n	800b684 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800b640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b642:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b646:	d85c      	bhi.n	800b702 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d004      	beq.n	800b658 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800b64e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b650:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b654:	d004      	beq.n	800b660 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800b656:	e054      	b.n	800b702 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800b658:	f000 f8b8 	bl	800b7cc <HAL_RCCEx_GetD3PCLK1Freq>
 800b65c:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b65e:	e0ac      	b.n	800b7ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b660:	4b29      	ldr	r3, [pc, #164]	; (800b708 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b668:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b66c:	d107      	bne.n	800b67e <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b66e:	f107 0318 	add.w	r3, r7, #24
 800b672:	4618      	mov	r0, r3
 800b674:	f000 f8c0 	bl	800b7f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b678:	69fb      	ldr	r3, [r7, #28]
 800b67a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b67c:	e09d      	b.n	800b7ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b67e:	2300      	movs	r3, #0
 800b680:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b682:	e09a      	b.n	800b7ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b684:	4b20      	ldr	r3, [pc, #128]	; (800b708 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b68c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b690:	d107      	bne.n	800b6a2 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b692:	f107 030c 	add.w	r3, r7, #12
 800b696:	4618      	mov	r0, r3
 800b698:	f000 fa02 	bl	800baa0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b69c:	693b      	ldr	r3, [r7, #16]
 800b69e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b6a0:	e08b      	b.n	800b7ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b6a2:	2300      	movs	r3, #0
 800b6a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b6a6:	e088      	b.n	800b7ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b6a8:	4b17      	ldr	r3, [pc, #92]	; (800b708 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	f003 0304 	and.w	r3, r3, #4
 800b6b0:	2b04      	cmp	r3, #4
 800b6b2:	d109      	bne.n	800b6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b6b4:	4b14      	ldr	r3, [pc, #80]	; (800b708 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	08db      	lsrs	r3, r3, #3
 800b6ba:	f003 0303 	and.w	r3, r3, #3
 800b6be:	4a13      	ldr	r2, [pc, #76]	; (800b70c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800b6c0:	fa22 f303 	lsr.w	r3, r2, r3
 800b6c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b6c6:	e078      	b.n	800b7ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b6c8:	2300      	movs	r3, #0
 800b6ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b6cc:	e075      	b.n	800b7ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b6ce:	4b0e      	ldr	r3, [pc, #56]	; (800b708 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b6d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b6da:	d102      	bne.n	800b6e2 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800b6dc:	4b0c      	ldr	r3, [pc, #48]	; (800b710 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800b6de:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b6e0:	e06b      	b.n	800b7ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b6e2:	2300      	movs	r3, #0
 800b6e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b6e6:	e068      	b.n	800b7ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b6e8:	4b07      	ldr	r3, [pc, #28]	; (800b708 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b6f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b6f4:	d102      	bne.n	800b6fc <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800b6f6:	4b07      	ldr	r3, [pc, #28]	; (800b714 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800b6f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b6fa:	e05e      	b.n	800b7ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b6fc:	2300      	movs	r3, #0
 800b6fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b700:	e05b      	b.n	800b7ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800b702:	2300      	movs	r3, #0
 800b704:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b706:	e058      	b.n	800b7ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b708:	58024400 	.word	0x58024400
 800b70c:	03d09000 	.word	0x03d09000
 800b710:	003d0900 	.word	0x003d0900
 800b714:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800b718:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b71c:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800b720:	430b      	orrs	r3, r1
 800b722:	d148      	bne.n	800b7b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800b724:	4b27      	ldr	r3, [pc, #156]	; (800b7c4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b726:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b728:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b72c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b72e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b730:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b734:	d02a      	beq.n	800b78c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800b736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b738:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b73c:	d838      	bhi.n	800b7b0 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800b73e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b740:	2b00      	cmp	r3, #0
 800b742:	d004      	beq.n	800b74e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800b744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b746:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b74a:	d00d      	beq.n	800b768 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800b74c:	e030      	b.n	800b7b0 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b74e:	4b1d      	ldr	r3, [pc, #116]	; (800b7c4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b756:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b75a:	d102      	bne.n	800b762 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800b75c:	4b1a      	ldr	r3, [pc, #104]	; (800b7c8 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800b75e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b760:	e02b      	b.n	800b7ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b762:	2300      	movs	r3, #0
 800b764:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b766:	e028      	b.n	800b7ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b768:	4b16      	ldr	r3, [pc, #88]	; (800b7c4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b770:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b774:	d107      	bne.n	800b786 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b776:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b77a:	4618      	mov	r0, r3
 800b77c:	f000 fae4 	bl	800bd48 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b782:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b784:	e019      	b.n	800b7ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b786:	2300      	movs	r3, #0
 800b788:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b78a:	e016      	b.n	800b7ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b78c:	4b0d      	ldr	r3, [pc, #52]	; (800b7c4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b794:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b798:	d107      	bne.n	800b7aa <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b79a:	f107 0318 	add.w	r3, r7, #24
 800b79e:	4618      	mov	r0, r3
 800b7a0:	f000 f82a 	bl	800b7f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b7a4:	69fb      	ldr	r3, [r7, #28]
 800b7a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b7a8:	e007      	b.n	800b7ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b7aa:	2300      	movs	r3, #0
 800b7ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b7ae:	e004      	b.n	800b7ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b7b0:	2300      	movs	r3, #0
 800b7b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b7b4:	e001      	b.n	800b7ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800b7b6:	2300      	movs	r3, #0
 800b7b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800b7ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b7bc:	4618      	mov	r0, r3
 800b7be:	3740      	adds	r7, #64	; 0x40
 800b7c0:	46bd      	mov	sp, r7
 800b7c2:	bd80      	pop	{r7, pc}
 800b7c4:	58024400 	.word	0x58024400
 800b7c8:	007a1200 	.word	0x007a1200

0800b7cc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800b7cc:	b580      	push	{r7, lr}
 800b7ce:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800b7d0:	f7fd ffd4 	bl	800977c <HAL_RCC_GetHCLKFreq>
 800b7d4:	4602      	mov	r2, r0
 800b7d6:	4b06      	ldr	r3, [pc, #24]	; (800b7f0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800b7d8:	6a1b      	ldr	r3, [r3, #32]
 800b7da:	091b      	lsrs	r3, r3, #4
 800b7dc:	f003 0307 	and.w	r3, r3, #7
 800b7e0:	4904      	ldr	r1, [pc, #16]	; (800b7f4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800b7e2:	5ccb      	ldrb	r3, [r1, r3]
 800b7e4:	f003 031f 	and.w	r3, r3, #31
 800b7e8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800b7ec:	4618      	mov	r0, r3
 800b7ee:	bd80      	pop	{r7, pc}
 800b7f0:	58024400 	.word	0x58024400
 800b7f4:	08017bb0 	.word	0x08017bb0

0800b7f8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800b7f8:	b480      	push	{r7}
 800b7fa:	b089      	sub	sp, #36	; 0x24
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b800:	4ba1      	ldr	r3, [pc, #644]	; (800ba88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b804:	f003 0303 	and.w	r3, r3, #3
 800b808:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800b80a:	4b9f      	ldr	r3, [pc, #636]	; (800ba88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b80c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b80e:	0b1b      	lsrs	r3, r3, #12
 800b810:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b814:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800b816:	4b9c      	ldr	r3, [pc, #624]	; (800ba88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b81a:	091b      	lsrs	r3, r3, #4
 800b81c:	f003 0301 	and.w	r3, r3, #1
 800b820:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800b822:	4b99      	ldr	r3, [pc, #612]	; (800ba88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b824:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b826:	08db      	lsrs	r3, r3, #3
 800b828:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b82c:	693a      	ldr	r2, [r7, #16]
 800b82e:	fb02 f303 	mul.w	r3, r2, r3
 800b832:	ee07 3a90 	vmov	s15, r3
 800b836:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b83a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800b83e:	697b      	ldr	r3, [r7, #20]
 800b840:	2b00      	cmp	r3, #0
 800b842:	f000 8111 	beq.w	800ba68 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800b846:	69bb      	ldr	r3, [r7, #24]
 800b848:	2b02      	cmp	r3, #2
 800b84a:	f000 8083 	beq.w	800b954 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800b84e:	69bb      	ldr	r3, [r7, #24]
 800b850:	2b02      	cmp	r3, #2
 800b852:	f200 80a1 	bhi.w	800b998 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800b856:	69bb      	ldr	r3, [r7, #24]
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d003      	beq.n	800b864 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800b85c:	69bb      	ldr	r3, [r7, #24]
 800b85e:	2b01      	cmp	r3, #1
 800b860:	d056      	beq.n	800b910 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800b862:	e099      	b.n	800b998 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b864:	4b88      	ldr	r3, [pc, #544]	; (800ba88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	f003 0320 	and.w	r3, r3, #32
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d02d      	beq.n	800b8cc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b870:	4b85      	ldr	r3, [pc, #532]	; (800ba88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	08db      	lsrs	r3, r3, #3
 800b876:	f003 0303 	and.w	r3, r3, #3
 800b87a:	4a84      	ldr	r2, [pc, #528]	; (800ba8c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800b87c:	fa22 f303 	lsr.w	r3, r2, r3
 800b880:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b882:	68bb      	ldr	r3, [r7, #8]
 800b884:	ee07 3a90 	vmov	s15, r3
 800b888:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b88c:	697b      	ldr	r3, [r7, #20]
 800b88e:	ee07 3a90 	vmov	s15, r3
 800b892:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b896:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b89a:	4b7b      	ldr	r3, [pc, #492]	; (800ba88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b89c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b89e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b8a2:	ee07 3a90 	vmov	s15, r3
 800b8a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b8aa:	ed97 6a03 	vldr	s12, [r7, #12]
 800b8ae:	eddf 5a78 	vldr	s11, [pc, #480]	; 800ba90 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b8b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b8b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b8ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b8be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b8c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b8c6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b8ca:	e087      	b.n	800b9dc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b8cc:	697b      	ldr	r3, [r7, #20]
 800b8ce:	ee07 3a90 	vmov	s15, r3
 800b8d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8d6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800ba94 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800b8da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b8de:	4b6a      	ldr	r3, [pc, #424]	; (800ba88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b8e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b8e6:	ee07 3a90 	vmov	s15, r3
 800b8ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b8ee:	ed97 6a03 	vldr	s12, [r7, #12]
 800b8f2:	eddf 5a67 	vldr	s11, [pc, #412]	; 800ba90 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b8f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b8fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b8fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b902:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b906:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b90a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b90e:	e065      	b.n	800b9dc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b910:	697b      	ldr	r3, [r7, #20]
 800b912:	ee07 3a90 	vmov	s15, r3
 800b916:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b91a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800ba98 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b91e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b922:	4b59      	ldr	r3, [pc, #356]	; (800ba88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b926:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b92a:	ee07 3a90 	vmov	s15, r3
 800b92e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b932:	ed97 6a03 	vldr	s12, [r7, #12]
 800b936:	eddf 5a56 	vldr	s11, [pc, #344]	; 800ba90 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b93a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b93e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b942:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b946:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b94a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b94e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b952:	e043      	b.n	800b9dc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b954:	697b      	ldr	r3, [r7, #20]
 800b956:	ee07 3a90 	vmov	s15, r3
 800b95a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b95e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800ba9c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800b962:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b966:	4b48      	ldr	r3, [pc, #288]	; (800ba88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b96a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b96e:	ee07 3a90 	vmov	s15, r3
 800b972:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b976:	ed97 6a03 	vldr	s12, [r7, #12]
 800b97a:	eddf 5a45 	vldr	s11, [pc, #276]	; 800ba90 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b97e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b982:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b986:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b98a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b98e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b992:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b996:	e021      	b.n	800b9dc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b998:	697b      	ldr	r3, [r7, #20]
 800b99a:	ee07 3a90 	vmov	s15, r3
 800b99e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b9a2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800ba98 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b9a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b9aa:	4b37      	ldr	r3, [pc, #220]	; (800ba88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b9ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b9b2:	ee07 3a90 	vmov	s15, r3
 800b9b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b9ba:	ed97 6a03 	vldr	s12, [r7, #12]
 800b9be:	eddf 5a34 	vldr	s11, [pc, #208]	; 800ba90 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b9c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b9c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b9ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b9ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b9d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b9d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b9da:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800b9dc:	4b2a      	ldr	r3, [pc, #168]	; (800ba88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b9de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9e0:	0a5b      	lsrs	r3, r3, #9
 800b9e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b9e6:	ee07 3a90 	vmov	s15, r3
 800b9ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b9ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b9f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b9f6:	edd7 6a07 	vldr	s13, [r7, #28]
 800b9fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b9fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ba02:	ee17 2a90 	vmov	r2, s15
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800ba0a:	4b1f      	ldr	r3, [pc, #124]	; (800ba88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ba0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba0e:	0c1b      	lsrs	r3, r3, #16
 800ba10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ba14:	ee07 3a90 	vmov	s15, r3
 800ba18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba1c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ba20:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ba24:	edd7 6a07 	vldr	s13, [r7, #28]
 800ba28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ba2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ba30:	ee17 2a90 	vmov	r2, s15
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800ba38:	4b13      	ldr	r3, [pc, #76]	; (800ba88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ba3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba3c:	0e1b      	lsrs	r3, r3, #24
 800ba3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ba42:	ee07 3a90 	vmov	s15, r3
 800ba46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba4a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ba4e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ba52:	edd7 6a07 	vldr	s13, [r7, #28]
 800ba56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ba5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ba5e:	ee17 2a90 	vmov	r2, s15
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800ba66:	e008      	b.n	800ba7a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	2200      	movs	r2, #0
 800ba6c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	2200      	movs	r2, #0
 800ba72:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	2200      	movs	r2, #0
 800ba78:	609a      	str	r2, [r3, #8]
}
 800ba7a:	bf00      	nop
 800ba7c:	3724      	adds	r7, #36	; 0x24
 800ba7e:	46bd      	mov	sp, r7
 800ba80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba84:	4770      	bx	lr
 800ba86:	bf00      	nop
 800ba88:	58024400 	.word	0x58024400
 800ba8c:	03d09000 	.word	0x03d09000
 800ba90:	46000000 	.word	0x46000000
 800ba94:	4c742400 	.word	0x4c742400
 800ba98:	4a742400 	.word	0x4a742400
 800ba9c:	4af42400 	.word	0x4af42400

0800baa0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800baa0:	b480      	push	{r7}
 800baa2:	b089      	sub	sp, #36	; 0x24
 800baa4:	af00      	add	r7, sp, #0
 800baa6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800baa8:	4ba1      	ldr	r3, [pc, #644]	; (800bd30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800baaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800baac:	f003 0303 	and.w	r3, r3, #3
 800bab0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800bab2:	4b9f      	ldr	r3, [pc, #636]	; (800bd30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bab6:	0d1b      	lsrs	r3, r3, #20
 800bab8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800babc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800babe:	4b9c      	ldr	r3, [pc, #624]	; (800bd30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bac2:	0a1b      	lsrs	r3, r3, #8
 800bac4:	f003 0301 	and.w	r3, r3, #1
 800bac8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800baca:	4b99      	ldr	r3, [pc, #612]	; (800bd30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bacc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bace:	08db      	lsrs	r3, r3, #3
 800bad0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bad4:	693a      	ldr	r2, [r7, #16]
 800bad6:	fb02 f303 	mul.w	r3, r2, r3
 800bada:	ee07 3a90 	vmov	s15, r3
 800bade:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bae2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800bae6:	697b      	ldr	r3, [r7, #20]
 800bae8:	2b00      	cmp	r3, #0
 800baea:	f000 8111 	beq.w	800bd10 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800baee:	69bb      	ldr	r3, [r7, #24]
 800baf0:	2b02      	cmp	r3, #2
 800baf2:	f000 8083 	beq.w	800bbfc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800baf6:	69bb      	ldr	r3, [r7, #24]
 800baf8:	2b02      	cmp	r3, #2
 800bafa:	f200 80a1 	bhi.w	800bc40 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800bafe:	69bb      	ldr	r3, [r7, #24]
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d003      	beq.n	800bb0c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800bb04:	69bb      	ldr	r3, [r7, #24]
 800bb06:	2b01      	cmp	r3, #1
 800bb08:	d056      	beq.n	800bbb8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800bb0a:	e099      	b.n	800bc40 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bb0c:	4b88      	ldr	r3, [pc, #544]	; (800bd30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	f003 0320 	and.w	r3, r3, #32
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d02d      	beq.n	800bb74 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bb18:	4b85      	ldr	r3, [pc, #532]	; (800bd30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	08db      	lsrs	r3, r3, #3
 800bb1e:	f003 0303 	and.w	r3, r3, #3
 800bb22:	4a84      	ldr	r2, [pc, #528]	; (800bd34 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800bb24:	fa22 f303 	lsr.w	r3, r2, r3
 800bb28:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bb2a:	68bb      	ldr	r3, [r7, #8]
 800bb2c:	ee07 3a90 	vmov	s15, r3
 800bb30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb34:	697b      	ldr	r3, [r7, #20]
 800bb36:	ee07 3a90 	vmov	s15, r3
 800bb3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bb42:	4b7b      	ldr	r3, [pc, #492]	; (800bd30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bb44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb4a:	ee07 3a90 	vmov	s15, r3
 800bb4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb52:	ed97 6a03 	vldr	s12, [r7, #12]
 800bb56:	eddf 5a78 	vldr	s11, [pc, #480]	; 800bd38 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bb5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bb5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bb62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bb66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb6e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800bb72:	e087      	b.n	800bc84 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bb74:	697b      	ldr	r3, [r7, #20]
 800bb76:	ee07 3a90 	vmov	s15, r3
 800bb7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb7e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800bd3c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800bb82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bb86:	4b6a      	ldr	r3, [pc, #424]	; (800bd30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bb88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb8e:	ee07 3a90 	vmov	s15, r3
 800bb92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb96:	ed97 6a03 	vldr	s12, [r7, #12]
 800bb9a:	eddf 5a67 	vldr	s11, [pc, #412]	; 800bd38 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bb9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bba2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bba6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bbaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bbae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bbb2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bbb6:	e065      	b.n	800bc84 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bbb8:	697b      	ldr	r3, [r7, #20]
 800bbba:	ee07 3a90 	vmov	s15, r3
 800bbbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bbc2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800bd40 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800bbc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bbca:	4b59      	ldr	r3, [pc, #356]	; (800bd30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bbcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bbd2:	ee07 3a90 	vmov	s15, r3
 800bbd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bbda:	ed97 6a03 	vldr	s12, [r7, #12]
 800bbde:	eddf 5a56 	vldr	s11, [pc, #344]	; 800bd38 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bbe2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bbe6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bbea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bbee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bbf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bbf6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bbfa:	e043      	b.n	800bc84 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bbfc:	697b      	ldr	r3, [r7, #20]
 800bbfe:	ee07 3a90 	vmov	s15, r3
 800bc02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc06:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800bd44 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800bc0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bc0e:	4b48      	ldr	r3, [pc, #288]	; (800bd30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bc10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc16:	ee07 3a90 	vmov	s15, r3
 800bc1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc1e:	ed97 6a03 	vldr	s12, [r7, #12]
 800bc22:	eddf 5a45 	vldr	s11, [pc, #276]	; 800bd38 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bc26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bc2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bc2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bc32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bc36:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bc3e:	e021      	b.n	800bc84 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bc40:	697b      	ldr	r3, [r7, #20]
 800bc42:	ee07 3a90 	vmov	s15, r3
 800bc46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc4a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800bd40 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800bc4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bc52:	4b37      	ldr	r3, [pc, #220]	; (800bd30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bc54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc5a:	ee07 3a90 	vmov	s15, r3
 800bc5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc62:	ed97 6a03 	vldr	s12, [r7, #12]
 800bc66:	eddf 5a34 	vldr	s11, [pc, #208]	; 800bd38 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bc6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bc6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bc72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bc76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bc7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bc82:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800bc84:	4b2a      	ldr	r3, [pc, #168]	; (800bd30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bc86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc88:	0a5b      	lsrs	r3, r3, #9
 800bc8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bc8e:	ee07 3a90 	vmov	s15, r3
 800bc92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc96:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bc9a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bc9e:	edd7 6a07 	vldr	s13, [r7, #28]
 800bca2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bca6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bcaa:	ee17 2a90 	vmov	r2, s15
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800bcb2:	4b1f      	ldr	r3, [pc, #124]	; (800bd30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bcb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcb6:	0c1b      	lsrs	r3, r3, #16
 800bcb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bcbc:	ee07 3a90 	vmov	s15, r3
 800bcc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bcc4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bcc8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bccc:	edd7 6a07 	vldr	s13, [r7, #28]
 800bcd0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bcd4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bcd8:	ee17 2a90 	vmov	r2, s15
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800bce0:	4b13      	ldr	r3, [pc, #76]	; (800bd30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bce4:	0e1b      	lsrs	r3, r3, #24
 800bce6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bcea:	ee07 3a90 	vmov	s15, r3
 800bcee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bcf2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bcf6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bcfa:	edd7 6a07 	vldr	s13, [r7, #28]
 800bcfe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bd02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bd06:	ee17 2a90 	vmov	r2, s15
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800bd0e:	e008      	b.n	800bd22 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	2200      	movs	r2, #0
 800bd14:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	2200      	movs	r2, #0
 800bd1a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	2200      	movs	r2, #0
 800bd20:	609a      	str	r2, [r3, #8]
}
 800bd22:	bf00      	nop
 800bd24:	3724      	adds	r7, #36	; 0x24
 800bd26:	46bd      	mov	sp, r7
 800bd28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd2c:	4770      	bx	lr
 800bd2e:	bf00      	nop
 800bd30:	58024400 	.word	0x58024400
 800bd34:	03d09000 	.word	0x03d09000
 800bd38:	46000000 	.word	0x46000000
 800bd3c:	4c742400 	.word	0x4c742400
 800bd40:	4a742400 	.word	0x4a742400
 800bd44:	4af42400 	.word	0x4af42400

0800bd48 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800bd48:	b480      	push	{r7}
 800bd4a:	b089      	sub	sp, #36	; 0x24
 800bd4c:	af00      	add	r7, sp, #0
 800bd4e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bd50:	4ba0      	ldr	r3, [pc, #640]	; (800bfd4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bd52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd54:	f003 0303 	and.w	r3, r3, #3
 800bd58:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800bd5a:	4b9e      	ldr	r3, [pc, #632]	; (800bfd4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bd5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd5e:	091b      	lsrs	r3, r3, #4
 800bd60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bd64:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800bd66:	4b9b      	ldr	r3, [pc, #620]	; (800bfd4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bd68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd6a:	f003 0301 	and.w	r3, r3, #1
 800bd6e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800bd70:	4b98      	ldr	r3, [pc, #608]	; (800bfd4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bd72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd74:	08db      	lsrs	r3, r3, #3
 800bd76:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bd7a:	693a      	ldr	r2, [r7, #16]
 800bd7c:	fb02 f303 	mul.w	r3, r2, r3
 800bd80:	ee07 3a90 	vmov	s15, r3
 800bd84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd88:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800bd8c:	697b      	ldr	r3, [r7, #20]
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	f000 8111 	beq.w	800bfb6 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800bd94:	69bb      	ldr	r3, [r7, #24]
 800bd96:	2b02      	cmp	r3, #2
 800bd98:	f000 8083 	beq.w	800bea2 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800bd9c:	69bb      	ldr	r3, [r7, #24]
 800bd9e:	2b02      	cmp	r3, #2
 800bda0:	f200 80a1 	bhi.w	800bee6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800bda4:	69bb      	ldr	r3, [r7, #24]
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d003      	beq.n	800bdb2 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800bdaa:	69bb      	ldr	r3, [r7, #24]
 800bdac:	2b01      	cmp	r3, #1
 800bdae:	d056      	beq.n	800be5e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800bdb0:	e099      	b.n	800bee6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bdb2:	4b88      	ldr	r3, [pc, #544]	; (800bfd4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	f003 0320 	and.w	r3, r3, #32
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d02d      	beq.n	800be1a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bdbe:	4b85      	ldr	r3, [pc, #532]	; (800bfd4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	08db      	lsrs	r3, r3, #3
 800bdc4:	f003 0303 	and.w	r3, r3, #3
 800bdc8:	4a83      	ldr	r2, [pc, #524]	; (800bfd8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800bdca:	fa22 f303 	lsr.w	r3, r2, r3
 800bdce:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bdd0:	68bb      	ldr	r3, [r7, #8]
 800bdd2:	ee07 3a90 	vmov	s15, r3
 800bdd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bdda:	697b      	ldr	r3, [r7, #20]
 800bddc:	ee07 3a90 	vmov	s15, r3
 800bde0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bde4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bde8:	4b7a      	ldr	r3, [pc, #488]	; (800bfd4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bdea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bdec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bdf0:	ee07 3a90 	vmov	s15, r3
 800bdf4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bdf8:	ed97 6a03 	vldr	s12, [r7, #12]
 800bdfc:	eddf 5a77 	vldr	s11, [pc, #476]	; 800bfdc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800be00:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800be04:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800be08:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800be0c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800be10:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be14:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800be18:	e087      	b.n	800bf2a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800be1a:	697b      	ldr	r3, [r7, #20]
 800be1c:	ee07 3a90 	vmov	s15, r3
 800be20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be24:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800bfe0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800be28:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800be2c:	4b69      	ldr	r3, [pc, #420]	; (800bfd4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800be2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be34:	ee07 3a90 	vmov	s15, r3
 800be38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800be3c:	ed97 6a03 	vldr	s12, [r7, #12]
 800be40:	eddf 5a66 	vldr	s11, [pc, #408]	; 800bfdc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800be44:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800be48:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800be4c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800be50:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800be54:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be58:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800be5c:	e065      	b.n	800bf2a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800be5e:	697b      	ldr	r3, [r7, #20]
 800be60:	ee07 3a90 	vmov	s15, r3
 800be64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be68:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800bfe4 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800be6c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800be70:	4b58      	ldr	r3, [pc, #352]	; (800bfd4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800be72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be78:	ee07 3a90 	vmov	s15, r3
 800be7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800be80:	ed97 6a03 	vldr	s12, [r7, #12]
 800be84:	eddf 5a55 	vldr	s11, [pc, #340]	; 800bfdc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800be88:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800be8c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800be90:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800be94:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800be98:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be9c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bea0:	e043      	b.n	800bf2a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bea2:	697b      	ldr	r3, [r7, #20]
 800bea4:	ee07 3a90 	vmov	s15, r3
 800bea8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800beac:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800bfe8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800beb0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800beb4:	4b47      	ldr	r3, [pc, #284]	; (800bfd4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800beb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800beb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bebc:	ee07 3a90 	vmov	s15, r3
 800bec0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bec4:	ed97 6a03 	vldr	s12, [r7, #12]
 800bec8:	eddf 5a44 	vldr	s11, [pc, #272]	; 800bfdc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800becc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bed0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bed4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bed8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bedc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bee0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bee4:	e021      	b.n	800bf2a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bee6:	697b      	ldr	r3, [r7, #20]
 800bee8:	ee07 3a90 	vmov	s15, r3
 800beec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bef0:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800bfe0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800bef4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bef8:	4b36      	ldr	r3, [pc, #216]	; (800bfd4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800befa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800befc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf00:	ee07 3a90 	vmov	s15, r3
 800bf04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bf08:	ed97 6a03 	vldr	s12, [r7, #12]
 800bf0c:	eddf 5a33 	vldr	s11, [pc, #204]	; 800bfdc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bf10:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bf14:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bf18:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bf1c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bf20:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf24:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bf28:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800bf2a:	4b2a      	ldr	r3, [pc, #168]	; (800bfd4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bf2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf2e:	0a5b      	lsrs	r3, r3, #9
 800bf30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bf34:	ee07 3a90 	vmov	s15, r3
 800bf38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf3c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bf40:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bf44:	edd7 6a07 	vldr	s13, [r7, #28]
 800bf48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bf4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bf50:	ee17 2a90 	vmov	r2, s15
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800bf58:	4b1e      	ldr	r3, [pc, #120]	; (800bfd4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bf5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf5c:	0c1b      	lsrs	r3, r3, #16
 800bf5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bf62:	ee07 3a90 	vmov	s15, r3
 800bf66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf6a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bf6e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bf72:	edd7 6a07 	vldr	s13, [r7, #28]
 800bf76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bf7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bf7e:	ee17 2a90 	vmov	r2, s15
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800bf86:	4b13      	ldr	r3, [pc, #76]	; (800bfd4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bf88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf8a:	0e1b      	lsrs	r3, r3, #24
 800bf8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bf90:	ee07 3a90 	vmov	s15, r3
 800bf94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf98:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bf9c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bfa0:	edd7 6a07 	vldr	s13, [r7, #28]
 800bfa4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bfa8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bfac:	ee17 2a90 	vmov	r2, s15
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800bfb4:	e008      	b.n	800bfc8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	2200      	movs	r2, #0
 800bfba:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	2200      	movs	r2, #0
 800bfc0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	2200      	movs	r2, #0
 800bfc6:	609a      	str	r2, [r3, #8]
}
 800bfc8:	bf00      	nop
 800bfca:	3724      	adds	r7, #36	; 0x24
 800bfcc:	46bd      	mov	sp, r7
 800bfce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd2:	4770      	bx	lr
 800bfd4:	58024400 	.word	0x58024400
 800bfd8:	03d09000 	.word	0x03d09000
 800bfdc:	46000000 	.word	0x46000000
 800bfe0:	4c742400 	.word	0x4c742400
 800bfe4:	4a742400 	.word	0x4a742400
 800bfe8:	4af42400 	.word	0x4af42400

0800bfec <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800bfec:	b580      	push	{r7, lr}
 800bfee:	b084      	sub	sp, #16
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	6078      	str	r0, [r7, #4]
 800bff4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800bff6:	2300      	movs	r3, #0
 800bff8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bffa:	4b53      	ldr	r3, [pc, #332]	; (800c148 <RCCEx_PLL2_Config+0x15c>)
 800bffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bffe:	f003 0303 	and.w	r3, r3, #3
 800c002:	2b03      	cmp	r3, #3
 800c004:	d101      	bne.n	800c00a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800c006:	2301      	movs	r3, #1
 800c008:	e099      	b.n	800c13e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800c00a:	4b4f      	ldr	r3, [pc, #316]	; (800c148 <RCCEx_PLL2_Config+0x15c>)
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	4a4e      	ldr	r2, [pc, #312]	; (800c148 <RCCEx_PLL2_Config+0x15c>)
 800c010:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c014:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c016:	f7f7 fdbd 	bl	8003b94 <HAL_GetTick>
 800c01a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c01c:	e008      	b.n	800c030 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c01e:	f7f7 fdb9 	bl	8003b94 <HAL_GetTick>
 800c022:	4602      	mov	r2, r0
 800c024:	68bb      	ldr	r3, [r7, #8]
 800c026:	1ad3      	subs	r3, r2, r3
 800c028:	2b02      	cmp	r3, #2
 800c02a:	d901      	bls.n	800c030 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c02c:	2303      	movs	r3, #3
 800c02e:	e086      	b.n	800c13e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c030:	4b45      	ldr	r3, [pc, #276]	; (800c148 <RCCEx_PLL2_Config+0x15c>)
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d1f0      	bne.n	800c01e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800c03c:	4b42      	ldr	r3, [pc, #264]	; (800c148 <RCCEx_PLL2_Config+0x15c>)
 800c03e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c040:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	031b      	lsls	r3, r3, #12
 800c04a:	493f      	ldr	r1, [pc, #252]	; (800c148 <RCCEx_PLL2_Config+0x15c>)
 800c04c:	4313      	orrs	r3, r2
 800c04e:	628b      	str	r3, [r1, #40]	; 0x28
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	685b      	ldr	r3, [r3, #4]
 800c054:	3b01      	subs	r3, #1
 800c056:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	689b      	ldr	r3, [r3, #8]
 800c05e:	3b01      	subs	r3, #1
 800c060:	025b      	lsls	r3, r3, #9
 800c062:	b29b      	uxth	r3, r3
 800c064:	431a      	orrs	r2, r3
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	68db      	ldr	r3, [r3, #12]
 800c06a:	3b01      	subs	r3, #1
 800c06c:	041b      	lsls	r3, r3, #16
 800c06e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c072:	431a      	orrs	r2, r3
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	691b      	ldr	r3, [r3, #16]
 800c078:	3b01      	subs	r3, #1
 800c07a:	061b      	lsls	r3, r3, #24
 800c07c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c080:	4931      	ldr	r1, [pc, #196]	; (800c148 <RCCEx_PLL2_Config+0x15c>)
 800c082:	4313      	orrs	r3, r2
 800c084:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800c086:	4b30      	ldr	r3, [pc, #192]	; (800c148 <RCCEx_PLL2_Config+0x15c>)
 800c088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c08a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	695b      	ldr	r3, [r3, #20]
 800c092:	492d      	ldr	r1, [pc, #180]	; (800c148 <RCCEx_PLL2_Config+0x15c>)
 800c094:	4313      	orrs	r3, r2
 800c096:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800c098:	4b2b      	ldr	r3, [pc, #172]	; (800c148 <RCCEx_PLL2_Config+0x15c>)
 800c09a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c09c:	f023 0220 	bic.w	r2, r3, #32
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	699b      	ldr	r3, [r3, #24]
 800c0a4:	4928      	ldr	r1, [pc, #160]	; (800c148 <RCCEx_PLL2_Config+0x15c>)
 800c0a6:	4313      	orrs	r3, r2
 800c0a8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800c0aa:	4b27      	ldr	r3, [pc, #156]	; (800c148 <RCCEx_PLL2_Config+0x15c>)
 800c0ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0ae:	4a26      	ldr	r2, [pc, #152]	; (800c148 <RCCEx_PLL2_Config+0x15c>)
 800c0b0:	f023 0310 	bic.w	r3, r3, #16
 800c0b4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800c0b6:	4b24      	ldr	r3, [pc, #144]	; (800c148 <RCCEx_PLL2_Config+0x15c>)
 800c0b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c0ba:	4b24      	ldr	r3, [pc, #144]	; (800c14c <RCCEx_PLL2_Config+0x160>)
 800c0bc:	4013      	ands	r3, r2
 800c0be:	687a      	ldr	r2, [r7, #4]
 800c0c0:	69d2      	ldr	r2, [r2, #28]
 800c0c2:	00d2      	lsls	r2, r2, #3
 800c0c4:	4920      	ldr	r1, [pc, #128]	; (800c148 <RCCEx_PLL2_Config+0x15c>)
 800c0c6:	4313      	orrs	r3, r2
 800c0c8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800c0ca:	4b1f      	ldr	r3, [pc, #124]	; (800c148 <RCCEx_PLL2_Config+0x15c>)
 800c0cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0ce:	4a1e      	ldr	r2, [pc, #120]	; (800c148 <RCCEx_PLL2_Config+0x15c>)
 800c0d0:	f043 0310 	orr.w	r3, r3, #16
 800c0d4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800c0d6:	683b      	ldr	r3, [r7, #0]
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d106      	bne.n	800c0ea <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800c0dc:	4b1a      	ldr	r3, [pc, #104]	; (800c148 <RCCEx_PLL2_Config+0x15c>)
 800c0de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0e0:	4a19      	ldr	r2, [pc, #100]	; (800c148 <RCCEx_PLL2_Config+0x15c>)
 800c0e2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c0e6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c0e8:	e00f      	b.n	800c10a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800c0ea:	683b      	ldr	r3, [r7, #0]
 800c0ec:	2b01      	cmp	r3, #1
 800c0ee:	d106      	bne.n	800c0fe <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800c0f0:	4b15      	ldr	r3, [pc, #84]	; (800c148 <RCCEx_PLL2_Config+0x15c>)
 800c0f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0f4:	4a14      	ldr	r2, [pc, #80]	; (800c148 <RCCEx_PLL2_Config+0x15c>)
 800c0f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c0fa:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c0fc:	e005      	b.n	800c10a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800c0fe:	4b12      	ldr	r3, [pc, #72]	; (800c148 <RCCEx_PLL2_Config+0x15c>)
 800c100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c102:	4a11      	ldr	r2, [pc, #68]	; (800c148 <RCCEx_PLL2_Config+0x15c>)
 800c104:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c108:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800c10a:	4b0f      	ldr	r3, [pc, #60]	; (800c148 <RCCEx_PLL2_Config+0x15c>)
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	4a0e      	ldr	r2, [pc, #56]	; (800c148 <RCCEx_PLL2_Config+0x15c>)
 800c110:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c114:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c116:	f7f7 fd3d 	bl	8003b94 <HAL_GetTick>
 800c11a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c11c:	e008      	b.n	800c130 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c11e:	f7f7 fd39 	bl	8003b94 <HAL_GetTick>
 800c122:	4602      	mov	r2, r0
 800c124:	68bb      	ldr	r3, [r7, #8]
 800c126:	1ad3      	subs	r3, r2, r3
 800c128:	2b02      	cmp	r3, #2
 800c12a:	d901      	bls.n	800c130 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c12c:	2303      	movs	r3, #3
 800c12e:	e006      	b.n	800c13e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c130:	4b05      	ldr	r3, [pc, #20]	; (800c148 <RCCEx_PLL2_Config+0x15c>)
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d0f0      	beq.n	800c11e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800c13c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c13e:	4618      	mov	r0, r3
 800c140:	3710      	adds	r7, #16
 800c142:	46bd      	mov	sp, r7
 800c144:	bd80      	pop	{r7, pc}
 800c146:	bf00      	nop
 800c148:	58024400 	.word	0x58024400
 800c14c:	ffff0007 	.word	0xffff0007

0800c150 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800c150:	b580      	push	{r7, lr}
 800c152:	b084      	sub	sp, #16
 800c154:	af00      	add	r7, sp, #0
 800c156:	6078      	str	r0, [r7, #4]
 800c158:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c15a:	2300      	movs	r3, #0
 800c15c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c15e:	4b53      	ldr	r3, [pc, #332]	; (800c2ac <RCCEx_PLL3_Config+0x15c>)
 800c160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c162:	f003 0303 	and.w	r3, r3, #3
 800c166:	2b03      	cmp	r3, #3
 800c168:	d101      	bne.n	800c16e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800c16a:	2301      	movs	r3, #1
 800c16c:	e099      	b.n	800c2a2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800c16e:	4b4f      	ldr	r3, [pc, #316]	; (800c2ac <RCCEx_PLL3_Config+0x15c>)
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	4a4e      	ldr	r2, [pc, #312]	; (800c2ac <RCCEx_PLL3_Config+0x15c>)
 800c174:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c178:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c17a:	f7f7 fd0b 	bl	8003b94 <HAL_GetTick>
 800c17e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c180:	e008      	b.n	800c194 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c182:	f7f7 fd07 	bl	8003b94 <HAL_GetTick>
 800c186:	4602      	mov	r2, r0
 800c188:	68bb      	ldr	r3, [r7, #8]
 800c18a:	1ad3      	subs	r3, r2, r3
 800c18c:	2b02      	cmp	r3, #2
 800c18e:	d901      	bls.n	800c194 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c190:	2303      	movs	r3, #3
 800c192:	e086      	b.n	800c2a2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c194:	4b45      	ldr	r3, [pc, #276]	; (800c2ac <RCCEx_PLL3_Config+0x15c>)
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d1f0      	bne.n	800c182 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800c1a0:	4b42      	ldr	r3, [pc, #264]	; (800c2ac <RCCEx_PLL3_Config+0x15c>)
 800c1a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1a4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	051b      	lsls	r3, r3, #20
 800c1ae:	493f      	ldr	r1, [pc, #252]	; (800c2ac <RCCEx_PLL3_Config+0x15c>)
 800c1b0:	4313      	orrs	r3, r2
 800c1b2:	628b      	str	r3, [r1, #40]	; 0x28
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	685b      	ldr	r3, [r3, #4]
 800c1b8:	3b01      	subs	r3, #1
 800c1ba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	689b      	ldr	r3, [r3, #8]
 800c1c2:	3b01      	subs	r3, #1
 800c1c4:	025b      	lsls	r3, r3, #9
 800c1c6:	b29b      	uxth	r3, r3
 800c1c8:	431a      	orrs	r2, r3
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	68db      	ldr	r3, [r3, #12]
 800c1ce:	3b01      	subs	r3, #1
 800c1d0:	041b      	lsls	r3, r3, #16
 800c1d2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c1d6:	431a      	orrs	r2, r3
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	691b      	ldr	r3, [r3, #16]
 800c1dc:	3b01      	subs	r3, #1
 800c1de:	061b      	lsls	r3, r3, #24
 800c1e0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c1e4:	4931      	ldr	r1, [pc, #196]	; (800c2ac <RCCEx_PLL3_Config+0x15c>)
 800c1e6:	4313      	orrs	r3, r2
 800c1e8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800c1ea:	4b30      	ldr	r3, [pc, #192]	; (800c2ac <RCCEx_PLL3_Config+0x15c>)
 800c1ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1ee:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	695b      	ldr	r3, [r3, #20]
 800c1f6:	492d      	ldr	r1, [pc, #180]	; (800c2ac <RCCEx_PLL3_Config+0x15c>)
 800c1f8:	4313      	orrs	r3, r2
 800c1fa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800c1fc:	4b2b      	ldr	r3, [pc, #172]	; (800c2ac <RCCEx_PLL3_Config+0x15c>)
 800c1fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c200:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	699b      	ldr	r3, [r3, #24]
 800c208:	4928      	ldr	r1, [pc, #160]	; (800c2ac <RCCEx_PLL3_Config+0x15c>)
 800c20a:	4313      	orrs	r3, r2
 800c20c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800c20e:	4b27      	ldr	r3, [pc, #156]	; (800c2ac <RCCEx_PLL3_Config+0x15c>)
 800c210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c212:	4a26      	ldr	r2, [pc, #152]	; (800c2ac <RCCEx_PLL3_Config+0x15c>)
 800c214:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c218:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800c21a:	4b24      	ldr	r3, [pc, #144]	; (800c2ac <RCCEx_PLL3_Config+0x15c>)
 800c21c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c21e:	4b24      	ldr	r3, [pc, #144]	; (800c2b0 <RCCEx_PLL3_Config+0x160>)
 800c220:	4013      	ands	r3, r2
 800c222:	687a      	ldr	r2, [r7, #4]
 800c224:	69d2      	ldr	r2, [r2, #28]
 800c226:	00d2      	lsls	r2, r2, #3
 800c228:	4920      	ldr	r1, [pc, #128]	; (800c2ac <RCCEx_PLL3_Config+0x15c>)
 800c22a:	4313      	orrs	r3, r2
 800c22c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800c22e:	4b1f      	ldr	r3, [pc, #124]	; (800c2ac <RCCEx_PLL3_Config+0x15c>)
 800c230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c232:	4a1e      	ldr	r2, [pc, #120]	; (800c2ac <RCCEx_PLL3_Config+0x15c>)
 800c234:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c238:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800c23a:	683b      	ldr	r3, [r7, #0]
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d106      	bne.n	800c24e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800c240:	4b1a      	ldr	r3, [pc, #104]	; (800c2ac <RCCEx_PLL3_Config+0x15c>)
 800c242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c244:	4a19      	ldr	r2, [pc, #100]	; (800c2ac <RCCEx_PLL3_Config+0x15c>)
 800c246:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800c24a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c24c:	e00f      	b.n	800c26e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800c24e:	683b      	ldr	r3, [r7, #0]
 800c250:	2b01      	cmp	r3, #1
 800c252:	d106      	bne.n	800c262 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800c254:	4b15      	ldr	r3, [pc, #84]	; (800c2ac <RCCEx_PLL3_Config+0x15c>)
 800c256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c258:	4a14      	ldr	r2, [pc, #80]	; (800c2ac <RCCEx_PLL3_Config+0x15c>)
 800c25a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c25e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c260:	e005      	b.n	800c26e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800c262:	4b12      	ldr	r3, [pc, #72]	; (800c2ac <RCCEx_PLL3_Config+0x15c>)
 800c264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c266:	4a11      	ldr	r2, [pc, #68]	; (800c2ac <RCCEx_PLL3_Config+0x15c>)
 800c268:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c26c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800c26e:	4b0f      	ldr	r3, [pc, #60]	; (800c2ac <RCCEx_PLL3_Config+0x15c>)
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	4a0e      	ldr	r2, [pc, #56]	; (800c2ac <RCCEx_PLL3_Config+0x15c>)
 800c274:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c278:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c27a:	f7f7 fc8b 	bl	8003b94 <HAL_GetTick>
 800c27e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c280:	e008      	b.n	800c294 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c282:	f7f7 fc87 	bl	8003b94 <HAL_GetTick>
 800c286:	4602      	mov	r2, r0
 800c288:	68bb      	ldr	r3, [r7, #8]
 800c28a:	1ad3      	subs	r3, r2, r3
 800c28c:	2b02      	cmp	r3, #2
 800c28e:	d901      	bls.n	800c294 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c290:	2303      	movs	r3, #3
 800c292:	e006      	b.n	800c2a2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c294:	4b05      	ldr	r3, [pc, #20]	; (800c2ac <RCCEx_PLL3_Config+0x15c>)
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d0f0      	beq.n	800c282 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800c2a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2a2:	4618      	mov	r0, r3
 800c2a4:	3710      	adds	r7, #16
 800c2a6:	46bd      	mov	sp, r7
 800c2a8:	bd80      	pop	{r7, pc}
 800c2aa:	bf00      	nop
 800c2ac:	58024400 	.word	0x58024400
 800c2b0:	ffff0007 	.word	0xffff0007

0800c2b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c2b4:	b580      	push	{r7, lr}
 800c2b6:	b082      	sub	sp, #8
 800c2b8:	af00      	add	r7, sp, #0
 800c2ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d101      	bne.n	800c2c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c2c2:	2301      	movs	r3, #1
 800c2c4:	e049      	b.n	800c35a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c2cc:	b2db      	uxtb	r3, r3
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d106      	bne.n	800c2e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	2200      	movs	r2, #0
 800c2d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c2da:	6878      	ldr	r0, [r7, #4]
 800c2dc:	f7f6 ff9a 	bl	8003214 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	2202      	movs	r2, #2
 800c2e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	681a      	ldr	r2, [r3, #0]
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	3304      	adds	r3, #4
 800c2f0:	4619      	mov	r1, r3
 800c2f2:	4610      	mov	r0, r2
 800c2f4:	f000 fec6 	bl	800d084 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	2201      	movs	r2, #1
 800c2fc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	2201      	movs	r2, #1
 800c304:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	2201      	movs	r2, #1
 800c30c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	2201      	movs	r2, #1
 800c314:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	2201      	movs	r2, #1
 800c31c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	2201      	movs	r2, #1
 800c324:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	2201      	movs	r2, #1
 800c32c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	2201      	movs	r2, #1
 800c334:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	2201      	movs	r2, #1
 800c33c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	2201      	movs	r2, #1
 800c344:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	2201      	movs	r2, #1
 800c34c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	2201      	movs	r2, #1
 800c354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c358:	2300      	movs	r3, #0
}
 800c35a:	4618      	mov	r0, r3
 800c35c:	3708      	adds	r7, #8
 800c35e:	46bd      	mov	sp, r7
 800c360:	bd80      	pop	{r7, pc}
	...

0800c364 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c364:	b480      	push	{r7}
 800c366:	b085      	sub	sp, #20
 800c368:	af00      	add	r7, sp, #0
 800c36a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c372:	b2db      	uxtb	r3, r3
 800c374:	2b01      	cmp	r3, #1
 800c376:	d001      	beq.n	800c37c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c378:	2301      	movs	r3, #1
 800c37a:	e054      	b.n	800c426 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	2202      	movs	r2, #2
 800c380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	68da      	ldr	r2, [r3, #12]
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	f042 0201 	orr.w	r2, r2, #1
 800c392:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	4a26      	ldr	r2, [pc, #152]	; (800c434 <HAL_TIM_Base_Start_IT+0xd0>)
 800c39a:	4293      	cmp	r3, r2
 800c39c:	d022      	beq.n	800c3e4 <HAL_TIM_Base_Start_IT+0x80>
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c3a6:	d01d      	beq.n	800c3e4 <HAL_TIM_Base_Start_IT+0x80>
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	4a22      	ldr	r2, [pc, #136]	; (800c438 <HAL_TIM_Base_Start_IT+0xd4>)
 800c3ae:	4293      	cmp	r3, r2
 800c3b0:	d018      	beq.n	800c3e4 <HAL_TIM_Base_Start_IT+0x80>
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	4a21      	ldr	r2, [pc, #132]	; (800c43c <HAL_TIM_Base_Start_IT+0xd8>)
 800c3b8:	4293      	cmp	r3, r2
 800c3ba:	d013      	beq.n	800c3e4 <HAL_TIM_Base_Start_IT+0x80>
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	4a1f      	ldr	r2, [pc, #124]	; (800c440 <HAL_TIM_Base_Start_IT+0xdc>)
 800c3c2:	4293      	cmp	r3, r2
 800c3c4:	d00e      	beq.n	800c3e4 <HAL_TIM_Base_Start_IT+0x80>
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	4a1e      	ldr	r2, [pc, #120]	; (800c444 <HAL_TIM_Base_Start_IT+0xe0>)
 800c3cc:	4293      	cmp	r3, r2
 800c3ce:	d009      	beq.n	800c3e4 <HAL_TIM_Base_Start_IT+0x80>
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	4a1c      	ldr	r2, [pc, #112]	; (800c448 <HAL_TIM_Base_Start_IT+0xe4>)
 800c3d6:	4293      	cmp	r3, r2
 800c3d8:	d004      	beq.n	800c3e4 <HAL_TIM_Base_Start_IT+0x80>
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	4a1b      	ldr	r2, [pc, #108]	; (800c44c <HAL_TIM_Base_Start_IT+0xe8>)
 800c3e0:	4293      	cmp	r3, r2
 800c3e2:	d115      	bne.n	800c410 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	689a      	ldr	r2, [r3, #8]
 800c3ea:	4b19      	ldr	r3, [pc, #100]	; (800c450 <HAL_TIM_Base_Start_IT+0xec>)
 800c3ec:	4013      	ands	r3, r2
 800c3ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	2b06      	cmp	r3, #6
 800c3f4:	d015      	beq.n	800c422 <HAL_TIM_Base_Start_IT+0xbe>
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c3fc:	d011      	beq.n	800c422 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	681a      	ldr	r2, [r3, #0]
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	f042 0201 	orr.w	r2, r2, #1
 800c40c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c40e:	e008      	b.n	800c422 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	681a      	ldr	r2, [r3, #0]
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	f042 0201 	orr.w	r2, r2, #1
 800c41e:	601a      	str	r2, [r3, #0]
 800c420:	e000      	b.n	800c424 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c422:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c424:	2300      	movs	r3, #0
}
 800c426:	4618      	mov	r0, r3
 800c428:	3714      	adds	r7, #20
 800c42a:	46bd      	mov	sp, r7
 800c42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c430:	4770      	bx	lr
 800c432:	bf00      	nop
 800c434:	40010000 	.word	0x40010000
 800c438:	40000400 	.word	0x40000400
 800c43c:	40000800 	.word	0x40000800
 800c440:	40000c00 	.word	0x40000c00
 800c444:	40010400 	.word	0x40010400
 800c448:	40001800 	.word	0x40001800
 800c44c:	40014000 	.word	0x40014000
 800c450:	00010007 	.word	0x00010007

0800c454 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c454:	b580      	push	{r7, lr}
 800c456:	b082      	sub	sp, #8
 800c458:	af00      	add	r7, sp, #0
 800c45a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d101      	bne.n	800c466 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c462:	2301      	movs	r3, #1
 800c464:	e049      	b.n	800c4fa <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c46c:	b2db      	uxtb	r3, r3
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d106      	bne.n	800c480 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	2200      	movs	r2, #0
 800c476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c47a:	6878      	ldr	r0, [r7, #4]
 800c47c:	f000 f841 	bl	800c502 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	2202      	movs	r2, #2
 800c484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	681a      	ldr	r2, [r3, #0]
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	3304      	adds	r3, #4
 800c490:	4619      	mov	r1, r3
 800c492:	4610      	mov	r0, r2
 800c494:	f000 fdf6 	bl	800d084 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	2201      	movs	r2, #1
 800c49c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	2201      	movs	r2, #1
 800c4a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	2201      	movs	r2, #1
 800c4ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	2201      	movs	r2, #1
 800c4b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	2201      	movs	r2, #1
 800c4bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	2201      	movs	r2, #1
 800c4c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	2201      	movs	r2, #1
 800c4cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	2201      	movs	r2, #1
 800c4d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	2201      	movs	r2, #1
 800c4dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	2201      	movs	r2, #1
 800c4e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	2201      	movs	r2, #1
 800c4ec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	2201      	movs	r2, #1
 800c4f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c4f8:	2300      	movs	r3, #0
}
 800c4fa:	4618      	mov	r0, r3
 800c4fc:	3708      	adds	r7, #8
 800c4fe:	46bd      	mov	sp, r7
 800c500:	bd80      	pop	{r7, pc}

0800c502 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800c502:	b480      	push	{r7}
 800c504:	b083      	sub	sp, #12
 800c506:	af00      	add	r7, sp, #0
 800c508:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800c50a:	bf00      	nop
 800c50c:	370c      	adds	r7, #12
 800c50e:	46bd      	mov	sp, r7
 800c510:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c514:	4770      	bx	lr
	...

0800c518 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c518:	b580      	push	{r7, lr}
 800c51a:	b084      	sub	sp, #16
 800c51c:	af00      	add	r7, sp, #0
 800c51e:	6078      	str	r0, [r7, #4]
 800c520:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c522:	683b      	ldr	r3, [r7, #0]
 800c524:	2b00      	cmp	r3, #0
 800c526:	d109      	bne.n	800c53c <HAL_TIM_PWM_Start+0x24>
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c52e:	b2db      	uxtb	r3, r3
 800c530:	2b01      	cmp	r3, #1
 800c532:	bf14      	ite	ne
 800c534:	2301      	movne	r3, #1
 800c536:	2300      	moveq	r3, #0
 800c538:	b2db      	uxtb	r3, r3
 800c53a:	e03c      	b.n	800c5b6 <HAL_TIM_PWM_Start+0x9e>
 800c53c:	683b      	ldr	r3, [r7, #0]
 800c53e:	2b04      	cmp	r3, #4
 800c540:	d109      	bne.n	800c556 <HAL_TIM_PWM_Start+0x3e>
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800c548:	b2db      	uxtb	r3, r3
 800c54a:	2b01      	cmp	r3, #1
 800c54c:	bf14      	ite	ne
 800c54e:	2301      	movne	r3, #1
 800c550:	2300      	moveq	r3, #0
 800c552:	b2db      	uxtb	r3, r3
 800c554:	e02f      	b.n	800c5b6 <HAL_TIM_PWM_Start+0x9e>
 800c556:	683b      	ldr	r3, [r7, #0]
 800c558:	2b08      	cmp	r3, #8
 800c55a:	d109      	bne.n	800c570 <HAL_TIM_PWM_Start+0x58>
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c562:	b2db      	uxtb	r3, r3
 800c564:	2b01      	cmp	r3, #1
 800c566:	bf14      	ite	ne
 800c568:	2301      	movne	r3, #1
 800c56a:	2300      	moveq	r3, #0
 800c56c:	b2db      	uxtb	r3, r3
 800c56e:	e022      	b.n	800c5b6 <HAL_TIM_PWM_Start+0x9e>
 800c570:	683b      	ldr	r3, [r7, #0]
 800c572:	2b0c      	cmp	r3, #12
 800c574:	d109      	bne.n	800c58a <HAL_TIM_PWM_Start+0x72>
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c57c:	b2db      	uxtb	r3, r3
 800c57e:	2b01      	cmp	r3, #1
 800c580:	bf14      	ite	ne
 800c582:	2301      	movne	r3, #1
 800c584:	2300      	moveq	r3, #0
 800c586:	b2db      	uxtb	r3, r3
 800c588:	e015      	b.n	800c5b6 <HAL_TIM_PWM_Start+0x9e>
 800c58a:	683b      	ldr	r3, [r7, #0]
 800c58c:	2b10      	cmp	r3, #16
 800c58e:	d109      	bne.n	800c5a4 <HAL_TIM_PWM_Start+0x8c>
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c596:	b2db      	uxtb	r3, r3
 800c598:	2b01      	cmp	r3, #1
 800c59a:	bf14      	ite	ne
 800c59c:	2301      	movne	r3, #1
 800c59e:	2300      	moveq	r3, #0
 800c5a0:	b2db      	uxtb	r3, r3
 800c5a2:	e008      	b.n	800c5b6 <HAL_TIM_PWM_Start+0x9e>
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c5aa:	b2db      	uxtb	r3, r3
 800c5ac:	2b01      	cmp	r3, #1
 800c5ae:	bf14      	ite	ne
 800c5b0:	2301      	movne	r3, #1
 800c5b2:	2300      	moveq	r3, #0
 800c5b4:	b2db      	uxtb	r3, r3
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d001      	beq.n	800c5be <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800c5ba:	2301      	movs	r3, #1
 800c5bc:	e0a1      	b.n	800c702 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c5be:	683b      	ldr	r3, [r7, #0]
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d104      	bne.n	800c5ce <HAL_TIM_PWM_Start+0xb6>
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	2202      	movs	r2, #2
 800c5c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c5cc:	e023      	b.n	800c616 <HAL_TIM_PWM_Start+0xfe>
 800c5ce:	683b      	ldr	r3, [r7, #0]
 800c5d0:	2b04      	cmp	r3, #4
 800c5d2:	d104      	bne.n	800c5de <HAL_TIM_PWM_Start+0xc6>
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	2202      	movs	r2, #2
 800c5d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c5dc:	e01b      	b.n	800c616 <HAL_TIM_PWM_Start+0xfe>
 800c5de:	683b      	ldr	r3, [r7, #0]
 800c5e0:	2b08      	cmp	r3, #8
 800c5e2:	d104      	bne.n	800c5ee <HAL_TIM_PWM_Start+0xd6>
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	2202      	movs	r2, #2
 800c5e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c5ec:	e013      	b.n	800c616 <HAL_TIM_PWM_Start+0xfe>
 800c5ee:	683b      	ldr	r3, [r7, #0]
 800c5f0:	2b0c      	cmp	r3, #12
 800c5f2:	d104      	bne.n	800c5fe <HAL_TIM_PWM_Start+0xe6>
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	2202      	movs	r2, #2
 800c5f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c5fc:	e00b      	b.n	800c616 <HAL_TIM_PWM_Start+0xfe>
 800c5fe:	683b      	ldr	r3, [r7, #0]
 800c600:	2b10      	cmp	r3, #16
 800c602:	d104      	bne.n	800c60e <HAL_TIM_PWM_Start+0xf6>
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	2202      	movs	r2, #2
 800c608:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c60c:	e003      	b.n	800c616 <HAL_TIM_PWM_Start+0xfe>
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	2202      	movs	r2, #2
 800c612:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	2201      	movs	r2, #1
 800c61c:	6839      	ldr	r1, [r7, #0]
 800c61e:	4618      	mov	r0, r3
 800c620:	f001 f93e 	bl	800d8a0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	4a38      	ldr	r2, [pc, #224]	; (800c70c <HAL_TIM_PWM_Start+0x1f4>)
 800c62a:	4293      	cmp	r3, r2
 800c62c:	d013      	beq.n	800c656 <HAL_TIM_PWM_Start+0x13e>
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	4a37      	ldr	r2, [pc, #220]	; (800c710 <HAL_TIM_PWM_Start+0x1f8>)
 800c634:	4293      	cmp	r3, r2
 800c636:	d00e      	beq.n	800c656 <HAL_TIM_PWM_Start+0x13e>
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	4a35      	ldr	r2, [pc, #212]	; (800c714 <HAL_TIM_PWM_Start+0x1fc>)
 800c63e:	4293      	cmp	r3, r2
 800c640:	d009      	beq.n	800c656 <HAL_TIM_PWM_Start+0x13e>
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	4a34      	ldr	r2, [pc, #208]	; (800c718 <HAL_TIM_PWM_Start+0x200>)
 800c648:	4293      	cmp	r3, r2
 800c64a:	d004      	beq.n	800c656 <HAL_TIM_PWM_Start+0x13e>
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	4a32      	ldr	r2, [pc, #200]	; (800c71c <HAL_TIM_PWM_Start+0x204>)
 800c652:	4293      	cmp	r3, r2
 800c654:	d101      	bne.n	800c65a <HAL_TIM_PWM_Start+0x142>
 800c656:	2301      	movs	r3, #1
 800c658:	e000      	b.n	800c65c <HAL_TIM_PWM_Start+0x144>
 800c65a:	2300      	movs	r3, #0
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d007      	beq.n	800c670 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c66e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	4a25      	ldr	r2, [pc, #148]	; (800c70c <HAL_TIM_PWM_Start+0x1f4>)
 800c676:	4293      	cmp	r3, r2
 800c678:	d022      	beq.n	800c6c0 <HAL_TIM_PWM_Start+0x1a8>
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c682:	d01d      	beq.n	800c6c0 <HAL_TIM_PWM_Start+0x1a8>
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	4a25      	ldr	r2, [pc, #148]	; (800c720 <HAL_TIM_PWM_Start+0x208>)
 800c68a:	4293      	cmp	r3, r2
 800c68c:	d018      	beq.n	800c6c0 <HAL_TIM_PWM_Start+0x1a8>
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	4a24      	ldr	r2, [pc, #144]	; (800c724 <HAL_TIM_PWM_Start+0x20c>)
 800c694:	4293      	cmp	r3, r2
 800c696:	d013      	beq.n	800c6c0 <HAL_TIM_PWM_Start+0x1a8>
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	4a22      	ldr	r2, [pc, #136]	; (800c728 <HAL_TIM_PWM_Start+0x210>)
 800c69e:	4293      	cmp	r3, r2
 800c6a0:	d00e      	beq.n	800c6c0 <HAL_TIM_PWM_Start+0x1a8>
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	4a1a      	ldr	r2, [pc, #104]	; (800c710 <HAL_TIM_PWM_Start+0x1f8>)
 800c6a8:	4293      	cmp	r3, r2
 800c6aa:	d009      	beq.n	800c6c0 <HAL_TIM_PWM_Start+0x1a8>
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	4a1e      	ldr	r2, [pc, #120]	; (800c72c <HAL_TIM_PWM_Start+0x214>)
 800c6b2:	4293      	cmp	r3, r2
 800c6b4:	d004      	beq.n	800c6c0 <HAL_TIM_PWM_Start+0x1a8>
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	4a16      	ldr	r2, [pc, #88]	; (800c714 <HAL_TIM_PWM_Start+0x1fc>)
 800c6bc:	4293      	cmp	r3, r2
 800c6be:	d115      	bne.n	800c6ec <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	689a      	ldr	r2, [r3, #8]
 800c6c6:	4b1a      	ldr	r3, [pc, #104]	; (800c730 <HAL_TIM_PWM_Start+0x218>)
 800c6c8:	4013      	ands	r3, r2
 800c6ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	2b06      	cmp	r3, #6
 800c6d0:	d015      	beq.n	800c6fe <HAL_TIM_PWM_Start+0x1e6>
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c6d8:	d011      	beq.n	800c6fe <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	681a      	ldr	r2, [r3, #0]
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	f042 0201 	orr.w	r2, r2, #1
 800c6e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c6ea:	e008      	b.n	800c6fe <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	681a      	ldr	r2, [r3, #0]
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	f042 0201 	orr.w	r2, r2, #1
 800c6fa:	601a      	str	r2, [r3, #0]
 800c6fc:	e000      	b.n	800c700 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c6fe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c700:	2300      	movs	r3, #0
}
 800c702:	4618      	mov	r0, r3
 800c704:	3710      	adds	r7, #16
 800c706:	46bd      	mov	sp, r7
 800c708:	bd80      	pop	{r7, pc}
 800c70a:	bf00      	nop
 800c70c:	40010000 	.word	0x40010000
 800c710:	40010400 	.word	0x40010400
 800c714:	40014000 	.word	0x40014000
 800c718:	40014400 	.word	0x40014400
 800c71c:	40014800 	.word	0x40014800
 800c720:	40000400 	.word	0x40000400
 800c724:	40000800 	.word	0x40000800
 800c728:	40000c00 	.word	0x40000c00
 800c72c:	40001800 	.word	0x40001800
 800c730:	00010007 	.word	0x00010007

0800c734 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800c734:	b580      	push	{r7, lr}
 800c736:	b086      	sub	sp, #24
 800c738:	af00      	add	r7, sp, #0
 800c73a:	6078      	str	r0, [r7, #4]
 800c73c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	2b00      	cmp	r3, #0
 800c742:	d101      	bne.n	800c748 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800c744:	2301      	movs	r3, #1
 800c746:	e08f      	b.n	800c868 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c74e:	b2db      	uxtb	r3, r3
 800c750:	2b00      	cmp	r3, #0
 800c752:	d106      	bne.n	800c762 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	2200      	movs	r2, #0
 800c758:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800c75c:	6878      	ldr	r0, [r7, #4]
 800c75e:	f7f6 fdc5 	bl	80032ec <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	2202      	movs	r2, #2
 800c766:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	6899      	ldr	r1, [r3, #8]
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	681a      	ldr	r2, [r3, #0]
 800c774:	4b3e      	ldr	r3, [pc, #248]	; (800c870 <HAL_TIM_Encoder_Init+0x13c>)
 800c776:	400b      	ands	r3, r1
 800c778:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	681a      	ldr	r2, [r3, #0]
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	3304      	adds	r3, #4
 800c782:	4619      	mov	r1, r3
 800c784:	4610      	mov	r0, r2
 800c786:	f000 fc7d 	bl	800d084 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	689b      	ldr	r3, [r3, #8]
 800c790:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	699b      	ldr	r3, [r3, #24]
 800c798:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	6a1b      	ldr	r3, [r3, #32]
 800c7a0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800c7a2:	683b      	ldr	r3, [r7, #0]
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	697a      	ldr	r2, [r7, #20]
 800c7a8:	4313      	orrs	r3, r2
 800c7aa:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800c7ac:	693a      	ldr	r2, [r7, #16]
 800c7ae:	4b31      	ldr	r3, [pc, #196]	; (800c874 <HAL_TIM_Encoder_Init+0x140>)
 800c7b0:	4013      	ands	r3, r2
 800c7b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800c7b4:	683b      	ldr	r3, [r7, #0]
 800c7b6:	689a      	ldr	r2, [r3, #8]
 800c7b8:	683b      	ldr	r3, [r7, #0]
 800c7ba:	699b      	ldr	r3, [r3, #24]
 800c7bc:	021b      	lsls	r3, r3, #8
 800c7be:	4313      	orrs	r3, r2
 800c7c0:	693a      	ldr	r2, [r7, #16]
 800c7c2:	4313      	orrs	r3, r2
 800c7c4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800c7c6:	693a      	ldr	r2, [r7, #16]
 800c7c8:	4b2b      	ldr	r3, [pc, #172]	; (800c878 <HAL_TIM_Encoder_Init+0x144>)
 800c7ca:	4013      	ands	r3, r2
 800c7cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800c7ce:	693a      	ldr	r2, [r7, #16]
 800c7d0:	4b2a      	ldr	r3, [pc, #168]	; (800c87c <HAL_TIM_Encoder_Init+0x148>)
 800c7d2:	4013      	ands	r3, r2
 800c7d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800c7d6:	683b      	ldr	r3, [r7, #0]
 800c7d8:	68da      	ldr	r2, [r3, #12]
 800c7da:	683b      	ldr	r3, [r7, #0]
 800c7dc:	69db      	ldr	r3, [r3, #28]
 800c7de:	021b      	lsls	r3, r3, #8
 800c7e0:	4313      	orrs	r3, r2
 800c7e2:	693a      	ldr	r2, [r7, #16]
 800c7e4:	4313      	orrs	r3, r2
 800c7e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800c7e8:	683b      	ldr	r3, [r7, #0]
 800c7ea:	691b      	ldr	r3, [r3, #16]
 800c7ec:	011a      	lsls	r2, r3, #4
 800c7ee:	683b      	ldr	r3, [r7, #0]
 800c7f0:	6a1b      	ldr	r3, [r3, #32]
 800c7f2:	031b      	lsls	r3, r3, #12
 800c7f4:	4313      	orrs	r3, r2
 800c7f6:	693a      	ldr	r2, [r7, #16]
 800c7f8:	4313      	orrs	r3, r2
 800c7fa:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800c802:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800c80a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800c80c:	683b      	ldr	r3, [r7, #0]
 800c80e:	685a      	ldr	r2, [r3, #4]
 800c810:	683b      	ldr	r3, [r7, #0]
 800c812:	695b      	ldr	r3, [r3, #20]
 800c814:	011b      	lsls	r3, r3, #4
 800c816:	4313      	orrs	r3, r2
 800c818:	68fa      	ldr	r2, [r7, #12]
 800c81a:	4313      	orrs	r3, r2
 800c81c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	697a      	ldr	r2, [r7, #20]
 800c824:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	693a      	ldr	r2, [r7, #16]
 800c82c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	68fa      	ldr	r2, [r7, #12]
 800c834:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	2201      	movs	r2, #1
 800c83a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	2201      	movs	r2, #1
 800c842:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	2201      	movs	r2, #1
 800c84a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	2201      	movs	r2, #1
 800c852:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	2201      	movs	r2, #1
 800c85a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	2201      	movs	r2, #1
 800c862:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c866:	2300      	movs	r3, #0
}
 800c868:	4618      	mov	r0, r3
 800c86a:	3718      	adds	r7, #24
 800c86c:	46bd      	mov	sp, r7
 800c86e:	bd80      	pop	{r7, pc}
 800c870:	fffebff8 	.word	0xfffebff8
 800c874:	fffffcfc 	.word	0xfffffcfc
 800c878:	fffff3f3 	.word	0xfffff3f3
 800c87c:	ffff0f0f 	.word	0xffff0f0f

0800c880 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c880:	b580      	push	{r7, lr}
 800c882:	b084      	sub	sp, #16
 800c884:	af00      	add	r7, sp, #0
 800c886:	6078      	str	r0, [r7, #4]
 800c888:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c890:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800c898:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c8a0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c8a8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800c8aa:	683b      	ldr	r3, [r7, #0]
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d110      	bne.n	800c8d2 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800c8b0:	7bfb      	ldrb	r3, [r7, #15]
 800c8b2:	2b01      	cmp	r3, #1
 800c8b4:	d102      	bne.n	800c8bc <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800c8b6:	7b7b      	ldrb	r3, [r7, #13]
 800c8b8:	2b01      	cmp	r3, #1
 800c8ba:	d001      	beq.n	800c8c0 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 800c8bc:	2301      	movs	r3, #1
 800c8be:	e089      	b.n	800c9d4 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	2202      	movs	r2, #2
 800c8c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	2202      	movs	r2, #2
 800c8cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c8d0:	e031      	b.n	800c936 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800c8d2:	683b      	ldr	r3, [r7, #0]
 800c8d4:	2b04      	cmp	r3, #4
 800c8d6:	d110      	bne.n	800c8fa <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800c8d8:	7bbb      	ldrb	r3, [r7, #14]
 800c8da:	2b01      	cmp	r3, #1
 800c8dc:	d102      	bne.n	800c8e4 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800c8de:	7b3b      	ldrb	r3, [r7, #12]
 800c8e0:	2b01      	cmp	r3, #1
 800c8e2:	d001      	beq.n	800c8e8 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 800c8e4:	2301      	movs	r3, #1
 800c8e6:	e075      	b.n	800c9d4 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	2202      	movs	r2, #2
 800c8ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	2202      	movs	r2, #2
 800c8f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c8f8:	e01d      	b.n	800c936 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800c8fa:	7bfb      	ldrb	r3, [r7, #15]
 800c8fc:	2b01      	cmp	r3, #1
 800c8fe:	d108      	bne.n	800c912 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800c900:	7bbb      	ldrb	r3, [r7, #14]
 800c902:	2b01      	cmp	r3, #1
 800c904:	d105      	bne.n	800c912 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800c906:	7b7b      	ldrb	r3, [r7, #13]
 800c908:	2b01      	cmp	r3, #1
 800c90a:	d102      	bne.n	800c912 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800c90c:	7b3b      	ldrb	r3, [r7, #12]
 800c90e:	2b01      	cmp	r3, #1
 800c910:	d001      	beq.n	800c916 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 800c912:	2301      	movs	r3, #1
 800c914:	e05e      	b.n	800c9d4 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	2202      	movs	r2, #2
 800c91a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	2202      	movs	r2, #2
 800c922:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	2202      	movs	r2, #2
 800c92a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	2202      	movs	r2, #2
 800c932:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 800c936:	683b      	ldr	r3, [r7, #0]
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d003      	beq.n	800c944 <HAL_TIM_Encoder_Start_IT+0xc4>
 800c93c:	683b      	ldr	r3, [r7, #0]
 800c93e:	2b04      	cmp	r3, #4
 800c940:	d010      	beq.n	800c964 <HAL_TIM_Encoder_Start_IT+0xe4>
 800c942:	e01f      	b.n	800c984 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	2201      	movs	r2, #1
 800c94a:	2100      	movs	r1, #0
 800c94c:	4618      	mov	r0, r3
 800c94e:	f000 ffa7 	bl	800d8a0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	68da      	ldr	r2, [r3, #12]
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	f042 0202 	orr.w	r2, r2, #2
 800c960:	60da      	str	r2, [r3, #12]
      break;
 800c962:	e02e      	b.n	800c9c2 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	2201      	movs	r2, #1
 800c96a:	2104      	movs	r1, #4
 800c96c:	4618      	mov	r0, r3
 800c96e:	f000 ff97 	bl	800d8a0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	68da      	ldr	r2, [r3, #12]
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	f042 0204 	orr.w	r2, r2, #4
 800c980:	60da      	str	r2, [r3, #12]
      break;
 800c982:	e01e      	b.n	800c9c2 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	2201      	movs	r2, #1
 800c98a:	2100      	movs	r1, #0
 800c98c:	4618      	mov	r0, r3
 800c98e:	f000 ff87 	bl	800d8a0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	2201      	movs	r2, #1
 800c998:	2104      	movs	r1, #4
 800c99a:	4618      	mov	r0, r3
 800c99c:	f000 ff80 	bl	800d8a0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	68da      	ldr	r2, [r3, #12]
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	f042 0202 	orr.w	r2, r2, #2
 800c9ae:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	68da      	ldr	r2, [r3, #12]
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	f042 0204 	orr.w	r2, r2, #4
 800c9be:	60da      	str	r2, [r3, #12]
      break;
 800c9c0:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	681a      	ldr	r2, [r3, #0]
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	f042 0201 	orr.w	r2, r2, #1
 800c9d0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800c9d2:	2300      	movs	r3, #0
}
 800c9d4:	4618      	mov	r0, r3
 800c9d6:	3710      	adds	r7, #16
 800c9d8:	46bd      	mov	sp, r7
 800c9da:	bd80      	pop	{r7, pc}

0800c9dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c9dc:	b580      	push	{r7, lr}
 800c9de:	b082      	sub	sp, #8
 800c9e0:	af00      	add	r7, sp, #0
 800c9e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	691b      	ldr	r3, [r3, #16]
 800c9ea:	f003 0302 	and.w	r3, r3, #2
 800c9ee:	2b02      	cmp	r3, #2
 800c9f0:	d122      	bne.n	800ca38 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	68db      	ldr	r3, [r3, #12]
 800c9f8:	f003 0302 	and.w	r3, r3, #2
 800c9fc:	2b02      	cmp	r3, #2
 800c9fe:	d11b      	bne.n	800ca38 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	f06f 0202 	mvn.w	r2, #2
 800ca08:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	2201      	movs	r2, #1
 800ca0e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	699b      	ldr	r3, [r3, #24]
 800ca16:	f003 0303 	and.w	r3, r3, #3
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d003      	beq.n	800ca26 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ca1e:	6878      	ldr	r0, [r7, #4]
 800ca20:	f000 fb12 	bl	800d048 <HAL_TIM_IC_CaptureCallback>
 800ca24:	e005      	b.n	800ca32 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ca26:	6878      	ldr	r0, [r7, #4]
 800ca28:	f000 fb04 	bl	800d034 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ca2c:	6878      	ldr	r0, [r7, #4]
 800ca2e:	f000 fb15 	bl	800d05c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	2200      	movs	r2, #0
 800ca36:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	691b      	ldr	r3, [r3, #16]
 800ca3e:	f003 0304 	and.w	r3, r3, #4
 800ca42:	2b04      	cmp	r3, #4
 800ca44:	d122      	bne.n	800ca8c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	68db      	ldr	r3, [r3, #12]
 800ca4c:	f003 0304 	and.w	r3, r3, #4
 800ca50:	2b04      	cmp	r3, #4
 800ca52:	d11b      	bne.n	800ca8c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	f06f 0204 	mvn.w	r2, #4
 800ca5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	2202      	movs	r2, #2
 800ca62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	699b      	ldr	r3, [r3, #24]
 800ca6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d003      	beq.n	800ca7a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ca72:	6878      	ldr	r0, [r7, #4]
 800ca74:	f000 fae8 	bl	800d048 <HAL_TIM_IC_CaptureCallback>
 800ca78:	e005      	b.n	800ca86 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ca7a:	6878      	ldr	r0, [r7, #4]
 800ca7c:	f000 fada 	bl	800d034 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ca80:	6878      	ldr	r0, [r7, #4]
 800ca82:	f000 faeb 	bl	800d05c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	2200      	movs	r2, #0
 800ca8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	691b      	ldr	r3, [r3, #16]
 800ca92:	f003 0308 	and.w	r3, r3, #8
 800ca96:	2b08      	cmp	r3, #8
 800ca98:	d122      	bne.n	800cae0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	68db      	ldr	r3, [r3, #12]
 800caa0:	f003 0308 	and.w	r3, r3, #8
 800caa4:	2b08      	cmp	r3, #8
 800caa6:	d11b      	bne.n	800cae0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	f06f 0208 	mvn.w	r2, #8
 800cab0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	2204      	movs	r2, #4
 800cab6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	69db      	ldr	r3, [r3, #28]
 800cabe:	f003 0303 	and.w	r3, r3, #3
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d003      	beq.n	800cace <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cac6:	6878      	ldr	r0, [r7, #4]
 800cac8:	f000 fabe 	bl	800d048 <HAL_TIM_IC_CaptureCallback>
 800cacc:	e005      	b.n	800cada <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cace:	6878      	ldr	r0, [r7, #4]
 800cad0:	f000 fab0 	bl	800d034 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cad4:	6878      	ldr	r0, [r7, #4]
 800cad6:	f000 fac1 	bl	800d05c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	2200      	movs	r2, #0
 800cade:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	691b      	ldr	r3, [r3, #16]
 800cae6:	f003 0310 	and.w	r3, r3, #16
 800caea:	2b10      	cmp	r3, #16
 800caec:	d122      	bne.n	800cb34 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	68db      	ldr	r3, [r3, #12]
 800caf4:	f003 0310 	and.w	r3, r3, #16
 800caf8:	2b10      	cmp	r3, #16
 800cafa:	d11b      	bne.n	800cb34 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	f06f 0210 	mvn.w	r2, #16
 800cb04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	2208      	movs	r2, #8
 800cb0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	69db      	ldr	r3, [r3, #28]
 800cb12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d003      	beq.n	800cb22 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cb1a:	6878      	ldr	r0, [r7, #4]
 800cb1c:	f000 fa94 	bl	800d048 <HAL_TIM_IC_CaptureCallback>
 800cb20:	e005      	b.n	800cb2e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cb22:	6878      	ldr	r0, [r7, #4]
 800cb24:	f000 fa86 	bl	800d034 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cb28:	6878      	ldr	r0, [r7, #4]
 800cb2a:	f000 fa97 	bl	800d05c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	2200      	movs	r2, #0
 800cb32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	691b      	ldr	r3, [r3, #16]
 800cb3a:	f003 0301 	and.w	r3, r3, #1
 800cb3e:	2b01      	cmp	r3, #1
 800cb40:	d10e      	bne.n	800cb60 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	68db      	ldr	r3, [r3, #12]
 800cb48:	f003 0301 	and.w	r3, r3, #1
 800cb4c:	2b01      	cmp	r3, #1
 800cb4e:	d107      	bne.n	800cb60 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	f06f 0201 	mvn.w	r2, #1
 800cb58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800cb5a:	6878      	ldr	r0, [r7, #4]
 800cb5c:	f7f6 fa2e 	bl	8002fbc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	691b      	ldr	r3, [r3, #16]
 800cb66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cb6a:	2b80      	cmp	r3, #128	; 0x80
 800cb6c:	d10e      	bne.n	800cb8c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	68db      	ldr	r3, [r3, #12]
 800cb74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cb78:	2b80      	cmp	r3, #128	; 0x80
 800cb7a:	d107      	bne.n	800cb8c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800cb84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800cb86:	6878      	ldr	r0, [r7, #4]
 800cb88:	f000 ff48 	bl	800da1c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	691b      	ldr	r3, [r3, #16]
 800cb92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cb96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cb9a:	d10e      	bne.n	800cbba <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	68db      	ldr	r3, [r3, #12]
 800cba2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cba6:	2b80      	cmp	r3, #128	; 0x80
 800cba8:	d107      	bne.n	800cbba <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800cbb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800cbb4:	6878      	ldr	r0, [r7, #4]
 800cbb6:	f000 ff3b 	bl	800da30 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	691b      	ldr	r3, [r3, #16]
 800cbc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cbc4:	2b40      	cmp	r3, #64	; 0x40
 800cbc6:	d10e      	bne.n	800cbe6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	68db      	ldr	r3, [r3, #12]
 800cbce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cbd2:	2b40      	cmp	r3, #64	; 0x40
 800cbd4:	d107      	bne.n	800cbe6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800cbde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800cbe0:	6878      	ldr	r0, [r7, #4]
 800cbe2:	f000 fa45 	bl	800d070 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	691b      	ldr	r3, [r3, #16]
 800cbec:	f003 0320 	and.w	r3, r3, #32
 800cbf0:	2b20      	cmp	r3, #32
 800cbf2:	d10e      	bne.n	800cc12 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	68db      	ldr	r3, [r3, #12]
 800cbfa:	f003 0320 	and.w	r3, r3, #32
 800cbfe:	2b20      	cmp	r3, #32
 800cc00:	d107      	bne.n	800cc12 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	f06f 0220 	mvn.w	r2, #32
 800cc0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800cc0c:	6878      	ldr	r0, [r7, #4]
 800cc0e:	f000 fefb 	bl	800da08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800cc12:	bf00      	nop
 800cc14:	3708      	adds	r7, #8
 800cc16:	46bd      	mov	sp, r7
 800cc18:	bd80      	pop	{r7, pc}
	...

0800cc1c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800cc1c:	b580      	push	{r7, lr}
 800cc1e:	b086      	sub	sp, #24
 800cc20:	af00      	add	r7, sp, #0
 800cc22:	60f8      	str	r0, [r7, #12]
 800cc24:	60b9      	str	r1, [r7, #8]
 800cc26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800cc28:	2300      	movs	r3, #0
 800cc2a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cc32:	2b01      	cmp	r3, #1
 800cc34:	d101      	bne.n	800cc3a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800cc36:	2302      	movs	r3, #2
 800cc38:	e0ff      	b.n	800ce3a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	2201      	movs	r2, #1
 800cc3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	2b14      	cmp	r3, #20
 800cc46:	f200 80f0 	bhi.w	800ce2a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800cc4a:	a201      	add	r2, pc, #4	; (adr r2, 800cc50 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800cc4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc50:	0800cca5 	.word	0x0800cca5
 800cc54:	0800ce2b 	.word	0x0800ce2b
 800cc58:	0800ce2b 	.word	0x0800ce2b
 800cc5c:	0800ce2b 	.word	0x0800ce2b
 800cc60:	0800cce5 	.word	0x0800cce5
 800cc64:	0800ce2b 	.word	0x0800ce2b
 800cc68:	0800ce2b 	.word	0x0800ce2b
 800cc6c:	0800ce2b 	.word	0x0800ce2b
 800cc70:	0800cd27 	.word	0x0800cd27
 800cc74:	0800ce2b 	.word	0x0800ce2b
 800cc78:	0800ce2b 	.word	0x0800ce2b
 800cc7c:	0800ce2b 	.word	0x0800ce2b
 800cc80:	0800cd67 	.word	0x0800cd67
 800cc84:	0800ce2b 	.word	0x0800ce2b
 800cc88:	0800ce2b 	.word	0x0800ce2b
 800cc8c:	0800ce2b 	.word	0x0800ce2b
 800cc90:	0800cda9 	.word	0x0800cda9
 800cc94:	0800ce2b 	.word	0x0800ce2b
 800cc98:	0800ce2b 	.word	0x0800ce2b
 800cc9c:	0800ce2b 	.word	0x0800ce2b
 800cca0:	0800cde9 	.word	0x0800cde9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	68b9      	ldr	r1, [r7, #8]
 800ccaa:	4618      	mov	r0, r3
 800ccac:	f000 fa84 	bl	800d1b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	699a      	ldr	r2, [r3, #24]
 800ccb6:	68fb      	ldr	r3, [r7, #12]
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	f042 0208 	orr.w	r2, r2, #8
 800ccbe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	699a      	ldr	r2, [r3, #24]
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	f022 0204 	bic.w	r2, r2, #4
 800ccce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	6999      	ldr	r1, [r3, #24]
 800ccd6:	68bb      	ldr	r3, [r7, #8]
 800ccd8:	691a      	ldr	r2, [r3, #16]
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	430a      	orrs	r2, r1
 800cce0:	619a      	str	r2, [r3, #24]
      break;
 800cce2:	e0a5      	b.n	800ce30 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	68b9      	ldr	r1, [r7, #8]
 800ccea:	4618      	mov	r0, r3
 800ccec:	f000 faf4 	bl	800d2d8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	699a      	ldr	r2, [r3, #24]
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ccfe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	699a      	ldr	r2, [r3, #24]
 800cd06:	68fb      	ldr	r3, [r7, #12]
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cd0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	6999      	ldr	r1, [r3, #24]
 800cd16:	68bb      	ldr	r3, [r7, #8]
 800cd18:	691b      	ldr	r3, [r3, #16]
 800cd1a:	021a      	lsls	r2, r3, #8
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	430a      	orrs	r2, r1
 800cd22:	619a      	str	r2, [r3, #24]
      break;
 800cd24:	e084      	b.n	800ce30 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	68b9      	ldr	r1, [r7, #8]
 800cd2c:	4618      	mov	r0, r3
 800cd2e:	f000 fb5d 	bl	800d3ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	69da      	ldr	r2, [r3, #28]
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	f042 0208 	orr.w	r2, r2, #8
 800cd40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	69da      	ldr	r2, [r3, #28]
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	f022 0204 	bic.w	r2, r2, #4
 800cd50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800cd52:	68fb      	ldr	r3, [r7, #12]
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	69d9      	ldr	r1, [r3, #28]
 800cd58:	68bb      	ldr	r3, [r7, #8]
 800cd5a:	691a      	ldr	r2, [r3, #16]
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	430a      	orrs	r2, r1
 800cd62:	61da      	str	r2, [r3, #28]
      break;
 800cd64:	e064      	b.n	800ce30 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	68b9      	ldr	r1, [r7, #8]
 800cd6c:	4618      	mov	r0, r3
 800cd6e:	f000 fbc5 	bl	800d4fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	69da      	ldr	r2, [r3, #28]
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cd80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	69da      	ldr	r2, [r3, #28]
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cd90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	69d9      	ldr	r1, [r3, #28]
 800cd98:	68bb      	ldr	r3, [r7, #8]
 800cd9a:	691b      	ldr	r3, [r3, #16]
 800cd9c:	021a      	lsls	r2, r3, #8
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	430a      	orrs	r2, r1
 800cda4:	61da      	str	r2, [r3, #28]
      break;
 800cda6:	e043      	b.n	800ce30 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	68b9      	ldr	r1, [r7, #8]
 800cdae:	4618      	mov	r0, r3
 800cdb0:	f000 fc0e 	bl	800d5d0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	f042 0208 	orr.w	r2, r2, #8
 800cdc2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	f022 0204 	bic.w	r2, r2, #4
 800cdd2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800cdda:	68bb      	ldr	r3, [r7, #8]
 800cddc:	691a      	ldr	r2, [r3, #16]
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	430a      	orrs	r2, r1
 800cde4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800cde6:	e023      	b.n	800ce30 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	68b9      	ldr	r1, [r7, #8]
 800cdee:	4618      	mov	r0, r3
 800cdf0:	f000 fc52 	bl	800d698 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ce02:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ce0a:	68fb      	ldr	r3, [r7, #12]
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ce12:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ce1a:	68bb      	ldr	r3, [r7, #8]
 800ce1c:	691b      	ldr	r3, [r3, #16]
 800ce1e:	021a      	lsls	r2, r3, #8
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	430a      	orrs	r2, r1
 800ce26:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ce28:	e002      	b.n	800ce30 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800ce2a:	2301      	movs	r3, #1
 800ce2c:	75fb      	strb	r3, [r7, #23]
      break;
 800ce2e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	2200      	movs	r2, #0
 800ce34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ce38:	7dfb      	ldrb	r3, [r7, #23]
}
 800ce3a:	4618      	mov	r0, r3
 800ce3c:	3718      	adds	r7, #24
 800ce3e:	46bd      	mov	sp, r7
 800ce40:	bd80      	pop	{r7, pc}
 800ce42:	bf00      	nop

0800ce44 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ce44:	b580      	push	{r7, lr}
 800ce46:	b084      	sub	sp, #16
 800ce48:	af00      	add	r7, sp, #0
 800ce4a:	6078      	str	r0, [r7, #4]
 800ce4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ce4e:	2300      	movs	r3, #0
 800ce50:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ce58:	2b01      	cmp	r3, #1
 800ce5a:	d101      	bne.n	800ce60 <HAL_TIM_ConfigClockSource+0x1c>
 800ce5c:	2302      	movs	r3, #2
 800ce5e:	e0dc      	b.n	800d01a <HAL_TIM_ConfigClockSource+0x1d6>
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	2201      	movs	r2, #1
 800ce64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	2202      	movs	r2, #2
 800ce6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	689b      	ldr	r3, [r3, #8]
 800ce76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ce78:	68ba      	ldr	r2, [r7, #8]
 800ce7a:	4b6a      	ldr	r3, [pc, #424]	; (800d024 <HAL_TIM_ConfigClockSource+0x1e0>)
 800ce7c:	4013      	ands	r3, r2
 800ce7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ce80:	68bb      	ldr	r3, [r7, #8]
 800ce82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ce86:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	68ba      	ldr	r2, [r7, #8]
 800ce8e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ce90:	683b      	ldr	r3, [r7, #0]
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	4a64      	ldr	r2, [pc, #400]	; (800d028 <HAL_TIM_ConfigClockSource+0x1e4>)
 800ce96:	4293      	cmp	r3, r2
 800ce98:	f000 80a9 	beq.w	800cfee <HAL_TIM_ConfigClockSource+0x1aa>
 800ce9c:	4a62      	ldr	r2, [pc, #392]	; (800d028 <HAL_TIM_ConfigClockSource+0x1e4>)
 800ce9e:	4293      	cmp	r3, r2
 800cea0:	f200 80ae 	bhi.w	800d000 <HAL_TIM_ConfigClockSource+0x1bc>
 800cea4:	4a61      	ldr	r2, [pc, #388]	; (800d02c <HAL_TIM_ConfigClockSource+0x1e8>)
 800cea6:	4293      	cmp	r3, r2
 800cea8:	f000 80a1 	beq.w	800cfee <HAL_TIM_ConfigClockSource+0x1aa>
 800ceac:	4a5f      	ldr	r2, [pc, #380]	; (800d02c <HAL_TIM_ConfigClockSource+0x1e8>)
 800ceae:	4293      	cmp	r3, r2
 800ceb0:	f200 80a6 	bhi.w	800d000 <HAL_TIM_ConfigClockSource+0x1bc>
 800ceb4:	4a5e      	ldr	r2, [pc, #376]	; (800d030 <HAL_TIM_ConfigClockSource+0x1ec>)
 800ceb6:	4293      	cmp	r3, r2
 800ceb8:	f000 8099 	beq.w	800cfee <HAL_TIM_ConfigClockSource+0x1aa>
 800cebc:	4a5c      	ldr	r2, [pc, #368]	; (800d030 <HAL_TIM_ConfigClockSource+0x1ec>)
 800cebe:	4293      	cmp	r3, r2
 800cec0:	f200 809e 	bhi.w	800d000 <HAL_TIM_ConfigClockSource+0x1bc>
 800cec4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800cec8:	f000 8091 	beq.w	800cfee <HAL_TIM_ConfigClockSource+0x1aa>
 800cecc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800ced0:	f200 8096 	bhi.w	800d000 <HAL_TIM_ConfigClockSource+0x1bc>
 800ced4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ced8:	f000 8089 	beq.w	800cfee <HAL_TIM_ConfigClockSource+0x1aa>
 800cedc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cee0:	f200 808e 	bhi.w	800d000 <HAL_TIM_ConfigClockSource+0x1bc>
 800cee4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cee8:	d03e      	beq.n	800cf68 <HAL_TIM_ConfigClockSource+0x124>
 800ceea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ceee:	f200 8087 	bhi.w	800d000 <HAL_TIM_ConfigClockSource+0x1bc>
 800cef2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cef6:	f000 8086 	beq.w	800d006 <HAL_TIM_ConfigClockSource+0x1c2>
 800cefa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cefe:	d87f      	bhi.n	800d000 <HAL_TIM_ConfigClockSource+0x1bc>
 800cf00:	2b70      	cmp	r3, #112	; 0x70
 800cf02:	d01a      	beq.n	800cf3a <HAL_TIM_ConfigClockSource+0xf6>
 800cf04:	2b70      	cmp	r3, #112	; 0x70
 800cf06:	d87b      	bhi.n	800d000 <HAL_TIM_ConfigClockSource+0x1bc>
 800cf08:	2b60      	cmp	r3, #96	; 0x60
 800cf0a:	d050      	beq.n	800cfae <HAL_TIM_ConfigClockSource+0x16a>
 800cf0c:	2b60      	cmp	r3, #96	; 0x60
 800cf0e:	d877      	bhi.n	800d000 <HAL_TIM_ConfigClockSource+0x1bc>
 800cf10:	2b50      	cmp	r3, #80	; 0x50
 800cf12:	d03c      	beq.n	800cf8e <HAL_TIM_ConfigClockSource+0x14a>
 800cf14:	2b50      	cmp	r3, #80	; 0x50
 800cf16:	d873      	bhi.n	800d000 <HAL_TIM_ConfigClockSource+0x1bc>
 800cf18:	2b40      	cmp	r3, #64	; 0x40
 800cf1a:	d058      	beq.n	800cfce <HAL_TIM_ConfigClockSource+0x18a>
 800cf1c:	2b40      	cmp	r3, #64	; 0x40
 800cf1e:	d86f      	bhi.n	800d000 <HAL_TIM_ConfigClockSource+0x1bc>
 800cf20:	2b30      	cmp	r3, #48	; 0x30
 800cf22:	d064      	beq.n	800cfee <HAL_TIM_ConfigClockSource+0x1aa>
 800cf24:	2b30      	cmp	r3, #48	; 0x30
 800cf26:	d86b      	bhi.n	800d000 <HAL_TIM_ConfigClockSource+0x1bc>
 800cf28:	2b20      	cmp	r3, #32
 800cf2a:	d060      	beq.n	800cfee <HAL_TIM_ConfigClockSource+0x1aa>
 800cf2c:	2b20      	cmp	r3, #32
 800cf2e:	d867      	bhi.n	800d000 <HAL_TIM_ConfigClockSource+0x1bc>
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d05c      	beq.n	800cfee <HAL_TIM_ConfigClockSource+0x1aa>
 800cf34:	2b10      	cmp	r3, #16
 800cf36:	d05a      	beq.n	800cfee <HAL_TIM_ConfigClockSource+0x1aa>
 800cf38:	e062      	b.n	800d000 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800cf3e:	683b      	ldr	r3, [r7, #0]
 800cf40:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800cf42:	683b      	ldr	r3, [r7, #0]
 800cf44:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800cf46:	683b      	ldr	r3, [r7, #0]
 800cf48:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800cf4a:	f000 fc89 	bl	800d860 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	689b      	ldr	r3, [r3, #8]
 800cf54:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800cf56:	68bb      	ldr	r3, [r7, #8]
 800cf58:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800cf5c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	68ba      	ldr	r2, [r7, #8]
 800cf64:	609a      	str	r2, [r3, #8]
      break;
 800cf66:	e04f      	b.n	800d008 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800cf6c:	683b      	ldr	r3, [r7, #0]
 800cf6e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800cf70:	683b      	ldr	r3, [r7, #0]
 800cf72:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800cf74:	683b      	ldr	r3, [r7, #0]
 800cf76:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800cf78:	f000 fc72 	bl	800d860 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	689a      	ldr	r2, [r3, #8]
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800cf8a:	609a      	str	r2, [r3, #8]
      break;
 800cf8c:	e03c      	b.n	800d008 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800cf92:	683b      	ldr	r3, [r7, #0]
 800cf94:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800cf96:	683b      	ldr	r3, [r7, #0]
 800cf98:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800cf9a:	461a      	mov	r2, r3
 800cf9c:	f000 fbe2 	bl	800d764 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	2150      	movs	r1, #80	; 0x50
 800cfa6:	4618      	mov	r0, r3
 800cfa8:	f000 fc3c 	bl	800d824 <TIM_ITRx_SetConfig>
      break;
 800cfac:	e02c      	b.n	800d008 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800cfb2:	683b      	ldr	r3, [r7, #0]
 800cfb4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800cfb6:	683b      	ldr	r3, [r7, #0]
 800cfb8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800cfba:	461a      	mov	r2, r3
 800cfbc:	f000 fc01 	bl	800d7c2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	2160      	movs	r1, #96	; 0x60
 800cfc6:	4618      	mov	r0, r3
 800cfc8:	f000 fc2c 	bl	800d824 <TIM_ITRx_SetConfig>
      break;
 800cfcc:	e01c      	b.n	800d008 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800cfd2:	683b      	ldr	r3, [r7, #0]
 800cfd4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800cfd6:	683b      	ldr	r3, [r7, #0]
 800cfd8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800cfda:	461a      	mov	r2, r3
 800cfdc:	f000 fbc2 	bl	800d764 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	2140      	movs	r1, #64	; 0x40
 800cfe6:	4618      	mov	r0, r3
 800cfe8:	f000 fc1c 	bl	800d824 <TIM_ITRx_SetConfig>
      break;
 800cfec:	e00c      	b.n	800d008 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	681a      	ldr	r2, [r3, #0]
 800cff2:	683b      	ldr	r3, [r7, #0]
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	4619      	mov	r1, r3
 800cff8:	4610      	mov	r0, r2
 800cffa:	f000 fc13 	bl	800d824 <TIM_ITRx_SetConfig>
      break;
 800cffe:	e003      	b.n	800d008 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800d000:	2301      	movs	r3, #1
 800d002:	73fb      	strb	r3, [r7, #15]
      break;
 800d004:	e000      	b.n	800d008 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800d006:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	2201      	movs	r2, #1
 800d00c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	2200      	movs	r2, #0
 800d014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d018:	7bfb      	ldrb	r3, [r7, #15]
}
 800d01a:	4618      	mov	r0, r3
 800d01c:	3710      	adds	r7, #16
 800d01e:	46bd      	mov	sp, r7
 800d020:	bd80      	pop	{r7, pc}
 800d022:	bf00      	nop
 800d024:	ffceff88 	.word	0xffceff88
 800d028:	00100040 	.word	0x00100040
 800d02c:	00100030 	.word	0x00100030
 800d030:	00100020 	.word	0x00100020

0800d034 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d034:	b480      	push	{r7}
 800d036:	b083      	sub	sp, #12
 800d038:	af00      	add	r7, sp, #0
 800d03a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d03c:	bf00      	nop
 800d03e:	370c      	adds	r7, #12
 800d040:	46bd      	mov	sp, r7
 800d042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d046:	4770      	bx	lr

0800d048 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d048:	b480      	push	{r7}
 800d04a:	b083      	sub	sp, #12
 800d04c:	af00      	add	r7, sp, #0
 800d04e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d050:	bf00      	nop
 800d052:	370c      	adds	r7, #12
 800d054:	46bd      	mov	sp, r7
 800d056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d05a:	4770      	bx	lr

0800d05c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d05c:	b480      	push	{r7}
 800d05e:	b083      	sub	sp, #12
 800d060:	af00      	add	r7, sp, #0
 800d062:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d064:	bf00      	nop
 800d066:	370c      	adds	r7, #12
 800d068:	46bd      	mov	sp, r7
 800d06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d06e:	4770      	bx	lr

0800d070 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d070:	b480      	push	{r7}
 800d072:	b083      	sub	sp, #12
 800d074:	af00      	add	r7, sp, #0
 800d076:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d078:	bf00      	nop
 800d07a:	370c      	adds	r7, #12
 800d07c:	46bd      	mov	sp, r7
 800d07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d082:	4770      	bx	lr

0800d084 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800d084:	b480      	push	{r7}
 800d086:	b085      	sub	sp, #20
 800d088:	af00      	add	r7, sp, #0
 800d08a:	6078      	str	r0, [r7, #4]
 800d08c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	4a40      	ldr	r2, [pc, #256]	; (800d198 <TIM_Base_SetConfig+0x114>)
 800d098:	4293      	cmp	r3, r2
 800d09a:	d013      	beq.n	800d0c4 <TIM_Base_SetConfig+0x40>
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d0a2:	d00f      	beq.n	800d0c4 <TIM_Base_SetConfig+0x40>
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	4a3d      	ldr	r2, [pc, #244]	; (800d19c <TIM_Base_SetConfig+0x118>)
 800d0a8:	4293      	cmp	r3, r2
 800d0aa:	d00b      	beq.n	800d0c4 <TIM_Base_SetConfig+0x40>
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	4a3c      	ldr	r2, [pc, #240]	; (800d1a0 <TIM_Base_SetConfig+0x11c>)
 800d0b0:	4293      	cmp	r3, r2
 800d0b2:	d007      	beq.n	800d0c4 <TIM_Base_SetConfig+0x40>
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	4a3b      	ldr	r2, [pc, #236]	; (800d1a4 <TIM_Base_SetConfig+0x120>)
 800d0b8:	4293      	cmp	r3, r2
 800d0ba:	d003      	beq.n	800d0c4 <TIM_Base_SetConfig+0x40>
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	4a3a      	ldr	r2, [pc, #232]	; (800d1a8 <TIM_Base_SetConfig+0x124>)
 800d0c0:	4293      	cmp	r3, r2
 800d0c2:	d108      	bne.n	800d0d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d0ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d0cc:	683b      	ldr	r3, [r7, #0]
 800d0ce:	685b      	ldr	r3, [r3, #4]
 800d0d0:	68fa      	ldr	r2, [r7, #12]
 800d0d2:	4313      	orrs	r3, r2
 800d0d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	4a2f      	ldr	r2, [pc, #188]	; (800d198 <TIM_Base_SetConfig+0x114>)
 800d0da:	4293      	cmp	r3, r2
 800d0dc:	d01f      	beq.n	800d11e <TIM_Base_SetConfig+0x9a>
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d0e4:	d01b      	beq.n	800d11e <TIM_Base_SetConfig+0x9a>
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	4a2c      	ldr	r2, [pc, #176]	; (800d19c <TIM_Base_SetConfig+0x118>)
 800d0ea:	4293      	cmp	r3, r2
 800d0ec:	d017      	beq.n	800d11e <TIM_Base_SetConfig+0x9a>
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	4a2b      	ldr	r2, [pc, #172]	; (800d1a0 <TIM_Base_SetConfig+0x11c>)
 800d0f2:	4293      	cmp	r3, r2
 800d0f4:	d013      	beq.n	800d11e <TIM_Base_SetConfig+0x9a>
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	4a2a      	ldr	r2, [pc, #168]	; (800d1a4 <TIM_Base_SetConfig+0x120>)
 800d0fa:	4293      	cmp	r3, r2
 800d0fc:	d00f      	beq.n	800d11e <TIM_Base_SetConfig+0x9a>
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	4a29      	ldr	r2, [pc, #164]	; (800d1a8 <TIM_Base_SetConfig+0x124>)
 800d102:	4293      	cmp	r3, r2
 800d104:	d00b      	beq.n	800d11e <TIM_Base_SetConfig+0x9a>
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	4a28      	ldr	r2, [pc, #160]	; (800d1ac <TIM_Base_SetConfig+0x128>)
 800d10a:	4293      	cmp	r3, r2
 800d10c:	d007      	beq.n	800d11e <TIM_Base_SetConfig+0x9a>
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	4a27      	ldr	r2, [pc, #156]	; (800d1b0 <TIM_Base_SetConfig+0x12c>)
 800d112:	4293      	cmp	r3, r2
 800d114:	d003      	beq.n	800d11e <TIM_Base_SetConfig+0x9a>
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	4a26      	ldr	r2, [pc, #152]	; (800d1b4 <TIM_Base_SetConfig+0x130>)
 800d11a:	4293      	cmp	r3, r2
 800d11c:	d108      	bne.n	800d130 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d11e:	68fb      	ldr	r3, [r7, #12]
 800d120:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d124:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d126:	683b      	ldr	r3, [r7, #0]
 800d128:	68db      	ldr	r3, [r3, #12]
 800d12a:	68fa      	ldr	r2, [r7, #12]
 800d12c:	4313      	orrs	r3, r2
 800d12e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d130:	68fb      	ldr	r3, [r7, #12]
 800d132:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d136:	683b      	ldr	r3, [r7, #0]
 800d138:	695b      	ldr	r3, [r3, #20]
 800d13a:	4313      	orrs	r3, r2
 800d13c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	68fa      	ldr	r2, [r7, #12]
 800d142:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d144:	683b      	ldr	r3, [r7, #0]
 800d146:	689a      	ldr	r2, [r3, #8]
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d14c:	683b      	ldr	r3, [r7, #0]
 800d14e:	681a      	ldr	r2, [r3, #0]
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	4a10      	ldr	r2, [pc, #64]	; (800d198 <TIM_Base_SetConfig+0x114>)
 800d158:	4293      	cmp	r3, r2
 800d15a:	d00f      	beq.n	800d17c <TIM_Base_SetConfig+0xf8>
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	4a12      	ldr	r2, [pc, #72]	; (800d1a8 <TIM_Base_SetConfig+0x124>)
 800d160:	4293      	cmp	r3, r2
 800d162:	d00b      	beq.n	800d17c <TIM_Base_SetConfig+0xf8>
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	4a11      	ldr	r2, [pc, #68]	; (800d1ac <TIM_Base_SetConfig+0x128>)
 800d168:	4293      	cmp	r3, r2
 800d16a:	d007      	beq.n	800d17c <TIM_Base_SetConfig+0xf8>
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	4a10      	ldr	r2, [pc, #64]	; (800d1b0 <TIM_Base_SetConfig+0x12c>)
 800d170:	4293      	cmp	r3, r2
 800d172:	d003      	beq.n	800d17c <TIM_Base_SetConfig+0xf8>
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	4a0f      	ldr	r2, [pc, #60]	; (800d1b4 <TIM_Base_SetConfig+0x130>)
 800d178:	4293      	cmp	r3, r2
 800d17a:	d103      	bne.n	800d184 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d17c:	683b      	ldr	r3, [r7, #0]
 800d17e:	691a      	ldr	r2, [r3, #16]
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	2201      	movs	r2, #1
 800d188:	615a      	str	r2, [r3, #20]
}
 800d18a:	bf00      	nop
 800d18c:	3714      	adds	r7, #20
 800d18e:	46bd      	mov	sp, r7
 800d190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d194:	4770      	bx	lr
 800d196:	bf00      	nop
 800d198:	40010000 	.word	0x40010000
 800d19c:	40000400 	.word	0x40000400
 800d1a0:	40000800 	.word	0x40000800
 800d1a4:	40000c00 	.word	0x40000c00
 800d1a8:	40010400 	.word	0x40010400
 800d1ac:	40014000 	.word	0x40014000
 800d1b0:	40014400 	.word	0x40014400
 800d1b4:	40014800 	.word	0x40014800

0800d1b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d1b8:	b480      	push	{r7}
 800d1ba:	b087      	sub	sp, #28
 800d1bc:	af00      	add	r7, sp, #0
 800d1be:	6078      	str	r0, [r7, #4]
 800d1c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	6a1b      	ldr	r3, [r3, #32]
 800d1c6:	f023 0201 	bic.w	r2, r3, #1
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	6a1b      	ldr	r3, [r3, #32]
 800d1d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	685b      	ldr	r3, [r3, #4]
 800d1d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	699b      	ldr	r3, [r3, #24]
 800d1de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d1e0:	68fa      	ldr	r2, [r7, #12]
 800d1e2:	4b37      	ldr	r3, [pc, #220]	; (800d2c0 <TIM_OC1_SetConfig+0x108>)
 800d1e4:	4013      	ands	r3, r2
 800d1e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	f023 0303 	bic.w	r3, r3, #3
 800d1ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d1f0:	683b      	ldr	r3, [r7, #0]
 800d1f2:	681b      	ldr	r3, [r3, #0]
 800d1f4:	68fa      	ldr	r2, [r7, #12]
 800d1f6:	4313      	orrs	r3, r2
 800d1f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d1fa:	697b      	ldr	r3, [r7, #20]
 800d1fc:	f023 0302 	bic.w	r3, r3, #2
 800d200:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d202:	683b      	ldr	r3, [r7, #0]
 800d204:	689b      	ldr	r3, [r3, #8]
 800d206:	697a      	ldr	r2, [r7, #20]
 800d208:	4313      	orrs	r3, r2
 800d20a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	4a2d      	ldr	r2, [pc, #180]	; (800d2c4 <TIM_OC1_SetConfig+0x10c>)
 800d210:	4293      	cmp	r3, r2
 800d212:	d00f      	beq.n	800d234 <TIM_OC1_SetConfig+0x7c>
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	4a2c      	ldr	r2, [pc, #176]	; (800d2c8 <TIM_OC1_SetConfig+0x110>)
 800d218:	4293      	cmp	r3, r2
 800d21a:	d00b      	beq.n	800d234 <TIM_OC1_SetConfig+0x7c>
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	4a2b      	ldr	r2, [pc, #172]	; (800d2cc <TIM_OC1_SetConfig+0x114>)
 800d220:	4293      	cmp	r3, r2
 800d222:	d007      	beq.n	800d234 <TIM_OC1_SetConfig+0x7c>
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	4a2a      	ldr	r2, [pc, #168]	; (800d2d0 <TIM_OC1_SetConfig+0x118>)
 800d228:	4293      	cmp	r3, r2
 800d22a:	d003      	beq.n	800d234 <TIM_OC1_SetConfig+0x7c>
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	4a29      	ldr	r2, [pc, #164]	; (800d2d4 <TIM_OC1_SetConfig+0x11c>)
 800d230:	4293      	cmp	r3, r2
 800d232:	d10c      	bne.n	800d24e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d234:	697b      	ldr	r3, [r7, #20]
 800d236:	f023 0308 	bic.w	r3, r3, #8
 800d23a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d23c:	683b      	ldr	r3, [r7, #0]
 800d23e:	68db      	ldr	r3, [r3, #12]
 800d240:	697a      	ldr	r2, [r7, #20]
 800d242:	4313      	orrs	r3, r2
 800d244:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d246:	697b      	ldr	r3, [r7, #20]
 800d248:	f023 0304 	bic.w	r3, r3, #4
 800d24c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	4a1c      	ldr	r2, [pc, #112]	; (800d2c4 <TIM_OC1_SetConfig+0x10c>)
 800d252:	4293      	cmp	r3, r2
 800d254:	d00f      	beq.n	800d276 <TIM_OC1_SetConfig+0xbe>
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	4a1b      	ldr	r2, [pc, #108]	; (800d2c8 <TIM_OC1_SetConfig+0x110>)
 800d25a:	4293      	cmp	r3, r2
 800d25c:	d00b      	beq.n	800d276 <TIM_OC1_SetConfig+0xbe>
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	4a1a      	ldr	r2, [pc, #104]	; (800d2cc <TIM_OC1_SetConfig+0x114>)
 800d262:	4293      	cmp	r3, r2
 800d264:	d007      	beq.n	800d276 <TIM_OC1_SetConfig+0xbe>
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	4a19      	ldr	r2, [pc, #100]	; (800d2d0 <TIM_OC1_SetConfig+0x118>)
 800d26a:	4293      	cmp	r3, r2
 800d26c:	d003      	beq.n	800d276 <TIM_OC1_SetConfig+0xbe>
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	4a18      	ldr	r2, [pc, #96]	; (800d2d4 <TIM_OC1_SetConfig+0x11c>)
 800d272:	4293      	cmp	r3, r2
 800d274:	d111      	bne.n	800d29a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d276:	693b      	ldr	r3, [r7, #16]
 800d278:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d27c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d27e:	693b      	ldr	r3, [r7, #16]
 800d280:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d284:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d286:	683b      	ldr	r3, [r7, #0]
 800d288:	695b      	ldr	r3, [r3, #20]
 800d28a:	693a      	ldr	r2, [r7, #16]
 800d28c:	4313      	orrs	r3, r2
 800d28e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d290:	683b      	ldr	r3, [r7, #0]
 800d292:	699b      	ldr	r3, [r3, #24]
 800d294:	693a      	ldr	r2, [r7, #16]
 800d296:	4313      	orrs	r3, r2
 800d298:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	693a      	ldr	r2, [r7, #16]
 800d29e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	68fa      	ldr	r2, [r7, #12]
 800d2a4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d2a6:	683b      	ldr	r3, [r7, #0]
 800d2a8:	685a      	ldr	r2, [r3, #4]
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	697a      	ldr	r2, [r7, #20]
 800d2b2:	621a      	str	r2, [r3, #32]
}
 800d2b4:	bf00      	nop
 800d2b6:	371c      	adds	r7, #28
 800d2b8:	46bd      	mov	sp, r7
 800d2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2be:	4770      	bx	lr
 800d2c0:	fffeff8f 	.word	0xfffeff8f
 800d2c4:	40010000 	.word	0x40010000
 800d2c8:	40010400 	.word	0x40010400
 800d2cc:	40014000 	.word	0x40014000
 800d2d0:	40014400 	.word	0x40014400
 800d2d4:	40014800 	.word	0x40014800

0800d2d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d2d8:	b480      	push	{r7}
 800d2da:	b087      	sub	sp, #28
 800d2dc:	af00      	add	r7, sp, #0
 800d2de:	6078      	str	r0, [r7, #4]
 800d2e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	6a1b      	ldr	r3, [r3, #32]
 800d2e6:	f023 0210 	bic.w	r2, r3, #16
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	6a1b      	ldr	r3, [r3, #32]
 800d2f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	685b      	ldr	r3, [r3, #4]
 800d2f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	699b      	ldr	r3, [r3, #24]
 800d2fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d300:	68fa      	ldr	r2, [r7, #12]
 800d302:	4b34      	ldr	r3, [pc, #208]	; (800d3d4 <TIM_OC2_SetConfig+0xfc>)
 800d304:	4013      	ands	r3, r2
 800d306:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d30e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d310:	683b      	ldr	r3, [r7, #0]
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	021b      	lsls	r3, r3, #8
 800d316:	68fa      	ldr	r2, [r7, #12]
 800d318:	4313      	orrs	r3, r2
 800d31a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d31c:	697b      	ldr	r3, [r7, #20]
 800d31e:	f023 0320 	bic.w	r3, r3, #32
 800d322:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d324:	683b      	ldr	r3, [r7, #0]
 800d326:	689b      	ldr	r3, [r3, #8]
 800d328:	011b      	lsls	r3, r3, #4
 800d32a:	697a      	ldr	r2, [r7, #20]
 800d32c:	4313      	orrs	r3, r2
 800d32e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	4a29      	ldr	r2, [pc, #164]	; (800d3d8 <TIM_OC2_SetConfig+0x100>)
 800d334:	4293      	cmp	r3, r2
 800d336:	d003      	beq.n	800d340 <TIM_OC2_SetConfig+0x68>
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	4a28      	ldr	r2, [pc, #160]	; (800d3dc <TIM_OC2_SetConfig+0x104>)
 800d33c:	4293      	cmp	r3, r2
 800d33e:	d10d      	bne.n	800d35c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d340:	697b      	ldr	r3, [r7, #20]
 800d342:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d346:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d348:	683b      	ldr	r3, [r7, #0]
 800d34a:	68db      	ldr	r3, [r3, #12]
 800d34c:	011b      	lsls	r3, r3, #4
 800d34e:	697a      	ldr	r2, [r7, #20]
 800d350:	4313      	orrs	r3, r2
 800d352:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d354:	697b      	ldr	r3, [r7, #20]
 800d356:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d35a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	4a1e      	ldr	r2, [pc, #120]	; (800d3d8 <TIM_OC2_SetConfig+0x100>)
 800d360:	4293      	cmp	r3, r2
 800d362:	d00f      	beq.n	800d384 <TIM_OC2_SetConfig+0xac>
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	4a1d      	ldr	r2, [pc, #116]	; (800d3dc <TIM_OC2_SetConfig+0x104>)
 800d368:	4293      	cmp	r3, r2
 800d36a:	d00b      	beq.n	800d384 <TIM_OC2_SetConfig+0xac>
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	4a1c      	ldr	r2, [pc, #112]	; (800d3e0 <TIM_OC2_SetConfig+0x108>)
 800d370:	4293      	cmp	r3, r2
 800d372:	d007      	beq.n	800d384 <TIM_OC2_SetConfig+0xac>
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	4a1b      	ldr	r2, [pc, #108]	; (800d3e4 <TIM_OC2_SetConfig+0x10c>)
 800d378:	4293      	cmp	r3, r2
 800d37a:	d003      	beq.n	800d384 <TIM_OC2_SetConfig+0xac>
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	4a1a      	ldr	r2, [pc, #104]	; (800d3e8 <TIM_OC2_SetConfig+0x110>)
 800d380:	4293      	cmp	r3, r2
 800d382:	d113      	bne.n	800d3ac <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d384:	693b      	ldr	r3, [r7, #16]
 800d386:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d38a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d38c:	693b      	ldr	r3, [r7, #16]
 800d38e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d392:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d394:	683b      	ldr	r3, [r7, #0]
 800d396:	695b      	ldr	r3, [r3, #20]
 800d398:	009b      	lsls	r3, r3, #2
 800d39a:	693a      	ldr	r2, [r7, #16]
 800d39c:	4313      	orrs	r3, r2
 800d39e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d3a0:	683b      	ldr	r3, [r7, #0]
 800d3a2:	699b      	ldr	r3, [r3, #24]
 800d3a4:	009b      	lsls	r3, r3, #2
 800d3a6:	693a      	ldr	r2, [r7, #16]
 800d3a8:	4313      	orrs	r3, r2
 800d3aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	693a      	ldr	r2, [r7, #16]
 800d3b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	68fa      	ldr	r2, [r7, #12]
 800d3b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d3b8:	683b      	ldr	r3, [r7, #0]
 800d3ba:	685a      	ldr	r2, [r3, #4]
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	697a      	ldr	r2, [r7, #20]
 800d3c4:	621a      	str	r2, [r3, #32]
}
 800d3c6:	bf00      	nop
 800d3c8:	371c      	adds	r7, #28
 800d3ca:	46bd      	mov	sp, r7
 800d3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3d0:	4770      	bx	lr
 800d3d2:	bf00      	nop
 800d3d4:	feff8fff 	.word	0xfeff8fff
 800d3d8:	40010000 	.word	0x40010000
 800d3dc:	40010400 	.word	0x40010400
 800d3e0:	40014000 	.word	0x40014000
 800d3e4:	40014400 	.word	0x40014400
 800d3e8:	40014800 	.word	0x40014800

0800d3ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d3ec:	b480      	push	{r7}
 800d3ee:	b087      	sub	sp, #28
 800d3f0:	af00      	add	r7, sp, #0
 800d3f2:	6078      	str	r0, [r7, #4]
 800d3f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	6a1b      	ldr	r3, [r3, #32]
 800d3fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	6a1b      	ldr	r3, [r3, #32]
 800d406:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	685b      	ldr	r3, [r3, #4]
 800d40c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	69db      	ldr	r3, [r3, #28]
 800d412:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d414:	68fa      	ldr	r2, [r7, #12]
 800d416:	4b33      	ldr	r3, [pc, #204]	; (800d4e4 <TIM_OC3_SetConfig+0xf8>)
 800d418:	4013      	ands	r3, r2
 800d41a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	f023 0303 	bic.w	r3, r3, #3
 800d422:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d424:	683b      	ldr	r3, [r7, #0]
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	68fa      	ldr	r2, [r7, #12]
 800d42a:	4313      	orrs	r3, r2
 800d42c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d42e:	697b      	ldr	r3, [r7, #20]
 800d430:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d434:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d436:	683b      	ldr	r3, [r7, #0]
 800d438:	689b      	ldr	r3, [r3, #8]
 800d43a:	021b      	lsls	r3, r3, #8
 800d43c:	697a      	ldr	r2, [r7, #20]
 800d43e:	4313      	orrs	r3, r2
 800d440:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	4a28      	ldr	r2, [pc, #160]	; (800d4e8 <TIM_OC3_SetConfig+0xfc>)
 800d446:	4293      	cmp	r3, r2
 800d448:	d003      	beq.n	800d452 <TIM_OC3_SetConfig+0x66>
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	4a27      	ldr	r2, [pc, #156]	; (800d4ec <TIM_OC3_SetConfig+0x100>)
 800d44e:	4293      	cmp	r3, r2
 800d450:	d10d      	bne.n	800d46e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d452:	697b      	ldr	r3, [r7, #20]
 800d454:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d458:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d45a:	683b      	ldr	r3, [r7, #0]
 800d45c:	68db      	ldr	r3, [r3, #12]
 800d45e:	021b      	lsls	r3, r3, #8
 800d460:	697a      	ldr	r2, [r7, #20]
 800d462:	4313      	orrs	r3, r2
 800d464:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d466:	697b      	ldr	r3, [r7, #20]
 800d468:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d46c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	4a1d      	ldr	r2, [pc, #116]	; (800d4e8 <TIM_OC3_SetConfig+0xfc>)
 800d472:	4293      	cmp	r3, r2
 800d474:	d00f      	beq.n	800d496 <TIM_OC3_SetConfig+0xaa>
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	4a1c      	ldr	r2, [pc, #112]	; (800d4ec <TIM_OC3_SetConfig+0x100>)
 800d47a:	4293      	cmp	r3, r2
 800d47c:	d00b      	beq.n	800d496 <TIM_OC3_SetConfig+0xaa>
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	4a1b      	ldr	r2, [pc, #108]	; (800d4f0 <TIM_OC3_SetConfig+0x104>)
 800d482:	4293      	cmp	r3, r2
 800d484:	d007      	beq.n	800d496 <TIM_OC3_SetConfig+0xaa>
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	4a1a      	ldr	r2, [pc, #104]	; (800d4f4 <TIM_OC3_SetConfig+0x108>)
 800d48a:	4293      	cmp	r3, r2
 800d48c:	d003      	beq.n	800d496 <TIM_OC3_SetConfig+0xaa>
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	4a19      	ldr	r2, [pc, #100]	; (800d4f8 <TIM_OC3_SetConfig+0x10c>)
 800d492:	4293      	cmp	r3, r2
 800d494:	d113      	bne.n	800d4be <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d496:	693b      	ldr	r3, [r7, #16]
 800d498:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d49c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d49e:	693b      	ldr	r3, [r7, #16]
 800d4a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d4a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d4a6:	683b      	ldr	r3, [r7, #0]
 800d4a8:	695b      	ldr	r3, [r3, #20]
 800d4aa:	011b      	lsls	r3, r3, #4
 800d4ac:	693a      	ldr	r2, [r7, #16]
 800d4ae:	4313      	orrs	r3, r2
 800d4b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d4b2:	683b      	ldr	r3, [r7, #0]
 800d4b4:	699b      	ldr	r3, [r3, #24]
 800d4b6:	011b      	lsls	r3, r3, #4
 800d4b8:	693a      	ldr	r2, [r7, #16]
 800d4ba:	4313      	orrs	r3, r2
 800d4bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	693a      	ldr	r2, [r7, #16]
 800d4c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	68fa      	ldr	r2, [r7, #12]
 800d4c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d4ca:	683b      	ldr	r3, [r7, #0]
 800d4cc:	685a      	ldr	r2, [r3, #4]
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	697a      	ldr	r2, [r7, #20]
 800d4d6:	621a      	str	r2, [r3, #32]
}
 800d4d8:	bf00      	nop
 800d4da:	371c      	adds	r7, #28
 800d4dc:	46bd      	mov	sp, r7
 800d4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4e2:	4770      	bx	lr
 800d4e4:	fffeff8f 	.word	0xfffeff8f
 800d4e8:	40010000 	.word	0x40010000
 800d4ec:	40010400 	.word	0x40010400
 800d4f0:	40014000 	.word	0x40014000
 800d4f4:	40014400 	.word	0x40014400
 800d4f8:	40014800 	.word	0x40014800

0800d4fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d4fc:	b480      	push	{r7}
 800d4fe:	b087      	sub	sp, #28
 800d500:	af00      	add	r7, sp, #0
 800d502:	6078      	str	r0, [r7, #4]
 800d504:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	6a1b      	ldr	r3, [r3, #32]
 800d50a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	6a1b      	ldr	r3, [r3, #32]
 800d516:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	685b      	ldr	r3, [r3, #4]
 800d51c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	69db      	ldr	r3, [r3, #28]
 800d522:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d524:	68fa      	ldr	r2, [r7, #12]
 800d526:	4b24      	ldr	r3, [pc, #144]	; (800d5b8 <TIM_OC4_SetConfig+0xbc>)
 800d528:	4013      	ands	r3, r2
 800d52a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d532:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d534:	683b      	ldr	r3, [r7, #0]
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	021b      	lsls	r3, r3, #8
 800d53a:	68fa      	ldr	r2, [r7, #12]
 800d53c:	4313      	orrs	r3, r2
 800d53e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d540:	693b      	ldr	r3, [r7, #16]
 800d542:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d546:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d548:	683b      	ldr	r3, [r7, #0]
 800d54a:	689b      	ldr	r3, [r3, #8]
 800d54c:	031b      	lsls	r3, r3, #12
 800d54e:	693a      	ldr	r2, [r7, #16]
 800d550:	4313      	orrs	r3, r2
 800d552:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	4a19      	ldr	r2, [pc, #100]	; (800d5bc <TIM_OC4_SetConfig+0xc0>)
 800d558:	4293      	cmp	r3, r2
 800d55a:	d00f      	beq.n	800d57c <TIM_OC4_SetConfig+0x80>
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	4a18      	ldr	r2, [pc, #96]	; (800d5c0 <TIM_OC4_SetConfig+0xc4>)
 800d560:	4293      	cmp	r3, r2
 800d562:	d00b      	beq.n	800d57c <TIM_OC4_SetConfig+0x80>
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	4a17      	ldr	r2, [pc, #92]	; (800d5c4 <TIM_OC4_SetConfig+0xc8>)
 800d568:	4293      	cmp	r3, r2
 800d56a:	d007      	beq.n	800d57c <TIM_OC4_SetConfig+0x80>
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	4a16      	ldr	r2, [pc, #88]	; (800d5c8 <TIM_OC4_SetConfig+0xcc>)
 800d570:	4293      	cmp	r3, r2
 800d572:	d003      	beq.n	800d57c <TIM_OC4_SetConfig+0x80>
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	4a15      	ldr	r2, [pc, #84]	; (800d5cc <TIM_OC4_SetConfig+0xd0>)
 800d578:	4293      	cmp	r3, r2
 800d57a:	d109      	bne.n	800d590 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d57c:	697b      	ldr	r3, [r7, #20]
 800d57e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d582:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d584:	683b      	ldr	r3, [r7, #0]
 800d586:	695b      	ldr	r3, [r3, #20]
 800d588:	019b      	lsls	r3, r3, #6
 800d58a:	697a      	ldr	r2, [r7, #20]
 800d58c:	4313      	orrs	r3, r2
 800d58e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	697a      	ldr	r2, [r7, #20]
 800d594:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	68fa      	ldr	r2, [r7, #12]
 800d59a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d59c:	683b      	ldr	r3, [r7, #0]
 800d59e:	685a      	ldr	r2, [r3, #4]
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	693a      	ldr	r2, [r7, #16]
 800d5a8:	621a      	str	r2, [r3, #32]
}
 800d5aa:	bf00      	nop
 800d5ac:	371c      	adds	r7, #28
 800d5ae:	46bd      	mov	sp, r7
 800d5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5b4:	4770      	bx	lr
 800d5b6:	bf00      	nop
 800d5b8:	feff8fff 	.word	0xfeff8fff
 800d5bc:	40010000 	.word	0x40010000
 800d5c0:	40010400 	.word	0x40010400
 800d5c4:	40014000 	.word	0x40014000
 800d5c8:	40014400 	.word	0x40014400
 800d5cc:	40014800 	.word	0x40014800

0800d5d0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800d5d0:	b480      	push	{r7}
 800d5d2:	b087      	sub	sp, #28
 800d5d4:	af00      	add	r7, sp, #0
 800d5d6:	6078      	str	r0, [r7, #4]
 800d5d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	6a1b      	ldr	r3, [r3, #32]
 800d5de:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	6a1b      	ldr	r3, [r3, #32]
 800d5ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	685b      	ldr	r3, [r3, #4]
 800d5f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d5f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800d5f8:	68fa      	ldr	r2, [r7, #12]
 800d5fa:	4b21      	ldr	r3, [pc, #132]	; (800d680 <TIM_OC5_SetConfig+0xb0>)
 800d5fc:	4013      	ands	r3, r2
 800d5fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d600:	683b      	ldr	r3, [r7, #0]
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	68fa      	ldr	r2, [r7, #12]
 800d606:	4313      	orrs	r3, r2
 800d608:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800d60a:	693b      	ldr	r3, [r7, #16]
 800d60c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800d610:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800d612:	683b      	ldr	r3, [r7, #0]
 800d614:	689b      	ldr	r3, [r3, #8]
 800d616:	041b      	lsls	r3, r3, #16
 800d618:	693a      	ldr	r2, [r7, #16]
 800d61a:	4313      	orrs	r3, r2
 800d61c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	4a18      	ldr	r2, [pc, #96]	; (800d684 <TIM_OC5_SetConfig+0xb4>)
 800d622:	4293      	cmp	r3, r2
 800d624:	d00f      	beq.n	800d646 <TIM_OC5_SetConfig+0x76>
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	4a17      	ldr	r2, [pc, #92]	; (800d688 <TIM_OC5_SetConfig+0xb8>)
 800d62a:	4293      	cmp	r3, r2
 800d62c:	d00b      	beq.n	800d646 <TIM_OC5_SetConfig+0x76>
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	4a16      	ldr	r2, [pc, #88]	; (800d68c <TIM_OC5_SetConfig+0xbc>)
 800d632:	4293      	cmp	r3, r2
 800d634:	d007      	beq.n	800d646 <TIM_OC5_SetConfig+0x76>
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	4a15      	ldr	r2, [pc, #84]	; (800d690 <TIM_OC5_SetConfig+0xc0>)
 800d63a:	4293      	cmp	r3, r2
 800d63c:	d003      	beq.n	800d646 <TIM_OC5_SetConfig+0x76>
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	4a14      	ldr	r2, [pc, #80]	; (800d694 <TIM_OC5_SetConfig+0xc4>)
 800d642:	4293      	cmp	r3, r2
 800d644:	d109      	bne.n	800d65a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800d646:	697b      	ldr	r3, [r7, #20]
 800d648:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d64c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800d64e:	683b      	ldr	r3, [r7, #0]
 800d650:	695b      	ldr	r3, [r3, #20]
 800d652:	021b      	lsls	r3, r3, #8
 800d654:	697a      	ldr	r2, [r7, #20]
 800d656:	4313      	orrs	r3, r2
 800d658:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	697a      	ldr	r2, [r7, #20]
 800d65e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	68fa      	ldr	r2, [r7, #12]
 800d664:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800d666:	683b      	ldr	r3, [r7, #0]
 800d668:	685a      	ldr	r2, [r3, #4]
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	693a      	ldr	r2, [r7, #16]
 800d672:	621a      	str	r2, [r3, #32]
}
 800d674:	bf00      	nop
 800d676:	371c      	adds	r7, #28
 800d678:	46bd      	mov	sp, r7
 800d67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d67e:	4770      	bx	lr
 800d680:	fffeff8f 	.word	0xfffeff8f
 800d684:	40010000 	.word	0x40010000
 800d688:	40010400 	.word	0x40010400
 800d68c:	40014000 	.word	0x40014000
 800d690:	40014400 	.word	0x40014400
 800d694:	40014800 	.word	0x40014800

0800d698 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800d698:	b480      	push	{r7}
 800d69a:	b087      	sub	sp, #28
 800d69c:	af00      	add	r7, sp, #0
 800d69e:	6078      	str	r0, [r7, #4]
 800d6a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	6a1b      	ldr	r3, [r3, #32]
 800d6a6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	6a1b      	ldr	r3, [r3, #32]
 800d6b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	685b      	ldr	r3, [r3, #4]
 800d6b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d6be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800d6c0:	68fa      	ldr	r2, [r7, #12]
 800d6c2:	4b22      	ldr	r3, [pc, #136]	; (800d74c <TIM_OC6_SetConfig+0xb4>)
 800d6c4:	4013      	ands	r3, r2
 800d6c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d6c8:	683b      	ldr	r3, [r7, #0]
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	021b      	lsls	r3, r3, #8
 800d6ce:	68fa      	ldr	r2, [r7, #12]
 800d6d0:	4313      	orrs	r3, r2
 800d6d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800d6d4:	693b      	ldr	r3, [r7, #16]
 800d6d6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d6da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800d6dc:	683b      	ldr	r3, [r7, #0]
 800d6de:	689b      	ldr	r3, [r3, #8]
 800d6e0:	051b      	lsls	r3, r3, #20
 800d6e2:	693a      	ldr	r2, [r7, #16]
 800d6e4:	4313      	orrs	r3, r2
 800d6e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	4a19      	ldr	r2, [pc, #100]	; (800d750 <TIM_OC6_SetConfig+0xb8>)
 800d6ec:	4293      	cmp	r3, r2
 800d6ee:	d00f      	beq.n	800d710 <TIM_OC6_SetConfig+0x78>
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	4a18      	ldr	r2, [pc, #96]	; (800d754 <TIM_OC6_SetConfig+0xbc>)
 800d6f4:	4293      	cmp	r3, r2
 800d6f6:	d00b      	beq.n	800d710 <TIM_OC6_SetConfig+0x78>
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	4a17      	ldr	r2, [pc, #92]	; (800d758 <TIM_OC6_SetConfig+0xc0>)
 800d6fc:	4293      	cmp	r3, r2
 800d6fe:	d007      	beq.n	800d710 <TIM_OC6_SetConfig+0x78>
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	4a16      	ldr	r2, [pc, #88]	; (800d75c <TIM_OC6_SetConfig+0xc4>)
 800d704:	4293      	cmp	r3, r2
 800d706:	d003      	beq.n	800d710 <TIM_OC6_SetConfig+0x78>
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	4a15      	ldr	r2, [pc, #84]	; (800d760 <TIM_OC6_SetConfig+0xc8>)
 800d70c:	4293      	cmp	r3, r2
 800d70e:	d109      	bne.n	800d724 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800d710:	697b      	ldr	r3, [r7, #20]
 800d712:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d716:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800d718:	683b      	ldr	r3, [r7, #0]
 800d71a:	695b      	ldr	r3, [r3, #20]
 800d71c:	029b      	lsls	r3, r3, #10
 800d71e:	697a      	ldr	r2, [r7, #20]
 800d720:	4313      	orrs	r3, r2
 800d722:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	697a      	ldr	r2, [r7, #20]
 800d728:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	68fa      	ldr	r2, [r7, #12]
 800d72e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800d730:	683b      	ldr	r3, [r7, #0]
 800d732:	685a      	ldr	r2, [r3, #4]
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	693a      	ldr	r2, [r7, #16]
 800d73c:	621a      	str	r2, [r3, #32]
}
 800d73e:	bf00      	nop
 800d740:	371c      	adds	r7, #28
 800d742:	46bd      	mov	sp, r7
 800d744:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d748:	4770      	bx	lr
 800d74a:	bf00      	nop
 800d74c:	feff8fff 	.word	0xfeff8fff
 800d750:	40010000 	.word	0x40010000
 800d754:	40010400 	.word	0x40010400
 800d758:	40014000 	.word	0x40014000
 800d75c:	40014400 	.word	0x40014400
 800d760:	40014800 	.word	0x40014800

0800d764 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d764:	b480      	push	{r7}
 800d766:	b087      	sub	sp, #28
 800d768:	af00      	add	r7, sp, #0
 800d76a:	60f8      	str	r0, [r7, #12]
 800d76c:	60b9      	str	r1, [r7, #8]
 800d76e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d770:	68fb      	ldr	r3, [r7, #12]
 800d772:	6a1b      	ldr	r3, [r3, #32]
 800d774:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	6a1b      	ldr	r3, [r3, #32]
 800d77a:	f023 0201 	bic.w	r2, r3, #1
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d782:	68fb      	ldr	r3, [r7, #12]
 800d784:	699b      	ldr	r3, [r3, #24]
 800d786:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d788:	693b      	ldr	r3, [r7, #16]
 800d78a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d78e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	011b      	lsls	r3, r3, #4
 800d794:	693a      	ldr	r2, [r7, #16]
 800d796:	4313      	orrs	r3, r2
 800d798:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d79a:	697b      	ldr	r3, [r7, #20]
 800d79c:	f023 030a 	bic.w	r3, r3, #10
 800d7a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d7a2:	697a      	ldr	r2, [r7, #20]
 800d7a4:	68bb      	ldr	r3, [r7, #8]
 800d7a6:	4313      	orrs	r3, r2
 800d7a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	693a      	ldr	r2, [r7, #16]
 800d7ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	697a      	ldr	r2, [r7, #20]
 800d7b4:	621a      	str	r2, [r3, #32]
}
 800d7b6:	bf00      	nop
 800d7b8:	371c      	adds	r7, #28
 800d7ba:	46bd      	mov	sp, r7
 800d7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7c0:	4770      	bx	lr

0800d7c2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d7c2:	b480      	push	{r7}
 800d7c4:	b087      	sub	sp, #28
 800d7c6:	af00      	add	r7, sp, #0
 800d7c8:	60f8      	str	r0, [r7, #12]
 800d7ca:	60b9      	str	r1, [r7, #8]
 800d7cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	6a1b      	ldr	r3, [r3, #32]
 800d7d2:	f023 0210 	bic.w	r2, r3, #16
 800d7d6:	68fb      	ldr	r3, [r7, #12]
 800d7d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d7da:	68fb      	ldr	r3, [r7, #12]
 800d7dc:	699b      	ldr	r3, [r3, #24]
 800d7de:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	6a1b      	ldr	r3, [r3, #32]
 800d7e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d7e6:	697b      	ldr	r3, [r7, #20]
 800d7e8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d7ec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	031b      	lsls	r3, r3, #12
 800d7f2:	697a      	ldr	r2, [r7, #20]
 800d7f4:	4313      	orrs	r3, r2
 800d7f6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d7f8:	693b      	ldr	r3, [r7, #16]
 800d7fa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800d7fe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d800:	68bb      	ldr	r3, [r7, #8]
 800d802:	011b      	lsls	r3, r3, #4
 800d804:	693a      	ldr	r2, [r7, #16]
 800d806:	4313      	orrs	r3, r2
 800d808:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d80a:	68fb      	ldr	r3, [r7, #12]
 800d80c:	697a      	ldr	r2, [r7, #20]
 800d80e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	693a      	ldr	r2, [r7, #16]
 800d814:	621a      	str	r2, [r3, #32]
}
 800d816:	bf00      	nop
 800d818:	371c      	adds	r7, #28
 800d81a:	46bd      	mov	sp, r7
 800d81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d820:	4770      	bx	lr
	...

0800d824 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d824:	b480      	push	{r7}
 800d826:	b085      	sub	sp, #20
 800d828:	af00      	add	r7, sp, #0
 800d82a:	6078      	str	r0, [r7, #4]
 800d82c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	689b      	ldr	r3, [r3, #8]
 800d832:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d834:	68fa      	ldr	r2, [r7, #12]
 800d836:	4b09      	ldr	r3, [pc, #36]	; (800d85c <TIM_ITRx_SetConfig+0x38>)
 800d838:	4013      	ands	r3, r2
 800d83a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d83c:	683a      	ldr	r2, [r7, #0]
 800d83e:	68fb      	ldr	r3, [r7, #12]
 800d840:	4313      	orrs	r3, r2
 800d842:	f043 0307 	orr.w	r3, r3, #7
 800d846:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	68fa      	ldr	r2, [r7, #12]
 800d84c:	609a      	str	r2, [r3, #8]
}
 800d84e:	bf00      	nop
 800d850:	3714      	adds	r7, #20
 800d852:	46bd      	mov	sp, r7
 800d854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d858:	4770      	bx	lr
 800d85a:	bf00      	nop
 800d85c:	ffcfff8f 	.word	0xffcfff8f

0800d860 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d860:	b480      	push	{r7}
 800d862:	b087      	sub	sp, #28
 800d864:	af00      	add	r7, sp, #0
 800d866:	60f8      	str	r0, [r7, #12]
 800d868:	60b9      	str	r1, [r7, #8]
 800d86a:	607a      	str	r2, [r7, #4]
 800d86c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d86e:	68fb      	ldr	r3, [r7, #12]
 800d870:	689b      	ldr	r3, [r3, #8]
 800d872:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d874:	697b      	ldr	r3, [r7, #20]
 800d876:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d87a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d87c:	683b      	ldr	r3, [r7, #0]
 800d87e:	021a      	lsls	r2, r3, #8
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	431a      	orrs	r2, r3
 800d884:	68bb      	ldr	r3, [r7, #8]
 800d886:	4313      	orrs	r3, r2
 800d888:	697a      	ldr	r2, [r7, #20]
 800d88a:	4313      	orrs	r3, r2
 800d88c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d88e:	68fb      	ldr	r3, [r7, #12]
 800d890:	697a      	ldr	r2, [r7, #20]
 800d892:	609a      	str	r2, [r3, #8]
}
 800d894:	bf00      	nop
 800d896:	371c      	adds	r7, #28
 800d898:	46bd      	mov	sp, r7
 800d89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d89e:	4770      	bx	lr

0800d8a0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800d8a0:	b480      	push	{r7}
 800d8a2:	b087      	sub	sp, #28
 800d8a4:	af00      	add	r7, sp, #0
 800d8a6:	60f8      	str	r0, [r7, #12]
 800d8a8:	60b9      	str	r1, [r7, #8]
 800d8aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d8ac:	68bb      	ldr	r3, [r7, #8]
 800d8ae:	f003 031f 	and.w	r3, r3, #31
 800d8b2:	2201      	movs	r2, #1
 800d8b4:	fa02 f303 	lsl.w	r3, r2, r3
 800d8b8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	6a1a      	ldr	r2, [r3, #32]
 800d8be:	697b      	ldr	r3, [r7, #20]
 800d8c0:	43db      	mvns	r3, r3
 800d8c2:	401a      	ands	r2, r3
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d8c8:	68fb      	ldr	r3, [r7, #12]
 800d8ca:	6a1a      	ldr	r2, [r3, #32]
 800d8cc:	68bb      	ldr	r3, [r7, #8]
 800d8ce:	f003 031f 	and.w	r3, r3, #31
 800d8d2:	6879      	ldr	r1, [r7, #4]
 800d8d4:	fa01 f303 	lsl.w	r3, r1, r3
 800d8d8:	431a      	orrs	r2, r3
 800d8da:	68fb      	ldr	r3, [r7, #12]
 800d8dc:	621a      	str	r2, [r3, #32]
}
 800d8de:	bf00      	nop
 800d8e0:	371c      	adds	r7, #28
 800d8e2:	46bd      	mov	sp, r7
 800d8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8e8:	4770      	bx	lr
	...

0800d8ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d8ec:	b480      	push	{r7}
 800d8ee:	b085      	sub	sp, #20
 800d8f0:	af00      	add	r7, sp, #0
 800d8f2:	6078      	str	r0, [r7, #4]
 800d8f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d8fc:	2b01      	cmp	r3, #1
 800d8fe:	d101      	bne.n	800d904 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d900:	2302      	movs	r3, #2
 800d902:	e06d      	b.n	800d9e0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	2201      	movs	r2, #1
 800d908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	2202      	movs	r2, #2
 800d910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	685b      	ldr	r3, [r3, #4]
 800d91a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	689b      	ldr	r3, [r3, #8]
 800d922:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	4a30      	ldr	r2, [pc, #192]	; (800d9ec <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d92a:	4293      	cmp	r3, r2
 800d92c:	d004      	beq.n	800d938 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	4a2f      	ldr	r2, [pc, #188]	; (800d9f0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d934:	4293      	cmp	r3, r2
 800d936:	d108      	bne.n	800d94a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800d93e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d940:	683b      	ldr	r3, [r7, #0]
 800d942:	685b      	ldr	r3, [r3, #4]
 800d944:	68fa      	ldr	r2, [r7, #12]
 800d946:	4313      	orrs	r3, r2
 800d948:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d950:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d952:	683b      	ldr	r3, [r7, #0]
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	68fa      	ldr	r2, [r7, #12]
 800d958:	4313      	orrs	r3, r2
 800d95a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	681b      	ldr	r3, [r3, #0]
 800d960:	68fa      	ldr	r2, [r7, #12]
 800d962:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	4a20      	ldr	r2, [pc, #128]	; (800d9ec <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d96a:	4293      	cmp	r3, r2
 800d96c:	d022      	beq.n	800d9b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	681b      	ldr	r3, [r3, #0]
 800d972:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d976:	d01d      	beq.n	800d9b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	4a1d      	ldr	r2, [pc, #116]	; (800d9f4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800d97e:	4293      	cmp	r3, r2
 800d980:	d018      	beq.n	800d9b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	681b      	ldr	r3, [r3, #0]
 800d986:	4a1c      	ldr	r2, [pc, #112]	; (800d9f8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800d988:	4293      	cmp	r3, r2
 800d98a:	d013      	beq.n	800d9b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	4a1a      	ldr	r2, [pc, #104]	; (800d9fc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800d992:	4293      	cmp	r3, r2
 800d994:	d00e      	beq.n	800d9b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	4a15      	ldr	r2, [pc, #84]	; (800d9f0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d99c:	4293      	cmp	r3, r2
 800d99e:	d009      	beq.n	800d9b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	4a16      	ldr	r2, [pc, #88]	; (800da00 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800d9a6:	4293      	cmp	r3, r2
 800d9a8:	d004      	beq.n	800d9b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	4a15      	ldr	r2, [pc, #84]	; (800da04 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800d9b0:	4293      	cmp	r3, r2
 800d9b2:	d10c      	bne.n	800d9ce <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d9b4:	68bb      	ldr	r3, [r7, #8]
 800d9b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d9ba:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d9bc:	683b      	ldr	r3, [r7, #0]
 800d9be:	689b      	ldr	r3, [r3, #8]
 800d9c0:	68ba      	ldr	r2, [r7, #8]
 800d9c2:	4313      	orrs	r3, r2
 800d9c4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	68ba      	ldr	r2, [r7, #8]
 800d9cc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	2201      	movs	r2, #1
 800d9d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	2200      	movs	r2, #0
 800d9da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d9de:	2300      	movs	r3, #0
}
 800d9e0:	4618      	mov	r0, r3
 800d9e2:	3714      	adds	r7, #20
 800d9e4:	46bd      	mov	sp, r7
 800d9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ea:	4770      	bx	lr
 800d9ec:	40010000 	.word	0x40010000
 800d9f0:	40010400 	.word	0x40010400
 800d9f4:	40000400 	.word	0x40000400
 800d9f8:	40000800 	.word	0x40000800
 800d9fc:	40000c00 	.word	0x40000c00
 800da00:	40001800 	.word	0x40001800
 800da04:	40014000 	.word	0x40014000

0800da08 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800da08:	b480      	push	{r7}
 800da0a:	b083      	sub	sp, #12
 800da0c:	af00      	add	r7, sp, #0
 800da0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800da10:	bf00      	nop
 800da12:	370c      	adds	r7, #12
 800da14:	46bd      	mov	sp, r7
 800da16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da1a:	4770      	bx	lr

0800da1c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800da1c:	b480      	push	{r7}
 800da1e:	b083      	sub	sp, #12
 800da20:	af00      	add	r7, sp, #0
 800da22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800da24:	bf00      	nop
 800da26:	370c      	adds	r7, #12
 800da28:	46bd      	mov	sp, r7
 800da2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da2e:	4770      	bx	lr

0800da30 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800da30:	b480      	push	{r7}
 800da32:	b083      	sub	sp, #12
 800da34:	af00      	add	r7, sp, #0
 800da36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800da38:	bf00      	nop
 800da3a:	370c      	adds	r7, #12
 800da3c:	46bd      	mov	sp, r7
 800da3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da42:	4770      	bx	lr

0800da44 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800da44:	b580      	push	{r7, lr}
 800da46:	b082      	sub	sp, #8
 800da48:	af00      	add	r7, sp, #0
 800da4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d101      	bne.n	800da56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800da52:	2301      	movs	r3, #1
 800da54:	e042      	b.n	800dadc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d106      	bne.n	800da6e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	2200      	movs	r2, #0
 800da64:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800da68:	6878      	ldr	r0, [r7, #4]
 800da6a:	f7f5 fd47 	bl	80034fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	2224      	movs	r2, #36	; 0x24
 800da72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	681a      	ldr	r2, [r3, #0]
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	f022 0201 	bic.w	r2, r2, #1
 800da84:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800da86:	6878      	ldr	r0, [r7, #4]
 800da88:	f000 fc94 	bl	800e3b4 <UART_SetConfig>
 800da8c:	4603      	mov	r3, r0
 800da8e:	2b01      	cmp	r3, #1
 800da90:	d101      	bne.n	800da96 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800da92:	2301      	movs	r3, #1
 800da94:	e022      	b.n	800dadc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d002      	beq.n	800daa4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800da9e:	6878      	ldr	r0, [r7, #4]
 800daa0:	f001 f9f0 	bl	800ee84 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	685a      	ldr	r2, [r3, #4]
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	681b      	ldr	r3, [r3, #0]
 800daae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800dab2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	689a      	ldr	r2, [r3, #8]
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800dac2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	681b      	ldr	r3, [r3, #0]
 800dac8:	681a      	ldr	r2, [r3, #0]
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	681b      	ldr	r3, [r3, #0]
 800dace:	f042 0201 	orr.w	r2, r2, #1
 800dad2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800dad4:	6878      	ldr	r0, [r7, #4]
 800dad6:	f001 fa77 	bl	800efc8 <UART_CheckIdleState>
 800dada:	4603      	mov	r3, r0
}
 800dadc:	4618      	mov	r0, r3
 800dade:	3708      	adds	r7, #8
 800dae0:	46bd      	mov	sp, r7
 800dae2:	bd80      	pop	{r7, pc}

0800dae4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800dae4:	b580      	push	{r7, lr}
 800dae6:	b08a      	sub	sp, #40	; 0x28
 800dae8:	af02      	add	r7, sp, #8
 800daea:	60f8      	str	r0, [r7, #12]
 800daec:	60b9      	str	r1, [r7, #8]
 800daee:	603b      	str	r3, [r7, #0]
 800daf0:	4613      	mov	r3, r2
 800daf2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dafa:	2b20      	cmp	r3, #32
 800dafc:	d17b      	bne.n	800dbf6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800dafe:	68bb      	ldr	r3, [r7, #8]
 800db00:	2b00      	cmp	r3, #0
 800db02:	d002      	beq.n	800db0a <HAL_UART_Transmit+0x26>
 800db04:	88fb      	ldrh	r3, [r7, #6]
 800db06:	2b00      	cmp	r3, #0
 800db08:	d101      	bne.n	800db0e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800db0a:	2301      	movs	r3, #1
 800db0c:	e074      	b.n	800dbf8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800db0e:	68fb      	ldr	r3, [r7, #12]
 800db10:	2200      	movs	r2, #0
 800db12:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	2221      	movs	r2, #33	; 0x21
 800db1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800db1e:	f7f6 f839 	bl	8003b94 <HAL_GetTick>
 800db22:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800db24:	68fb      	ldr	r3, [r7, #12]
 800db26:	88fa      	ldrh	r2, [r7, #6]
 800db28:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	88fa      	ldrh	r2, [r7, #6]
 800db30:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800db34:	68fb      	ldr	r3, [r7, #12]
 800db36:	689b      	ldr	r3, [r3, #8]
 800db38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800db3c:	d108      	bne.n	800db50 <HAL_UART_Transmit+0x6c>
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	691b      	ldr	r3, [r3, #16]
 800db42:	2b00      	cmp	r3, #0
 800db44:	d104      	bne.n	800db50 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800db46:	2300      	movs	r3, #0
 800db48:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800db4a:	68bb      	ldr	r3, [r7, #8]
 800db4c:	61bb      	str	r3, [r7, #24]
 800db4e:	e003      	b.n	800db58 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800db50:	68bb      	ldr	r3, [r7, #8]
 800db52:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800db54:	2300      	movs	r3, #0
 800db56:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800db58:	e030      	b.n	800dbbc <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800db5a:	683b      	ldr	r3, [r7, #0]
 800db5c:	9300      	str	r3, [sp, #0]
 800db5e:	697b      	ldr	r3, [r7, #20]
 800db60:	2200      	movs	r2, #0
 800db62:	2180      	movs	r1, #128	; 0x80
 800db64:	68f8      	ldr	r0, [r7, #12]
 800db66:	f001 fad9 	bl	800f11c <UART_WaitOnFlagUntilTimeout>
 800db6a:	4603      	mov	r3, r0
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	d005      	beq.n	800db7c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800db70:	68fb      	ldr	r3, [r7, #12]
 800db72:	2220      	movs	r2, #32
 800db74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800db78:	2303      	movs	r3, #3
 800db7a:	e03d      	b.n	800dbf8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800db7c:	69fb      	ldr	r3, [r7, #28]
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d10b      	bne.n	800db9a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800db82:	69bb      	ldr	r3, [r7, #24]
 800db84:	881b      	ldrh	r3, [r3, #0]
 800db86:	461a      	mov	r2, r3
 800db88:	68fb      	ldr	r3, [r7, #12]
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800db90:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800db92:	69bb      	ldr	r3, [r7, #24]
 800db94:	3302      	adds	r3, #2
 800db96:	61bb      	str	r3, [r7, #24]
 800db98:	e007      	b.n	800dbaa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800db9a:	69fb      	ldr	r3, [r7, #28]
 800db9c:	781a      	ldrb	r2, [r3, #0]
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800dba4:	69fb      	ldr	r3, [r7, #28]
 800dba6:	3301      	adds	r3, #1
 800dba8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800dbaa:	68fb      	ldr	r3, [r7, #12]
 800dbac:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800dbb0:	b29b      	uxth	r3, r3
 800dbb2:	3b01      	subs	r3, #1
 800dbb4:	b29a      	uxth	r2, r3
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800dbbc:	68fb      	ldr	r3, [r7, #12]
 800dbbe:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800dbc2:	b29b      	uxth	r3, r3
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d1c8      	bne.n	800db5a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800dbc8:	683b      	ldr	r3, [r7, #0]
 800dbca:	9300      	str	r3, [sp, #0]
 800dbcc:	697b      	ldr	r3, [r7, #20]
 800dbce:	2200      	movs	r2, #0
 800dbd0:	2140      	movs	r1, #64	; 0x40
 800dbd2:	68f8      	ldr	r0, [r7, #12]
 800dbd4:	f001 faa2 	bl	800f11c <UART_WaitOnFlagUntilTimeout>
 800dbd8:	4603      	mov	r3, r0
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d005      	beq.n	800dbea <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	2220      	movs	r2, #32
 800dbe2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800dbe6:	2303      	movs	r3, #3
 800dbe8:	e006      	b.n	800dbf8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	2220      	movs	r2, #32
 800dbee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800dbf2:	2300      	movs	r3, #0
 800dbf4:	e000      	b.n	800dbf8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800dbf6:	2302      	movs	r3, #2
  }
}
 800dbf8:	4618      	mov	r0, r3
 800dbfa:	3720      	adds	r7, #32
 800dbfc:	46bd      	mov	sp, r7
 800dbfe:	bd80      	pop	{r7, pc}

0800dc00 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800dc00:	b580      	push	{r7, lr}
 800dc02:	b0ba      	sub	sp, #232	; 0xe8
 800dc04:	af00      	add	r7, sp, #0
 800dc06:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	69db      	ldr	r3, [r3, #28]
 800dc0e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	681b      	ldr	r3, [r3, #0]
 800dc18:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	689b      	ldr	r3, [r3, #8]
 800dc22:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800dc26:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800dc2a:	f640 030f 	movw	r3, #2063	; 0x80f
 800dc2e:	4013      	ands	r3, r2
 800dc30:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800dc34:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d11b      	bne.n	800dc74 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800dc3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dc40:	f003 0320 	and.w	r3, r3, #32
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d015      	beq.n	800dc74 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800dc48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dc4c:	f003 0320 	and.w	r3, r3, #32
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d105      	bne.n	800dc60 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800dc54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800dc58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d009      	beq.n	800dc74 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	f000 8377 	beq.w	800e358 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dc6e:	6878      	ldr	r0, [r7, #4]
 800dc70:	4798      	blx	r3
      }
      return;
 800dc72:	e371      	b.n	800e358 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800dc74:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	f000 8123 	beq.w	800dec4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800dc7e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800dc82:	4b8d      	ldr	r3, [pc, #564]	; (800deb8 <HAL_UART_IRQHandler+0x2b8>)
 800dc84:	4013      	ands	r3, r2
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d106      	bne.n	800dc98 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800dc8a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800dc8e:	4b8b      	ldr	r3, [pc, #556]	; (800debc <HAL_UART_IRQHandler+0x2bc>)
 800dc90:	4013      	ands	r3, r2
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	f000 8116 	beq.w	800dec4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800dc98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dc9c:	f003 0301 	and.w	r3, r3, #1
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d011      	beq.n	800dcc8 <HAL_UART_IRQHandler+0xc8>
 800dca4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dca8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d00b      	beq.n	800dcc8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	681b      	ldr	r3, [r3, #0]
 800dcb4:	2201      	movs	r2, #1
 800dcb6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dcbe:	f043 0201 	orr.w	r2, r3, #1
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800dcc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dccc:	f003 0302 	and.w	r3, r3, #2
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	d011      	beq.n	800dcf8 <HAL_UART_IRQHandler+0xf8>
 800dcd4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800dcd8:	f003 0301 	and.w	r3, r3, #1
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d00b      	beq.n	800dcf8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	681b      	ldr	r3, [r3, #0]
 800dce4:	2202      	movs	r2, #2
 800dce6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dcee:	f043 0204 	orr.w	r2, r3, #4
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800dcf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dcfc:	f003 0304 	and.w	r3, r3, #4
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d011      	beq.n	800dd28 <HAL_UART_IRQHandler+0x128>
 800dd04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800dd08:	f003 0301 	and.w	r3, r3, #1
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d00b      	beq.n	800dd28 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	2204      	movs	r2, #4
 800dd16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dd1e:	f043 0202 	orr.w	r2, r3, #2
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800dd28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dd2c:	f003 0308 	and.w	r3, r3, #8
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d017      	beq.n	800dd64 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800dd34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dd38:	f003 0320 	and.w	r3, r3, #32
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d105      	bne.n	800dd4c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800dd40:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800dd44:	4b5c      	ldr	r3, [pc, #368]	; (800deb8 <HAL_UART_IRQHandler+0x2b8>)
 800dd46:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d00b      	beq.n	800dd64 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	2208      	movs	r2, #8
 800dd52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dd5a:	f043 0208 	orr.w	r2, r3, #8
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800dd64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dd68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d012      	beq.n	800dd96 <HAL_UART_IRQHandler+0x196>
 800dd70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dd74:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d00c      	beq.n	800dd96 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800dd84:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dd8c:	f043 0220 	orr.w	r2, r3, #32
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	f000 82dd 	beq.w	800e35c <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800dda2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dda6:	f003 0320 	and.w	r3, r3, #32
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d013      	beq.n	800ddd6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ddae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ddb2:	f003 0320 	and.w	r3, r3, #32
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d105      	bne.n	800ddc6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ddba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ddbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d007      	beq.n	800ddd6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	d003      	beq.n	800ddd6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ddd2:	6878      	ldr	r0, [r7, #4]
 800ddd4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dddc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	689b      	ldr	r3, [r3, #8]
 800dde6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ddea:	2b40      	cmp	r3, #64	; 0x40
 800ddec:	d005      	beq.n	800ddfa <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800ddee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ddf2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d054      	beq.n	800dea4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ddfa:	6878      	ldr	r0, [r7, #4]
 800ddfc:	f001 f9f6 	bl	800f1ec <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	681b      	ldr	r3, [r3, #0]
 800de04:	689b      	ldr	r3, [r3, #8]
 800de06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800de0a:	2b40      	cmp	r3, #64	; 0x40
 800de0c:	d146      	bne.n	800de9c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	681b      	ldr	r3, [r3, #0]
 800de12:	3308      	adds	r3, #8
 800de14:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de18:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800de1c:	e853 3f00 	ldrex	r3, [r3]
 800de20:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800de24:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800de28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800de2c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	3308      	adds	r3, #8
 800de36:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800de3a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800de3e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de42:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800de46:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800de4a:	e841 2300 	strex	r3, r2, [r1]
 800de4e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800de52:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800de56:	2b00      	cmp	r3, #0
 800de58:	d1d9      	bne.n	800de0e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800de60:	2b00      	cmp	r3, #0
 800de62:	d017      	beq.n	800de94 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800de6a:	4a15      	ldr	r2, [pc, #84]	; (800dec0 <HAL_UART_IRQHandler+0x2c0>)
 800de6c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800de74:	4618      	mov	r0, r3
 800de76:	f7f8 f95d 	bl	8006134 <HAL_DMA_Abort_IT>
 800de7a:	4603      	mov	r3, r0
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d019      	beq.n	800deb4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800de86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800de88:	687a      	ldr	r2, [r7, #4]
 800de8a:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800de8e:	4610      	mov	r0, r2
 800de90:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800de92:	e00f      	b.n	800deb4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800de94:	6878      	ldr	r0, [r7, #4]
 800de96:	f000 fa77 	bl	800e388 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800de9a:	e00b      	b.n	800deb4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800de9c:	6878      	ldr	r0, [r7, #4]
 800de9e:	f000 fa73 	bl	800e388 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dea2:	e007      	b.n	800deb4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800dea4:	6878      	ldr	r0, [r7, #4]
 800dea6:	f000 fa6f 	bl	800e388 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	2200      	movs	r2, #0
 800deae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800deb2:	e253      	b.n	800e35c <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800deb4:	bf00      	nop
    return;
 800deb6:	e251      	b.n	800e35c <HAL_UART_IRQHandler+0x75c>
 800deb8:	10000001 	.word	0x10000001
 800debc:	04000120 	.word	0x04000120
 800dec0:	0800f2b9 	.word	0x0800f2b9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dec8:	2b01      	cmp	r3, #1
 800deca:	f040 81e7 	bne.w	800e29c <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800dece:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ded2:	f003 0310 	and.w	r3, r3, #16
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	f000 81e0 	beq.w	800e29c <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800dedc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dee0:	f003 0310 	and.w	r3, r3, #16
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	f000 81d9 	beq.w	800e29c <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	2210      	movs	r2, #16
 800def0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	681b      	ldr	r3, [r3, #0]
 800def6:	689b      	ldr	r3, [r3, #8]
 800def8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800defc:	2b40      	cmp	r3, #64	; 0x40
 800defe:	f040 8151 	bne.w	800e1a4 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	4a96      	ldr	r2, [pc, #600]	; (800e164 <HAL_UART_IRQHandler+0x564>)
 800df0c:	4293      	cmp	r3, r2
 800df0e:	d068      	beq.n	800dfe2 <HAL_UART_IRQHandler+0x3e2>
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	4a93      	ldr	r2, [pc, #588]	; (800e168 <HAL_UART_IRQHandler+0x568>)
 800df1a:	4293      	cmp	r3, r2
 800df1c:	d061      	beq.n	800dfe2 <HAL_UART_IRQHandler+0x3e2>
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800df24:	681b      	ldr	r3, [r3, #0]
 800df26:	4a91      	ldr	r2, [pc, #580]	; (800e16c <HAL_UART_IRQHandler+0x56c>)
 800df28:	4293      	cmp	r3, r2
 800df2a:	d05a      	beq.n	800dfe2 <HAL_UART_IRQHandler+0x3e2>
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	4a8e      	ldr	r2, [pc, #568]	; (800e170 <HAL_UART_IRQHandler+0x570>)
 800df36:	4293      	cmp	r3, r2
 800df38:	d053      	beq.n	800dfe2 <HAL_UART_IRQHandler+0x3e2>
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800df40:	681b      	ldr	r3, [r3, #0]
 800df42:	4a8c      	ldr	r2, [pc, #560]	; (800e174 <HAL_UART_IRQHandler+0x574>)
 800df44:	4293      	cmp	r3, r2
 800df46:	d04c      	beq.n	800dfe2 <HAL_UART_IRQHandler+0x3e2>
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	4a89      	ldr	r2, [pc, #548]	; (800e178 <HAL_UART_IRQHandler+0x578>)
 800df52:	4293      	cmp	r3, r2
 800df54:	d045      	beq.n	800dfe2 <HAL_UART_IRQHandler+0x3e2>
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	4a87      	ldr	r2, [pc, #540]	; (800e17c <HAL_UART_IRQHandler+0x57c>)
 800df60:	4293      	cmp	r3, r2
 800df62:	d03e      	beq.n	800dfe2 <HAL_UART_IRQHandler+0x3e2>
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	4a84      	ldr	r2, [pc, #528]	; (800e180 <HAL_UART_IRQHandler+0x580>)
 800df6e:	4293      	cmp	r3, r2
 800df70:	d037      	beq.n	800dfe2 <HAL_UART_IRQHandler+0x3e2>
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800df78:	681b      	ldr	r3, [r3, #0]
 800df7a:	4a82      	ldr	r2, [pc, #520]	; (800e184 <HAL_UART_IRQHandler+0x584>)
 800df7c:	4293      	cmp	r3, r2
 800df7e:	d030      	beq.n	800dfe2 <HAL_UART_IRQHandler+0x3e2>
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	4a7f      	ldr	r2, [pc, #508]	; (800e188 <HAL_UART_IRQHandler+0x588>)
 800df8a:	4293      	cmp	r3, r2
 800df8c:	d029      	beq.n	800dfe2 <HAL_UART_IRQHandler+0x3e2>
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	4a7d      	ldr	r2, [pc, #500]	; (800e18c <HAL_UART_IRQHandler+0x58c>)
 800df98:	4293      	cmp	r3, r2
 800df9a:	d022      	beq.n	800dfe2 <HAL_UART_IRQHandler+0x3e2>
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	4a7a      	ldr	r2, [pc, #488]	; (800e190 <HAL_UART_IRQHandler+0x590>)
 800dfa6:	4293      	cmp	r3, r2
 800dfa8:	d01b      	beq.n	800dfe2 <HAL_UART_IRQHandler+0x3e2>
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dfb0:	681b      	ldr	r3, [r3, #0]
 800dfb2:	4a78      	ldr	r2, [pc, #480]	; (800e194 <HAL_UART_IRQHandler+0x594>)
 800dfb4:	4293      	cmp	r3, r2
 800dfb6:	d014      	beq.n	800dfe2 <HAL_UART_IRQHandler+0x3e2>
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dfbe:	681b      	ldr	r3, [r3, #0]
 800dfc0:	4a75      	ldr	r2, [pc, #468]	; (800e198 <HAL_UART_IRQHandler+0x598>)
 800dfc2:	4293      	cmp	r3, r2
 800dfc4:	d00d      	beq.n	800dfe2 <HAL_UART_IRQHandler+0x3e2>
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dfcc:	681b      	ldr	r3, [r3, #0]
 800dfce:	4a73      	ldr	r2, [pc, #460]	; (800e19c <HAL_UART_IRQHandler+0x59c>)
 800dfd0:	4293      	cmp	r3, r2
 800dfd2:	d006      	beq.n	800dfe2 <HAL_UART_IRQHandler+0x3e2>
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	4a70      	ldr	r2, [pc, #448]	; (800e1a0 <HAL_UART_IRQHandler+0x5a0>)
 800dfde:	4293      	cmp	r3, r2
 800dfe0:	d106      	bne.n	800dff0 <HAL_UART_IRQHandler+0x3f0>
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dfe8:	681b      	ldr	r3, [r3, #0]
 800dfea:	685b      	ldr	r3, [r3, #4]
 800dfec:	b29b      	uxth	r3, r3
 800dfee:	e005      	b.n	800dffc <HAL_UART_IRQHandler+0x3fc>
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dff6:	681b      	ldr	r3, [r3, #0]
 800dff8:	685b      	ldr	r3, [r3, #4]
 800dffa:	b29b      	uxth	r3, r3
 800dffc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800e000:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800e004:	2b00      	cmp	r3, #0
 800e006:	f000 81ab 	beq.w	800e360 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e010:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e014:	429a      	cmp	r2, r3
 800e016:	f080 81a3 	bcs.w	800e360 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e020:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e02a:	69db      	ldr	r3, [r3, #28]
 800e02c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e030:	f000 8087 	beq.w	800e142 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e03c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e040:	e853 3f00 	ldrex	r3, [r3]
 800e044:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800e048:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e04c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e050:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	681b      	ldr	r3, [r3, #0]
 800e058:	461a      	mov	r2, r3
 800e05a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e05e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e062:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e066:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800e06a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800e06e:	e841 2300 	strex	r3, r2, [r1]
 800e072:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800e076:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d1da      	bne.n	800e034 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	3308      	adds	r3, #8
 800e084:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e086:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e088:	e853 3f00 	ldrex	r3, [r3]
 800e08c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800e08e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e090:	f023 0301 	bic.w	r3, r3, #1
 800e094:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	681b      	ldr	r3, [r3, #0]
 800e09c:	3308      	adds	r3, #8
 800e09e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800e0a2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e0a6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e0a8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800e0aa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e0ae:	e841 2300 	strex	r3, r2, [r1]
 800e0b2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800e0b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d1e1      	bne.n	800e07e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	3308      	adds	r3, #8
 800e0c0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e0c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e0c4:	e853 3f00 	ldrex	r3, [r3]
 800e0c8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800e0ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e0cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e0d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	681b      	ldr	r3, [r3, #0]
 800e0d8:	3308      	adds	r3, #8
 800e0da:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800e0de:	66fa      	str	r2, [r7, #108]	; 0x6c
 800e0e0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e0e2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800e0e4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e0e6:	e841 2300 	strex	r3, r2, [r1]
 800e0ea:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800e0ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	d1e3      	bne.n	800e0ba <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	2220      	movs	r2, #32
 800e0f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	2200      	movs	r2, #0
 800e0fe:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	681b      	ldr	r3, [r3, #0]
 800e104:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e106:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e108:	e853 3f00 	ldrex	r3, [r3]
 800e10c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e10e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e110:	f023 0310 	bic.w	r3, r3, #16
 800e114:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	461a      	mov	r2, r3
 800e11e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e122:	65bb      	str	r3, [r7, #88]	; 0x58
 800e124:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e126:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e128:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e12a:	e841 2300 	strex	r3, r2, [r1]
 800e12e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e130:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e132:	2b00      	cmp	r3, #0
 800e134:	d1e4      	bne.n	800e100 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e13c:	4618      	mov	r0, r3
 800e13e:	f7f7 fcdb 	bl	8005af8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	2202      	movs	r2, #2
 800e146:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e154:	b29b      	uxth	r3, r3
 800e156:	1ad3      	subs	r3, r2, r3
 800e158:	b29b      	uxth	r3, r3
 800e15a:	4619      	mov	r1, r3
 800e15c:	6878      	ldr	r0, [r7, #4]
 800e15e:	f000 f91d 	bl	800e39c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e162:	e0fd      	b.n	800e360 <HAL_UART_IRQHandler+0x760>
 800e164:	40020010 	.word	0x40020010
 800e168:	40020028 	.word	0x40020028
 800e16c:	40020040 	.word	0x40020040
 800e170:	40020058 	.word	0x40020058
 800e174:	40020070 	.word	0x40020070
 800e178:	40020088 	.word	0x40020088
 800e17c:	400200a0 	.word	0x400200a0
 800e180:	400200b8 	.word	0x400200b8
 800e184:	40020410 	.word	0x40020410
 800e188:	40020428 	.word	0x40020428
 800e18c:	40020440 	.word	0x40020440
 800e190:	40020458 	.word	0x40020458
 800e194:	40020470 	.word	0x40020470
 800e198:	40020488 	.word	0x40020488
 800e19c:	400204a0 	.word	0x400204a0
 800e1a0:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e1b0:	b29b      	uxth	r3, r3
 800e1b2:	1ad3      	subs	r3, r2, r3
 800e1b4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e1be:	b29b      	uxth	r3, r3
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	f000 80cf 	beq.w	800e364 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800e1c6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	f000 80ca 	beq.w	800e364 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	681b      	ldr	r3, [r3, #0]
 800e1d4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1d8:	e853 3f00 	ldrex	r3, [r3]
 800e1dc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e1de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e1e0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e1e4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	681b      	ldr	r3, [r3, #0]
 800e1ec:	461a      	mov	r2, r3
 800e1ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e1f2:	647b      	str	r3, [r7, #68]	; 0x44
 800e1f4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1f6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e1f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e1fa:	e841 2300 	strex	r3, r2, [r1]
 800e1fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e200:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e202:	2b00      	cmp	r3, #0
 800e204:	d1e4      	bne.n	800e1d0 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	3308      	adds	r3, #8
 800e20c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e20e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e210:	e853 3f00 	ldrex	r3, [r3]
 800e214:	623b      	str	r3, [r7, #32]
   return(result);
 800e216:	6a3a      	ldr	r2, [r7, #32]
 800e218:	4b55      	ldr	r3, [pc, #340]	; (800e370 <HAL_UART_IRQHandler+0x770>)
 800e21a:	4013      	ands	r3, r2
 800e21c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	681b      	ldr	r3, [r3, #0]
 800e224:	3308      	adds	r3, #8
 800e226:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800e22a:	633a      	str	r2, [r7, #48]	; 0x30
 800e22c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e22e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e230:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e232:	e841 2300 	strex	r3, r2, [r1]
 800e236:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d1e3      	bne.n	800e206 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	2220      	movs	r2, #32
 800e242:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	2200      	movs	r2, #0
 800e24a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	2200      	movs	r2, #0
 800e250:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	681b      	ldr	r3, [r3, #0]
 800e256:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e258:	693b      	ldr	r3, [r7, #16]
 800e25a:	e853 3f00 	ldrex	r3, [r3]
 800e25e:	60fb      	str	r3, [r7, #12]
   return(result);
 800e260:	68fb      	ldr	r3, [r7, #12]
 800e262:	f023 0310 	bic.w	r3, r3, #16
 800e266:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	681b      	ldr	r3, [r3, #0]
 800e26e:	461a      	mov	r2, r3
 800e270:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800e274:	61fb      	str	r3, [r7, #28]
 800e276:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e278:	69b9      	ldr	r1, [r7, #24]
 800e27a:	69fa      	ldr	r2, [r7, #28]
 800e27c:	e841 2300 	strex	r3, r2, [r1]
 800e280:	617b      	str	r3, [r7, #20]
   return(result);
 800e282:	697b      	ldr	r3, [r7, #20]
 800e284:	2b00      	cmp	r3, #0
 800e286:	d1e4      	bne.n	800e252 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	2202      	movs	r2, #2
 800e28c:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800e28e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e292:	4619      	mov	r1, r3
 800e294:	6878      	ldr	r0, [r7, #4]
 800e296:	f000 f881 	bl	800e39c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e29a:	e063      	b.n	800e364 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800e29c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e2a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d00e      	beq.n	800e2c6 <HAL_UART_IRQHandler+0x6c6>
 800e2a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e2ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d008      	beq.n	800e2c6 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800e2bc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800e2be:	6878      	ldr	r0, [r7, #4]
 800e2c0:	f001 f83b 	bl	800f33a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e2c4:	e051      	b.n	800e36a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800e2c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e2ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	d014      	beq.n	800e2fc <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800e2d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e2d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	d105      	bne.n	800e2ea <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800e2de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e2e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d008      	beq.n	800e2fc <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	d03a      	beq.n	800e368 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e2f6:	6878      	ldr	r0, [r7, #4]
 800e2f8:	4798      	blx	r3
    }
    return;
 800e2fa:	e035      	b.n	800e368 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800e2fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e300:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e304:	2b00      	cmp	r3, #0
 800e306:	d009      	beq.n	800e31c <HAL_UART_IRQHandler+0x71c>
 800e308:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e30c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e310:	2b00      	cmp	r3, #0
 800e312:	d003      	beq.n	800e31c <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800e314:	6878      	ldr	r0, [r7, #4]
 800e316:	f000 ffe5 	bl	800f2e4 <UART_EndTransmit_IT>
    return;
 800e31a:	e026      	b.n	800e36a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800e31c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e320:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e324:	2b00      	cmp	r3, #0
 800e326:	d009      	beq.n	800e33c <HAL_UART_IRQHandler+0x73c>
 800e328:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e32c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e330:	2b00      	cmp	r3, #0
 800e332:	d003      	beq.n	800e33c <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800e334:	6878      	ldr	r0, [r7, #4]
 800e336:	f001 f814 	bl	800f362 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e33a:	e016      	b.n	800e36a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800e33c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e340:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e344:	2b00      	cmp	r3, #0
 800e346:	d010      	beq.n	800e36a <HAL_UART_IRQHandler+0x76a>
 800e348:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	da0c      	bge.n	800e36a <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800e350:	6878      	ldr	r0, [r7, #4]
 800e352:	f000 fffc 	bl	800f34e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e356:	e008      	b.n	800e36a <HAL_UART_IRQHandler+0x76a>
      return;
 800e358:	bf00      	nop
 800e35a:	e006      	b.n	800e36a <HAL_UART_IRQHandler+0x76a>
    return;
 800e35c:	bf00      	nop
 800e35e:	e004      	b.n	800e36a <HAL_UART_IRQHandler+0x76a>
      return;
 800e360:	bf00      	nop
 800e362:	e002      	b.n	800e36a <HAL_UART_IRQHandler+0x76a>
      return;
 800e364:	bf00      	nop
 800e366:	e000      	b.n	800e36a <HAL_UART_IRQHandler+0x76a>
    return;
 800e368:	bf00      	nop
  }
}
 800e36a:	37e8      	adds	r7, #232	; 0xe8
 800e36c:	46bd      	mov	sp, r7
 800e36e:	bd80      	pop	{r7, pc}
 800e370:	effffffe 	.word	0xeffffffe

0800e374 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800e374:	b480      	push	{r7}
 800e376:	b083      	sub	sp, #12
 800e378:	af00      	add	r7, sp, #0
 800e37a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800e37c:	bf00      	nop
 800e37e:	370c      	adds	r7, #12
 800e380:	46bd      	mov	sp, r7
 800e382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e386:	4770      	bx	lr

0800e388 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e388:	b480      	push	{r7}
 800e38a:	b083      	sub	sp, #12
 800e38c:	af00      	add	r7, sp, #0
 800e38e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800e390:	bf00      	nop
 800e392:	370c      	adds	r7, #12
 800e394:	46bd      	mov	sp, r7
 800e396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e39a:	4770      	bx	lr

0800e39c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800e39c:	b480      	push	{r7}
 800e39e:	b083      	sub	sp, #12
 800e3a0:	af00      	add	r7, sp, #0
 800e3a2:	6078      	str	r0, [r7, #4]
 800e3a4:	460b      	mov	r3, r1
 800e3a6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800e3a8:	bf00      	nop
 800e3aa:	370c      	adds	r7, #12
 800e3ac:	46bd      	mov	sp, r7
 800e3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3b2:	4770      	bx	lr

0800e3b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e3b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e3b8:	b092      	sub	sp, #72	; 0x48
 800e3ba:	af00      	add	r7, sp, #0
 800e3bc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e3be:	2300      	movs	r3, #0
 800e3c0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e3c4:	697b      	ldr	r3, [r7, #20]
 800e3c6:	689a      	ldr	r2, [r3, #8]
 800e3c8:	697b      	ldr	r3, [r7, #20]
 800e3ca:	691b      	ldr	r3, [r3, #16]
 800e3cc:	431a      	orrs	r2, r3
 800e3ce:	697b      	ldr	r3, [r7, #20]
 800e3d0:	695b      	ldr	r3, [r3, #20]
 800e3d2:	431a      	orrs	r2, r3
 800e3d4:	697b      	ldr	r3, [r7, #20]
 800e3d6:	69db      	ldr	r3, [r3, #28]
 800e3d8:	4313      	orrs	r3, r2
 800e3da:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e3dc:	697b      	ldr	r3, [r7, #20]
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	681a      	ldr	r2, [r3, #0]
 800e3e2:	4bbe      	ldr	r3, [pc, #760]	; (800e6dc <UART_SetConfig+0x328>)
 800e3e4:	4013      	ands	r3, r2
 800e3e6:	697a      	ldr	r2, [r7, #20]
 800e3e8:	6812      	ldr	r2, [r2, #0]
 800e3ea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e3ec:	430b      	orrs	r3, r1
 800e3ee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e3f0:	697b      	ldr	r3, [r7, #20]
 800e3f2:	681b      	ldr	r3, [r3, #0]
 800e3f4:	685b      	ldr	r3, [r3, #4]
 800e3f6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e3fa:	697b      	ldr	r3, [r7, #20]
 800e3fc:	68da      	ldr	r2, [r3, #12]
 800e3fe:	697b      	ldr	r3, [r7, #20]
 800e400:	681b      	ldr	r3, [r3, #0]
 800e402:	430a      	orrs	r2, r1
 800e404:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e406:	697b      	ldr	r3, [r7, #20]
 800e408:	699b      	ldr	r3, [r3, #24]
 800e40a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e40c:	697b      	ldr	r3, [r7, #20]
 800e40e:	681b      	ldr	r3, [r3, #0]
 800e410:	4ab3      	ldr	r2, [pc, #716]	; (800e6e0 <UART_SetConfig+0x32c>)
 800e412:	4293      	cmp	r3, r2
 800e414:	d004      	beq.n	800e420 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e416:	697b      	ldr	r3, [r7, #20]
 800e418:	6a1b      	ldr	r3, [r3, #32]
 800e41a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e41c:	4313      	orrs	r3, r2
 800e41e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e420:	697b      	ldr	r3, [r7, #20]
 800e422:	681b      	ldr	r3, [r3, #0]
 800e424:	689a      	ldr	r2, [r3, #8]
 800e426:	4baf      	ldr	r3, [pc, #700]	; (800e6e4 <UART_SetConfig+0x330>)
 800e428:	4013      	ands	r3, r2
 800e42a:	697a      	ldr	r2, [r7, #20]
 800e42c:	6812      	ldr	r2, [r2, #0]
 800e42e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e430:	430b      	orrs	r3, r1
 800e432:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800e434:	697b      	ldr	r3, [r7, #20]
 800e436:	681b      	ldr	r3, [r3, #0]
 800e438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e43a:	f023 010f 	bic.w	r1, r3, #15
 800e43e:	697b      	ldr	r3, [r7, #20]
 800e440:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e442:	697b      	ldr	r3, [r7, #20]
 800e444:	681b      	ldr	r3, [r3, #0]
 800e446:	430a      	orrs	r2, r1
 800e448:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e44a:	697b      	ldr	r3, [r7, #20]
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	4aa6      	ldr	r2, [pc, #664]	; (800e6e8 <UART_SetConfig+0x334>)
 800e450:	4293      	cmp	r3, r2
 800e452:	d177      	bne.n	800e544 <UART_SetConfig+0x190>
 800e454:	4ba5      	ldr	r3, [pc, #660]	; (800e6ec <UART_SetConfig+0x338>)
 800e456:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e458:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e45c:	2b28      	cmp	r3, #40	; 0x28
 800e45e:	d86d      	bhi.n	800e53c <UART_SetConfig+0x188>
 800e460:	a201      	add	r2, pc, #4	; (adr r2, 800e468 <UART_SetConfig+0xb4>)
 800e462:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e466:	bf00      	nop
 800e468:	0800e50d 	.word	0x0800e50d
 800e46c:	0800e53d 	.word	0x0800e53d
 800e470:	0800e53d 	.word	0x0800e53d
 800e474:	0800e53d 	.word	0x0800e53d
 800e478:	0800e53d 	.word	0x0800e53d
 800e47c:	0800e53d 	.word	0x0800e53d
 800e480:	0800e53d 	.word	0x0800e53d
 800e484:	0800e53d 	.word	0x0800e53d
 800e488:	0800e515 	.word	0x0800e515
 800e48c:	0800e53d 	.word	0x0800e53d
 800e490:	0800e53d 	.word	0x0800e53d
 800e494:	0800e53d 	.word	0x0800e53d
 800e498:	0800e53d 	.word	0x0800e53d
 800e49c:	0800e53d 	.word	0x0800e53d
 800e4a0:	0800e53d 	.word	0x0800e53d
 800e4a4:	0800e53d 	.word	0x0800e53d
 800e4a8:	0800e51d 	.word	0x0800e51d
 800e4ac:	0800e53d 	.word	0x0800e53d
 800e4b0:	0800e53d 	.word	0x0800e53d
 800e4b4:	0800e53d 	.word	0x0800e53d
 800e4b8:	0800e53d 	.word	0x0800e53d
 800e4bc:	0800e53d 	.word	0x0800e53d
 800e4c0:	0800e53d 	.word	0x0800e53d
 800e4c4:	0800e53d 	.word	0x0800e53d
 800e4c8:	0800e525 	.word	0x0800e525
 800e4cc:	0800e53d 	.word	0x0800e53d
 800e4d0:	0800e53d 	.word	0x0800e53d
 800e4d4:	0800e53d 	.word	0x0800e53d
 800e4d8:	0800e53d 	.word	0x0800e53d
 800e4dc:	0800e53d 	.word	0x0800e53d
 800e4e0:	0800e53d 	.word	0x0800e53d
 800e4e4:	0800e53d 	.word	0x0800e53d
 800e4e8:	0800e52d 	.word	0x0800e52d
 800e4ec:	0800e53d 	.word	0x0800e53d
 800e4f0:	0800e53d 	.word	0x0800e53d
 800e4f4:	0800e53d 	.word	0x0800e53d
 800e4f8:	0800e53d 	.word	0x0800e53d
 800e4fc:	0800e53d 	.word	0x0800e53d
 800e500:	0800e53d 	.word	0x0800e53d
 800e504:	0800e53d 	.word	0x0800e53d
 800e508:	0800e535 	.word	0x0800e535
 800e50c:	2301      	movs	r3, #1
 800e50e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e512:	e222      	b.n	800e95a <UART_SetConfig+0x5a6>
 800e514:	2304      	movs	r3, #4
 800e516:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e51a:	e21e      	b.n	800e95a <UART_SetConfig+0x5a6>
 800e51c:	2308      	movs	r3, #8
 800e51e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e522:	e21a      	b.n	800e95a <UART_SetConfig+0x5a6>
 800e524:	2310      	movs	r3, #16
 800e526:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e52a:	e216      	b.n	800e95a <UART_SetConfig+0x5a6>
 800e52c:	2320      	movs	r3, #32
 800e52e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e532:	e212      	b.n	800e95a <UART_SetConfig+0x5a6>
 800e534:	2340      	movs	r3, #64	; 0x40
 800e536:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e53a:	e20e      	b.n	800e95a <UART_SetConfig+0x5a6>
 800e53c:	2380      	movs	r3, #128	; 0x80
 800e53e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e542:	e20a      	b.n	800e95a <UART_SetConfig+0x5a6>
 800e544:	697b      	ldr	r3, [r7, #20]
 800e546:	681b      	ldr	r3, [r3, #0]
 800e548:	4a69      	ldr	r2, [pc, #420]	; (800e6f0 <UART_SetConfig+0x33c>)
 800e54a:	4293      	cmp	r3, r2
 800e54c:	d130      	bne.n	800e5b0 <UART_SetConfig+0x1fc>
 800e54e:	4b67      	ldr	r3, [pc, #412]	; (800e6ec <UART_SetConfig+0x338>)
 800e550:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e552:	f003 0307 	and.w	r3, r3, #7
 800e556:	2b05      	cmp	r3, #5
 800e558:	d826      	bhi.n	800e5a8 <UART_SetConfig+0x1f4>
 800e55a:	a201      	add	r2, pc, #4	; (adr r2, 800e560 <UART_SetConfig+0x1ac>)
 800e55c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e560:	0800e579 	.word	0x0800e579
 800e564:	0800e581 	.word	0x0800e581
 800e568:	0800e589 	.word	0x0800e589
 800e56c:	0800e591 	.word	0x0800e591
 800e570:	0800e599 	.word	0x0800e599
 800e574:	0800e5a1 	.word	0x0800e5a1
 800e578:	2300      	movs	r3, #0
 800e57a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e57e:	e1ec      	b.n	800e95a <UART_SetConfig+0x5a6>
 800e580:	2304      	movs	r3, #4
 800e582:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e586:	e1e8      	b.n	800e95a <UART_SetConfig+0x5a6>
 800e588:	2308      	movs	r3, #8
 800e58a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e58e:	e1e4      	b.n	800e95a <UART_SetConfig+0x5a6>
 800e590:	2310      	movs	r3, #16
 800e592:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e596:	e1e0      	b.n	800e95a <UART_SetConfig+0x5a6>
 800e598:	2320      	movs	r3, #32
 800e59a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e59e:	e1dc      	b.n	800e95a <UART_SetConfig+0x5a6>
 800e5a0:	2340      	movs	r3, #64	; 0x40
 800e5a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e5a6:	e1d8      	b.n	800e95a <UART_SetConfig+0x5a6>
 800e5a8:	2380      	movs	r3, #128	; 0x80
 800e5aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e5ae:	e1d4      	b.n	800e95a <UART_SetConfig+0x5a6>
 800e5b0:	697b      	ldr	r3, [r7, #20]
 800e5b2:	681b      	ldr	r3, [r3, #0]
 800e5b4:	4a4f      	ldr	r2, [pc, #316]	; (800e6f4 <UART_SetConfig+0x340>)
 800e5b6:	4293      	cmp	r3, r2
 800e5b8:	d130      	bne.n	800e61c <UART_SetConfig+0x268>
 800e5ba:	4b4c      	ldr	r3, [pc, #304]	; (800e6ec <UART_SetConfig+0x338>)
 800e5bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e5be:	f003 0307 	and.w	r3, r3, #7
 800e5c2:	2b05      	cmp	r3, #5
 800e5c4:	d826      	bhi.n	800e614 <UART_SetConfig+0x260>
 800e5c6:	a201      	add	r2, pc, #4	; (adr r2, 800e5cc <UART_SetConfig+0x218>)
 800e5c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5cc:	0800e5e5 	.word	0x0800e5e5
 800e5d0:	0800e5ed 	.word	0x0800e5ed
 800e5d4:	0800e5f5 	.word	0x0800e5f5
 800e5d8:	0800e5fd 	.word	0x0800e5fd
 800e5dc:	0800e605 	.word	0x0800e605
 800e5e0:	0800e60d 	.word	0x0800e60d
 800e5e4:	2300      	movs	r3, #0
 800e5e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e5ea:	e1b6      	b.n	800e95a <UART_SetConfig+0x5a6>
 800e5ec:	2304      	movs	r3, #4
 800e5ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e5f2:	e1b2      	b.n	800e95a <UART_SetConfig+0x5a6>
 800e5f4:	2308      	movs	r3, #8
 800e5f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e5fa:	e1ae      	b.n	800e95a <UART_SetConfig+0x5a6>
 800e5fc:	2310      	movs	r3, #16
 800e5fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e602:	e1aa      	b.n	800e95a <UART_SetConfig+0x5a6>
 800e604:	2320      	movs	r3, #32
 800e606:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e60a:	e1a6      	b.n	800e95a <UART_SetConfig+0x5a6>
 800e60c:	2340      	movs	r3, #64	; 0x40
 800e60e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e612:	e1a2      	b.n	800e95a <UART_SetConfig+0x5a6>
 800e614:	2380      	movs	r3, #128	; 0x80
 800e616:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e61a:	e19e      	b.n	800e95a <UART_SetConfig+0x5a6>
 800e61c:	697b      	ldr	r3, [r7, #20]
 800e61e:	681b      	ldr	r3, [r3, #0]
 800e620:	4a35      	ldr	r2, [pc, #212]	; (800e6f8 <UART_SetConfig+0x344>)
 800e622:	4293      	cmp	r3, r2
 800e624:	d130      	bne.n	800e688 <UART_SetConfig+0x2d4>
 800e626:	4b31      	ldr	r3, [pc, #196]	; (800e6ec <UART_SetConfig+0x338>)
 800e628:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e62a:	f003 0307 	and.w	r3, r3, #7
 800e62e:	2b05      	cmp	r3, #5
 800e630:	d826      	bhi.n	800e680 <UART_SetConfig+0x2cc>
 800e632:	a201      	add	r2, pc, #4	; (adr r2, 800e638 <UART_SetConfig+0x284>)
 800e634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e638:	0800e651 	.word	0x0800e651
 800e63c:	0800e659 	.word	0x0800e659
 800e640:	0800e661 	.word	0x0800e661
 800e644:	0800e669 	.word	0x0800e669
 800e648:	0800e671 	.word	0x0800e671
 800e64c:	0800e679 	.word	0x0800e679
 800e650:	2300      	movs	r3, #0
 800e652:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e656:	e180      	b.n	800e95a <UART_SetConfig+0x5a6>
 800e658:	2304      	movs	r3, #4
 800e65a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e65e:	e17c      	b.n	800e95a <UART_SetConfig+0x5a6>
 800e660:	2308      	movs	r3, #8
 800e662:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e666:	e178      	b.n	800e95a <UART_SetConfig+0x5a6>
 800e668:	2310      	movs	r3, #16
 800e66a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e66e:	e174      	b.n	800e95a <UART_SetConfig+0x5a6>
 800e670:	2320      	movs	r3, #32
 800e672:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e676:	e170      	b.n	800e95a <UART_SetConfig+0x5a6>
 800e678:	2340      	movs	r3, #64	; 0x40
 800e67a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e67e:	e16c      	b.n	800e95a <UART_SetConfig+0x5a6>
 800e680:	2380      	movs	r3, #128	; 0x80
 800e682:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e686:	e168      	b.n	800e95a <UART_SetConfig+0x5a6>
 800e688:	697b      	ldr	r3, [r7, #20]
 800e68a:	681b      	ldr	r3, [r3, #0]
 800e68c:	4a1b      	ldr	r2, [pc, #108]	; (800e6fc <UART_SetConfig+0x348>)
 800e68e:	4293      	cmp	r3, r2
 800e690:	d142      	bne.n	800e718 <UART_SetConfig+0x364>
 800e692:	4b16      	ldr	r3, [pc, #88]	; (800e6ec <UART_SetConfig+0x338>)
 800e694:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e696:	f003 0307 	and.w	r3, r3, #7
 800e69a:	2b05      	cmp	r3, #5
 800e69c:	d838      	bhi.n	800e710 <UART_SetConfig+0x35c>
 800e69e:	a201      	add	r2, pc, #4	; (adr r2, 800e6a4 <UART_SetConfig+0x2f0>)
 800e6a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e6a4:	0800e6bd 	.word	0x0800e6bd
 800e6a8:	0800e6c5 	.word	0x0800e6c5
 800e6ac:	0800e6cd 	.word	0x0800e6cd
 800e6b0:	0800e6d5 	.word	0x0800e6d5
 800e6b4:	0800e701 	.word	0x0800e701
 800e6b8:	0800e709 	.word	0x0800e709
 800e6bc:	2300      	movs	r3, #0
 800e6be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e6c2:	e14a      	b.n	800e95a <UART_SetConfig+0x5a6>
 800e6c4:	2304      	movs	r3, #4
 800e6c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e6ca:	e146      	b.n	800e95a <UART_SetConfig+0x5a6>
 800e6cc:	2308      	movs	r3, #8
 800e6ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e6d2:	e142      	b.n	800e95a <UART_SetConfig+0x5a6>
 800e6d4:	2310      	movs	r3, #16
 800e6d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e6da:	e13e      	b.n	800e95a <UART_SetConfig+0x5a6>
 800e6dc:	cfff69f3 	.word	0xcfff69f3
 800e6e0:	58000c00 	.word	0x58000c00
 800e6e4:	11fff4ff 	.word	0x11fff4ff
 800e6e8:	40011000 	.word	0x40011000
 800e6ec:	58024400 	.word	0x58024400
 800e6f0:	40004400 	.word	0x40004400
 800e6f4:	40004800 	.word	0x40004800
 800e6f8:	40004c00 	.word	0x40004c00
 800e6fc:	40005000 	.word	0x40005000
 800e700:	2320      	movs	r3, #32
 800e702:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e706:	e128      	b.n	800e95a <UART_SetConfig+0x5a6>
 800e708:	2340      	movs	r3, #64	; 0x40
 800e70a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e70e:	e124      	b.n	800e95a <UART_SetConfig+0x5a6>
 800e710:	2380      	movs	r3, #128	; 0x80
 800e712:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e716:	e120      	b.n	800e95a <UART_SetConfig+0x5a6>
 800e718:	697b      	ldr	r3, [r7, #20]
 800e71a:	681b      	ldr	r3, [r3, #0]
 800e71c:	4acb      	ldr	r2, [pc, #812]	; (800ea4c <UART_SetConfig+0x698>)
 800e71e:	4293      	cmp	r3, r2
 800e720:	d176      	bne.n	800e810 <UART_SetConfig+0x45c>
 800e722:	4bcb      	ldr	r3, [pc, #812]	; (800ea50 <UART_SetConfig+0x69c>)
 800e724:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e726:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e72a:	2b28      	cmp	r3, #40	; 0x28
 800e72c:	d86c      	bhi.n	800e808 <UART_SetConfig+0x454>
 800e72e:	a201      	add	r2, pc, #4	; (adr r2, 800e734 <UART_SetConfig+0x380>)
 800e730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e734:	0800e7d9 	.word	0x0800e7d9
 800e738:	0800e809 	.word	0x0800e809
 800e73c:	0800e809 	.word	0x0800e809
 800e740:	0800e809 	.word	0x0800e809
 800e744:	0800e809 	.word	0x0800e809
 800e748:	0800e809 	.word	0x0800e809
 800e74c:	0800e809 	.word	0x0800e809
 800e750:	0800e809 	.word	0x0800e809
 800e754:	0800e7e1 	.word	0x0800e7e1
 800e758:	0800e809 	.word	0x0800e809
 800e75c:	0800e809 	.word	0x0800e809
 800e760:	0800e809 	.word	0x0800e809
 800e764:	0800e809 	.word	0x0800e809
 800e768:	0800e809 	.word	0x0800e809
 800e76c:	0800e809 	.word	0x0800e809
 800e770:	0800e809 	.word	0x0800e809
 800e774:	0800e7e9 	.word	0x0800e7e9
 800e778:	0800e809 	.word	0x0800e809
 800e77c:	0800e809 	.word	0x0800e809
 800e780:	0800e809 	.word	0x0800e809
 800e784:	0800e809 	.word	0x0800e809
 800e788:	0800e809 	.word	0x0800e809
 800e78c:	0800e809 	.word	0x0800e809
 800e790:	0800e809 	.word	0x0800e809
 800e794:	0800e7f1 	.word	0x0800e7f1
 800e798:	0800e809 	.word	0x0800e809
 800e79c:	0800e809 	.word	0x0800e809
 800e7a0:	0800e809 	.word	0x0800e809
 800e7a4:	0800e809 	.word	0x0800e809
 800e7a8:	0800e809 	.word	0x0800e809
 800e7ac:	0800e809 	.word	0x0800e809
 800e7b0:	0800e809 	.word	0x0800e809
 800e7b4:	0800e7f9 	.word	0x0800e7f9
 800e7b8:	0800e809 	.word	0x0800e809
 800e7bc:	0800e809 	.word	0x0800e809
 800e7c0:	0800e809 	.word	0x0800e809
 800e7c4:	0800e809 	.word	0x0800e809
 800e7c8:	0800e809 	.word	0x0800e809
 800e7cc:	0800e809 	.word	0x0800e809
 800e7d0:	0800e809 	.word	0x0800e809
 800e7d4:	0800e801 	.word	0x0800e801
 800e7d8:	2301      	movs	r3, #1
 800e7da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7de:	e0bc      	b.n	800e95a <UART_SetConfig+0x5a6>
 800e7e0:	2304      	movs	r3, #4
 800e7e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7e6:	e0b8      	b.n	800e95a <UART_SetConfig+0x5a6>
 800e7e8:	2308      	movs	r3, #8
 800e7ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7ee:	e0b4      	b.n	800e95a <UART_SetConfig+0x5a6>
 800e7f0:	2310      	movs	r3, #16
 800e7f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7f6:	e0b0      	b.n	800e95a <UART_SetConfig+0x5a6>
 800e7f8:	2320      	movs	r3, #32
 800e7fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7fe:	e0ac      	b.n	800e95a <UART_SetConfig+0x5a6>
 800e800:	2340      	movs	r3, #64	; 0x40
 800e802:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e806:	e0a8      	b.n	800e95a <UART_SetConfig+0x5a6>
 800e808:	2380      	movs	r3, #128	; 0x80
 800e80a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e80e:	e0a4      	b.n	800e95a <UART_SetConfig+0x5a6>
 800e810:	697b      	ldr	r3, [r7, #20]
 800e812:	681b      	ldr	r3, [r3, #0]
 800e814:	4a8f      	ldr	r2, [pc, #572]	; (800ea54 <UART_SetConfig+0x6a0>)
 800e816:	4293      	cmp	r3, r2
 800e818:	d130      	bne.n	800e87c <UART_SetConfig+0x4c8>
 800e81a:	4b8d      	ldr	r3, [pc, #564]	; (800ea50 <UART_SetConfig+0x69c>)
 800e81c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e81e:	f003 0307 	and.w	r3, r3, #7
 800e822:	2b05      	cmp	r3, #5
 800e824:	d826      	bhi.n	800e874 <UART_SetConfig+0x4c0>
 800e826:	a201      	add	r2, pc, #4	; (adr r2, 800e82c <UART_SetConfig+0x478>)
 800e828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e82c:	0800e845 	.word	0x0800e845
 800e830:	0800e84d 	.word	0x0800e84d
 800e834:	0800e855 	.word	0x0800e855
 800e838:	0800e85d 	.word	0x0800e85d
 800e83c:	0800e865 	.word	0x0800e865
 800e840:	0800e86d 	.word	0x0800e86d
 800e844:	2300      	movs	r3, #0
 800e846:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e84a:	e086      	b.n	800e95a <UART_SetConfig+0x5a6>
 800e84c:	2304      	movs	r3, #4
 800e84e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e852:	e082      	b.n	800e95a <UART_SetConfig+0x5a6>
 800e854:	2308      	movs	r3, #8
 800e856:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e85a:	e07e      	b.n	800e95a <UART_SetConfig+0x5a6>
 800e85c:	2310      	movs	r3, #16
 800e85e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e862:	e07a      	b.n	800e95a <UART_SetConfig+0x5a6>
 800e864:	2320      	movs	r3, #32
 800e866:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e86a:	e076      	b.n	800e95a <UART_SetConfig+0x5a6>
 800e86c:	2340      	movs	r3, #64	; 0x40
 800e86e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e872:	e072      	b.n	800e95a <UART_SetConfig+0x5a6>
 800e874:	2380      	movs	r3, #128	; 0x80
 800e876:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e87a:	e06e      	b.n	800e95a <UART_SetConfig+0x5a6>
 800e87c:	697b      	ldr	r3, [r7, #20]
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	4a75      	ldr	r2, [pc, #468]	; (800ea58 <UART_SetConfig+0x6a4>)
 800e882:	4293      	cmp	r3, r2
 800e884:	d130      	bne.n	800e8e8 <UART_SetConfig+0x534>
 800e886:	4b72      	ldr	r3, [pc, #456]	; (800ea50 <UART_SetConfig+0x69c>)
 800e888:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e88a:	f003 0307 	and.w	r3, r3, #7
 800e88e:	2b05      	cmp	r3, #5
 800e890:	d826      	bhi.n	800e8e0 <UART_SetConfig+0x52c>
 800e892:	a201      	add	r2, pc, #4	; (adr r2, 800e898 <UART_SetConfig+0x4e4>)
 800e894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e898:	0800e8b1 	.word	0x0800e8b1
 800e89c:	0800e8b9 	.word	0x0800e8b9
 800e8a0:	0800e8c1 	.word	0x0800e8c1
 800e8a4:	0800e8c9 	.word	0x0800e8c9
 800e8a8:	0800e8d1 	.word	0x0800e8d1
 800e8ac:	0800e8d9 	.word	0x0800e8d9
 800e8b0:	2300      	movs	r3, #0
 800e8b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e8b6:	e050      	b.n	800e95a <UART_SetConfig+0x5a6>
 800e8b8:	2304      	movs	r3, #4
 800e8ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e8be:	e04c      	b.n	800e95a <UART_SetConfig+0x5a6>
 800e8c0:	2308      	movs	r3, #8
 800e8c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e8c6:	e048      	b.n	800e95a <UART_SetConfig+0x5a6>
 800e8c8:	2310      	movs	r3, #16
 800e8ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e8ce:	e044      	b.n	800e95a <UART_SetConfig+0x5a6>
 800e8d0:	2320      	movs	r3, #32
 800e8d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e8d6:	e040      	b.n	800e95a <UART_SetConfig+0x5a6>
 800e8d8:	2340      	movs	r3, #64	; 0x40
 800e8da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e8de:	e03c      	b.n	800e95a <UART_SetConfig+0x5a6>
 800e8e0:	2380      	movs	r3, #128	; 0x80
 800e8e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e8e6:	e038      	b.n	800e95a <UART_SetConfig+0x5a6>
 800e8e8:	697b      	ldr	r3, [r7, #20]
 800e8ea:	681b      	ldr	r3, [r3, #0]
 800e8ec:	4a5b      	ldr	r2, [pc, #364]	; (800ea5c <UART_SetConfig+0x6a8>)
 800e8ee:	4293      	cmp	r3, r2
 800e8f0:	d130      	bne.n	800e954 <UART_SetConfig+0x5a0>
 800e8f2:	4b57      	ldr	r3, [pc, #348]	; (800ea50 <UART_SetConfig+0x69c>)
 800e8f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e8f6:	f003 0307 	and.w	r3, r3, #7
 800e8fa:	2b05      	cmp	r3, #5
 800e8fc:	d826      	bhi.n	800e94c <UART_SetConfig+0x598>
 800e8fe:	a201      	add	r2, pc, #4	; (adr r2, 800e904 <UART_SetConfig+0x550>)
 800e900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e904:	0800e91d 	.word	0x0800e91d
 800e908:	0800e925 	.word	0x0800e925
 800e90c:	0800e92d 	.word	0x0800e92d
 800e910:	0800e935 	.word	0x0800e935
 800e914:	0800e93d 	.word	0x0800e93d
 800e918:	0800e945 	.word	0x0800e945
 800e91c:	2302      	movs	r3, #2
 800e91e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e922:	e01a      	b.n	800e95a <UART_SetConfig+0x5a6>
 800e924:	2304      	movs	r3, #4
 800e926:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e92a:	e016      	b.n	800e95a <UART_SetConfig+0x5a6>
 800e92c:	2308      	movs	r3, #8
 800e92e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e932:	e012      	b.n	800e95a <UART_SetConfig+0x5a6>
 800e934:	2310      	movs	r3, #16
 800e936:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e93a:	e00e      	b.n	800e95a <UART_SetConfig+0x5a6>
 800e93c:	2320      	movs	r3, #32
 800e93e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e942:	e00a      	b.n	800e95a <UART_SetConfig+0x5a6>
 800e944:	2340      	movs	r3, #64	; 0x40
 800e946:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e94a:	e006      	b.n	800e95a <UART_SetConfig+0x5a6>
 800e94c:	2380      	movs	r3, #128	; 0x80
 800e94e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e952:	e002      	b.n	800e95a <UART_SetConfig+0x5a6>
 800e954:	2380      	movs	r3, #128	; 0x80
 800e956:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800e95a:	697b      	ldr	r3, [r7, #20]
 800e95c:	681b      	ldr	r3, [r3, #0]
 800e95e:	4a3f      	ldr	r2, [pc, #252]	; (800ea5c <UART_SetConfig+0x6a8>)
 800e960:	4293      	cmp	r3, r2
 800e962:	f040 80f8 	bne.w	800eb56 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800e966:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e96a:	2b20      	cmp	r3, #32
 800e96c:	dc46      	bgt.n	800e9fc <UART_SetConfig+0x648>
 800e96e:	2b02      	cmp	r3, #2
 800e970:	f2c0 8082 	blt.w	800ea78 <UART_SetConfig+0x6c4>
 800e974:	3b02      	subs	r3, #2
 800e976:	2b1e      	cmp	r3, #30
 800e978:	d87e      	bhi.n	800ea78 <UART_SetConfig+0x6c4>
 800e97a:	a201      	add	r2, pc, #4	; (adr r2, 800e980 <UART_SetConfig+0x5cc>)
 800e97c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e980:	0800ea03 	.word	0x0800ea03
 800e984:	0800ea79 	.word	0x0800ea79
 800e988:	0800ea0b 	.word	0x0800ea0b
 800e98c:	0800ea79 	.word	0x0800ea79
 800e990:	0800ea79 	.word	0x0800ea79
 800e994:	0800ea79 	.word	0x0800ea79
 800e998:	0800ea1b 	.word	0x0800ea1b
 800e99c:	0800ea79 	.word	0x0800ea79
 800e9a0:	0800ea79 	.word	0x0800ea79
 800e9a4:	0800ea79 	.word	0x0800ea79
 800e9a8:	0800ea79 	.word	0x0800ea79
 800e9ac:	0800ea79 	.word	0x0800ea79
 800e9b0:	0800ea79 	.word	0x0800ea79
 800e9b4:	0800ea79 	.word	0x0800ea79
 800e9b8:	0800ea2b 	.word	0x0800ea2b
 800e9bc:	0800ea79 	.word	0x0800ea79
 800e9c0:	0800ea79 	.word	0x0800ea79
 800e9c4:	0800ea79 	.word	0x0800ea79
 800e9c8:	0800ea79 	.word	0x0800ea79
 800e9cc:	0800ea79 	.word	0x0800ea79
 800e9d0:	0800ea79 	.word	0x0800ea79
 800e9d4:	0800ea79 	.word	0x0800ea79
 800e9d8:	0800ea79 	.word	0x0800ea79
 800e9dc:	0800ea79 	.word	0x0800ea79
 800e9e0:	0800ea79 	.word	0x0800ea79
 800e9e4:	0800ea79 	.word	0x0800ea79
 800e9e8:	0800ea79 	.word	0x0800ea79
 800e9ec:	0800ea79 	.word	0x0800ea79
 800e9f0:	0800ea79 	.word	0x0800ea79
 800e9f4:	0800ea79 	.word	0x0800ea79
 800e9f8:	0800ea6b 	.word	0x0800ea6b
 800e9fc:	2b40      	cmp	r3, #64	; 0x40
 800e9fe:	d037      	beq.n	800ea70 <UART_SetConfig+0x6bc>
 800ea00:	e03a      	b.n	800ea78 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800ea02:	f7fc fee3 	bl	800b7cc <HAL_RCCEx_GetD3PCLK1Freq>
 800ea06:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ea08:	e03c      	b.n	800ea84 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ea0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ea0e:	4618      	mov	r0, r3
 800ea10:	f7fc fef2 	bl	800b7f8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ea14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea16:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ea18:	e034      	b.n	800ea84 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ea1a:	f107 0318 	add.w	r3, r7, #24
 800ea1e:	4618      	mov	r0, r3
 800ea20:	f7fd f83e 	bl	800baa0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ea24:	69fb      	ldr	r3, [r7, #28]
 800ea26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ea28:	e02c      	b.n	800ea84 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ea2a:	4b09      	ldr	r3, [pc, #36]	; (800ea50 <UART_SetConfig+0x69c>)
 800ea2c:	681b      	ldr	r3, [r3, #0]
 800ea2e:	f003 0320 	and.w	r3, r3, #32
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	d016      	beq.n	800ea64 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ea36:	4b06      	ldr	r3, [pc, #24]	; (800ea50 <UART_SetConfig+0x69c>)
 800ea38:	681b      	ldr	r3, [r3, #0]
 800ea3a:	08db      	lsrs	r3, r3, #3
 800ea3c:	f003 0303 	and.w	r3, r3, #3
 800ea40:	4a07      	ldr	r2, [pc, #28]	; (800ea60 <UART_SetConfig+0x6ac>)
 800ea42:	fa22 f303 	lsr.w	r3, r2, r3
 800ea46:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ea48:	e01c      	b.n	800ea84 <UART_SetConfig+0x6d0>
 800ea4a:	bf00      	nop
 800ea4c:	40011400 	.word	0x40011400
 800ea50:	58024400 	.word	0x58024400
 800ea54:	40007800 	.word	0x40007800
 800ea58:	40007c00 	.word	0x40007c00
 800ea5c:	58000c00 	.word	0x58000c00
 800ea60:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800ea64:	4b9d      	ldr	r3, [pc, #628]	; (800ecdc <UART_SetConfig+0x928>)
 800ea66:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ea68:	e00c      	b.n	800ea84 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ea6a:	4b9d      	ldr	r3, [pc, #628]	; (800ece0 <UART_SetConfig+0x92c>)
 800ea6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ea6e:	e009      	b.n	800ea84 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ea70:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ea74:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ea76:	e005      	b.n	800ea84 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800ea78:	2300      	movs	r3, #0
 800ea7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800ea7c:	2301      	movs	r3, #1
 800ea7e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800ea82:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ea84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	f000 81de 	beq.w	800ee48 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ea8c:	697b      	ldr	r3, [r7, #20]
 800ea8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea90:	4a94      	ldr	r2, [pc, #592]	; (800ece4 <UART_SetConfig+0x930>)
 800ea92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ea96:	461a      	mov	r2, r3
 800ea98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ea9a:	fbb3 f3f2 	udiv	r3, r3, r2
 800ea9e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800eaa0:	697b      	ldr	r3, [r7, #20]
 800eaa2:	685a      	ldr	r2, [r3, #4]
 800eaa4:	4613      	mov	r3, r2
 800eaa6:	005b      	lsls	r3, r3, #1
 800eaa8:	4413      	add	r3, r2
 800eaaa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eaac:	429a      	cmp	r2, r3
 800eaae:	d305      	bcc.n	800eabc <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800eab0:	697b      	ldr	r3, [r7, #20]
 800eab2:	685b      	ldr	r3, [r3, #4]
 800eab4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800eab6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eab8:	429a      	cmp	r2, r3
 800eaba:	d903      	bls.n	800eac4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800eabc:	2301      	movs	r3, #1
 800eabe:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800eac2:	e1c1      	b.n	800ee48 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800eac4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eac6:	2200      	movs	r2, #0
 800eac8:	60bb      	str	r3, [r7, #8]
 800eaca:	60fa      	str	r2, [r7, #12]
 800eacc:	697b      	ldr	r3, [r7, #20]
 800eace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ead0:	4a84      	ldr	r2, [pc, #528]	; (800ece4 <UART_SetConfig+0x930>)
 800ead2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ead6:	b29b      	uxth	r3, r3
 800ead8:	2200      	movs	r2, #0
 800eada:	603b      	str	r3, [r7, #0]
 800eadc:	607a      	str	r2, [r7, #4]
 800eade:	e9d7 2300 	ldrd	r2, r3, [r7]
 800eae2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800eae6:	f7f1 fe0f 	bl	8000708 <__aeabi_uldivmod>
 800eaea:	4602      	mov	r2, r0
 800eaec:	460b      	mov	r3, r1
 800eaee:	4610      	mov	r0, r2
 800eaf0:	4619      	mov	r1, r3
 800eaf2:	f04f 0200 	mov.w	r2, #0
 800eaf6:	f04f 0300 	mov.w	r3, #0
 800eafa:	020b      	lsls	r3, r1, #8
 800eafc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800eb00:	0202      	lsls	r2, r0, #8
 800eb02:	6979      	ldr	r1, [r7, #20]
 800eb04:	6849      	ldr	r1, [r1, #4]
 800eb06:	0849      	lsrs	r1, r1, #1
 800eb08:	2000      	movs	r0, #0
 800eb0a:	460c      	mov	r4, r1
 800eb0c:	4605      	mov	r5, r0
 800eb0e:	eb12 0804 	adds.w	r8, r2, r4
 800eb12:	eb43 0905 	adc.w	r9, r3, r5
 800eb16:	697b      	ldr	r3, [r7, #20]
 800eb18:	685b      	ldr	r3, [r3, #4]
 800eb1a:	2200      	movs	r2, #0
 800eb1c:	469a      	mov	sl, r3
 800eb1e:	4693      	mov	fp, r2
 800eb20:	4652      	mov	r2, sl
 800eb22:	465b      	mov	r3, fp
 800eb24:	4640      	mov	r0, r8
 800eb26:	4649      	mov	r1, r9
 800eb28:	f7f1 fdee 	bl	8000708 <__aeabi_uldivmod>
 800eb2c:	4602      	mov	r2, r0
 800eb2e:	460b      	mov	r3, r1
 800eb30:	4613      	mov	r3, r2
 800eb32:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800eb34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb36:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800eb3a:	d308      	bcc.n	800eb4e <UART_SetConfig+0x79a>
 800eb3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800eb42:	d204      	bcs.n	800eb4e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800eb44:	697b      	ldr	r3, [r7, #20]
 800eb46:	681b      	ldr	r3, [r3, #0]
 800eb48:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800eb4a:	60da      	str	r2, [r3, #12]
 800eb4c:	e17c      	b.n	800ee48 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800eb4e:	2301      	movs	r3, #1
 800eb50:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800eb54:	e178      	b.n	800ee48 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800eb56:	697b      	ldr	r3, [r7, #20]
 800eb58:	69db      	ldr	r3, [r3, #28]
 800eb5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800eb5e:	f040 80c5 	bne.w	800ecec <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800eb62:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800eb66:	2b20      	cmp	r3, #32
 800eb68:	dc48      	bgt.n	800ebfc <UART_SetConfig+0x848>
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	db7b      	blt.n	800ec66 <UART_SetConfig+0x8b2>
 800eb6e:	2b20      	cmp	r3, #32
 800eb70:	d879      	bhi.n	800ec66 <UART_SetConfig+0x8b2>
 800eb72:	a201      	add	r2, pc, #4	; (adr r2, 800eb78 <UART_SetConfig+0x7c4>)
 800eb74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb78:	0800ec03 	.word	0x0800ec03
 800eb7c:	0800ec0b 	.word	0x0800ec0b
 800eb80:	0800ec67 	.word	0x0800ec67
 800eb84:	0800ec67 	.word	0x0800ec67
 800eb88:	0800ec13 	.word	0x0800ec13
 800eb8c:	0800ec67 	.word	0x0800ec67
 800eb90:	0800ec67 	.word	0x0800ec67
 800eb94:	0800ec67 	.word	0x0800ec67
 800eb98:	0800ec23 	.word	0x0800ec23
 800eb9c:	0800ec67 	.word	0x0800ec67
 800eba0:	0800ec67 	.word	0x0800ec67
 800eba4:	0800ec67 	.word	0x0800ec67
 800eba8:	0800ec67 	.word	0x0800ec67
 800ebac:	0800ec67 	.word	0x0800ec67
 800ebb0:	0800ec67 	.word	0x0800ec67
 800ebb4:	0800ec67 	.word	0x0800ec67
 800ebb8:	0800ec33 	.word	0x0800ec33
 800ebbc:	0800ec67 	.word	0x0800ec67
 800ebc0:	0800ec67 	.word	0x0800ec67
 800ebc4:	0800ec67 	.word	0x0800ec67
 800ebc8:	0800ec67 	.word	0x0800ec67
 800ebcc:	0800ec67 	.word	0x0800ec67
 800ebd0:	0800ec67 	.word	0x0800ec67
 800ebd4:	0800ec67 	.word	0x0800ec67
 800ebd8:	0800ec67 	.word	0x0800ec67
 800ebdc:	0800ec67 	.word	0x0800ec67
 800ebe0:	0800ec67 	.word	0x0800ec67
 800ebe4:	0800ec67 	.word	0x0800ec67
 800ebe8:	0800ec67 	.word	0x0800ec67
 800ebec:	0800ec67 	.word	0x0800ec67
 800ebf0:	0800ec67 	.word	0x0800ec67
 800ebf4:	0800ec67 	.word	0x0800ec67
 800ebf8:	0800ec59 	.word	0x0800ec59
 800ebfc:	2b40      	cmp	r3, #64	; 0x40
 800ebfe:	d02e      	beq.n	800ec5e <UART_SetConfig+0x8aa>
 800ec00:	e031      	b.n	800ec66 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ec02:	f7fa fdeb 	bl	80097dc <HAL_RCC_GetPCLK1Freq>
 800ec06:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ec08:	e033      	b.n	800ec72 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ec0a:	f7fa fdfd 	bl	8009808 <HAL_RCC_GetPCLK2Freq>
 800ec0e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ec10:	e02f      	b.n	800ec72 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ec12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ec16:	4618      	mov	r0, r3
 800ec18:	f7fc fdee 	bl	800b7f8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ec1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ec20:	e027      	b.n	800ec72 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ec22:	f107 0318 	add.w	r3, r7, #24
 800ec26:	4618      	mov	r0, r3
 800ec28:	f7fc ff3a 	bl	800baa0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ec2c:	69fb      	ldr	r3, [r7, #28]
 800ec2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ec30:	e01f      	b.n	800ec72 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ec32:	4b2d      	ldr	r3, [pc, #180]	; (800ece8 <UART_SetConfig+0x934>)
 800ec34:	681b      	ldr	r3, [r3, #0]
 800ec36:	f003 0320 	and.w	r3, r3, #32
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	d009      	beq.n	800ec52 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ec3e:	4b2a      	ldr	r3, [pc, #168]	; (800ece8 <UART_SetConfig+0x934>)
 800ec40:	681b      	ldr	r3, [r3, #0]
 800ec42:	08db      	lsrs	r3, r3, #3
 800ec44:	f003 0303 	and.w	r3, r3, #3
 800ec48:	4a24      	ldr	r2, [pc, #144]	; (800ecdc <UART_SetConfig+0x928>)
 800ec4a:	fa22 f303 	lsr.w	r3, r2, r3
 800ec4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ec50:	e00f      	b.n	800ec72 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800ec52:	4b22      	ldr	r3, [pc, #136]	; (800ecdc <UART_SetConfig+0x928>)
 800ec54:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ec56:	e00c      	b.n	800ec72 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ec58:	4b21      	ldr	r3, [pc, #132]	; (800ece0 <UART_SetConfig+0x92c>)
 800ec5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ec5c:	e009      	b.n	800ec72 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ec5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ec62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ec64:	e005      	b.n	800ec72 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800ec66:	2300      	movs	r3, #0
 800ec68:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800ec6a:	2301      	movs	r3, #1
 800ec6c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800ec70:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ec72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	f000 80e7 	beq.w	800ee48 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ec7a:	697b      	ldr	r3, [r7, #20]
 800ec7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec7e:	4a19      	ldr	r2, [pc, #100]	; (800ece4 <UART_SetConfig+0x930>)
 800ec80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ec84:	461a      	mov	r2, r3
 800ec86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec88:	fbb3 f3f2 	udiv	r3, r3, r2
 800ec8c:	005a      	lsls	r2, r3, #1
 800ec8e:	697b      	ldr	r3, [r7, #20]
 800ec90:	685b      	ldr	r3, [r3, #4]
 800ec92:	085b      	lsrs	r3, r3, #1
 800ec94:	441a      	add	r2, r3
 800ec96:	697b      	ldr	r3, [r7, #20]
 800ec98:	685b      	ldr	r3, [r3, #4]
 800ec9a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ec9e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800eca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eca2:	2b0f      	cmp	r3, #15
 800eca4:	d916      	bls.n	800ecd4 <UART_SetConfig+0x920>
 800eca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eca8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ecac:	d212      	bcs.n	800ecd4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ecae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecb0:	b29b      	uxth	r3, r3
 800ecb2:	f023 030f 	bic.w	r3, r3, #15
 800ecb6:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ecb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecba:	085b      	lsrs	r3, r3, #1
 800ecbc:	b29b      	uxth	r3, r3
 800ecbe:	f003 0307 	and.w	r3, r3, #7
 800ecc2:	b29a      	uxth	r2, r3
 800ecc4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ecc6:	4313      	orrs	r3, r2
 800ecc8:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800ecca:	697b      	ldr	r3, [r7, #20]
 800eccc:	681b      	ldr	r3, [r3, #0]
 800ecce:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800ecd0:	60da      	str	r2, [r3, #12]
 800ecd2:	e0b9      	b.n	800ee48 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800ecd4:	2301      	movs	r3, #1
 800ecd6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800ecda:	e0b5      	b.n	800ee48 <UART_SetConfig+0xa94>
 800ecdc:	03d09000 	.word	0x03d09000
 800ece0:	003d0900 	.word	0x003d0900
 800ece4:	08017cd4 	.word	0x08017cd4
 800ece8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800ecec:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ecf0:	2b20      	cmp	r3, #32
 800ecf2:	dc49      	bgt.n	800ed88 <UART_SetConfig+0x9d4>
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	db7c      	blt.n	800edf2 <UART_SetConfig+0xa3e>
 800ecf8:	2b20      	cmp	r3, #32
 800ecfa:	d87a      	bhi.n	800edf2 <UART_SetConfig+0xa3e>
 800ecfc:	a201      	add	r2, pc, #4	; (adr r2, 800ed04 <UART_SetConfig+0x950>)
 800ecfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed02:	bf00      	nop
 800ed04:	0800ed8f 	.word	0x0800ed8f
 800ed08:	0800ed97 	.word	0x0800ed97
 800ed0c:	0800edf3 	.word	0x0800edf3
 800ed10:	0800edf3 	.word	0x0800edf3
 800ed14:	0800ed9f 	.word	0x0800ed9f
 800ed18:	0800edf3 	.word	0x0800edf3
 800ed1c:	0800edf3 	.word	0x0800edf3
 800ed20:	0800edf3 	.word	0x0800edf3
 800ed24:	0800edaf 	.word	0x0800edaf
 800ed28:	0800edf3 	.word	0x0800edf3
 800ed2c:	0800edf3 	.word	0x0800edf3
 800ed30:	0800edf3 	.word	0x0800edf3
 800ed34:	0800edf3 	.word	0x0800edf3
 800ed38:	0800edf3 	.word	0x0800edf3
 800ed3c:	0800edf3 	.word	0x0800edf3
 800ed40:	0800edf3 	.word	0x0800edf3
 800ed44:	0800edbf 	.word	0x0800edbf
 800ed48:	0800edf3 	.word	0x0800edf3
 800ed4c:	0800edf3 	.word	0x0800edf3
 800ed50:	0800edf3 	.word	0x0800edf3
 800ed54:	0800edf3 	.word	0x0800edf3
 800ed58:	0800edf3 	.word	0x0800edf3
 800ed5c:	0800edf3 	.word	0x0800edf3
 800ed60:	0800edf3 	.word	0x0800edf3
 800ed64:	0800edf3 	.word	0x0800edf3
 800ed68:	0800edf3 	.word	0x0800edf3
 800ed6c:	0800edf3 	.word	0x0800edf3
 800ed70:	0800edf3 	.word	0x0800edf3
 800ed74:	0800edf3 	.word	0x0800edf3
 800ed78:	0800edf3 	.word	0x0800edf3
 800ed7c:	0800edf3 	.word	0x0800edf3
 800ed80:	0800edf3 	.word	0x0800edf3
 800ed84:	0800ede5 	.word	0x0800ede5
 800ed88:	2b40      	cmp	r3, #64	; 0x40
 800ed8a:	d02e      	beq.n	800edea <UART_SetConfig+0xa36>
 800ed8c:	e031      	b.n	800edf2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ed8e:	f7fa fd25 	bl	80097dc <HAL_RCC_GetPCLK1Freq>
 800ed92:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ed94:	e033      	b.n	800edfe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ed96:	f7fa fd37 	bl	8009808 <HAL_RCC_GetPCLK2Freq>
 800ed9a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ed9c:	e02f      	b.n	800edfe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ed9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800eda2:	4618      	mov	r0, r3
 800eda4:	f7fc fd28 	bl	800b7f8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800eda8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800edac:	e027      	b.n	800edfe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800edae:	f107 0318 	add.w	r3, r7, #24
 800edb2:	4618      	mov	r0, r3
 800edb4:	f7fc fe74 	bl	800baa0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800edb8:	69fb      	ldr	r3, [r7, #28]
 800edba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800edbc:	e01f      	b.n	800edfe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800edbe:	4b2d      	ldr	r3, [pc, #180]	; (800ee74 <UART_SetConfig+0xac0>)
 800edc0:	681b      	ldr	r3, [r3, #0]
 800edc2:	f003 0320 	and.w	r3, r3, #32
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d009      	beq.n	800edde <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800edca:	4b2a      	ldr	r3, [pc, #168]	; (800ee74 <UART_SetConfig+0xac0>)
 800edcc:	681b      	ldr	r3, [r3, #0]
 800edce:	08db      	lsrs	r3, r3, #3
 800edd0:	f003 0303 	and.w	r3, r3, #3
 800edd4:	4a28      	ldr	r2, [pc, #160]	; (800ee78 <UART_SetConfig+0xac4>)
 800edd6:	fa22 f303 	lsr.w	r3, r2, r3
 800edda:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800eddc:	e00f      	b.n	800edfe <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800edde:	4b26      	ldr	r3, [pc, #152]	; (800ee78 <UART_SetConfig+0xac4>)
 800ede0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ede2:	e00c      	b.n	800edfe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ede4:	4b25      	ldr	r3, [pc, #148]	; (800ee7c <UART_SetConfig+0xac8>)
 800ede6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ede8:	e009      	b.n	800edfe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800edea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800edee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800edf0:	e005      	b.n	800edfe <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800edf2:	2300      	movs	r3, #0
 800edf4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800edf6:	2301      	movs	r3, #1
 800edf8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800edfc:	bf00      	nop
    }

    if (pclk != 0U)
 800edfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d021      	beq.n	800ee48 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ee04:	697b      	ldr	r3, [r7, #20]
 800ee06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee08:	4a1d      	ldr	r2, [pc, #116]	; (800ee80 <UART_SetConfig+0xacc>)
 800ee0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ee0e:	461a      	mov	r2, r3
 800ee10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ee12:	fbb3 f2f2 	udiv	r2, r3, r2
 800ee16:	697b      	ldr	r3, [r7, #20]
 800ee18:	685b      	ldr	r3, [r3, #4]
 800ee1a:	085b      	lsrs	r3, r3, #1
 800ee1c:	441a      	add	r2, r3
 800ee1e:	697b      	ldr	r3, [r7, #20]
 800ee20:	685b      	ldr	r3, [r3, #4]
 800ee22:	fbb2 f3f3 	udiv	r3, r2, r3
 800ee26:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ee28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee2a:	2b0f      	cmp	r3, #15
 800ee2c:	d909      	bls.n	800ee42 <UART_SetConfig+0xa8e>
 800ee2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ee34:	d205      	bcs.n	800ee42 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ee36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee38:	b29a      	uxth	r2, r3
 800ee3a:	697b      	ldr	r3, [r7, #20]
 800ee3c:	681b      	ldr	r3, [r3, #0]
 800ee3e:	60da      	str	r2, [r3, #12]
 800ee40:	e002      	b.n	800ee48 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800ee42:	2301      	movs	r3, #1
 800ee44:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ee48:	697b      	ldr	r3, [r7, #20]
 800ee4a:	2201      	movs	r2, #1
 800ee4c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800ee50:	697b      	ldr	r3, [r7, #20]
 800ee52:	2201      	movs	r2, #1
 800ee54:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ee58:	697b      	ldr	r3, [r7, #20]
 800ee5a:	2200      	movs	r2, #0
 800ee5c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800ee5e:	697b      	ldr	r3, [r7, #20]
 800ee60:	2200      	movs	r2, #0
 800ee62:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800ee64:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800ee68:	4618      	mov	r0, r3
 800ee6a:	3748      	adds	r7, #72	; 0x48
 800ee6c:	46bd      	mov	sp, r7
 800ee6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ee72:	bf00      	nop
 800ee74:	58024400 	.word	0x58024400
 800ee78:	03d09000 	.word	0x03d09000
 800ee7c:	003d0900 	.word	0x003d0900
 800ee80:	08017cd4 	.word	0x08017cd4

0800ee84 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ee84:	b480      	push	{r7}
 800ee86:	b083      	sub	sp, #12
 800ee88:	af00      	add	r7, sp, #0
 800ee8a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee90:	f003 0301 	and.w	r3, r3, #1
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	d00a      	beq.n	800eeae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	681b      	ldr	r3, [r3, #0]
 800ee9c:	685b      	ldr	r3, [r3, #4]
 800ee9e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	681b      	ldr	r3, [r3, #0]
 800eeaa:	430a      	orrs	r2, r1
 800eeac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eeb2:	f003 0302 	and.w	r3, r3, #2
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	d00a      	beq.n	800eed0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	681b      	ldr	r3, [r3, #0]
 800eebe:	685b      	ldr	r3, [r3, #4]
 800eec0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	681b      	ldr	r3, [r3, #0]
 800eecc:	430a      	orrs	r2, r1
 800eece:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eed4:	f003 0304 	and.w	r3, r3, #4
 800eed8:	2b00      	cmp	r3, #0
 800eeda:	d00a      	beq.n	800eef2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	681b      	ldr	r3, [r3, #0]
 800eee0:	685b      	ldr	r3, [r3, #4]
 800eee2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	681b      	ldr	r3, [r3, #0]
 800eeee:	430a      	orrs	r2, r1
 800eef0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eef6:	f003 0308 	and.w	r3, r3, #8
 800eefa:	2b00      	cmp	r3, #0
 800eefc:	d00a      	beq.n	800ef14 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	681b      	ldr	r3, [r3, #0]
 800ef02:	685b      	ldr	r3, [r3, #4]
 800ef04:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	681b      	ldr	r3, [r3, #0]
 800ef10:	430a      	orrs	r2, r1
 800ef12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ef18:	f003 0310 	and.w	r3, r3, #16
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	d00a      	beq.n	800ef36 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	681b      	ldr	r3, [r3, #0]
 800ef24:	689b      	ldr	r3, [r3, #8]
 800ef26:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	681b      	ldr	r3, [r3, #0]
 800ef32:	430a      	orrs	r2, r1
 800ef34:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ef3a:	f003 0320 	and.w	r3, r3, #32
 800ef3e:	2b00      	cmp	r3, #0
 800ef40:	d00a      	beq.n	800ef58 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	681b      	ldr	r3, [r3, #0]
 800ef46:	689b      	ldr	r3, [r3, #8]
 800ef48:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	681b      	ldr	r3, [r3, #0]
 800ef54:	430a      	orrs	r2, r1
 800ef56:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ef5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ef60:	2b00      	cmp	r3, #0
 800ef62:	d01a      	beq.n	800ef9a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	681b      	ldr	r3, [r3, #0]
 800ef68:	685b      	ldr	r3, [r3, #4]
 800ef6a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	681b      	ldr	r3, [r3, #0]
 800ef76:	430a      	orrs	r2, r1
 800ef78:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ef7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ef82:	d10a      	bne.n	800ef9a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	681b      	ldr	r3, [r3, #0]
 800ef88:	685b      	ldr	r3, [r3, #4]
 800ef8a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	681b      	ldr	r3, [r3, #0]
 800ef96:	430a      	orrs	r2, r1
 800ef98:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ef9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	d00a      	beq.n	800efbc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	681b      	ldr	r3, [r3, #0]
 800efaa:	685b      	ldr	r3, [r3, #4]
 800efac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	681b      	ldr	r3, [r3, #0]
 800efb8:	430a      	orrs	r2, r1
 800efba:	605a      	str	r2, [r3, #4]
  }
}
 800efbc:	bf00      	nop
 800efbe:	370c      	adds	r7, #12
 800efc0:	46bd      	mov	sp, r7
 800efc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efc6:	4770      	bx	lr

0800efc8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800efc8:	b580      	push	{r7, lr}
 800efca:	b098      	sub	sp, #96	; 0x60
 800efcc:	af02      	add	r7, sp, #8
 800efce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	2200      	movs	r2, #0
 800efd4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800efd8:	f7f4 fddc 	bl	8003b94 <HAL_GetTick>
 800efdc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	681b      	ldr	r3, [r3, #0]
 800efe2:	681b      	ldr	r3, [r3, #0]
 800efe4:	f003 0308 	and.w	r3, r3, #8
 800efe8:	2b08      	cmp	r3, #8
 800efea:	d12f      	bne.n	800f04c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800efec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800eff0:	9300      	str	r3, [sp, #0]
 800eff2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800eff4:	2200      	movs	r2, #0
 800eff6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800effa:	6878      	ldr	r0, [r7, #4]
 800effc:	f000 f88e 	bl	800f11c <UART_WaitOnFlagUntilTimeout>
 800f000:	4603      	mov	r3, r0
 800f002:	2b00      	cmp	r3, #0
 800f004:	d022      	beq.n	800f04c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	681b      	ldr	r3, [r3, #0]
 800f00a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f00c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f00e:	e853 3f00 	ldrex	r3, [r3]
 800f012:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f014:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f016:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f01a:	653b      	str	r3, [r7, #80]	; 0x50
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	681b      	ldr	r3, [r3, #0]
 800f020:	461a      	mov	r2, r3
 800f022:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f024:	647b      	str	r3, [r7, #68]	; 0x44
 800f026:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f028:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f02a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f02c:	e841 2300 	strex	r3, r2, [r1]
 800f030:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f032:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f034:	2b00      	cmp	r3, #0
 800f036:	d1e6      	bne.n	800f006 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	2220      	movs	r2, #32
 800f03c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	2200      	movs	r2, #0
 800f044:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f048:	2303      	movs	r3, #3
 800f04a:	e063      	b.n	800f114 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	681b      	ldr	r3, [r3, #0]
 800f050:	681b      	ldr	r3, [r3, #0]
 800f052:	f003 0304 	and.w	r3, r3, #4
 800f056:	2b04      	cmp	r3, #4
 800f058:	d149      	bne.n	800f0ee <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f05a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f05e:	9300      	str	r3, [sp, #0]
 800f060:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f062:	2200      	movs	r2, #0
 800f064:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800f068:	6878      	ldr	r0, [r7, #4]
 800f06a:	f000 f857 	bl	800f11c <UART_WaitOnFlagUntilTimeout>
 800f06e:	4603      	mov	r3, r0
 800f070:	2b00      	cmp	r3, #0
 800f072:	d03c      	beq.n	800f0ee <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	681b      	ldr	r3, [r3, #0]
 800f078:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f07a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f07c:	e853 3f00 	ldrex	r3, [r3]
 800f080:	623b      	str	r3, [r7, #32]
   return(result);
 800f082:	6a3b      	ldr	r3, [r7, #32]
 800f084:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f088:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	681b      	ldr	r3, [r3, #0]
 800f08e:	461a      	mov	r2, r3
 800f090:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f092:	633b      	str	r3, [r7, #48]	; 0x30
 800f094:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f096:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f098:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f09a:	e841 2300 	strex	r3, r2, [r1]
 800f09e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f0a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0a2:	2b00      	cmp	r3, #0
 800f0a4:	d1e6      	bne.n	800f074 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	681b      	ldr	r3, [r3, #0]
 800f0aa:	3308      	adds	r3, #8
 800f0ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f0ae:	693b      	ldr	r3, [r7, #16]
 800f0b0:	e853 3f00 	ldrex	r3, [r3]
 800f0b4:	60fb      	str	r3, [r7, #12]
   return(result);
 800f0b6:	68fb      	ldr	r3, [r7, #12]
 800f0b8:	f023 0301 	bic.w	r3, r3, #1
 800f0bc:	64bb      	str	r3, [r7, #72]	; 0x48
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	681b      	ldr	r3, [r3, #0]
 800f0c2:	3308      	adds	r3, #8
 800f0c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f0c6:	61fa      	str	r2, [r7, #28]
 800f0c8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f0ca:	69b9      	ldr	r1, [r7, #24]
 800f0cc:	69fa      	ldr	r2, [r7, #28]
 800f0ce:	e841 2300 	strex	r3, r2, [r1]
 800f0d2:	617b      	str	r3, [r7, #20]
   return(result);
 800f0d4:	697b      	ldr	r3, [r7, #20]
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	d1e5      	bne.n	800f0a6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	2220      	movs	r2, #32
 800f0de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	2200      	movs	r2, #0
 800f0e6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f0ea:	2303      	movs	r3, #3
 800f0ec:	e012      	b.n	800f114 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	2220      	movs	r2, #32
 800f0f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	2220      	movs	r2, #32
 800f0fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	2200      	movs	r2, #0
 800f102:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	2200      	movs	r2, #0
 800f108:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	2200      	movs	r2, #0
 800f10e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f112:	2300      	movs	r3, #0
}
 800f114:	4618      	mov	r0, r3
 800f116:	3758      	adds	r7, #88	; 0x58
 800f118:	46bd      	mov	sp, r7
 800f11a:	bd80      	pop	{r7, pc}

0800f11c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f11c:	b580      	push	{r7, lr}
 800f11e:	b084      	sub	sp, #16
 800f120:	af00      	add	r7, sp, #0
 800f122:	60f8      	str	r0, [r7, #12]
 800f124:	60b9      	str	r1, [r7, #8]
 800f126:	603b      	str	r3, [r7, #0]
 800f128:	4613      	mov	r3, r2
 800f12a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f12c:	e049      	b.n	800f1c2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f12e:	69bb      	ldr	r3, [r7, #24]
 800f130:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f134:	d045      	beq.n	800f1c2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f136:	f7f4 fd2d 	bl	8003b94 <HAL_GetTick>
 800f13a:	4602      	mov	r2, r0
 800f13c:	683b      	ldr	r3, [r7, #0]
 800f13e:	1ad3      	subs	r3, r2, r3
 800f140:	69ba      	ldr	r2, [r7, #24]
 800f142:	429a      	cmp	r2, r3
 800f144:	d302      	bcc.n	800f14c <UART_WaitOnFlagUntilTimeout+0x30>
 800f146:	69bb      	ldr	r3, [r7, #24]
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d101      	bne.n	800f150 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800f14c:	2303      	movs	r3, #3
 800f14e:	e048      	b.n	800f1e2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800f150:	68fb      	ldr	r3, [r7, #12]
 800f152:	681b      	ldr	r3, [r3, #0]
 800f154:	681b      	ldr	r3, [r3, #0]
 800f156:	f003 0304 	and.w	r3, r3, #4
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	d031      	beq.n	800f1c2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800f15e:	68fb      	ldr	r3, [r7, #12]
 800f160:	681b      	ldr	r3, [r3, #0]
 800f162:	69db      	ldr	r3, [r3, #28]
 800f164:	f003 0308 	and.w	r3, r3, #8
 800f168:	2b08      	cmp	r3, #8
 800f16a:	d110      	bne.n	800f18e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f16c:	68fb      	ldr	r3, [r7, #12]
 800f16e:	681b      	ldr	r3, [r3, #0]
 800f170:	2208      	movs	r2, #8
 800f172:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800f174:	68f8      	ldr	r0, [r7, #12]
 800f176:	f000 f839 	bl	800f1ec <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800f17a:	68fb      	ldr	r3, [r7, #12]
 800f17c:	2208      	movs	r2, #8
 800f17e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800f182:	68fb      	ldr	r3, [r7, #12]
 800f184:	2200      	movs	r2, #0
 800f186:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800f18a:	2301      	movs	r3, #1
 800f18c:	e029      	b.n	800f1e2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f18e:	68fb      	ldr	r3, [r7, #12]
 800f190:	681b      	ldr	r3, [r3, #0]
 800f192:	69db      	ldr	r3, [r3, #28]
 800f194:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f198:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f19c:	d111      	bne.n	800f1c2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f19e:	68fb      	ldr	r3, [r7, #12]
 800f1a0:	681b      	ldr	r3, [r3, #0]
 800f1a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f1a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f1a8:	68f8      	ldr	r0, [r7, #12]
 800f1aa:	f000 f81f 	bl	800f1ec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f1ae:	68fb      	ldr	r3, [r7, #12]
 800f1b0:	2220      	movs	r2, #32
 800f1b2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f1b6:	68fb      	ldr	r3, [r7, #12]
 800f1b8:	2200      	movs	r2, #0
 800f1ba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800f1be:	2303      	movs	r3, #3
 800f1c0:	e00f      	b.n	800f1e2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f1c2:	68fb      	ldr	r3, [r7, #12]
 800f1c4:	681b      	ldr	r3, [r3, #0]
 800f1c6:	69da      	ldr	r2, [r3, #28]
 800f1c8:	68bb      	ldr	r3, [r7, #8]
 800f1ca:	4013      	ands	r3, r2
 800f1cc:	68ba      	ldr	r2, [r7, #8]
 800f1ce:	429a      	cmp	r2, r3
 800f1d0:	bf0c      	ite	eq
 800f1d2:	2301      	moveq	r3, #1
 800f1d4:	2300      	movne	r3, #0
 800f1d6:	b2db      	uxtb	r3, r3
 800f1d8:	461a      	mov	r2, r3
 800f1da:	79fb      	ldrb	r3, [r7, #7]
 800f1dc:	429a      	cmp	r2, r3
 800f1de:	d0a6      	beq.n	800f12e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f1e0:	2300      	movs	r3, #0
}
 800f1e2:	4618      	mov	r0, r3
 800f1e4:	3710      	adds	r7, #16
 800f1e6:	46bd      	mov	sp, r7
 800f1e8:	bd80      	pop	{r7, pc}
	...

0800f1ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f1ec:	b480      	push	{r7}
 800f1ee:	b095      	sub	sp, #84	; 0x54
 800f1f0:	af00      	add	r7, sp, #0
 800f1f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	681b      	ldr	r3, [r3, #0]
 800f1f8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f1fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f1fc:	e853 3f00 	ldrex	r3, [r3]
 800f200:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f204:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f208:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	681b      	ldr	r3, [r3, #0]
 800f20e:	461a      	mov	r2, r3
 800f210:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f212:	643b      	str	r3, [r7, #64]	; 0x40
 800f214:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f216:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f218:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f21a:	e841 2300 	strex	r3, r2, [r1]
 800f21e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f222:	2b00      	cmp	r3, #0
 800f224:	d1e6      	bne.n	800f1f4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	681b      	ldr	r3, [r3, #0]
 800f22a:	3308      	adds	r3, #8
 800f22c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f22e:	6a3b      	ldr	r3, [r7, #32]
 800f230:	e853 3f00 	ldrex	r3, [r3]
 800f234:	61fb      	str	r3, [r7, #28]
   return(result);
 800f236:	69fa      	ldr	r2, [r7, #28]
 800f238:	4b1e      	ldr	r3, [pc, #120]	; (800f2b4 <UART_EndRxTransfer+0xc8>)
 800f23a:	4013      	ands	r3, r2
 800f23c:	64bb      	str	r3, [r7, #72]	; 0x48
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	681b      	ldr	r3, [r3, #0]
 800f242:	3308      	adds	r3, #8
 800f244:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f246:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f248:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f24a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f24c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f24e:	e841 2300 	strex	r3, r2, [r1]
 800f252:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f256:	2b00      	cmp	r3, #0
 800f258:	d1e5      	bne.n	800f226 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f25e:	2b01      	cmp	r3, #1
 800f260:	d118      	bne.n	800f294 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	681b      	ldr	r3, [r3, #0]
 800f266:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f268:	68fb      	ldr	r3, [r7, #12]
 800f26a:	e853 3f00 	ldrex	r3, [r3]
 800f26e:	60bb      	str	r3, [r7, #8]
   return(result);
 800f270:	68bb      	ldr	r3, [r7, #8]
 800f272:	f023 0310 	bic.w	r3, r3, #16
 800f276:	647b      	str	r3, [r7, #68]	; 0x44
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	681b      	ldr	r3, [r3, #0]
 800f27c:	461a      	mov	r2, r3
 800f27e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f280:	61bb      	str	r3, [r7, #24]
 800f282:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f284:	6979      	ldr	r1, [r7, #20]
 800f286:	69ba      	ldr	r2, [r7, #24]
 800f288:	e841 2300 	strex	r3, r2, [r1]
 800f28c:	613b      	str	r3, [r7, #16]
   return(result);
 800f28e:	693b      	ldr	r3, [r7, #16]
 800f290:	2b00      	cmp	r3, #0
 800f292:	d1e6      	bne.n	800f262 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	2220      	movs	r2, #32
 800f298:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	2200      	movs	r2, #0
 800f2a0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	2200      	movs	r2, #0
 800f2a6:	675a      	str	r2, [r3, #116]	; 0x74
}
 800f2a8:	bf00      	nop
 800f2aa:	3754      	adds	r7, #84	; 0x54
 800f2ac:	46bd      	mov	sp, r7
 800f2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2b2:	4770      	bx	lr
 800f2b4:	effffffe 	.word	0xeffffffe

0800f2b8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f2b8:	b580      	push	{r7, lr}
 800f2ba:	b084      	sub	sp, #16
 800f2bc:	af00      	add	r7, sp, #0
 800f2be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f2c4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800f2c6:	68fb      	ldr	r3, [r7, #12]
 800f2c8:	2200      	movs	r2, #0
 800f2ca:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800f2ce:	68fb      	ldr	r3, [r7, #12]
 800f2d0:	2200      	movs	r2, #0
 800f2d2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f2d6:	68f8      	ldr	r0, [r7, #12]
 800f2d8:	f7ff f856 	bl	800e388 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f2dc:	bf00      	nop
 800f2de:	3710      	adds	r7, #16
 800f2e0:	46bd      	mov	sp, r7
 800f2e2:	bd80      	pop	{r7, pc}

0800f2e4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800f2e4:	b580      	push	{r7, lr}
 800f2e6:	b088      	sub	sp, #32
 800f2e8:	af00      	add	r7, sp, #0
 800f2ea:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	681b      	ldr	r3, [r3, #0]
 800f2f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f2f2:	68fb      	ldr	r3, [r7, #12]
 800f2f4:	e853 3f00 	ldrex	r3, [r3]
 800f2f8:	60bb      	str	r3, [r7, #8]
   return(result);
 800f2fa:	68bb      	ldr	r3, [r7, #8]
 800f2fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f300:	61fb      	str	r3, [r7, #28]
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	681b      	ldr	r3, [r3, #0]
 800f306:	461a      	mov	r2, r3
 800f308:	69fb      	ldr	r3, [r7, #28]
 800f30a:	61bb      	str	r3, [r7, #24]
 800f30c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f30e:	6979      	ldr	r1, [r7, #20]
 800f310:	69ba      	ldr	r2, [r7, #24]
 800f312:	e841 2300 	strex	r3, r2, [r1]
 800f316:	613b      	str	r3, [r7, #16]
   return(result);
 800f318:	693b      	ldr	r3, [r7, #16]
 800f31a:	2b00      	cmp	r3, #0
 800f31c:	d1e6      	bne.n	800f2ec <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	2220      	movs	r2, #32
 800f322:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	2200      	movs	r2, #0
 800f32a:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800f32c:	6878      	ldr	r0, [r7, #4]
 800f32e:	f7ff f821 	bl	800e374 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f332:	bf00      	nop
 800f334:	3720      	adds	r7, #32
 800f336:	46bd      	mov	sp, r7
 800f338:	bd80      	pop	{r7, pc}

0800f33a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800f33a:	b480      	push	{r7}
 800f33c:	b083      	sub	sp, #12
 800f33e:	af00      	add	r7, sp, #0
 800f340:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800f342:	bf00      	nop
 800f344:	370c      	adds	r7, #12
 800f346:	46bd      	mov	sp, r7
 800f348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f34c:	4770      	bx	lr

0800f34e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800f34e:	b480      	push	{r7}
 800f350:	b083      	sub	sp, #12
 800f352:	af00      	add	r7, sp, #0
 800f354:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800f356:	bf00      	nop
 800f358:	370c      	adds	r7, #12
 800f35a:	46bd      	mov	sp, r7
 800f35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f360:	4770      	bx	lr

0800f362 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800f362:	b480      	push	{r7}
 800f364:	b083      	sub	sp, #12
 800f366:	af00      	add	r7, sp, #0
 800f368:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800f36a:	bf00      	nop
 800f36c:	370c      	adds	r7, #12
 800f36e:	46bd      	mov	sp, r7
 800f370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f374:	4770      	bx	lr

0800f376 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800f376:	b480      	push	{r7}
 800f378:	b085      	sub	sp, #20
 800f37a:	af00      	add	r7, sp, #0
 800f37c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f384:	2b01      	cmp	r3, #1
 800f386:	d101      	bne.n	800f38c <HAL_UARTEx_DisableFifoMode+0x16>
 800f388:	2302      	movs	r3, #2
 800f38a:	e027      	b.n	800f3dc <HAL_UARTEx_DisableFifoMode+0x66>
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	2201      	movs	r2, #1
 800f390:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	2224      	movs	r2, #36	; 0x24
 800f398:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	681b      	ldr	r3, [r3, #0]
 800f3a0:	681b      	ldr	r3, [r3, #0]
 800f3a2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	681b      	ldr	r3, [r3, #0]
 800f3a8:	681a      	ldr	r2, [r3, #0]
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	681b      	ldr	r3, [r3, #0]
 800f3ae:	f022 0201 	bic.w	r2, r2, #1
 800f3b2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800f3b4:	68fb      	ldr	r3, [r7, #12]
 800f3b6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800f3ba:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	2200      	movs	r2, #0
 800f3c0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	681b      	ldr	r3, [r3, #0]
 800f3c6:	68fa      	ldr	r2, [r7, #12]
 800f3c8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	2220      	movs	r2, #32
 800f3ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	2200      	movs	r2, #0
 800f3d6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f3da:	2300      	movs	r3, #0
}
 800f3dc:	4618      	mov	r0, r3
 800f3de:	3714      	adds	r7, #20
 800f3e0:	46bd      	mov	sp, r7
 800f3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3e6:	4770      	bx	lr

0800f3e8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f3e8:	b580      	push	{r7, lr}
 800f3ea:	b084      	sub	sp, #16
 800f3ec:	af00      	add	r7, sp, #0
 800f3ee:	6078      	str	r0, [r7, #4]
 800f3f0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f3f8:	2b01      	cmp	r3, #1
 800f3fa:	d101      	bne.n	800f400 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800f3fc:	2302      	movs	r3, #2
 800f3fe:	e02d      	b.n	800f45c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	2201      	movs	r2, #1
 800f404:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	2224      	movs	r2, #36	; 0x24
 800f40c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	681b      	ldr	r3, [r3, #0]
 800f414:	681b      	ldr	r3, [r3, #0]
 800f416:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	681b      	ldr	r3, [r3, #0]
 800f41c:	681a      	ldr	r2, [r3, #0]
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	681b      	ldr	r3, [r3, #0]
 800f422:	f022 0201 	bic.w	r2, r2, #1
 800f426:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	681b      	ldr	r3, [r3, #0]
 800f42c:	689b      	ldr	r3, [r3, #8]
 800f42e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	681b      	ldr	r3, [r3, #0]
 800f436:	683a      	ldr	r2, [r7, #0]
 800f438:	430a      	orrs	r2, r1
 800f43a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f43c:	6878      	ldr	r0, [r7, #4]
 800f43e:	f000 f84f 	bl	800f4e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	681b      	ldr	r3, [r3, #0]
 800f446:	68fa      	ldr	r2, [r7, #12]
 800f448:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	2220      	movs	r2, #32
 800f44e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	2200      	movs	r2, #0
 800f456:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f45a:	2300      	movs	r3, #0
}
 800f45c:	4618      	mov	r0, r3
 800f45e:	3710      	adds	r7, #16
 800f460:	46bd      	mov	sp, r7
 800f462:	bd80      	pop	{r7, pc}

0800f464 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f464:	b580      	push	{r7, lr}
 800f466:	b084      	sub	sp, #16
 800f468:	af00      	add	r7, sp, #0
 800f46a:	6078      	str	r0, [r7, #4]
 800f46c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f474:	2b01      	cmp	r3, #1
 800f476:	d101      	bne.n	800f47c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800f478:	2302      	movs	r3, #2
 800f47a:	e02d      	b.n	800f4d8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	2201      	movs	r2, #1
 800f480:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	2224      	movs	r2, #36	; 0x24
 800f488:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	681b      	ldr	r3, [r3, #0]
 800f490:	681b      	ldr	r3, [r3, #0]
 800f492:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	681b      	ldr	r3, [r3, #0]
 800f498:	681a      	ldr	r2, [r3, #0]
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	681b      	ldr	r3, [r3, #0]
 800f49e:	f022 0201 	bic.w	r2, r2, #1
 800f4a2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	681b      	ldr	r3, [r3, #0]
 800f4a8:	689b      	ldr	r3, [r3, #8]
 800f4aa:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	681b      	ldr	r3, [r3, #0]
 800f4b2:	683a      	ldr	r2, [r7, #0]
 800f4b4:	430a      	orrs	r2, r1
 800f4b6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f4b8:	6878      	ldr	r0, [r7, #4]
 800f4ba:	f000 f811 	bl	800f4e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	681b      	ldr	r3, [r3, #0]
 800f4c2:	68fa      	ldr	r2, [r7, #12]
 800f4c4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	2220      	movs	r2, #32
 800f4ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	2200      	movs	r2, #0
 800f4d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f4d6:	2300      	movs	r3, #0
}
 800f4d8:	4618      	mov	r0, r3
 800f4da:	3710      	adds	r7, #16
 800f4dc:	46bd      	mov	sp, r7
 800f4de:	bd80      	pop	{r7, pc}

0800f4e0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800f4e0:	b480      	push	{r7}
 800f4e2:	b085      	sub	sp, #20
 800f4e4:	af00      	add	r7, sp, #0
 800f4e6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f4ec:	2b00      	cmp	r3, #0
 800f4ee:	d108      	bne.n	800f502 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	2201      	movs	r2, #1
 800f4f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	2201      	movs	r2, #1
 800f4fc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800f500:	e031      	b.n	800f566 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800f502:	2310      	movs	r3, #16
 800f504:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800f506:	2310      	movs	r3, #16
 800f508:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	681b      	ldr	r3, [r3, #0]
 800f50e:	689b      	ldr	r3, [r3, #8]
 800f510:	0e5b      	lsrs	r3, r3, #25
 800f512:	b2db      	uxtb	r3, r3
 800f514:	f003 0307 	and.w	r3, r3, #7
 800f518:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	681b      	ldr	r3, [r3, #0]
 800f51e:	689b      	ldr	r3, [r3, #8]
 800f520:	0f5b      	lsrs	r3, r3, #29
 800f522:	b2db      	uxtb	r3, r3
 800f524:	f003 0307 	and.w	r3, r3, #7
 800f528:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f52a:	7bbb      	ldrb	r3, [r7, #14]
 800f52c:	7b3a      	ldrb	r2, [r7, #12]
 800f52e:	4911      	ldr	r1, [pc, #68]	; (800f574 <UARTEx_SetNbDataToProcess+0x94>)
 800f530:	5c8a      	ldrb	r2, [r1, r2]
 800f532:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800f536:	7b3a      	ldrb	r2, [r7, #12]
 800f538:	490f      	ldr	r1, [pc, #60]	; (800f578 <UARTEx_SetNbDataToProcess+0x98>)
 800f53a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f53c:	fb93 f3f2 	sdiv	r3, r3, r2
 800f540:	b29a      	uxth	r2, r3
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f548:	7bfb      	ldrb	r3, [r7, #15]
 800f54a:	7b7a      	ldrb	r2, [r7, #13]
 800f54c:	4909      	ldr	r1, [pc, #36]	; (800f574 <UARTEx_SetNbDataToProcess+0x94>)
 800f54e:	5c8a      	ldrb	r2, [r1, r2]
 800f550:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800f554:	7b7a      	ldrb	r2, [r7, #13]
 800f556:	4908      	ldr	r1, [pc, #32]	; (800f578 <UARTEx_SetNbDataToProcess+0x98>)
 800f558:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f55a:	fb93 f3f2 	sdiv	r3, r3, r2
 800f55e:	b29a      	uxth	r2, r3
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800f566:	bf00      	nop
 800f568:	3714      	adds	r7, #20
 800f56a:	46bd      	mov	sp, r7
 800f56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f570:	4770      	bx	lr
 800f572:	bf00      	nop
 800f574:	08017cec 	.word	0x08017cec
 800f578:	08017cf4 	.word	0x08017cf4

0800f57c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800f57c:	b084      	sub	sp, #16
 800f57e:	b580      	push	{r7, lr}
 800f580:	b084      	sub	sp, #16
 800f582:	af00      	add	r7, sp, #0
 800f584:	6078      	str	r0, [r7, #4]
 800f586:	f107 001c 	add.w	r0, r7, #28
 800f58a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800f58e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f590:	2b01      	cmp	r3, #1
 800f592:	d120      	bne.n	800f5d6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f598:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	68da      	ldr	r2, [r3, #12]
 800f5a4:	4b2a      	ldr	r3, [pc, #168]	; (800f650 <USB_CoreInit+0xd4>)
 800f5a6:	4013      	ands	r3, r2
 800f5a8:	687a      	ldr	r2, [r7, #4]
 800f5aa:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	68db      	ldr	r3, [r3, #12]
 800f5b0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800f5b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f5ba:	2b01      	cmp	r3, #1
 800f5bc:	d105      	bne.n	800f5ca <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	68db      	ldr	r3, [r3, #12]
 800f5c2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800f5ca:	6878      	ldr	r0, [r7, #4]
 800f5cc:	f000 faac 	bl	800fb28 <USB_CoreReset>
 800f5d0:	4603      	mov	r3, r0
 800f5d2:	73fb      	strb	r3, [r7, #15]
 800f5d4:	e01a      	b.n	800f60c <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	68db      	ldr	r3, [r3, #12]
 800f5da:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800f5e2:	6878      	ldr	r0, [r7, #4]
 800f5e4:	f000 faa0 	bl	800fb28 <USB_CoreReset>
 800f5e8:	4603      	mov	r3, r0
 800f5ea:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800f5ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f5ee:	2b00      	cmp	r3, #0
 800f5f0:	d106      	bne.n	800f600 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f5f6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	639a      	str	r2, [r3, #56]	; 0x38
 800f5fe:	e005      	b.n	800f60c <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f604:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800f60c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f60e:	2b01      	cmp	r3, #1
 800f610:	d116      	bne.n	800f640 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f616:	b29a      	uxth	r2, r3
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f620:	4b0c      	ldr	r3, [pc, #48]	; (800f654 <USB_CoreInit+0xd8>)
 800f622:	4313      	orrs	r3, r2
 800f624:	687a      	ldr	r2, [r7, #4]
 800f626:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	689b      	ldr	r3, [r3, #8]
 800f62c:	f043 0206 	orr.w	r2, r3, #6
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	689b      	ldr	r3, [r3, #8]
 800f638:	f043 0220 	orr.w	r2, r3, #32
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800f640:	7bfb      	ldrb	r3, [r7, #15]
}
 800f642:	4618      	mov	r0, r3
 800f644:	3710      	adds	r7, #16
 800f646:	46bd      	mov	sp, r7
 800f648:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f64c:	b004      	add	sp, #16
 800f64e:	4770      	bx	lr
 800f650:	ffbdffbf 	.word	0xffbdffbf
 800f654:	03ee0000 	.word	0x03ee0000

0800f658 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800f658:	b480      	push	{r7}
 800f65a:	b083      	sub	sp, #12
 800f65c:	af00      	add	r7, sp, #0
 800f65e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	689b      	ldr	r3, [r3, #8]
 800f664:	f023 0201 	bic.w	r2, r3, #1
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800f66c:	2300      	movs	r3, #0
}
 800f66e:	4618      	mov	r0, r3
 800f670:	370c      	adds	r7, #12
 800f672:	46bd      	mov	sp, r7
 800f674:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f678:	4770      	bx	lr

0800f67a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800f67a:	b580      	push	{r7, lr}
 800f67c:	b084      	sub	sp, #16
 800f67e:	af00      	add	r7, sp, #0
 800f680:	6078      	str	r0, [r7, #4]
 800f682:	460b      	mov	r3, r1
 800f684:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800f686:	2300      	movs	r3, #0
 800f688:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	68db      	ldr	r3, [r3, #12]
 800f68e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800f696:	78fb      	ldrb	r3, [r7, #3]
 800f698:	2b01      	cmp	r3, #1
 800f69a:	d115      	bne.n	800f6c8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	68db      	ldr	r3, [r3, #12]
 800f6a0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800f6a8:	2001      	movs	r0, #1
 800f6aa:	f7f4 fa7f 	bl	8003bac <HAL_Delay>
      ms++;
 800f6ae:	68fb      	ldr	r3, [r7, #12]
 800f6b0:	3301      	adds	r3, #1
 800f6b2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800f6b4:	6878      	ldr	r0, [r7, #4]
 800f6b6:	f000 fa29 	bl	800fb0c <USB_GetMode>
 800f6ba:	4603      	mov	r3, r0
 800f6bc:	2b01      	cmp	r3, #1
 800f6be:	d01e      	beq.n	800f6fe <USB_SetCurrentMode+0x84>
 800f6c0:	68fb      	ldr	r3, [r7, #12]
 800f6c2:	2b31      	cmp	r3, #49	; 0x31
 800f6c4:	d9f0      	bls.n	800f6a8 <USB_SetCurrentMode+0x2e>
 800f6c6:	e01a      	b.n	800f6fe <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800f6c8:	78fb      	ldrb	r3, [r7, #3]
 800f6ca:	2b00      	cmp	r3, #0
 800f6cc:	d115      	bne.n	800f6fa <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	68db      	ldr	r3, [r3, #12]
 800f6d2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800f6da:	2001      	movs	r0, #1
 800f6dc:	f7f4 fa66 	bl	8003bac <HAL_Delay>
      ms++;
 800f6e0:	68fb      	ldr	r3, [r7, #12]
 800f6e2:	3301      	adds	r3, #1
 800f6e4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800f6e6:	6878      	ldr	r0, [r7, #4]
 800f6e8:	f000 fa10 	bl	800fb0c <USB_GetMode>
 800f6ec:	4603      	mov	r3, r0
 800f6ee:	2b00      	cmp	r3, #0
 800f6f0:	d005      	beq.n	800f6fe <USB_SetCurrentMode+0x84>
 800f6f2:	68fb      	ldr	r3, [r7, #12]
 800f6f4:	2b31      	cmp	r3, #49	; 0x31
 800f6f6:	d9f0      	bls.n	800f6da <USB_SetCurrentMode+0x60>
 800f6f8:	e001      	b.n	800f6fe <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800f6fa:	2301      	movs	r3, #1
 800f6fc:	e005      	b.n	800f70a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800f6fe:	68fb      	ldr	r3, [r7, #12]
 800f700:	2b32      	cmp	r3, #50	; 0x32
 800f702:	d101      	bne.n	800f708 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800f704:	2301      	movs	r3, #1
 800f706:	e000      	b.n	800f70a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800f708:	2300      	movs	r3, #0
}
 800f70a:	4618      	mov	r0, r3
 800f70c:	3710      	adds	r7, #16
 800f70e:	46bd      	mov	sp, r7
 800f710:	bd80      	pop	{r7, pc}
	...

0800f714 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800f714:	b084      	sub	sp, #16
 800f716:	b580      	push	{r7, lr}
 800f718:	b086      	sub	sp, #24
 800f71a:	af00      	add	r7, sp, #0
 800f71c:	6078      	str	r0, [r7, #4]
 800f71e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800f722:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800f726:	2300      	movs	r3, #0
 800f728:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800f72e:	2300      	movs	r3, #0
 800f730:	613b      	str	r3, [r7, #16]
 800f732:	e009      	b.n	800f748 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800f734:	687a      	ldr	r2, [r7, #4]
 800f736:	693b      	ldr	r3, [r7, #16]
 800f738:	3340      	adds	r3, #64	; 0x40
 800f73a:	009b      	lsls	r3, r3, #2
 800f73c:	4413      	add	r3, r2
 800f73e:	2200      	movs	r2, #0
 800f740:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800f742:	693b      	ldr	r3, [r7, #16]
 800f744:	3301      	adds	r3, #1
 800f746:	613b      	str	r3, [r7, #16]
 800f748:	693b      	ldr	r3, [r7, #16]
 800f74a:	2b0e      	cmp	r3, #14
 800f74c:	d9f2      	bls.n	800f734 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800f74e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f750:	2b00      	cmp	r3, #0
 800f752:	d11c      	bne.n	800f78e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800f754:	68fb      	ldr	r3, [r7, #12]
 800f756:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f75a:	685b      	ldr	r3, [r3, #4]
 800f75c:	68fa      	ldr	r2, [r7, #12]
 800f75e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f762:	f043 0302 	orr.w	r3, r3, #2
 800f766:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f76c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	681b      	ldr	r3, [r3, #0]
 800f778:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	681b      	ldr	r3, [r3, #0]
 800f784:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	601a      	str	r2, [r3, #0]
 800f78c:	e005      	b.n	800f79a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f792:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800f79a:	68fb      	ldr	r3, [r7, #12]
 800f79c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f7a0:	461a      	mov	r2, r3
 800f7a2:	2300      	movs	r3, #0
 800f7a4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800f7a6:	68fb      	ldr	r3, [r7, #12]
 800f7a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f7ac:	4619      	mov	r1, r3
 800f7ae:	68fb      	ldr	r3, [r7, #12]
 800f7b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f7b4:	461a      	mov	r2, r3
 800f7b6:	680b      	ldr	r3, [r1, #0]
 800f7b8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800f7ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7bc:	2b01      	cmp	r3, #1
 800f7be:	d10c      	bne.n	800f7da <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800f7c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7c2:	2b00      	cmp	r3, #0
 800f7c4:	d104      	bne.n	800f7d0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800f7c6:	2100      	movs	r1, #0
 800f7c8:	6878      	ldr	r0, [r7, #4]
 800f7ca:	f000 f965 	bl	800fa98 <USB_SetDevSpeed>
 800f7ce:	e008      	b.n	800f7e2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800f7d0:	2101      	movs	r1, #1
 800f7d2:	6878      	ldr	r0, [r7, #4]
 800f7d4:	f000 f960 	bl	800fa98 <USB_SetDevSpeed>
 800f7d8:	e003      	b.n	800f7e2 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800f7da:	2103      	movs	r1, #3
 800f7dc:	6878      	ldr	r0, [r7, #4]
 800f7de:	f000 f95b 	bl	800fa98 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800f7e2:	2110      	movs	r1, #16
 800f7e4:	6878      	ldr	r0, [r7, #4]
 800f7e6:	f000 f8f3 	bl	800f9d0 <USB_FlushTxFifo>
 800f7ea:	4603      	mov	r3, r0
 800f7ec:	2b00      	cmp	r3, #0
 800f7ee:	d001      	beq.n	800f7f4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800f7f0:	2301      	movs	r3, #1
 800f7f2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800f7f4:	6878      	ldr	r0, [r7, #4]
 800f7f6:	f000 f91f 	bl	800fa38 <USB_FlushRxFifo>
 800f7fa:	4603      	mov	r3, r0
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	d001      	beq.n	800f804 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800f800:	2301      	movs	r3, #1
 800f802:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800f804:	68fb      	ldr	r3, [r7, #12]
 800f806:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f80a:	461a      	mov	r2, r3
 800f80c:	2300      	movs	r3, #0
 800f80e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800f810:	68fb      	ldr	r3, [r7, #12]
 800f812:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f816:	461a      	mov	r2, r3
 800f818:	2300      	movs	r3, #0
 800f81a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800f81c:	68fb      	ldr	r3, [r7, #12]
 800f81e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f822:	461a      	mov	r2, r3
 800f824:	2300      	movs	r3, #0
 800f826:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f828:	2300      	movs	r3, #0
 800f82a:	613b      	str	r3, [r7, #16]
 800f82c:	e043      	b.n	800f8b6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800f82e:	693b      	ldr	r3, [r7, #16]
 800f830:	015a      	lsls	r2, r3, #5
 800f832:	68fb      	ldr	r3, [r7, #12]
 800f834:	4413      	add	r3, r2
 800f836:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f83a:	681b      	ldr	r3, [r3, #0]
 800f83c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f840:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f844:	d118      	bne.n	800f878 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800f846:	693b      	ldr	r3, [r7, #16]
 800f848:	2b00      	cmp	r3, #0
 800f84a:	d10a      	bne.n	800f862 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800f84c:	693b      	ldr	r3, [r7, #16]
 800f84e:	015a      	lsls	r2, r3, #5
 800f850:	68fb      	ldr	r3, [r7, #12]
 800f852:	4413      	add	r3, r2
 800f854:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f858:	461a      	mov	r2, r3
 800f85a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800f85e:	6013      	str	r3, [r2, #0]
 800f860:	e013      	b.n	800f88a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800f862:	693b      	ldr	r3, [r7, #16]
 800f864:	015a      	lsls	r2, r3, #5
 800f866:	68fb      	ldr	r3, [r7, #12]
 800f868:	4413      	add	r3, r2
 800f86a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f86e:	461a      	mov	r2, r3
 800f870:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800f874:	6013      	str	r3, [r2, #0]
 800f876:	e008      	b.n	800f88a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800f878:	693b      	ldr	r3, [r7, #16]
 800f87a:	015a      	lsls	r2, r3, #5
 800f87c:	68fb      	ldr	r3, [r7, #12]
 800f87e:	4413      	add	r3, r2
 800f880:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f884:	461a      	mov	r2, r3
 800f886:	2300      	movs	r3, #0
 800f888:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800f88a:	693b      	ldr	r3, [r7, #16]
 800f88c:	015a      	lsls	r2, r3, #5
 800f88e:	68fb      	ldr	r3, [r7, #12]
 800f890:	4413      	add	r3, r2
 800f892:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f896:	461a      	mov	r2, r3
 800f898:	2300      	movs	r3, #0
 800f89a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800f89c:	693b      	ldr	r3, [r7, #16]
 800f89e:	015a      	lsls	r2, r3, #5
 800f8a0:	68fb      	ldr	r3, [r7, #12]
 800f8a2:	4413      	add	r3, r2
 800f8a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f8a8:	461a      	mov	r2, r3
 800f8aa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800f8ae:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f8b0:	693b      	ldr	r3, [r7, #16]
 800f8b2:	3301      	adds	r3, #1
 800f8b4:	613b      	str	r3, [r7, #16]
 800f8b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8b8:	693a      	ldr	r2, [r7, #16]
 800f8ba:	429a      	cmp	r2, r3
 800f8bc:	d3b7      	bcc.n	800f82e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f8be:	2300      	movs	r3, #0
 800f8c0:	613b      	str	r3, [r7, #16]
 800f8c2:	e043      	b.n	800f94c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f8c4:	693b      	ldr	r3, [r7, #16]
 800f8c6:	015a      	lsls	r2, r3, #5
 800f8c8:	68fb      	ldr	r3, [r7, #12]
 800f8ca:	4413      	add	r3, r2
 800f8cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f8d0:	681b      	ldr	r3, [r3, #0]
 800f8d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f8d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f8da:	d118      	bne.n	800f90e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800f8dc:	693b      	ldr	r3, [r7, #16]
 800f8de:	2b00      	cmp	r3, #0
 800f8e0:	d10a      	bne.n	800f8f8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800f8e2:	693b      	ldr	r3, [r7, #16]
 800f8e4:	015a      	lsls	r2, r3, #5
 800f8e6:	68fb      	ldr	r3, [r7, #12]
 800f8e8:	4413      	add	r3, r2
 800f8ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f8ee:	461a      	mov	r2, r3
 800f8f0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800f8f4:	6013      	str	r3, [r2, #0]
 800f8f6:	e013      	b.n	800f920 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800f8f8:	693b      	ldr	r3, [r7, #16]
 800f8fa:	015a      	lsls	r2, r3, #5
 800f8fc:	68fb      	ldr	r3, [r7, #12]
 800f8fe:	4413      	add	r3, r2
 800f900:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f904:	461a      	mov	r2, r3
 800f906:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800f90a:	6013      	str	r3, [r2, #0]
 800f90c:	e008      	b.n	800f920 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800f90e:	693b      	ldr	r3, [r7, #16]
 800f910:	015a      	lsls	r2, r3, #5
 800f912:	68fb      	ldr	r3, [r7, #12]
 800f914:	4413      	add	r3, r2
 800f916:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f91a:	461a      	mov	r2, r3
 800f91c:	2300      	movs	r3, #0
 800f91e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800f920:	693b      	ldr	r3, [r7, #16]
 800f922:	015a      	lsls	r2, r3, #5
 800f924:	68fb      	ldr	r3, [r7, #12]
 800f926:	4413      	add	r3, r2
 800f928:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f92c:	461a      	mov	r2, r3
 800f92e:	2300      	movs	r3, #0
 800f930:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800f932:	693b      	ldr	r3, [r7, #16]
 800f934:	015a      	lsls	r2, r3, #5
 800f936:	68fb      	ldr	r3, [r7, #12]
 800f938:	4413      	add	r3, r2
 800f93a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f93e:	461a      	mov	r2, r3
 800f940:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800f944:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f946:	693b      	ldr	r3, [r7, #16]
 800f948:	3301      	adds	r3, #1
 800f94a:	613b      	str	r3, [r7, #16]
 800f94c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f94e:	693a      	ldr	r2, [r7, #16]
 800f950:	429a      	cmp	r2, r3
 800f952:	d3b7      	bcc.n	800f8c4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800f954:	68fb      	ldr	r3, [r7, #12]
 800f956:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f95a:	691b      	ldr	r3, [r3, #16]
 800f95c:	68fa      	ldr	r2, [r7, #12]
 800f95e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f962:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f966:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	2200      	movs	r2, #0
 800f96c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800f974:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800f976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f978:	2b00      	cmp	r3, #0
 800f97a:	d105      	bne.n	800f988 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	699b      	ldr	r3, [r3, #24]
 800f980:	f043 0210 	orr.w	r2, r3, #16
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	699a      	ldr	r2, [r3, #24]
 800f98c:	4b0e      	ldr	r3, [pc, #56]	; (800f9c8 <USB_DevInit+0x2b4>)
 800f98e:	4313      	orrs	r3, r2
 800f990:	687a      	ldr	r2, [r7, #4]
 800f992:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800f994:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f996:	2b00      	cmp	r3, #0
 800f998:	d005      	beq.n	800f9a6 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	699b      	ldr	r3, [r3, #24]
 800f99e:	f043 0208 	orr.w	r2, r3, #8
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800f9a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f9a8:	2b01      	cmp	r3, #1
 800f9aa:	d105      	bne.n	800f9b8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	699a      	ldr	r2, [r3, #24]
 800f9b0:	4b06      	ldr	r3, [pc, #24]	; (800f9cc <USB_DevInit+0x2b8>)
 800f9b2:	4313      	orrs	r3, r2
 800f9b4:	687a      	ldr	r2, [r7, #4]
 800f9b6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800f9b8:	7dfb      	ldrb	r3, [r7, #23]
}
 800f9ba:	4618      	mov	r0, r3
 800f9bc:	3718      	adds	r7, #24
 800f9be:	46bd      	mov	sp, r7
 800f9c0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f9c4:	b004      	add	sp, #16
 800f9c6:	4770      	bx	lr
 800f9c8:	803c3800 	.word	0x803c3800
 800f9cc:	40000004 	.word	0x40000004

0800f9d0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800f9d0:	b480      	push	{r7}
 800f9d2:	b085      	sub	sp, #20
 800f9d4:	af00      	add	r7, sp, #0
 800f9d6:	6078      	str	r0, [r7, #4]
 800f9d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800f9da:	2300      	movs	r3, #0
 800f9dc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800f9de:	68fb      	ldr	r3, [r7, #12]
 800f9e0:	3301      	adds	r3, #1
 800f9e2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800f9e4:	68fb      	ldr	r3, [r7, #12]
 800f9e6:	4a13      	ldr	r2, [pc, #76]	; (800fa34 <USB_FlushTxFifo+0x64>)
 800f9e8:	4293      	cmp	r3, r2
 800f9ea:	d901      	bls.n	800f9f0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800f9ec:	2303      	movs	r3, #3
 800f9ee:	e01b      	b.n	800fa28 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	691b      	ldr	r3, [r3, #16]
 800f9f4:	2b00      	cmp	r3, #0
 800f9f6:	daf2      	bge.n	800f9de <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800f9f8:	2300      	movs	r3, #0
 800f9fa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800f9fc:	683b      	ldr	r3, [r7, #0]
 800f9fe:	019b      	lsls	r3, r3, #6
 800fa00:	f043 0220 	orr.w	r2, r3, #32
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800fa08:	68fb      	ldr	r3, [r7, #12]
 800fa0a:	3301      	adds	r3, #1
 800fa0c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800fa0e:	68fb      	ldr	r3, [r7, #12]
 800fa10:	4a08      	ldr	r2, [pc, #32]	; (800fa34 <USB_FlushTxFifo+0x64>)
 800fa12:	4293      	cmp	r3, r2
 800fa14:	d901      	bls.n	800fa1a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800fa16:	2303      	movs	r3, #3
 800fa18:	e006      	b.n	800fa28 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	691b      	ldr	r3, [r3, #16]
 800fa1e:	f003 0320 	and.w	r3, r3, #32
 800fa22:	2b20      	cmp	r3, #32
 800fa24:	d0f0      	beq.n	800fa08 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800fa26:	2300      	movs	r3, #0
}
 800fa28:	4618      	mov	r0, r3
 800fa2a:	3714      	adds	r7, #20
 800fa2c:	46bd      	mov	sp, r7
 800fa2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa32:	4770      	bx	lr
 800fa34:	00030d40 	.word	0x00030d40

0800fa38 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800fa38:	b480      	push	{r7}
 800fa3a:	b085      	sub	sp, #20
 800fa3c:	af00      	add	r7, sp, #0
 800fa3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800fa40:	2300      	movs	r3, #0
 800fa42:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800fa44:	68fb      	ldr	r3, [r7, #12]
 800fa46:	3301      	adds	r3, #1
 800fa48:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800fa4a:	68fb      	ldr	r3, [r7, #12]
 800fa4c:	4a11      	ldr	r2, [pc, #68]	; (800fa94 <USB_FlushRxFifo+0x5c>)
 800fa4e:	4293      	cmp	r3, r2
 800fa50:	d901      	bls.n	800fa56 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800fa52:	2303      	movs	r3, #3
 800fa54:	e018      	b.n	800fa88 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	691b      	ldr	r3, [r3, #16]
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	daf2      	bge.n	800fa44 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800fa5e:	2300      	movs	r3, #0
 800fa60:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	2210      	movs	r2, #16
 800fa66:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800fa68:	68fb      	ldr	r3, [r7, #12]
 800fa6a:	3301      	adds	r3, #1
 800fa6c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800fa6e:	68fb      	ldr	r3, [r7, #12]
 800fa70:	4a08      	ldr	r2, [pc, #32]	; (800fa94 <USB_FlushRxFifo+0x5c>)
 800fa72:	4293      	cmp	r3, r2
 800fa74:	d901      	bls.n	800fa7a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800fa76:	2303      	movs	r3, #3
 800fa78:	e006      	b.n	800fa88 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	691b      	ldr	r3, [r3, #16]
 800fa7e:	f003 0310 	and.w	r3, r3, #16
 800fa82:	2b10      	cmp	r3, #16
 800fa84:	d0f0      	beq.n	800fa68 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800fa86:	2300      	movs	r3, #0
}
 800fa88:	4618      	mov	r0, r3
 800fa8a:	3714      	adds	r7, #20
 800fa8c:	46bd      	mov	sp, r7
 800fa8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa92:	4770      	bx	lr
 800fa94:	00030d40 	.word	0x00030d40

0800fa98 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800fa98:	b480      	push	{r7}
 800fa9a:	b085      	sub	sp, #20
 800fa9c:	af00      	add	r7, sp, #0
 800fa9e:	6078      	str	r0, [r7, #4]
 800faa0:	460b      	mov	r3, r1
 800faa2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800faa8:	68fb      	ldr	r3, [r7, #12]
 800faaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800faae:	681a      	ldr	r2, [r3, #0]
 800fab0:	78fb      	ldrb	r3, [r7, #3]
 800fab2:	68f9      	ldr	r1, [r7, #12]
 800fab4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fab8:	4313      	orrs	r3, r2
 800faba:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800fabc:	2300      	movs	r3, #0
}
 800fabe:	4618      	mov	r0, r3
 800fac0:	3714      	adds	r7, #20
 800fac2:	46bd      	mov	sp, r7
 800fac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fac8:	4770      	bx	lr

0800faca <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800faca:	b480      	push	{r7}
 800facc:	b085      	sub	sp, #20
 800face:	af00      	add	r7, sp, #0
 800fad0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800fad6:	68fb      	ldr	r3, [r7, #12]
 800fad8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800fadc:	681b      	ldr	r3, [r3, #0]
 800fade:	68fa      	ldr	r2, [r7, #12]
 800fae0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800fae4:	f023 0303 	bic.w	r3, r3, #3
 800fae8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800faea:	68fb      	ldr	r3, [r7, #12]
 800faec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800faf0:	685b      	ldr	r3, [r3, #4]
 800faf2:	68fa      	ldr	r2, [r7, #12]
 800faf4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800faf8:	f043 0302 	orr.w	r3, r3, #2
 800fafc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800fafe:	2300      	movs	r3, #0
}
 800fb00:	4618      	mov	r0, r3
 800fb02:	3714      	adds	r7, #20
 800fb04:	46bd      	mov	sp, r7
 800fb06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb0a:	4770      	bx	lr

0800fb0c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800fb0c:	b480      	push	{r7}
 800fb0e:	b083      	sub	sp, #12
 800fb10:	af00      	add	r7, sp, #0
 800fb12:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	695b      	ldr	r3, [r3, #20]
 800fb18:	f003 0301 	and.w	r3, r3, #1
}
 800fb1c:	4618      	mov	r0, r3
 800fb1e:	370c      	adds	r7, #12
 800fb20:	46bd      	mov	sp, r7
 800fb22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb26:	4770      	bx	lr

0800fb28 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800fb28:	b480      	push	{r7}
 800fb2a:	b085      	sub	sp, #20
 800fb2c:	af00      	add	r7, sp, #0
 800fb2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800fb30:	2300      	movs	r3, #0
 800fb32:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800fb34:	68fb      	ldr	r3, [r7, #12]
 800fb36:	3301      	adds	r3, #1
 800fb38:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800fb3a:	68fb      	ldr	r3, [r7, #12]
 800fb3c:	4a13      	ldr	r2, [pc, #76]	; (800fb8c <USB_CoreReset+0x64>)
 800fb3e:	4293      	cmp	r3, r2
 800fb40:	d901      	bls.n	800fb46 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800fb42:	2303      	movs	r3, #3
 800fb44:	e01b      	b.n	800fb7e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	691b      	ldr	r3, [r3, #16]
 800fb4a:	2b00      	cmp	r3, #0
 800fb4c:	daf2      	bge.n	800fb34 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800fb4e:	2300      	movs	r3, #0
 800fb50:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	691b      	ldr	r3, [r3, #16]
 800fb56:	f043 0201 	orr.w	r2, r3, #1
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800fb5e:	68fb      	ldr	r3, [r7, #12]
 800fb60:	3301      	adds	r3, #1
 800fb62:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800fb64:	68fb      	ldr	r3, [r7, #12]
 800fb66:	4a09      	ldr	r2, [pc, #36]	; (800fb8c <USB_CoreReset+0x64>)
 800fb68:	4293      	cmp	r3, r2
 800fb6a:	d901      	bls.n	800fb70 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800fb6c:	2303      	movs	r3, #3
 800fb6e:	e006      	b.n	800fb7e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	691b      	ldr	r3, [r3, #16]
 800fb74:	f003 0301 	and.w	r3, r3, #1
 800fb78:	2b01      	cmp	r3, #1
 800fb7a:	d0f0      	beq.n	800fb5e <USB_CoreReset+0x36>

  return HAL_OK;
 800fb7c:	2300      	movs	r3, #0
}
 800fb7e:	4618      	mov	r0, r3
 800fb80:	3714      	adds	r7, #20
 800fb82:	46bd      	mov	sp, r7
 800fb84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb88:	4770      	bx	lr
 800fb8a:	bf00      	nop
 800fb8c:	00030d40 	.word	0x00030d40

0800fb90 <__NVIC_SetPriority>:
{
 800fb90:	b480      	push	{r7}
 800fb92:	b083      	sub	sp, #12
 800fb94:	af00      	add	r7, sp, #0
 800fb96:	4603      	mov	r3, r0
 800fb98:	6039      	str	r1, [r7, #0]
 800fb9a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800fb9c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800fba0:	2b00      	cmp	r3, #0
 800fba2:	db0a      	blt.n	800fbba <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800fba4:	683b      	ldr	r3, [r7, #0]
 800fba6:	b2da      	uxtb	r2, r3
 800fba8:	490c      	ldr	r1, [pc, #48]	; (800fbdc <__NVIC_SetPriority+0x4c>)
 800fbaa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800fbae:	0112      	lsls	r2, r2, #4
 800fbb0:	b2d2      	uxtb	r2, r2
 800fbb2:	440b      	add	r3, r1
 800fbb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800fbb8:	e00a      	b.n	800fbd0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800fbba:	683b      	ldr	r3, [r7, #0]
 800fbbc:	b2da      	uxtb	r2, r3
 800fbbe:	4908      	ldr	r1, [pc, #32]	; (800fbe0 <__NVIC_SetPriority+0x50>)
 800fbc0:	88fb      	ldrh	r3, [r7, #6]
 800fbc2:	f003 030f 	and.w	r3, r3, #15
 800fbc6:	3b04      	subs	r3, #4
 800fbc8:	0112      	lsls	r2, r2, #4
 800fbca:	b2d2      	uxtb	r2, r2
 800fbcc:	440b      	add	r3, r1
 800fbce:	761a      	strb	r2, [r3, #24]
}
 800fbd0:	bf00      	nop
 800fbd2:	370c      	adds	r7, #12
 800fbd4:	46bd      	mov	sp, r7
 800fbd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbda:	4770      	bx	lr
 800fbdc:	e000e100 	.word	0xe000e100
 800fbe0:	e000ed00 	.word	0xe000ed00

0800fbe4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800fbe4:	b580      	push	{r7, lr}
 800fbe6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800fbe8:	4b05      	ldr	r3, [pc, #20]	; (800fc00 <SysTick_Handler+0x1c>)
 800fbea:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800fbec:	f002 fed2 	bl	8012994 <xTaskGetSchedulerState>
 800fbf0:	4603      	mov	r3, r0
 800fbf2:	2b01      	cmp	r3, #1
 800fbf4:	d001      	beq.n	800fbfa <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800fbf6:	f000 ffe7 	bl	8010bc8 <xPortSysTickHandler>
  }
}
 800fbfa:	bf00      	nop
 800fbfc:	bd80      	pop	{r7, pc}
 800fbfe:	bf00      	nop
 800fc00:	e000e010 	.word	0xe000e010

0800fc04 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800fc04:	b580      	push	{r7, lr}
 800fc06:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800fc08:	2100      	movs	r1, #0
 800fc0a:	f06f 0004 	mvn.w	r0, #4
 800fc0e:	f7ff ffbf 	bl	800fb90 <__NVIC_SetPriority>
#endif
}
 800fc12:	bf00      	nop
 800fc14:	bd80      	pop	{r7, pc}
	...

0800fc18 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800fc18:	b480      	push	{r7}
 800fc1a:	b083      	sub	sp, #12
 800fc1c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fc1e:	f3ef 8305 	mrs	r3, IPSR
 800fc22:	603b      	str	r3, [r7, #0]
  return(result);
 800fc24:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800fc26:	2b00      	cmp	r3, #0
 800fc28:	d003      	beq.n	800fc32 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800fc2a:	f06f 0305 	mvn.w	r3, #5
 800fc2e:	607b      	str	r3, [r7, #4]
 800fc30:	e00c      	b.n	800fc4c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800fc32:	4b0a      	ldr	r3, [pc, #40]	; (800fc5c <osKernelInitialize+0x44>)
 800fc34:	681b      	ldr	r3, [r3, #0]
 800fc36:	2b00      	cmp	r3, #0
 800fc38:	d105      	bne.n	800fc46 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800fc3a:	4b08      	ldr	r3, [pc, #32]	; (800fc5c <osKernelInitialize+0x44>)
 800fc3c:	2201      	movs	r2, #1
 800fc3e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800fc40:	2300      	movs	r3, #0
 800fc42:	607b      	str	r3, [r7, #4]
 800fc44:	e002      	b.n	800fc4c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800fc46:	f04f 33ff 	mov.w	r3, #4294967295
 800fc4a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800fc4c:	687b      	ldr	r3, [r7, #4]
}
 800fc4e:	4618      	mov	r0, r3
 800fc50:	370c      	adds	r7, #12
 800fc52:	46bd      	mov	sp, r7
 800fc54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc58:	4770      	bx	lr
 800fc5a:	bf00      	nop
 800fc5c:	24000c1c 	.word	0x24000c1c

0800fc60 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800fc60:	b580      	push	{r7, lr}
 800fc62:	b082      	sub	sp, #8
 800fc64:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fc66:	f3ef 8305 	mrs	r3, IPSR
 800fc6a:	603b      	str	r3, [r7, #0]
  return(result);
 800fc6c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800fc6e:	2b00      	cmp	r3, #0
 800fc70:	d003      	beq.n	800fc7a <osKernelStart+0x1a>
    stat = osErrorISR;
 800fc72:	f06f 0305 	mvn.w	r3, #5
 800fc76:	607b      	str	r3, [r7, #4]
 800fc78:	e010      	b.n	800fc9c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800fc7a:	4b0b      	ldr	r3, [pc, #44]	; (800fca8 <osKernelStart+0x48>)
 800fc7c:	681b      	ldr	r3, [r3, #0]
 800fc7e:	2b01      	cmp	r3, #1
 800fc80:	d109      	bne.n	800fc96 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800fc82:	f7ff ffbf 	bl	800fc04 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800fc86:	4b08      	ldr	r3, [pc, #32]	; (800fca8 <osKernelStart+0x48>)
 800fc88:	2202      	movs	r2, #2
 800fc8a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800fc8c:	f002 fa26 	bl	80120dc <vTaskStartScheduler>
      stat = osOK;
 800fc90:	2300      	movs	r3, #0
 800fc92:	607b      	str	r3, [r7, #4]
 800fc94:	e002      	b.n	800fc9c <osKernelStart+0x3c>
    } else {
      stat = osError;
 800fc96:	f04f 33ff 	mov.w	r3, #4294967295
 800fc9a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800fc9c:	687b      	ldr	r3, [r7, #4]
}
 800fc9e:	4618      	mov	r0, r3
 800fca0:	3708      	adds	r7, #8
 800fca2:	46bd      	mov	sp, r7
 800fca4:	bd80      	pop	{r7, pc}
 800fca6:	bf00      	nop
 800fca8:	24000c1c 	.word	0x24000c1c

0800fcac <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800fcac:	b580      	push	{r7, lr}
 800fcae:	b08e      	sub	sp, #56	; 0x38
 800fcb0:	af04      	add	r7, sp, #16
 800fcb2:	60f8      	str	r0, [r7, #12]
 800fcb4:	60b9      	str	r1, [r7, #8]
 800fcb6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800fcb8:	2300      	movs	r3, #0
 800fcba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fcbc:	f3ef 8305 	mrs	r3, IPSR
 800fcc0:	617b      	str	r3, [r7, #20]
  return(result);
 800fcc2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800fcc4:	2b00      	cmp	r3, #0
 800fcc6:	d17e      	bne.n	800fdc6 <osThreadNew+0x11a>
 800fcc8:	68fb      	ldr	r3, [r7, #12]
 800fcca:	2b00      	cmp	r3, #0
 800fccc:	d07b      	beq.n	800fdc6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800fcce:	2380      	movs	r3, #128	; 0x80
 800fcd0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800fcd2:	2318      	movs	r3, #24
 800fcd4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800fcd6:	2300      	movs	r3, #0
 800fcd8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800fcda:	f04f 33ff 	mov.w	r3, #4294967295
 800fcde:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	2b00      	cmp	r3, #0
 800fce4:	d045      	beq.n	800fd72 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	681b      	ldr	r3, [r3, #0]
 800fcea:	2b00      	cmp	r3, #0
 800fcec:	d002      	beq.n	800fcf4 <osThreadNew+0x48>
        name = attr->name;
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	681b      	ldr	r3, [r3, #0]
 800fcf2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	699b      	ldr	r3, [r3, #24]
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	d002      	beq.n	800fd02 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	699b      	ldr	r3, [r3, #24]
 800fd00:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800fd02:	69fb      	ldr	r3, [r7, #28]
 800fd04:	2b00      	cmp	r3, #0
 800fd06:	d008      	beq.n	800fd1a <osThreadNew+0x6e>
 800fd08:	69fb      	ldr	r3, [r7, #28]
 800fd0a:	2b38      	cmp	r3, #56	; 0x38
 800fd0c:	d805      	bhi.n	800fd1a <osThreadNew+0x6e>
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	685b      	ldr	r3, [r3, #4]
 800fd12:	f003 0301 	and.w	r3, r3, #1
 800fd16:	2b00      	cmp	r3, #0
 800fd18:	d001      	beq.n	800fd1e <osThreadNew+0x72>
        return (NULL);
 800fd1a:	2300      	movs	r3, #0
 800fd1c:	e054      	b.n	800fdc8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	695b      	ldr	r3, [r3, #20]
 800fd22:	2b00      	cmp	r3, #0
 800fd24:	d003      	beq.n	800fd2e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	695b      	ldr	r3, [r3, #20]
 800fd2a:	089b      	lsrs	r3, r3, #2
 800fd2c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	689b      	ldr	r3, [r3, #8]
 800fd32:	2b00      	cmp	r3, #0
 800fd34:	d00e      	beq.n	800fd54 <osThreadNew+0xa8>
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	68db      	ldr	r3, [r3, #12]
 800fd3a:	2ba7      	cmp	r3, #167	; 0xa7
 800fd3c:	d90a      	bls.n	800fd54 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800fd42:	2b00      	cmp	r3, #0
 800fd44:	d006      	beq.n	800fd54 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	695b      	ldr	r3, [r3, #20]
 800fd4a:	2b00      	cmp	r3, #0
 800fd4c:	d002      	beq.n	800fd54 <osThreadNew+0xa8>
        mem = 1;
 800fd4e:	2301      	movs	r3, #1
 800fd50:	61bb      	str	r3, [r7, #24]
 800fd52:	e010      	b.n	800fd76 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	689b      	ldr	r3, [r3, #8]
 800fd58:	2b00      	cmp	r3, #0
 800fd5a:	d10c      	bne.n	800fd76 <osThreadNew+0xca>
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	68db      	ldr	r3, [r3, #12]
 800fd60:	2b00      	cmp	r3, #0
 800fd62:	d108      	bne.n	800fd76 <osThreadNew+0xca>
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	691b      	ldr	r3, [r3, #16]
 800fd68:	2b00      	cmp	r3, #0
 800fd6a:	d104      	bne.n	800fd76 <osThreadNew+0xca>
          mem = 0;
 800fd6c:	2300      	movs	r3, #0
 800fd6e:	61bb      	str	r3, [r7, #24]
 800fd70:	e001      	b.n	800fd76 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800fd72:	2300      	movs	r3, #0
 800fd74:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800fd76:	69bb      	ldr	r3, [r7, #24]
 800fd78:	2b01      	cmp	r3, #1
 800fd7a:	d110      	bne.n	800fd9e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800fd80:	687a      	ldr	r2, [r7, #4]
 800fd82:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800fd84:	9202      	str	r2, [sp, #8]
 800fd86:	9301      	str	r3, [sp, #4]
 800fd88:	69fb      	ldr	r3, [r7, #28]
 800fd8a:	9300      	str	r3, [sp, #0]
 800fd8c:	68bb      	ldr	r3, [r7, #8]
 800fd8e:	6a3a      	ldr	r2, [r7, #32]
 800fd90:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fd92:	68f8      	ldr	r0, [r7, #12]
 800fd94:	f001 ffb6 	bl	8011d04 <xTaskCreateStatic>
 800fd98:	4603      	mov	r3, r0
 800fd9a:	613b      	str	r3, [r7, #16]
 800fd9c:	e013      	b.n	800fdc6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800fd9e:	69bb      	ldr	r3, [r7, #24]
 800fda0:	2b00      	cmp	r3, #0
 800fda2:	d110      	bne.n	800fdc6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800fda4:	6a3b      	ldr	r3, [r7, #32]
 800fda6:	b29a      	uxth	r2, r3
 800fda8:	f107 0310 	add.w	r3, r7, #16
 800fdac:	9301      	str	r3, [sp, #4]
 800fdae:	69fb      	ldr	r3, [r7, #28]
 800fdb0:	9300      	str	r3, [sp, #0]
 800fdb2:	68bb      	ldr	r3, [r7, #8]
 800fdb4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fdb6:	68f8      	ldr	r0, [r7, #12]
 800fdb8:	f002 f801 	bl	8011dbe <xTaskCreate>
 800fdbc:	4603      	mov	r3, r0
 800fdbe:	2b01      	cmp	r3, #1
 800fdc0:	d001      	beq.n	800fdc6 <osThreadNew+0x11a>
            hTask = NULL;
 800fdc2:	2300      	movs	r3, #0
 800fdc4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800fdc6:	693b      	ldr	r3, [r7, #16]
}
 800fdc8:	4618      	mov	r0, r3
 800fdca:	3728      	adds	r7, #40	; 0x28
 800fdcc:	46bd      	mov	sp, r7
 800fdce:	bd80      	pop	{r7, pc}

0800fdd0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800fdd0:	b580      	push	{r7, lr}
 800fdd2:	b084      	sub	sp, #16
 800fdd4:	af00      	add	r7, sp, #0
 800fdd6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fdd8:	f3ef 8305 	mrs	r3, IPSR
 800fddc:	60bb      	str	r3, [r7, #8]
  return(result);
 800fdde:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800fde0:	2b00      	cmp	r3, #0
 800fde2:	d003      	beq.n	800fdec <osDelay+0x1c>
    stat = osErrorISR;
 800fde4:	f06f 0305 	mvn.w	r3, #5
 800fde8:	60fb      	str	r3, [r7, #12]
 800fdea:	e007      	b.n	800fdfc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800fdec:	2300      	movs	r3, #0
 800fdee:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	2b00      	cmp	r3, #0
 800fdf4:	d002      	beq.n	800fdfc <osDelay+0x2c>
      vTaskDelay(ticks);
 800fdf6:	6878      	ldr	r0, [r7, #4]
 800fdf8:	f002 f93c 	bl	8012074 <vTaskDelay>
    }
  }

  return (stat);
 800fdfc:	68fb      	ldr	r3, [r7, #12]
}
 800fdfe:	4618      	mov	r0, r3
 800fe00:	3710      	adds	r7, #16
 800fe02:	46bd      	mov	sp, r7
 800fe04:	bd80      	pop	{r7, pc}

0800fe06 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800fe06:	b580      	push	{r7, lr}
 800fe08:	b08a      	sub	sp, #40	; 0x28
 800fe0a:	af02      	add	r7, sp, #8
 800fe0c:	60f8      	str	r0, [r7, #12]
 800fe0e:	60b9      	str	r1, [r7, #8]
 800fe10:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800fe12:	2300      	movs	r3, #0
 800fe14:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fe16:	f3ef 8305 	mrs	r3, IPSR
 800fe1a:	613b      	str	r3, [r7, #16]
  return(result);
 800fe1c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800fe1e:	2b00      	cmp	r3, #0
 800fe20:	d175      	bne.n	800ff0e <osSemaphoreNew+0x108>
 800fe22:	68fb      	ldr	r3, [r7, #12]
 800fe24:	2b00      	cmp	r3, #0
 800fe26:	d072      	beq.n	800ff0e <osSemaphoreNew+0x108>
 800fe28:	68ba      	ldr	r2, [r7, #8]
 800fe2a:	68fb      	ldr	r3, [r7, #12]
 800fe2c:	429a      	cmp	r2, r3
 800fe2e:	d86e      	bhi.n	800ff0e <osSemaphoreNew+0x108>
    mem = -1;
 800fe30:	f04f 33ff 	mov.w	r3, #4294967295
 800fe34:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	2b00      	cmp	r3, #0
 800fe3a:	d015      	beq.n	800fe68 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	689b      	ldr	r3, [r3, #8]
 800fe40:	2b00      	cmp	r3, #0
 800fe42:	d006      	beq.n	800fe52 <osSemaphoreNew+0x4c>
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	68db      	ldr	r3, [r3, #12]
 800fe48:	2b4f      	cmp	r3, #79	; 0x4f
 800fe4a:	d902      	bls.n	800fe52 <osSemaphoreNew+0x4c>
        mem = 1;
 800fe4c:	2301      	movs	r3, #1
 800fe4e:	61bb      	str	r3, [r7, #24]
 800fe50:	e00c      	b.n	800fe6c <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	689b      	ldr	r3, [r3, #8]
 800fe56:	2b00      	cmp	r3, #0
 800fe58:	d108      	bne.n	800fe6c <osSemaphoreNew+0x66>
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	68db      	ldr	r3, [r3, #12]
 800fe5e:	2b00      	cmp	r3, #0
 800fe60:	d104      	bne.n	800fe6c <osSemaphoreNew+0x66>
          mem = 0;
 800fe62:	2300      	movs	r3, #0
 800fe64:	61bb      	str	r3, [r7, #24]
 800fe66:	e001      	b.n	800fe6c <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800fe68:	2300      	movs	r3, #0
 800fe6a:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800fe6c:	69bb      	ldr	r3, [r7, #24]
 800fe6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe72:	d04c      	beq.n	800ff0e <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800fe74:	68fb      	ldr	r3, [r7, #12]
 800fe76:	2b01      	cmp	r3, #1
 800fe78:	d128      	bne.n	800fecc <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800fe7a:	69bb      	ldr	r3, [r7, #24]
 800fe7c:	2b01      	cmp	r3, #1
 800fe7e:	d10a      	bne.n	800fe96 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	689b      	ldr	r3, [r3, #8]
 800fe84:	2203      	movs	r2, #3
 800fe86:	9200      	str	r2, [sp, #0]
 800fe88:	2200      	movs	r2, #0
 800fe8a:	2100      	movs	r1, #0
 800fe8c:	2001      	movs	r0, #1
 800fe8e:	f000 ff93 	bl	8010db8 <xQueueGenericCreateStatic>
 800fe92:	61f8      	str	r0, [r7, #28]
 800fe94:	e005      	b.n	800fea2 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800fe96:	2203      	movs	r2, #3
 800fe98:	2100      	movs	r1, #0
 800fe9a:	2001      	movs	r0, #1
 800fe9c:	f001 f804 	bl	8010ea8 <xQueueGenericCreate>
 800fea0:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800fea2:	69fb      	ldr	r3, [r7, #28]
 800fea4:	2b00      	cmp	r3, #0
 800fea6:	d022      	beq.n	800feee <osSemaphoreNew+0xe8>
 800fea8:	68bb      	ldr	r3, [r7, #8]
 800feaa:	2b00      	cmp	r3, #0
 800feac:	d01f      	beq.n	800feee <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800feae:	2300      	movs	r3, #0
 800feb0:	2200      	movs	r2, #0
 800feb2:	2100      	movs	r1, #0
 800feb4:	69f8      	ldr	r0, [r7, #28]
 800feb6:	f001 f8bf 	bl	8011038 <xQueueGenericSend>
 800feba:	4603      	mov	r3, r0
 800febc:	2b01      	cmp	r3, #1
 800febe:	d016      	beq.n	800feee <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800fec0:	69f8      	ldr	r0, [r7, #28]
 800fec2:	f001 fd4b 	bl	801195c <vQueueDelete>
            hSemaphore = NULL;
 800fec6:	2300      	movs	r3, #0
 800fec8:	61fb      	str	r3, [r7, #28]
 800feca:	e010      	b.n	800feee <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800fecc:	69bb      	ldr	r3, [r7, #24]
 800fece:	2b01      	cmp	r3, #1
 800fed0:	d108      	bne.n	800fee4 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	689b      	ldr	r3, [r3, #8]
 800fed6:	461a      	mov	r2, r3
 800fed8:	68b9      	ldr	r1, [r7, #8]
 800feda:	68f8      	ldr	r0, [r7, #12]
 800fedc:	f001 f841 	bl	8010f62 <xQueueCreateCountingSemaphoreStatic>
 800fee0:	61f8      	str	r0, [r7, #28]
 800fee2:	e004      	b.n	800feee <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800fee4:	68b9      	ldr	r1, [r7, #8]
 800fee6:	68f8      	ldr	r0, [r7, #12]
 800fee8:	f001 f872 	bl	8010fd0 <xQueueCreateCountingSemaphore>
 800feec:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800feee:	69fb      	ldr	r3, [r7, #28]
 800fef0:	2b00      	cmp	r3, #0
 800fef2:	d00c      	beq.n	800ff0e <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	2b00      	cmp	r3, #0
 800fef8:	d003      	beq.n	800ff02 <osSemaphoreNew+0xfc>
          name = attr->name;
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	681b      	ldr	r3, [r3, #0]
 800fefe:	617b      	str	r3, [r7, #20]
 800ff00:	e001      	b.n	800ff06 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800ff02:	2300      	movs	r3, #0
 800ff04:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800ff06:	6979      	ldr	r1, [r7, #20]
 800ff08:	69f8      	ldr	r0, [r7, #28]
 800ff0a:	f001 fe73 	bl	8011bf4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800ff0e:	69fb      	ldr	r3, [r7, #28]
}
 800ff10:	4618      	mov	r0, r3
 800ff12:	3720      	adds	r7, #32
 800ff14:	46bd      	mov	sp, r7
 800ff16:	bd80      	pop	{r7, pc}

0800ff18 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800ff18:	b580      	push	{r7, lr}
 800ff1a:	b086      	sub	sp, #24
 800ff1c:	af00      	add	r7, sp, #0
 800ff1e:	6078      	str	r0, [r7, #4]
 800ff20:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800ff26:	2300      	movs	r3, #0
 800ff28:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800ff2a:	693b      	ldr	r3, [r7, #16]
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	d103      	bne.n	800ff38 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800ff30:	f06f 0303 	mvn.w	r3, #3
 800ff34:	617b      	str	r3, [r7, #20]
 800ff36:	e039      	b.n	800ffac <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ff38:	f3ef 8305 	mrs	r3, IPSR
 800ff3c:	60fb      	str	r3, [r7, #12]
  return(result);
 800ff3e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800ff40:	2b00      	cmp	r3, #0
 800ff42:	d022      	beq.n	800ff8a <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800ff44:	683b      	ldr	r3, [r7, #0]
 800ff46:	2b00      	cmp	r3, #0
 800ff48:	d003      	beq.n	800ff52 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800ff4a:	f06f 0303 	mvn.w	r3, #3
 800ff4e:	617b      	str	r3, [r7, #20]
 800ff50:	e02c      	b.n	800ffac <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800ff52:	2300      	movs	r3, #0
 800ff54:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800ff56:	f107 0308 	add.w	r3, r7, #8
 800ff5a:	461a      	mov	r2, r3
 800ff5c:	2100      	movs	r1, #0
 800ff5e:	6938      	ldr	r0, [r7, #16]
 800ff60:	f001 fc7c 	bl	801185c <xQueueReceiveFromISR>
 800ff64:	4603      	mov	r3, r0
 800ff66:	2b01      	cmp	r3, #1
 800ff68:	d003      	beq.n	800ff72 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800ff6a:	f06f 0302 	mvn.w	r3, #2
 800ff6e:	617b      	str	r3, [r7, #20]
 800ff70:	e01c      	b.n	800ffac <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800ff72:	68bb      	ldr	r3, [r7, #8]
 800ff74:	2b00      	cmp	r3, #0
 800ff76:	d019      	beq.n	800ffac <osSemaphoreAcquire+0x94>
 800ff78:	4b0f      	ldr	r3, [pc, #60]	; (800ffb8 <osSemaphoreAcquire+0xa0>)
 800ff7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ff7e:	601a      	str	r2, [r3, #0]
 800ff80:	f3bf 8f4f 	dsb	sy
 800ff84:	f3bf 8f6f 	isb	sy
 800ff88:	e010      	b.n	800ffac <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800ff8a:	6839      	ldr	r1, [r7, #0]
 800ff8c:	6938      	ldr	r0, [r7, #16]
 800ff8e:	f001 fb59 	bl	8011644 <xQueueSemaphoreTake>
 800ff92:	4603      	mov	r3, r0
 800ff94:	2b01      	cmp	r3, #1
 800ff96:	d009      	beq.n	800ffac <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800ff98:	683b      	ldr	r3, [r7, #0]
 800ff9a:	2b00      	cmp	r3, #0
 800ff9c:	d003      	beq.n	800ffa6 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800ff9e:	f06f 0301 	mvn.w	r3, #1
 800ffa2:	617b      	str	r3, [r7, #20]
 800ffa4:	e002      	b.n	800ffac <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800ffa6:	f06f 0302 	mvn.w	r3, #2
 800ffaa:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800ffac:	697b      	ldr	r3, [r7, #20]
}
 800ffae:	4618      	mov	r0, r3
 800ffb0:	3718      	adds	r7, #24
 800ffb2:	46bd      	mov	sp, r7
 800ffb4:	bd80      	pop	{r7, pc}
 800ffb6:	bf00      	nop
 800ffb8:	e000ed04 	.word	0xe000ed04

0800ffbc <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800ffbc:	b580      	push	{r7, lr}
 800ffbe:	b086      	sub	sp, #24
 800ffc0:	af00      	add	r7, sp, #0
 800ffc2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800ffc8:	2300      	movs	r3, #0
 800ffca:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800ffcc:	693b      	ldr	r3, [r7, #16]
 800ffce:	2b00      	cmp	r3, #0
 800ffd0:	d103      	bne.n	800ffda <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800ffd2:	f06f 0303 	mvn.w	r3, #3
 800ffd6:	617b      	str	r3, [r7, #20]
 800ffd8:	e02c      	b.n	8010034 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ffda:	f3ef 8305 	mrs	r3, IPSR
 800ffde:	60fb      	str	r3, [r7, #12]
  return(result);
 800ffe0:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800ffe2:	2b00      	cmp	r3, #0
 800ffe4:	d01a      	beq.n	801001c <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800ffe6:	2300      	movs	r3, #0
 800ffe8:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800ffea:	f107 0308 	add.w	r3, r7, #8
 800ffee:	4619      	mov	r1, r3
 800fff0:	6938      	ldr	r0, [r7, #16]
 800fff2:	f001 f9ba 	bl	801136a <xQueueGiveFromISR>
 800fff6:	4603      	mov	r3, r0
 800fff8:	2b01      	cmp	r3, #1
 800fffa:	d003      	beq.n	8010004 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800fffc:	f06f 0302 	mvn.w	r3, #2
 8010000:	617b      	str	r3, [r7, #20]
 8010002:	e017      	b.n	8010034 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8010004:	68bb      	ldr	r3, [r7, #8]
 8010006:	2b00      	cmp	r3, #0
 8010008:	d014      	beq.n	8010034 <osSemaphoreRelease+0x78>
 801000a:	4b0d      	ldr	r3, [pc, #52]	; (8010040 <osSemaphoreRelease+0x84>)
 801000c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010010:	601a      	str	r2, [r3, #0]
 8010012:	f3bf 8f4f 	dsb	sy
 8010016:	f3bf 8f6f 	isb	sy
 801001a:	e00b      	b.n	8010034 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 801001c:	2300      	movs	r3, #0
 801001e:	2200      	movs	r2, #0
 8010020:	2100      	movs	r1, #0
 8010022:	6938      	ldr	r0, [r7, #16]
 8010024:	f001 f808 	bl	8011038 <xQueueGenericSend>
 8010028:	4603      	mov	r3, r0
 801002a:	2b01      	cmp	r3, #1
 801002c:	d002      	beq.n	8010034 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 801002e:	f06f 0302 	mvn.w	r3, #2
 8010032:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8010034:	697b      	ldr	r3, [r7, #20]
}
 8010036:	4618      	mov	r0, r3
 8010038:	3718      	adds	r7, #24
 801003a:	46bd      	mov	sp, r7
 801003c:	bd80      	pop	{r7, pc}
 801003e:	bf00      	nop
 8010040:	e000ed04 	.word	0xe000ed04

08010044 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8010044:	b580      	push	{r7, lr}
 8010046:	b08a      	sub	sp, #40	; 0x28
 8010048:	af02      	add	r7, sp, #8
 801004a:	60f8      	str	r0, [r7, #12]
 801004c:	60b9      	str	r1, [r7, #8]
 801004e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8010050:	2300      	movs	r3, #0
 8010052:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010054:	f3ef 8305 	mrs	r3, IPSR
 8010058:	613b      	str	r3, [r7, #16]
  return(result);
 801005a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 801005c:	2b00      	cmp	r3, #0
 801005e:	d15f      	bne.n	8010120 <osMessageQueueNew+0xdc>
 8010060:	68fb      	ldr	r3, [r7, #12]
 8010062:	2b00      	cmp	r3, #0
 8010064:	d05c      	beq.n	8010120 <osMessageQueueNew+0xdc>
 8010066:	68bb      	ldr	r3, [r7, #8]
 8010068:	2b00      	cmp	r3, #0
 801006a:	d059      	beq.n	8010120 <osMessageQueueNew+0xdc>
    mem = -1;
 801006c:	f04f 33ff 	mov.w	r3, #4294967295
 8010070:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	2b00      	cmp	r3, #0
 8010076:	d029      	beq.n	80100cc <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	689b      	ldr	r3, [r3, #8]
 801007c:	2b00      	cmp	r3, #0
 801007e:	d012      	beq.n	80100a6 <osMessageQueueNew+0x62>
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	68db      	ldr	r3, [r3, #12]
 8010084:	2b4f      	cmp	r3, #79	; 0x4f
 8010086:	d90e      	bls.n	80100a6 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 801008c:	2b00      	cmp	r3, #0
 801008e:	d00a      	beq.n	80100a6 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	695a      	ldr	r2, [r3, #20]
 8010094:	68fb      	ldr	r3, [r7, #12]
 8010096:	68b9      	ldr	r1, [r7, #8]
 8010098:	fb01 f303 	mul.w	r3, r1, r3
 801009c:	429a      	cmp	r2, r3
 801009e:	d302      	bcc.n	80100a6 <osMessageQueueNew+0x62>
        mem = 1;
 80100a0:	2301      	movs	r3, #1
 80100a2:	61bb      	str	r3, [r7, #24]
 80100a4:	e014      	b.n	80100d0 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	689b      	ldr	r3, [r3, #8]
 80100aa:	2b00      	cmp	r3, #0
 80100ac:	d110      	bne.n	80100d0 <osMessageQueueNew+0x8c>
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	68db      	ldr	r3, [r3, #12]
 80100b2:	2b00      	cmp	r3, #0
 80100b4:	d10c      	bne.n	80100d0 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80100ba:	2b00      	cmp	r3, #0
 80100bc:	d108      	bne.n	80100d0 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	695b      	ldr	r3, [r3, #20]
 80100c2:	2b00      	cmp	r3, #0
 80100c4:	d104      	bne.n	80100d0 <osMessageQueueNew+0x8c>
          mem = 0;
 80100c6:	2300      	movs	r3, #0
 80100c8:	61bb      	str	r3, [r7, #24]
 80100ca:	e001      	b.n	80100d0 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80100cc:	2300      	movs	r3, #0
 80100ce:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80100d0:	69bb      	ldr	r3, [r7, #24]
 80100d2:	2b01      	cmp	r3, #1
 80100d4:	d10b      	bne.n	80100ee <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	691a      	ldr	r2, [r3, #16]
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	689b      	ldr	r3, [r3, #8]
 80100de:	2100      	movs	r1, #0
 80100e0:	9100      	str	r1, [sp, #0]
 80100e2:	68b9      	ldr	r1, [r7, #8]
 80100e4:	68f8      	ldr	r0, [r7, #12]
 80100e6:	f000 fe67 	bl	8010db8 <xQueueGenericCreateStatic>
 80100ea:	61f8      	str	r0, [r7, #28]
 80100ec:	e008      	b.n	8010100 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80100ee:	69bb      	ldr	r3, [r7, #24]
 80100f0:	2b00      	cmp	r3, #0
 80100f2:	d105      	bne.n	8010100 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80100f4:	2200      	movs	r2, #0
 80100f6:	68b9      	ldr	r1, [r7, #8]
 80100f8:	68f8      	ldr	r0, [r7, #12]
 80100fa:	f000 fed5 	bl	8010ea8 <xQueueGenericCreate>
 80100fe:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8010100:	69fb      	ldr	r3, [r7, #28]
 8010102:	2b00      	cmp	r3, #0
 8010104:	d00c      	beq.n	8010120 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	2b00      	cmp	r3, #0
 801010a:	d003      	beq.n	8010114 <osMessageQueueNew+0xd0>
        name = attr->name;
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	681b      	ldr	r3, [r3, #0]
 8010110:	617b      	str	r3, [r7, #20]
 8010112:	e001      	b.n	8010118 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8010114:	2300      	movs	r3, #0
 8010116:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8010118:	6979      	ldr	r1, [r7, #20]
 801011a:	69f8      	ldr	r0, [r7, #28]
 801011c:	f001 fd6a 	bl	8011bf4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8010120:	69fb      	ldr	r3, [r7, #28]
}
 8010122:	4618      	mov	r0, r3
 8010124:	3720      	adds	r7, #32
 8010126:	46bd      	mov	sp, r7
 8010128:	bd80      	pop	{r7, pc}
	...

0801012c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 801012c:	b580      	push	{r7, lr}
 801012e:	b088      	sub	sp, #32
 8010130:	af00      	add	r7, sp, #0
 8010132:	60f8      	str	r0, [r7, #12]
 8010134:	60b9      	str	r1, [r7, #8]
 8010136:	603b      	str	r3, [r7, #0]
 8010138:	4613      	mov	r3, r2
 801013a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 801013c:	68fb      	ldr	r3, [r7, #12]
 801013e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8010140:	2300      	movs	r3, #0
 8010142:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010144:	f3ef 8305 	mrs	r3, IPSR
 8010148:	617b      	str	r3, [r7, #20]
  return(result);
 801014a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 801014c:	2b00      	cmp	r3, #0
 801014e:	d028      	beq.n	80101a2 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8010150:	69bb      	ldr	r3, [r7, #24]
 8010152:	2b00      	cmp	r3, #0
 8010154:	d005      	beq.n	8010162 <osMessageQueuePut+0x36>
 8010156:	68bb      	ldr	r3, [r7, #8]
 8010158:	2b00      	cmp	r3, #0
 801015a:	d002      	beq.n	8010162 <osMessageQueuePut+0x36>
 801015c:	683b      	ldr	r3, [r7, #0]
 801015e:	2b00      	cmp	r3, #0
 8010160:	d003      	beq.n	801016a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8010162:	f06f 0303 	mvn.w	r3, #3
 8010166:	61fb      	str	r3, [r7, #28]
 8010168:	e038      	b.n	80101dc <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 801016a:	2300      	movs	r3, #0
 801016c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 801016e:	f107 0210 	add.w	r2, r7, #16
 8010172:	2300      	movs	r3, #0
 8010174:	68b9      	ldr	r1, [r7, #8]
 8010176:	69b8      	ldr	r0, [r7, #24]
 8010178:	f001 f85c 	bl	8011234 <xQueueGenericSendFromISR>
 801017c:	4603      	mov	r3, r0
 801017e:	2b01      	cmp	r3, #1
 8010180:	d003      	beq.n	801018a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8010182:	f06f 0302 	mvn.w	r3, #2
 8010186:	61fb      	str	r3, [r7, #28]
 8010188:	e028      	b.n	80101dc <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 801018a:	693b      	ldr	r3, [r7, #16]
 801018c:	2b00      	cmp	r3, #0
 801018e:	d025      	beq.n	80101dc <osMessageQueuePut+0xb0>
 8010190:	4b15      	ldr	r3, [pc, #84]	; (80101e8 <osMessageQueuePut+0xbc>)
 8010192:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010196:	601a      	str	r2, [r3, #0]
 8010198:	f3bf 8f4f 	dsb	sy
 801019c:	f3bf 8f6f 	isb	sy
 80101a0:	e01c      	b.n	80101dc <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80101a2:	69bb      	ldr	r3, [r7, #24]
 80101a4:	2b00      	cmp	r3, #0
 80101a6:	d002      	beq.n	80101ae <osMessageQueuePut+0x82>
 80101a8:	68bb      	ldr	r3, [r7, #8]
 80101aa:	2b00      	cmp	r3, #0
 80101ac:	d103      	bne.n	80101b6 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80101ae:	f06f 0303 	mvn.w	r3, #3
 80101b2:	61fb      	str	r3, [r7, #28]
 80101b4:	e012      	b.n	80101dc <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80101b6:	2300      	movs	r3, #0
 80101b8:	683a      	ldr	r2, [r7, #0]
 80101ba:	68b9      	ldr	r1, [r7, #8]
 80101bc:	69b8      	ldr	r0, [r7, #24]
 80101be:	f000 ff3b 	bl	8011038 <xQueueGenericSend>
 80101c2:	4603      	mov	r3, r0
 80101c4:	2b01      	cmp	r3, #1
 80101c6:	d009      	beq.n	80101dc <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80101c8:	683b      	ldr	r3, [r7, #0]
 80101ca:	2b00      	cmp	r3, #0
 80101cc:	d003      	beq.n	80101d6 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80101ce:	f06f 0301 	mvn.w	r3, #1
 80101d2:	61fb      	str	r3, [r7, #28]
 80101d4:	e002      	b.n	80101dc <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80101d6:	f06f 0302 	mvn.w	r3, #2
 80101da:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80101dc:	69fb      	ldr	r3, [r7, #28]
}
 80101de:	4618      	mov	r0, r3
 80101e0:	3720      	adds	r7, #32
 80101e2:	46bd      	mov	sp, r7
 80101e4:	bd80      	pop	{r7, pc}
 80101e6:	bf00      	nop
 80101e8:	e000ed04 	.word	0xe000ed04

080101ec <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80101ec:	b580      	push	{r7, lr}
 80101ee:	b088      	sub	sp, #32
 80101f0:	af00      	add	r7, sp, #0
 80101f2:	60f8      	str	r0, [r7, #12]
 80101f4:	60b9      	str	r1, [r7, #8]
 80101f6:	607a      	str	r2, [r7, #4]
 80101f8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80101fa:	68fb      	ldr	r3, [r7, #12]
 80101fc:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80101fe:	2300      	movs	r3, #0
 8010200:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010202:	f3ef 8305 	mrs	r3, IPSR
 8010206:	617b      	str	r3, [r7, #20]
  return(result);
 8010208:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 801020a:	2b00      	cmp	r3, #0
 801020c:	d028      	beq.n	8010260 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801020e:	69bb      	ldr	r3, [r7, #24]
 8010210:	2b00      	cmp	r3, #0
 8010212:	d005      	beq.n	8010220 <osMessageQueueGet+0x34>
 8010214:	68bb      	ldr	r3, [r7, #8]
 8010216:	2b00      	cmp	r3, #0
 8010218:	d002      	beq.n	8010220 <osMessageQueueGet+0x34>
 801021a:	683b      	ldr	r3, [r7, #0]
 801021c:	2b00      	cmp	r3, #0
 801021e:	d003      	beq.n	8010228 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8010220:	f06f 0303 	mvn.w	r3, #3
 8010224:	61fb      	str	r3, [r7, #28]
 8010226:	e037      	b.n	8010298 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8010228:	2300      	movs	r3, #0
 801022a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 801022c:	f107 0310 	add.w	r3, r7, #16
 8010230:	461a      	mov	r2, r3
 8010232:	68b9      	ldr	r1, [r7, #8]
 8010234:	69b8      	ldr	r0, [r7, #24]
 8010236:	f001 fb11 	bl	801185c <xQueueReceiveFromISR>
 801023a:	4603      	mov	r3, r0
 801023c:	2b01      	cmp	r3, #1
 801023e:	d003      	beq.n	8010248 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8010240:	f06f 0302 	mvn.w	r3, #2
 8010244:	61fb      	str	r3, [r7, #28]
 8010246:	e027      	b.n	8010298 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8010248:	693b      	ldr	r3, [r7, #16]
 801024a:	2b00      	cmp	r3, #0
 801024c:	d024      	beq.n	8010298 <osMessageQueueGet+0xac>
 801024e:	4b15      	ldr	r3, [pc, #84]	; (80102a4 <osMessageQueueGet+0xb8>)
 8010250:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010254:	601a      	str	r2, [r3, #0]
 8010256:	f3bf 8f4f 	dsb	sy
 801025a:	f3bf 8f6f 	isb	sy
 801025e:	e01b      	b.n	8010298 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8010260:	69bb      	ldr	r3, [r7, #24]
 8010262:	2b00      	cmp	r3, #0
 8010264:	d002      	beq.n	801026c <osMessageQueueGet+0x80>
 8010266:	68bb      	ldr	r3, [r7, #8]
 8010268:	2b00      	cmp	r3, #0
 801026a:	d103      	bne.n	8010274 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 801026c:	f06f 0303 	mvn.w	r3, #3
 8010270:	61fb      	str	r3, [r7, #28]
 8010272:	e011      	b.n	8010298 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8010274:	683a      	ldr	r2, [r7, #0]
 8010276:	68b9      	ldr	r1, [r7, #8]
 8010278:	69b8      	ldr	r0, [r7, #24]
 801027a:	f001 f903 	bl	8011484 <xQueueReceive>
 801027e:	4603      	mov	r3, r0
 8010280:	2b01      	cmp	r3, #1
 8010282:	d009      	beq.n	8010298 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8010284:	683b      	ldr	r3, [r7, #0]
 8010286:	2b00      	cmp	r3, #0
 8010288:	d003      	beq.n	8010292 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 801028a:	f06f 0301 	mvn.w	r3, #1
 801028e:	61fb      	str	r3, [r7, #28]
 8010290:	e002      	b.n	8010298 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8010292:	f06f 0302 	mvn.w	r3, #2
 8010296:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8010298:	69fb      	ldr	r3, [r7, #28]
}
 801029a:	4618      	mov	r0, r3
 801029c:	3720      	adds	r7, #32
 801029e:	46bd      	mov	sp, r7
 80102a0:	bd80      	pop	{r7, pc}
 80102a2:	bf00      	nop
 80102a4:	e000ed04 	.word	0xe000ed04

080102a8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80102a8:	b480      	push	{r7}
 80102aa:	b085      	sub	sp, #20
 80102ac:	af00      	add	r7, sp, #0
 80102ae:	60f8      	str	r0, [r7, #12]
 80102b0:	60b9      	str	r1, [r7, #8]
 80102b2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80102b4:	68fb      	ldr	r3, [r7, #12]
 80102b6:	4a07      	ldr	r2, [pc, #28]	; (80102d4 <vApplicationGetIdleTaskMemory+0x2c>)
 80102b8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80102ba:	68bb      	ldr	r3, [r7, #8]
 80102bc:	4a06      	ldr	r2, [pc, #24]	; (80102d8 <vApplicationGetIdleTaskMemory+0x30>)
 80102be:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	2280      	movs	r2, #128	; 0x80
 80102c4:	601a      	str	r2, [r3, #0]
}
 80102c6:	bf00      	nop
 80102c8:	3714      	adds	r7, #20
 80102ca:	46bd      	mov	sp, r7
 80102cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102d0:	4770      	bx	lr
 80102d2:	bf00      	nop
 80102d4:	24000c20 	.word	0x24000c20
 80102d8:	24000cc8 	.word	0x24000cc8

080102dc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80102dc:	b480      	push	{r7}
 80102de:	b085      	sub	sp, #20
 80102e0:	af00      	add	r7, sp, #0
 80102e2:	60f8      	str	r0, [r7, #12]
 80102e4:	60b9      	str	r1, [r7, #8]
 80102e6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80102e8:	68fb      	ldr	r3, [r7, #12]
 80102ea:	4a07      	ldr	r2, [pc, #28]	; (8010308 <vApplicationGetTimerTaskMemory+0x2c>)
 80102ec:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80102ee:	68bb      	ldr	r3, [r7, #8]
 80102f0:	4a06      	ldr	r2, [pc, #24]	; (801030c <vApplicationGetTimerTaskMemory+0x30>)
 80102f2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80102fa:	601a      	str	r2, [r3, #0]
}
 80102fc:	bf00      	nop
 80102fe:	3714      	adds	r7, #20
 8010300:	46bd      	mov	sp, r7
 8010302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010306:	4770      	bx	lr
 8010308:	24000ec8 	.word	0x24000ec8
 801030c:	24000f70 	.word	0x24000f70

08010310 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8010310:	b580      	push	{r7, lr}
 8010312:	b08a      	sub	sp, #40	; 0x28
 8010314:	af00      	add	r7, sp, #0
 8010316:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010318:	2300      	movs	r3, #0
 801031a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 801031c:	f001 ff4e 	bl	80121bc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8010320:	4b5b      	ldr	r3, [pc, #364]	; (8010490 <pvPortMalloc+0x180>)
 8010322:	681b      	ldr	r3, [r3, #0]
 8010324:	2b00      	cmp	r3, #0
 8010326:	d101      	bne.n	801032c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8010328:	f000 f920 	bl	801056c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 801032c:	4b59      	ldr	r3, [pc, #356]	; (8010494 <pvPortMalloc+0x184>)
 801032e:	681a      	ldr	r2, [r3, #0]
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	4013      	ands	r3, r2
 8010334:	2b00      	cmp	r3, #0
 8010336:	f040 8093 	bne.w	8010460 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	2b00      	cmp	r3, #0
 801033e:	d01d      	beq.n	801037c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8010340:	2208      	movs	r2, #8
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	4413      	add	r3, r2
 8010346:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	f003 0307 	and.w	r3, r3, #7
 801034e:	2b00      	cmp	r3, #0
 8010350:	d014      	beq.n	801037c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	f023 0307 	bic.w	r3, r3, #7
 8010358:	3308      	adds	r3, #8
 801035a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	f003 0307 	and.w	r3, r3, #7
 8010362:	2b00      	cmp	r3, #0
 8010364:	d00a      	beq.n	801037c <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8010366:	f04f 0350 	mov.w	r3, #80	; 0x50
 801036a:	f383 8811 	msr	BASEPRI, r3
 801036e:	f3bf 8f6f 	isb	sy
 8010372:	f3bf 8f4f 	dsb	sy
 8010376:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8010378:	bf00      	nop
 801037a:	e7fe      	b.n	801037a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	2b00      	cmp	r3, #0
 8010380:	d06e      	beq.n	8010460 <pvPortMalloc+0x150>
 8010382:	4b45      	ldr	r3, [pc, #276]	; (8010498 <pvPortMalloc+0x188>)
 8010384:	681b      	ldr	r3, [r3, #0]
 8010386:	687a      	ldr	r2, [r7, #4]
 8010388:	429a      	cmp	r2, r3
 801038a:	d869      	bhi.n	8010460 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801038c:	4b43      	ldr	r3, [pc, #268]	; (801049c <pvPortMalloc+0x18c>)
 801038e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8010390:	4b42      	ldr	r3, [pc, #264]	; (801049c <pvPortMalloc+0x18c>)
 8010392:	681b      	ldr	r3, [r3, #0]
 8010394:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010396:	e004      	b.n	80103a2 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8010398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801039a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801039c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801039e:	681b      	ldr	r3, [r3, #0]
 80103a0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80103a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103a4:	685b      	ldr	r3, [r3, #4]
 80103a6:	687a      	ldr	r2, [r7, #4]
 80103a8:	429a      	cmp	r2, r3
 80103aa:	d903      	bls.n	80103b4 <pvPortMalloc+0xa4>
 80103ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103ae:	681b      	ldr	r3, [r3, #0]
 80103b0:	2b00      	cmp	r3, #0
 80103b2:	d1f1      	bne.n	8010398 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80103b4:	4b36      	ldr	r3, [pc, #216]	; (8010490 <pvPortMalloc+0x180>)
 80103b6:	681b      	ldr	r3, [r3, #0]
 80103b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80103ba:	429a      	cmp	r2, r3
 80103bc:	d050      	beq.n	8010460 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80103be:	6a3b      	ldr	r3, [r7, #32]
 80103c0:	681b      	ldr	r3, [r3, #0]
 80103c2:	2208      	movs	r2, #8
 80103c4:	4413      	add	r3, r2
 80103c6:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80103c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103ca:	681a      	ldr	r2, [r3, #0]
 80103cc:	6a3b      	ldr	r3, [r7, #32]
 80103ce:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80103d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103d2:	685a      	ldr	r2, [r3, #4]
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	1ad2      	subs	r2, r2, r3
 80103d8:	2308      	movs	r3, #8
 80103da:	005b      	lsls	r3, r3, #1
 80103dc:	429a      	cmp	r2, r3
 80103de:	d91f      	bls.n	8010420 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80103e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	4413      	add	r3, r2
 80103e6:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80103e8:	69bb      	ldr	r3, [r7, #24]
 80103ea:	f003 0307 	and.w	r3, r3, #7
 80103ee:	2b00      	cmp	r3, #0
 80103f0:	d00a      	beq.n	8010408 <pvPortMalloc+0xf8>
	__asm volatile
 80103f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103f6:	f383 8811 	msr	BASEPRI, r3
 80103fa:	f3bf 8f6f 	isb	sy
 80103fe:	f3bf 8f4f 	dsb	sy
 8010402:	613b      	str	r3, [r7, #16]
}
 8010404:	bf00      	nop
 8010406:	e7fe      	b.n	8010406 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801040a:	685a      	ldr	r2, [r3, #4]
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	1ad2      	subs	r2, r2, r3
 8010410:	69bb      	ldr	r3, [r7, #24]
 8010412:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8010414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010416:	687a      	ldr	r2, [r7, #4]
 8010418:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801041a:	69b8      	ldr	r0, [r7, #24]
 801041c:	f000 f908 	bl	8010630 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010420:	4b1d      	ldr	r3, [pc, #116]	; (8010498 <pvPortMalloc+0x188>)
 8010422:	681a      	ldr	r2, [r3, #0]
 8010424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010426:	685b      	ldr	r3, [r3, #4]
 8010428:	1ad3      	subs	r3, r2, r3
 801042a:	4a1b      	ldr	r2, [pc, #108]	; (8010498 <pvPortMalloc+0x188>)
 801042c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801042e:	4b1a      	ldr	r3, [pc, #104]	; (8010498 <pvPortMalloc+0x188>)
 8010430:	681a      	ldr	r2, [r3, #0]
 8010432:	4b1b      	ldr	r3, [pc, #108]	; (80104a0 <pvPortMalloc+0x190>)
 8010434:	681b      	ldr	r3, [r3, #0]
 8010436:	429a      	cmp	r2, r3
 8010438:	d203      	bcs.n	8010442 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801043a:	4b17      	ldr	r3, [pc, #92]	; (8010498 <pvPortMalloc+0x188>)
 801043c:	681b      	ldr	r3, [r3, #0]
 801043e:	4a18      	ldr	r2, [pc, #96]	; (80104a0 <pvPortMalloc+0x190>)
 8010440:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8010442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010444:	685a      	ldr	r2, [r3, #4]
 8010446:	4b13      	ldr	r3, [pc, #76]	; (8010494 <pvPortMalloc+0x184>)
 8010448:	681b      	ldr	r3, [r3, #0]
 801044a:	431a      	orrs	r2, r3
 801044c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801044e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010452:	2200      	movs	r2, #0
 8010454:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8010456:	4b13      	ldr	r3, [pc, #76]	; (80104a4 <pvPortMalloc+0x194>)
 8010458:	681b      	ldr	r3, [r3, #0]
 801045a:	3301      	adds	r3, #1
 801045c:	4a11      	ldr	r2, [pc, #68]	; (80104a4 <pvPortMalloc+0x194>)
 801045e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010460:	f001 feba 	bl	80121d8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8010464:	69fb      	ldr	r3, [r7, #28]
 8010466:	f003 0307 	and.w	r3, r3, #7
 801046a:	2b00      	cmp	r3, #0
 801046c:	d00a      	beq.n	8010484 <pvPortMalloc+0x174>
	__asm volatile
 801046e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010472:	f383 8811 	msr	BASEPRI, r3
 8010476:	f3bf 8f6f 	isb	sy
 801047a:	f3bf 8f4f 	dsb	sy
 801047e:	60fb      	str	r3, [r7, #12]
}
 8010480:	bf00      	nop
 8010482:	e7fe      	b.n	8010482 <pvPortMalloc+0x172>
	return pvReturn;
 8010484:	69fb      	ldr	r3, [r7, #28]
}
 8010486:	4618      	mov	r0, r3
 8010488:	3728      	adds	r7, #40	; 0x28
 801048a:	46bd      	mov	sp, r7
 801048c:	bd80      	pop	{r7, pc}
 801048e:	bf00      	nop
 8010490:	24004f78 	.word	0x24004f78
 8010494:	24004f8c 	.word	0x24004f8c
 8010498:	24004f7c 	.word	0x24004f7c
 801049c:	24004f70 	.word	0x24004f70
 80104a0:	24004f80 	.word	0x24004f80
 80104a4:	24004f84 	.word	0x24004f84

080104a8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80104a8:	b580      	push	{r7, lr}
 80104aa:	b086      	sub	sp, #24
 80104ac:	af00      	add	r7, sp, #0
 80104ae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	2b00      	cmp	r3, #0
 80104b8:	d04d      	beq.n	8010556 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80104ba:	2308      	movs	r3, #8
 80104bc:	425b      	negs	r3, r3
 80104be:	697a      	ldr	r2, [r7, #20]
 80104c0:	4413      	add	r3, r2
 80104c2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80104c4:	697b      	ldr	r3, [r7, #20]
 80104c6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80104c8:	693b      	ldr	r3, [r7, #16]
 80104ca:	685a      	ldr	r2, [r3, #4]
 80104cc:	4b24      	ldr	r3, [pc, #144]	; (8010560 <vPortFree+0xb8>)
 80104ce:	681b      	ldr	r3, [r3, #0]
 80104d0:	4013      	ands	r3, r2
 80104d2:	2b00      	cmp	r3, #0
 80104d4:	d10a      	bne.n	80104ec <vPortFree+0x44>
	__asm volatile
 80104d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104da:	f383 8811 	msr	BASEPRI, r3
 80104de:	f3bf 8f6f 	isb	sy
 80104e2:	f3bf 8f4f 	dsb	sy
 80104e6:	60fb      	str	r3, [r7, #12]
}
 80104e8:	bf00      	nop
 80104ea:	e7fe      	b.n	80104ea <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80104ec:	693b      	ldr	r3, [r7, #16]
 80104ee:	681b      	ldr	r3, [r3, #0]
 80104f0:	2b00      	cmp	r3, #0
 80104f2:	d00a      	beq.n	801050a <vPortFree+0x62>
	__asm volatile
 80104f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104f8:	f383 8811 	msr	BASEPRI, r3
 80104fc:	f3bf 8f6f 	isb	sy
 8010500:	f3bf 8f4f 	dsb	sy
 8010504:	60bb      	str	r3, [r7, #8]
}
 8010506:	bf00      	nop
 8010508:	e7fe      	b.n	8010508 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801050a:	693b      	ldr	r3, [r7, #16]
 801050c:	685a      	ldr	r2, [r3, #4]
 801050e:	4b14      	ldr	r3, [pc, #80]	; (8010560 <vPortFree+0xb8>)
 8010510:	681b      	ldr	r3, [r3, #0]
 8010512:	4013      	ands	r3, r2
 8010514:	2b00      	cmp	r3, #0
 8010516:	d01e      	beq.n	8010556 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8010518:	693b      	ldr	r3, [r7, #16]
 801051a:	681b      	ldr	r3, [r3, #0]
 801051c:	2b00      	cmp	r3, #0
 801051e:	d11a      	bne.n	8010556 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010520:	693b      	ldr	r3, [r7, #16]
 8010522:	685a      	ldr	r2, [r3, #4]
 8010524:	4b0e      	ldr	r3, [pc, #56]	; (8010560 <vPortFree+0xb8>)
 8010526:	681b      	ldr	r3, [r3, #0]
 8010528:	43db      	mvns	r3, r3
 801052a:	401a      	ands	r2, r3
 801052c:	693b      	ldr	r3, [r7, #16]
 801052e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010530:	f001 fe44 	bl	80121bc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8010534:	693b      	ldr	r3, [r7, #16]
 8010536:	685a      	ldr	r2, [r3, #4]
 8010538:	4b0a      	ldr	r3, [pc, #40]	; (8010564 <vPortFree+0xbc>)
 801053a:	681b      	ldr	r3, [r3, #0]
 801053c:	4413      	add	r3, r2
 801053e:	4a09      	ldr	r2, [pc, #36]	; (8010564 <vPortFree+0xbc>)
 8010540:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8010542:	6938      	ldr	r0, [r7, #16]
 8010544:	f000 f874 	bl	8010630 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8010548:	4b07      	ldr	r3, [pc, #28]	; (8010568 <vPortFree+0xc0>)
 801054a:	681b      	ldr	r3, [r3, #0]
 801054c:	3301      	adds	r3, #1
 801054e:	4a06      	ldr	r2, [pc, #24]	; (8010568 <vPortFree+0xc0>)
 8010550:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8010552:	f001 fe41 	bl	80121d8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8010556:	bf00      	nop
 8010558:	3718      	adds	r7, #24
 801055a:	46bd      	mov	sp, r7
 801055c:	bd80      	pop	{r7, pc}
 801055e:	bf00      	nop
 8010560:	24004f8c 	.word	0x24004f8c
 8010564:	24004f7c 	.word	0x24004f7c
 8010568:	24004f88 	.word	0x24004f88

0801056c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 801056c:	b480      	push	{r7}
 801056e:	b085      	sub	sp, #20
 8010570:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8010572:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8010576:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8010578:	4b27      	ldr	r3, [pc, #156]	; (8010618 <prvHeapInit+0xac>)
 801057a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801057c:	68fb      	ldr	r3, [r7, #12]
 801057e:	f003 0307 	and.w	r3, r3, #7
 8010582:	2b00      	cmp	r3, #0
 8010584:	d00c      	beq.n	80105a0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8010586:	68fb      	ldr	r3, [r7, #12]
 8010588:	3307      	adds	r3, #7
 801058a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801058c:	68fb      	ldr	r3, [r7, #12]
 801058e:	f023 0307 	bic.w	r3, r3, #7
 8010592:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8010594:	68ba      	ldr	r2, [r7, #8]
 8010596:	68fb      	ldr	r3, [r7, #12]
 8010598:	1ad3      	subs	r3, r2, r3
 801059a:	4a1f      	ldr	r2, [pc, #124]	; (8010618 <prvHeapInit+0xac>)
 801059c:	4413      	add	r3, r2
 801059e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80105a0:	68fb      	ldr	r3, [r7, #12]
 80105a2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80105a4:	4a1d      	ldr	r2, [pc, #116]	; (801061c <prvHeapInit+0xb0>)
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80105aa:	4b1c      	ldr	r3, [pc, #112]	; (801061c <prvHeapInit+0xb0>)
 80105ac:	2200      	movs	r2, #0
 80105ae:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	68ba      	ldr	r2, [r7, #8]
 80105b4:	4413      	add	r3, r2
 80105b6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80105b8:	2208      	movs	r2, #8
 80105ba:	68fb      	ldr	r3, [r7, #12]
 80105bc:	1a9b      	subs	r3, r3, r2
 80105be:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80105c0:	68fb      	ldr	r3, [r7, #12]
 80105c2:	f023 0307 	bic.w	r3, r3, #7
 80105c6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80105c8:	68fb      	ldr	r3, [r7, #12]
 80105ca:	4a15      	ldr	r2, [pc, #84]	; (8010620 <prvHeapInit+0xb4>)
 80105cc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80105ce:	4b14      	ldr	r3, [pc, #80]	; (8010620 <prvHeapInit+0xb4>)
 80105d0:	681b      	ldr	r3, [r3, #0]
 80105d2:	2200      	movs	r2, #0
 80105d4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80105d6:	4b12      	ldr	r3, [pc, #72]	; (8010620 <prvHeapInit+0xb4>)
 80105d8:	681b      	ldr	r3, [r3, #0]
 80105da:	2200      	movs	r2, #0
 80105dc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80105e2:	683b      	ldr	r3, [r7, #0]
 80105e4:	68fa      	ldr	r2, [r7, #12]
 80105e6:	1ad2      	subs	r2, r2, r3
 80105e8:	683b      	ldr	r3, [r7, #0]
 80105ea:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80105ec:	4b0c      	ldr	r3, [pc, #48]	; (8010620 <prvHeapInit+0xb4>)
 80105ee:	681a      	ldr	r2, [r3, #0]
 80105f0:	683b      	ldr	r3, [r7, #0]
 80105f2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80105f4:	683b      	ldr	r3, [r7, #0]
 80105f6:	685b      	ldr	r3, [r3, #4]
 80105f8:	4a0a      	ldr	r2, [pc, #40]	; (8010624 <prvHeapInit+0xb8>)
 80105fa:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80105fc:	683b      	ldr	r3, [r7, #0]
 80105fe:	685b      	ldr	r3, [r3, #4]
 8010600:	4a09      	ldr	r2, [pc, #36]	; (8010628 <prvHeapInit+0xbc>)
 8010602:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8010604:	4b09      	ldr	r3, [pc, #36]	; (801062c <prvHeapInit+0xc0>)
 8010606:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801060a:	601a      	str	r2, [r3, #0]
}
 801060c:	bf00      	nop
 801060e:	3714      	adds	r7, #20
 8010610:	46bd      	mov	sp, r7
 8010612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010616:	4770      	bx	lr
 8010618:	24001370 	.word	0x24001370
 801061c:	24004f70 	.word	0x24004f70
 8010620:	24004f78 	.word	0x24004f78
 8010624:	24004f80 	.word	0x24004f80
 8010628:	24004f7c 	.word	0x24004f7c
 801062c:	24004f8c 	.word	0x24004f8c

08010630 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010630:	b480      	push	{r7}
 8010632:	b085      	sub	sp, #20
 8010634:	af00      	add	r7, sp, #0
 8010636:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010638:	4b28      	ldr	r3, [pc, #160]	; (80106dc <prvInsertBlockIntoFreeList+0xac>)
 801063a:	60fb      	str	r3, [r7, #12]
 801063c:	e002      	b.n	8010644 <prvInsertBlockIntoFreeList+0x14>
 801063e:	68fb      	ldr	r3, [r7, #12]
 8010640:	681b      	ldr	r3, [r3, #0]
 8010642:	60fb      	str	r3, [r7, #12]
 8010644:	68fb      	ldr	r3, [r7, #12]
 8010646:	681b      	ldr	r3, [r3, #0]
 8010648:	687a      	ldr	r2, [r7, #4]
 801064a:	429a      	cmp	r2, r3
 801064c:	d8f7      	bhi.n	801063e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801064e:	68fb      	ldr	r3, [r7, #12]
 8010650:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8010652:	68fb      	ldr	r3, [r7, #12]
 8010654:	685b      	ldr	r3, [r3, #4]
 8010656:	68ba      	ldr	r2, [r7, #8]
 8010658:	4413      	add	r3, r2
 801065a:	687a      	ldr	r2, [r7, #4]
 801065c:	429a      	cmp	r2, r3
 801065e:	d108      	bne.n	8010672 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010660:	68fb      	ldr	r3, [r7, #12]
 8010662:	685a      	ldr	r2, [r3, #4]
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	685b      	ldr	r3, [r3, #4]
 8010668:	441a      	add	r2, r3
 801066a:	68fb      	ldr	r3, [r7, #12]
 801066c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801066e:	68fb      	ldr	r3, [r7, #12]
 8010670:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	685b      	ldr	r3, [r3, #4]
 801067a:	68ba      	ldr	r2, [r7, #8]
 801067c:	441a      	add	r2, r3
 801067e:	68fb      	ldr	r3, [r7, #12]
 8010680:	681b      	ldr	r3, [r3, #0]
 8010682:	429a      	cmp	r2, r3
 8010684:	d118      	bne.n	80106b8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8010686:	68fb      	ldr	r3, [r7, #12]
 8010688:	681a      	ldr	r2, [r3, #0]
 801068a:	4b15      	ldr	r3, [pc, #84]	; (80106e0 <prvInsertBlockIntoFreeList+0xb0>)
 801068c:	681b      	ldr	r3, [r3, #0]
 801068e:	429a      	cmp	r2, r3
 8010690:	d00d      	beq.n	80106ae <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	685a      	ldr	r2, [r3, #4]
 8010696:	68fb      	ldr	r3, [r7, #12]
 8010698:	681b      	ldr	r3, [r3, #0]
 801069a:	685b      	ldr	r3, [r3, #4]
 801069c:	441a      	add	r2, r3
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80106a2:	68fb      	ldr	r3, [r7, #12]
 80106a4:	681b      	ldr	r3, [r3, #0]
 80106a6:	681a      	ldr	r2, [r3, #0]
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	601a      	str	r2, [r3, #0]
 80106ac:	e008      	b.n	80106c0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80106ae:	4b0c      	ldr	r3, [pc, #48]	; (80106e0 <prvInsertBlockIntoFreeList+0xb0>)
 80106b0:	681a      	ldr	r2, [r3, #0]
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	601a      	str	r2, [r3, #0]
 80106b6:	e003      	b.n	80106c0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80106b8:	68fb      	ldr	r3, [r7, #12]
 80106ba:	681a      	ldr	r2, [r3, #0]
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80106c0:	68fa      	ldr	r2, [r7, #12]
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	429a      	cmp	r2, r3
 80106c6:	d002      	beq.n	80106ce <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80106c8:	68fb      	ldr	r3, [r7, #12]
 80106ca:	687a      	ldr	r2, [r7, #4]
 80106cc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80106ce:	bf00      	nop
 80106d0:	3714      	adds	r7, #20
 80106d2:	46bd      	mov	sp, r7
 80106d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106d8:	4770      	bx	lr
 80106da:	bf00      	nop
 80106dc:	24004f70 	.word	0x24004f70
 80106e0:	24004f78 	.word	0x24004f78

080106e4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80106e4:	b480      	push	{r7}
 80106e6:	b083      	sub	sp, #12
 80106e8:	af00      	add	r7, sp, #0
 80106ea:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80106ec:	687b      	ldr	r3, [r7, #4]
 80106ee:	f103 0208 	add.w	r2, r3, #8
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	f04f 32ff 	mov.w	r2, #4294967295
 80106fc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	f103 0208 	add.w	r2, r3, #8
 8010704:	687b      	ldr	r3, [r7, #4]
 8010706:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	f103 0208 	add.w	r2, r3, #8
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	2200      	movs	r2, #0
 8010716:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8010718:	bf00      	nop
 801071a:	370c      	adds	r7, #12
 801071c:	46bd      	mov	sp, r7
 801071e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010722:	4770      	bx	lr

08010724 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8010724:	b480      	push	{r7}
 8010726:	b083      	sub	sp, #12
 8010728:	af00      	add	r7, sp, #0
 801072a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	2200      	movs	r2, #0
 8010730:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8010732:	bf00      	nop
 8010734:	370c      	adds	r7, #12
 8010736:	46bd      	mov	sp, r7
 8010738:	f85d 7b04 	ldr.w	r7, [sp], #4
 801073c:	4770      	bx	lr

0801073e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801073e:	b480      	push	{r7}
 8010740:	b085      	sub	sp, #20
 8010742:	af00      	add	r7, sp, #0
 8010744:	6078      	str	r0, [r7, #4]
 8010746:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	685b      	ldr	r3, [r3, #4]
 801074c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801074e:	683b      	ldr	r3, [r7, #0]
 8010750:	68fa      	ldr	r2, [r7, #12]
 8010752:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8010754:	68fb      	ldr	r3, [r7, #12]
 8010756:	689a      	ldr	r2, [r3, #8]
 8010758:	683b      	ldr	r3, [r7, #0]
 801075a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 801075c:	68fb      	ldr	r3, [r7, #12]
 801075e:	689b      	ldr	r3, [r3, #8]
 8010760:	683a      	ldr	r2, [r7, #0]
 8010762:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8010764:	68fb      	ldr	r3, [r7, #12]
 8010766:	683a      	ldr	r2, [r7, #0]
 8010768:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801076a:	683b      	ldr	r3, [r7, #0]
 801076c:	687a      	ldr	r2, [r7, #4]
 801076e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	681b      	ldr	r3, [r3, #0]
 8010774:	1c5a      	adds	r2, r3, #1
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	601a      	str	r2, [r3, #0]
}
 801077a:	bf00      	nop
 801077c:	3714      	adds	r7, #20
 801077e:	46bd      	mov	sp, r7
 8010780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010784:	4770      	bx	lr

08010786 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010786:	b480      	push	{r7}
 8010788:	b085      	sub	sp, #20
 801078a:	af00      	add	r7, sp, #0
 801078c:	6078      	str	r0, [r7, #4]
 801078e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8010790:	683b      	ldr	r3, [r7, #0]
 8010792:	681b      	ldr	r3, [r3, #0]
 8010794:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8010796:	68bb      	ldr	r3, [r7, #8]
 8010798:	f1b3 3fff 	cmp.w	r3, #4294967295
 801079c:	d103      	bne.n	80107a6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	691b      	ldr	r3, [r3, #16]
 80107a2:	60fb      	str	r3, [r7, #12]
 80107a4:	e00c      	b.n	80107c0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	3308      	adds	r3, #8
 80107aa:	60fb      	str	r3, [r7, #12]
 80107ac:	e002      	b.n	80107b4 <vListInsert+0x2e>
 80107ae:	68fb      	ldr	r3, [r7, #12]
 80107b0:	685b      	ldr	r3, [r3, #4]
 80107b2:	60fb      	str	r3, [r7, #12]
 80107b4:	68fb      	ldr	r3, [r7, #12]
 80107b6:	685b      	ldr	r3, [r3, #4]
 80107b8:	681b      	ldr	r3, [r3, #0]
 80107ba:	68ba      	ldr	r2, [r7, #8]
 80107bc:	429a      	cmp	r2, r3
 80107be:	d2f6      	bcs.n	80107ae <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80107c0:	68fb      	ldr	r3, [r7, #12]
 80107c2:	685a      	ldr	r2, [r3, #4]
 80107c4:	683b      	ldr	r3, [r7, #0]
 80107c6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80107c8:	683b      	ldr	r3, [r7, #0]
 80107ca:	685b      	ldr	r3, [r3, #4]
 80107cc:	683a      	ldr	r2, [r7, #0]
 80107ce:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80107d0:	683b      	ldr	r3, [r7, #0]
 80107d2:	68fa      	ldr	r2, [r7, #12]
 80107d4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80107d6:	68fb      	ldr	r3, [r7, #12]
 80107d8:	683a      	ldr	r2, [r7, #0]
 80107da:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80107dc:	683b      	ldr	r3, [r7, #0]
 80107de:	687a      	ldr	r2, [r7, #4]
 80107e0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	681b      	ldr	r3, [r3, #0]
 80107e6:	1c5a      	adds	r2, r3, #1
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	601a      	str	r2, [r3, #0]
}
 80107ec:	bf00      	nop
 80107ee:	3714      	adds	r7, #20
 80107f0:	46bd      	mov	sp, r7
 80107f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107f6:	4770      	bx	lr

080107f8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80107f8:	b480      	push	{r7}
 80107fa:	b085      	sub	sp, #20
 80107fc:	af00      	add	r7, sp, #0
 80107fe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	691b      	ldr	r3, [r3, #16]
 8010804:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	685b      	ldr	r3, [r3, #4]
 801080a:	687a      	ldr	r2, [r7, #4]
 801080c:	6892      	ldr	r2, [r2, #8]
 801080e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	689b      	ldr	r3, [r3, #8]
 8010814:	687a      	ldr	r2, [r7, #4]
 8010816:	6852      	ldr	r2, [r2, #4]
 8010818:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801081a:	68fb      	ldr	r3, [r7, #12]
 801081c:	685b      	ldr	r3, [r3, #4]
 801081e:	687a      	ldr	r2, [r7, #4]
 8010820:	429a      	cmp	r2, r3
 8010822:	d103      	bne.n	801082c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	689a      	ldr	r2, [r3, #8]
 8010828:	68fb      	ldr	r3, [r7, #12]
 801082a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	2200      	movs	r2, #0
 8010830:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8010832:	68fb      	ldr	r3, [r7, #12]
 8010834:	681b      	ldr	r3, [r3, #0]
 8010836:	1e5a      	subs	r2, r3, #1
 8010838:	68fb      	ldr	r3, [r7, #12]
 801083a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 801083c:	68fb      	ldr	r3, [r7, #12]
 801083e:	681b      	ldr	r3, [r3, #0]
}
 8010840:	4618      	mov	r0, r3
 8010842:	3714      	adds	r7, #20
 8010844:	46bd      	mov	sp, r7
 8010846:	f85d 7b04 	ldr.w	r7, [sp], #4
 801084a:	4770      	bx	lr

0801084c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801084c:	b480      	push	{r7}
 801084e:	b085      	sub	sp, #20
 8010850:	af00      	add	r7, sp, #0
 8010852:	60f8      	str	r0, [r7, #12]
 8010854:	60b9      	str	r1, [r7, #8]
 8010856:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8010858:	68fb      	ldr	r3, [r7, #12]
 801085a:	3b04      	subs	r3, #4
 801085c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801085e:	68fb      	ldr	r3, [r7, #12]
 8010860:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8010864:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010866:	68fb      	ldr	r3, [r7, #12]
 8010868:	3b04      	subs	r3, #4
 801086a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801086c:	68bb      	ldr	r3, [r7, #8]
 801086e:	f023 0201 	bic.w	r2, r3, #1
 8010872:	68fb      	ldr	r3, [r7, #12]
 8010874:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010876:	68fb      	ldr	r3, [r7, #12]
 8010878:	3b04      	subs	r3, #4
 801087a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801087c:	4a0c      	ldr	r2, [pc, #48]	; (80108b0 <pxPortInitialiseStack+0x64>)
 801087e:	68fb      	ldr	r3, [r7, #12]
 8010880:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8010882:	68fb      	ldr	r3, [r7, #12]
 8010884:	3b14      	subs	r3, #20
 8010886:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010888:	687a      	ldr	r2, [r7, #4]
 801088a:	68fb      	ldr	r3, [r7, #12]
 801088c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801088e:	68fb      	ldr	r3, [r7, #12]
 8010890:	3b04      	subs	r3, #4
 8010892:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8010894:	68fb      	ldr	r3, [r7, #12]
 8010896:	f06f 0202 	mvn.w	r2, #2
 801089a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801089c:	68fb      	ldr	r3, [r7, #12]
 801089e:	3b20      	subs	r3, #32
 80108a0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80108a2:	68fb      	ldr	r3, [r7, #12]
}
 80108a4:	4618      	mov	r0, r3
 80108a6:	3714      	adds	r7, #20
 80108a8:	46bd      	mov	sp, r7
 80108aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108ae:	4770      	bx	lr
 80108b0:	080108b5 	.word	0x080108b5

080108b4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80108b4:	b480      	push	{r7}
 80108b6:	b085      	sub	sp, #20
 80108b8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80108ba:	2300      	movs	r3, #0
 80108bc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80108be:	4b12      	ldr	r3, [pc, #72]	; (8010908 <prvTaskExitError+0x54>)
 80108c0:	681b      	ldr	r3, [r3, #0]
 80108c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80108c6:	d00a      	beq.n	80108de <prvTaskExitError+0x2a>
	__asm volatile
 80108c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108cc:	f383 8811 	msr	BASEPRI, r3
 80108d0:	f3bf 8f6f 	isb	sy
 80108d4:	f3bf 8f4f 	dsb	sy
 80108d8:	60fb      	str	r3, [r7, #12]
}
 80108da:	bf00      	nop
 80108dc:	e7fe      	b.n	80108dc <prvTaskExitError+0x28>
	__asm volatile
 80108de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108e2:	f383 8811 	msr	BASEPRI, r3
 80108e6:	f3bf 8f6f 	isb	sy
 80108ea:	f3bf 8f4f 	dsb	sy
 80108ee:	60bb      	str	r3, [r7, #8]
}
 80108f0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80108f2:	bf00      	nop
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	2b00      	cmp	r3, #0
 80108f8:	d0fc      	beq.n	80108f4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80108fa:	bf00      	nop
 80108fc:	bf00      	nop
 80108fe:	3714      	adds	r7, #20
 8010900:	46bd      	mov	sp, r7
 8010902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010906:	4770      	bx	lr
 8010908:	24000010 	.word	0x24000010
 801090c:	00000000 	.word	0x00000000

08010910 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010910:	4b07      	ldr	r3, [pc, #28]	; (8010930 <pxCurrentTCBConst2>)
 8010912:	6819      	ldr	r1, [r3, #0]
 8010914:	6808      	ldr	r0, [r1, #0]
 8010916:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801091a:	f380 8809 	msr	PSP, r0
 801091e:	f3bf 8f6f 	isb	sy
 8010922:	f04f 0000 	mov.w	r0, #0
 8010926:	f380 8811 	msr	BASEPRI, r0
 801092a:	4770      	bx	lr
 801092c:	f3af 8000 	nop.w

08010930 <pxCurrentTCBConst2>:
 8010930:	24004fd8 	.word	0x24004fd8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8010934:	bf00      	nop
 8010936:	bf00      	nop

08010938 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8010938:	4808      	ldr	r0, [pc, #32]	; (801095c <prvPortStartFirstTask+0x24>)
 801093a:	6800      	ldr	r0, [r0, #0]
 801093c:	6800      	ldr	r0, [r0, #0]
 801093e:	f380 8808 	msr	MSP, r0
 8010942:	f04f 0000 	mov.w	r0, #0
 8010946:	f380 8814 	msr	CONTROL, r0
 801094a:	b662      	cpsie	i
 801094c:	b661      	cpsie	f
 801094e:	f3bf 8f4f 	dsb	sy
 8010952:	f3bf 8f6f 	isb	sy
 8010956:	df00      	svc	0
 8010958:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801095a:	bf00      	nop
 801095c:	e000ed08 	.word	0xe000ed08

08010960 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010960:	b580      	push	{r7, lr}
 8010962:	b086      	sub	sp, #24
 8010964:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8010966:	4b46      	ldr	r3, [pc, #280]	; (8010a80 <xPortStartScheduler+0x120>)
 8010968:	681b      	ldr	r3, [r3, #0]
 801096a:	4a46      	ldr	r2, [pc, #280]	; (8010a84 <xPortStartScheduler+0x124>)
 801096c:	4293      	cmp	r3, r2
 801096e:	d10a      	bne.n	8010986 <xPortStartScheduler+0x26>
	__asm volatile
 8010970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010974:	f383 8811 	msr	BASEPRI, r3
 8010978:	f3bf 8f6f 	isb	sy
 801097c:	f3bf 8f4f 	dsb	sy
 8010980:	613b      	str	r3, [r7, #16]
}
 8010982:	bf00      	nop
 8010984:	e7fe      	b.n	8010984 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8010986:	4b3e      	ldr	r3, [pc, #248]	; (8010a80 <xPortStartScheduler+0x120>)
 8010988:	681b      	ldr	r3, [r3, #0]
 801098a:	4a3f      	ldr	r2, [pc, #252]	; (8010a88 <xPortStartScheduler+0x128>)
 801098c:	4293      	cmp	r3, r2
 801098e:	d10a      	bne.n	80109a6 <xPortStartScheduler+0x46>
	__asm volatile
 8010990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010994:	f383 8811 	msr	BASEPRI, r3
 8010998:	f3bf 8f6f 	isb	sy
 801099c:	f3bf 8f4f 	dsb	sy
 80109a0:	60fb      	str	r3, [r7, #12]
}
 80109a2:	bf00      	nop
 80109a4:	e7fe      	b.n	80109a4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80109a6:	4b39      	ldr	r3, [pc, #228]	; (8010a8c <xPortStartScheduler+0x12c>)
 80109a8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80109aa:	697b      	ldr	r3, [r7, #20]
 80109ac:	781b      	ldrb	r3, [r3, #0]
 80109ae:	b2db      	uxtb	r3, r3
 80109b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80109b2:	697b      	ldr	r3, [r7, #20]
 80109b4:	22ff      	movs	r2, #255	; 0xff
 80109b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80109b8:	697b      	ldr	r3, [r7, #20]
 80109ba:	781b      	ldrb	r3, [r3, #0]
 80109bc:	b2db      	uxtb	r3, r3
 80109be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80109c0:	78fb      	ldrb	r3, [r7, #3]
 80109c2:	b2db      	uxtb	r3, r3
 80109c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80109c8:	b2da      	uxtb	r2, r3
 80109ca:	4b31      	ldr	r3, [pc, #196]	; (8010a90 <xPortStartScheduler+0x130>)
 80109cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80109ce:	4b31      	ldr	r3, [pc, #196]	; (8010a94 <xPortStartScheduler+0x134>)
 80109d0:	2207      	movs	r2, #7
 80109d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80109d4:	e009      	b.n	80109ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80109d6:	4b2f      	ldr	r3, [pc, #188]	; (8010a94 <xPortStartScheduler+0x134>)
 80109d8:	681b      	ldr	r3, [r3, #0]
 80109da:	3b01      	subs	r3, #1
 80109dc:	4a2d      	ldr	r2, [pc, #180]	; (8010a94 <xPortStartScheduler+0x134>)
 80109de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80109e0:	78fb      	ldrb	r3, [r7, #3]
 80109e2:	b2db      	uxtb	r3, r3
 80109e4:	005b      	lsls	r3, r3, #1
 80109e6:	b2db      	uxtb	r3, r3
 80109e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80109ea:	78fb      	ldrb	r3, [r7, #3]
 80109ec:	b2db      	uxtb	r3, r3
 80109ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80109f2:	2b80      	cmp	r3, #128	; 0x80
 80109f4:	d0ef      	beq.n	80109d6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80109f6:	4b27      	ldr	r3, [pc, #156]	; (8010a94 <xPortStartScheduler+0x134>)
 80109f8:	681b      	ldr	r3, [r3, #0]
 80109fa:	f1c3 0307 	rsb	r3, r3, #7
 80109fe:	2b04      	cmp	r3, #4
 8010a00:	d00a      	beq.n	8010a18 <xPortStartScheduler+0xb8>
	__asm volatile
 8010a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a06:	f383 8811 	msr	BASEPRI, r3
 8010a0a:	f3bf 8f6f 	isb	sy
 8010a0e:	f3bf 8f4f 	dsb	sy
 8010a12:	60bb      	str	r3, [r7, #8]
}
 8010a14:	bf00      	nop
 8010a16:	e7fe      	b.n	8010a16 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8010a18:	4b1e      	ldr	r3, [pc, #120]	; (8010a94 <xPortStartScheduler+0x134>)
 8010a1a:	681b      	ldr	r3, [r3, #0]
 8010a1c:	021b      	lsls	r3, r3, #8
 8010a1e:	4a1d      	ldr	r2, [pc, #116]	; (8010a94 <xPortStartScheduler+0x134>)
 8010a20:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8010a22:	4b1c      	ldr	r3, [pc, #112]	; (8010a94 <xPortStartScheduler+0x134>)
 8010a24:	681b      	ldr	r3, [r3, #0]
 8010a26:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8010a2a:	4a1a      	ldr	r2, [pc, #104]	; (8010a94 <xPortStartScheduler+0x134>)
 8010a2c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	b2da      	uxtb	r2, r3
 8010a32:	697b      	ldr	r3, [r7, #20]
 8010a34:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8010a36:	4b18      	ldr	r3, [pc, #96]	; (8010a98 <xPortStartScheduler+0x138>)
 8010a38:	681b      	ldr	r3, [r3, #0]
 8010a3a:	4a17      	ldr	r2, [pc, #92]	; (8010a98 <xPortStartScheduler+0x138>)
 8010a3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8010a40:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8010a42:	4b15      	ldr	r3, [pc, #84]	; (8010a98 <xPortStartScheduler+0x138>)
 8010a44:	681b      	ldr	r3, [r3, #0]
 8010a46:	4a14      	ldr	r2, [pc, #80]	; (8010a98 <xPortStartScheduler+0x138>)
 8010a48:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8010a4c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8010a4e:	f000 f8dd 	bl	8010c0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8010a52:	4b12      	ldr	r3, [pc, #72]	; (8010a9c <xPortStartScheduler+0x13c>)
 8010a54:	2200      	movs	r2, #0
 8010a56:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8010a58:	f000 f8fc 	bl	8010c54 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8010a5c:	4b10      	ldr	r3, [pc, #64]	; (8010aa0 <xPortStartScheduler+0x140>)
 8010a5e:	681b      	ldr	r3, [r3, #0]
 8010a60:	4a0f      	ldr	r2, [pc, #60]	; (8010aa0 <xPortStartScheduler+0x140>)
 8010a62:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8010a66:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8010a68:	f7ff ff66 	bl	8010938 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8010a6c:	f001 fd1c 	bl	80124a8 <vTaskSwitchContext>
	prvTaskExitError();
 8010a70:	f7ff ff20 	bl	80108b4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8010a74:	2300      	movs	r3, #0
}
 8010a76:	4618      	mov	r0, r3
 8010a78:	3718      	adds	r7, #24
 8010a7a:	46bd      	mov	sp, r7
 8010a7c:	bd80      	pop	{r7, pc}
 8010a7e:	bf00      	nop
 8010a80:	e000ed00 	.word	0xe000ed00
 8010a84:	410fc271 	.word	0x410fc271
 8010a88:	410fc270 	.word	0x410fc270
 8010a8c:	e000e400 	.word	0xe000e400
 8010a90:	24004f90 	.word	0x24004f90
 8010a94:	24004f94 	.word	0x24004f94
 8010a98:	e000ed20 	.word	0xe000ed20
 8010a9c:	24000010 	.word	0x24000010
 8010aa0:	e000ef34 	.word	0xe000ef34

08010aa4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8010aa4:	b480      	push	{r7}
 8010aa6:	b083      	sub	sp, #12
 8010aa8:	af00      	add	r7, sp, #0
	__asm volatile
 8010aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010aae:	f383 8811 	msr	BASEPRI, r3
 8010ab2:	f3bf 8f6f 	isb	sy
 8010ab6:	f3bf 8f4f 	dsb	sy
 8010aba:	607b      	str	r3, [r7, #4]
}
 8010abc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8010abe:	4b0f      	ldr	r3, [pc, #60]	; (8010afc <vPortEnterCritical+0x58>)
 8010ac0:	681b      	ldr	r3, [r3, #0]
 8010ac2:	3301      	adds	r3, #1
 8010ac4:	4a0d      	ldr	r2, [pc, #52]	; (8010afc <vPortEnterCritical+0x58>)
 8010ac6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8010ac8:	4b0c      	ldr	r3, [pc, #48]	; (8010afc <vPortEnterCritical+0x58>)
 8010aca:	681b      	ldr	r3, [r3, #0]
 8010acc:	2b01      	cmp	r3, #1
 8010ace:	d10f      	bne.n	8010af0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8010ad0:	4b0b      	ldr	r3, [pc, #44]	; (8010b00 <vPortEnterCritical+0x5c>)
 8010ad2:	681b      	ldr	r3, [r3, #0]
 8010ad4:	b2db      	uxtb	r3, r3
 8010ad6:	2b00      	cmp	r3, #0
 8010ad8:	d00a      	beq.n	8010af0 <vPortEnterCritical+0x4c>
	__asm volatile
 8010ada:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ade:	f383 8811 	msr	BASEPRI, r3
 8010ae2:	f3bf 8f6f 	isb	sy
 8010ae6:	f3bf 8f4f 	dsb	sy
 8010aea:	603b      	str	r3, [r7, #0]
}
 8010aec:	bf00      	nop
 8010aee:	e7fe      	b.n	8010aee <vPortEnterCritical+0x4a>
	}
}
 8010af0:	bf00      	nop
 8010af2:	370c      	adds	r7, #12
 8010af4:	46bd      	mov	sp, r7
 8010af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010afa:	4770      	bx	lr
 8010afc:	24000010 	.word	0x24000010
 8010b00:	e000ed04 	.word	0xe000ed04

08010b04 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8010b04:	b480      	push	{r7}
 8010b06:	b083      	sub	sp, #12
 8010b08:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8010b0a:	4b12      	ldr	r3, [pc, #72]	; (8010b54 <vPortExitCritical+0x50>)
 8010b0c:	681b      	ldr	r3, [r3, #0]
 8010b0e:	2b00      	cmp	r3, #0
 8010b10:	d10a      	bne.n	8010b28 <vPortExitCritical+0x24>
	__asm volatile
 8010b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b16:	f383 8811 	msr	BASEPRI, r3
 8010b1a:	f3bf 8f6f 	isb	sy
 8010b1e:	f3bf 8f4f 	dsb	sy
 8010b22:	607b      	str	r3, [r7, #4]
}
 8010b24:	bf00      	nop
 8010b26:	e7fe      	b.n	8010b26 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8010b28:	4b0a      	ldr	r3, [pc, #40]	; (8010b54 <vPortExitCritical+0x50>)
 8010b2a:	681b      	ldr	r3, [r3, #0]
 8010b2c:	3b01      	subs	r3, #1
 8010b2e:	4a09      	ldr	r2, [pc, #36]	; (8010b54 <vPortExitCritical+0x50>)
 8010b30:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8010b32:	4b08      	ldr	r3, [pc, #32]	; (8010b54 <vPortExitCritical+0x50>)
 8010b34:	681b      	ldr	r3, [r3, #0]
 8010b36:	2b00      	cmp	r3, #0
 8010b38:	d105      	bne.n	8010b46 <vPortExitCritical+0x42>
 8010b3a:	2300      	movs	r3, #0
 8010b3c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8010b3e:	683b      	ldr	r3, [r7, #0]
 8010b40:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8010b44:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8010b46:	bf00      	nop
 8010b48:	370c      	adds	r7, #12
 8010b4a:	46bd      	mov	sp, r7
 8010b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b50:	4770      	bx	lr
 8010b52:	bf00      	nop
 8010b54:	24000010 	.word	0x24000010
	...

08010b60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010b60:	f3ef 8009 	mrs	r0, PSP
 8010b64:	f3bf 8f6f 	isb	sy
 8010b68:	4b15      	ldr	r3, [pc, #84]	; (8010bc0 <pxCurrentTCBConst>)
 8010b6a:	681a      	ldr	r2, [r3, #0]
 8010b6c:	f01e 0f10 	tst.w	lr, #16
 8010b70:	bf08      	it	eq
 8010b72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010b76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b7a:	6010      	str	r0, [r2, #0]
 8010b7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010b80:	f04f 0050 	mov.w	r0, #80	; 0x50
 8010b84:	f380 8811 	msr	BASEPRI, r0
 8010b88:	f3bf 8f4f 	dsb	sy
 8010b8c:	f3bf 8f6f 	isb	sy
 8010b90:	f001 fc8a 	bl	80124a8 <vTaskSwitchContext>
 8010b94:	f04f 0000 	mov.w	r0, #0
 8010b98:	f380 8811 	msr	BASEPRI, r0
 8010b9c:	bc09      	pop	{r0, r3}
 8010b9e:	6819      	ldr	r1, [r3, #0]
 8010ba0:	6808      	ldr	r0, [r1, #0]
 8010ba2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ba6:	f01e 0f10 	tst.w	lr, #16
 8010baa:	bf08      	it	eq
 8010bac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010bb0:	f380 8809 	msr	PSP, r0
 8010bb4:	f3bf 8f6f 	isb	sy
 8010bb8:	4770      	bx	lr
 8010bba:	bf00      	nop
 8010bbc:	f3af 8000 	nop.w

08010bc0 <pxCurrentTCBConst>:
 8010bc0:	24004fd8 	.word	0x24004fd8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010bc4:	bf00      	nop
 8010bc6:	bf00      	nop

08010bc8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010bc8:	b580      	push	{r7, lr}
 8010bca:	b082      	sub	sp, #8
 8010bcc:	af00      	add	r7, sp, #0
	__asm volatile
 8010bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010bd2:	f383 8811 	msr	BASEPRI, r3
 8010bd6:	f3bf 8f6f 	isb	sy
 8010bda:	f3bf 8f4f 	dsb	sy
 8010bde:	607b      	str	r3, [r7, #4]
}
 8010be0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010be2:	f001 fba7 	bl	8012334 <xTaskIncrementTick>
 8010be6:	4603      	mov	r3, r0
 8010be8:	2b00      	cmp	r3, #0
 8010bea:	d003      	beq.n	8010bf4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8010bec:	4b06      	ldr	r3, [pc, #24]	; (8010c08 <xPortSysTickHandler+0x40>)
 8010bee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010bf2:	601a      	str	r2, [r3, #0]
 8010bf4:	2300      	movs	r3, #0
 8010bf6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010bf8:	683b      	ldr	r3, [r7, #0]
 8010bfa:	f383 8811 	msr	BASEPRI, r3
}
 8010bfe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8010c00:	bf00      	nop
 8010c02:	3708      	adds	r7, #8
 8010c04:	46bd      	mov	sp, r7
 8010c06:	bd80      	pop	{r7, pc}
 8010c08:	e000ed04 	.word	0xe000ed04

08010c0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8010c0c:	b480      	push	{r7}
 8010c0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8010c10:	4b0b      	ldr	r3, [pc, #44]	; (8010c40 <vPortSetupTimerInterrupt+0x34>)
 8010c12:	2200      	movs	r2, #0
 8010c14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8010c16:	4b0b      	ldr	r3, [pc, #44]	; (8010c44 <vPortSetupTimerInterrupt+0x38>)
 8010c18:	2200      	movs	r2, #0
 8010c1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8010c1c:	4b0a      	ldr	r3, [pc, #40]	; (8010c48 <vPortSetupTimerInterrupt+0x3c>)
 8010c1e:	681b      	ldr	r3, [r3, #0]
 8010c20:	4a0a      	ldr	r2, [pc, #40]	; (8010c4c <vPortSetupTimerInterrupt+0x40>)
 8010c22:	fba2 2303 	umull	r2, r3, r2, r3
 8010c26:	099b      	lsrs	r3, r3, #6
 8010c28:	4a09      	ldr	r2, [pc, #36]	; (8010c50 <vPortSetupTimerInterrupt+0x44>)
 8010c2a:	3b01      	subs	r3, #1
 8010c2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8010c2e:	4b04      	ldr	r3, [pc, #16]	; (8010c40 <vPortSetupTimerInterrupt+0x34>)
 8010c30:	2207      	movs	r2, #7
 8010c32:	601a      	str	r2, [r3, #0]
}
 8010c34:	bf00      	nop
 8010c36:	46bd      	mov	sp, r7
 8010c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c3c:	4770      	bx	lr
 8010c3e:	bf00      	nop
 8010c40:	e000e010 	.word	0xe000e010
 8010c44:	e000e018 	.word	0xe000e018
 8010c48:	24000000 	.word	0x24000000
 8010c4c:	10624dd3 	.word	0x10624dd3
 8010c50:	e000e014 	.word	0xe000e014

08010c54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8010c54:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8010c64 <vPortEnableVFP+0x10>
 8010c58:	6801      	ldr	r1, [r0, #0]
 8010c5a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8010c5e:	6001      	str	r1, [r0, #0]
 8010c60:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8010c62:	bf00      	nop
 8010c64:	e000ed88 	.word	0xe000ed88

08010c68 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8010c68:	b480      	push	{r7}
 8010c6a:	b085      	sub	sp, #20
 8010c6c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8010c6e:	f3ef 8305 	mrs	r3, IPSR
 8010c72:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010c74:	68fb      	ldr	r3, [r7, #12]
 8010c76:	2b0f      	cmp	r3, #15
 8010c78:	d914      	bls.n	8010ca4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8010c7a:	4a17      	ldr	r2, [pc, #92]	; (8010cd8 <vPortValidateInterruptPriority+0x70>)
 8010c7c:	68fb      	ldr	r3, [r7, #12]
 8010c7e:	4413      	add	r3, r2
 8010c80:	781b      	ldrb	r3, [r3, #0]
 8010c82:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010c84:	4b15      	ldr	r3, [pc, #84]	; (8010cdc <vPortValidateInterruptPriority+0x74>)
 8010c86:	781b      	ldrb	r3, [r3, #0]
 8010c88:	7afa      	ldrb	r2, [r7, #11]
 8010c8a:	429a      	cmp	r2, r3
 8010c8c:	d20a      	bcs.n	8010ca4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8010c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c92:	f383 8811 	msr	BASEPRI, r3
 8010c96:	f3bf 8f6f 	isb	sy
 8010c9a:	f3bf 8f4f 	dsb	sy
 8010c9e:	607b      	str	r3, [r7, #4]
}
 8010ca0:	bf00      	nop
 8010ca2:	e7fe      	b.n	8010ca2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8010ca4:	4b0e      	ldr	r3, [pc, #56]	; (8010ce0 <vPortValidateInterruptPriority+0x78>)
 8010ca6:	681b      	ldr	r3, [r3, #0]
 8010ca8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8010cac:	4b0d      	ldr	r3, [pc, #52]	; (8010ce4 <vPortValidateInterruptPriority+0x7c>)
 8010cae:	681b      	ldr	r3, [r3, #0]
 8010cb0:	429a      	cmp	r2, r3
 8010cb2:	d90a      	bls.n	8010cca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8010cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cb8:	f383 8811 	msr	BASEPRI, r3
 8010cbc:	f3bf 8f6f 	isb	sy
 8010cc0:	f3bf 8f4f 	dsb	sy
 8010cc4:	603b      	str	r3, [r7, #0]
}
 8010cc6:	bf00      	nop
 8010cc8:	e7fe      	b.n	8010cc8 <vPortValidateInterruptPriority+0x60>
	}
 8010cca:	bf00      	nop
 8010ccc:	3714      	adds	r7, #20
 8010cce:	46bd      	mov	sp, r7
 8010cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cd4:	4770      	bx	lr
 8010cd6:	bf00      	nop
 8010cd8:	e000e3f0 	.word	0xe000e3f0
 8010cdc:	24004f90 	.word	0x24004f90
 8010ce0:	e000ed0c 	.word	0xe000ed0c
 8010ce4:	24004f94 	.word	0x24004f94

08010ce8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8010ce8:	b580      	push	{r7, lr}
 8010cea:	b084      	sub	sp, #16
 8010cec:	af00      	add	r7, sp, #0
 8010cee:	6078      	str	r0, [r7, #4]
 8010cf0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8010cf6:	68fb      	ldr	r3, [r7, #12]
 8010cf8:	2b00      	cmp	r3, #0
 8010cfa:	d10a      	bne.n	8010d12 <xQueueGenericReset+0x2a>
	__asm volatile
 8010cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d00:	f383 8811 	msr	BASEPRI, r3
 8010d04:	f3bf 8f6f 	isb	sy
 8010d08:	f3bf 8f4f 	dsb	sy
 8010d0c:	60bb      	str	r3, [r7, #8]
}
 8010d0e:	bf00      	nop
 8010d10:	e7fe      	b.n	8010d10 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8010d12:	f7ff fec7 	bl	8010aa4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010d16:	68fb      	ldr	r3, [r7, #12]
 8010d18:	681a      	ldr	r2, [r3, #0]
 8010d1a:	68fb      	ldr	r3, [r7, #12]
 8010d1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010d1e:	68f9      	ldr	r1, [r7, #12]
 8010d20:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8010d22:	fb01 f303 	mul.w	r3, r1, r3
 8010d26:	441a      	add	r2, r3
 8010d28:	68fb      	ldr	r3, [r7, #12]
 8010d2a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8010d2c:	68fb      	ldr	r3, [r7, #12]
 8010d2e:	2200      	movs	r2, #0
 8010d30:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8010d32:	68fb      	ldr	r3, [r7, #12]
 8010d34:	681a      	ldr	r2, [r3, #0]
 8010d36:	68fb      	ldr	r3, [r7, #12]
 8010d38:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010d3a:	68fb      	ldr	r3, [r7, #12]
 8010d3c:	681a      	ldr	r2, [r3, #0]
 8010d3e:	68fb      	ldr	r3, [r7, #12]
 8010d40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010d42:	3b01      	subs	r3, #1
 8010d44:	68f9      	ldr	r1, [r7, #12]
 8010d46:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8010d48:	fb01 f303 	mul.w	r3, r1, r3
 8010d4c:	441a      	add	r2, r3
 8010d4e:	68fb      	ldr	r3, [r7, #12]
 8010d50:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8010d52:	68fb      	ldr	r3, [r7, #12]
 8010d54:	22ff      	movs	r2, #255	; 0xff
 8010d56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8010d5a:	68fb      	ldr	r3, [r7, #12]
 8010d5c:	22ff      	movs	r2, #255	; 0xff
 8010d5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8010d62:	683b      	ldr	r3, [r7, #0]
 8010d64:	2b00      	cmp	r3, #0
 8010d66:	d114      	bne.n	8010d92 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010d68:	68fb      	ldr	r3, [r7, #12]
 8010d6a:	691b      	ldr	r3, [r3, #16]
 8010d6c:	2b00      	cmp	r3, #0
 8010d6e:	d01a      	beq.n	8010da6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010d70:	68fb      	ldr	r3, [r7, #12]
 8010d72:	3310      	adds	r3, #16
 8010d74:	4618      	mov	r0, r3
 8010d76:	f001 fc4b 	bl	8012610 <xTaskRemoveFromEventList>
 8010d7a:	4603      	mov	r3, r0
 8010d7c:	2b00      	cmp	r3, #0
 8010d7e:	d012      	beq.n	8010da6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8010d80:	4b0c      	ldr	r3, [pc, #48]	; (8010db4 <xQueueGenericReset+0xcc>)
 8010d82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010d86:	601a      	str	r2, [r3, #0]
 8010d88:	f3bf 8f4f 	dsb	sy
 8010d8c:	f3bf 8f6f 	isb	sy
 8010d90:	e009      	b.n	8010da6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8010d92:	68fb      	ldr	r3, [r7, #12]
 8010d94:	3310      	adds	r3, #16
 8010d96:	4618      	mov	r0, r3
 8010d98:	f7ff fca4 	bl	80106e4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8010d9c:	68fb      	ldr	r3, [r7, #12]
 8010d9e:	3324      	adds	r3, #36	; 0x24
 8010da0:	4618      	mov	r0, r3
 8010da2:	f7ff fc9f 	bl	80106e4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8010da6:	f7ff fead 	bl	8010b04 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8010daa:	2301      	movs	r3, #1
}
 8010dac:	4618      	mov	r0, r3
 8010dae:	3710      	adds	r7, #16
 8010db0:	46bd      	mov	sp, r7
 8010db2:	bd80      	pop	{r7, pc}
 8010db4:	e000ed04 	.word	0xe000ed04

08010db8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8010db8:	b580      	push	{r7, lr}
 8010dba:	b08e      	sub	sp, #56	; 0x38
 8010dbc:	af02      	add	r7, sp, #8
 8010dbe:	60f8      	str	r0, [r7, #12]
 8010dc0:	60b9      	str	r1, [r7, #8]
 8010dc2:	607a      	str	r2, [r7, #4]
 8010dc4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8010dc6:	68fb      	ldr	r3, [r7, #12]
 8010dc8:	2b00      	cmp	r3, #0
 8010dca:	d10a      	bne.n	8010de2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8010dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010dd0:	f383 8811 	msr	BASEPRI, r3
 8010dd4:	f3bf 8f6f 	isb	sy
 8010dd8:	f3bf 8f4f 	dsb	sy
 8010ddc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8010dde:	bf00      	nop
 8010de0:	e7fe      	b.n	8010de0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8010de2:	683b      	ldr	r3, [r7, #0]
 8010de4:	2b00      	cmp	r3, #0
 8010de6:	d10a      	bne.n	8010dfe <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8010de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010dec:	f383 8811 	msr	BASEPRI, r3
 8010df0:	f3bf 8f6f 	isb	sy
 8010df4:	f3bf 8f4f 	dsb	sy
 8010df8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8010dfa:	bf00      	nop
 8010dfc:	e7fe      	b.n	8010dfc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8010dfe:	687b      	ldr	r3, [r7, #4]
 8010e00:	2b00      	cmp	r3, #0
 8010e02:	d002      	beq.n	8010e0a <xQueueGenericCreateStatic+0x52>
 8010e04:	68bb      	ldr	r3, [r7, #8]
 8010e06:	2b00      	cmp	r3, #0
 8010e08:	d001      	beq.n	8010e0e <xQueueGenericCreateStatic+0x56>
 8010e0a:	2301      	movs	r3, #1
 8010e0c:	e000      	b.n	8010e10 <xQueueGenericCreateStatic+0x58>
 8010e0e:	2300      	movs	r3, #0
 8010e10:	2b00      	cmp	r3, #0
 8010e12:	d10a      	bne.n	8010e2a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8010e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e18:	f383 8811 	msr	BASEPRI, r3
 8010e1c:	f3bf 8f6f 	isb	sy
 8010e20:	f3bf 8f4f 	dsb	sy
 8010e24:	623b      	str	r3, [r7, #32]
}
 8010e26:	bf00      	nop
 8010e28:	e7fe      	b.n	8010e28 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	2b00      	cmp	r3, #0
 8010e2e:	d102      	bne.n	8010e36 <xQueueGenericCreateStatic+0x7e>
 8010e30:	68bb      	ldr	r3, [r7, #8]
 8010e32:	2b00      	cmp	r3, #0
 8010e34:	d101      	bne.n	8010e3a <xQueueGenericCreateStatic+0x82>
 8010e36:	2301      	movs	r3, #1
 8010e38:	e000      	b.n	8010e3c <xQueueGenericCreateStatic+0x84>
 8010e3a:	2300      	movs	r3, #0
 8010e3c:	2b00      	cmp	r3, #0
 8010e3e:	d10a      	bne.n	8010e56 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8010e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e44:	f383 8811 	msr	BASEPRI, r3
 8010e48:	f3bf 8f6f 	isb	sy
 8010e4c:	f3bf 8f4f 	dsb	sy
 8010e50:	61fb      	str	r3, [r7, #28]
}
 8010e52:	bf00      	nop
 8010e54:	e7fe      	b.n	8010e54 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8010e56:	2350      	movs	r3, #80	; 0x50
 8010e58:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8010e5a:	697b      	ldr	r3, [r7, #20]
 8010e5c:	2b50      	cmp	r3, #80	; 0x50
 8010e5e:	d00a      	beq.n	8010e76 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8010e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e64:	f383 8811 	msr	BASEPRI, r3
 8010e68:	f3bf 8f6f 	isb	sy
 8010e6c:	f3bf 8f4f 	dsb	sy
 8010e70:	61bb      	str	r3, [r7, #24]
}
 8010e72:	bf00      	nop
 8010e74:	e7fe      	b.n	8010e74 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8010e76:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8010e78:	683b      	ldr	r3, [r7, #0]
 8010e7a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8010e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e7e:	2b00      	cmp	r3, #0
 8010e80:	d00d      	beq.n	8010e9e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8010e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e84:	2201      	movs	r2, #1
 8010e86:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010e8a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8010e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e90:	9300      	str	r3, [sp, #0]
 8010e92:	4613      	mov	r3, r2
 8010e94:	687a      	ldr	r2, [r7, #4]
 8010e96:	68b9      	ldr	r1, [r7, #8]
 8010e98:	68f8      	ldr	r0, [r7, #12]
 8010e9a:	f000 f83f 	bl	8010f1c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8010e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8010ea0:	4618      	mov	r0, r3
 8010ea2:	3730      	adds	r7, #48	; 0x30
 8010ea4:	46bd      	mov	sp, r7
 8010ea6:	bd80      	pop	{r7, pc}

08010ea8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8010ea8:	b580      	push	{r7, lr}
 8010eaa:	b08a      	sub	sp, #40	; 0x28
 8010eac:	af02      	add	r7, sp, #8
 8010eae:	60f8      	str	r0, [r7, #12]
 8010eb0:	60b9      	str	r1, [r7, #8]
 8010eb2:	4613      	mov	r3, r2
 8010eb4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8010eb6:	68fb      	ldr	r3, [r7, #12]
 8010eb8:	2b00      	cmp	r3, #0
 8010eba:	d10a      	bne.n	8010ed2 <xQueueGenericCreate+0x2a>
	__asm volatile
 8010ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ec0:	f383 8811 	msr	BASEPRI, r3
 8010ec4:	f3bf 8f6f 	isb	sy
 8010ec8:	f3bf 8f4f 	dsb	sy
 8010ecc:	613b      	str	r3, [r7, #16]
}
 8010ece:	bf00      	nop
 8010ed0:	e7fe      	b.n	8010ed0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010ed2:	68fb      	ldr	r3, [r7, #12]
 8010ed4:	68ba      	ldr	r2, [r7, #8]
 8010ed6:	fb02 f303 	mul.w	r3, r2, r3
 8010eda:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8010edc:	69fb      	ldr	r3, [r7, #28]
 8010ede:	3350      	adds	r3, #80	; 0x50
 8010ee0:	4618      	mov	r0, r3
 8010ee2:	f7ff fa15 	bl	8010310 <pvPortMalloc>
 8010ee6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8010ee8:	69bb      	ldr	r3, [r7, #24]
 8010eea:	2b00      	cmp	r3, #0
 8010eec:	d011      	beq.n	8010f12 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8010eee:	69bb      	ldr	r3, [r7, #24]
 8010ef0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010ef2:	697b      	ldr	r3, [r7, #20]
 8010ef4:	3350      	adds	r3, #80	; 0x50
 8010ef6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8010ef8:	69bb      	ldr	r3, [r7, #24]
 8010efa:	2200      	movs	r2, #0
 8010efc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010f00:	79fa      	ldrb	r2, [r7, #7]
 8010f02:	69bb      	ldr	r3, [r7, #24]
 8010f04:	9300      	str	r3, [sp, #0]
 8010f06:	4613      	mov	r3, r2
 8010f08:	697a      	ldr	r2, [r7, #20]
 8010f0a:	68b9      	ldr	r1, [r7, #8]
 8010f0c:	68f8      	ldr	r0, [r7, #12]
 8010f0e:	f000 f805 	bl	8010f1c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8010f12:	69bb      	ldr	r3, [r7, #24]
	}
 8010f14:	4618      	mov	r0, r3
 8010f16:	3720      	adds	r7, #32
 8010f18:	46bd      	mov	sp, r7
 8010f1a:	bd80      	pop	{r7, pc}

08010f1c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8010f1c:	b580      	push	{r7, lr}
 8010f1e:	b084      	sub	sp, #16
 8010f20:	af00      	add	r7, sp, #0
 8010f22:	60f8      	str	r0, [r7, #12]
 8010f24:	60b9      	str	r1, [r7, #8]
 8010f26:	607a      	str	r2, [r7, #4]
 8010f28:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8010f2a:	68bb      	ldr	r3, [r7, #8]
 8010f2c:	2b00      	cmp	r3, #0
 8010f2e:	d103      	bne.n	8010f38 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8010f30:	69bb      	ldr	r3, [r7, #24]
 8010f32:	69ba      	ldr	r2, [r7, #24]
 8010f34:	601a      	str	r2, [r3, #0]
 8010f36:	e002      	b.n	8010f3e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8010f38:	69bb      	ldr	r3, [r7, #24]
 8010f3a:	687a      	ldr	r2, [r7, #4]
 8010f3c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8010f3e:	69bb      	ldr	r3, [r7, #24]
 8010f40:	68fa      	ldr	r2, [r7, #12]
 8010f42:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8010f44:	69bb      	ldr	r3, [r7, #24]
 8010f46:	68ba      	ldr	r2, [r7, #8]
 8010f48:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8010f4a:	2101      	movs	r1, #1
 8010f4c:	69b8      	ldr	r0, [r7, #24]
 8010f4e:	f7ff fecb 	bl	8010ce8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8010f52:	69bb      	ldr	r3, [r7, #24]
 8010f54:	78fa      	ldrb	r2, [r7, #3]
 8010f56:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8010f5a:	bf00      	nop
 8010f5c:	3710      	adds	r7, #16
 8010f5e:	46bd      	mov	sp, r7
 8010f60:	bd80      	pop	{r7, pc}

08010f62 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8010f62:	b580      	push	{r7, lr}
 8010f64:	b08a      	sub	sp, #40	; 0x28
 8010f66:	af02      	add	r7, sp, #8
 8010f68:	60f8      	str	r0, [r7, #12]
 8010f6a:	60b9      	str	r1, [r7, #8]
 8010f6c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8010f6e:	68fb      	ldr	r3, [r7, #12]
 8010f70:	2b00      	cmp	r3, #0
 8010f72:	d10a      	bne.n	8010f8a <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8010f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f78:	f383 8811 	msr	BASEPRI, r3
 8010f7c:	f3bf 8f6f 	isb	sy
 8010f80:	f3bf 8f4f 	dsb	sy
 8010f84:	61bb      	str	r3, [r7, #24]
}
 8010f86:	bf00      	nop
 8010f88:	e7fe      	b.n	8010f88 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8010f8a:	68ba      	ldr	r2, [r7, #8]
 8010f8c:	68fb      	ldr	r3, [r7, #12]
 8010f8e:	429a      	cmp	r2, r3
 8010f90:	d90a      	bls.n	8010fa8 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8010f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f96:	f383 8811 	msr	BASEPRI, r3
 8010f9a:	f3bf 8f6f 	isb	sy
 8010f9e:	f3bf 8f4f 	dsb	sy
 8010fa2:	617b      	str	r3, [r7, #20]
}
 8010fa4:	bf00      	nop
 8010fa6:	e7fe      	b.n	8010fa6 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8010fa8:	2302      	movs	r3, #2
 8010faa:	9300      	str	r3, [sp, #0]
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	2200      	movs	r2, #0
 8010fb0:	2100      	movs	r1, #0
 8010fb2:	68f8      	ldr	r0, [r7, #12]
 8010fb4:	f7ff ff00 	bl	8010db8 <xQueueGenericCreateStatic>
 8010fb8:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8010fba:	69fb      	ldr	r3, [r7, #28]
 8010fbc:	2b00      	cmp	r3, #0
 8010fbe:	d002      	beq.n	8010fc6 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8010fc0:	69fb      	ldr	r3, [r7, #28]
 8010fc2:	68ba      	ldr	r2, [r7, #8]
 8010fc4:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8010fc6:	69fb      	ldr	r3, [r7, #28]
	}
 8010fc8:	4618      	mov	r0, r3
 8010fca:	3720      	adds	r7, #32
 8010fcc:	46bd      	mov	sp, r7
 8010fce:	bd80      	pop	{r7, pc}

08010fd0 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8010fd0:	b580      	push	{r7, lr}
 8010fd2:	b086      	sub	sp, #24
 8010fd4:	af00      	add	r7, sp, #0
 8010fd6:	6078      	str	r0, [r7, #4]
 8010fd8:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8010fda:	687b      	ldr	r3, [r7, #4]
 8010fdc:	2b00      	cmp	r3, #0
 8010fde:	d10a      	bne.n	8010ff6 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8010fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fe4:	f383 8811 	msr	BASEPRI, r3
 8010fe8:	f3bf 8f6f 	isb	sy
 8010fec:	f3bf 8f4f 	dsb	sy
 8010ff0:	613b      	str	r3, [r7, #16]
}
 8010ff2:	bf00      	nop
 8010ff4:	e7fe      	b.n	8010ff4 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8010ff6:	683a      	ldr	r2, [r7, #0]
 8010ff8:	687b      	ldr	r3, [r7, #4]
 8010ffa:	429a      	cmp	r2, r3
 8010ffc:	d90a      	bls.n	8011014 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8010ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011002:	f383 8811 	msr	BASEPRI, r3
 8011006:	f3bf 8f6f 	isb	sy
 801100a:	f3bf 8f4f 	dsb	sy
 801100e:	60fb      	str	r3, [r7, #12]
}
 8011010:	bf00      	nop
 8011012:	e7fe      	b.n	8011012 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8011014:	2202      	movs	r2, #2
 8011016:	2100      	movs	r1, #0
 8011018:	6878      	ldr	r0, [r7, #4]
 801101a:	f7ff ff45 	bl	8010ea8 <xQueueGenericCreate>
 801101e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8011020:	697b      	ldr	r3, [r7, #20]
 8011022:	2b00      	cmp	r3, #0
 8011024:	d002      	beq.n	801102c <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8011026:	697b      	ldr	r3, [r7, #20]
 8011028:	683a      	ldr	r2, [r7, #0]
 801102a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 801102c:	697b      	ldr	r3, [r7, #20]
	}
 801102e:	4618      	mov	r0, r3
 8011030:	3718      	adds	r7, #24
 8011032:	46bd      	mov	sp, r7
 8011034:	bd80      	pop	{r7, pc}
	...

08011038 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8011038:	b580      	push	{r7, lr}
 801103a:	b08e      	sub	sp, #56	; 0x38
 801103c:	af00      	add	r7, sp, #0
 801103e:	60f8      	str	r0, [r7, #12]
 8011040:	60b9      	str	r1, [r7, #8]
 8011042:	607a      	str	r2, [r7, #4]
 8011044:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8011046:	2300      	movs	r3, #0
 8011048:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801104a:	68fb      	ldr	r3, [r7, #12]
 801104c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801104e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011050:	2b00      	cmp	r3, #0
 8011052:	d10a      	bne.n	801106a <xQueueGenericSend+0x32>
	__asm volatile
 8011054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011058:	f383 8811 	msr	BASEPRI, r3
 801105c:	f3bf 8f6f 	isb	sy
 8011060:	f3bf 8f4f 	dsb	sy
 8011064:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8011066:	bf00      	nop
 8011068:	e7fe      	b.n	8011068 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801106a:	68bb      	ldr	r3, [r7, #8]
 801106c:	2b00      	cmp	r3, #0
 801106e:	d103      	bne.n	8011078 <xQueueGenericSend+0x40>
 8011070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011074:	2b00      	cmp	r3, #0
 8011076:	d101      	bne.n	801107c <xQueueGenericSend+0x44>
 8011078:	2301      	movs	r3, #1
 801107a:	e000      	b.n	801107e <xQueueGenericSend+0x46>
 801107c:	2300      	movs	r3, #0
 801107e:	2b00      	cmp	r3, #0
 8011080:	d10a      	bne.n	8011098 <xQueueGenericSend+0x60>
	__asm volatile
 8011082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011086:	f383 8811 	msr	BASEPRI, r3
 801108a:	f3bf 8f6f 	isb	sy
 801108e:	f3bf 8f4f 	dsb	sy
 8011092:	627b      	str	r3, [r7, #36]	; 0x24
}
 8011094:	bf00      	nop
 8011096:	e7fe      	b.n	8011096 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011098:	683b      	ldr	r3, [r7, #0]
 801109a:	2b02      	cmp	r3, #2
 801109c:	d103      	bne.n	80110a6 <xQueueGenericSend+0x6e>
 801109e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80110a2:	2b01      	cmp	r3, #1
 80110a4:	d101      	bne.n	80110aa <xQueueGenericSend+0x72>
 80110a6:	2301      	movs	r3, #1
 80110a8:	e000      	b.n	80110ac <xQueueGenericSend+0x74>
 80110aa:	2300      	movs	r3, #0
 80110ac:	2b00      	cmp	r3, #0
 80110ae:	d10a      	bne.n	80110c6 <xQueueGenericSend+0x8e>
	__asm volatile
 80110b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110b4:	f383 8811 	msr	BASEPRI, r3
 80110b8:	f3bf 8f6f 	isb	sy
 80110bc:	f3bf 8f4f 	dsb	sy
 80110c0:	623b      	str	r3, [r7, #32]
}
 80110c2:	bf00      	nop
 80110c4:	e7fe      	b.n	80110c4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80110c6:	f001 fc65 	bl	8012994 <xTaskGetSchedulerState>
 80110ca:	4603      	mov	r3, r0
 80110cc:	2b00      	cmp	r3, #0
 80110ce:	d102      	bne.n	80110d6 <xQueueGenericSend+0x9e>
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	2b00      	cmp	r3, #0
 80110d4:	d101      	bne.n	80110da <xQueueGenericSend+0xa2>
 80110d6:	2301      	movs	r3, #1
 80110d8:	e000      	b.n	80110dc <xQueueGenericSend+0xa4>
 80110da:	2300      	movs	r3, #0
 80110dc:	2b00      	cmp	r3, #0
 80110de:	d10a      	bne.n	80110f6 <xQueueGenericSend+0xbe>
	__asm volatile
 80110e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110e4:	f383 8811 	msr	BASEPRI, r3
 80110e8:	f3bf 8f6f 	isb	sy
 80110ec:	f3bf 8f4f 	dsb	sy
 80110f0:	61fb      	str	r3, [r7, #28]
}
 80110f2:	bf00      	nop
 80110f4:	e7fe      	b.n	80110f4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80110f6:	f7ff fcd5 	bl	8010aa4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80110fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80110fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011100:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011102:	429a      	cmp	r2, r3
 8011104:	d302      	bcc.n	801110c <xQueueGenericSend+0xd4>
 8011106:	683b      	ldr	r3, [r7, #0]
 8011108:	2b02      	cmp	r3, #2
 801110a:	d129      	bne.n	8011160 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801110c:	683a      	ldr	r2, [r7, #0]
 801110e:	68b9      	ldr	r1, [r7, #8]
 8011110:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011112:	f000 fc5e 	bl	80119d2 <prvCopyDataToQueue>
 8011116:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801111a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801111c:	2b00      	cmp	r3, #0
 801111e:	d010      	beq.n	8011142 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011122:	3324      	adds	r3, #36	; 0x24
 8011124:	4618      	mov	r0, r3
 8011126:	f001 fa73 	bl	8012610 <xTaskRemoveFromEventList>
 801112a:	4603      	mov	r3, r0
 801112c:	2b00      	cmp	r3, #0
 801112e:	d013      	beq.n	8011158 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8011130:	4b3f      	ldr	r3, [pc, #252]	; (8011230 <xQueueGenericSend+0x1f8>)
 8011132:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011136:	601a      	str	r2, [r3, #0]
 8011138:	f3bf 8f4f 	dsb	sy
 801113c:	f3bf 8f6f 	isb	sy
 8011140:	e00a      	b.n	8011158 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8011142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011144:	2b00      	cmp	r3, #0
 8011146:	d007      	beq.n	8011158 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8011148:	4b39      	ldr	r3, [pc, #228]	; (8011230 <xQueueGenericSend+0x1f8>)
 801114a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801114e:	601a      	str	r2, [r3, #0]
 8011150:	f3bf 8f4f 	dsb	sy
 8011154:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8011158:	f7ff fcd4 	bl	8010b04 <vPortExitCritical>
				return pdPASS;
 801115c:	2301      	movs	r3, #1
 801115e:	e063      	b.n	8011228 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011160:	687b      	ldr	r3, [r7, #4]
 8011162:	2b00      	cmp	r3, #0
 8011164:	d103      	bne.n	801116e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8011166:	f7ff fccd 	bl	8010b04 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801116a:	2300      	movs	r3, #0
 801116c:	e05c      	b.n	8011228 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 801116e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011170:	2b00      	cmp	r3, #0
 8011172:	d106      	bne.n	8011182 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011174:	f107 0314 	add.w	r3, r7, #20
 8011178:	4618      	mov	r0, r3
 801117a:	f001 faad 	bl	80126d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801117e:	2301      	movs	r3, #1
 8011180:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011182:	f7ff fcbf 	bl	8010b04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011186:	f001 f819 	bl	80121bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801118a:	f7ff fc8b 	bl	8010aa4 <vPortEnterCritical>
 801118e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011190:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011194:	b25b      	sxtb	r3, r3
 8011196:	f1b3 3fff 	cmp.w	r3, #4294967295
 801119a:	d103      	bne.n	80111a4 <xQueueGenericSend+0x16c>
 801119c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801119e:	2200      	movs	r2, #0
 80111a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80111a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80111aa:	b25b      	sxtb	r3, r3
 80111ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80111b0:	d103      	bne.n	80111ba <xQueueGenericSend+0x182>
 80111b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111b4:	2200      	movs	r2, #0
 80111b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80111ba:	f7ff fca3 	bl	8010b04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80111be:	1d3a      	adds	r2, r7, #4
 80111c0:	f107 0314 	add.w	r3, r7, #20
 80111c4:	4611      	mov	r1, r2
 80111c6:	4618      	mov	r0, r3
 80111c8:	f001 fa9c 	bl	8012704 <xTaskCheckForTimeOut>
 80111cc:	4603      	mov	r3, r0
 80111ce:	2b00      	cmp	r3, #0
 80111d0:	d124      	bne.n	801121c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80111d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80111d4:	f000 fcf5 	bl	8011bc2 <prvIsQueueFull>
 80111d8:	4603      	mov	r3, r0
 80111da:	2b00      	cmp	r3, #0
 80111dc:	d018      	beq.n	8011210 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80111de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111e0:	3310      	adds	r3, #16
 80111e2:	687a      	ldr	r2, [r7, #4]
 80111e4:	4611      	mov	r1, r2
 80111e6:	4618      	mov	r0, r3
 80111e8:	f001 f9c2 	bl	8012570 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80111ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80111ee:	f000 fc80 	bl	8011af2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80111f2:	f000 fff1 	bl	80121d8 <xTaskResumeAll>
 80111f6:	4603      	mov	r3, r0
 80111f8:	2b00      	cmp	r3, #0
 80111fa:	f47f af7c 	bne.w	80110f6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80111fe:	4b0c      	ldr	r3, [pc, #48]	; (8011230 <xQueueGenericSend+0x1f8>)
 8011200:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011204:	601a      	str	r2, [r3, #0]
 8011206:	f3bf 8f4f 	dsb	sy
 801120a:	f3bf 8f6f 	isb	sy
 801120e:	e772      	b.n	80110f6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8011210:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011212:	f000 fc6e 	bl	8011af2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011216:	f000 ffdf 	bl	80121d8 <xTaskResumeAll>
 801121a:	e76c      	b.n	80110f6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 801121c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801121e:	f000 fc68 	bl	8011af2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011222:	f000 ffd9 	bl	80121d8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8011226:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8011228:	4618      	mov	r0, r3
 801122a:	3738      	adds	r7, #56	; 0x38
 801122c:	46bd      	mov	sp, r7
 801122e:	bd80      	pop	{r7, pc}
 8011230:	e000ed04 	.word	0xe000ed04

08011234 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8011234:	b580      	push	{r7, lr}
 8011236:	b090      	sub	sp, #64	; 0x40
 8011238:	af00      	add	r7, sp, #0
 801123a:	60f8      	str	r0, [r7, #12]
 801123c:	60b9      	str	r1, [r7, #8]
 801123e:	607a      	str	r2, [r7, #4]
 8011240:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8011242:	68fb      	ldr	r3, [r7, #12]
 8011244:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8011246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011248:	2b00      	cmp	r3, #0
 801124a:	d10a      	bne.n	8011262 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 801124c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011250:	f383 8811 	msr	BASEPRI, r3
 8011254:	f3bf 8f6f 	isb	sy
 8011258:	f3bf 8f4f 	dsb	sy
 801125c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801125e:	bf00      	nop
 8011260:	e7fe      	b.n	8011260 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011262:	68bb      	ldr	r3, [r7, #8]
 8011264:	2b00      	cmp	r3, #0
 8011266:	d103      	bne.n	8011270 <xQueueGenericSendFromISR+0x3c>
 8011268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801126a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801126c:	2b00      	cmp	r3, #0
 801126e:	d101      	bne.n	8011274 <xQueueGenericSendFromISR+0x40>
 8011270:	2301      	movs	r3, #1
 8011272:	e000      	b.n	8011276 <xQueueGenericSendFromISR+0x42>
 8011274:	2300      	movs	r3, #0
 8011276:	2b00      	cmp	r3, #0
 8011278:	d10a      	bne.n	8011290 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 801127a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801127e:	f383 8811 	msr	BASEPRI, r3
 8011282:	f3bf 8f6f 	isb	sy
 8011286:	f3bf 8f4f 	dsb	sy
 801128a:	627b      	str	r3, [r7, #36]	; 0x24
}
 801128c:	bf00      	nop
 801128e:	e7fe      	b.n	801128e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011290:	683b      	ldr	r3, [r7, #0]
 8011292:	2b02      	cmp	r3, #2
 8011294:	d103      	bne.n	801129e <xQueueGenericSendFromISR+0x6a>
 8011296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011298:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801129a:	2b01      	cmp	r3, #1
 801129c:	d101      	bne.n	80112a2 <xQueueGenericSendFromISR+0x6e>
 801129e:	2301      	movs	r3, #1
 80112a0:	e000      	b.n	80112a4 <xQueueGenericSendFromISR+0x70>
 80112a2:	2300      	movs	r3, #0
 80112a4:	2b00      	cmp	r3, #0
 80112a6:	d10a      	bne.n	80112be <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80112a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112ac:	f383 8811 	msr	BASEPRI, r3
 80112b0:	f3bf 8f6f 	isb	sy
 80112b4:	f3bf 8f4f 	dsb	sy
 80112b8:	623b      	str	r3, [r7, #32]
}
 80112ba:	bf00      	nop
 80112bc:	e7fe      	b.n	80112bc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80112be:	f7ff fcd3 	bl	8010c68 <vPortValidateInterruptPriority>
	__asm volatile
 80112c2:	f3ef 8211 	mrs	r2, BASEPRI
 80112c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112ca:	f383 8811 	msr	BASEPRI, r3
 80112ce:	f3bf 8f6f 	isb	sy
 80112d2:	f3bf 8f4f 	dsb	sy
 80112d6:	61fa      	str	r2, [r7, #28]
 80112d8:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 80112da:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80112dc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80112de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80112e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80112e6:	429a      	cmp	r2, r3
 80112e8:	d302      	bcc.n	80112f0 <xQueueGenericSendFromISR+0xbc>
 80112ea:	683b      	ldr	r3, [r7, #0]
 80112ec:	2b02      	cmp	r3, #2
 80112ee:	d12f      	bne.n	8011350 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80112f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80112f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80112fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80112fe:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8011300:	683a      	ldr	r2, [r7, #0]
 8011302:	68b9      	ldr	r1, [r7, #8]
 8011304:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011306:	f000 fb64 	bl	80119d2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801130a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 801130e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011312:	d112      	bne.n	801133a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011318:	2b00      	cmp	r3, #0
 801131a:	d016      	beq.n	801134a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801131c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801131e:	3324      	adds	r3, #36	; 0x24
 8011320:	4618      	mov	r0, r3
 8011322:	f001 f975 	bl	8012610 <xTaskRemoveFromEventList>
 8011326:	4603      	mov	r3, r0
 8011328:	2b00      	cmp	r3, #0
 801132a:	d00e      	beq.n	801134a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801132c:	687b      	ldr	r3, [r7, #4]
 801132e:	2b00      	cmp	r3, #0
 8011330:	d00b      	beq.n	801134a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8011332:	687b      	ldr	r3, [r7, #4]
 8011334:	2201      	movs	r2, #1
 8011336:	601a      	str	r2, [r3, #0]
 8011338:	e007      	b.n	801134a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801133a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801133e:	3301      	adds	r3, #1
 8011340:	b2db      	uxtb	r3, r3
 8011342:	b25a      	sxtb	r2, r3
 8011344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011346:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801134a:	2301      	movs	r3, #1
 801134c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 801134e:	e001      	b.n	8011354 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8011350:	2300      	movs	r3, #0
 8011352:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011354:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011356:	617b      	str	r3, [r7, #20]
	__asm volatile
 8011358:	697b      	ldr	r3, [r7, #20]
 801135a:	f383 8811 	msr	BASEPRI, r3
}
 801135e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011360:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8011362:	4618      	mov	r0, r3
 8011364:	3740      	adds	r7, #64	; 0x40
 8011366:	46bd      	mov	sp, r7
 8011368:	bd80      	pop	{r7, pc}

0801136a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801136a:	b580      	push	{r7, lr}
 801136c:	b08e      	sub	sp, #56	; 0x38
 801136e:	af00      	add	r7, sp, #0
 8011370:	6078      	str	r0, [r7, #4]
 8011372:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8011374:	687b      	ldr	r3, [r7, #4]
 8011376:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8011378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801137a:	2b00      	cmp	r3, #0
 801137c:	d10a      	bne.n	8011394 <xQueueGiveFromISR+0x2a>
	__asm volatile
 801137e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011382:	f383 8811 	msr	BASEPRI, r3
 8011386:	f3bf 8f6f 	isb	sy
 801138a:	f3bf 8f4f 	dsb	sy
 801138e:	623b      	str	r3, [r7, #32]
}
 8011390:	bf00      	nop
 8011392:	e7fe      	b.n	8011392 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8011394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011398:	2b00      	cmp	r3, #0
 801139a:	d00a      	beq.n	80113b2 <xQueueGiveFromISR+0x48>
	__asm volatile
 801139c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113a0:	f383 8811 	msr	BASEPRI, r3
 80113a4:	f3bf 8f6f 	isb	sy
 80113a8:	f3bf 8f4f 	dsb	sy
 80113ac:	61fb      	str	r3, [r7, #28]
}
 80113ae:	bf00      	nop
 80113b0:	e7fe      	b.n	80113b0 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80113b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113b4:	681b      	ldr	r3, [r3, #0]
 80113b6:	2b00      	cmp	r3, #0
 80113b8:	d103      	bne.n	80113c2 <xQueueGiveFromISR+0x58>
 80113ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113bc:	689b      	ldr	r3, [r3, #8]
 80113be:	2b00      	cmp	r3, #0
 80113c0:	d101      	bne.n	80113c6 <xQueueGiveFromISR+0x5c>
 80113c2:	2301      	movs	r3, #1
 80113c4:	e000      	b.n	80113c8 <xQueueGiveFromISR+0x5e>
 80113c6:	2300      	movs	r3, #0
 80113c8:	2b00      	cmp	r3, #0
 80113ca:	d10a      	bne.n	80113e2 <xQueueGiveFromISR+0x78>
	__asm volatile
 80113cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113d0:	f383 8811 	msr	BASEPRI, r3
 80113d4:	f3bf 8f6f 	isb	sy
 80113d8:	f3bf 8f4f 	dsb	sy
 80113dc:	61bb      	str	r3, [r7, #24]
}
 80113de:	bf00      	nop
 80113e0:	e7fe      	b.n	80113e0 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80113e2:	f7ff fc41 	bl	8010c68 <vPortValidateInterruptPriority>
	__asm volatile
 80113e6:	f3ef 8211 	mrs	r2, BASEPRI
 80113ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113ee:	f383 8811 	msr	BASEPRI, r3
 80113f2:	f3bf 8f6f 	isb	sy
 80113f6:	f3bf 8f4f 	dsb	sy
 80113fa:	617a      	str	r2, [r7, #20]
 80113fc:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80113fe:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011400:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011406:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8011408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801140a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801140c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801140e:	429a      	cmp	r2, r3
 8011410:	d22b      	bcs.n	801146a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8011412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011414:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011418:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801141c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801141e:	1c5a      	adds	r2, r3, #1
 8011420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011422:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8011424:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8011428:	f1b3 3fff 	cmp.w	r3, #4294967295
 801142c:	d112      	bne.n	8011454 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801142e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011432:	2b00      	cmp	r3, #0
 8011434:	d016      	beq.n	8011464 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011438:	3324      	adds	r3, #36	; 0x24
 801143a:	4618      	mov	r0, r3
 801143c:	f001 f8e8 	bl	8012610 <xTaskRemoveFromEventList>
 8011440:	4603      	mov	r3, r0
 8011442:	2b00      	cmp	r3, #0
 8011444:	d00e      	beq.n	8011464 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8011446:	683b      	ldr	r3, [r7, #0]
 8011448:	2b00      	cmp	r3, #0
 801144a:	d00b      	beq.n	8011464 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801144c:	683b      	ldr	r3, [r7, #0]
 801144e:	2201      	movs	r2, #1
 8011450:	601a      	str	r2, [r3, #0]
 8011452:	e007      	b.n	8011464 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8011454:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011458:	3301      	adds	r3, #1
 801145a:	b2db      	uxtb	r3, r3
 801145c:	b25a      	sxtb	r2, r3
 801145e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011460:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8011464:	2301      	movs	r3, #1
 8011466:	637b      	str	r3, [r7, #52]	; 0x34
 8011468:	e001      	b.n	801146e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801146a:	2300      	movs	r3, #0
 801146c:	637b      	str	r3, [r7, #52]	; 0x34
 801146e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011470:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8011472:	68fb      	ldr	r3, [r7, #12]
 8011474:	f383 8811 	msr	BASEPRI, r3
}
 8011478:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801147a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801147c:	4618      	mov	r0, r3
 801147e:	3738      	adds	r7, #56	; 0x38
 8011480:	46bd      	mov	sp, r7
 8011482:	bd80      	pop	{r7, pc}

08011484 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8011484:	b580      	push	{r7, lr}
 8011486:	b08c      	sub	sp, #48	; 0x30
 8011488:	af00      	add	r7, sp, #0
 801148a:	60f8      	str	r0, [r7, #12]
 801148c:	60b9      	str	r1, [r7, #8]
 801148e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8011490:	2300      	movs	r3, #0
 8011492:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8011494:	68fb      	ldr	r3, [r7, #12]
 8011496:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8011498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801149a:	2b00      	cmp	r3, #0
 801149c:	d10a      	bne.n	80114b4 <xQueueReceive+0x30>
	__asm volatile
 801149e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114a2:	f383 8811 	msr	BASEPRI, r3
 80114a6:	f3bf 8f6f 	isb	sy
 80114aa:	f3bf 8f4f 	dsb	sy
 80114ae:	623b      	str	r3, [r7, #32]
}
 80114b0:	bf00      	nop
 80114b2:	e7fe      	b.n	80114b2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80114b4:	68bb      	ldr	r3, [r7, #8]
 80114b6:	2b00      	cmp	r3, #0
 80114b8:	d103      	bne.n	80114c2 <xQueueReceive+0x3e>
 80114ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80114be:	2b00      	cmp	r3, #0
 80114c0:	d101      	bne.n	80114c6 <xQueueReceive+0x42>
 80114c2:	2301      	movs	r3, #1
 80114c4:	e000      	b.n	80114c8 <xQueueReceive+0x44>
 80114c6:	2300      	movs	r3, #0
 80114c8:	2b00      	cmp	r3, #0
 80114ca:	d10a      	bne.n	80114e2 <xQueueReceive+0x5e>
	__asm volatile
 80114cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114d0:	f383 8811 	msr	BASEPRI, r3
 80114d4:	f3bf 8f6f 	isb	sy
 80114d8:	f3bf 8f4f 	dsb	sy
 80114dc:	61fb      	str	r3, [r7, #28]
}
 80114de:	bf00      	nop
 80114e0:	e7fe      	b.n	80114e0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80114e2:	f001 fa57 	bl	8012994 <xTaskGetSchedulerState>
 80114e6:	4603      	mov	r3, r0
 80114e8:	2b00      	cmp	r3, #0
 80114ea:	d102      	bne.n	80114f2 <xQueueReceive+0x6e>
 80114ec:	687b      	ldr	r3, [r7, #4]
 80114ee:	2b00      	cmp	r3, #0
 80114f0:	d101      	bne.n	80114f6 <xQueueReceive+0x72>
 80114f2:	2301      	movs	r3, #1
 80114f4:	e000      	b.n	80114f8 <xQueueReceive+0x74>
 80114f6:	2300      	movs	r3, #0
 80114f8:	2b00      	cmp	r3, #0
 80114fa:	d10a      	bne.n	8011512 <xQueueReceive+0x8e>
	__asm volatile
 80114fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011500:	f383 8811 	msr	BASEPRI, r3
 8011504:	f3bf 8f6f 	isb	sy
 8011508:	f3bf 8f4f 	dsb	sy
 801150c:	61bb      	str	r3, [r7, #24]
}
 801150e:	bf00      	nop
 8011510:	e7fe      	b.n	8011510 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8011512:	f7ff fac7 	bl	8010aa4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801151a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801151c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801151e:	2b00      	cmp	r3, #0
 8011520:	d01f      	beq.n	8011562 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8011522:	68b9      	ldr	r1, [r7, #8]
 8011524:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011526:	f000 fabe 	bl	8011aa6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801152a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801152c:	1e5a      	subs	r2, r3, #1
 801152e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011530:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011534:	691b      	ldr	r3, [r3, #16]
 8011536:	2b00      	cmp	r3, #0
 8011538:	d00f      	beq.n	801155a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801153a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801153c:	3310      	adds	r3, #16
 801153e:	4618      	mov	r0, r3
 8011540:	f001 f866 	bl	8012610 <xTaskRemoveFromEventList>
 8011544:	4603      	mov	r3, r0
 8011546:	2b00      	cmp	r3, #0
 8011548:	d007      	beq.n	801155a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801154a:	4b3d      	ldr	r3, [pc, #244]	; (8011640 <xQueueReceive+0x1bc>)
 801154c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011550:	601a      	str	r2, [r3, #0]
 8011552:	f3bf 8f4f 	dsb	sy
 8011556:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801155a:	f7ff fad3 	bl	8010b04 <vPortExitCritical>
				return pdPASS;
 801155e:	2301      	movs	r3, #1
 8011560:	e069      	b.n	8011636 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011562:	687b      	ldr	r3, [r7, #4]
 8011564:	2b00      	cmp	r3, #0
 8011566:	d103      	bne.n	8011570 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8011568:	f7ff facc 	bl	8010b04 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801156c:	2300      	movs	r3, #0
 801156e:	e062      	b.n	8011636 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011572:	2b00      	cmp	r3, #0
 8011574:	d106      	bne.n	8011584 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011576:	f107 0310 	add.w	r3, r7, #16
 801157a:	4618      	mov	r0, r3
 801157c:	f001 f8ac 	bl	80126d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011580:	2301      	movs	r3, #1
 8011582:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011584:	f7ff fabe 	bl	8010b04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011588:	f000 fe18 	bl	80121bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801158c:	f7ff fa8a 	bl	8010aa4 <vPortEnterCritical>
 8011590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011592:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011596:	b25b      	sxtb	r3, r3
 8011598:	f1b3 3fff 	cmp.w	r3, #4294967295
 801159c:	d103      	bne.n	80115a6 <xQueueReceive+0x122>
 801159e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115a0:	2200      	movs	r2, #0
 80115a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80115a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80115ac:	b25b      	sxtb	r3, r3
 80115ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80115b2:	d103      	bne.n	80115bc <xQueueReceive+0x138>
 80115b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115b6:	2200      	movs	r2, #0
 80115b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80115bc:	f7ff faa2 	bl	8010b04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80115c0:	1d3a      	adds	r2, r7, #4
 80115c2:	f107 0310 	add.w	r3, r7, #16
 80115c6:	4611      	mov	r1, r2
 80115c8:	4618      	mov	r0, r3
 80115ca:	f001 f89b 	bl	8012704 <xTaskCheckForTimeOut>
 80115ce:	4603      	mov	r3, r0
 80115d0:	2b00      	cmp	r3, #0
 80115d2:	d123      	bne.n	801161c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80115d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80115d6:	f000 fade 	bl	8011b96 <prvIsQueueEmpty>
 80115da:	4603      	mov	r3, r0
 80115dc:	2b00      	cmp	r3, #0
 80115de:	d017      	beq.n	8011610 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80115e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115e2:	3324      	adds	r3, #36	; 0x24
 80115e4:	687a      	ldr	r2, [r7, #4]
 80115e6:	4611      	mov	r1, r2
 80115e8:	4618      	mov	r0, r3
 80115ea:	f000 ffc1 	bl	8012570 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80115ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80115f0:	f000 fa7f 	bl	8011af2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80115f4:	f000 fdf0 	bl	80121d8 <xTaskResumeAll>
 80115f8:	4603      	mov	r3, r0
 80115fa:	2b00      	cmp	r3, #0
 80115fc:	d189      	bne.n	8011512 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80115fe:	4b10      	ldr	r3, [pc, #64]	; (8011640 <xQueueReceive+0x1bc>)
 8011600:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011604:	601a      	str	r2, [r3, #0]
 8011606:	f3bf 8f4f 	dsb	sy
 801160a:	f3bf 8f6f 	isb	sy
 801160e:	e780      	b.n	8011512 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8011610:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011612:	f000 fa6e 	bl	8011af2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011616:	f000 fddf 	bl	80121d8 <xTaskResumeAll>
 801161a:	e77a      	b.n	8011512 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 801161c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801161e:	f000 fa68 	bl	8011af2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011622:	f000 fdd9 	bl	80121d8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011626:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011628:	f000 fab5 	bl	8011b96 <prvIsQueueEmpty>
 801162c:	4603      	mov	r3, r0
 801162e:	2b00      	cmp	r3, #0
 8011630:	f43f af6f 	beq.w	8011512 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8011634:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8011636:	4618      	mov	r0, r3
 8011638:	3730      	adds	r7, #48	; 0x30
 801163a:	46bd      	mov	sp, r7
 801163c:	bd80      	pop	{r7, pc}
 801163e:	bf00      	nop
 8011640:	e000ed04 	.word	0xe000ed04

08011644 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8011644:	b580      	push	{r7, lr}
 8011646:	b08e      	sub	sp, #56	; 0x38
 8011648:	af00      	add	r7, sp, #0
 801164a:	6078      	str	r0, [r7, #4]
 801164c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 801164e:	2300      	movs	r3, #0
 8011650:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8011652:	687b      	ldr	r3, [r7, #4]
 8011654:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8011656:	2300      	movs	r3, #0
 8011658:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801165a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801165c:	2b00      	cmp	r3, #0
 801165e:	d10a      	bne.n	8011676 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8011660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011664:	f383 8811 	msr	BASEPRI, r3
 8011668:	f3bf 8f6f 	isb	sy
 801166c:	f3bf 8f4f 	dsb	sy
 8011670:	623b      	str	r3, [r7, #32]
}
 8011672:	bf00      	nop
 8011674:	e7fe      	b.n	8011674 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8011676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801167a:	2b00      	cmp	r3, #0
 801167c:	d00a      	beq.n	8011694 <xQueueSemaphoreTake+0x50>
	__asm volatile
 801167e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011682:	f383 8811 	msr	BASEPRI, r3
 8011686:	f3bf 8f6f 	isb	sy
 801168a:	f3bf 8f4f 	dsb	sy
 801168e:	61fb      	str	r3, [r7, #28]
}
 8011690:	bf00      	nop
 8011692:	e7fe      	b.n	8011692 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011694:	f001 f97e 	bl	8012994 <xTaskGetSchedulerState>
 8011698:	4603      	mov	r3, r0
 801169a:	2b00      	cmp	r3, #0
 801169c:	d102      	bne.n	80116a4 <xQueueSemaphoreTake+0x60>
 801169e:	683b      	ldr	r3, [r7, #0]
 80116a0:	2b00      	cmp	r3, #0
 80116a2:	d101      	bne.n	80116a8 <xQueueSemaphoreTake+0x64>
 80116a4:	2301      	movs	r3, #1
 80116a6:	e000      	b.n	80116aa <xQueueSemaphoreTake+0x66>
 80116a8:	2300      	movs	r3, #0
 80116aa:	2b00      	cmp	r3, #0
 80116ac:	d10a      	bne.n	80116c4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80116ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116b2:	f383 8811 	msr	BASEPRI, r3
 80116b6:	f3bf 8f6f 	isb	sy
 80116ba:	f3bf 8f4f 	dsb	sy
 80116be:	61bb      	str	r3, [r7, #24]
}
 80116c0:	bf00      	nop
 80116c2:	e7fe      	b.n	80116c2 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80116c4:	f7ff f9ee 	bl	8010aa4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80116c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80116cc:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80116ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116d0:	2b00      	cmp	r3, #0
 80116d2:	d024      	beq.n	801171e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80116d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116d6:	1e5a      	subs	r2, r3, #1
 80116d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116da:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80116dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116de:	681b      	ldr	r3, [r3, #0]
 80116e0:	2b00      	cmp	r3, #0
 80116e2:	d104      	bne.n	80116ee <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80116e4:	f001 facc 	bl	8012c80 <pvTaskIncrementMutexHeldCount>
 80116e8:	4602      	mov	r2, r0
 80116ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116ec:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80116ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116f0:	691b      	ldr	r3, [r3, #16]
 80116f2:	2b00      	cmp	r3, #0
 80116f4:	d00f      	beq.n	8011716 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80116f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116f8:	3310      	adds	r3, #16
 80116fa:	4618      	mov	r0, r3
 80116fc:	f000 ff88 	bl	8012610 <xTaskRemoveFromEventList>
 8011700:	4603      	mov	r3, r0
 8011702:	2b00      	cmp	r3, #0
 8011704:	d007      	beq.n	8011716 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8011706:	4b54      	ldr	r3, [pc, #336]	; (8011858 <xQueueSemaphoreTake+0x214>)
 8011708:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801170c:	601a      	str	r2, [r3, #0]
 801170e:	f3bf 8f4f 	dsb	sy
 8011712:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8011716:	f7ff f9f5 	bl	8010b04 <vPortExitCritical>
				return pdPASS;
 801171a:	2301      	movs	r3, #1
 801171c:	e097      	b.n	801184e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801171e:	683b      	ldr	r3, [r7, #0]
 8011720:	2b00      	cmp	r3, #0
 8011722:	d111      	bne.n	8011748 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8011724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011726:	2b00      	cmp	r3, #0
 8011728:	d00a      	beq.n	8011740 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 801172a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801172e:	f383 8811 	msr	BASEPRI, r3
 8011732:	f3bf 8f6f 	isb	sy
 8011736:	f3bf 8f4f 	dsb	sy
 801173a:	617b      	str	r3, [r7, #20]
}
 801173c:	bf00      	nop
 801173e:	e7fe      	b.n	801173e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8011740:	f7ff f9e0 	bl	8010b04 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8011744:	2300      	movs	r3, #0
 8011746:	e082      	b.n	801184e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011748:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801174a:	2b00      	cmp	r3, #0
 801174c:	d106      	bne.n	801175c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801174e:	f107 030c 	add.w	r3, r7, #12
 8011752:	4618      	mov	r0, r3
 8011754:	f000 ffc0 	bl	80126d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011758:	2301      	movs	r3, #1
 801175a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801175c:	f7ff f9d2 	bl	8010b04 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011760:	f000 fd2c 	bl	80121bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011764:	f7ff f99e 	bl	8010aa4 <vPortEnterCritical>
 8011768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801176a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801176e:	b25b      	sxtb	r3, r3
 8011770:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011774:	d103      	bne.n	801177e <xQueueSemaphoreTake+0x13a>
 8011776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011778:	2200      	movs	r2, #0
 801177a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801177e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011780:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011784:	b25b      	sxtb	r3, r3
 8011786:	f1b3 3fff 	cmp.w	r3, #4294967295
 801178a:	d103      	bne.n	8011794 <xQueueSemaphoreTake+0x150>
 801178c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801178e:	2200      	movs	r2, #0
 8011790:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011794:	f7ff f9b6 	bl	8010b04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011798:	463a      	mov	r2, r7
 801179a:	f107 030c 	add.w	r3, r7, #12
 801179e:	4611      	mov	r1, r2
 80117a0:	4618      	mov	r0, r3
 80117a2:	f000 ffaf 	bl	8012704 <xTaskCheckForTimeOut>
 80117a6:	4603      	mov	r3, r0
 80117a8:	2b00      	cmp	r3, #0
 80117aa:	d132      	bne.n	8011812 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80117ac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80117ae:	f000 f9f2 	bl	8011b96 <prvIsQueueEmpty>
 80117b2:	4603      	mov	r3, r0
 80117b4:	2b00      	cmp	r3, #0
 80117b6:	d026      	beq.n	8011806 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80117b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117ba:	681b      	ldr	r3, [r3, #0]
 80117bc:	2b00      	cmp	r3, #0
 80117be:	d109      	bne.n	80117d4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80117c0:	f7ff f970 	bl	8010aa4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80117c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117c6:	689b      	ldr	r3, [r3, #8]
 80117c8:	4618      	mov	r0, r3
 80117ca:	f001 f901 	bl	80129d0 <xTaskPriorityInherit>
 80117ce:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80117d0:	f7ff f998 	bl	8010b04 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80117d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117d6:	3324      	adds	r3, #36	; 0x24
 80117d8:	683a      	ldr	r2, [r7, #0]
 80117da:	4611      	mov	r1, r2
 80117dc:	4618      	mov	r0, r3
 80117de:	f000 fec7 	bl	8012570 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80117e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80117e4:	f000 f985 	bl	8011af2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80117e8:	f000 fcf6 	bl	80121d8 <xTaskResumeAll>
 80117ec:	4603      	mov	r3, r0
 80117ee:	2b00      	cmp	r3, #0
 80117f0:	f47f af68 	bne.w	80116c4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80117f4:	4b18      	ldr	r3, [pc, #96]	; (8011858 <xQueueSemaphoreTake+0x214>)
 80117f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80117fa:	601a      	str	r2, [r3, #0]
 80117fc:	f3bf 8f4f 	dsb	sy
 8011800:	f3bf 8f6f 	isb	sy
 8011804:	e75e      	b.n	80116c4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8011806:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011808:	f000 f973 	bl	8011af2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801180c:	f000 fce4 	bl	80121d8 <xTaskResumeAll>
 8011810:	e758      	b.n	80116c4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8011812:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011814:	f000 f96d 	bl	8011af2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011818:	f000 fcde 	bl	80121d8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801181c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801181e:	f000 f9ba 	bl	8011b96 <prvIsQueueEmpty>
 8011822:	4603      	mov	r3, r0
 8011824:	2b00      	cmp	r3, #0
 8011826:	f43f af4d 	beq.w	80116c4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 801182a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801182c:	2b00      	cmp	r3, #0
 801182e:	d00d      	beq.n	801184c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8011830:	f7ff f938 	bl	8010aa4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8011834:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011836:	f000 f8b4 	bl	80119a2 <prvGetDisinheritPriorityAfterTimeout>
 801183a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 801183c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801183e:	689b      	ldr	r3, [r3, #8]
 8011840:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011842:	4618      	mov	r0, r3
 8011844:	f001 f99a 	bl	8012b7c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8011848:	f7ff f95c 	bl	8010b04 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801184c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801184e:	4618      	mov	r0, r3
 8011850:	3738      	adds	r7, #56	; 0x38
 8011852:	46bd      	mov	sp, r7
 8011854:	bd80      	pop	{r7, pc}
 8011856:	bf00      	nop
 8011858:	e000ed04 	.word	0xe000ed04

0801185c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801185c:	b580      	push	{r7, lr}
 801185e:	b08e      	sub	sp, #56	; 0x38
 8011860:	af00      	add	r7, sp, #0
 8011862:	60f8      	str	r0, [r7, #12]
 8011864:	60b9      	str	r1, [r7, #8]
 8011866:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8011868:	68fb      	ldr	r3, [r7, #12]
 801186a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801186c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801186e:	2b00      	cmp	r3, #0
 8011870:	d10a      	bne.n	8011888 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8011872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011876:	f383 8811 	msr	BASEPRI, r3
 801187a:	f3bf 8f6f 	isb	sy
 801187e:	f3bf 8f4f 	dsb	sy
 8011882:	623b      	str	r3, [r7, #32]
}
 8011884:	bf00      	nop
 8011886:	e7fe      	b.n	8011886 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011888:	68bb      	ldr	r3, [r7, #8]
 801188a:	2b00      	cmp	r3, #0
 801188c:	d103      	bne.n	8011896 <xQueueReceiveFromISR+0x3a>
 801188e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011892:	2b00      	cmp	r3, #0
 8011894:	d101      	bne.n	801189a <xQueueReceiveFromISR+0x3e>
 8011896:	2301      	movs	r3, #1
 8011898:	e000      	b.n	801189c <xQueueReceiveFromISR+0x40>
 801189a:	2300      	movs	r3, #0
 801189c:	2b00      	cmp	r3, #0
 801189e:	d10a      	bne.n	80118b6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80118a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118a4:	f383 8811 	msr	BASEPRI, r3
 80118a8:	f3bf 8f6f 	isb	sy
 80118ac:	f3bf 8f4f 	dsb	sy
 80118b0:	61fb      	str	r3, [r7, #28]
}
 80118b2:	bf00      	nop
 80118b4:	e7fe      	b.n	80118b4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80118b6:	f7ff f9d7 	bl	8010c68 <vPortValidateInterruptPriority>
	__asm volatile
 80118ba:	f3ef 8211 	mrs	r2, BASEPRI
 80118be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118c2:	f383 8811 	msr	BASEPRI, r3
 80118c6:	f3bf 8f6f 	isb	sy
 80118ca:	f3bf 8f4f 	dsb	sy
 80118ce:	61ba      	str	r2, [r7, #24]
 80118d0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80118d2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80118d4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80118d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80118d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80118da:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80118dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80118de:	2b00      	cmp	r3, #0
 80118e0:	d02f      	beq.n	8011942 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80118e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80118e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80118e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80118ec:	68b9      	ldr	r1, [r7, #8]
 80118ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80118f0:	f000 f8d9 	bl	8011aa6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80118f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80118f6:	1e5a      	subs	r2, r3, #1
 80118f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80118fa:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80118fc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8011900:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011904:	d112      	bne.n	801192c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011908:	691b      	ldr	r3, [r3, #16]
 801190a:	2b00      	cmp	r3, #0
 801190c:	d016      	beq.n	801193c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801190e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011910:	3310      	adds	r3, #16
 8011912:	4618      	mov	r0, r3
 8011914:	f000 fe7c 	bl	8012610 <xTaskRemoveFromEventList>
 8011918:	4603      	mov	r3, r0
 801191a:	2b00      	cmp	r3, #0
 801191c:	d00e      	beq.n	801193c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 801191e:	687b      	ldr	r3, [r7, #4]
 8011920:	2b00      	cmp	r3, #0
 8011922:	d00b      	beq.n	801193c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	2201      	movs	r2, #1
 8011928:	601a      	str	r2, [r3, #0]
 801192a:	e007      	b.n	801193c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 801192c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011930:	3301      	adds	r3, #1
 8011932:	b2db      	uxtb	r3, r3
 8011934:	b25a      	sxtb	r2, r3
 8011936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011938:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 801193c:	2301      	movs	r3, #1
 801193e:	637b      	str	r3, [r7, #52]	; 0x34
 8011940:	e001      	b.n	8011946 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8011942:	2300      	movs	r3, #0
 8011944:	637b      	str	r3, [r7, #52]	; 0x34
 8011946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011948:	613b      	str	r3, [r7, #16]
	__asm volatile
 801194a:	693b      	ldr	r3, [r7, #16]
 801194c:	f383 8811 	msr	BASEPRI, r3
}
 8011950:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011952:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8011954:	4618      	mov	r0, r3
 8011956:	3738      	adds	r7, #56	; 0x38
 8011958:	46bd      	mov	sp, r7
 801195a:	bd80      	pop	{r7, pc}

0801195c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 801195c:	b580      	push	{r7, lr}
 801195e:	b084      	sub	sp, #16
 8011960:	af00      	add	r7, sp, #0
 8011962:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8011968:	68fb      	ldr	r3, [r7, #12]
 801196a:	2b00      	cmp	r3, #0
 801196c:	d10a      	bne.n	8011984 <vQueueDelete+0x28>
	__asm volatile
 801196e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011972:	f383 8811 	msr	BASEPRI, r3
 8011976:	f3bf 8f6f 	isb	sy
 801197a:	f3bf 8f4f 	dsb	sy
 801197e:	60bb      	str	r3, [r7, #8]
}
 8011980:	bf00      	nop
 8011982:	e7fe      	b.n	8011982 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8011984:	68f8      	ldr	r0, [r7, #12]
 8011986:	f000 f95f 	bl	8011c48 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 801198a:	68fb      	ldr	r3, [r7, #12]
 801198c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8011990:	2b00      	cmp	r3, #0
 8011992:	d102      	bne.n	801199a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8011994:	68f8      	ldr	r0, [r7, #12]
 8011996:	f7fe fd87 	bl	80104a8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 801199a:	bf00      	nop
 801199c:	3710      	adds	r7, #16
 801199e:	46bd      	mov	sp, r7
 80119a0:	bd80      	pop	{r7, pc}

080119a2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80119a2:	b480      	push	{r7}
 80119a4:	b085      	sub	sp, #20
 80119a6:	af00      	add	r7, sp, #0
 80119a8:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80119aa:	687b      	ldr	r3, [r7, #4]
 80119ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80119ae:	2b00      	cmp	r3, #0
 80119b0:	d006      	beq.n	80119c0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80119b2:	687b      	ldr	r3, [r7, #4]
 80119b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80119b6:	681b      	ldr	r3, [r3, #0]
 80119b8:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80119bc:	60fb      	str	r3, [r7, #12]
 80119be:	e001      	b.n	80119c4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80119c0:	2300      	movs	r3, #0
 80119c2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80119c4:	68fb      	ldr	r3, [r7, #12]
	}
 80119c6:	4618      	mov	r0, r3
 80119c8:	3714      	adds	r7, #20
 80119ca:	46bd      	mov	sp, r7
 80119cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119d0:	4770      	bx	lr

080119d2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80119d2:	b580      	push	{r7, lr}
 80119d4:	b086      	sub	sp, #24
 80119d6:	af00      	add	r7, sp, #0
 80119d8:	60f8      	str	r0, [r7, #12]
 80119da:	60b9      	str	r1, [r7, #8]
 80119dc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80119de:	2300      	movs	r3, #0
 80119e0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80119e2:	68fb      	ldr	r3, [r7, #12]
 80119e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80119e6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80119e8:	68fb      	ldr	r3, [r7, #12]
 80119ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80119ec:	2b00      	cmp	r3, #0
 80119ee:	d10d      	bne.n	8011a0c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80119f0:	68fb      	ldr	r3, [r7, #12]
 80119f2:	681b      	ldr	r3, [r3, #0]
 80119f4:	2b00      	cmp	r3, #0
 80119f6:	d14d      	bne.n	8011a94 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80119f8:	68fb      	ldr	r3, [r7, #12]
 80119fa:	689b      	ldr	r3, [r3, #8]
 80119fc:	4618      	mov	r0, r3
 80119fe:	f001 f84f 	bl	8012aa0 <xTaskPriorityDisinherit>
 8011a02:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8011a04:	68fb      	ldr	r3, [r7, #12]
 8011a06:	2200      	movs	r2, #0
 8011a08:	609a      	str	r2, [r3, #8]
 8011a0a:	e043      	b.n	8011a94 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	2b00      	cmp	r3, #0
 8011a10:	d119      	bne.n	8011a46 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8011a12:	68fb      	ldr	r3, [r7, #12]
 8011a14:	6858      	ldr	r0, [r3, #4]
 8011a16:	68fb      	ldr	r3, [r7, #12]
 8011a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011a1a:	461a      	mov	r2, r3
 8011a1c:	68b9      	ldr	r1, [r7, #8]
 8011a1e:	f002 fe24 	bl	801466a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8011a22:	68fb      	ldr	r3, [r7, #12]
 8011a24:	685a      	ldr	r2, [r3, #4]
 8011a26:	68fb      	ldr	r3, [r7, #12]
 8011a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011a2a:	441a      	add	r2, r3
 8011a2c:	68fb      	ldr	r3, [r7, #12]
 8011a2e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011a30:	68fb      	ldr	r3, [r7, #12]
 8011a32:	685a      	ldr	r2, [r3, #4]
 8011a34:	68fb      	ldr	r3, [r7, #12]
 8011a36:	689b      	ldr	r3, [r3, #8]
 8011a38:	429a      	cmp	r2, r3
 8011a3a:	d32b      	bcc.n	8011a94 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8011a3c:	68fb      	ldr	r3, [r7, #12]
 8011a3e:	681a      	ldr	r2, [r3, #0]
 8011a40:	68fb      	ldr	r3, [r7, #12]
 8011a42:	605a      	str	r2, [r3, #4]
 8011a44:	e026      	b.n	8011a94 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8011a46:	68fb      	ldr	r3, [r7, #12]
 8011a48:	68d8      	ldr	r0, [r3, #12]
 8011a4a:	68fb      	ldr	r3, [r7, #12]
 8011a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011a4e:	461a      	mov	r2, r3
 8011a50:	68b9      	ldr	r1, [r7, #8]
 8011a52:	f002 fe0a 	bl	801466a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8011a56:	68fb      	ldr	r3, [r7, #12]
 8011a58:	68da      	ldr	r2, [r3, #12]
 8011a5a:	68fb      	ldr	r3, [r7, #12]
 8011a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011a5e:	425b      	negs	r3, r3
 8011a60:	441a      	add	r2, r3
 8011a62:	68fb      	ldr	r3, [r7, #12]
 8011a64:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011a66:	68fb      	ldr	r3, [r7, #12]
 8011a68:	68da      	ldr	r2, [r3, #12]
 8011a6a:	68fb      	ldr	r3, [r7, #12]
 8011a6c:	681b      	ldr	r3, [r3, #0]
 8011a6e:	429a      	cmp	r2, r3
 8011a70:	d207      	bcs.n	8011a82 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8011a72:	68fb      	ldr	r3, [r7, #12]
 8011a74:	689a      	ldr	r2, [r3, #8]
 8011a76:	68fb      	ldr	r3, [r7, #12]
 8011a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011a7a:	425b      	negs	r3, r3
 8011a7c:	441a      	add	r2, r3
 8011a7e:	68fb      	ldr	r3, [r7, #12]
 8011a80:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8011a82:	687b      	ldr	r3, [r7, #4]
 8011a84:	2b02      	cmp	r3, #2
 8011a86:	d105      	bne.n	8011a94 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011a88:	693b      	ldr	r3, [r7, #16]
 8011a8a:	2b00      	cmp	r3, #0
 8011a8c:	d002      	beq.n	8011a94 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8011a8e:	693b      	ldr	r3, [r7, #16]
 8011a90:	3b01      	subs	r3, #1
 8011a92:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8011a94:	693b      	ldr	r3, [r7, #16]
 8011a96:	1c5a      	adds	r2, r3, #1
 8011a98:	68fb      	ldr	r3, [r7, #12]
 8011a9a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8011a9c:	697b      	ldr	r3, [r7, #20]
}
 8011a9e:	4618      	mov	r0, r3
 8011aa0:	3718      	adds	r7, #24
 8011aa2:	46bd      	mov	sp, r7
 8011aa4:	bd80      	pop	{r7, pc}

08011aa6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8011aa6:	b580      	push	{r7, lr}
 8011aa8:	b082      	sub	sp, #8
 8011aaa:	af00      	add	r7, sp, #0
 8011aac:	6078      	str	r0, [r7, #4]
 8011aae:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8011ab0:	687b      	ldr	r3, [r7, #4]
 8011ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011ab4:	2b00      	cmp	r3, #0
 8011ab6:	d018      	beq.n	8011aea <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8011ab8:	687b      	ldr	r3, [r7, #4]
 8011aba:	68da      	ldr	r2, [r3, #12]
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011ac0:	441a      	add	r2, r3
 8011ac2:	687b      	ldr	r3, [r7, #4]
 8011ac4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8011ac6:	687b      	ldr	r3, [r7, #4]
 8011ac8:	68da      	ldr	r2, [r3, #12]
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	689b      	ldr	r3, [r3, #8]
 8011ace:	429a      	cmp	r2, r3
 8011ad0:	d303      	bcc.n	8011ada <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8011ad2:	687b      	ldr	r3, [r7, #4]
 8011ad4:	681a      	ldr	r2, [r3, #0]
 8011ad6:	687b      	ldr	r3, [r7, #4]
 8011ad8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8011ada:	687b      	ldr	r3, [r7, #4]
 8011adc:	68d9      	ldr	r1, [r3, #12]
 8011ade:	687b      	ldr	r3, [r7, #4]
 8011ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011ae2:	461a      	mov	r2, r3
 8011ae4:	6838      	ldr	r0, [r7, #0]
 8011ae6:	f002 fdc0 	bl	801466a <memcpy>
	}
}
 8011aea:	bf00      	nop
 8011aec:	3708      	adds	r7, #8
 8011aee:	46bd      	mov	sp, r7
 8011af0:	bd80      	pop	{r7, pc}

08011af2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8011af2:	b580      	push	{r7, lr}
 8011af4:	b084      	sub	sp, #16
 8011af6:	af00      	add	r7, sp, #0
 8011af8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8011afa:	f7fe ffd3 	bl	8010aa4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8011afe:	687b      	ldr	r3, [r7, #4]
 8011b00:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011b04:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011b06:	e011      	b.n	8011b2c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011b08:	687b      	ldr	r3, [r7, #4]
 8011b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011b0c:	2b00      	cmp	r3, #0
 8011b0e:	d012      	beq.n	8011b36 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011b10:	687b      	ldr	r3, [r7, #4]
 8011b12:	3324      	adds	r3, #36	; 0x24
 8011b14:	4618      	mov	r0, r3
 8011b16:	f000 fd7b 	bl	8012610 <xTaskRemoveFromEventList>
 8011b1a:	4603      	mov	r3, r0
 8011b1c:	2b00      	cmp	r3, #0
 8011b1e:	d001      	beq.n	8011b24 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8011b20:	f000 fe52 	bl	80127c8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8011b24:	7bfb      	ldrb	r3, [r7, #15]
 8011b26:	3b01      	subs	r3, #1
 8011b28:	b2db      	uxtb	r3, r3
 8011b2a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011b2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011b30:	2b00      	cmp	r3, #0
 8011b32:	dce9      	bgt.n	8011b08 <prvUnlockQueue+0x16>
 8011b34:	e000      	b.n	8011b38 <prvUnlockQueue+0x46>
					break;
 8011b36:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8011b38:	687b      	ldr	r3, [r7, #4]
 8011b3a:	22ff      	movs	r2, #255	; 0xff
 8011b3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8011b40:	f7fe ffe0 	bl	8010b04 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8011b44:	f7fe ffae 	bl	8010aa4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8011b48:	687b      	ldr	r3, [r7, #4]
 8011b4a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011b4e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011b50:	e011      	b.n	8011b76 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011b52:	687b      	ldr	r3, [r7, #4]
 8011b54:	691b      	ldr	r3, [r3, #16]
 8011b56:	2b00      	cmp	r3, #0
 8011b58:	d012      	beq.n	8011b80 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011b5a:	687b      	ldr	r3, [r7, #4]
 8011b5c:	3310      	adds	r3, #16
 8011b5e:	4618      	mov	r0, r3
 8011b60:	f000 fd56 	bl	8012610 <xTaskRemoveFromEventList>
 8011b64:	4603      	mov	r3, r0
 8011b66:	2b00      	cmp	r3, #0
 8011b68:	d001      	beq.n	8011b6e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8011b6a:	f000 fe2d 	bl	80127c8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8011b6e:	7bbb      	ldrb	r3, [r7, #14]
 8011b70:	3b01      	subs	r3, #1
 8011b72:	b2db      	uxtb	r3, r3
 8011b74:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011b76:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011b7a:	2b00      	cmp	r3, #0
 8011b7c:	dce9      	bgt.n	8011b52 <prvUnlockQueue+0x60>
 8011b7e:	e000      	b.n	8011b82 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8011b80:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8011b82:	687b      	ldr	r3, [r7, #4]
 8011b84:	22ff      	movs	r2, #255	; 0xff
 8011b86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8011b8a:	f7fe ffbb 	bl	8010b04 <vPortExitCritical>
}
 8011b8e:	bf00      	nop
 8011b90:	3710      	adds	r7, #16
 8011b92:	46bd      	mov	sp, r7
 8011b94:	bd80      	pop	{r7, pc}

08011b96 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8011b96:	b580      	push	{r7, lr}
 8011b98:	b084      	sub	sp, #16
 8011b9a:	af00      	add	r7, sp, #0
 8011b9c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011b9e:	f7fe ff81 	bl	8010aa4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8011ba2:	687b      	ldr	r3, [r7, #4]
 8011ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011ba6:	2b00      	cmp	r3, #0
 8011ba8:	d102      	bne.n	8011bb0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8011baa:	2301      	movs	r3, #1
 8011bac:	60fb      	str	r3, [r7, #12]
 8011bae:	e001      	b.n	8011bb4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8011bb0:	2300      	movs	r3, #0
 8011bb2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8011bb4:	f7fe ffa6 	bl	8010b04 <vPortExitCritical>

	return xReturn;
 8011bb8:	68fb      	ldr	r3, [r7, #12]
}
 8011bba:	4618      	mov	r0, r3
 8011bbc:	3710      	adds	r7, #16
 8011bbe:	46bd      	mov	sp, r7
 8011bc0:	bd80      	pop	{r7, pc}

08011bc2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8011bc2:	b580      	push	{r7, lr}
 8011bc4:	b084      	sub	sp, #16
 8011bc6:	af00      	add	r7, sp, #0
 8011bc8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011bca:	f7fe ff6b 	bl	8010aa4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8011bce:	687b      	ldr	r3, [r7, #4]
 8011bd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011bd2:	687b      	ldr	r3, [r7, #4]
 8011bd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011bd6:	429a      	cmp	r2, r3
 8011bd8:	d102      	bne.n	8011be0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8011bda:	2301      	movs	r3, #1
 8011bdc:	60fb      	str	r3, [r7, #12]
 8011bde:	e001      	b.n	8011be4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8011be0:	2300      	movs	r3, #0
 8011be2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8011be4:	f7fe ff8e 	bl	8010b04 <vPortExitCritical>

	return xReturn;
 8011be8:	68fb      	ldr	r3, [r7, #12]
}
 8011bea:	4618      	mov	r0, r3
 8011bec:	3710      	adds	r7, #16
 8011bee:	46bd      	mov	sp, r7
 8011bf0:	bd80      	pop	{r7, pc}
	...

08011bf4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8011bf4:	b480      	push	{r7}
 8011bf6:	b085      	sub	sp, #20
 8011bf8:	af00      	add	r7, sp, #0
 8011bfa:	6078      	str	r0, [r7, #4]
 8011bfc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011bfe:	2300      	movs	r3, #0
 8011c00:	60fb      	str	r3, [r7, #12]
 8011c02:	e014      	b.n	8011c2e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8011c04:	4a0f      	ldr	r2, [pc, #60]	; (8011c44 <vQueueAddToRegistry+0x50>)
 8011c06:	68fb      	ldr	r3, [r7, #12]
 8011c08:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8011c0c:	2b00      	cmp	r3, #0
 8011c0e:	d10b      	bne.n	8011c28 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8011c10:	490c      	ldr	r1, [pc, #48]	; (8011c44 <vQueueAddToRegistry+0x50>)
 8011c12:	68fb      	ldr	r3, [r7, #12]
 8011c14:	683a      	ldr	r2, [r7, #0]
 8011c16:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8011c1a:	4a0a      	ldr	r2, [pc, #40]	; (8011c44 <vQueueAddToRegistry+0x50>)
 8011c1c:	68fb      	ldr	r3, [r7, #12]
 8011c1e:	00db      	lsls	r3, r3, #3
 8011c20:	4413      	add	r3, r2
 8011c22:	687a      	ldr	r2, [r7, #4]
 8011c24:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8011c26:	e006      	b.n	8011c36 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011c28:	68fb      	ldr	r3, [r7, #12]
 8011c2a:	3301      	adds	r3, #1
 8011c2c:	60fb      	str	r3, [r7, #12]
 8011c2e:	68fb      	ldr	r3, [r7, #12]
 8011c30:	2b07      	cmp	r3, #7
 8011c32:	d9e7      	bls.n	8011c04 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8011c34:	bf00      	nop
 8011c36:	bf00      	nop
 8011c38:	3714      	adds	r7, #20
 8011c3a:	46bd      	mov	sp, r7
 8011c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c40:	4770      	bx	lr
 8011c42:	bf00      	nop
 8011c44:	24004f98 	.word	0x24004f98

08011c48 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8011c48:	b480      	push	{r7}
 8011c4a:	b085      	sub	sp, #20
 8011c4c:	af00      	add	r7, sp, #0
 8011c4e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011c50:	2300      	movs	r3, #0
 8011c52:	60fb      	str	r3, [r7, #12]
 8011c54:	e016      	b.n	8011c84 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8011c56:	4a10      	ldr	r2, [pc, #64]	; (8011c98 <vQueueUnregisterQueue+0x50>)
 8011c58:	68fb      	ldr	r3, [r7, #12]
 8011c5a:	00db      	lsls	r3, r3, #3
 8011c5c:	4413      	add	r3, r2
 8011c5e:	685b      	ldr	r3, [r3, #4]
 8011c60:	687a      	ldr	r2, [r7, #4]
 8011c62:	429a      	cmp	r2, r3
 8011c64:	d10b      	bne.n	8011c7e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8011c66:	4a0c      	ldr	r2, [pc, #48]	; (8011c98 <vQueueUnregisterQueue+0x50>)
 8011c68:	68fb      	ldr	r3, [r7, #12]
 8011c6a:	2100      	movs	r1, #0
 8011c6c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8011c70:	4a09      	ldr	r2, [pc, #36]	; (8011c98 <vQueueUnregisterQueue+0x50>)
 8011c72:	68fb      	ldr	r3, [r7, #12]
 8011c74:	00db      	lsls	r3, r3, #3
 8011c76:	4413      	add	r3, r2
 8011c78:	2200      	movs	r2, #0
 8011c7a:	605a      	str	r2, [r3, #4]
				break;
 8011c7c:	e006      	b.n	8011c8c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011c7e:	68fb      	ldr	r3, [r7, #12]
 8011c80:	3301      	adds	r3, #1
 8011c82:	60fb      	str	r3, [r7, #12]
 8011c84:	68fb      	ldr	r3, [r7, #12]
 8011c86:	2b07      	cmp	r3, #7
 8011c88:	d9e5      	bls.n	8011c56 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8011c8a:	bf00      	nop
 8011c8c:	bf00      	nop
 8011c8e:	3714      	adds	r7, #20
 8011c90:	46bd      	mov	sp, r7
 8011c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c96:	4770      	bx	lr
 8011c98:	24004f98 	.word	0x24004f98

08011c9c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8011c9c:	b580      	push	{r7, lr}
 8011c9e:	b086      	sub	sp, #24
 8011ca0:	af00      	add	r7, sp, #0
 8011ca2:	60f8      	str	r0, [r7, #12]
 8011ca4:	60b9      	str	r1, [r7, #8]
 8011ca6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8011ca8:	68fb      	ldr	r3, [r7, #12]
 8011caa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8011cac:	f7fe fefa 	bl	8010aa4 <vPortEnterCritical>
 8011cb0:	697b      	ldr	r3, [r7, #20]
 8011cb2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011cb6:	b25b      	sxtb	r3, r3
 8011cb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011cbc:	d103      	bne.n	8011cc6 <vQueueWaitForMessageRestricted+0x2a>
 8011cbe:	697b      	ldr	r3, [r7, #20]
 8011cc0:	2200      	movs	r2, #0
 8011cc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011cc6:	697b      	ldr	r3, [r7, #20]
 8011cc8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011ccc:	b25b      	sxtb	r3, r3
 8011cce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011cd2:	d103      	bne.n	8011cdc <vQueueWaitForMessageRestricted+0x40>
 8011cd4:	697b      	ldr	r3, [r7, #20]
 8011cd6:	2200      	movs	r2, #0
 8011cd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011cdc:	f7fe ff12 	bl	8010b04 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8011ce0:	697b      	ldr	r3, [r7, #20]
 8011ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011ce4:	2b00      	cmp	r3, #0
 8011ce6:	d106      	bne.n	8011cf6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8011ce8:	697b      	ldr	r3, [r7, #20]
 8011cea:	3324      	adds	r3, #36	; 0x24
 8011cec:	687a      	ldr	r2, [r7, #4]
 8011cee:	68b9      	ldr	r1, [r7, #8]
 8011cf0:	4618      	mov	r0, r3
 8011cf2:	f000 fc61 	bl	80125b8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8011cf6:	6978      	ldr	r0, [r7, #20]
 8011cf8:	f7ff fefb 	bl	8011af2 <prvUnlockQueue>
	}
 8011cfc:	bf00      	nop
 8011cfe:	3718      	adds	r7, #24
 8011d00:	46bd      	mov	sp, r7
 8011d02:	bd80      	pop	{r7, pc}

08011d04 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8011d04:	b580      	push	{r7, lr}
 8011d06:	b08e      	sub	sp, #56	; 0x38
 8011d08:	af04      	add	r7, sp, #16
 8011d0a:	60f8      	str	r0, [r7, #12]
 8011d0c:	60b9      	str	r1, [r7, #8]
 8011d0e:	607a      	str	r2, [r7, #4]
 8011d10:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8011d12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011d14:	2b00      	cmp	r3, #0
 8011d16:	d10a      	bne.n	8011d2e <xTaskCreateStatic+0x2a>
	__asm volatile
 8011d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d1c:	f383 8811 	msr	BASEPRI, r3
 8011d20:	f3bf 8f6f 	isb	sy
 8011d24:	f3bf 8f4f 	dsb	sy
 8011d28:	623b      	str	r3, [r7, #32]
}
 8011d2a:	bf00      	nop
 8011d2c:	e7fe      	b.n	8011d2c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8011d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d30:	2b00      	cmp	r3, #0
 8011d32:	d10a      	bne.n	8011d4a <xTaskCreateStatic+0x46>
	__asm volatile
 8011d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d38:	f383 8811 	msr	BASEPRI, r3
 8011d3c:	f3bf 8f6f 	isb	sy
 8011d40:	f3bf 8f4f 	dsb	sy
 8011d44:	61fb      	str	r3, [r7, #28]
}
 8011d46:	bf00      	nop
 8011d48:	e7fe      	b.n	8011d48 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8011d4a:	23a8      	movs	r3, #168	; 0xa8
 8011d4c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8011d4e:	693b      	ldr	r3, [r7, #16]
 8011d50:	2ba8      	cmp	r3, #168	; 0xa8
 8011d52:	d00a      	beq.n	8011d6a <xTaskCreateStatic+0x66>
	__asm volatile
 8011d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d58:	f383 8811 	msr	BASEPRI, r3
 8011d5c:	f3bf 8f6f 	isb	sy
 8011d60:	f3bf 8f4f 	dsb	sy
 8011d64:	61bb      	str	r3, [r7, #24]
}
 8011d66:	bf00      	nop
 8011d68:	e7fe      	b.n	8011d68 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8011d6a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8011d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d6e:	2b00      	cmp	r3, #0
 8011d70:	d01e      	beq.n	8011db0 <xTaskCreateStatic+0xac>
 8011d72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011d74:	2b00      	cmp	r3, #0
 8011d76:	d01b      	beq.n	8011db0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8011d78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d7a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8011d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d7e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011d80:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8011d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d84:	2202      	movs	r2, #2
 8011d86:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8011d8a:	2300      	movs	r3, #0
 8011d8c:	9303      	str	r3, [sp, #12]
 8011d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d90:	9302      	str	r3, [sp, #8]
 8011d92:	f107 0314 	add.w	r3, r7, #20
 8011d96:	9301      	str	r3, [sp, #4]
 8011d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d9a:	9300      	str	r3, [sp, #0]
 8011d9c:	683b      	ldr	r3, [r7, #0]
 8011d9e:	687a      	ldr	r2, [r7, #4]
 8011da0:	68b9      	ldr	r1, [r7, #8]
 8011da2:	68f8      	ldr	r0, [r7, #12]
 8011da4:	f000 f850 	bl	8011e48 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011da8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011daa:	f000 f8f3 	bl	8011f94 <prvAddNewTaskToReadyList>
 8011dae:	e001      	b.n	8011db4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8011db0:	2300      	movs	r3, #0
 8011db2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8011db4:	697b      	ldr	r3, [r7, #20]
	}
 8011db6:	4618      	mov	r0, r3
 8011db8:	3728      	adds	r7, #40	; 0x28
 8011dba:	46bd      	mov	sp, r7
 8011dbc:	bd80      	pop	{r7, pc}

08011dbe <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8011dbe:	b580      	push	{r7, lr}
 8011dc0:	b08c      	sub	sp, #48	; 0x30
 8011dc2:	af04      	add	r7, sp, #16
 8011dc4:	60f8      	str	r0, [r7, #12]
 8011dc6:	60b9      	str	r1, [r7, #8]
 8011dc8:	603b      	str	r3, [r7, #0]
 8011dca:	4613      	mov	r3, r2
 8011dcc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8011dce:	88fb      	ldrh	r3, [r7, #6]
 8011dd0:	009b      	lsls	r3, r3, #2
 8011dd2:	4618      	mov	r0, r3
 8011dd4:	f7fe fa9c 	bl	8010310 <pvPortMalloc>
 8011dd8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8011dda:	697b      	ldr	r3, [r7, #20]
 8011ddc:	2b00      	cmp	r3, #0
 8011dde:	d00e      	beq.n	8011dfe <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8011de0:	20a8      	movs	r0, #168	; 0xa8
 8011de2:	f7fe fa95 	bl	8010310 <pvPortMalloc>
 8011de6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8011de8:	69fb      	ldr	r3, [r7, #28]
 8011dea:	2b00      	cmp	r3, #0
 8011dec:	d003      	beq.n	8011df6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8011dee:	69fb      	ldr	r3, [r7, #28]
 8011df0:	697a      	ldr	r2, [r7, #20]
 8011df2:	631a      	str	r2, [r3, #48]	; 0x30
 8011df4:	e005      	b.n	8011e02 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8011df6:	6978      	ldr	r0, [r7, #20]
 8011df8:	f7fe fb56 	bl	80104a8 <vPortFree>
 8011dfc:	e001      	b.n	8011e02 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8011dfe:	2300      	movs	r3, #0
 8011e00:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8011e02:	69fb      	ldr	r3, [r7, #28]
 8011e04:	2b00      	cmp	r3, #0
 8011e06:	d017      	beq.n	8011e38 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8011e08:	69fb      	ldr	r3, [r7, #28]
 8011e0a:	2200      	movs	r2, #0
 8011e0c:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8011e10:	88fa      	ldrh	r2, [r7, #6]
 8011e12:	2300      	movs	r3, #0
 8011e14:	9303      	str	r3, [sp, #12]
 8011e16:	69fb      	ldr	r3, [r7, #28]
 8011e18:	9302      	str	r3, [sp, #8]
 8011e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e1c:	9301      	str	r3, [sp, #4]
 8011e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e20:	9300      	str	r3, [sp, #0]
 8011e22:	683b      	ldr	r3, [r7, #0]
 8011e24:	68b9      	ldr	r1, [r7, #8]
 8011e26:	68f8      	ldr	r0, [r7, #12]
 8011e28:	f000 f80e 	bl	8011e48 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011e2c:	69f8      	ldr	r0, [r7, #28]
 8011e2e:	f000 f8b1 	bl	8011f94 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8011e32:	2301      	movs	r3, #1
 8011e34:	61bb      	str	r3, [r7, #24]
 8011e36:	e002      	b.n	8011e3e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8011e38:	f04f 33ff 	mov.w	r3, #4294967295
 8011e3c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8011e3e:	69bb      	ldr	r3, [r7, #24]
	}
 8011e40:	4618      	mov	r0, r3
 8011e42:	3720      	adds	r7, #32
 8011e44:	46bd      	mov	sp, r7
 8011e46:	bd80      	pop	{r7, pc}

08011e48 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8011e48:	b580      	push	{r7, lr}
 8011e4a:	b088      	sub	sp, #32
 8011e4c:	af00      	add	r7, sp, #0
 8011e4e:	60f8      	str	r0, [r7, #12]
 8011e50:	60b9      	str	r1, [r7, #8]
 8011e52:	607a      	str	r2, [r7, #4]
 8011e54:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8011e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e58:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8011e5a:	687b      	ldr	r3, [r7, #4]
 8011e5c:	009b      	lsls	r3, r3, #2
 8011e5e:	461a      	mov	r2, r3
 8011e60:	21a5      	movs	r1, #165	; 0xa5
 8011e62:	f002 fb1c 	bl	801449e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8011e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011e6a:	6879      	ldr	r1, [r7, #4]
 8011e6c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8011e70:	440b      	add	r3, r1
 8011e72:	009b      	lsls	r3, r3, #2
 8011e74:	4413      	add	r3, r2
 8011e76:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8011e78:	69bb      	ldr	r3, [r7, #24]
 8011e7a:	f023 0307 	bic.w	r3, r3, #7
 8011e7e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8011e80:	69bb      	ldr	r3, [r7, #24]
 8011e82:	f003 0307 	and.w	r3, r3, #7
 8011e86:	2b00      	cmp	r3, #0
 8011e88:	d00a      	beq.n	8011ea0 <prvInitialiseNewTask+0x58>
	__asm volatile
 8011e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e8e:	f383 8811 	msr	BASEPRI, r3
 8011e92:	f3bf 8f6f 	isb	sy
 8011e96:	f3bf 8f4f 	dsb	sy
 8011e9a:	617b      	str	r3, [r7, #20]
}
 8011e9c:	bf00      	nop
 8011e9e:	e7fe      	b.n	8011e9e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8011ea0:	68bb      	ldr	r3, [r7, #8]
 8011ea2:	2b00      	cmp	r3, #0
 8011ea4:	d01f      	beq.n	8011ee6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8011ea6:	2300      	movs	r3, #0
 8011ea8:	61fb      	str	r3, [r7, #28]
 8011eaa:	e012      	b.n	8011ed2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8011eac:	68ba      	ldr	r2, [r7, #8]
 8011eae:	69fb      	ldr	r3, [r7, #28]
 8011eb0:	4413      	add	r3, r2
 8011eb2:	7819      	ldrb	r1, [r3, #0]
 8011eb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011eb6:	69fb      	ldr	r3, [r7, #28]
 8011eb8:	4413      	add	r3, r2
 8011eba:	3334      	adds	r3, #52	; 0x34
 8011ebc:	460a      	mov	r2, r1
 8011ebe:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8011ec0:	68ba      	ldr	r2, [r7, #8]
 8011ec2:	69fb      	ldr	r3, [r7, #28]
 8011ec4:	4413      	add	r3, r2
 8011ec6:	781b      	ldrb	r3, [r3, #0]
 8011ec8:	2b00      	cmp	r3, #0
 8011eca:	d006      	beq.n	8011eda <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8011ecc:	69fb      	ldr	r3, [r7, #28]
 8011ece:	3301      	adds	r3, #1
 8011ed0:	61fb      	str	r3, [r7, #28]
 8011ed2:	69fb      	ldr	r3, [r7, #28]
 8011ed4:	2b0f      	cmp	r3, #15
 8011ed6:	d9e9      	bls.n	8011eac <prvInitialiseNewTask+0x64>
 8011ed8:	e000      	b.n	8011edc <prvInitialiseNewTask+0x94>
			{
				break;
 8011eda:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8011edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ede:	2200      	movs	r2, #0
 8011ee0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8011ee4:	e003      	b.n	8011eee <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8011ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ee8:	2200      	movs	r2, #0
 8011eea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8011eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ef0:	2b37      	cmp	r3, #55	; 0x37
 8011ef2:	d901      	bls.n	8011ef8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8011ef4:	2337      	movs	r3, #55	; 0x37
 8011ef6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8011ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011efa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011efc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8011efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011f02:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8011f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f06:	2200      	movs	r2, #0
 8011f08:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8011f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f0c:	3304      	adds	r3, #4
 8011f0e:	4618      	mov	r0, r3
 8011f10:	f7fe fc08 	bl	8010724 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8011f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f16:	3318      	adds	r3, #24
 8011f18:	4618      	mov	r0, r3
 8011f1a:	f7fe fc03 	bl	8010724 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8011f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011f22:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f26:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8011f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f2c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8011f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011f32:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8011f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f36:	2200      	movs	r2, #0
 8011f38:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8011f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f3e:	2200      	movs	r2, #0
 8011f40:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8011f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f46:	3354      	adds	r3, #84	; 0x54
 8011f48:	224c      	movs	r2, #76	; 0x4c
 8011f4a:	2100      	movs	r1, #0
 8011f4c:	4618      	mov	r0, r3
 8011f4e:	f002 faa6 	bl	801449e <memset>
 8011f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f54:	4a0c      	ldr	r2, [pc, #48]	; (8011f88 <prvInitialiseNewTask+0x140>)
 8011f56:	659a      	str	r2, [r3, #88]	; 0x58
 8011f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f5a:	4a0c      	ldr	r2, [pc, #48]	; (8011f8c <prvInitialiseNewTask+0x144>)
 8011f5c:	65da      	str	r2, [r3, #92]	; 0x5c
 8011f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f60:	4a0b      	ldr	r2, [pc, #44]	; (8011f90 <prvInitialiseNewTask+0x148>)
 8011f62:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8011f64:	683a      	ldr	r2, [r7, #0]
 8011f66:	68f9      	ldr	r1, [r7, #12]
 8011f68:	69b8      	ldr	r0, [r7, #24]
 8011f6a:	f7fe fc6f 	bl	801084c <pxPortInitialiseStack>
 8011f6e:	4602      	mov	r2, r0
 8011f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f72:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8011f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f76:	2b00      	cmp	r3, #0
 8011f78:	d002      	beq.n	8011f80 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8011f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011f7e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011f80:	bf00      	nop
 8011f82:	3720      	adds	r7, #32
 8011f84:	46bd      	mov	sp, r7
 8011f86:	bd80      	pop	{r7, pc}
 8011f88:	2400560c 	.word	0x2400560c
 8011f8c:	24005674 	.word	0x24005674
 8011f90:	240056dc 	.word	0x240056dc

08011f94 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8011f94:	b580      	push	{r7, lr}
 8011f96:	b082      	sub	sp, #8
 8011f98:	af00      	add	r7, sp, #0
 8011f9a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8011f9c:	f7fe fd82 	bl	8010aa4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8011fa0:	4b2d      	ldr	r3, [pc, #180]	; (8012058 <prvAddNewTaskToReadyList+0xc4>)
 8011fa2:	681b      	ldr	r3, [r3, #0]
 8011fa4:	3301      	adds	r3, #1
 8011fa6:	4a2c      	ldr	r2, [pc, #176]	; (8012058 <prvAddNewTaskToReadyList+0xc4>)
 8011fa8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8011faa:	4b2c      	ldr	r3, [pc, #176]	; (801205c <prvAddNewTaskToReadyList+0xc8>)
 8011fac:	681b      	ldr	r3, [r3, #0]
 8011fae:	2b00      	cmp	r3, #0
 8011fb0:	d109      	bne.n	8011fc6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8011fb2:	4a2a      	ldr	r2, [pc, #168]	; (801205c <prvAddNewTaskToReadyList+0xc8>)
 8011fb4:	687b      	ldr	r3, [r7, #4]
 8011fb6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8011fb8:	4b27      	ldr	r3, [pc, #156]	; (8012058 <prvAddNewTaskToReadyList+0xc4>)
 8011fba:	681b      	ldr	r3, [r3, #0]
 8011fbc:	2b01      	cmp	r3, #1
 8011fbe:	d110      	bne.n	8011fe2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8011fc0:	f000 fc26 	bl	8012810 <prvInitialiseTaskLists>
 8011fc4:	e00d      	b.n	8011fe2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8011fc6:	4b26      	ldr	r3, [pc, #152]	; (8012060 <prvAddNewTaskToReadyList+0xcc>)
 8011fc8:	681b      	ldr	r3, [r3, #0]
 8011fca:	2b00      	cmp	r3, #0
 8011fcc:	d109      	bne.n	8011fe2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8011fce:	4b23      	ldr	r3, [pc, #140]	; (801205c <prvAddNewTaskToReadyList+0xc8>)
 8011fd0:	681b      	ldr	r3, [r3, #0]
 8011fd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011fd4:	687b      	ldr	r3, [r7, #4]
 8011fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011fd8:	429a      	cmp	r2, r3
 8011fda:	d802      	bhi.n	8011fe2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8011fdc:	4a1f      	ldr	r2, [pc, #124]	; (801205c <prvAddNewTaskToReadyList+0xc8>)
 8011fde:	687b      	ldr	r3, [r7, #4]
 8011fe0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8011fe2:	4b20      	ldr	r3, [pc, #128]	; (8012064 <prvAddNewTaskToReadyList+0xd0>)
 8011fe4:	681b      	ldr	r3, [r3, #0]
 8011fe6:	3301      	adds	r3, #1
 8011fe8:	4a1e      	ldr	r2, [pc, #120]	; (8012064 <prvAddNewTaskToReadyList+0xd0>)
 8011fea:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8011fec:	4b1d      	ldr	r3, [pc, #116]	; (8012064 <prvAddNewTaskToReadyList+0xd0>)
 8011fee:	681a      	ldr	r2, [r3, #0]
 8011ff0:	687b      	ldr	r3, [r7, #4]
 8011ff2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8011ff4:	687b      	ldr	r3, [r7, #4]
 8011ff6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011ff8:	4b1b      	ldr	r3, [pc, #108]	; (8012068 <prvAddNewTaskToReadyList+0xd4>)
 8011ffa:	681b      	ldr	r3, [r3, #0]
 8011ffc:	429a      	cmp	r2, r3
 8011ffe:	d903      	bls.n	8012008 <prvAddNewTaskToReadyList+0x74>
 8012000:	687b      	ldr	r3, [r7, #4]
 8012002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012004:	4a18      	ldr	r2, [pc, #96]	; (8012068 <prvAddNewTaskToReadyList+0xd4>)
 8012006:	6013      	str	r3, [r2, #0]
 8012008:	687b      	ldr	r3, [r7, #4]
 801200a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801200c:	4613      	mov	r3, r2
 801200e:	009b      	lsls	r3, r3, #2
 8012010:	4413      	add	r3, r2
 8012012:	009b      	lsls	r3, r3, #2
 8012014:	4a15      	ldr	r2, [pc, #84]	; (801206c <prvAddNewTaskToReadyList+0xd8>)
 8012016:	441a      	add	r2, r3
 8012018:	687b      	ldr	r3, [r7, #4]
 801201a:	3304      	adds	r3, #4
 801201c:	4619      	mov	r1, r3
 801201e:	4610      	mov	r0, r2
 8012020:	f7fe fb8d 	bl	801073e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8012024:	f7fe fd6e 	bl	8010b04 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8012028:	4b0d      	ldr	r3, [pc, #52]	; (8012060 <prvAddNewTaskToReadyList+0xcc>)
 801202a:	681b      	ldr	r3, [r3, #0]
 801202c:	2b00      	cmp	r3, #0
 801202e:	d00e      	beq.n	801204e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8012030:	4b0a      	ldr	r3, [pc, #40]	; (801205c <prvAddNewTaskToReadyList+0xc8>)
 8012032:	681b      	ldr	r3, [r3, #0]
 8012034:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012036:	687b      	ldr	r3, [r7, #4]
 8012038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801203a:	429a      	cmp	r2, r3
 801203c:	d207      	bcs.n	801204e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801203e:	4b0c      	ldr	r3, [pc, #48]	; (8012070 <prvAddNewTaskToReadyList+0xdc>)
 8012040:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012044:	601a      	str	r2, [r3, #0]
 8012046:	f3bf 8f4f 	dsb	sy
 801204a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801204e:	bf00      	nop
 8012050:	3708      	adds	r7, #8
 8012052:	46bd      	mov	sp, r7
 8012054:	bd80      	pop	{r7, pc}
 8012056:	bf00      	nop
 8012058:	240054ac 	.word	0x240054ac
 801205c:	24004fd8 	.word	0x24004fd8
 8012060:	240054b8 	.word	0x240054b8
 8012064:	240054c8 	.word	0x240054c8
 8012068:	240054b4 	.word	0x240054b4
 801206c:	24004fdc 	.word	0x24004fdc
 8012070:	e000ed04 	.word	0xe000ed04

08012074 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8012074:	b580      	push	{r7, lr}
 8012076:	b084      	sub	sp, #16
 8012078:	af00      	add	r7, sp, #0
 801207a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 801207c:	2300      	movs	r3, #0
 801207e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8012080:	687b      	ldr	r3, [r7, #4]
 8012082:	2b00      	cmp	r3, #0
 8012084:	d017      	beq.n	80120b6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8012086:	4b13      	ldr	r3, [pc, #76]	; (80120d4 <vTaskDelay+0x60>)
 8012088:	681b      	ldr	r3, [r3, #0]
 801208a:	2b00      	cmp	r3, #0
 801208c:	d00a      	beq.n	80120a4 <vTaskDelay+0x30>
	__asm volatile
 801208e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012092:	f383 8811 	msr	BASEPRI, r3
 8012096:	f3bf 8f6f 	isb	sy
 801209a:	f3bf 8f4f 	dsb	sy
 801209e:	60bb      	str	r3, [r7, #8]
}
 80120a0:	bf00      	nop
 80120a2:	e7fe      	b.n	80120a2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80120a4:	f000 f88a 	bl	80121bc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80120a8:	2100      	movs	r1, #0
 80120aa:	6878      	ldr	r0, [r7, #4]
 80120ac:	f000 fdfc 	bl	8012ca8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80120b0:	f000 f892 	bl	80121d8 <xTaskResumeAll>
 80120b4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80120b6:	68fb      	ldr	r3, [r7, #12]
 80120b8:	2b00      	cmp	r3, #0
 80120ba:	d107      	bne.n	80120cc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80120bc:	4b06      	ldr	r3, [pc, #24]	; (80120d8 <vTaskDelay+0x64>)
 80120be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80120c2:	601a      	str	r2, [r3, #0]
 80120c4:	f3bf 8f4f 	dsb	sy
 80120c8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80120cc:	bf00      	nop
 80120ce:	3710      	adds	r7, #16
 80120d0:	46bd      	mov	sp, r7
 80120d2:	bd80      	pop	{r7, pc}
 80120d4:	240054d4 	.word	0x240054d4
 80120d8:	e000ed04 	.word	0xe000ed04

080120dc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80120dc:	b580      	push	{r7, lr}
 80120de:	b08a      	sub	sp, #40	; 0x28
 80120e0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80120e2:	2300      	movs	r3, #0
 80120e4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80120e6:	2300      	movs	r3, #0
 80120e8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80120ea:	463a      	mov	r2, r7
 80120ec:	1d39      	adds	r1, r7, #4
 80120ee:	f107 0308 	add.w	r3, r7, #8
 80120f2:	4618      	mov	r0, r3
 80120f4:	f7fe f8d8 	bl	80102a8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80120f8:	6839      	ldr	r1, [r7, #0]
 80120fa:	687b      	ldr	r3, [r7, #4]
 80120fc:	68ba      	ldr	r2, [r7, #8]
 80120fe:	9202      	str	r2, [sp, #8]
 8012100:	9301      	str	r3, [sp, #4]
 8012102:	2300      	movs	r3, #0
 8012104:	9300      	str	r3, [sp, #0]
 8012106:	2300      	movs	r3, #0
 8012108:	460a      	mov	r2, r1
 801210a:	4924      	ldr	r1, [pc, #144]	; (801219c <vTaskStartScheduler+0xc0>)
 801210c:	4824      	ldr	r0, [pc, #144]	; (80121a0 <vTaskStartScheduler+0xc4>)
 801210e:	f7ff fdf9 	bl	8011d04 <xTaskCreateStatic>
 8012112:	4603      	mov	r3, r0
 8012114:	4a23      	ldr	r2, [pc, #140]	; (80121a4 <vTaskStartScheduler+0xc8>)
 8012116:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8012118:	4b22      	ldr	r3, [pc, #136]	; (80121a4 <vTaskStartScheduler+0xc8>)
 801211a:	681b      	ldr	r3, [r3, #0]
 801211c:	2b00      	cmp	r3, #0
 801211e:	d002      	beq.n	8012126 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8012120:	2301      	movs	r3, #1
 8012122:	617b      	str	r3, [r7, #20]
 8012124:	e001      	b.n	801212a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8012126:	2300      	movs	r3, #0
 8012128:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801212a:	697b      	ldr	r3, [r7, #20]
 801212c:	2b01      	cmp	r3, #1
 801212e:	d102      	bne.n	8012136 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8012130:	f000 fe0e 	bl	8012d50 <xTimerCreateTimerTask>
 8012134:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8012136:	697b      	ldr	r3, [r7, #20]
 8012138:	2b01      	cmp	r3, #1
 801213a:	d11b      	bne.n	8012174 <vTaskStartScheduler+0x98>
	__asm volatile
 801213c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012140:	f383 8811 	msr	BASEPRI, r3
 8012144:	f3bf 8f6f 	isb	sy
 8012148:	f3bf 8f4f 	dsb	sy
 801214c:	613b      	str	r3, [r7, #16]
}
 801214e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8012150:	4b15      	ldr	r3, [pc, #84]	; (80121a8 <vTaskStartScheduler+0xcc>)
 8012152:	681b      	ldr	r3, [r3, #0]
 8012154:	3354      	adds	r3, #84	; 0x54
 8012156:	4a15      	ldr	r2, [pc, #84]	; (80121ac <vTaskStartScheduler+0xd0>)
 8012158:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801215a:	4b15      	ldr	r3, [pc, #84]	; (80121b0 <vTaskStartScheduler+0xd4>)
 801215c:	f04f 32ff 	mov.w	r2, #4294967295
 8012160:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8012162:	4b14      	ldr	r3, [pc, #80]	; (80121b4 <vTaskStartScheduler+0xd8>)
 8012164:	2201      	movs	r2, #1
 8012166:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8012168:	4b13      	ldr	r3, [pc, #76]	; (80121b8 <vTaskStartScheduler+0xdc>)
 801216a:	2200      	movs	r2, #0
 801216c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801216e:	f7fe fbf7 	bl	8010960 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8012172:	e00e      	b.n	8012192 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8012174:	697b      	ldr	r3, [r7, #20]
 8012176:	f1b3 3fff 	cmp.w	r3, #4294967295
 801217a:	d10a      	bne.n	8012192 <vTaskStartScheduler+0xb6>
	__asm volatile
 801217c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012180:	f383 8811 	msr	BASEPRI, r3
 8012184:	f3bf 8f6f 	isb	sy
 8012188:	f3bf 8f4f 	dsb	sy
 801218c:	60fb      	str	r3, [r7, #12]
}
 801218e:	bf00      	nop
 8012190:	e7fe      	b.n	8012190 <vTaskStartScheduler+0xb4>
}
 8012192:	bf00      	nop
 8012194:	3718      	adds	r7, #24
 8012196:	46bd      	mov	sp, r7
 8012198:	bd80      	pop	{r7, pc}
 801219a:	bf00      	nop
 801219c:	08017b98 	.word	0x08017b98
 80121a0:	080127e1 	.word	0x080127e1
 80121a4:	240054d0 	.word	0x240054d0
 80121a8:	24004fd8 	.word	0x24004fd8
 80121ac:	2400006c 	.word	0x2400006c
 80121b0:	240054cc 	.word	0x240054cc
 80121b4:	240054b8 	.word	0x240054b8
 80121b8:	240054b0 	.word	0x240054b0

080121bc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80121bc:	b480      	push	{r7}
 80121be:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80121c0:	4b04      	ldr	r3, [pc, #16]	; (80121d4 <vTaskSuspendAll+0x18>)
 80121c2:	681b      	ldr	r3, [r3, #0]
 80121c4:	3301      	adds	r3, #1
 80121c6:	4a03      	ldr	r2, [pc, #12]	; (80121d4 <vTaskSuspendAll+0x18>)
 80121c8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80121ca:	bf00      	nop
 80121cc:	46bd      	mov	sp, r7
 80121ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121d2:	4770      	bx	lr
 80121d4:	240054d4 	.word	0x240054d4

080121d8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80121d8:	b580      	push	{r7, lr}
 80121da:	b084      	sub	sp, #16
 80121dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80121de:	2300      	movs	r3, #0
 80121e0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80121e2:	2300      	movs	r3, #0
 80121e4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80121e6:	4b42      	ldr	r3, [pc, #264]	; (80122f0 <xTaskResumeAll+0x118>)
 80121e8:	681b      	ldr	r3, [r3, #0]
 80121ea:	2b00      	cmp	r3, #0
 80121ec:	d10a      	bne.n	8012204 <xTaskResumeAll+0x2c>
	__asm volatile
 80121ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121f2:	f383 8811 	msr	BASEPRI, r3
 80121f6:	f3bf 8f6f 	isb	sy
 80121fa:	f3bf 8f4f 	dsb	sy
 80121fe:	603b      	str	r3, [r7, #0]
}
 8012200:	bf00      	nop
 8012202:	e7fe      	b.n	8012202 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8012204:	f7fe fc4e 	bl	8010aa4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8012208:	4b39      	ldr	r3, [pc, #228]	; (80122f0 <xTaskResumeAll+0x118>)
 801220a:	681b      	ldr	r3, [r3, #0]
 801220c:	3b01      	subs	r3, #1
 801220e:	4a38      	ldr	r2, [pc, #224]	; (80122f0 <xTaskResumeAll+0x118>)
 8012210:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012212:	4b37      	ldr	r3, [pc, #220]	; (80122f0 <xTaskResumeAll+0x118>)
 8012214:	681b      	ldr	r3, [r3, #0]
 8012216:	2b00      	cmp	r3, #0
 8012218:	d162      	bne.n	80122e0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801221a:	4b36      	ldr	r3, [pc, #216]	; (80122f4 <xTaskResumeAll+0x11c>)
 801221c:	681b      	ldr	r3, [r3, #0]
 801221e:	2b00      	cmp	r3, #0
 8012220:	d05e      	beq.n	80122e0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8012222:	e02f      	b.n	8012284 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012224:	4b34      	ldr	r3, [pc, #208]	; (80122f8 <xTaskResumeAll+0x120>)
 8012226:	68db      	ldr	r3, [r3, #12]
 8012228:	68db      	ldr	r3, [r3, #12]
 801222a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801222c:	68fb      	ldr	r3, [r7, #12]
 801222e:	3318      	adds	r3, #24
 8012230:	4618      	mov	r0, r3
 8012232:	f7fe fae1 	bl	80107f8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012236:	68fb      	ldr	r3, [r7, #12]
 8012238:	3304      	adds	r3, #4
 801223a:	4618      	mov	r0, r3
 801223c:	f7fe fadc 	bl	80107f8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8012240:	68fb      	ldr	r3, [r7, #12]
 8012242:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012244:	4b2d      	ldr	r3, [pc, #180]	; (80122fc <xTaskResumeAll+0x124>)
 8012246:	681b      	ldr	r3, [r3, #0]
 8012248:	429a      	cmp	r2, r3
 801224a:	d903      	bls.n	8012254 <xTaskResumeAll+0x7c>
 801224c:	68fb      	ldr	r3, [r7, #12]
 801224e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012250:	4a2a      	ldr	r2, [pc, #168]	; (80122fc <xTaskResumeAll+0x124>)
 8012252:	6013      	str	r3, [r2, #0]
 8012254:	68fb      	ldr	r3, [r7, #12]
 8012256:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012258:	4613      	mov	r3, r2
 801225a:	009b      	lsls	r3, r3, #2
 801225c:	4413      	add	r3, r2
 801225e:	009b      	lsls	r3, r3, #2
 8012260:	4a27      	ldr	r2, [pc, #156]	; (8012300 <xTaskResumeAll+0x128>)
 8012262:	441a      	add	r2, r3
 8012264:	68fb      	ldr	r3, [r7, #12]
 8012266:	3304      	adds	r3, #4
 8012268:	4619      	mov	r1, r3
 801226a:	4610      	mov	r0, r2
 801226c:	f7fe fa67 	bl	801073e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012270:	68fb      	ldr	r3, [r7, #12]
 8012272:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012274:	4b23      	ldr	r3, [pc, #140]	; (8012304 <xTaskResumeAll+0x12c>)
 8012276:	681b      	ldr	r3, [r3, #0]
 8012278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801227a:	429a      	cmp	r2, r3
 801227c:	d302      	bcc.n	8012284 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 801227e:	4b22      	ldr	r3, [pc, #136]	; (8012308 <xTaskResumeAll+0x130>)
 8012280:	2201      	movs	r2, #1
 8012282:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8012284:	4b1c      	ldr	r3, [pc, #112]	; (80122f8 <xTaskResumeAll+0x120>)
 8012286:	681b      	ldr	r3, [r3, #0]
 8012288:	2b00      	cmp	r3, #0
 801228a:	d1cb      	bne.n	8012224 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801228c:	68fb      	ldr	r3, [r7, #12]
 801228e:	2b00      	cmp	r3, #0
 8012290:	d001      	beq.n	8012296 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8012292:	f000 fb5f 	bl	8012954 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8012296:	4b1d      	ldr	r3, [pc, #116]	; (801230c <xTaskResumeAll+0x134>)
 8012298:	681b      	ldr	r3, [r3, #0]
 801229a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 801229c:	687b      	ldr	r3, [r7, #4]
 801229e:	2b00      	cmp	r3, #0
 80122a0:	d010      	beq.n	80122c4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80122a2:	f000 f847 	bl	8012334 <xTaskIncrementTick>
 80122a6:	4603      	mov	r3, r0
 80122a8:	2b00      	cmp	r3, #0
 80122aa:	d002      	beq.n	80122b2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80122ac:	4b16      	ldr	r3, [pc, #88]	; (8012308 <xTaskResumeAll+0x130>)
 80122ae:	2201      	movs	r2, #1
 80122b0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80122b2:	687b      	ldr	r3, [r7, #4]
 80122b4:	3b01      	subs	r3, #1
 80122b6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80122b8:	687b      	ldr	r3, [r7, #4]
 80122ba:	2b00      	cmp	r3, #0
 80122bc:	d1f1      	bne.n	80122a2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80122be:	4b13      	ldr	r3, [pc, #76]	; (801230c <xTaskResumeAll+0x134>)
 80122c0:	2200      	movs	r2, #0
 80122c2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80122c4:	4b10      	ldr	r3, [pc, #64]	; (8012308 <xTaskResumeAll+0x130>)
 80122c6:	681b      	ldr	r3, [r3, #0]
 80122c8:	2b00      	cmp	r3, #0
 80122ca:	d009      	beq.n	80122e0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80122cc:	2301      	movs	r3, #1
 80122ce:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80122d0:	4b0f      	ldr	r3, [pc, #60]	; (8012310 <xTaskResumeAll+0x138>)
 80122d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80122d6:	601a      	str	r2, [r3, #0]
 80122d8:	f3bf 8f4f 	dsb	sy
 80122dc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80122e0:	f7fe fc10 	bl	8010b04 <vPortExitCritical>

	return xAlreadyYielded;
 80122e4:	68bb      	ldr	r3, [r7, #8]
}
 80122e6:	4618      	mov	r0, r3
 80122e8:	3710      	adds	r7, #16
 80122ea:	46bd      	mov	sp, r7
 80122ec:	bd80      	pop	{r7, pc}
 80122ee:	bf00      	nop
 80122f0:	240054d4 	.word	0x240054d4
 80122f4:	240054ac 	.word	0x240054ac
 80122f8:	2400546c 	.word	0x2400546c
 80122fc:	240054b4 	.word	0x240054b4
 8012300:	24004fdc 	.word	0x24004fdc
 8012304:	24004fd8 	.word	0x24004fd8
 8012308:	240054c0 	.word	0x240054c0
 801230c:	240054bc 	.word	0x240054bc
 8012310:	e000ed04 	.word	0xe000ed04

08012314 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8012314:	b480      	push	{r7}
 8012316:	b083      	sub	sp, #12
 8012318:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801231a:	4b05      	ldr	r3, [pc, #20]	; (8012330 <xTaskGetTickCount+0x1c>)
 801231c:	681b      	ldr	r3, [r3, #0]
 801231e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8012320:	687b      	ldr	r3, [r7, #4]
}
 8012322:	4618      	mov	r0, r3
 8012324:	370c      	adds	r7, #12
 8012326:	46bd      	mov	sp, r7
 8012328:	f85d 7b04 	ldr.w	r7, [sp], #4
 801232c:	4770      	bx	lr
 801232e:	bf00      	nop
 8012330:	240054b0 	.word	0x240054b0

08012334 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8012334:	b580      	push	{r7, lr}
 8012336:	b086      	sub	sp, #24
 8012338:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801233a:	2300      	movs	r3, #0
 801233c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801233e:	4b4f      	ldr	r3, [pc, #316]	; (801247c <xTaskIncrementTick+0x148>)
 8012340:	681b      	ldr	r3, [r3, #0]
 8012342:	2b00      	cmp	r3, #0
 8012344:	f040 808f 	bne.w	8012466 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8012348:	4b4d      	ldr	r3, [pc, #308]	; (8012480 <xTaskIncrementTick+0x14c>)
 801234a:	681b      	ldr	r3, [r3, #0]
 801234c:	3301      	adds	r3, #1
 801234e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8012350:	4a4b      	ldr	r2, [pc, #300]	; (8012480 <xTaskIncrementTick+0x14c>)
 8012352:	693b      	ldr	r3, [r7, #16]
 8012354:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8012356:	693b      	ldr	r3, [r7, #16]
 8012358:	2b00      	cmp	r3, #0
 801235a:	d120      	bne.n	801239e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 801235c:	4b49      	ldr	r3, [pc, #292]	; (8012484 <xTaskIncrementTick+0x150>)
 801235e:	681b      	ldr	r3, [r3, #0]
 8012360:	681b      	ldr	r3, [r3, #0]
 8012362:	2b00      	cmp	r3, #0
 8012364:	d00a      	beq.n	801237c <xTaskIncrementTick+0x48>
	__asm volatile
 8012366:	f04f 0350 	mov.w	r3, #80	; 0x50
 801236a:	f383 8811 	msr	BASEPRI, r3
 801236e:	f3bf 8f6f 	isb	sy
 8012372:	f3bf 8f4f 	dsb	sy
 8012376:	603b      	str	r3, [r7, #0]
}
 8012378:	bf00      	nop
 801237a:	e7fe      	b.n	801237a <xTaskIncrementTick+0x46>
 801237c:	4b41      	ldr	r3, [pc, #260]	; (8012484 <xTaskIncrementTick+0x150>)
 801237e:	681b      	ldr	r3, [r3, #0]
 8012380:	60fb      	str	r3, [r7, #12]
 8012382:	4b41      	ldr	r3, [pc, #260]	; (8012488 <xTaskIncrementTick+0x154>)
 8012384:	681b      	ldr	r3, [r3, #0]
 8012386:	4a3f      	ldr	r2, [pc, #252]	; (8012484 <xTaskIncrementTick+0x150>)
 8012388:	6013      	str	r3, [r2, #0]
 801238a:	4a3f      	ldr	r2, [pc, #252]	; (8012488 <xTaskIncrementTick+0x154>)
 801238c:	68fb      	ldr	r3, [r7, #12]
 801238e:	6013      	str	r3, [r2, #0]
 8012390:	4b3e      	ldr	r3, [pc, #248]	; (801248c <xTaskIncrementTick+0x158>)
 8012392:	681b      	ldr	r3, [r3, #0]
 8012394:	3301      	adds	r3, #1
 8012396:	4a3d      	ldr	r2, [pc, #244]	; (801248c <xTaskIncrementTick+0x158>)
 8012398:	6013      	str	r3, [r2, #0]
 801239a:	f000 fadb 	bl	8012954 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801239e:	4b3c      	ldr	r3, [pc, #240]	; (8012490 <xTaskIncrementTick+0x15c>)
 80123a0:	681b      	ldr	r3, [r3, #0]
 80123a2:	693a      	ldr	r2, [r7, #16]
 80123a4:	429a      	cmp	r2, r3
 80123a6:	d349      	bcc.n	801243c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80123a8:	4b36      	ldr	r3, [pc, #216]	; (8012484 <xTaskIncrementTick+0x150>)
 80123aa:	681b      	ldr	r3, [r3, #0]
 80123ac:	681b      	ldr	r3, [r3, #0]
 80123ae:	2b00      	cmp	r3, #0
 80123b0:	d104      	bne.n	80123bc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80123b2:	4b37      	ldr	r3, [pc, #220]	; (8012490 <xTaskIncrementTick+0x15c>)
 80123b4:	f04f 32ff 	mov.w	r2, #4294967295
 80123b8:	601a      	str	r2, [r3, #0]
					break;
 80123ba:	e03f      	b.n	801243c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80123bc:	4b31      	ldr	r3, [pc, #196]	; (8012484 <xTaskIncrementTick+0x150>)
 80123be:	681b      	ldr	r3, [r3, #0]
 80123c0:	68db      	ldr	r3, [r3, #12]
 80123c2:	68db      	ldr	r3, [r3, #12]
 80123c4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80123c6:	68bb      	ldr	r3, [r7, #8]
 80123c8:	685b      	ldr	r3, [r3, #4]
 80123ca:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80123cc:	693a      	ldr	r2, [r7, #16]
 80123ce:	687b      	ldr	r3, [r7, #4]
 80123d0:	429a      	cmp	r2, r3
 80123d2:	d203      	bcs.n	80123dc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80123d4:	4a2e      	ldr	r2, [pc, #184]	; (8012490 <xTaskIncrementTick+0x15c>)
 80123d6:	687b      	ldr	r3, [r7, #4]
 80123d8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80123da:	e02f      	b.n	801243c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80123dc:	68bb      	ldr	r3, [r7, #8]
 80123de:	3304      	adds	r3, #4
 80123e0:	4618      	mov	r0, r3
 80123e2:	f7fe fa09 	bl	80107f8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80123e6:	68bb      	ldr	r3, [r7, #8]
 80123e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80123ea:	2b00      	cmp	r3, #0
 80123ec:	d004      	beq.n	80123f8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80123ee:	68bb      	ldr	r3, [r7, #8]
 80123f0:	3318      	adds	r3, #24
 80123f2:	4618      	mov	r0, r3
 80123f4:	f7fe fa00 	bl	80107f8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80123f8:	68bb      	ldr	r3, [r7, #8]
 80123fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80123fc:	4b25      	ldr	r3, [pc, #148]	; (8012494 <xTaskIncrementTick+0x160>)
 80123fe:	681b      	ldr	r3, [r3, #0]
 8012400:	429a      	cmp	r2, r3
 8012402:	d903      	bls.n	801240c <xTaskIncrementTick+0xd8>
 8012404:	68bb      	ldr	r3, [r7, #8]
 8012406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012408:	4a22      	ldr	r2, [pc, #136]	; (8012494 <xTaskIncrementTick+0x160>)
 801240a:	6013      	str	r3, [r2, #0]
 801240c:	68bb      	ldr	r3, [r7, #8]
 801240e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012410:	4613      	mov	r3, r2
 8012412:	009b      	lsls	r3, r3, #2
 8012414:	4413      	add	r3, r2
 8012416:	009b      	lsls	r3, r3, #2
 8012418:	4a1f      	ldr	r2, [pc, #124]	; (8012498 <xTaskIncrementTick+0x164>)
 801241a:	441a      	add	r2, r3
 801241c:	68bb      	ldr	r3, [r7, #8]
 801241e:	3304      	adds	r3, #4
 8012420:	4619      	mov	r1, r3
 8012422:	4610      	mov	r0, r2
 8012424:	f7fe f98b 	bl	801073e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012428:	68bb      	ldr	r3, [r7, #8]
 801242a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801242c:	4b1b      	ldr	r3, [pc, #108]	; (801249c <xTaskIncrementTick+0x168>)
 801242e:	681b      	ldr	r3, [r3, #0]
 8012430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012432:	429a      	cmp	r2, r3
 8012434:	d3b8      	bcc.n	80123a8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8012436:	2301      	movs	r3, #1
 8012438:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801243a:	e7b5      	b.n	80123a8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801243c:	4b17      	ldr	r3, [pc, #92]	; (801249c <xTaskIncrementTick+0x168>)
 801243e:	681b      	ldr	r3, [r3, #0]
 8012440:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012442:	4915      	ldr	r1, [pc, #84]	; (8012498 <xTaskIncrementTick+0x164>)
 8012444:	4613      	mov	r3, r2
 8012446:	009b      	lsls	r3, r3, #2
 8012448:	4413      	add	r3, r2
 801244a:	009b      	lsls	r3, r3, #2
 801244c:	440b      	add	r3, r1
 801244e:	681b      	ldr	r3, [r3, #0]
 8012450:	2b01      	cmp	r3, #1
 8012452:	d901      	bls.n	8012458 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8012454:	2301      	movs	r3, #1
 8012456:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8012458:	4b11      	ldr	r3, [pc, #68]	; (80124a0 <xTaskIncrementTick+0x16c>)
 801245a:	681b      	ldr	r3, [r3, #0]
 801245c:	2b00      	cmp	r3, #0
 801245e:	d007      	beq.n	8012470 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8012460:	2301      	movs	r3, #1
 8012462:	617b      	str	r3, [r7, #20]
 8012464:	e004      	b.n	8012470 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8012466:	4b0f      	ldr	r3, [pc, #60]	; (80124a4 <xTaskIncrementTick+0x170>)
 8012468:	681b      	ldr	r3, [r3, #0]
 801246a:	3301      	adds	r3, #1
 801246c:	4a0d      	ldr	r2, [pc, #52]	; (80124a4 <xTaskIncrementTick+0x170>)
 801246e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8012470:	697b      	ldr	r3, [r7, #20]
}
 8012472:	4618      	mov	r0, r3
 8012474:	3718      	adds	r7, #24
 8012476:	46bd      	mov	sp, r7
 8012478:	bd80      	pop	{r7, pc}
 801247a:	bf00      	nop
 801247c:	240054d4 	.word	0x240054d4
 8012480:	240054b0 	.word	0x240054b0
 8012484:	24005464 	.word	0x24005464
 8012488:	24005468 	.word	0x24005468
 801248c:	240054c4 	.word	0x240054c4
 8012490:	240054cc 	.word	0x240054cc
 8012494:	240054b4 	.word	0x240054b4
 8012498:	24004fdc 	.word	0x24004fdc
 801249c:	24004fd8 	.word	0x24004fd8
 80124a0:	240054c0 	.word	0x240054c0
 80124a4:	240054bc 	.word	0x240054bc

080124a8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80124a8:	b480      	push	{r7}
 80124aa:	b085      	sub	sp, #20
 80124ac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80124ae:	4b2a      	ldr	r3, [pc, #168]	; (8012558 <vTaskSwitchContext+0xb0>)
 80124b0:	681b      	ldr	r3, [r3, #0]
 80124b2:	2b00      	cmp	r3, #0
 80124b4:	d003      	beq.n	80124be <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80124b6:	4b29      	ldr	r3, [pc, #164]	; (801255c <vTaskSwitchContext+0xb4>)
 80124b8:	2201      	movs	r2, #1
 80124ba:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80124bc:	e046      	b.n	801254c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80124be:	4b27      	ldr	r3, [pc, #156]	; (801255c <vTaskSwitchContext+0xb4>)
 80124c0:	2200      	movs	r2, #0
 80124c2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80124c4:	4b26      	ldr	r3, [pc, #152]	; (8012560 <vTaskSwitchContext+0xb8>)
 80124c6:	681b      	ldr	r3, [r3, #0]
 80124c8:	60fb      	str	r3, [r7, #12]
 80124ca:	e010      	b.n	80124ee <vTaskSwitchContext+0x46>
 80124cc:	68fb      	ldr	r3, [r7, #12]
 80124ce:	2b00      	cmp	r3, #0
 80124d0:	d10a      	bne.n	80124e8 <vTaskSwitchContext+0x40>
	__asm volatile
 80124d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80124d6:	f383 8811 	msr	BASEPRI, r3
 80124da:	f3bf 8f6f 	isb	sy
 80124de:	f3bf 8f4f 	dsb	sy
 80124e2:	607b      	str	r3, [r7, #4]
}
 80124e4:	bf00      	nop
 80124e6:	e7fe      	b.n	80124e6 <vTaskSwitchContext+0x3e>
 80124e8:	68fb      	ldr	r3, [r7, #12]
 80124ea:	3b01      	subs	r3, #1
 80124ec:	60fb      	str	r3, [r7, #12]
 80124ee:	491d      	ldr	r1, [pc, #116]	; (8012564 <vTaskSwitchContext+0xbc>)
 80124f0:	68fa      	ldr	r2, [r7, #12]
 80124f2:	4613      	mov	r3, r2
 80124f4:	009b      	lsls	r3, r3, #2
 80124f6:	4413      	add	r3, r2
 80124f8:	009b      	lsls	r3, r3, #2
 80124fa:	440b      	add	r3, r1
 80124fc:	681b      	ldr	r3, [r3, #0]
 80124fe:	2b00      	cmp	r3, #0
 8012500:	d0e4      	beq.n	80124cc <vTaskSwitchContext+0x24>
 8012502:	68fa      	ldr	r2, [r7, #12]
 8012504:	4613      	mov	r3, r2
 8012506:	009b      	lsls	r3, r3, #2
 8012508:	4413      	add	r3, r2
 801250a:	009b      	lsls	r3, r3, #2
 801250c:	4a15      	ldr	r2, [pc, #84]	; (8012564 <vTaskSwitchContext+0xbc>)
 801250e:	4413      	add	r3, r2
 8012510:	60bb      	str	r3, [r7, #8]
 8012512:	68bb      	ldr	r3, [r7, #8]
 8012514:	685b      	ldr	r3, [r3, #4]
 8012516:	685a      	ldr	r2, [r3, #4]
 8012518:	68bb      	ldr	r3, [r7, #8]
 801251a:	605a      	str	r2, [r3, #4]
 801251c:	68bb      	ldr	r3, [r7, #8]
 801251e:	685a      	ldr	r2, [r3, #4]
 8012520:	68bb      	ldr	r3, [r7, #8]
 8012522:	3308      	adds	r3, #8
 8012524:	429a      	cmp	r2, r3
 8012526:	d104      	bne.n	8012532 <vTaskSwitchContext+0x8a>
 8012528:	68bb      	ldr	r3, [r7, #8]
 801252a:	685b      	ldr	r3, [r3, #4]
 801252c:	685a      	ldr	r2, [r3, #4]
 801252e:	68bb      	ldr	r3, [r7, #8]
 8012530:	605a      	str	r2, [r3, #4]
 8012532:	68bb      	ldr	r3, [r7, #8]
 8012534:	685b      	ldr	r3, [r3, #4]
 8012536:	68db      	ldr	r3, [r3, #12]
 8012538:	4a0b      	ldr	r2, [pc, #44]	; (8012568 <vTaskSwitchContext+0xc0>)
 801253a:	6013      	str	r3, [r2, #0]
 801253c:	4a08      	ldr	r2, [pc, #32]	; (8012560 <vTaskSwitchContext+0xb8>)
 801253e:	68fb      	ldr	r3, [r7, #12]
 8012540:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8012542:	4b09      	ldr	r3, [pc, #36]	; (8012568 <vTaskSwitchContext+0xc0>)
 8012544:	681b      	ldr	r3, [r3, #0]
 8012546:	3354      	adds	r3, #84	; 0x54
 8012548:	4a08      	ldr	r2, [pc, #32]	; (801256c <vTaskSwitchContext+0xc4>)
 801254a:	6013      	str	r3, [r2, #0]
}
 801254c:	bf00      	nop
 801254e:	3714      	adds	r7, #20
 8012550:	46bd      	mov	sp, r7
 8012552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012556:	4770      	bx	lr
 8012558:	240054d4 	.word	0x240054d4
 801255c:	240054c0 	.word	0x240054c0
 8012560:	240054b4 	.word	0x240054b4
 8012564:	24004fdc 	.word	0x24004fdc
 8012568:	24004fd8 	.word	0x24004fd8
 801256c:	2400006c 	.word	0x2400006c

08012570 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8012570:	b580      	push	{r7, lr}
 8012572:	b084      	sub	sp, #16
 8012574:	af00      	add	r7, sp, #0
 8012576:	6078      	str	r0, [r7, #4]
 8012578:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801257a:	687b      	ldr	r3, [r7, #4]
 801257c:	2b00      	cmp	r3, #0
 801257e:	d10a      	bne.n	8012596 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8012580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012584:	f383 8811 	msr	BASEPRI, r3
 8012588:	f3bf 8f6f 	isb	sy
 801258c:	f3bf 8f4f 	dsb	sy
 8012590:	60fb      	str	r3, [r7, #12]
}
 8012592:	bf00      	nop
 8012594:	e7fe      	b.n	8012594 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8012596:	4b07      	ldr	r3, [pc, #28]	; (80125b4 <vTaskPlaceOnEventList+0x44>)
 8012598:	681b      	ldr	r3, [r3, #0]
 801259a:	3318      	adds	r3, #24
 801259c:	4619      	mov	r1, r3
 801259e:	6878      	ldr	r0, [r7, #4]
 80125a0:	f7fe f8f1 	bl	8010786 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80125a4:	2101      	movs	r1, #1
 80125a6:	6838      	ldr	r0, [r7, #0]
 80125a8:	f000 fb7e 	bl	8012ca8 <prvAddCurrentTaskToDelayedList>
}
 80125ac:	bf00      	nop
 80125ae:	3710      	adds	r7, #16
 80125b0:	46bd      	mov	sp, r7
 80125b2:	bd80      	pop	{r7, pc}
 80125b4:	24004fd8 	.word	0x24004fd8

080125b8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80125b8:	b580      	push	{r7, lr}
 80125ba:	b086      	sub	sp, #24
 80125bc:	af00      	add	r7, sp, #0
 80125be:	60f8      	str	r0, [r7, #12]
 80125c0:	60b9      	str	r1, [r7, #8]
 80125c2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80125c4:	68fb      	ldr	r3, [r7, #12]
 80125c6:	2b00      	cmp	r3, #0
 80125c8:	d10a      	bne.n	80125e0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80125ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125ce:	f383 8811 	msr	BASEPRI, r3
 80125d2:	f3bf 8f6f 	isb	sy
 80125d6:	f3bf 8f4f 	dsb	sy
 80125da:	617b      	str	r3, [r7, #20]
}
 80125dc:	bf00      	nop
 80125de:	e7fe      	b.n	80125de <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80125e0:	4b0a      	ldr	r3, [pc, #40]	; (801260c <vTaskPlaceOnEventListRestricted+0x54>)
 80125e2:	681b      	ldr	r3, [r3, #0]
 80125e4:	3318      	adds	r3, #24
 80125e6:	4619      	mov	r1, r3
 80125e8:	68f8      	ldr	r0, [r7, #12]
 80125ea:	f7fe f8a8 	bl	801073e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80125ee:	687b      	ldr	r3, [r7, #4]
 80125f0:	2b00      	cmp	r3, #0
 80125f2:	d002      	beq.n	80125fa <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80125f4:	f04f 33ff 	mov.w	r3, #4294967295
 80125f8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80125fa:	6879      	ldr	r1, [r7, #4]
 80125fc:	68b8      	ldr	r0, [r7, #8]
 80125fe:	f000 fb53 	bl	8012ca8 <prvAddCurrentTaskToDelayedList>
	}
 8012602:	bf00      	nop
 8012604:	3718      	adds	r7, #24
 8012606:	46bd      	mov	sp, r7
 8012608:	bd80      	pop	{r7, pc}
 801260a:	bf00      	nop
 801260c:	24004fd8 	.word	0x24004fd8

08012610 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8012610:	b580      	push	{r7, lr}
 8012612:	b086      	sub	sp, #24
 8012614:	af00      	add	r7, sp, #0
 8012616:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012618:	687b      	ldr	r3, [r7, #4]
 801261a:	68db      	ldr	r3, [r3, #12]
 801261c:	68db      	ldr	r3, [r3, #12]
 801261e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8012620:	693b      	ldr	r3, [r7, #16]
 8012622:	2b00      	cmp	r3, #0
 8012624:	d10a      	bne.n	801263c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8012626:	f04f 0350 	mov.w	r3, #80	; 0x50
 801262a:	f383 8811 	msr	BASEPRI, r3
 801262e:	f3bf 8f6f 	isb	sy
 8012632:	f3bf 8f4f 	dsb	sy
 8012636:	60fb      	str	r3, [r7, #12]
}
 8012638:	bf00      	nop
 801263a:	e7fe      	b.n	801263a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801263c:	693b      	ldr	r3, [r7, #16]
 801263e:	3318      	adds	r3, #24
 8012640:	4618      	mov	r0, r3
 8012642:	f7fe f8d9 	bl	80107f8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012646:	4b1e      	ldr	r3, [pc, #120]	; (80126c0 <xTaskRemoveFromEventList+0xb0>)
 8012648:	681b      	ldr	r3, [r3, #0]
 801264a:	2b00      	cmp	r3, #0
 801264c:	d11d      	bne.n	801268a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801264e:	693b      	ldr	r3, [r7, #16]
 8012650:	3304      	adds	r3, #4
 8012652:	4618      	mov	r0, r3
 8012654:	f7fe f8d0 	bl	80107f8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8012658:	693b      	ldr	r3, [r7, #16]
 801265a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801265c:	4b19      	ldr	r3, [pc, #100]	; (80126c4 <xTaskRemoveFromEventList+0xb4>)
 801265e:	681b      	ldr	r3, [r3, #0]
 8012660:	429a      	cmp	r2, r3
 8012662:	d903      	bls.n	801266c <xTaskRemoveFromEventList+0x5c>
 8012664:	693b      	ldr	r3, [r7, #16]
 8012666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012668:	4a16      	ldr	r2, [pc, #88]	; (80126c4 <xTaskRemoveFromEventList+0xb4>)
 801266a:	6013      	str	r3, [r2, #0]
 801266c:	693b      	ldr	r3, [r7, #16]
 801266e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012670:	4613      	mov	r3, r2
 8012672:	009b      	lsls	r3, r3, #2
 8012674:	4413      	add	r3, r2
 8012676:	009b      	lsls	r3, r3, #2
 8012678:	4a13      	ldr	r2, [pc, #76]	; (80126c8 <xTaskRemoveFromEventList+0xb8>)
 801267a:	441a      	add	r2, r3
 801267c:	693b      	ldr	r3, [r7, #16]
 801267e:	3304      	adds	r3, #4
 8012680:	4619      	mov	r1, r3
 8012682:	4610      	mov	r0, r2
 8012684:	f7fe f85b 	bl	801073e <vListInsertEnd>
 8012688:	e005      	b.n	8012696 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801268a:	693b      	ldr	r3, [r7, #16]
 801268c:	3318      	adds	r3, #24
 801268e:	4619      	mov	r1, r3
 8012690:	480e      	ldr	r0, [pc, #56]	; (80126cc <xTaskRemoveFromEventList+0xbc>)
 8012692:	f7fe f854 	bl	801073e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8012696:	693b      	ldr	r3, [r7, #16]
 8012698:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801269a:	4b0d      	ldr	r3, [pc, #52]	; (80126d0 <xTaskRemoveFromEventList+0xc0>)
 801269c:	681b      	ldr	r3, [r3, #0]
 801269e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80126a0:	429a      	cmp	r2, r3
 80126a2:	d905      	bls.n	80126b0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80126a4:	2301      	movs	r3, #1
 80126a6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80126a8:	4b0a      	ldr	r3, [pc, #40]	; (80126d4 <xTaskRemoveFromEventList+0xc4>)
 80126aa:	2201      	movs	r2, #1
 80126ac:	601a      	str	r2, [r3, #0]
 80126ae:	e001      	b.n	80126b4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80126b0:	2300      	movs	r3, #0
 80126b2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80126b4:	697b      	ldr	r3, [r7, #20]
}
 80126b6:	4618      	mov	r0, r3
 80126b8:	3718      	adds	r7, #24
 80126ba:	46bd      	mov	sp, r7
 80126bc:	bd80      	pop	{r7, pc}
 80126be:	bf00      	nop
 80126c0:	240054d4 	.word	0x240054d4
 80126c4:	240054b4 	.word	0x240054b4
 80126c8:	24004fdc 	.word	0x24004fdc
 80126cc:	2400546c 	.word	0x2400546c
 80126d0:	24004fd8 	.word	0x24004fd8
 80126d4:	240054c0 	.word	0x240054c0

080126d8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80126d8:	b480      	push	{r7}
 80126da:	b083      	sub	sp, #12
 80126dc:	af00      	add	r7, sp, #0
 80126de:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80126e0:	4b06      	ldr	r3, [pc, #24]	; (80126fc <vTaskInternalSetTimeOutState+0x24>)
 80126e2:	681a      	ldr	r2, [r3, #0]
 80126e4:	687b      	ldr	r3, [r7, #4]
 80126e6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80126e8:	4b05      	ldr	r3, [pc, #20]	; (8012700 <vTaskInternalSetTimeOutState+0x28>)
 80126ea:	681a      	ldr	r2, [r3, #0]
 80126ec:	687b      	ldr	r3, [r7, #4]
 80126ee:	605a      	str	r2, [r3, #4]
}
 80126f0:	bf00      	nop
 80126f2:	370c      	adds	r7, #12
 80126f4:	46bd      	mov	sp, r7
 80126f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126fa:	4770      	bx	lr
 80126fc:	240054c4 	.word	0x240054c4
 8012700:	240054b0 	.word	0x240054b0

08012704 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8012704:	b580      	push	{r7, lr}
 8012706:	b088      	sub	sp, #32
 8012708:	af00      	add	r7, sp, #0
 801270a:	6078      	str	r0, [r7, #4]
 801270c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801270e:	687b      	ldr	r3, [r7, #4]
 8012710:	2b00      	cmp	r3, #0
 8012712:	d10a      	bne.n	801272a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8012714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012718:	f383 8811 	msr	BASEPRI, r3
 801271c:	f3bf 8f6f 	isb	sy
 8012720:	f3bf 8f4f 	dsb	sy
 8012724:	613b      	str	r3, [r7, #16]
}
 8012726:	bf00      	nop
 8012728:	e7fe      	b.n	8012728 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 801272a:	683b      	ldr	r3, [r7, #0]
 801272c:	2b00      	cmp	r3, #0
 801272e:	d10a      	bne.n	8012746 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8012730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012734:	f383 8811 	msr	BASEPRI, r3
 8012738:	f3bf 8f6f 	isb	sy
 801273c:	f3bf 8f4f 	dsb	sy
 8012740:	60fb      	str	r3, [r7, #12]
}
 8012742:	bf00      	nop
 8012744:	e7fe      	b.n	8012744 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8012746:	f7fe f9ad 	bl	8010aa4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801274a:	4b1d      	ldr	r3, [pc, #116]	; (80127c0 <xTaskCheckForTimeOut+0xbc>)
 801274c:	681b      	ldr	r3, [r3, #0]
 801274e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8012750:	687b      	ldr	r3, [r7, #4]
 8012752:	685b      	ldr	r3, [r3, #4]
 8012754:	69ba      	ldr	r2, [r7, #24]
 8012756:	1ad3      	subs	r3, r2, r3
 8012758:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801275a:	683b      	ldr	r3, [r7, #0]
 801275c:	681b      	ldr	r3, [r3, #0]
 801275e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012762:	d102      	bne.n	801276a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8012764:	2300      	movs	r3, #0
 8012766:	61fb      	str	r3, [r7, #28]
 8012768:	e023      	b.n	80127b2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801276a:	687b      	ldr	r3, [r7, #4]
 801276c:	681a      	ldr	r2, [r3, #0]
 801276e:	4b15      	ldr	r3, [pc, #84]	; (80127c4 <xTaskCheckForTimeOut+0xc0>)
 8012770:	681b      	ldr	r3, [r3, #0]
 8012772:	429a      	cmp	r2, r3
 8012774:	d007      	beq.n	8012786 <xTaskCheckForTimeOut+0x82>
 8012776:	687b      	ldr	r3, [r7, #4]
 8012778:	685b      	ldr	r3, [r3, #4]
 801277a:	69ba      	ldr	r2, [r7, #24]
 801277c:	429a      	cmp	r2, r3
 801277e:	d302      	bcc.n	8012786 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8012780:	2301      	movs	r3, #1
 8012782:	61fb      	str	r3, [r7, #28]
 8012784:	e015      	b.n	80127b2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8012786:	683b      	ldr	r3, [r7, #0]
 8012788:	681b      	ldr	r3, [r3, #0]
 801278a:	697a      	ldr	r2, [r7, #20]
 801278c:	429a      	cmp	r2, r3
 801278e:	d20b      	bcs.n	80127a8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8012790:	683b      	ldr	r3, [r7, #0]
 8012792:	681a      	ldr	r2, [r3, #0]
 8012794:	697b      	ldr	r3, [r7, #20]
 8012796:	1ad2      	subs	r2, r2, r3
 8012798:	683b      	ldr	r3, [r7, #0]
 801279a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801279c:	6878      	ldr	r0, [r7, #4]
 801279e:	f7ff ff9b 	bl	80126d8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80127a2:	2300      	movs	r3, #0
 80127a4:	61fb      	str	r3, [r7, #28]
 80127a6:	e004      	b.n	80127b2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80127a8:	683b      	ldr	r3, [r7, #0]
 80127aa:	2200      	movs	r2, #0
 80127ac:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80127ae:	2301      	movs	r3, #1
 80127b0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80127b2:	f7fe f9a7 	bl	8010b04 <vPortExitCritical>

	return xReturn;
 80127b6:	69fb      	ldr	r3, [r7, #28]
}
 80127b8:	4618      	mov	r0, r3
 80127ba:	3720      	adds	r7, #32
 80127bc:	46bd      	mov	sp, r7
 80127be:	bd80      	pop	{r7, pc}
 80127c0:	240054b0 	.word	0x240054b0
 80127c4:	240054c4 	.word	0x240054c4

080127c8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80127c8:	b480      	push	{r7}
 80127ca:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80127cc:	4b03      	ldr	r3, [pc, #12]	; (80127dc <vTaskMissedYield+0x14>)
 80127ce:	2201      	movs	r2, #1
 80127d0:	601a      	str	r2, [r3, #0]
}
 80127d2:	bf00      	nop
 80127d4:	46bd      	mov	sp, r7
 80127d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127da:	4770      	bx	lr
 80127dc:	240054c0 	.word	0x240054c0

080127e0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80127e0:	b580      	push	{r7, lr}
 80127e2:	b082      	sub	sp, #8
 80127e4:	af00      	add	r7, sp, #0
 80127e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80127e8:	f000 f852 	bl	8012890 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80127ec:	4b06      	ldr	r3, [pc, #24]	; (8012808 <prvIdleTask+0x28>)
 80127ee:	681b      	ldr	r3, [r3, #0]
 80127f0:	2b01      	cmp	r3, #1
 80127f2:	d9f9      	bls.n	80127e8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80127f4:	4b05      	ldr	r3, [pc, #20]	; (801280c <prvIdleTask+0x2c>)
 80127f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80127fa:	601a      	str	r2, [r3, #0]
 80127fc:	f3bf 8f4f 	dsb	sy
 8012800:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8012804:	e7f0      	b.n	80127e8 <prvIdleTask+0x8>
 8012806:	bf00      	nop
 8012808:	24004fdc 	.word	0x24004fdc
 801280c:	e000ed04 	.word	0xe000ed04

08012810 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8012810:	b580      	push	{r7, lr}
 8012812:	b082      	sub	sp, #8
 8012814:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8012816:	2300      	movs	r3, #0
 8012818:	607b      	str	r3, [r7, #4]
 801281a:	e00c      	b.n	8012836 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801281c:	687a      	ldr	r2, [r7, #4]
 801281e:	4613      	mov	r3, r2
 8012820:	009b      	lsls	r3, r3, #2
 8012822:	4413      	add	r3, r2
 8012824:	009b      	lsls	r3, r3, #2
 8012826:	4a12      	ldr	r2, [pc, #72]	; (8012870 <prvInitialiseTaskLists+0x60>)
 8012828:	4413      	add	r3, r2
 801282a:	4618      	mov	r0, r3
 801282c:	f7fd ff5a 	bl	80106e4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8012830:	687b      	ldr	r3, [r7, #4]
 8012832:	3301      	adds	r3, #1
 8012834:	607b      	str	r3, [r7, #4]
 8012836:	687b      	ldr	r3, [r7, #4]
 8012838:	2b37      	cmp	r3, #55	; 0x37
 801283a:	d9ef      	bls.n	801281c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801283c:	480d      	ldr	r0, [pc, #52]	; (8012874 <prvInitialiseTaskLists+0x64>)
 801283e:	f7fd ff51 	bl	80106e4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8012842:	480d      	ldr	r0, [pc, #52]	; (8012878 <prvInitialiseTaskLists+0x68>)
 8012844:	f7fd ff4e 	bl	80106e4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8012848:	480c      	ldr	r0, [pc, #48]	; (801287c <prvInitialiseTaskLists+0x6c>)
 801284a:	f7fd ff4b 	bl	80106e4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801284e:	480c      	ldr	r0, [pc, #48]	; (8012880 <prvInitialiseTaskLists+0x70>)
 8012850:	f7fd ff48 	bl	80106e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8012854:	480b      	ldr	r0, [pc, #44]	; (8012884 <prvInitialiseTaskLists+0x74>)
 8012856:	f7fd ff45 	bl	80106e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801285a:	4b0b      	ldr	r3, [pc, #44]	; (8012888 <prvInitialiseTaskLists+0x78>)
 801285c:	4a05      	ldr	r2, [pc, #20]	; (8012874 <prvInitialiseTaskLists+0x64>)
 801285e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8012860:	4b0a      	ldr	r3, [pc, #40]	; (801288c <prvInitialiseTaskLists+0x7c>)
 8012862:	4a05      	ldr	r2, [pc, #20]	; (8012878 <prvInitialiseTaskLists+0x68>)
 8012864:	601a      	str	r2, [r3, #0]
}
 8012866:	bf00      	nop
 8012868:	3708      	adds	r7, #8
 801286a:	46bd      	mov	sp, r7
 801286c:	bd80      	pop	{r7, pc}
 801286e:	bf00      	nop
 8012870:	24004fdc 	.word	0x24004fdc
 8012874:	2400543c 	.word	0x2400543c
 8012878:	24005450 	.word	0x24005450
 801287c:	2400546c 	.word	0x2400546c
 8012880:	24005480 	.word	0x24005480
 8012884:	24005498 	.word	0x24005498
 8012888:	24005464 	.word	0x24005464
 801288c:	24005468 	.word	0x24005468

08012890 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8012890:	b580      	push	{r7, lr}
 8012892:	b082      	sub	sp, #8
 8012894:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8012896:	e019      	b.n	80128cc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8012898:	f7fe f904 	bl	8010aa4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801289c:	4b10      	ldr	r3, [pc, #64]	; (80128e0 <prvCheckTasksWaitingTermination+0x50>)
 801289e:	68db      	ldr	r3, [r3, #12]
 80128a0:	68db      	ldr	r3, [r3, #12]
 80128a2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80128a4:	687b      	ldr	r3, [r7, #4]
 80128a6:	3304      	adds	r3, #4
 80128a8:	4618      	mov	r0, r3
 80128aa:	f7fd ffa5 	bl	80107f8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80128ae:	4b0d      	ldr	r3, [pc, #52]	; (80128e4 <prvCheckTasksWaitingTermination+0x54>)
 80128b0:	681b      	ldr	r3, [r3, #0]
 80128b2:	3b01      	subs	r3, #1
 80128b4:	4a0b      	ldr	r2, [pc, #44]	; (80128e4 <prvCheckTasksWaitingTermination+0x54>)
 80128b6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80128b8:	4b0b      	ldr	r3, [pc, #44]	; (80128e8 <prvCheckTasksWaitingTermination+0x58>)
 80128ba:	681b      	ldr	r3, [r3, #0]
 80128bc:	3b01      	subs	r3, #1
 80128be:	4a0a      	ldr	r2, [pc, #40]	; (80128e8 <prvCheckTasksWaitingTermination+0x58>)
 80128c0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80128c2:	f7fe f91f 	bl	8010b04 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80128c6:	6878      	ldr	r0, [r7, #4]
 80128c8:	f000 f810 	bl	80128ec <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80128cc:	4b06      	ldr	r3, [pc, #24]	; (80128e8 <prvCheckTasksWaitingTermination+0x58>)
 80128ce:	681b      	ldr	r3, [r3, #0]
 80128d0:	2b00      	cmp	r3, #0
 80128d2:	d1e1      	bne.n	8012898 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80128d4:	bf00      	nop
 80128d6:	bf00      	nop
 80128d8:	3708      	adds	r7, #8
 80128da:	46bd      	mov	sp, r7
 80128dc:	bd80      	pop	{r7, pc}
 80128de:	bf00      	nop
 80128e0:	24005480 	.word	0x24005480
 80128e4:	240054ac 	.word	0x240054ac
 80128e8:	24005494 	.word	0x24005494

080128ec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80128ec:	b580      	push	{r7, lr}
 80128ee:	b084      	sub	sp, #16
 80128f0:	af00      	add	r7, sp, #0
 80128f2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80128f4:	687b      	ldr	r3, [r7, #4]
 80128f6:	3354      	adds	r3, #84	; 0x54
 80128f8:	4618      	mov	r0, r3
 80128fa:	f001 fded 	bl	80144d8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80128fe:	687b      	ldr	r3, [r7, #4]
 8012900:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8012904:	2b00      	cmp	r3, #0
 8012906:	d108      	bne.n	801291a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8012908:	687b      	ldr	r3, [r7, #4]
 801290a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801290c:	4618      	mov	r0, r3
 801290e:	f7fd fdcb 	bl	80104a8 <vPortFree>
				vPortFree( pxTCB );
 8012912:	6878      	ldr	r0, [r7, #4]
 8012914:	f7fd fdc8 	bl	80104a8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8012918:	e018      	b.n	801294c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801291a:	687b      	ldr	r3, [r7, #4]
 801291c:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8012920:	2b01      	cmp	r3, #1
 8012922:	d103      	bne.n	801292c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8012924:	6878      	ldr	r0, [r7, #4]
 8012926:	f7fd fdbf 	bl	80104a8 <vPortFree>
	}
 801292a:	e00f      	b.n	801294c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801292c:	687b      	ldr	r3, [r7, #4]
 801292e:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8012932:	2b02      	cmp	r3, #2
 8012934:	d00a      	beq.n	801294c <prvDeleteTCB+0x60>
	__asm volatile
 8012936:	f04f 0350 	mov.w	r3, #80	; 0x50
 801293a:	f383 8811 	msr	BASEPRI, r3
 801293e:	f3bf 8f6f 	isb	sy
 8012942:	f3bf 8f4f 	dsb	sy
 8012946:	60fb      	str	r3, [r7, #12]
}
 8012948:	bf00      	nop
 801294a:	e7fe      	b.n	801294a <prvDeleteTCB+0x5e>
	}
 801294c:	bf00      	nop
 801294e:	3710      	adds	r7, #16
 8012950:	46bd      	mov	sp, r7
 8012952:	bd80      	pop	{r7, pc}

08012954 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8012954:	b480      	push	{r7}
 8012956:	b083      	sub	sp, #12
 8012958:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801295a:	4b0c      	ldr	r3, [pc, #48]	; (801298c <prvResetNextTaskUnblockTime+0x38>)
 801295c:	681b      	ldr	r3, [r3, #0]
 801295e:	681b      	ldr	r3, [r3, #0]
 8012960:	2b00      	cmp	r3, #0
 8012962:	d104      	bne.n	801296e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8012964:	4b0a      	ldr	r3, [pc, #40]	; (8012990 <prvResetNextTaskUnblockTime+0x3c>)
 8012966:	f04f 32ff 	mov.w	r2, #4294967295
 801296a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801296c:	e008      	b.n	8012980 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801296e:	4b07      	ldr	r3, [pc, #28]	; (801298c <prvResetNextTaskUnblockTime+0x38>)
 8012970:	681b      	ldr	r3, [r3, #0]
 8012972:	68db      	ldr	r3, [r3, #12]
 8012974:	68db      	ldr	r3, [r3, #12]
 8012976:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8012978:	687b      	ldr	r3, [r7, #4]
 801297a:	685b      	ldr	r3, [r3, #4]
 801297c:	4a04      	ldr	r2, [pc, #16]	; (8012990 <prvResetNextTaskUnblockTime+0x3c>)
 801297e:	6013      	str	r3, [r2, #0]
}
 8012980:	bf00      	nop
 8012982:	370c      	adds	r7, #12
 8012984:	46bd      	mov	sp, r7
 8012986:	f85d 7b04 	ldr.w	r7, [sp], #4
 801298a:	4770      	bx	lr
 801298c:	24005464 	.word	0x24005464
 8012990:	240054cc 	.word	0x240054cc

08012994 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8012994:	b480      	push	{r7}
 8012996:	b083      	sub	sp, #12
 8012998:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801299a:	4b0b      	ldr	r3, [pc, #44]	; (80129c8 <xTaskGetSchedulerState+0x34>)
 801299c:	681b      	ldr	r3, [r3, #0]
 801299e:	2b00      	cmp	r3, #0
 80129a0:	d102      	bne.n	80129a8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80129a2:	2301      	movs	r3, #1
 80129a4:	607b      	str	r3, [r7, #4]
 80129a6:	e008      	b.n	80129ba <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80129a8:	4b08      	ldr	r3, [pc, #32]	; (80129cc <xTaskGetSchedulerState+0x38>)
 80129aa:	681b      	ldr	r3, [r3, #0]
 80129ac:	2b00      	cmp	r3, #0
 80129ae:	d102      	bne.n	80129b6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80129b0:	2302      	movs	r3, #2
 80129b2:	607b      	str	r3, [r7, #4]
 80129b4:	e001      	b.n	80129ba <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80129b6:	2300      	movs	r3, #0
 80129b8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80129ba:	687b      	ldr	r3, [r7, #4]
	}
 80129bc:	4618      	mov	r0, r3
 80129be:	370c      	adds	r7, #12
 80129c0:	46bd      	mov	sp, r7
 80129c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129c6:	4770      	bx	lr
 80129c8:	240054b8 	.word	0x240054b8
 80129cc:	240054d4 	.word	0x240054d4

080129d0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80129d0:	b580      	push	{r7, lr}
 80129d2:	b084      	sub	sp, #16
 80129d4:	af00      	add	r7, sp, #0
 80129d6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80129d8:	687b      	ldr	r3, [r7, #4]
 80129da:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80129dc:	2300      	movs	r3, #0
 80129de:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80129e0:	687b      	ldr	r3, [r7, #4]
 80129e2:	2b00      	cmp	r3, #0
 80129e4:	d051      	beq.n	8012a8a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80129e6:	68bb      	ldr	r3, [r7, #8]
 80129e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80129ea:	4b2a      	ldr	r3, [pc, #168]	; (8012a94 <xTaskPriorityInherit+0xc4>)
 80129ec:	681b      	ldr	r3, [r3, #0]
 80129ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80129f0:	429a      	cmp	r2, r3
 80129f2:	d241      	bcs.n	8012a78 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80129f4:	68bb      	ldr	r3, [r7, #8]
 80129f6:	699b      	ldr	r3, [r3, #24]
 80129f8:	2b00      	cmp	r3, #0
 80129fa:	db06      	blt.n	8012a0a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80129fc:	4b25      	ldr	r3, [pc, #148]	; (8012a94 <xTaskPriorityInherit+0xc4>)
 80129fe:	681b      	ldr	r3, [r3, #0]
 8012a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012a02:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8012a06:	68bb      	ldr	r3, [r7, #8]
 8012a08:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8012a0a:	68bb      	ldr	r3, [r7, #8]
 8012a0c:	6959      	ldr	r1, [r3, #20]
 8012a0e:	68bb      	ldr	r3, [r7, #8]
 8012a10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012a12:	4613      	mov	r3, r2
 8012a14:	009b      	lsls	r3, r3, #2
 8012a16:	4413      	add	r3, r2
 8012a18:	009b      	lsls	r3, r3, #2
 8012a1a:	4a1f      	ldr	r2, [pc, #124]	; (8012a98 <xTaskPriorityInherit+0xc8>)
 8012a1c:	4413      	add	r3, r2
 8012a1e:	4299      	cmp	r1, r3
 8012a20:	d122      	bne.n	8012a68 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012a22:	68bb      	ldr	r3, [r7, #8]
 8012a24:	3304      	adds	r3, #4
 8012a26:	4618      	mov	r0, r3
 8012a28:	f7fd fee6 	bl	80107f8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8012a2c:	4b19      	ldr	r3, [pc, #100]	; (8012a94 <xTaskPriorityInherit+0xc4>)
 8012a2e:	681b      	ldr	r3, [r3, #0]
 8012a30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012a32:	68bb      	ldr	r3, [r7, #8]
 8012a34:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8012a36:	68bb      	ldr	r3, [r7, #8]
 8012a38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012a3a:	4b18      	ldr	r3, [pc, #96]	; (8012a9c <xTaskPriorityInherit+0xcc>)
 8012a3c:	681b      	ldr	r3, [r3, #0]
 8012a3e:	429a      	cmp	r2, r3
 8012a40:	d903      	bls.n	8012a4a <xTaskPriorityInherit+0x7a>
 8012a42:	68bb      	ldr	r3, [r7, #8]
 8012a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012a46:	4a15      	ldr	r2, [pc, #84]	; (8012a9c <xTaskPriorityInherit+0xcc>)
 8012a48:	6013      	str	r3, [r2, #0]
 8012a4a:	68bb      	ldr	r3, [r7, #8]
 8012a4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012a4e:	4613      	mov	r3, r2
 8012a50:	009b      	lsls	r3, r3, #2
 8012a52:	4413      	add	r3, r2
 8012a54:	009b      	lsls	r3, r3, #2
 8012a56:	4a10      	ldr	r2, [pc, #64]	; (8012a98 <xTaskPriorityInherit+0xc8>)
 8012a58:	441a      	add	r2, r3
 8012a5a:	68bb      	ldr	r3, [r7, #8]
 8012a5c:	3304      	adds	r3, #4
 8012a5e:	4619      	mov	r1, r3
 8012a60:	4610      	mov	r0, r2
 8012a62:	f7fd fe6c 	bl	801073e <vListInsertEnd>
 8012a66:	e004      	b.n	8012a72 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8012a68:	4b0a      	ldr	r3, [pc, #40]	; (8012a94 <xTaskPriorityInherit+0xc4>)
 8012a6a:	681b      	ldr	r3, [r3, #0]
 8012a6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012a6e:	68bb      	ldr	r3, [r7, #8]
 8012a70:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8012a72:	2301      	movs	r3, #1
 8012a74:	60fb      	str	r3, [r7, #12]
 8012a76:	e008      	b.n	8012a8a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8012a78:	68bb      	ldr	r3, [r7, #8]
 8012a7a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012a7c:	4b05      	ldr	r3, [pc, #20]	; (8012a94 <xTaskPriorityInherit+0xc4>)
 8012a7e:	681b      	ldr	r3, [r3, #0]
 8012a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012a82:	429a      	cmp	r2, r3
 8012a84:	d201      	bcs.n	8012a8a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8012a86:	2301      	movs	r3, #1
 8012a88:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8012a8a:	68fb      	ldr	r3, [r7, #12]
	}
 8012a8c:	4618      	mov	r0, r3
 8012a8e:	3710      	adds	r7, #16
 8012a90:	46bd      	mov	sp, r7
 8012a92:	bd80      	pop	{r7, pc}
 8012a94:	24004fd8 	.word	0x24004fd8
 8012a98:	24004fdc 	.word	0x24004fdc
 8012a9c:	240054b4 	.word	0x240054b4

08012aa0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8012aa0:	b580      	push	{r7, lr}
 8012aa2:	b086      	sub	sp, #24
 8012aa4:	af00      	add	r7, sp, #0
 8012aa6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8012aa8:	687b      	ldr	r3, [r7, #4]
 8012aaa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8012aac:	2300      	movs	r3, #0
 8012aae:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8012ab0:	687b      	ldr	r3, [r7, #4]
 8012ab2:	2b00      	cmp	r3, #0
 8012ab4:	d056      	beq.n	8012b64 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8012ab6:	4b2e      	ldr	r3, [pc, #184]	; (8012b70 <xTaskPriorityDisinherit+0xd0>)
 8012ab8:	681b      	ldr	r3, [r3, #0]
 8012aba:	693a      	ldr	r2, [r7, #16]
 8012abc:	429a      	cmp	r2, r3
 8012abe:	d00a      	beq.n	8012ad6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8012ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ac4:	f383 8811 	msr	BASEPRI, r3
 8012ac8:	f3bf 8f6f 	isb	sy
 8012acc:	f3bf 8f4f 	dsb	sy
 8012ad0:	60fb      	str	r3, [r7, #12]
}
 8012ad2:	bf00      	nop
 8012ad4:	e7fe      	b.n	8012ad4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8012ad6:	693b      	ldr	r3, [r7, #16]
 8012ad8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012ada:	2b00      	cmp	r3, #0
 8012adc:	d10a      	bne.n	8012af4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8012ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ae2:	f383 8811 	msr	BASEPRI, r3
 8012ae6:	f3bf 8f6f 	isb	sy
 8012aea:	f3bf 8f4f 	dsb	sy
 8012aee:	60bb      	str	r3, [r7, #8]
}
 8012af0:	bf00      	nop
 8012af2:	e7fe      	b.n	8012af2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8012af4:	693b      	ldr	r3, [r7, #16]
 8012af6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012af8:	1e5a      	subs	r2, r3, #1
 8012afa:	693b      	ldr	r3, [r7, #16]
 8012afc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8012afe:	693b      	ldr	r3, [r7, #16]
 8012b00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012b02:	693b      	ldr	r3, [r7, #16]
 8012b04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012b06:	429a      	cmp	r2, r3
 8012b08:	d02c      	beq.n	8012b64 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8012b0a:	693b      	ldr	r3, [r7, #16]
 8012b0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012b0e:	2b00      	cmp	r3, #0
 8012b10:	d128      	bne.n	8012b64 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012b12:	693b      	ldr	r3, [r7, #16]
 8012b14:	3304      	adds	r3, #4
 8012b16:	4618      	mov	r0, r3
 8012b18:	f7fd fe6e 	bl	80107f8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8012b1c:	693b      	ldr	r3, [r7, #16]
 8012b1e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012b20:	693b      	ldr	r3, [r7, #16]
 8012b22:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012b24:	693b      	ldr	r3, [r7, #16]
 8012b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012b28:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8012b2c:	693b      	ldr	r3, [r7, #16]
 8012b2e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8012b30:	693b      	ldr	r3, [r7, #16]
 8012b32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012b34:	4b0f      	ldr	r3, [pc, #60]	; (8012b74 <xTaskPriorityDisinherit+0xd4>)
 8012b36:	681b      	ldr	r3, [r3, #0]
 8012b38:	429a      	cmp	r2, r3
 8012b3a:	d903      	bls.n	8012b44 <xTaskPriorityDisinherit+0xa4>
 8012b3c:	693b      	ldr	r3, [r7, #16]
 8012b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012b40:	4a0c      	ldr	r2, [pc, #48]	; (8012b74 <xTaskPriorityDisinherit+0xd4>)
 8012b42:	6013      	str	r3, [r2, #0]
 8012b44:	693b      	ldr	r3, [r7, #16]
 8012b46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012b48:	4613      	mov	r3, r2
 8012b4a:	009b      	lsls	r3, r3, #2
 8012b4c:	4413      	add	r3, r2
 8012b4e:	009b      	lsls	r3, r3, #2
 8012b50:	4a09      	ldr	r2, [pc, #36]	; (8012b78 <xTaskPriorityDisinherit+0xd8>)
 8012b52:	441a      	add	r2, r3
 8012b54:	693b      	ldr	r3, [r7, #16]
 8012b56:	3304      	adds	r3, #4
 8012b58:	4619      	mov	r1, r3
 8012b5a:	4610      	mov	r0, r2
 8012b5c:	f7fd fdef 	bl	801073e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8012b60:	2301      	movs	r3, #1
 8012b62:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8012b64:	697b      	ldr	r3, [r7, #20]
	}
 8012b66:	4618      	mov	r0, r3
 8012b68:	3718      	adds	r7, #24
 8012b6a:	46bd      	mov	sp, r7
 8012b6c:	bd80      	pop	{r7, pc}
 8012b6e:	bf00      	nop
 8012b70:	24004fd8 	.word	0x24004fd8
 8012b74:	240054b4 	.word	0x240054b4
 8012b78:	24004fdc 	.word	0x24004fdc

08012b7c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8012b7c:	b580      	push	{r7, lr}
 8012b7e:	b088      	sub	sp, #32
 8012b80:	af00      	add	r7, sp, #0
 8012b82:	6078      	str	r0, [r7, #4]
 8012b84:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8012b86:	687b      	ldr	r3, [r7, #4]
 8012b88:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8012b8a:	2301      	movs	r3, #1
 8012b8c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8012b8e:	687b      	ldr	r3, [r7, #4]
 8012b90:	2b00      	cmp	r3, #0
 8012b92:	d06a      	beq.n	8012c6a <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8012b94:	69bb      	ldr	r3, [r7, #24]
 8012b96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012b98:	2b00      	cmp	r3, #0
 8012b9a:	d10a      	bne.n	8012bb2 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8012b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ba0:	f383 8811 	msr	BASEPRI, r3
 8012ba4:	f3bf 8f6f 	isb	sy
 8012ba8:	f3bf 8f4f 	dsb	sy
 8012bac:	60fb      	str	r3, [r7, #12]
}
 8012bae:	bf00      	nop
 8012bb0:	e7fe      	b.n	8012bb0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8012bb2:	69bb      	ldr	r3, [r7, #24]
 8012bb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012bb6:	683a      	ldr	r2, [r7, #0]
 8012bb8:	429a      	cmp	r2, r3
 8012bba:	d902      	bls.n	8012bc2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8012bbc:	683b      	ldr	r3, [r7, #0]
 8012bbe:	61fb      	str	r3, [r7, #28]
 8012bc0:	e002      	b.n	8012bc8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8012bc2:	69bb      	ldr	r3, [r7, #24]
 8012bc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012bc6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8012bc8:	69bb      	ldr	r3, [r7, #24]
 8012bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012bcc:	69fa      	ldr	r2, [r7, #28]
 8012bce:	429a      	cmp	r2, r3
 8012bd0:	d04b      	beq.n	8012c6a <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8012bd2:	69bb      	ldr	r3, [r7, #24]
 8012bd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012bd6:	697a      	ldr	r2, [r7, #20]
 8012bd8:	429a      	cmp	r2, r3
 8012bda:	d146      	bne.n	8012c6a <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8012bdc:	4b25      	ldr	r3, [pc, #148]	; (8012c74 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8012bde:	681b      	ldr	r3, [r3, #0]
 8012be0:	69ba      	ldr	r2, [r7, #24]
 8012be2:	429a      	cmp	r2, r3
 8012be4:	d10a      	bne.n	8012bfc <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8012be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012bea:	f383 8811 	msr	BASEPRI, r3
 8012bee:	f3bf 8f6f 	isb	sy
 8012bf2:	f3bf 8f4f 	dsb	sy
 8012bf6:	60bb      	str	r3, [r7, #8]
}
 8012bf8:	bf00      	nop
 8012bfa:	e7fe      	b.n	8012bfa <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8012bfc:	69bb      	ldr	r3, [r7, #24]
 8012bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012c00:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8012c02:	69bb      	ldr	r3, [r7, #24]
 8012c04:	69fa      	ldr	r2, [r7, #28]
 8012c06:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8012c08:	69bb      	ldr	r3, [r7, #24]
 8012c0a:	699b      	ldr	r3, [r3, #24]
 8012c0c:	2b00      	cmp	r3, #0
 8012c0e:	db04      	blt.n	8012c1a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012c10:	69fb      	ldr	r3, [r7, #28]
 8012c12:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8012c16:	69bb      	ldr	r3, [r7, #24]
 8012c18:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8012c1a:	69bb      	ldr	r3, [r7, #24]
 8012c1c:	6959      	ldr	r1, [r3, #20]
 8012c1e:	693a      	ldr	r2, [r7, #16]
 8012c20:	4613      	mov	r3, r2
 8012c22:	009b      	lsls	r3, r3, #2
 8012c24:	4413      	add	r3, r2
 8012c26:	009b      	lsls	r3, r3, #2
 8012c28:	4a13      	ldr	r2, [pc, #76]	; (8012c78 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8012c2a:	4413      	add	r3, r2
 8012c2c:	4299      	cmp	r1, r3
 8012c2e:	d11c      	bne.n	8012c6a <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012c30:	69bb      	ldr	r3, [r7, #24]
 8012c32:	3304      	adds	r3, #4
 8012c34:	4618      	mov	r0, r3
 8012c36:	f7fd fddf 	bl	80107f8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8012c3a:	69bb      	ldr	r3, [r7, #24]
 8012c3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012c3e:	4b0f      	ldr	r3, [pc, #60]	; (8012c7c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8012c40:	681b      	ldr	r3, [r3, #0]
 8012c42:	429a      	cmp	r2, r3
 8012c44:	d903      	bls.n	8012c4e <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8012c46:	69bb      	ldr	r3, [r7, #24]
 8012c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012c4a:	4a0c      	ldr	r2, [pc, #48]	; (8012c7c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8012c4c:	6013      	str	r3, [r2, #0]
 8012c4e:	69bb      	ldr	r3, [r7, #24]
 8012c50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012c52:	4613      	mov	r3, r2
 8012c54:	009b      	lsls	r3, r3, #2
 8012c56:	4413      	add	r3, r2
 8012c58:	009b      	lsls	r3, r3, #2
 8012c5a:	4a07      	ldr	r2, [pc, #28]	; (8012c78 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8012c5c:	441a      	add	r2, r3
 8012c5e:	69bb      	ldr	r3, [r7, #24]
 8012c60:	3304      	adds	r3, #4
 8012c62:	4619      	mov	r1, r3
 8012c64:	4610      	mov	r0, r2
 8012c66:	f7fd fd6a 	bl	801073e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8012c6a:	bf00      	nop
 8012c6c:	3720      	adds	r7, #32
 8012c6e:	46bd      	mov	sp, r7
 8012c70:	bd80      	pop	{r7, pc}
 8012c72:	bf00      	nop
 8012c74:	24004fd8 	.word	0x24004fd8
 8012c78:	24004fdc 	.word	0x24004fdc
 8012c7c:	240054b4 	.word	0x240054b4

08012c80 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8012c80:	b480      	push	{r7}
 8012c82:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8012c84:	4b07      	ldr	r3, [pc, #28]	; (8012ca4 <pvTaskIncrementMutexHeldCount+0x24>)
 8012c86:	681b      	ldr	r3, [r3, #0]
 8012c88:	2b00      	cmp	r3, #0
 8012c8a:	d004      	beq.n	8012c96 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8012c8c:	4b05      	ldr	r3, [pc, #20]	; (8012ca4 <pvTaskIncrementMutexHeldCount+0x24>)
 8012c8e:	681b      	ldr	r3, [r3, #0]
 8012c90:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012c92:	3201      	adds	r2, #1
 8012c94:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8012c96:	4b03      	ldr	r3, [pc, #12]	; (8012ca4 <pvTaskIncrementMutexHeldCount+0x24>)
 8012c98:	681b      	ldr	r3, [r3, #0]
	}
 8012c9a:	4618      	mov	r0, r3
 8012c9c:	46bd      	mov	sp, r7
 8012c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ca2:	4770      	bx	lr
 8012ca4:	24004fd8 	.word	0x24004fd8

08012ca8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8012ca8:	b580      	push	{r7, lr}
 8012caa:	b084      	sub	sp, #16
 8012cac:	af00      	add	r7, sp, #0
 8012cae:	6078      	str	r0, [r7, #4]
 8012cb0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8012cb2:	4b21      	ldr	r3, [pc, #132]	; (8012d38 <prvAddCurrentTaskToDelayedList+0x90>)
 8012cb4:	681b      	ldr	r3, [r3, #0]
 8012cb6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012cb8:	4b20      	ldr	r3, [pc, #128]	; (8012d3c <prvAddCurrentTaskToDelayedList+0x94>)
 8012cba:	681b      	ldr	r3, [r3, #0]
 8012cbc:	3304      	adds	r3, #4
 8012cbe:	4618      	mov	r0, r3
 8012cc0:	f7fd fd9a 	bl	80107f8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8012cc4:	687b      	ldr	r3, [r7, #4]
 8012cc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012cca:	d10a      	bne.n	8012ce2 <prvAddCurrentTaskToDelayedList+0x3a>
 8012ccc:	683b      	ldr	r3, [r7, #0]
 8012cce:	2b00      	cmp	r3, #0
 8012cd0:	d007      	beq.n	8012ce2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012cd2:	4b1a      	ldr	r3, [pc, #104]	; (8012d3c <prvAddCurrentTaskToDelayedList+0x94>)
 8012cd4:	681b      	ldr	r3, [r3, #0]
 8012cd6:	3304      	adds	r3, #4
 8012cd8:	4619      	mov	r1, r3
 8012cda:	4819      	ldr	r0, [pc, #100]	; (8012d40 <prvAddCurrentTaskToDelayedList+0x98>)
 8012cdc:	f7fd fd2f 	bl	801073e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8012ce0:	e026      	b.n	8012d30 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8012ce2:	68fa      	ldr	r2, [r7, #12]
 8012ce4:	687b      	ldr	r3, [r7, #4]
 8012ce6:	4413      	add	r3, r2
 8012ce8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8012cea:	4b14      	ldr	r3, [pc, #80]	; (8012d3c <prvAddCurrentTaskToDelayedList+0x94>)
 8012cec:	681b      	ldr	r3, [r3, #0]
 8012cee:	68ba      	ldr	r2, [r7, #8]
 8012cf0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8012cf2:	68ba      	ldr	r2, [r7, #8]
 8012cf4:	68fb      	ldr	r3, [r7, #12]
 8012cf6:	429a      	cmp	r2, r3
 8012cf8:	d209      	bcs.n	8012d0e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012cfa:	4b12      	ldr	r3, [pc, #72]	; (8012d44 <prvAddCurrentTaskToDelayedList+0x9c>)
 8012cfc:	681a      	ldr	r2, [r3, #0]
 8012cfe:	4b0f      	ldr	r3, [pc, #60]	; (8012d3c <prvAddCurrentTaskToDelayedList+0x94>)
 8012d00:	681b      	ldr	r3, [r3, #0]
 8012d02:	3304      	adds	r3, #4
 8012d04:	4619      	mov	r1, r3
 8012d06:	4610      	mov	r0, r2
 8012d08:	f7fd fd3d 	bl	8010786 <vListInsert>
}
 8012d0c:	e010      	b.n	8012d30 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012d0e:	4b0e      	ldr	r3, [pc, #56]	; (8012d48 <prvAddCurrentTaskToDelayedList+0xa0>)
 8012d10:	681a      	ldr	r2, [r3, #0]
 8012d12:	4b0a      	ldr	r3, [pc, #40]	; (8012d3c <prvAddCurrentTaskToDelayedList+0x94>)
 8012d14:	681b      	ldr	r3, [r3, #0]
 8012d16:	3304      	adds	r3, #4
 8012d18:	4619      	mov	r1, r3
 8012d1a:	4610      	mov	r0, r2
 8012d1c:	f7fd fd33 	bl	8010786 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8012d20:	4b0a      	ldr	r3, [pc, #40]	; (8012d4c <prvAddCurrentTaskToDelayedList+0xa4>)
 8012d22:	681b      	ldr	r3, [r3, #0]
 8012d24:	68ba      	ldr	r2, [r7, #8]
 8012d26:	429a      	cmp	r2, r3
 8012d28:	d202      	bcs.n	8012d30 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8012d2a:	4a08      	ldr	r2, [pc, #32]	; (8012d4c <prvAddCurrentTaskToDelayedList+0xa4>)
 8012d2c:	68bb      	ldr	r3, [r7, #8]
 8012d2e:	6013      	str	r3, [r2, #0]
}
 8012d30:	bf00      	nop
 8012d32:	3710      	adds	r7, #16
 8012d34:	46bd      	mov	sp, r7
 8012d36:	bd80      	pop	{r7, pc}
 8012d38:	240054b0 	.word	0x240054b0
 8012d3c:	24004fd8 	.word	0x24004fd8
 8012d40:	24005498 	.word	0x24005498
 8012d44:	24005468 	.word	0x24005468
 8012d48:	24005464 	.word	0x24005464
 8012d4c:	240054cc 	.word	0x240054cc

08012d50 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8012d50:	b580      	push	{r7, lr}
 8012d52:	b08a      	sub	sp, #40	; 0x28
 8012d54:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8012d56:	2300      	movs	r3, #0
 8012d58:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8012d5a:	f000 fb07 	bl	801336c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8012d5e:	4b1c      	ldr	r3, [pc, #112]	; (8012dd0 <xTimerCreateTimerTask+0x80>)
 8012d60:	681b      	ldr	r3, [r3, #0]
 8012d62:	2b00      	cmp	r3, #0
 8012d64:	d021      	beq.n	8012daa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8012d66:	2300      	movs	r3, #0
 8012d68:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8012d6a:	2300      	movs	r3, #0
 8012d6c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8012d6e:	1d3a      	adds	r2, r7, #4
 8012d70:	f107 0108 	add.w	r1, r7, #8
 8012d74:	f107 030c 	add.w	r3, r7, #12
 8012d78:	4618      	mov	r0, r3
 8012d7a:	f7fd faaf 	bl	80102dc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8012d7e:	6879      	ldr	r1, [r7, #4]
 8012d80:	68bb      	ldr	r3, [r7, #8]
 8012d82:	68fa      	ldr	r2, [r7, #12]
 8012d84:	9202      	str	r2, [sp, #8]
 8012d86:	9301      	str	r3, [sp, #4]
 8012d88:	2302      	movs	r3, #2
 8012d8a:	9300      	str	r3, [sp, #0]
 8012d8c:	2300      	movs	r3, #0
 8012d8e:	460a      	mov	r2, r1
 8012d90:	4910      	ldr	r1, [pc, #64]	; (8012dd4 <xTimerCreateTimerTask+0x84>)
 8012d92:	4811      	ldr	r0, [pc, #68]	; (8012dd8 <xTimerCreateTimerTask+0x88>)
 8012d94:	f7fe ffb6 	bl	8011d04 <xTaskCreateStatic>
 8012d98:	4603      	mov	r3, r0
 8012d9a:	4a10      	ldr	r2, [pc, #64]	; (8012ddc <xTimerCreateTimerTask+0x8c>)
 8012d9c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8012d9e:	4b0f      	ldr	r3, [pc, #60]	; (8012ddc <xTimerCreateTimerTask+0x8c>)
 8012da0:	681b      	ldr	r3, [r3, #0]
 8012da2:	2b00      	cmp	r3, #0
 8012da4:	d001      	beq.n	8012daa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8012da6:	2301      	movs	r3, #1
 8012da8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8012daa:	697b      	ldr	r3, [r7, #20]
 8012dac:	2b00      	cmp	r3, #0
 8012dae:	d10a      	bne.n	8012dc6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8012db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012db4:	f383 8811 	msr	BASEPRI, r3
 8012db8:	f3bf 8f6f 	isb	sy
 8012dbc:	f3bf 8f4f 	dsb	sy
 8012dc0:	613b      	str	r3, [r7, #16]
}
 8012dc2:	bf00      	nop
 8012dc4:	e7fe      	b.n	8012dc4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8012dc6:	697b      	ldr	r3, [r7, #20]
}
 8012dc8:	4618      	mov	r0, r3
 8012dca:	3718      	adds	r7, #24
 8012dcc:	46bd      	mov	sp, r7
 8012dce:	bd80      	pop	{r7, pc}
 8012dd0:	24005508 	.word	0x24005508
 8012dd4:	08017ba0 	.word	0x08017ba0
 8012dd8:	08012f15 	.word	0x08012f15
 8012ddc:	2400550c 	.word	0x2400550c

08012de0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8012de0:	b580      	push	{r7, lr}
 8012de2:	b08a      	sub	sp, #40	; 0x28
 8012de4:	af00      	add	r7, sp, #0
 8012de6:	60f8      	str	r0, [r7, #12]
 8012de8:	60b9      	str	r1, [r7, #8]
 8012dea:	607a      	str	r2, [r7, #4]
 8012dec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8012dee:	2300      	movs	r3, #0
 8012df0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8012df2:	68fb      	ldr	r3, [r7, #12]
 8012df4:	2b00      	cmp	r3, #0
 8012df6:	d10a      	bne.n	8012e0e <xTimerGenericCommand+0x2e>
	__asm volatile
 8012df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012dfc:	f383 8811 	msr	BASEPRI, r3
 8012e00:	f3bf 8f6f 	isb	sy
 8012e04:	f3bf 8f4f 	dsb	sy
 8012e08:	623b      	str	r3, [r7, #32]
}
 8012e0a:	bf00      	nop
 8012e0c:	e7fe      	b.n	8012e0c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8012e0e:	4b1a      	ldr	r3, [pc, #104]	; (8012e78 <xTimerGenericCommand+0x98>)
 8012e10:	681b      	ldr	r3, [r3, #0]
 8012e12:	2b00      	cmp	r3, #0
 8012e14:	d02a      	beq.n	8012e6c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8012e16:	68bb      	ldr	r3, [r7, #8]
 8012e18:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8012e1a:	687b      	ldr	r3, [r7, #4]
 8012e1c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8012e1e:	68fb      	ldr	r3, [r7, #12]
 8012e20:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8012e22:	68bb      	ldr	r3, [r7, #8]
 8012e24:	2b05      	cmp	r3, #5
 8012e26:	dc18      	bgt.n	8012e5a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8012e28:	f7ff fdb4 	bl	8012994 <xTaskGetSchedulerState>
 8012e2c:	4603      	mov	r3, r0
 8012e2e:	2b02      	cmp	r3, #2
 8012e30:	d109      	bne.n	8012e46 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8012e32:	4b11      	ldr	r3, [pc, #68]	; (8012e78 <xTimerGenericCommand+0x98>)
 8012e34:	6818      	ldr	r0, [r3, #0]
 8012e36:	f107 0110 	add.w	r1, r7, #16
 8012e3a:	2300      	movs	r3, #0
 8012e3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012e3e:	f7fe f8fb 	bl	8011038 <xQueueGenericSend>
 8012e42:	6278      	str	r0, [r7, #36]	; 0x24
 8012e44:	e012      	b.n	8012e6c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8012e46:	4b0c      	ldr	r3, [pc, #48]	; (8012e78 <xTimerGenericCommand+0x98>)
 8012e48:	6818      	ldr	r0, [r3, #0]
 8012e4a:	f107 0110 	add.w	r1, r7, #16
 8012e4e:	2300      	movs	r3, #0
 8012e50:	2200      	movs	r2, #0
 8012e52:	f7fe f8f1 	bl	8011038 <xQueueGenericSend>
 8012e56:	6278      	str	r0, [r7, #36]	; 0x24
 8012e58:	e008      	b.n	8012e6c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8012e5a:	4b07      	ldr	r3, [pc, #28]	; (8012e78 <xTimerGenericCommand+0x98>)
 8012e5c:	6818      	ldr	r0, [r3, #0]
 8012e5e:	f107 0110 	add.w	r1, r7, #16
 8012e62:	2300      	movs	r3, #0
 8012e64:	683a      	ldr	r2, [r7, #0]
 8012e66:	f7fe f9e5 	bl	8011234 <xQueueGenericSendFromISR>
 8012e6a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8012e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8012e6e:	4618      	mov	r0, r3
 8012e70:	3728      	adds	r7, #40	; 0x28
 8012e72:	46bd      	mov	sp, r7
 8012e74:	bd80      	pop	{r7, pc}
 8012e76:	bf00      	nop
 8012e78:	24005508 	.word	0x24005508

08012e7c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8012e7c:	b580      	push	{r7, lr}
 8012e7e:	b088      	sub	sp, #32
 8012e80:	af02      	add	r7, sp, #8
 8012e82:	6078      	str	r0, [r7, #4]
 8012e84:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012e86:	4b22      	ldr	r3, [pc, #136]	; (8012f10 <prvProcessExpiredTimer+0x94>)
 8012e88:	681b      	ldr	r3, [r3, #0]
 8012e8a:	68db      	ldr	r3, [r3, #12]
 8012e8c:	68db      	ldr	r3, [r3, #12]
 8012e8e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012e90:	697b      	ldr	r3, [r7, #20]
 8012e92:	3304      	adds	r3, #4
 8012e94:	4618      	mov	r0, r3
 8012e96:	f7fd fcaf 	bl	80107f8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8012e9a:	697b      	ldr	r3, [r7, #20]
 8012e9c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012ea0:	f003 0304 	and.w	r3, r3, #4
 8012ea4:	2b00      	cmp	r3, #0
 8012ea6:	d022      	beq.n	8012eee <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8012ea8:	697b      	ldr	r3, [r7, #20]
 8012eaa:	699a      	ldr	r2, [r3, #24]
 8012eac:	687b      	ldr	r3, [r7, #4]
 8012eae:	18d1      	adds	r1, r2, r3
 8012eb0:	687b      	ldr	r3, [r7, #4]
 8012eb2:	683a      	ldr	r2, [r7, #0]
 8012eb4:	6978      	ldr	r0, [r7, #20]
 8012eb6:	f000 f8d1 	bl	801305c <prvInsertTimerInActiveList>
 8012eba:	4603      	mov	r3, r0
 8012ebc:	2b00      	cmp	r3, #0
 8012ebe:	d01f      	beq.n	8012f00 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8012ec0:	2300      	movs	r3, #0
 8012ec2:	9300      	str	r3, [sp, #0]
 8012ec4:	2300      	movs	r3, #0
 8012ec6:	687a      	ldr	r2, [r7, #4]
 8012ec8:	2100      	movs	r1, #0
 8012eca:	6978      	ldr	r0, [r7, #20]
 8012ecc:	f7ff ff88 	bl	8012de0 <xTimerGenericCommand>
 8012ed0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8012ed2:	693b      	ldr	r3, [r7, #16]
 8012ed4:	2b00      	cmp	r3, #0
 8012ed6:	d113      	bne.n	8012f00 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8012ed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012edc:	f383 8811 	msr	BASEPRI, r3
 8012ee0:	f3bf 8f6f 	isb	sy
 8012ee4:	f3bf 8f4f 	dsb	sy
 8012ee8:	60fb      	str	r3, [r7, #12]
}
 8012eea:	bf00      	nop
 8012eec:	e7fe      	b.n	8012eec <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012eee:	697b      	ldr	r3, [r7, #20]
 8012ef0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012ef4:	f023 0301 	bic.w	r3, r3, #1
 8012ef8:	b2da      	uxtb	r2, r3
 8012efa:	697b      	ldr	r3, [r7, #20]
 8012efc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8012f00:	697b      	ldr	r3, [r7, #20]
 8012f02:	6a1b      	ldr	r3, [r3, #32]
 8012f04:	6978      	ldr	r0, [r7, #20]
 8012f06:	4798      	blx	r3
}
 8012f08:	bf00      	nop
 8012f0a:	3718      	adds	r7, #24
 8012f0c:	46bd      	mov	sp, r7
 8012f0e:	bd80      	pop	{r7, pc}
 8012f10:	24005500 	.word	0x24005500

08012f14 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8012f14:	b580      	push	{r7, lr}
 8012f16:	b084      	sub	sp, #16
 8012f18:	af00      	add	r7, sp, #0
 8012f1a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8012f1c:	f107 0308 	add.w	r3, r7, #8
 8012f20:	4618      	mov	r0, r3
 8012f22:	f000 f857 	bl	8012fd4 <prvGetNextExpireTime>
 8012f26:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8012f28:	68bb      	ldr	r3, [r7, #8]
 8012f2a:	4619      	mov	r1, r3
 8012f2c:	68f8      	ldr	r0, [r7, #12]
 8012f2e:	f000 f803 	bl	8012f38 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8012f32:	f000 f8d5 	bl	80130e0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8012f36:	e7f1      	b.n	8012f1c <prvTimerTask+0x8>

08012f38 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8012f38:	b580      	push	{r7, lr}
 8012f3a:	b084      	sub	sp, #16
 8012f3c:	af00      	add	r7, sp, #0
 8012f3e:	6078      	str	r0, [r7, #4]
 8012f40:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8012f42:	f7ff f93b 	bl	80121bc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8012f46:	f107 0308 	add.w	r3, r7, #8
 8012f4a:	4618      	mov	r0, r3
 8012f4c:	f000 f866 	bl	801301c <prvSampleTimeNow>
 8012f50:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8012f52:	68bb      	ldr	r3, [r7, #8]
 8012f54:	2b00      	cmp	r3, #0
 8012f56:	d130      	bne.n	8012fba <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8012f58:	683b      	ldr	r3, [r7, #0]
 8012f5a:	2b00      	cmp	r3, #0
 8012f5c:	d10a      	bne.n	8012f74 <prvProcessTimerOrBlockTask+0x3c>
 8012f5e:	687a      	ldr	r2, [r7, #4]
 8012f60:	68fb      	ldr	r3, [r7, #12]
 8012f62:	429a      	cmp	r2, r3
 8012f64:	d806      	bhi.n	8012f74 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8012f66:	f7ff f937 	bl	80121d8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8012f6a:	68f9      	ldr	r1, [r7, #12]
 8012f6c:	6878      	ldr	r0, [r7, #4]
 8012f6e:	f7ff ff85 	bl	8012e7c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8012f72:	e024      	b.n	8012fbe <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8012f74:	683b      	ldr	r3, [r7, #0]
 8012f76:	2b00      	cmp	r3, #0
 8012f78:	d008      	beq.n	8012f8c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8012f7a:	4b13      	ldr	r3, [pc, #76]	; (8012fc8 <prvProcessTimerOrBlockTask+0x90>)
 8012f7c:	681b      	ldr	r3, [r3, #0]
 8012f7e:	681b      	ldr	r3, [r3, #0]
 8012f80:	2b00      	cmp	r3, #0
 8012f82:	d101      	bne.n	8012f88 <prvProcessTimerOrBlockTask+0x50>
 8012f84:	2301      	movs	r3, #1
 8012f86:	e000      	b.n	8012f8a <prvProcessTimerOrBlockTask+0x52>
 8012f88:	2300      	movs	r3, #0
 8012f8a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8012f8c:	4b0f      	ldr	r3, [pc, #60]	; (8012fcc <prvProcessTimerOrBlockTask+0x94>)
 8012f8e:	6818      	ldr	r0, [r3, #0]
 8012f90:	687a      	ldr	r2, [r7, #4]
 8012f92:	68fb      	ldr	r3, [r7, #12]
 8012f94:	1ad3      	subs	r3, r2, r3
 8012f96:	683a      	ldr	r2, [r7, #0]
 8012f98:	4619      	mov	r1, r3
 8012f9a:	f7fe fe7f 	bl	8011c9c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8012f9e:	f7ff f91b 	bl	80121d8 <xTaskResumeAll>
 8012fa2:	4603      	mov	r3, r0
 8012fa4:	2b00      	cmp	r3, #0
 8012fa6:	d10a      	bne.n	8012fbe <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8012fa8:	4b09      	ldr	r3, [pc, #36]	; (8012fd0 <prvProcessTimerOrBlockTask+0x98>)
 8012faa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012fae:	601a      	str	r2, [r3, #0]
 8012fb0:	f3bf 8f4f 	dsb	sy
 8012fb4:	f3bf 8f6f 	isb	sy
}
 8012fb8:	e001      	b.n	8012fbe <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8012fba:	f7ff f90d 	bl	80121d8 <xTaskResumeAll>
}
 8012fbe:	bf00      	nop
 8012fc0:	3710      	adds	r7, #16
 8012fc2:	46bd      	mov	sp, r7
 8012fc4:	bd80      	pop	{r7, pc}
 8012fc6:	bf00      	nop
 8012fc8:	24005504 	.word	0x24005504
 8012fcc:	24005508 	.word	0x24005508
 8012fd0:	e000ed04 	.word	0xe000ed04

08012fd4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8012fd4:	b480      	push	{r7}
 8012fd6:	b085      	sub	sp, #20
 8012fd8:	af00      	add	r7, sp, #0
 8012fda:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8012fdc:	4b0e      	ldr	r3, [pc, #56]	; (8013018 <prvGetNextExpireTime+0x44>)
 8012fde:	681b      	ldr	r3, [r3, #0]
 8012fe0:	681b      	ldr	r3, [r3, #0]
 8012fe2:	2b00      	cmp	r3, #0
 8012fe4:	d101      	bne.n	8012fea <prvGetNextExpireTime+0x16>
 8012fe6:	2201      	movs	r2, #1
 8012fe8:	e000      	b.n	8012fec <prvGetNextExpireTime+0x18>
 8012fea:	2200      	movs	r2, #0
 8012fec:	687b      	ldr	r3, [r7, #4]
 8012fee:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8012ff0:	687b      	ldr	r3, [r7, #4]
 8012ff2:	681b      	ldr	r3, [r3, #0]
 8012ff4:	2b00      	cmp	r3, #0
 8012ff6:	d105      	bne.n	8013004 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8012ff8:	4b07      	ldr	r3, [pc, #28]	; (8013018 <prvGetNextExpireTime+0x44>)
 8012ffa:	681b      	ldr	r3, [r3, #0]
 8012ffc:	68db      	ldr	r3, [r3, #12]
 8012ffe:	681b      	ldr	r3, [r3, #0]
 8013000:	60fb      	str	r3, [r7, #12]
 8013002:	e001      	b.n	8013008 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8013004:	2300      	movs	r3, #0
 8013006:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8013008:	68fb      	ldr	r3, [r7, #12]
}
 801300a:	4618      	mov	r0, r3
 801300c:	3714      	adds	r7, #20
 801300e:	46bd      	mov	sp, r7
 8013010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013014:	4770      	bx	lr
 8013016:	bf00      	nop
 8013018:	24005500 	.word	0x24005500

0801301c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 801301c:	b580      	push	{r7, lr}
 801301e:	b084      	sub	sp, #16
 8013020:	af00      	add	r7, sp, #0
 8013022:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8013024:	f7ff f976 	bl	8012314 <xTaskGetTickCount>
 8013028:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801302a:	4b0b      	ldr	r3, [pc, #44]	; (8013058 <prvSampleTimeNow+0x3c>)
 801302c:	681b      	ldr	r3, [r3, #0]
 801302e:	68fa      	ldr	r2, [r7, #12]
 8013030:	429a      	cmp	r2, r3
 8013032:	d205      	bcs.n	8013040 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8013034:	f000 f936 	bl	80132a4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8013038:	687b      	ldr	r3, [r7, #4]
 801303a:	2201      	movs	r2, #1
 801303c:	601a      	str	r2, [r3, #0]
 801303e:	e002      	b.n	8013046 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8013040:	687b      	ldr	r3, [r7, #4]
 8013042:	2200      	movs	r2, #0
 8013044:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8013046:	4a04      	ldr	r2, [pc, #16]	; (8013058 <prvSampleTimeNow+0x3c>)
 8013048:	68fb      	ldr	r3, [r7, #12]
 801304a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 801304c:	68fb      	ldr	r3, [r7, #12]
}
 801304e:	4618      	mov	r0, r3
 8013050:	3710      	adds	r7, #16
 8013052:	46bd      	mov	sp, r7
 8013054:	bd80      	pop	{r7, pc}
 8013056:	bf00      	nop
 8013058:	24005510 	.word	0x24005510

0801305c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 801305c:	b580      	push	{r7, lr}
 801305e:	b086      	sub	sp, #24
 8013060:	af00      	add	r7, sp, #0
 8013062:	60f8      	str	r0, [r7, #12]
 8013064:	60b9      	str	r1, [r7, #8]
 8013066:	607a      	str	r2, [r7, #4]
 8013068:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801306a:	2300      	movs	r3, #0
 801306c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801306e:	68fb      	ldr	r3, [r7, #12]
 8013070:	68ba      	ldr	r2, [r7, #8]
 8013072:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8013074:	68fb      	ldr	r3, [r7, #12]
 8013076:	68fa      	ldr	r2, [r7, #12]
 8013078:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801307a:	68ba      	ldr	r2, [r7, #8]
 801307c:	687b      	ldr	r3, [r7, #4]
 801307e:	429a      	cmp	r2, r3
 8013080:	d812      	bhi.n	80130a8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013082:	687a      	ldr	r2, [r7, #4]
 8013084:	683b      	ldr	r3, [r7, #0]
 8013086:	1ad2      	subs	r2, r2, r3
 8013088:	68fb      	ldr	r3, [r7, #12]
 801308a:	699b      	ldr	r3, [r3, #24]
 801308c:	429a      	cmp	r2, r3
 801308e:	d302      	bcc.n	8013096 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8013090:	2301      	movs	r3, #1
 8013092:	617b      	str	r3, [r7, #20]
 8013094:	e01b      	b.n	80130ce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8013096:	4b10      	ldr	r3, [pc, #64]	; (80130d8 <prvInsertTimerInActiveList+0x7c>)
 8013098:	681a      	ldr	r2, [r3, #0]
 801309a:	68fb      	ldr	r3, [r7, #12]
 801309c:	3304      	adds	r3, #4
 801309e:	4619      	mov	r1, r3
 80130a0:	4610      	mov	r0, r2
 80130a2:	f7fd fb70 	bl	8010786 <vListInsert>
 80130a6:	e012      	b.n	80130ce <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80130a8:	687a      	ldr	r2, [r7, #4]
 80130aa:	683b      	ldr	r3, [r7, #0]
 80130ac:	429a      	cmp	r2, r3
 80130ae:	d206      	bcs.n	80130be <prvInsertTimerInActiveList+0x62>
 80130b0:	68ba      	ldr	r2, [r7, #8]
 80130b2:	683b      	ldr	r3, [r7, #0]
 80130b4:	429a      	cmp	r2, r3
 80130b6:	d302      	bcc.n	80130be <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80130b8:	2301      	movs	r3, #1
 80130ba:	617b      	str	r3, [r7, #20]
 80130bc:	e007      	b.n	80130ce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80130be:	4b07      	ldr	r3, [pc, #28]	; (80130dc <prvInsertTimerInActiveList+0x80>)
 80130c0:	681a      	ldr	r2, [r3, #0]
 80130c2:	68fb      	ldr	r3, [r7, #12]
 80130c4:	3304      	adds	r3, #4
 80130c6:	4619      	mov	r1, r3
 80130c8:	4610      	mov	r0, r2
 80130ca:	f7fd fb5c 	bl	8010786 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80130ce:	697b      	ldr	r3, [r7, #20]
}
 80130d0:	4618      	mov	r0, r3
 80130d2:	3718      	adds	r7, #24
 80130d4:	46bd      	mov	sp, r7
 80130d6:	bd80      	pop	{r7, pc}
 80130d8:	24005504 	.word	0x24005504
 80130dc:	24005500 	.word	0x24005500

080130e0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80130e0:	b580      	push	{r7, lr}
 80130e2:	b08e      	sub	sp, #56	; 0x38
 80130e4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80130e6:	e0ca      	b.n	801327e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80130e8:	687b      	ldr	r3, [r7, #4]
 80130ea:	2b00      	cmp	r3, #0
 80130ec:	da18      	bge.n	8013120 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80130ee:	1d3b      	adds	r3, r7, #4
 80130f0:	3304      	adds	r3, #4
 80130f2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80130f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130f6:	2b00      	cmp	r3, #0
 80130f8:	d10a      	bne.n	8013110 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80130fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130fe:	f383 8811 	msr	BASEPRI, r3
 8013102:	f3bf 8f6f 	isb	sy
 8013106:	f3bf 8f4f 	dsb	sy
 801310a:	61fb      	str	r3, [r7, #28]
}
 801310c:	bf00      	nop
 801310e:	e7fe      	b.n	801310e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8013110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013112:	681b      	ldr	r3, [r3, #0]
 8013114:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013116:	6850      	ldr	r0, [r2, #4]
 8013118:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801311a:	6892      	ldr	r2, [r2, #8]
 801311c:	4611      	mov	r1, r2
 801311e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8013120:	687b      	ldr	r3, [r7, #4]
 8013122:	2b00      	cmp	r3, #0
 8013124:	f2c0 80ab 	blt.w	801327e <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8013128:	68fb      	ldr	r3, [r7, #12]
 801312a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801312c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801312e:	695b      	ldr	r3, [r3, #20]
 8013130:	2b00      	cmp	r3, #0
 8013132:	d004      	beq.n	801313e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8013134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013136:	3304      	adds	r3, #4
 8013138:	4618      	mov	r0, r3
 801313a:	f7fd fb5d 	bl	80107f8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801313e:	463b      	mov	r3, r7
 8013140:	4618      	mov	r0, r3
 8013142:	f7ff ff6b 	bl	801301c <prvSampleTimeNow>
 8013146:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8013148:	687b      	ldr	r3, [r7, #4]
 801314a:	2b09      	cmp	r3, #9
 801314c:	f200 8096 	bhi.w	801327c <prvProcessReceivedCommands+0x19c>
 8013150:	a201      	add	r2, pc, #4	; (adr r2, 8013158 <prvProcessReceivedCommands+0x78>)
 8013152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013156:	bf00      	nop
 8013158:	08013181 	.word	0x08013181
 801315c:	08013181 	.word	0x08013181
 8013160:	08013181 	.word	0x08013181
 8013164:	080131f5 	.word	0x080131f5
 8013168:	08013209 	.word	0x08013209
 801316c:	08013253 	.word	0x08013253
 8013170:	08013181 	.word	0x08013181
 8013174:	08013181 	.word	0x08013181
 8013178:	080131f5 	.word	0x080131f5
 801317c:	08013209 	.word	0x08013209
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8013180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013182:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013186:	f043 0301 	orr.w	r3, r3, #1
 801318a:	b2da      	uxtb	r2, r3
 801318c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801318e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8013192:	68ba      	ldr	r2, [r7, #8]
 8013194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013196:	699b      	ldr	r3, [r3, #24]
 8013198:	18d1      	adds	r1, r2, r3
 801319a:	68bb      	ldr	r3, [r7, #8]
 801319c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801319e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80131a0:	f7ff ff5c 	bl	801305c <prvInsertTimerInActiveList>
 80131a4:	4603      	mov	r3, r0
 80131a6:	2b00      	cmp	r3, #0
 80131a8:	d069      	beq.n	801327e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80131aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131ac:	6a1b      	ldr	r3, [r3, #32]
 80131ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80131b0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80131b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80131b8:	f003 0304 	and.w	r3, r3, #4
 80131bc:	2b00      	cmp	r3, #0
 80131be:	d05e      	beq.n	801327e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80131c0:	68ba      	ldr	r2, [r7, #8]
 80131c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131c4:	699b      	ldr	r3, [r3, #24]
 80131c6:	441a      	add	r2, r3
 80131c8:	2300      	movs	r3, #0
 80131ca:	9300      	str	r3, [sp, #0]
 80131cc:	2300      	movs	r3, #0
 80131ce:	2100      	movs	r1, #0
 80131d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80131d2:	f7ff fe05 	bl	8012de0 <xTimerGenericCommand>
 80131d6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80131d8:	6a3b      	ldr	r3, [r7, #32]
 80131da:	2b00      	cmp	r3, #0
 80131dc:	d14f      	bne.n	801327e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80131de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80131e2:	f383 8811 	msr	BASEPRI, r3
 80131e6:	f3bf 8f6f 	isb	sy
 80131ea:	f3bf 8f4f 	dsb	sy
 80131ee:	61bb      	str	r3, [r7, #24]
}
 80131f0:	bf00      	nop
 80131f2:	e7fe      	b.n	80131f2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80131f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80131fa:	f023 0301 	bic.w	r3, r3, #1
 80131fe:	b2da      	uxtb	r2, r3
 8013200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013202:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8013206:	e03a      	b.n	801327e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8013208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801320a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801320e:	f043 0301 	orr.w	r3, r3, #1
 8013212:	b2da      	uxtb	r2, r3
 8013214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013216:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801321a:	68ba      	ldr	r2, [r7, #8]
 801321c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801321e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8013220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013222:	699b      	ldr	r3, [r3, #24]
 8013224:	2b00      	cmp	r3, #0
 8013226:	d10a      	bne.n	801323e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8013228:	f04f 0350 	mov.w	r3, #80	; 0x50
 801322c:	f383 8811 	msr	BASEPRI, r3
 8013230:	f3bf 8f6f 	isb	sy
 8013234:	f3bf 8f4f 	dsb	sy
 8013238:	617b      	str	r3, [r7, #20]
}
 801323a:	bf00      	nop
 801323c:	e7fe      	b.n	801323c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801323e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013240:	699a      	ldr	r2, [r3, #24]
 8013242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013244:	18d1      	adds	r1, r2, r3
 8013246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013248:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801324a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801324c:	f7ff ff06 	bl	801305c <prvInsertTimerInActiveList>
					break;
 8013250:	e015      	b.n	801327e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8013252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013254:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013258:	f003 0302 	and.w	r3, r3, #2
 801325c:	2b00      	cmp	r3, #0
 801325e:	d103      	bne.n	8013268 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8013260:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013262:	f7fd f921 	bl	80104a8 <vPortFree>
 8013266:	e00a      	b.n	801327e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8013268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801326a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801326e:	f023 0301 	bic.w	r3, r3, #1
 8013272:	b2da      	uxtb	r2, r3
 8013274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013276:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801327a:	e000      	b.n	801327e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 801327c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801327e:	4b08      	ldr	r3, [pc, #32]	; (80132a0 <prvProcessReceivedCommands+0x1c0>)
 8013280:	681b      	ldr	r3, [r3, #0]
 8013282:	1d39      	adds	r1, r7, #4
 8013284:	2200      	movs	r2, #0
 8013286:	4618      	mov	r0, r3
 8013288:	f7fe f8fc 	bl	8011484 <xQueueReceive>
 801328c:	4603      	mov	r3, r0
 801328e:	2b00      	cmp	r3, #0
 8013290:	f47f af2a 	bne.w	80130e8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8013294:	bf00      	nop
 8013296:	bf00      	nop
 8013298:	3730      	adds	r7, #48	; 0x30
 801329a:	46bd      	mov	sp, r7
 801329c:	bd80      	pop	{r7, pc}
 801329e:	bf00      	nop
 80132a0:	24005508 	.word	0x24005508

080132a4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80132a4:	b580      	push	{r7, lr}
 80132a6:	b088      	sub	sp, #32
 80132a8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80132aa:	e048      	b.n	801333e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80132ac:	4b2d      	ldr	r3, [pc, #180]	; (8013364 <prvSwitchTimerLists+0xc0>)
 80132ae:	681b      	ldr	r3, [r3, #0]
 80132b0:	68db      	ldr	r3, [r3, #12]
 80132b2:	681b      	ldr	r3, [r3, #0]
 80132b4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80132b6:	4b2b      	ldr	r3, [pc, #172]	; (8013364 <prvSwitchTimerLists+0xc0>)
 80132b8:	681b      	ldr	r3, [r3, #0]
 80132ba:	68db      	ldr	r3, [r3, #12]
 80132bc:	68db      	ldr	r3, [r3, #12]
 80132be:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80132c0:	68fb      	ldr	r3, [r7, #12]
 80132c2:	3304      	adds	r3, #4
 80132c4:	4618      	mov	r0, r3
 80132c6:	f7fd fa97 	bl	80107f8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80132ca:	68fb      	ldr	r3, [r7, #12]
 80132cc:	6a1b      	ldr	r3, [r3, #32]
 80132ce:	68f8      	ldr	r0, [r7, #12]
 80132d0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80132d2:	68fb      	ldr	r3, [r7, #12]
 80132d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80132d8:	f003 0304 	and.w	r3, r3, #4
 80132dc:	2b00      	cmp	r3, #0
 80132de:	d02e      	beq.n	801333e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80132e0:	68fb      	ldr	r3, [r7, #12]
 80132e2:	699b      	ldr	r3, [r3, #24]
 80132e4:	693a      	ldr	r2, [r7, #16]
 80132e6:	4413      	add	r3, r2
 80132e8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80132ea:	68ba      	ldr	r2, [r7, #8]
 80132ec:	693b      	ldr	r3, [r7, #16]
 80132ee:	429a      	cmp	r2, r3
 80132f0:	d90e      	bls.n	8013310 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80132f2:	68fb      	ldr	r3, [r7, #12]
 80132f4:	68ba      	ldr	r2, [r7, #8]
 80132f6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80132f8:	68fb      	ldr	r3, [r7, #12]
 80132fa:	68fa      	ldr	r2, [r7, #12]
 80132fc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80132fe:	4b19      	ldr	r3, [pc, #100]	; (8013364 <prvSwitchTimerLists+0xc0>)
 8013300:	681a      	ldr	r2, [r3, #0]
 8013302:	68fb      	ldr	r3, [r7, #12]
 8013304:	3304      	adds	r3, #4
 8013306:	4619      	mov	r1, r3
 8013308:	4610      	mov	r0, r2
 801330a:	f7fd fa3c 	bl	8010786 <vListInsert>
 801330e:	e016      	b.n	801333e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8013310:	2300      	movs	r3, #0
 8013312:	9300      	str	r3, [sp, #0]
 8013314:	2300      	movs	r3, #0
 8013316:	693a      	ldr	r2, [r7, #16]
 8013318:	2100      	movs	r1, #0
 801331a:	68f8      	ldr	r0, [r7, #12]
 801331c:	f7ff fd60 	bl	8012de0 <xTimerGenericCommand>
 8013320:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8013322:	687b      	ldr	r3, [r7, #4]
 8013324:	2b00      	cmp	r3, #0
 8013326:	d10a      	bne.n	801333e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8013328:	f04f 0350 	mov.w	r3, #80	; 0x50
 801332c:	f383 8811 	msr	BASEPRI, r3
 8013330:	f3bf 8f6f 	isb	sy
 8013334:	f3bf 8f4f 	dsb	sy
 8013338:	603b      	str	r3, [r7, #0]
}
 801333a:	bf00      	nop
 801333c:	e7fe      	b.n	801333c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801333e:	4b09      	ldr	r3, [pc, #36]	; (8013364 <prvSwitchTimerLists+0xc0>)
 8013340:	681b      	ldr	r3, [r3, #0]
 8013342:	681b      	ldr	r3, [r3, #0]
 8013344:	2b00      	cmp	r3, #0
 8013346:	d1b1      	bne.n	80132ac <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8013348:	4b06      	ldr	r3, [pc, #24]	; (8013364 <prvSwitchTimerLists+0xc0>)
 801334a:	681b      	ldr	r3, [r3, #0]
 801334c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801334e:	4b06      	ldr	r3, [pc, #24]	; (8013368 <prvSwitchTimerLists+0xc4>)
 8013350:	681b      	ldr	r3, [r3, #0]
 8013352:	4a04      	ldr	r2, [pc, #16]	; (8013364 <prvSwitchTimerLists+0xc0>)
 8013354:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8013356:	4a04      	ldr	r2, [pc, #16]	; (8013368 <prvSwitchTimerLists+0xc4>)
 8013358:	697b      	ldr	r3, [r7, #20]
 801335a:	6013      	str	r3, [r2, #0]
}
 801335c:	bf00      	nop
 801335e:	3718      	adds	r7, #24
 8013360:	46bd      	mov	sp, r7
 8013362:	bd80      	pop	{r7, pc}
 8013364:	24005500 	.word	0x24005500
 8013368:	24005504 	.word	0x24005504

0801336c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 801336c:	b580      	push	{r7, lr}
 801336e:	b082      	sub	sp, #8
 8013370:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8013372:	f7fd fb97 	bl	8010aa4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8013376:	4b15      	ldr	r3, [pc, #84]	; (80133cc <prvCheckForValidListAndQueue+0x60>)
 8013378:	681b      	ldr	r3, [r3, #0]
 801337a:	2b00      	cmp	r3, #0
 801337c:	d120      	bne.n	80133c0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801337e:	4814      	ldr	r0, [pc, #80]	; (80133d0 <prvCheckForValidListAndQueue+0x64>)
 8013380:	f7fd f9b0 	bl	80106e4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8013384:	4813      	ldr	r0, [pc, #76]	; (80133d4 <prvCheckForValidListAndQueue+0x68>)
 8013386:	f7fd f9ad 	bl	80106e4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801338a:	4b13      	ldr	r3, [pc, #76]	; (80133d8 <prvCheckForValidListAndQueue+0x6c>)
 801338c:	4a10      	ldr	r2, [pc, #64]	; (80133d0 <prvCheckForValidListAndQueue+0x64>)
 801338e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8013390:	4b12      	ldr	r3, [pc, #72]	; (80133dc <prvCheckForValidListAndQueue+0x70>)
 8013392:	4a10      	ldr	r2, [pc, #64]	; (80133d4 <prvCheckForValidListAndQueue+0x68>)
 8013394:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8013396:	2300      	movs	r3, #0
 8013398:	9300      	str	r3, [sp, #0]
 801339a:	4b11      	ldr	r3, [pc, #68]	; (80133e0 <prvCheckForValidListAndQueue+0x74>)
 801339c:	4a11      	ldr	r2, [pc, #68]	; (80133e4 <prvCheckForValidListAndQueue+0x78>)
 801339e:	2110      	movs	r1, #16
 80133a0:	200a      	movs	r0, #10
 80133a2:	f7fd fd09 	bl	8010db8 <xQueueGenericCreateStatic>
 80133a6:	4603      	mov	r3, r0
 80133a8:	4a08      	ldr	r2, [pc, #32]	; (80133cc <prvCheckForValidListAndQueue+0x60>)
 80133aa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80133ac:	4b07      	ldr	r3, [pc, #28]	; (80133cc <prvCheckForValidListAndQueue+0x60>)
 80133ae:	681b      	ldr	r3, [r3, #0]
 80133b0:	2b00      	cmp	r3, #0
 80133b2:	d005      	beq.n	80133c0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80133b4:	4b05      	ldr	r3, [pc, #20]	; (80133cc <prvCheckForValidListAndQueue+0x60>)
 80133b6:	681b      	ldr	r3, [r3, #0]
 80133b8:	490b      	ldr	r1, [pc, #44]	; (80133e8 <prvCheckForValidListAndQueue+0x7c>)
 80133ba:	4618      	mov	r0, r3
 80133bc:	f7fe fc1a 	bl	8011bf4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80133c0:	f7fd fba0 	bl	8010b04 <vPortExitCritical>
}
 80133c4:	bf00      	nop
 80133c6:	46bd      	mov	sp, r7
 80133c8:	bd80      	pop	{r7, pc}
 80133ca:	bf00      	nop
 80133cc:	24005508 	.word	0x24005508
 80133d0:	240054d8 	.word	0x240054d8
 80133d4:	240054ec 	.word	0x240054ec
 80133d8:	24005500 	.word	0x24005500
 80133dc:	24005504 	.word	0x24005504
 80133e0:	240055b4 	.word	0x240055b4
 80133e4:	24005514 	.word	0x24005514
 80133e8:	08017ba8 	.word	0x08017ba8

080133ec <_ZdlPvj>:
 80133ec:	f000 b800 	b.w	80133f0 <_ZdlPv>

080133f0 <_ZdlPv>:
 80133f0:	f000 b808 	b.w	8013404 <free>

080133f4 <malloc>:
 80133f4:	4b02      	ldr	r3, [pc, #8]	; (8013400 <malloc+0xc>)
 80133f6:	4601      	mov	r1, r0
 80133f8:	6818      	ldr	r0, [r3, #0]
 80133fa:	f000 b82b 	b.w	8013454 <_malloc_r>
 80133fe:	bf00      	nop
 8013400:	2400006c 	.word	0x2400006c

08013404 <free>:
 8013404:	4b02      	ldr	r3, [pc, #8]	; (8013410 <free+0xc>)
 8013406:	4601      	mov	r1, r0
 8013408:	6818      	ldr	r0, [r3, #0]
 801340a:	f001 bf39 	b.w	8015280 <_free_r>
 801340e:	bf00      	nop
 8013410:	2400006c 	.word	0x2400006c

08013414 <sbrk_aligned>:
 8013414:	b570      	push	{r4, r5, r6, lr}
 8013416:	4e0e      	ldr	r6, [pc, #56]	; (8013450 <sbrk_aligned+0x3c>)
 8013418:	460c      	mov	r4, r1
 801341a:	6831      	ldr	r1, [r6, #0]
 801341c:	4605      	mov	r5, r0
 801341e:	b911      	cbnz	r1, 8013426 <sbrk_aligned+0x12>
 8013420:	f001 f8d4 	bl	80145cc <_sbrk_r>
 8013424:	6030      	str	r0, [r6, #0]
 8013426:	4621      	mov	r1, r4
 8013428:	4628      	mov	r0, r5
 801342a:	f001 f8cf 	bl	80145cc <_sbrk_r>
 801342e:	1c43      	adds	r3, r0, #1
 8013430:	d00a      	beq.n	8013448 <sbrk_aligned+0x34>
 8013432:	1cc4      	adds	r4, r0, #3
 8013434:	f024 0403 	bic.w	r4, r4, #3
 8013438:	42a0      	cmp	r0, r4
 801343a:	d007      	beq.n	801344c <sbrk_aligned+0x38>
 801343c:	1a21      	subs	r1, r4, r0
 801343e:	4628      	mov	r0, r5
 8013440:	f001 f8c4 	bl	80145cc <_sbrk_r>
 8013444:	3001      	adds	r0, #1
 8013446:	d101      	bne.n	801344c <sbrk_aligned+0x38>
 8013448:	f04f 34ff 	mov.w	r4, #4294967295
 801344c:	4620      	mov	r0, r4
 801344e:	bd70      	pop	{r4, r5, r6, pc}
 8013450:	24005608 	.word	0x24005608

08013454 <_malloc_r>:
 8013454:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013458:	1ccd      	adds	r5, r1, #3
 801345a:	f025 0503 	bic.w	r5, r5, #3
 801345e:	3508      	adds	r5, #8
 8013460:	2d0c      	cmp	r5, #12
 8013462:	bf38      	it	cc
 8013464:	250c      	movcc	r5, #12
 8013466:	2d00      	cmp	r5, #0
 8013468:	4607      	mov	r7, r0
 801346a:	db01      	blt.n	8013470 <_malloc_r+0x1c>
 801346c:	42a9      	cmp	r1, r5
 801346e:	d905      	bls.n	801347c <_malloc_r+0x28>
 8013470:	230c      	movs	r3, #12
 8013472:	603b      	str	r3, [r7, #0]
 8013474:	2600      	movs	r6, #0
 8013476:	4630      	mov	r0, r6
 8013478:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801347c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8013550 <_malloc_r+0xfc>
 8013480:	f000 f868 	bl	8013554 <__malloc_lock>
 8013484:	f8d8 3000 	ldr.w	r3, [r8]
 8013488:	461c      	mov	r4, r3
 801348a:	bb5c      	cbnz	r4, 80134e4 <_malloc_r+0x90>
 801348c:	4629      	mov	r1, r5
 801348e:	4638      	mov	r0, r7
 8013490:	f7ff ffc0 	bl	8013414 <sbrk_aligned>
 8013494:	1c43      	adds	r3, r0, #1
 8013496:	4604      	mov	r4, r0
 8013498:	d155      	bne.n	8013546 <_malloc_r+0xf2>
 801349a:	f8d8 4000 	ldr.w	r4, [r8]
 801349e:	4626      	mov	r6, r4
 80134a0:	2e00      	cmp	r6, #0
 80134a2:	d145      	bne.n	8013530 <_malloc_r+0xdc>
 80134a4:	2c00      	cmp	r4, #0
 80134a6:	d048      	beq.n	801353a <_malloc_r+0xe6>
 80134a8:	6823      	ldr	r3, [r4, #0]
 80134aa:	4631      	mov	r1, r6
 80134ac:	4638      	mov	r0, r7
 80134ae:	eb04 0903 	add.w	r9, r4, r3
 80134b2:	f001 f88b 	bl	80145cc <_sbrk_r>
 80134b6:	4581      	cmp	r9, r0
 80134b8:	d13f      	bne.n	801353a <_malloc_r+0xe6>
 80134ba:	6821      	ldr	r1, [r4, #0]
 80134bc:	1a6d      	subs	r5, r5, r1
 80134be:	4629      	mov	r1, r5
 80134c0:	4638      	mov	r0, r7
 80134c2:	f7ff ffa7 	bl	8013414 <sbrk_aligned>
 80134c6:	3001      	adds	r0, #1
 80134c8:	d037      	beq.n	801353a <_malloc_r+0xe6>
 80134ca:	6823      	ldr	r3, [r4, #0]
 80134cc:	442b      	add	r3, r5
 80134ce:	6023      	str	r3, [r4, #0]
 80134d0:	f8d8 3000 	ldr.w	r3, [r8]
 80134d4:	2b00      	cmp	r3, #0
 80134d6:	d038      	beq.n	801354a <_malloc_r+0xf6>
 80134d8:	685a      	ldr	r2, [r3, #4]
 80134da:	42a2      	cmp	r2, r4
 80134dc:	d12b      	bne.n	8013536 <_malloc_r+0xe2>
 80134de:	2200      	movs	r2, #0
 80134e0:	605a      	str	r2, [r3, #4]
 80134e2:	e00f      	b.n	8013504 <_malloc_r+0xb0>
 80134e4:	6822      	ldr	r2, [r4, #0]
 80134e6:	1b52      	subs	r2, r2, r5
 80134e8:	d41f      	bmi.n	801352a <_malloc_r+0xd6>
 80134ea:	2a0b      	cmp	r2, #11
 80134ec:	d917      	bls.n	801351e <_malloc_r+0xca>
 80134ee:	1961      	adds	r1, r4, r5
 80134f0:	42a3      	cmp	r3, r4
 80134f2:	6025      	str	r5, [r4, #0]
 80134f4:	bf18      	it	ne
 80134f6:	6059      	strne	r1, [r3, #4]
 80134f8:	6863      	ldr	r3, [r4, #4]
 80134fa:	bf08      	it	eq
 80134fc:	f8c8 1000 	streq.w	r1, [r8]
 8013500:	5162      	str	r2, [r4, r5]
 8013502:	604b      	str	r3, [r1, #4]
 8013504:	4638      	mov	r0, r7
 8013506:	f104 060b 	add.w	r6, r4, #11
 801350a:	f000 f829 	bl	8013560 <__malloc_unlock>
 801350e:	f026 0607 	bic.w	r6, r6, #7
 8013512:	1d23      	adds	r3, r4, #4
 8013514:	1af2      	subs	r2, r6, r3
 8013516:	d0ae      	beq.n	8013476 <_malloc_r+0x22>
 8013518:	1b9b      	subs	r3, r3, r6
 801351a:	50a3      	str	r3, [r4, r2]
 801351c:	e7ab      	b.n	8013476 <_malloc_r+0x22>
 801351e:	42a3      	cmp	r3, r4
 8013520:	6862      	ldr	r2, [r4, #4]
 8013522:	d1dd      	bne.n	80134e0 <_malloc_r+0x8c>
 8013524:	f8c8 2000 	str.w	r2, [r8]
 8013528:	e7ec      	b.n	8013504 <_malloc_r+0xb0>
 801352a:	4623      	mov	r3, r4
 801352c:	6864      	ldr	r4, [r4, #4]
 801352e:	e7ac      	b.n	801348a <_malloc_r+0x36>
 8013530:	4634      	mov	r4, r6
 8013532:	6876      	ldr	r6, [r6, #4]
 8013534:	e7b4      	b.n	80134a0 <_malloc_r+0x4c>
 8013536:	4613      	mov	r3, r2
 8013538:	e7cc      	b.n	80134d4 <_malloc_r+0x80>
 801353a:	230c      	movs	r3, #12
 801353c:	603b      	str	r3, [r7, #0]
 801353e:	4638      	mov	r0, r7
 8013540:	f000 f80e 	bl	8013560 <__malloc_unlock>
 8013544:	e797      	b.n	8013476 <_malloc_r+0x22>
 8013546:	6025      	str	r5, [r4, #0]
 8013548:	e7dc      	b.n	8013504 <_malloc_r+0xb0>
 801354a:	605b      	str	r3, [r3, #4]
 801354c:	deff      	udf	#255	; 0xff
 801354e:	bf00      	nop
 8013550:	24005604 	.word	0x24005604

08013554 <__malloc_lock>:
 8013554:	4801      	ldr	r0, [pc, #4]	; (801355c <__malloc_lock+0x8>)
 8013556:	f001 b886 	b.w	8014666 <__retarget_lock_acquire_recursive>
 801355a:	bf00      	nop
 801355c:	2400574c 	.word	0x2400574c

08013560 <__malloc_unlock>:
 8013560:	4801      	ldr	r0, [pc, #4]	; (8013568 <__malloc_unlock+0x8>)
 8013562:	f001 b881 	b.w	8014668 <__retarget_lock_release_recursive>
 8013566:	bf00      	nop
 8013568:	2400574c 	.word	0x2400574c

0801356c <__cvt>:
 801356c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801356e:	ed2d 8b02 	vpush	{d8}
 8013572:	eeb0 8b40 	vmov.f64	d8, d0
 8013576:	b085      	sub	sp, #20
 8013578:	4617      	mov	r7, r2
 801357a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801357c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801357e:	ee18 2a90 	vmov	r2, s17
 8013582:	f025 0520 	bic.w	r5, r5, #32
 8013586:	2a00      	cmp	r2, #0
 8013588:	bfb6      	itet	lt
 801358a:	222d      	movlt	r2, #45	; 0x2d
 801358c:	2200      	movge	r2, #0
 801358e:	eeb1 8b40 	vneglt.f64	d8, d0
 8013592:	2d46      	cmp	r5, #70	; 0x46
 8013594:	460c      	mov	r4, r1
 8013596:	701a      	strb	r2, [r3, #0]
 8013598:	d004      	beq.n	80135a4 <__cvt+0x38>
 801359a:	2d45      	cmp	r5, #69	; 0x45
 801359c:	d100      	bne.n	80135a0 <__cvt+0x34>
 801359e:	3401      	adds	r4, #1
 80135a0:	2102      	movs	r1, #2
 80135a2:	e000      	b.n	80135a6 <__cvt+0x3a>
 80135a4:	2103      	movs	r1, #3
 80135a6:	ab03      	add	r3, sp, #12
 80135a8:	9301      	str	r3, [sp, #4]
 80135aa:	ab02      	add	r3, sp, #8
 80135ac:	9300      	str	r3, [sp, #0]
 80135ae:	4622      	mov	r2, r4
 80135b0:	4633      	mov	r3, r6
 80135b2:	eeb0 0b48 	vmov.f64	d0, d8
 80135b6:	f001 f8f7 	bl	80147a8 <_dtoa_r>
 80135ba:	2d47      	cmp	r5, #71	; 0x47
 80135bc:	d101      	bne.n	80135c2 <__cvt+0x56>
 80135be:	07fb      	lsls	r3, r7, #31
 80135c0:	d51a      	bpl.n	80135f8 <__cvt+0x8c>
 80135c2:	2d46      	cmp	r5, #70	; 0x46
 80135c4:	eb00 0204 	add.w	r2, r0, r4
 80135c8:	d10c      	bne.n	80135e4 <__cvt+0x78>
 80135ca:	7803      	ldrb	r3, [r0, #0]
 80135cc:	2b30      	cmp	r3, #48	; 0x30
 80135ce:	d107      	bne.n	80135e0 <__cvt+0x74>
 80135d0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80135d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80135d8:	bf1c      	itt	ne
 80135da:	f1c4 0401 	rsbne	r4, r4, #1
 80135de:	6034      	strne	r4, [r6, #0]
 80135e0:	6833      	ldr	r3, [r6, #0]
 80135e2:	441a      	add	r2, r3
 80135e4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80135e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80135ec:	bf08      	it	eq
 80135ee:	9203      	streq	r2, [sp, #12]
 80135f0:	2130      	movs	r1, #48	; 0x30
 80135f2:	9b03      	ldr	r3, [sp, #12]
 80135f4:	4293      	cmp	r3, r2
 80135f6:	d307      	bcc.n	8013608 <__cvt+0x9c>
 80135f8:	9b03      	ldr	r3, [sp, #12]
 80135fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80135fc:	1a1b      	subs	r3, r3, r0
 80135fe:	6013      	str	r3, [r2, #0]
 8013600:	b005      	add	sp, #20
 8013602:	ecbd 8b02 	vpop	{d8}
 8013606:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013608:	1c5c      	adds	r4, r3, #1
 801360a:	9403      	str	r4, [sp, #12]
 801360c:	7019      	strb	r1, [r3, #0]
 801360e:	e7f0      	b.n	80135f2 <__cvt+0x86>

08013610 <__exponent>:
 8013610:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013612:	4603      	mov	r3, r0
 8013614:	2900      	cmp	r1, #0
 8013616:	bfb8      	it	lt
 8013618:	4249      	neglt	r1, r1
 801361a:	f803 2b02 	strb.w	r2, [r3], #2
 801361e:	bfb4      	ite	lt
 8013620:	222d      	movlt	r2, #45	; 0x2d
 8013622:	222b      	movge	r2, #43	; 0x2b
 8013624:	2909      	cmp	r1, #9
 8013626:	7042      	strb	r2, [r0, #1]
 8013628:	dd2a      	ble.n	8013680 <__exponent+0x70>
 801362a:	f10d 0207 	add.w	r2, sp, #7
 801362e:	4617      	mov	r7, r2
 8013630:	260a      	movs	r6, #10
 8013632:	4694      	mov	ip, r2
 8013634:	fb91 f5f6 	sdiv	r5, r1, r6
 8013638:	fb06 1415 	mls	r4, r6, r5, r1
 801363c:	3430      	adds	r4, #48	; 0x30
 801363e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8013642:	460c      	mov	r4, r1
 8013644:	2c63      	cmp	r4, #99	; 0x63
 8013646:	f102 32ff 	add.w	r2, r2, #4294967295
 801364a:	4629      	mov	r1, r5
 801364c:	dcf1      	bgt.n	8013632 <__exponent+0x22>
 801364e:	3130      	adds	r1, #48	; 0x30
 8013650:	f1ac 0402 	sub.w	r4, ip, #2
 8013654:	f802 1c01 	strb.w	r1, [r2, #-1]
 8013658:	1c41      	adds	r1, r0, #1
 801365a:	4622      	mov	r2, r4
 801365c:	42ba      	cmp	r2, r7
 801365e:	d30a      	bcc.n	8013676 <__exponent+0x66>
 8013660:	f10d 0209 	add.w	r2, sp, #9
 8013664:	eba2 020c 	sub.w	r2, r2, ip
 8013668:	42bc      	cmp	r4, r7
 801366a:	bf88      	it	hi
 801366c:	2200      	movhi	r2, #0
 801366e:	4413      	add	r3, r2
 8013670:	1a18      	subs	r0, r3, r0
 8013672:	b003      	add	sp, #12
 8013674:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013676:	f812 5b01 	ldrb.w	r5, [r2], #1
 801367a:	f801 5f01 	strb.w	r5, [r1, #1]!
 801367e:	e7ed      	b.n	801365c <__exponent+0x4c>
 8013680:	2330      	movs	r3, #48	; 0x30
 8013682:	3130      	adds	r1, #48	; 0x30
 8013684:	7083      	strb	r3, [r0, #2]
 8013686:	70c1      	strb	r1, [r0, #3]
 8013688:	1d03      	adds	r3, r0, #4
 801368a:	e7f1      	b.n	8013670 <__exponent+0x60>
 801368c:	0000      	movs	r0, r0
	...

08013690 <_printf_float>:
 8013690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013694:	b08b      	sub	sp, #44	; 0x2c
 8013696:	460c      	mov	r4, r1
 8013698:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 801369c:	4616      	mov	r6, r2
 801369e:	461f      	mov	r7, r3
 80136a0:	4605      	mov	r5, r0
 80136a2:	f000 ff05 	bl	80144b0 <_localeconv_r>
 80136a6:	f8d0 b000 	ldr.w	fp, [r0]
 80136aa:	4658      	mov	r0, fp
 80136ac:	f7ec fe68 	bl	8000380 <strlen>
 80136b0:	2300      	movs	r3, #0
 80136b2:	9308      	str	r3, [sp, #32]
 80136b4:	f8d8 3000 	ldr.w	r3, [r8]
 80136b8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80136bc:	6822      	ldr	r2, [r4, #0]
 80136be:	3307      	adds	r3, #7
 80136c0:	f023 0307 	bic.w	r3, r3, #7
 80136c4:	f103 0108 	add.w	r1, r3, #8
 80136c8:	f8c8 1000 	str.w	r1, [r8]
 80136cc:	ed93 0b00 	vldr	d0, [r3]
 80136d0:	ed9f 6b97 	vldr	d6, [pc, #604]	; 8013930 <_printf_float+0x2a0>
 80136d4:	eeb0 7bc0 	vabs.f64	d7, d0
 80136d8:	eeb4 7b46 	vcmp.f64	d7, d6
 80136dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80136e0:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 80136e4:	4682      	mov	sl, r0
 80136e6:	dd24      	ble.n	8013732 <_printf_float+0xa2>
 80136e8:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80136ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80136f0:	d502      	bpl.n	80136f8 <_printf_float+0x68>
 80136f2:	232d      	movs	r3, #45	; 0x2d
 80136f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80136f8:	498f      	ldr	r1, [pc, #572]	; (8013938 <_printf_float+0x2a8>)
 80136fa:	4b90      	ldr	r3, [pc, #576]	; (801393c <_printf_float+0x2ac>)
 80136fc:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8013700:	bf94      	ite	ls
 8013702:	4688      	movls	r8, r1
 8013704:	4698      	movhi	r8, r3
 8013706:	2303      	movs	r3, #3
 8013708:	6123      	str	r3, [r4, #16]
 801370a:	f022 0204 	bic.w	r2, r2, #4
 801370e:	2300      	movs	r3, #0
 8013710:	6022      	str	r2, [r4, #0]
 8013712:	9304      	str	r3, [sp, #16]
 8013714:	9700      	str	r7, [sp, #0]
 8013716:	4633      	mov	r3, r6
 8013718:	aa09      	add	r2, sp, #36	; 0x24
 801371a:	4621      	mov	r1, r4
 801371c:	4628      	mov	r0, r5
 801371e:	f000 f9d1 	bl	8013ac4 <_printf_common>
 8013722:	3001      	adds	r0, #1
 8013724:	f040 808a 	bne.w	801383c <_printf_float+0x1ac>
 8013728:	f04f 30ff 	mov.w	r0, #4294967295
 801372c:	b00b      	add	sp, #44	; 0x2c
 801372e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013732:	eeb4 0b40 	vcmp.f64	d0, d0
 8013736:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801373a:	d709      	bvc.n	8013750 <_printf_float+0xc0>
 801373c:	ee10 3a90 	vmov	r3, s1
 8013740:	2b00      	cmp	r3, #0
 8013742:	bfbc      	itt	lt
 8013744:	232d      	movlt	r3, #45	; 0x2d
 8013746:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801374a:	497d      	ldr	r1, [pc, #500]	; (8013940 <_printf_float+0x2b0>)
 801374c:	4b7d      	ldr	r3, [pc, #500]	; (8013944 <_printf_float+0x2b4>)
 801374e:	e7d5      	b.n	80136fc <_printf_float+0x6c>
 8013750:	6863      	ldr	r3, [r4, #4]
 8013752:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8013756:	9104      	str	r1, [sp, #16]
 8013758:	1c59      	adds	r1, r3, #1
 801375a:	d13c      	bne.n	80137d6 <_printf_float+0x146>
 801375c:	2306      	movs	r3, #6
 801375e:	6063      	str	r3, [r4, #4]
 8013760:	2300      	movs	r3, #0
 8013762:	9303      	str	r3, [sp, #12]
 8013764:	ab08      	add	r3, sp, #32
 8013766:	e9cd 9301 	strd	r9, r3, [sp, #4]
 801376a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801376e:	ab07      	add	r3, sp, #28
 8013770:	6861      	ldr	r1, [r4, #4]
 8013772:	9300      	str	r3, [sp, #0]
 8013774:	6022      	str	r2, [r4, #0]
 8013776:	f10d 031b 	add.w	r3, sp, #27
 801377a:	4628      	mov	r0, r5
 801377c:	f7ff fef6 	bl	801356c <__cvt>
 8013780:	9b04      	ldr	r3, [sp, #16]
 8013782:	9907      	ldr	r1, [sp, #28]
 8013784:	2b47      	cmp	r3, #71	; 0x47
 8013786:	4680      	mov	r8, r0
 8013788:	d108      	bne.n	801379c <_printf_float+0x10c>
 801378a:	1cc8      	adds	r0, r1, #3
 801378c:	db02      	blt.n	8013794 <_printf_float+0x104>
 801378e:	6863      	ldr	r3, [r4, #4]
 8013790:	4299      	cmp	r1, r3
 8013792:	dd41      	ble.n	8013818 <_printf_float+0x188>
 8013794:	f1a9 0902 	sub.w	r9, r9, #2
 8013798:	fa5f f989 	uxtb.w	r9, r9
 801379c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80137a0:	d820      	bhi.n	80137e4 <_printf_float+0x154>
 80137a2:	3901      	subs	r1, #1
 80137a4:	464a      	mov	r2, r9
 80137a6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80137aa:	9107      	str	r1, [sp, #28]
 80137ac:	f7ff ff30 	bl	8013610 <__exponent>
 80137b0:	9a08      	ldr	r2, [sp, #32]
 80137b2:	9004      	str	r0, [sp, #16]
 80137b4:	1813      	adds	r3, r2, r0
 80137b6:	2a01      	cmp	r2, #1
 80137b8:	6123      	str	r3, [r4, #16]
 80137ba:	dc02      	bgt.n	80137c2 <_printf_float+0x132>
 80137bc:	6822      	ldr	r2, [r4, #0]
 80137be:	07d2      	lsls	r2, r2, #31
 80137c0:	d501      	bpl.n	80137c6 <_printf_float+0x136>
 80137c2:	3301      	adds	r3, #1
 80137c4:	6123      	str	r3, [r4, #16]
 80137c6:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80137ca:	2b00      	cmp	r3, #0
 80137cc:	d0a2      	beq.n	8013714 <_printf_float+0x84>
 80137ce:	232d      	movs	r3, #45	; 0x2d
 80137d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80137d4:	e79e      	b.n	8013714 <_printf_float+0x84>
 80137d6:	9904      	ldr	r1, [sp, #16]
 80137d8:	2947      	cmp	r1, #71	; 0x47
 80137da:	d1c1      	bne.n	8013760 <_printf_float+0xd0>
 80137dc:	2b00      	cmp	r3, #0
 80137de:	d1bf      	bne.n	8013760 <_printf_float+0xd0>
 80137e0:	2301      	movs	r3, #1
 80137e2:	e7bc      	b.n	801375e <_printf_float+0xce>
 80137e4:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80137e8:	d118      	bne.n	801381c <_printf_float+0x18c>
 80137ea:	2900      	cmp	r1, #0
 80137ec:	6863      	ldr	r3, [r4, #4]
 80137ee:	dd0b      	ble.n	8013808 <_printf_float+0x178>
 80137f0:	6121      	str	r1, [r4, #16]
 80137f2:	b913      	cbnz	r3, 80137fa <_printf_float+0x16a>
 80137f4:	6822      	ldr	r2, [r4, #0]
 80137f6:	07d0      	lsls	r0, r2, #31
 80137f8:	d502      	bpl.n	8013800 <_printf_float+0x170>
 80137fa:	3301      	adds	r3, #1
 80137fc:	440b      	add	r3, r1
 80137fe:	6123      	str	r3, [r4, #16]
 8013800:	2300      	movs	r3, #0
 8013802:	65a1      	str	r1, [r4, #88]	; 0x58
 8013804:	9304      	str	r3, [sp, #16]
 8013806:	e7de      	b.n	80137c6 <_printf_float+0x136>
 8013808:	b913      	cbnz	r3, 8013810 <_printf_float+0x180>
 801380a:	6822      	ldr	r2, [r4, #0]
 801380c:	07d2      	lsls	r2, r2, #31
 801380e:	d501      	bpl.n	8013814 <_printf_float+0x184>
 8013810:	3302      	adds	r3, #2
 8013812:	e7f4      	b.n	80137fe <_printf_float+0x16e>
 8013814:	2301      	movs	r3, #1
 8013816:	e7f2      	b.n	80137fe <_printf_float+0x16e>
 8013818:	f04f 0967 	mov.w	r9, #103	; 0x67
 801381c:	9b08      	ldr	r3, [sp, #32]
 801381e:	4299      	cmp	r1, r3
 8013820:	db05      	blt.n	801382e <_printf_float+0x19e>
 8013822:	6823      	ldr	r3, [r4, #0]
 8013824:	6121      	str	r1, [r4, #16]
 8013826:	07d8      	lsls	r0, r3, #31
 8013828:	d5ea      	bpl.n	8013800 <_printf_float+0x170>
 801382a:	1c4b      	adds	r3, r1, #1
 801382c:	e7e7      	b.n	80137fe <_printf_float+0x16e>
 801382e:	2900      	cmp	r1, #0
 8013830:	bfd4      	ite	le
 8013832:	f1c1 0202 	rsble	r2, r1, #2
 8013836:	2201      	movgt	r2, #1
 8013838:	4413      	add	r3, r2
 801383a:	e7e0      	b.n	80137fe <_printf_float+0x16e>
 801383c:	6823      	ldr	r3, [r4, #0]
 801383e:	055a      	lsls	r2, r3, #21
 8013840:	d407      	bmi.n	8013852 <_printf_float+0x1c2>
 8013842:	6923      	ldr	r3, [r4, #16]
 8013844:	4642      	mov	r2, r8
 8013846:	4631      	mov	r1, r6
 8013848:	4628      	mov	r0, r5
 801384a:	47b8      	blx	r7
 801384c:	3001      	adds	r0, #1
 801384e:	d12a      	bne.n	80138a6 <_printf_float+0x216>
 8013850:	e76a      	b.n	8013728 <_printf_float+0x98>
 8013852:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8013856:	f240 80e0 	bls.w	8013a1a <_printf_float+0x38a>
 801385a:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801385e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8013862:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013866:	d133      	bne.n	80138d0 <_printf_float+0x240>
 8013868:	4a37      	ldr	r2, [pc, #220]	; (8013948 <_printf_float+0x2b8>)
 801386a:	2301      	movs	r3, #1
 801386c:	4631      	mov	r1, r6
 801386e:	4628      	mov	r0, r5
 8013870:	47b8      	blx	r7
 8013872:	3001      	adds	r0, #1
 8013874:	f43f af58 	beq.w	8013728 <_printf_float+0x98>
 8013878:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801387c:	429a      	cmp	r2, r3
 801387e:	db02      	blt.n	8013886 <_printf_float+0x1f6>
 8013880:	6823      	ldr	r3, [r4, #0]
 8013882:	07d8      	lsls	r0, r3, #31
 8013884:	d50f      	bpl.n	80138a6 <_printf_float+0x216>
 8013886:	4653      	mov	r3, sl
 8013888:	465a      	mov	r2, fp
 801388a:	4631      	mov	r1, r6
 801388c:	4628      	mov	r0, r5
 801388e:	47b8      	blx	r7
 8013890:	3001      	adds	r0, #1
 8013892:	f43f af49 	beq.w	8013728 <_printf_float+0x98>
 8013896:	f04f 0800 	mov.w	r8, #0
 801389a:	f104 091a 	add.w	r9, r4, #26
 801389e:	9b08      	ldr	r3, [sp, #32]
 80138a0:	3b01      	subs	r3, #1
 80138a2:	4543      	cmp	r3, r8
 80138a4:	dc09      	bgt.n	80138ba <_printf_float+0x22a>
 80138a6:	6823      	ldr	r3, [r4, #0]
 80138a8:	079b      	lsls	r3, r3, #30
 80138aa:	f100 8106 	bmi.w	8013aba <_printf_float+0x42a>
 80138ae:	68e0      	ldr	r0, [r4, #12]
 80138b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80138b2:	4298      	cmp	r0, r3
 80138b4:	bfb8      	it	lt
 80138b6:	4618      	movlt	r0, r3
 80138b8:	e738      	b.n	801372c <_printf_float+0x9c>
 80138ba:	2301      	movs	r3, #1
 80138bc:	464a      	mov	r2, r9
 80138be:	4631      	mov	r1, r6
 80138c0:	4628      	mov	r0, r5
 80138c2:	47b8      	blx	r7
 80138c4:	3001      	adds	r0, #1
 80138c6:	f43f af2f 	beq.w	8013728 <_printf_float+0x98>
 80138ca:	f108 0801 	add.w	r8, r8, #1
 80138ce:	e7e6      	b.n	801389e <_printf_float+0x20e>
 80138d0:	9b07      	ldr	r3, [sp, #28]
 80138d2:	2b00      	cmp	r3, #0
 80138d4:	dc3a      	bgt.n	801394c <_printf_float+0x2bc>
 80138d6:	4a1c      	ldr	r2, [pc, #112]	; (8013948 <_printf_float+0x2b8>)
 80138d8:	2301      	movs	r3, #1
 80138da:	4631      	mov	r1, r6
 80138dc:	4628      	mov	r0, r5
 80138de:	47b8      	blx	r7
 80138e0:	3001      	adds	r0, #1
 80138e2:	f43f af21 	beq.w	8013728 <_printf_float+0x98>
 80138e6:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 80138ea:	4313      	orrs	r3, r2
 80138ec:	d102      	bne.n	80138f4 <_printf_float+0x264>
 80138ee:	6823      	ldr	r3, [r4, #0]
 80138f0:	07d9      	lsls	r1, r3, #31
 80138f2:	d5d8      	bpl.n	80138a6 <_printf_float+0x216>
 80138f4:	4653      	mov	r3, sl
 80138f6:	465a      	mov	r2, fp
 80138f8:	4631      	mov	r1, r6
 80138fa:	4628      	mov	r0, r5
 80138fc:	47b8      	blx	r7
 80138fe:	3001      	adds	r0, #1
 8013900:	f43f af12 	beq.w	8013728 <_printf_float+0x98>
 8013904:	f04f 0900 	mov.w	r9, #0
 8013908:	f104 0a1a 	add.w	sl, r4, #26
 801390c:	9b07      	ldr	r3, [sp, #28]
 801390e:	425b      	negs	r3, r3
 8013910:	454b      	cmp	r3, r9
 8013912:	dc01      	bgt.n	8013918 <_printf_float+0x288>
 8013914:	9b08      	ldr	r3, [sp, #32]
 8013916:	e795      	b.n	8013844 <_printf_float+0x1b4>
 8013918:	2301      	movs	r3, #1
 801391a:	4652      	mov	r2, sl
 801391c:	4631      	mov	r1, r6
 801391e:	4628      	mov	r0, r5
 8013920:	47b8      	blx	r7
 8013922:	3001      	adds	r0, #1
 8013924:	f43f af00 	beq.w	8013728 <_printf_float+0x98>
 8013928:	f109 0901 	add.w	r9, r9, #1
 801392c:	e7ee      	b.n	801390c <_printf_float+0x27c>
 801392e:	bf00      	nop
 8013930:	ffffffff 	.word	0xffffffff
 8013934:	7fefffff 	.word	0x7fefffff
 8013938:	08017cfc 	.word	0x08017cfc
 801393c:	08017d00 	.word	0x08017d00
 8013940:	08017d04 	.word	0x08017d04
 8013944:	08017d08 	.word	0x08017d08
 8013948:	08017d0c 	.word	0x08017d0c
 801394c:	9a08      	ldr	r2, [sp, #32]
 801394e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8013950:	429a      	cmp	r2, r3
 8013952:	bfa8      	it	ge
 8013954:	461a      	movge	r2, r3
 8013956:	2a00      	cmp	r2, #0
 8013958:	4691      	mov	r9, r2
 801395a:	dc38      	bgt.n	80139ce <_printf_float+0x33e>
 801395c:	2300      	movs	r3, #0
 801395e:	9305      	str	r3, [sp, #20]
 8013960:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013964:	f104 021a 	add.w	r2, r4, #26
 8013968:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801396a:	9905      	ldr	r1, [sp, #20]
 801396c:	9304      	str	r3, [sp, #16]
 801396e:	eba3 0309 	sub.w	r3, r3, r9
 8013972:	428b      	cmp	r3, r1
 8013974:	dc33      	bgt.n	80139de <_printf_float+0x34e>
 8013976:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801397a:	429a      	cmp	r2, r3
 801397c:	db3c      	blt.n	80139f8 <_printf_float+0x368>
 801397e:	6823      	ldr	r3, [r4, #0]
 8013980:	07da      	lsls	r2, r3, #31
 8013982:	d439      	bmi.n	80139f8 <_printf_float+0x368>
 8013984:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8013988:	eba2 0903 	sub.w	r9, r2, r3
 801398c:	9b04      	ldr	r3, [sp, #16]
 801398e:	1ad2      	subs	r2, r2, r3
 8013990:	4591      	cmp	r9, r2
 8013992:	bfa8      	it	ge
 8013994:	4691      	movge	r9, r2
 8013996:	f1b9 0f00 	cmp.w	r9, #0
 801399a:	dc35      	bgt.n	8013a08 <_printf_float+0x378>
 801399c:	f04f 0800 	mov.w	r8, #0
 80139a0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80139a4:	f104 0a1a 	add.w	sl, r4, #26
 80139a8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80139ac:	1a9b      	subs	r3, r3, r2
 80139ae:	eba3 0309 	sub.w	r3, r3, r9
 80139b2:	4543      	cmp	r3, r8
 80139b4:	f77f af77 	ble.w	80138a6 <_printf_float+0x216>
 80139b8:	2301      	movs	r3, #1
 80139ba:	4652      	mov	r2, sl
 80139bc:	4631      	mov	r1, r6
 80139be:	4628      	mov	r0, r5
 80139c0:	47b8      	blx	r7
 80139c2:	3001      	adds	r0, #1
 80139c4:	f43f aeb0 	beq.w	8013728 <_printf_float+0x98>
 80139c8:	f108 0801 	add.w	r8, r8, #1
 80139cc:	e7ec      	b.n	80139a8 <_printf_float+0x318>
 80139ce:	4613      	mov	r3, r2
 80139d0:	4631      	mov	r1, r6
 80139d2:	4642      	mov	r2, r8
 80139d4:	4628      	mov	r0, r5
 80139d6:	47b8      	blx	r7
 80139d8:	3001      	adds	r0, #1
 80139da:	d1bf      	bne.n	801395c <_printf_float+0x2cc>
 80139dc:	e6a4      	b.n	8013728 <_printf_float+0x98>
 80139de:	2301      	movs	r3, #1
 80139e0:	4631      	mov	r1, r6
 80139e2:	4628      	mov	r0, r5
 80139e4:	9204      	str	r2, [sp, #16]
 80139e6:	47b8      	blx	r7
 80139e8:	3001      	adds	r0, #1
 80139ea:	f43f ae9d 	beq.w	8013728 <_printf_float+0x98>
 80139ee:	9b05      	ldr	r3, [sp, #20]
 80139f0:	9a04      	ldr	r2, [sp, #16]
 80139f2:	3301      	adds	r3, #1
 80139f4:	9305      	str	r3, [sp, #20]
 80139f6:	e7b7      	b.n	8013968 <_printf_float+0x2d8>
 80139f8:	4653      	mov	r3, sl
 80139fa:	465a      	mov	r2, fp
 80139fc:	4631      	mov	r1, r6
 80139fe:	4628      	mov	r0, r5
 8013a00:	47b8      	blx	r7
 8013a02:	3001      	adds	r0, #1
 8013a04:	d1be      	bne.n	8013984 <_printf_float+0x2f4>
 8013a06:	e68f      	b.n	8013728 <_printf_float+0x98>
 8013a08:	9a04      	ldr	r2, [sp, #16]
 8013a0a:	464b      	mov	r3, r9
 8013a0c:	4442      	add	r2, r8
 8013a0e:	4631      	mov	r1, r6
 8013a10:	4628      	mov	r0, r5
 8013a12:	47b8      	blx	r7
 8013a14:	3001      	adds	r0, #1
 8013a16:	d1c1      	bne.n	801399c <_printf_float+0x30c>
 8013a18:	e686      	b.n	8013728 <_printf_float+0x98>
 8013a1a:	9a08      	ldr	r2, [sp, #32]
 8013a1c:	2a01      	cmp	r2, #1
 8013a1e:	dc01      	bgt.n	8013a24 <_printf_float+0x394>
 8013a20:	07db      	lsls	r3, r3, #31
 8013a22:	d537      	bpl.n	8013a94 <_printf_float+0x404>
 8013a24:	2301      	movs	r3, #1
 8013a26:	4642      	mov	r2, r8
 8013a28:	4631      	mov	r1, r6
 8013a2a:	4628      	mov	r0, r5
 8013a2c:	47b8      	blx	r7
 8013a2e:	3001      	adds	r0, #1
 8013a30:	f43f ae7a 	beq.w	8013728 <_printf_float+0x98>
 8013a34:	4653      	mov	r3, sl
 8013a36:	465a      	mov	r2, fp
 8013a38:	4631      	mov	r1, r6
 8013a3a:	4628      	mov	r0, r5
 8013a3c:	47b8      	blx	r7
 8013a3e:	3001      	adds	r0, #1
 8013a40:	f43f ae72 	beq.w	8013728 <_printf_float+0x98>
 8013a44:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8013a48:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8013a4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a50:	9b08      	ldr	r3, [sp, #32]
 8013a52:	d01a      	beq.n	8013a8a <_printf_float+0x3fa>
 8013a54:	3b01      	subs	r3, #1
 8013a56:	f108 0201 	add.w	r2, r8, #1
 8013a5a:	4631      	mov	r1, r6
 8013a5c:	4628      	mov	r0, r5
 8013a5e:	47b8      	blx	r7
 8013a60:	3001      	adds	r0, #1
 8013a62:	d10e      	bne.n	8013a82 <_printf_float+0x3f2>
 8013a64:	e660      	b.n	8013728 <_printf_float+0x98>
 8013a66:	2301      	movs	r3, #1
 8013a68:	464a      	mov	r2, r9
 8013a6a:	4631      	mov	r1, r6
 8013a6c:	4628      	mov	r0, r5
 8013a6e:	47b8      	blx	r7
 8013a70:	3001      	adds	r0, #1
 8013a72:	f43f ae59 	beq.w	8013728 <_printf_float+0x98>
 8013a76:	f108 0801 	add.w	r8, r8, #1
 8013a7a:	9b08      	ldr	r3, [sp, #32]
 8013a7c:	3b01      	subs	r3, #1
 8013a7e:	4543      	cmp	r3, r8
 8013a80:	dcf1      	bgt.n	8013a66 <_printf_float+0x3d6>
 8013a82:	9b04      	ldr	r3, [sp, #16]
 8013a84:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8013a88:	e6dd      	b.n	8013846 <_printf_float+0x1b6>
 8013a8a:	f04f 0800 	mov.w	r8, #0
 8013a8e:	f104 091a 	add.w	r9, r4, #26
 8013a92:	e7f2      	b.n	8013a7a <_printf_float+0x3ea>
 8013a94:	2301      	movs	r3, #1
 8013a96:	4642      	mov	r2, r8
 8013a98:	e7df      	b.n	8013a5a <_printf_float+0x3ca>
 8013a9a:	2301      	movs	r3, #1
 8013a9c:	464a      	mov	r2, r9
 8013a9e:	4631      	mov	r1, r6
 8013aa0:	4628      	mov	r0, r5
 8013aa2:	47b8      	blx	r7
 8013aa4:	3001      	adds	r0, #1
 8013aa6:	f43f ae3f 	beq.w	8013728 <_printf_float+0x98>
 8013aaa:	f108 0801 	add.w	r8, r8, #1
 8013aae:	68e3      	ldr	r3, [r4, #12]
 8013ab0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013ab2:	1a5b      	subs	r3, r3, r1
 8013ab4:	4543      	cmp	r3, r8
 8013ab6:	dcf0      	bgt.n	8013a9a <_printf_float+0x40a>
 8013ab8:	e6f9      	b.n	80138ae <_printf_float+0x21e>
 8013aba:	f04f 0800 	mov.w	r8, #0
 8013abe:	f104 0919 	add.w	r9, r4, #25
 8013ac2:	e7f4      	b.n	8013aae <_printf_float+0x41e>

08013ac4 <_printf_common>:
 8013ac4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013ac8:	4616      	mov	r6, r2
 8013aca:	4699      	mov	r9, r3
 8013acc:	688a      	ldr	r2, [r1, #8]
 8013ace:	690b      	ldr	r3, [r1, #16]
 8013ad0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013ad4:	4293      	cmp	r3, r2
 8013ad6:	bfb8      	it	lt
 8013ad8:	4613      	movlt	r3, r2
 8013ada:	6033      	str	r3, [r6, #0]
 8013adc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013ae0:	4607      	mov	r7, r0
 8013ae2:	460c      	mov	r4, r1
 8013ae4:	b10a      	cbz	r2, 8013aea <_printf_common+0x26>
 8013ae6:	3301      	adds	r3, #1
 8013ae8:	6033      	str	r3, [r6, #0]
 8013aea:	6823      	ldr	r3, [r4, #0]
 8013aec:	0699      	lsls	r1, r3, #26
 8013aee:	bf42      	ittt	mi
 8013af0:	6833      	ldrmi	r3, [r6, #0]
 8013af2:	3302      	addmi	r3, #2
 8013af4:	6033      	strmi	r3, [r6, #0]
 8013af6:	6825      	ldr	r5, [r4, #0]
 8013af8:	f015 0506 	ands.w	r5, r5, #6
 8013afc:	d106      	bne.n	8013b0c <_printf_common+0x48>
 8013afe:	f104 0a19 	add.w	sl, r4, #25
 8013b02:	68e3      	ldr	r3, [r4, #12]
 8013b04:	6832      	ldr	r2, [r6, #0]
 8013b06:	1a9b      	subs	r3, r3, r2
 8013b08:	42ab      	cmp	r3, r5
 8013b0a:	dc26      	bgt.n	8013b5a <_printf_common+0x96>
 8013b0c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8013b10:	1e13      	subs	r3, r2, #0
 8013b12:	6822      	ldr	r2, [r4, #0]
 8013b14:	bf18      	it	ne
 8013b16:	2301      	movne	r3, #1
 8013b18:	0692      	lsls	r2, r2, #26
 8013b1a:	d42b      	bmi.n	8013b74 <_printf_common+0xb0>
 8013b1c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013b20:	4649      	mov	r1, r9
 8013b22:	4638      	mov	r0, r7
 8013b24:	47c0      	blx	r8
 8013b26:	3001      	adds	r0, #1
 8013b28:	d01e      	beq.n	8013b68 <_printf_common+0xa4>
 8013b2a:	6823      	ldr	r3, [r4, #0]
 8013b2c:	6922      	ldr	r2, [r4, #16]
 8013b2e:	f003 0306 	and.w	r3, r3, #6
 8013b32:	2b04      	cmp	r3, #4
 8013b34:	bf02      	ittt	eq
 8013b36:	68e5      	ldreq	r5, [r4, #12]
 8013b38:	6833      	ldreq	r3, [r6, #0]
 8013b3a:	1aed      	subeq	r5, r5, r3
 8013b3c:	68a3      	ldr	r3, [r4, #8]
 8013b3e:	bf0c      	ite	eq
 8013b40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013b44:	2500      	movne	r5, #0
 8013b46:	4293      	cmp	r3, r2
 8013b48:	bfc4      	itt	gt
 8013b4a:	1a9b      	subgt	r3, r3, r2
 8013b4c:	18ed      	addgt	r5, r5, r3
 8013b4e:	2600      	movs	r6, #0
 8013b50:	341a      	adds	r4, #26
 8013b52:	42b5      	cmp	r5, r6
 8013b54:	d11a      	bne.n	8013b8c <_printf_common+0xc8>
 8013b56:	2000      	movs	r0, #0
 8013b58:	e008      	b.n	8013b6c <_printf_common+0xa8>
 8013b5a:	2301      	movs	r3, #1
 8013b5c:	4652      	mov	r2, sl
 8013b5e:	4649      	mov	r1, r9
 8013b60:	4638      	mov	r0, r7
 8013b62:	47c0      	blx	r8
 8013b64:	3001      	adds	r0, #1
 8013b66:	d103      	bne.n	8013b70 <_printf_common+0xac>
 8013b68:	f04f 30ff 	mov.w	r0, #4294967295
 8013b6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013b70:	3501      	adds	r5, #1
 8013b72:	e7c6      	b.n	8013b02 <_printf_common+0x3e>
 8013b74:	18e1      	adds	r1, r4, r3
 8013b76:	1c5a      	adds	r2, r3, #1
 8013b78:	2030      	movs	r0, #48	; 0x30
 8013b7a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8013b7e:	4422      	add	r2, r4
 8013b80:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8013b84:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8013b88:	3302      	adds	r3, #2
 8013b8a:	e7c7      	b.n	8013b1c <_printf_common+0x58>
 8013b8c:	2301      	movs	r3, #1
 8013b8e:	4622      	mov	r2, r4
 8013b90:	4649      	mov	r1, r9
 8013b92:	4638      	mov	r0, r7
 8013b94:	47c0      	blx	r8
 8013b96:	3001      	adds	r0, #1
 8013b98:	d0e6      	beq.n	8013b68 <_printf_common+0xa4>
 8013b9a:	3601      	adds	r6, #1
 8013b9c:	e7d9      	b.n	8013b52 <_printf_common+0x8e>
	...

08013ba0 <_printf_i>:
 8013ba0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013ba4:	7e0f      	ldrb	r7, [r1, #24]
 8013ba6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8013ba8:	2f78      	cmp	r7, #120	; 0x78
 8013baa:	4691      	mov	r9, r2
 8013bac:	4680      	mov	r8, r0
 8013bae:	460c      	mov	r4, r1
 8013bb0:	469a      	mov	sl, r3
 8013bb2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8013bb6:	d807      	bhi.n	8013bc8 <_printf_i+0x28>
 8013bb8:	2f62      	cmp	r7, #98	; 0x62
 8013bba:	d80a      	bhi.n	8013bd2 <_printf_i+0x32>
 8013bbc:	2f00      	cmp	r7, #0
 8013bbe:	f000 80d4 	beq.w	8013d6a <_printf_i+0x1ca>
 8013bc2:	2f58      	cmp	r7, #88	; 0x58
 8013bc4:	f000 80c0 	beq.w	8013d48 <_printf_i+0x1a8>
 8013bc8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013bcc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8013bd0:	e03a      	b.n	8013c48 <_printf_i+0xa8>
 8013bd2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8013bd6:	2b15      	cmp	r3, #21
 8013bd8:	d8f6      	bhi.n	8013bc8 <_printf_i+0x28>
 8013bda:	a101      	add	r1, pc, #4	; (adr r1, 8013be0 <_printf_i+0x40>)
 8013bdc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013be0:	08013c39 	.word	0x08013c39
 8013be4:	08013c4d 	.word	0x08013c4d
 8013be8:	08013bc9 	.word	0x08013bc9
 8013bec:	08013bc9 	.word	0x08013bc9
 8013bf0:	08013bc9 	.word	0x08013bc9
 8013bf4:	08013bc9 	.word	0x08013bc9
 8013bf8:	08013c4d 	.word	0x08013c4d
 8013bfc:	08013bc9 	.word	0x08013bc9
 8013c00:	08013bc9 	.word	0x08013bc9
 8013c04:	08013bc9 	.word	0x08013bc9
 8013c08:	08013bc9 	.word	0x08013bc9
 8013c0c:	08013d51 	.word	0x08013d51
 8013c10:	08013c79 	.word	0x08013c79
 8013c14:	08013d0b 	.word	0x08013d0b
 8013c18:	08013bc9 	.word	0x08013bc9
 8013c1c:	08013bc9 	.word	0x08013bc9
 8013c20:	08013d73 	.word	0x08013d73
 8013c24:	08013bc9 	.word	0x08013bc9
 8013c28:	08013c79 	.word	0x08013c79
 8013c2c:	08013bc9 	.word	0x08013bc9
 8013c30:	08013bc9 	.word	0x08013bc9
 8013c34:	08013d13 	.word	0x08013d13
 8013c38:	682b      	ldr	r3, [r5, #0]
 8013c3a:	1d1a      	adds	r2, r3, #4
 8013c3c:	681b      	ldr	r3, [r3, #0]
 8013c3e:	602a      	str	r2, [r5, #0]
 8013c40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013c44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013c48:	2301      	movs	r3, #1
 8013c4a:	e09f      	b.n	8013d8c <_printf_i+0x1ec>
 8013c4c:	6820      	ldr	r0, [r4, #0]
 8013c4e:	682b      	ldr	r3, [r5, #0]
 8013c50:	0607      	lsls	r7, r0, #24
 8013c52:	f103 0104 	add.w	r1, r3, #4
 8013c56:	6029      	str	r1, [r5, #0]
 8013c58:	d501      	bpl.n	8013c5e <_printf_i+0xbe>
 8013c5a:	681e      	ldr	r6, [r3, #0]
 8013c5c:	e003      	b.n	8013c66 <_printf_i+0xc6>
 8013c5e:	0646      	lsls	r6, r0, #25
 8013c60:	d5fb      	bpl.n	8013c5a <_printf_i+0xba>
 8013c62:	f9b3 6000 	ldrsh.w	r6, [r3]
 8013c66:	2e00      	cmp	r6, #0
 8013c68:	da03      	bge.n	8013c72 <_printf_i+0xd2>
 8013c6a:	232d      	movs	r3, #45	; 0x2d
 8013c6c:	4276      	negs	r6, r6
 8013c6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013c72:	485a      	ldr	r0, [pc, #360]	; (8013ddc <_printf_i+0x23c>)
 8013c74:	230a      	movs	r3, #10
 8013c76:	e012      	b.n	8013c9e <_printf_i+0xfe>
 8013c78:	682b      	ldr	r3, [r5, #0]
 8013c7a:	6820      	ldr	r0, [r4, #0]
 8013c7c:	1d19      	adds	r1, r3, #4
 8013c7e:	6029      	str	r1, [r5, #0]
 8013c80:	0605      	lsls	r5, r0, #24
 8013c82:	d501      	bpl.n	8013c88 <_printf_i+0xe8>
 8013c84:	681e      	ldr	r6, [r3, #0]
 8013c86:	e002      	b.n	8013c8e <_printf_i+0xee>
 8013c88:	0641      	lsls	r1, r0, #25
 8013c8a:	d5fb      	bpl.n	8013c84 <_printf_i+0xe4>
 8013c8c:	881e      	ldrh	r6, [r3, #0]
 8013c8e:	4853      	ldr	r0, [pc, #332]	; (8013ddc <_printf_i+0x23c>)
 8013c90:	2f6f      	cmp	r7, #111	; 0x6f
 8013c92:	bf0c      	ite	eq
 8013c94:	2308      	moveq	r3, #8
 8013c96:	230a      	movne	r3, #10
 8013c98:	2100      	movs	r1, #0
 8013c9a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8013c9e:	6865      	ldr	r5, [r4, #4]
 8013ca0:	60a5      	str	r5, [r4, #8]
 8013ca2:	2d00      	cmp	r5, #0
 8013ca4:	bfa2      	ittt	ge
 8013ca6:	6821      	ldrge	r1, [r4, #0]
 8013ca8:	f021 0104 	bicge.w	r1, r1, #4
 8013cac:	6021      	strge	r1, [r4, #0]
 8013cae:	b90e      	cbnz	r6, 8013cb4 <_printf_i+0x114>
 8013cb0:	2d00      	cmp	r5, #0
 8013cb2:	d04b      	beq.n	8013d4c <_printf_i+0x1ac>
 8013cb4:	4615      	mov	r5, r2
 8013cb6:	fbb6 f1f3 	udiv	r1, r6, r3
 8013cba:	fb03 6711 	mls	r7, r3, r1, r6
 8013cbe:	5dc7      	ldrb	r7, [r0, r7]
 8013cc0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8013cc4:	4637      	mov	r7, r6
 8013cc6:	42bb      	cmp	r3, r7
 8013cc8:	460e      	mov	r6, r1
 8013cca:	d9f4      	bls.n	8013cb6 <_printf_i+0x116>
 8013ccc:	2b08      	cmp	r3, #8
 8013cce:	d10b      	bne.n	8013ce8 <_printf_i+0x148>
 8013cd0:	6823      	ldr	r3, [r4, #0]
 8013cd2:	07de      	lsls	r6, r3, #31
 8013cd4:	d508      	bpl.n	8013ce8 <_printf_i+0x148>
 8013cd6:	6923      	ldr	r3, [r4, #16]
 8013cd8:	6861      	ldr	r1, [r4, #4]
 8013cda:	4299      	cmp	r1, r3
 8013cdc:	bfde      	ittt	le
 8013cde:	2330      	movle	r3, #48	; 0x30
 8013ce0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8013ce4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8013ce8:	1b52      	subs	r2, r2, r5
 8013cea:	6122      	str	r2, [r4, #16]
 8013cec:	f8cd a000 	str.w	sl, [sp]
 8013cf0:	464b      	mov	r3, r9
 8013cf2:	aa03      	add	r2, sp, #12
 8013cf4:	4621      	mov	r1, r4
 8013cf6:	4640      	mov	r0, r8
 8013cf8:	f7ff fee4 	bl	8013ac4 <_printf_common>
 8013cfc:	3001      	adds	r0, #1
 8013cfe:	d14a      	bne.n	8013d96 <_printf_i+0x1f6>
 8013d00:	f04f 30ff 	mov.w	r0, #4294967295
 8013d04:	b004      	add	sp, #16
 8013d06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013d0a:	6823      	ldr	r3, [r4, #0]
 8013d0c:	f043 0320 	orr.w	r3, r3, #32
 8013d10:	6023      	str	r3, [r4, #0]
 8013d12:	4833      	ldr	r0, [pc, #204]	; (8013de0 <_printf_i+0x240>)
 8013d14:	2778      	movs	r7, #120	; 0x78
 8013d16:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8013d1a:	6823      	ldr	r3, [r4, #0]
 8013d1c:	6829      	ldr	r1, [r5, #0]
 8013d1e:	061f      	lsls	r7, r3, #24
 8013d20:	f851 6b04 	ldr.w	r6, [r1], #4
 8013d24:	d402      	bmi.n	8013d2c <_printf_i+0x18c>
 8013d26:	065f      	lsls	r7, r3, #25
 8013d28:	bf48      	it	mi
 8013d2a:	b2b6      	uxthmi	r6, r6
 8013d2c:	07df      	lsls	r7, r3, #31
 8013d2e:	bf48      	it	mi
 8013d30:	f043 0320 	orrmi.w	r3, r3, #32
 8013d34:	6029      	str	r1, [r5, #0]
 8013d36:	bf48      	it	mi
 8013d38:	6023      	strmi	r3, [r4, #0]
 8013d3a:	b91e      	cbnz	r6, 8013d44 <_printf_i+0x1a4>
 8013d3c:	6823      	ldr	r3, [r4, #0]
 8013d3e:	f023 0320 	bic.w	r3, r3, #32
 8013d42:	6023      	str	r3, [r4, #0]
 8013d44:	2310      	movs	r3, #16
 8013d46:	e7a7      	b.n	8013c98 <_printf_i+0xf8>
 8013d48:	4824      	ldr	r0, [pc, #144]	; (8013ddc <_printf_i+0x23c>)
 8013d4a:	e7e4      	b.n	8013d16 <_printf_i+0x176>
 8013d4c:	4615      	mov	r5, r2
 8013d4e:	e7bd      	b.n	8013ccc <_printf_i+0x12c>
 8013d50:	682b      	ldr	r3, [r5, #0]
 8013d52:	6826      	ldr	r6, [r4, #0]
 8013d54:	6961      	ldr	r1, [r4, #20]
 8013d56:	1d18      	adds	r0, r3, #4
 8013d58:	6028      	str	r0, [r5, #0]
 8013d5a:	0635      	lsls	r5, r6, #24
 8013d5c:	681b      	ldr	r3, [r3, #0]
 8013d5e:	d501      	bpl.n	8013d64 <_printf_i+0x1c4>
 8013d60:	6019      	str	r1, [r3, #0]
 8013d62:	e002      	b.n	8013d6a <_printf_i+0x1ca>
 8013d64:	0670      	lsls	r0, r6, #25
 8013d66:	d5fb      	bpl.n	8013d60 <_printf_i+0x1c0>
 8013d68:	8019      	strh	r1, [r3, #0]
 8013d6a:	2300      	movs	r3, #0
 8013d6c:	6123      	str	r3, [r4, #16]
 8013d6e:	4615      	mov	r5, r2
 8013d70:	e7bc      	b.n	8013cec <_printf_i+0x14c>
 8013d72:	682b      	ldr	r3, [r5, #0]
 8013d74:	1d1a      	adds	r2, r3, #4
 8013d76:	602a      	str	r2, [r5, #0]
 8013d78:	681d      	ldr	r5, [r3, #0]
 8013d7a:	6862      	ldr	r2, [r4, #4]
 8013d7c:	2100      	movs	r1, #0
 8013d7e:	4628      	mov	r0, r5
 8013d80:	f7ec faae 	bl	80002e0 <memchr>
 8013d84:	b108      	cbz	r0, 8013d8a <_printf_i+0x1ea>
 8013d86:	1b40      	subs	r0, r0, r5
 8013d88:	6060      	str	r0, [r4, #4]
 8013d8a:	6863      	ldr	r3, [r4, #4]
 8013d8c:	6123      	str	r3, [r4, #16]
 8013d8e:	2300      	movs	r3, #0
 8013d90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013d94:	e7aa      	b.n	8013cec <_printf_i+0x14c>
 8013d96:	6923      	ldr	r3, [r4, #16]
 8013d98:	462a      	mov	r2, r5
 8013d9a:	4649      	mov	r1, r9
 8013d9c:	4640      	mov	r0, r8
 8013d9e:	47d0      	blx	sl
 8013da0:	3001      	adds	r0, #1
 8013da2:	d0ad      	beq.n	8013d00 <_printf_i+0x160>
 8013da4:	6823      	ldr	r3, [r4, #0]
 8013da6:	079b      	lsls	r3, r3, #30
 8013da8:	d413      	bmi.n	8013dd2 <_printf_i+0x232>
 8013daa:	68e0      	ldr	r0, [r4, #12]
 8013dac:	9b03      	ldr	r3, [sp, #12]
 8013dae:	4298      	cmp	r0, r3
 8013db0:	bfb8      	it	lt
 8013db2:	4618      	movlt	r0, r3
 8013db4:	e7a6      	b.n	8013d04 <_printf_i+0x164>
 8013db6:	2301      	movs	r3, #1
 8013db8:	4632      	mov	r2, r6
 8013dba:	4649      	mov	r1, r9
 8013dbc:	4640      	mov	r0, r8
 8013dbe:	47d0      	blx	sl
 8013dc0:	3001      	adds	r0, #1
 8013dc2:	d09d      	beq.n	8013d00 <_printf_i+0x160>
 8013dc4:	3501      	adds	r5, #1
 8013dc6:	68e3      	ldr	r3, [r4, #12]
 8013dc8:	9903      	ldr	r1, [sp, #12]
 8013dca:	1a5b      	subs	r3, r3, r1
 8013dcc:	42ab      	cmp	r3, r5
 8013dce:	dcf2      	bgt.n	8013db6 <_printf_i+0x216>
 8013dd0:	e7eb      	b.n	8013daa <_printf_i+0x20a>
 8013dd2:	2500      	movs	r5, #0
 8013dd4:	f104 0619 	add.w	r6, r4, #25
 8013dd8:	e7f5      	b.n	8013dc6 <_printf_i+0x226>
 8013dda:	bf00      	nop
 8013ddc:	08017d0e 	.word	0x08017d0e
 8013de0:	08017d1f 	.word	0x08017d1f

08013de4 <_scanf_float>:
 8013de4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013de8:	b087      	sub	sp, #28
 8013dea:	4617      	mov	r7, r2
 8013dec:	9303      	str	r3, [sp, #12]
 8013dee:	688b      	ldr	r3, [r1, #8]
 8013df0:	1e5a      	subs	r2, r3, #1
 8013df2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8013df6:	bf83      	ittte	hi
 8013df8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8013dfc:	195b      	addhi	r3, r3, r5
 8013dfe:	9302      	strhi	r3, [sp, #8]
 8013e00:	2300      	movls	r3, #0
 8013e02:	bf86      	itte	hi
 8013e04:	f240 135d 	movwhi	r3, #349	; 0x15d
 8013e08:	608b      	strhi	r3, [r1, #8]
 8013e0a:	9302      	strls	r3, [sp, #8]
 8013e0c:	680b      	ldr	r3, [r1, #0]
 8013e0e:	468b      	mov	fp, r1
 8013e10:	2500      	movs	r5, #0
 8013e12:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8013e16:	f84b 3b1c 	str.w	r3, [fp], #28
 8013e1a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8013e1e:	4680      	mov	r8, r0
 8013e20:	460c      	mov	r4, r1
 8013e22:	465e      	mov	r6, fp
 8013e24:	46aa      	mov	sl, r5
 8013e26:	46a9      	mov	r9, r5
 8013e28:	9501      	str	r5, [sp, #4]
 8013e2a:	68a2      	ldr	r2, [r4, #8]
 8013e2c:	b152      	cbz	r2, 8013e44 <_scanf_float+0x60>
 8013e2e:	683b      	ldr	r3, [r7, #0]
 8013e30:	781b      	ldrb	r3, [r3, #0]
 8013e32:	2b4e      	cmp	r3, #78	; 0x4e
 8013e34:	d864      	bhi.n	8013f00 <_scanf_float+0x11c>
 8013e36:	2b40      	cmp	r3, #64	; 0x40
 8013e38:	d83c      	bhi.n	8013eb4 <_scanf_float+0xd0>
 8013e3a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8013e3e:	b2c8      	uxtb	r0, r1
 8013e40:	280e      	cmp	r0, #14
 8013e42:	d93a      	bls.n	8013eba <_scanf_float+0xd6>
 8013e44:	f1b9 0f00 	cmp.w	r9, #0
 8013e48:	d003      	beq.n	8013e52 <_scanf_float+0x6e>
 8013e4a:	6823      	ldr	r3, [r4, #0]
 8013e4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8013e50:	6023      	str	r3, [r4, #0]
 8013e52:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013e56:	f1ba 0f01 	cmp.w	sl, #1
 8013e5a:	f200 8113 	bhi.w	8014084 <_scanf_float+0x2a0>
 8013e5e:	455e      	cmp	r6, fp
 8013e60:	f200 8105 	bhi.w	801406e <_scanf_float+0x28a>
 8013e64:	2501      	movs	r5, #1
 8013e66:	4628      	mov	r0, r5
 8013e68:	b007      	add	sp, #28
 8013e6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e6e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8013e72:	2a0d      	cmp	r2, #13
 8013e74:	d8e6      	bhi.n	8013e44 <_scanf_float+0x60>
 8013e76:	a101      	add	r1, pc, #4	; (adr r1, 8013e7c <_scanf_float+0x98>)
 8013e78:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8013e7c:	08013fbb 	.word	0x08013fbb
 8013e80:	08013e45 	.word	0x08013e45
 8013e84:	08013e45 	.word	0x08013e45
 8013e88:	08013e45 	.word	0x08013e45
 8013e8c:	0801401b 	.word	0x0801401b
 8013e90:	08013ff3 	.word	0x08013ff3
 8013e94:	08013e45 	.word	0x08013e45
 8013e98:	08013e45 	.word	0x08013e45
 8013e9c:	08013fc9 	.word	0x08013fc9
 8013ea0:	08013e45 	.word	0x08013e45
 8013ea4:	08013e45 	.word	0x08013e45
 8013ea8:	08013e45 	.word	0x08013e45
 8013eac:	08013e45 	.word	0x08013e45
 8013eb0:	08013f81 	.word	0x08013f81
 8013eb4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8013eb8:	e7db      	b.n	8013e72 <_scanf_float+0x8e>
 8013eba:	290e      	cmp	r1, #14
 8013ebc:	d8c2      	bhi.n	8013e44 <_scanf_float+0x60>
 8013ebe:	a001      	add	r0, pc, #4	; (adr r0, 8013ec4 <_scanf_float+0xe0>)
 8013ec0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8013ec4:	08013f73 	.word	0x08013f73
 8013ec8:	08013e45 	.word	0x08013e45
 8013ecc:	08013f73 	.word	0x08013f73
 8013ed0:	08014007 	.word	0x08014007
 8013ed4:	08013e45 	.word	0x08013e45
 8013ed8:	08013f21 	.word	0x08013f21
 8013edc:	08013f5d 	.word	0x08013f5d
 8013ee0:	08013f5d 	.word	0x08013f5d
 8013ee4:	08013f5d 	.word	0x08013f5d
 8013ee8:	08013f5d 	.word	0x08013f5d
 8013eec:	08013f5d 	.word	0x08013f5d
 8013ef0:	08013f5d 	.word	0x08013f5d
 8013ef4:	08013f5d 	.word	0x08013f5d
 8013ef8:	08013f5d 	.word	0x08013f5d
 8013efc:	08013f5d 	.word	0x08013f5d
 8013f00:	2b6e      	cmp	r3, #110	; 0x6e
 8013f02:	d809      	bhi.n	8013f18 <_scanf_float+0x134>
 8013f04:	2b60      	cmp	r3, #96	; 0x60
 8013f06:	d8b2      	bhi.n	8013e6e <_scanf_float+0x8a>
 8013f08:	2b54      	cmp	r3, #84	; 0x54
 8013f0a:	d077      	beq.n	8013ffc <_scanf_float+0x218>
 8013f0c:	2b59      	cmp	r3, #89	; 0x59
 8013f0e:	d199      	bne.n	8013e44 <_scanf_float+0x60>
 8013f10:	2d07      	cmp	r5, #7
 8013f12:	d197      	bne.n	8013e44 <_scanf_float+0x60>
 8013f14:	2508      	movs	r5, #8
 8013f16:	e029      	b.n	8013f6c <_scanf_float+0x188>
 8013f18:	2b74      	cmp	r3, #116	; 0x74
 8013f1a:	d06f      	beq.n	8013ffc <_scanf_float+0x218>
 8013f1c:	2b79      	cmp	r3, #121	; 0x79
 8013f1e:	e7f6      	b.n	8013f0e <_scanf_float+0x12a>
 8013f20:	6821      	ldr	r1, [r4, #0]
 8013f22:	05c8      	lsls	r0, r1, #23
 8013f24:	d51a      	bpl.n	8013f5c <_scanf_float+0x178>
 8013f26:	9b02      	ldr	r3, [sp, #8]
 8013f28:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8013f2c:	6021      	str	r1, [r4, #0]
 8013f2e:	f109 0901 	add.w	r9, r9, #1
 8013f32:	b11b      	cbz	r3, 8013f3c <_scanf_float+0x158>
 8013f34:	3b01      	subs	r3, #1
 8013f36:	3201      	adds	r2, #1
 8013f38:	9302      	str	r3, [sp, #8]
 8013f3a:	60a2      	str	r2, [r4, #8]
 8013f3c:	68a3      	ldr	r3, [r4, #8]
 8013f3e:	3b01      	subs	r3, #1
 8013f40:	60a3      	str	r3, [r4, #8]
 8013f42:	6923      	ldr	r3, [r4, #16]
 8013f44:	3301      	adds	r3, #1
 8013f46:	6123      	str	r3, [r4, #16]
 8013f48:	687b      	ldr	r3, [r7, #4]
 8013f4a:	3b01      	subs	r3, #1
 8013f4c:	2b00      	cmp	r3, #0
 8013f4e:	607b      	str	r3, [r7, #4]
 8013f50:	f340 8084 	ble.w	801405c <_scanf_float+0x278>
 8013f54:	683b      	ldr	r3, [r7, #0]
 8013f56:	3301      	adds	r3, #1
 8013f58:	603b      	str	r3, [r7, #0]
 8013f5a:	e766      	b.n	8013e2a <_scanf_float+0x46>
 8013f5c:	eb1a 0f05 	cmn.w	sl, r5
 8013f60:	f47f af70 	bne.w	8013e44 <_scanf_float+0x60>
 8013f64:	6822      	ldr	r2, [r4, #0]
 8013f66:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8013f6a:	6022      	str	r2, [r4, #0]
 8013f6c:	f806 3b01 	strb.w	r3, [r6], #1
 8013f70:	e7e4      	b.n	8013f3c <_scanf_float+0x158>
 8013f72:	6822      	ldr	r2, [r4, #0]
 8013f74:	0610      	lsls	r0, r2, #24
 8013f76:	f57f af65 	bpl.w	8013e44 <_scanf_float+0x60>
 8013f7a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8013f7e:	e7f4      	b.n	8013f6a <_scanf_float+0x186>
 8013f80:	f1ba 0f00 	cmp.w	sl, #0
 8013f84:	d10e      	bne.n	8013fa4 <_scanf_float+0x1c0>
 8013f86:	f1b9 0f00 	cmp.w	r9, #0
 8013f8a:	d10e      	bne.n	8013faa <_scanf_float+0x1c6>
 8013f8c:	6822      	ldr	r2, [r4, #0]
 8013f8e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8013f92:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8013f96:	d108      	bne.n	8013faa <_scanf_float+0x1c6>
 8013f98:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8013f9c:	6022      	str	r2, [r4, #0]
 8013f9e:	f04f 0a01 	mov.w	sl, #1
 8013fa2:	e7e3      	b.n	8013f6c <_scanf_float+0x188>
 8013fa4:	f1ba 0f02 	cmp.w	sl, #2
 8013fa8:	d055      	beq.n	8014056 <_scanf_float+0x272>
 8013faa:	2d01      	cmp	r5, #1
 8013fac:	d002      	beq.n	8013fb4 <_scanf_float+0x1d0>
 8013fae:	2d04      	cmp	r5, #4
 8013fb0:	f47f af48 	bne.w	8013e44 <_scanf_float+0x60>
 8013fb4:	3501      	adds	r5, #1
 8013fb6:	b2ed      	uxtb	r5, r5
 8013fb8:	e7d8      	b.n	8013f6c <_scanf_float+0x188>
 8013fba:	f1ba 0f01 	cmp.w	sl, #1
 8013fbe:	f47f af41 	bne.w	8013e44 <_scanf_float+0x60>
 8013fc2:	f04f 0a02 	mov.w	sl, #2
 8013fc6:	e7d1      	b.n	8013f6c <_scanf_float+0x188>
 8013fc8:	b97d      	cbnz	r5, 8013fea <_scanf_float+0x206>
 8013fca:	f1b9 0f00 	cmp.w	r9, #0
 8013fce:	f47f af3c 	bne.w	8013e4a <_scanf_float+0x66>
 8013fd2:	6822      	ldr	r2, [r4, #0]
 8013fd4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8013fd8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8013fdc:	f47f af39 	bne.w	8013e52 <_scanf_float+0x6e>
 8013fe0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8013fe4:	6022      	str	r2, [r4, #0]
 8013fe6:	2501      	movs	r5, #1
 8013fe8:	e7c0      	b.n	8013f6c <_scanf_float+0x188>
 8013fea:	2d03      	cmp	r5, #3
 8013fec:	d0e2      	beq.n	8013fb4 <_scanf_float+0x1d0>
 8013fee:	2d05      	cmp	r5, #5
 8013ff0:	e7de      	b.n	8013fb0 <_scanf_float+0x1cc>
 8013ff2:	2d02      	cmp	r5, #2
 8013ff4:	f47f af26 	bne.w	8013e44 <_scanf_float+0x60>
 8013ff8:	2503      	movs	r5, #3
 8013ffa:	e7b7      	b.n	8013f6c <_scanf_float+0x188>
 8013ffc:	2d06      	cmp	r5, #6
 8013ffe:	f47f af21 	bne.w	8013e44 <_scanf_float+0x60>
 8014002:	2507      	movs	r5, #7
 8014004:	e7b2      	b.n	8013f6c <_scanf_float+0x188>
 8014006:	6822      	ldr	r2, [r4, #0]
 8014008:	0591      	lsls	r1, r2, #22
 801400a:	f57f af1b 	bpl.w	8013e44 <_scanf_float+0x60>
 801400e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8014012:	6022      	str	r2, [r4, #0]
 8014014:	f8cd 9004 	str.w	r9, [sp, #4]
 8014018:	e7a8      	b.n	8013f6c <_scanf_float+0x188>
 801401a:	6822      	ldr	r2, [r4, #0]
 801401c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8014020:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8014024:	d006      	beq.n	8014034 <_scanf_float+0x250>
 8014026:	0550      	lsls	r0, r2, #21
 8014028:	f57f af0c 	bpl.w	8013e44 <_scanf_float+0x60>
 801402c:	f1b9 0f00 	cmp.w	r9, #0
 8014030:	f43f af0f 	beq.w	8013e52 <_scanf_float+0x6e>
 8014034:	0591      	lsls	r1, r2, #22
 8014036:	bf58      	it	pl
 8014038:	9901      	ldrpl	r1, [sp, #4]
 801403a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801403e:	bf58      	it	pl
 8014040:	eba9 0101 	subpl.w	r1, r9, r1
 8014044:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8014048:	bf58      	it	pl
 801404a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801404e:	6022      	str	r2, [r4, #0]
 8014050:	f04f 0900 	mov.w	r9, #0
 8014054:	e78a      	b.n	8013f6c <_scanf_float+0x188>
 8014056:	f04f 0a03 	mov.w	sl, #3
 801405a:	e787      	b.n	8013f6c <_scanf_float+0x188>
 801405c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8014060:	4639      	mov	r1, r7
 8014062:	4640      	mov	r0, r8
 8014064:	4798      	blx	r3
 8014066:	2800      	cmp	r0, #0
 8014068:	f43f aedf 	beq.w	8013e2a <_scanf_float+0x46>
 801406c:	e6ea      	b.n	8013e44 <_scanf_float+0x60>
 801406e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014072:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8014076:	463a      	mov	r2, r7
 8014078:	4640      	mov	r0, r8
 801407a:	4798      	blx	r3
 801407c:	6923      	ldr	r3, [r4, #16]
 801407e:	3b01      	subs	r3, #1
 8014080:	6123      	str	r3, [r4, #16]
 8014082:	e6ec      	b.n	8013e5e <_scanf_float+0x7a>
 8014084:	1e6b      	subs	r3, r5, #1
 8014086:	2b06      	cmp	r3, #6
 8014088:	d825      	bhi.n	80140d6 <_scanf_float+0x2f2>
 801408a:	2d02      	cmp	r5, #2
 801408c:	d836      	bhi.n	80140fc <_scanf_float+0x318>
 801408e:	455e      	cmp	r6, fp
 8014090:	f67f aee8 	bls.w	8013e64 <_scanf_float+0x80>
 8014094:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014098:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801409c:	463a      	mov	r2, r7
 801409e:	4640      	mov	r0, r8
 80140a0:	4798      	blx	r3
 80140a2:	6923      	ldr	r3, [r4, #16]
 80140a4:	3b01      	subs	r3, #1
 80140a6:	6123      	str	r3, [r4, #16]
 80140a8:	e7f1      	b.n	801408e <_scanf_float+0x2aa>
 80140aa:	9802      	ldr	r0, [sp, #8]
 80140ac:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80140b0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80140b4:	9002      	str	r0, [sp, #8]
 80140b6:	463a      	mov	r2, r7
 80140b8:	4640      	mov	r0, r8
 80140ba:	4798      	blx	r3
 80140bc:	6923      	ldr	r3, [r4, #16]
 80140be:	3b01      	subs	r3, #1
 80140c0:	6123      	str	r3, [r4, #16]
 80140c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80140c6:	fa5f fa8a 	uxtb.w	sl, sl
 80140ca:	f1ba 0f02 	cmp.w	sl, #2
 80140ce:	d1ec      	bne.n	80140aa <_scanf_float+0x2c6>
 80140d0:	3d03      	subs	r5, #3
 80140d2:	b2ed      	uxtb	r5, r5
 80140d4:	1b76      	subs	r6, r6, r5
 80140d6:	6823      	ldr	r3, [r4, #0]
 80140d8:	05da      	lsls	r2, r3, #23
 80140da:	d52f      	bpl.n	801413c <_scanf_float+0x358>
 80140dc:	055b      	lsls	r3, r3, #21
 80140de:	d510      	bpl.n	8014102 <_scanf_float+0x31e>
 80140e0:	455e      	cmp	r6, fp
 80140e2:	f67f aebf 	bls.w	8013e64 <_scanf_float+0x80>
 80140e6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80140ea:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80140ee:	463a      	mov	r2, r7
 80140f0:	4640      	mov	r0, r8
 80140f2:	4798      	blx	r3
 80140f4:	6923      	ldr	r3, [r4, #16]
 80140f6:	3b01      	subs	r3, #1
 80140f8:	6123      	str	r3, [r4, #16]
 80140fa:	e7f1      	b.n	80140e0 <_scanf_float+0x2fc>
 80140fc:	46aa      	mov	sl, r5
 80140fe:	9602      	str	r6, [sp, #8]
 8014100:	e7df      	b.n	80140c2 <_scanf_float+0x2de>
 8014102:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8014106:	6923      	ldr	r3, [r4, #16]
 8014108:	2965      	cmp	r1, #101	; 0x65
 801410a:	f103 33ff 	add.w	r3, r3, #4294967295
 801410e:	f106 35ff 	add.w	r5, r6, #4294967295
 8014112:	6123      	str	r3, [r4, #16]
 8014114:	d00c      	beq.n	8014130 <_scanf_float+0x34c>
 8014116:	2945      	cmp	r1, #69	; 0x45
 8014118:	d00a      	beq.n	8014130 <_scanf_float+0x34c>
 801411a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801411e:	463a      	mov	r2, r7
 8014120:	4640      	mov	r0, r8
 8014122:	4798      	blx	r3
 8014124:	6923      	ldr	r3, [r4, #16]
 8014126:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801412a:	3b01      	subs	r3, #1
 801412c:	1eb5      	subs	r5, r6, #2
 801412e:	6123      	str	r3, [r4, #16]
 8014130:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014134:	463a      	mov	r2, r7
 8014136:	4640      	mov	r0, r8
 8014138:	4798      	blx	r3
 801413a:	462e      	mov	r6, r5
 801413c:	6825      	ldr	r5, [r4, #0]
 801413e:	f015 0510 	ands.w	r5, r5, #16
 8014142:	d14d      	bne.n	80141e0 <_scanf_float+0x3fc>
 8014144:	7035      	strb	r5, [r6, #0]
 8014146:	6823      	ldr	r3, [r4, #0]
 8014148:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801414c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014150:	d11a      	bne.n	8014188 <_scanf_float+0x3a4>
 8014152:	9b01      	ldr	r3, [sp, #4]
 8014154:	454b      	cmp	r3, r9
 8014156:	eba3 0209 	sub.w	r2, r3, r9
 801415a:	d122      	bne.n	80141a2 <_scanf_float+0x3be>
 801415c:	2200      	movs	r2, #0
 801415e:	4659      	mov	r1, fp
 8014160:	4640      	mov	r0, r8
 8014162:	f002 fb4f 	bl	8016804 <_strtod_r>
 8014166:	9b03      	ldr	r3, [sp, #12]
 8014168:	6821      	ldr	r1, [r4, #0]
 801416a:	681b      	ldr	r3, [r3, #0]
 801416c:	f011 0f02 	tst.w	r1, #2
 8014170:	f103 0204 	add.w	r2, r3, #4
 8014174:	d020      	beq.n	80141b8 <_scanf_float+0x3d4>
 8014176:	9903      	ldr	r1, [sp, #12]
 8014178:	600a      	str	r2, [r1, #0]
 801417a:	681b      	ldr	r3, [r3, #0]
 801417c:	ed83 0b00 	vstr	d0, [r3]
 8014180:	68e3      	ldr	r3, [r4, #12]
 8014182:	3301      	adds	r3, #1
 8014184:	60e3      	str	r3, [r4, #12]
 8014186:	e66e      	b.n	8013e66 <_scanf_float+0x82>
 8014188:	9b04      	ldr	r3, [sp, #16]
 801418a:	2b00      	cmp	r3, #0
 801418c:	d0e6      	beq.n	801415c <_scanf_float+0x378>
 801418e:	9905      	ldr	r1, [sp, #20]
 8014190:	230a      	movs	r3, #10
 8014192:	462a      	mov	r2, r5
 8014194:	3101      	adds	r1, #1
 8014196:	4640      	mov	r0, r8
 8014198:	f002 fbbc 	bl	8016914 <_strtol_r>
 801419c:	9b04      	ldr	r3, [sp, #16]
 801419e:	9e05      	ldr	r6, [sp, #20]
 80141a0:	1ac2      	subs	r2, r0, r3
 80141a2:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80141a6:	429e      	cmp	r6, r3
 80141a8:	bf28      	it	cs
 80141aa:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80141ae:	490d      	ldr	r1, [pc, #52]	; (80141e4 <_scanf_float+0x400>)
 80141b0:	4630      	mov	r0, r6
 80141b2:	f000 f911 	bl	80143d8 <siprintf>
 80141b6:	e7d1      	b.n	801415c <_scanf_float+0x378>
 80141b8:	f011 0f04 	tst.w	r1, #4
 80141bc:	9903      	ldr	r1, [sp, #12]
 80141be:	600a      	str	r2, [r1, #0]
 80141c0:	d1db      	bne.n	801417a <_scanf_float+0x396>
 80141c2:	eeb4 0b40 	vcmp.f64	d0, d0
 80141c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80141ca:	681e      	ldr	r6, [r3, #0]
 80141cc:	d705      	bvc.n	80141da <_scanf_float+0x3f6>
 80141ce:	4806      	ldr	r0, [pc, #24]	; (80141e8 <_scanf_float+0x404>)
 80141d0:	f000 fa5a 	bl	8014688 <nanf>
 80141d4:	ed86 0a00 	vstr	s0, [r6]
 80141d8:	e7d2      	b.n	8014180 <_scanf_float+0x39c>
 80141da:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80141de:	e7f9      	b.n	80141d4 <_scanf_float+0x3f0>
 80141e0:	2500      	movs	r5, #0
 80141e2:	e640      	b.n	8013e66 <_scanf_float+0x82>
 80141e4:	08017d30 	.word	0x08017d30
 80141e8:	080180c5 	.word	0x080180c5

080141ec <std>:
 80141ec:	2300      	movs	r3, #0
 80141ee:	b510      	push	{r4, lr}
 80141f0:	4604      	mov	r4, r0
 80141f2:	e9c0 3300 	strd	r3, r3, [r0]
 80141f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80141fa:	6083      	str	r3, [r0, #8]
 80141fc:	8181      	strh	r1, [r0, #12]
 80141fe:	6643      	str	r3, [r0, #100]	; 0x64
 8014200:	81c2      	strh	r2, [r0, #14]
 8014202:	6183      	str	r3, [r0, #24]
 8014204:	4619      	mov	r1, r3
 8014206:	2208      	movs	r2, #8
 8014208:	305c      	adds	r0, #92	; 0x5c
 801420a:	f000 f948 	bl	801449e <memset>
 801420e:	4b0d      	ldr	r3, [pc, #52]	; (8014244 <std+0x58>)
 8014210:	6263      	str	r3, [r4, #36]	; 0x24
 8014212:	4b0d      	ldr	r3, [pc, #52]	; (8014248 <std+0x5c>)
 8014214:	62a3      	str	r3, [r4, #40]	; 0x28
 8014216:	4b0d      	ldr	r3, [pc, #52]	; (801424c <std+0x60>)
 8014218:	62e3      	str	r3, [r4, #44]	; 0x2c
 801421a:	4b0d      	ldr	r3, [pc, #52]	; (8014250 <std+0x64>)
 801421c:	6323      	str	r3, [r4, #48]	; 0x30
 801421e:	4b0d      	ldr	r3, [pc, #52]	; (8014254 <std+0x68>)
 8014220:	6224      	str	r4, [r4, #32]
 8014222:	429c      	cmp	r4, r3
 8014224:	d006      	beq.n	8014234 <std+0x48>
 8014226:	f103 0268 	add.w	r2, r3, #104	; 0x68
 801422a:	4294      	cmp	r4, r2
 801422c:	d002      	beq.n	8014234 <std+0x48>
 801422e:	33d0      	adds	r3, #208	; 0xd0
 8014230:	429c      	cmp	r4, r3
 8014232:	d105      	bne.n	8014240 <std+0x54>
 8014234:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8014238:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801423c:	f000 ba12 	b.w	8014664 <__retarget_lock_init_recursive>
 8014240:	bd10      	pop	{r4, pc}
 8014242:	bf00      	nop
 8014244:	08014419 	.word	0x08014419
 8014248:	0801443b 	.word	0x0801443b
 801424c:	08014473 	.word	0x08014473
 8014250:	08014497 	.word	0x08014497
 8014254:	2400560c 	.word	0x2400560c

08014258 <stdio_exit_handler>:
 8014258:	4a02      	ldr	r2, [pc, #8]	; (8014264 <stdio_exit_handler+0xc>)
 801425a:	4903      	ldr	r1, [pc, #12]	; (8014268 <stdio_exit_handler+0x10>)
 801425c:	4803      	ldr	r0, [pc, #12]	; (801426c <stdio_exit_handler+0x14>)
 801425e:	f000 b869 	b.w	8014334 <_fwalk_sglue>
 8014262:	bf00      	nop
 8014264:	24000014 	.word	0x24000014
 8014268:	08016cd5 	.word	0x08016cd5
 801426c:	24000020 	.word	0x24000020

08014270 <cleanup_stdio>:
 8014270:	6841      	ldr	r1, [r0, #4]
 8014272:	4b0c      	ldr	r3, [pc, #48]	; (80142a4 <cleanup_stdio+0x34>)
 8014274:	4299      	cmp	r1, r3
 8014276:	b510      	push	{r4, lr}
 8014278:	4604      	mov	r4, r0
 801427a:	d001      	beq.n	8014280 <cleanup_stdio+0x10>
 801427c:	f002 fd2a 	bl	8016cd4 <_fflush_r>
 8014280:	68a1      	ldr	r1, [r4, #8]
 8014282:	4b09      	ldr	r3, [pc, #36]	; (80142a8 <cleanup_stdio+0x38>)
 8014284:	4299      	cmp	r1, r3
 8014286:	d002      	beq.n	801428e <cleanup_stdio+0x1e>
 8014288:	4620      	mov	r0, r4
 801428a:	f002 fd23 	bl	8016cd4 <_fflush_r>
 801428e:	68e1      	ldr	r1, [r4, #12]
 8014290:	4b06      	ldr	r3, [pc, #24]	; (80142ac <cleanup_stdio+0x3c>)
 8014292:	4299      	cmp	r1, r3
 8014294:	d004      	beq.n	80142a0 <cleanup_stdio+0x30>
 8014296:	4620      	mov	r0, r4
 8014298:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801429c:	f002 bd1a 	b.w	8016cd4 <_fflush_r>
 80142a0:	bd10      	pop	{r4, pc}
 80142a2:	bf00      	nop
 80142a4:	2400560c 	.word	0x2400560c
 80142a8:	24005674 	.word	0x24005674
 80142ac:	240056dc 	.word	0x240056dc

080142b0 <global_stdio_init.part.0>:
 80142b0:	b510      	push	{r4, lr}
 80142b2:	4b0b      	ldr	r3, [pc, #44]	; (80142e0 <global_stdio_init.part.0+0x30>)
 80142b4:	4c0b      	ldr	r4, [pc, #44]	; (80142e4 <global_stdio_init.part.0+0x34>)
 80142b6:	4a0c      	ldr	r2, [pc, #48]	; (80142e8 <global_stdio_init.part.0+0x38>)
 80142b8:	601a      	str	r2, [r3, #0]
 80142ba:	4620      	mov	r0, r4
 80142bc:	2200      	movs	r2, #0
 80142be:	2104      	movs	r1, #4
 80142c0:	f7ff ff94 	bl	80141ec <std>
 80142c4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80142c8:	2201      	movs	r2, #1
 80142ca:	2109      	movs	r1, #9
 80142cc:	f7ff ff8e 	bl	80141ec <std>
 80142d0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80142d4:	2202      	movs	r2, #2
 80142d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80142da:	2112      	movs	r1, #18
 80142dc:	f7ff bf86 	b.w	80141ec <std>
 80142e0:	24005744 	.word	0x24005744
 80142e4:	2400560c 	.word	0x2400560c
 80142e8:	08014259 	.word	0x08014259

080142ec <__sfp_lock_acquire>:
 80142ec:	4801      	ldr	r0, [pc, #4]	; (80142f4 <__sfp_lock_acquire+0x8>)
 80142ee:	f000 b9ba 	b.w	8014666 <__retarget_lock_acquire_recursive>
 80142f2:	bf00      	nop
 80142f4:	2400574d 	.word	0x2400574d

080142f8 <__sfp_lock_release>:
 80142f8:	4801      	ldr	r0, [pc, #4]	; (8014300 <__sfp_lock_release+0x8>)
 80142fa:	f000 b9b5 	b.w	8014668 <__retarget_lock_release_recursive>
 80142fe:	bf00      	nop
 8014300:	2400574d 	.word	0x2400574d

08014304 <__sinit>:
 8014304:	b510      	push	{r4, lr}
 8014306:	4604      	mov	r4, r0
 8014308:	f7ff fff0 	bl	80142ec <__sfp_lock_acquire>
 801430c:	6a23      	ldr	r3, [r4, #32]
 801430e:	b11b      	cbz	r3, 8014318 <__sinit+0x14>
 8014310:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014314:	f7ff bff0 	b.w	80142f8 <__sfp_lock_release>
 8014318:	4b04      	ldr	r3, [pc, #16]	; (801432c <__sinit+0x28>)
 801431a:	6223      	str	r3, [r4, #32]
 801431c:	4b04      	ldr	r3, [pc, #16]	; (8014330 <__sinit+0x2c>)
 801431e:	681b      	ldr	r3, [r3, #0]
 8014320:	2b00      	cmp	r3, #0
 8014322:	d1f5      	bne.n	8014310 <__sinit+0xc>
 8014324:	f7ff ffc4 	bl	80142b0 <global_stdio_init.part.0>
 8014328:	e7f2      	b.n	8014310 <__sinit+0xc>
 801432a:	bf00      	nop
 801432c:	08014271 	.word	0x08014271
 8014330:	24005744 	.word	0x24005744

08014334 <_fwalk_sglue>:
 8014334:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014338:	4607      	mov	r7, r0
 801433a:	4688      	mov	r8, r1
 801433c:	4614      	mov	r4, r2
 801433e:	2600      	movs	r6, #0
 8014340:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014344:	f1b9 0901 	subs.w	r9, r9, #1
 8014348:	d505      	bpl.n	8014356 <_fwalk_sglue+0x22>
 801434a:	6824      	ldr	r4, [r4, #0]
 801434c:	2c00      	cmp	r4, #0
 801434e:	d1f7      	bne.n	8014340 <_fwalk_sglue+0xc>
 8014350:	4630      	mov	r0, r6
 8014352:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014356:	89ab      	ldrh	r3, [r5, #12]
 8014358:	2b01      	cmp	r3, #1
 801435a:	d907      	bls.n	801436c <_fwalk_sglue+0x38>
 801435c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014360:	3301      	adds	r3, #1
 8014362:	d003      	beq.n	801436c <_fwalk_sglue+0x38>
 8014364:	4629      	mov	r1, r5
 8014366:	4638      	mov	r0, r7
 8014368:	47c0      	blx	r8
 801436a:	4306      	orrs	r6, r0
 801436c:	3568      	adds	r5, #104	; 0x68
 801436e:	e7e9      	b.n	8014344 <_fwalk_sglue+0x10>

08014370 <sniprintf>:
 8014370:	b40c      	push	{r2, r3}
 8014372:	b530      	push	{r4, r5, lr}
 8014374:	4b17      	ldr	r3, [pc, #92]	; (80143d4 <sniprintf+0x64>)
 8014376:	1e0c      	subs	r4, r1, #0
 8014378:	681d      	ldr	r5, [r3, #0]
 801437a:	b09d      	sub	sp, #116	; 0x74
 801437c:	da08      	bge.n	8014390 <sniprintf+0x20>
 801437e:	238b      	movs	r3, #139	; 0x8b
 8014380:	602b      	str	r3, [r5, #0]
 8014382:	f04f 30ff 	mov.w	r0, #4294967295
 8014386:	b01d      	add	sp, #116	; 0x74
 8014388:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801438c:	b002      	add	sp, #8
 801438e:	4770      	bx	lr
 8014390:	f44f 7302 	mov.w	r3, #520	; 0x208
 8014394:	f8ad 3014 	strh.w	r3, [sp, #20]
 8014398:	bf14      	ite	ne
 801439a:	f104 33ff 	addne.w	r3, r4, #4294967295
 801439e:	4623      	moveq	r3, r4
 80143a0:	9304      	str	r3, [sp, #16]
 80143a2:	9307      	str	r3, [sp, #28]
 80143a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80143a8:	9002      	str	r0, [sp, #8]
 80143aa:	9006      	str	r0, [sp, #24]
 80143ac:	f8ad 3016 	strh.w	r3, [sp, #22]
 80143b0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80143b2:	ab21      	add	r3, sp, #132	; 0x84
 80143b4:	a902      	add	r1, sp, #8
 80143b6:	4628      	mov	r0, r5
 80143b8:	9301      	str	r3, [sp, #4]
 80143ba:	f002 fb07 	bl	80169cc <_svfiprintf_r>
 80143be:	1c43      	adds	r3, r0, #1
 80143c0:	bfbc      	itt	lt
 80143c2:	238b      	movlt	r3, #139	; 0x8b
 80143c4:	602b      	strlt	r3, [r5, #0]
 80143c6:	2c00      	cmp	r4, #0
 80143c8:	d0dd      	beq.n	8014386 <sniprintf+0x16>
 80143ca:	9b02      	ldr	r3, [sp, #8]
 80143cc:	2200      	movs	r2, #0
 80143ce:	701a      	strb	r2, [r3, #0]
 80143d0:	e7d9      	b.n	8014386 <sniprintf+0x16>
 80143d2:	bf00      	nop
 80143d4:	2400006c 	.word	0x2400006c

080143d8 <siprintf>:
 80143d8:	b40e      	push	{r1, r2, r3}
 80143da:	b500      	push	{lr}
 80143dc:	b09c      	sub	sp, #112	; 0x70
 80143de:	ab1d      	add	r3, sp, #116	; 0x74
 80143e0:	9002      	str	r0, [sp, #8]
 80143e2:	9006      	str	r0, [sp, #24]
 80143e4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80143e8:	4809      	ldr	r0, [pc, #36]	; (8014410 <siprintf+0x38>)
 80143ea:	9107      	str	r1, [sp, #28]
 80143ec:	9104      	str	r1, [sp, #16]
 80143ee:	4909      	ldr	r1, [pc, #36]	; (8014414 <siprintf+0x3c>)
 80143f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80143f4:	9105      	str	r1, [sp, #20]
 80143f6:	6800      	ldr	r0, [r0, #0]
 80143f8:	9301      	str	r3, [sp, #4]
 80143fa:	a902      	add	r1, sp, #8
 80143fc:	f002 fae6 	bl	80169cc <_svfiprintf_r>
 8014400:	9b02      	ldr	r3, [sp, #8]
 8014402:	2200      	movs	r2, #0
 8014404:	701a      	strb	r2, [r3, #0]
 8014406:	b01c      	add	sp, #112	; 0x70
 8014408:	f85d eb04 	ldr.w	lr, [sp], #4
 801440c:	b003      	add	sp, #12
 801440e:	4770      	bx	lr
 8014410:	2400006c 	.word	0x2400006c
 8014414:	ffff0208 	.word	0xffff0208

08014418 <__sread>:
 8014418:	b510      	push	{r4, lr}
 801441a:	460c      	mov	r4, r1
 801441c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014420:	f000 f8c2 	bl	80145a8 <_read_r>
 8014424:	2800      	cmp	r0, #0
 8014426:	bfab      	itete	ge
 8014428:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801442a:	89a3      	ldrhlt	r3, [r4, #12]
 801442c:	181b      	addge	r3, r3, r0
 801442e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8014432:	bfac      	ite	ge
 8014434:	6563      	strge	r3, [r4, #84]	; 0x54
 8014436:	81a3      	strhlt	r3, [r4, #12]
 8014438:	bd10      	pop	{r4, pc}

0801443a <__swrite>:
 801443a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801443e:	461f      	mov	r7, r3
 8014440:	898b      	ldrh	r3, [r1, #12]
 8014442:	05db      	lsls	r3, r3, #23
 8014444:	4605      	mov	r5, r0
 8014446:	460c      	mov	r4, r1
 8014448:	4616      	mov	r6, r2
 801444a:	d505      	bpl.n	8014458 <__swrite+0x1e>
 801444c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014450:	2302      	movs	r3, #2
 8014452:	2200      	movs	r2, #0
 8014454:	f000 f896 	bl	8014584 <_lseek_r>
 8014458:	89a3      	ldrh	r3, [r4, #12]
 801445a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801445e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014462:	81a3      	strh	r3, [r4, #12]
 8014464:	4632      	mov	r2, r6
 8014466:	463b      	mov	r3, r7
 8014468:	4628      	mov	r0, r5
 801446a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801446e:	f000 b8bd 	b.w	80145ec <_write_r>

08014472 <__sseek>:
 8014472:	b510      	push	{r4, lr}
 8014474:	460c      	mov	r4, r1
 8014476:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801447a:	f000 f883 	bl	8014584 <_lseek_r>
 801447e:	1c43      	adds	r3, r0, #1
 8014480:	89a3      	ldrh	r3, [r4, #12]
 8014482:	bf15      	itete	ne
 8014484:	6560      	strne	r0, [r4, #84]	; 0x54
 8014486:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801448a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801448e:	81a3      	strheq	r3, [r4, #12]
 8014490:	bf18      	it	ne
 8014492:	81a3      	strhne	r3, [r4, #12]
 8014494:	bd10      	pop	{r4, pc}

08014496 <__sclose>:
 8014496:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801449a:	f000 b80d 	b.w	80144b8 <_close_r>

0801449e <memset>:
 801449e:	4402      	add	r2, r0
 80144a0:	4603      	mov	r3, r0
 80144a2:	4293      	cmp	r3, r2
 80144a4:	d100      	bne.n	80144a8 <memset+0xa>
 80144a6:	4770      	bx	lr
 80144a8:	f803 1b01 	strb.w	r1, [r3], #1
 80144ac:	e7f9      	b.n	80144a2 <memset+0x4>
	...

080144b0 <_localeconv_r>:
 80144b0:	4800      	ldr	r0, [pc, #0]	; (80144b4 <_localeconv_r+0x4>)
 80144b2:	4770      	bx	lr
 80144b4:	24000160 	.word	0x24000160

080144b8 <_close_r>:
 80144b8:	b538      	push	{r3, r4, r5, lr}
 80144ba:	4d06      	ldr	r5, [pc, #24]	; (80144d4 <_close_r+0x1c>)
 80144bc:	2300      	movs	r3, #0
 80144be:	4604      	mov	r4, r0
 80144c0:	4608      	mov	r0, r1
 80144c2:	602b      	str	r3, [r5, #0]
 80144c4:	f7ef fa81 	bl	80039ca <_close>
 80144c8:	1c43      	adds	r3, r0, #1
 80144ca:	d102      	bne.n	80144d2 <_close_r+0x1a>
 80144cc:	682b      	ldr	r3, [r5, #0]
 80144ce:	b103      	cbz	r3, 80144d2 <_close_r+0x1a>
 80144d0:	6023      	str	r3, [r4, #0]
 80144d2:	bd38      	pop	{r3, r4, r5, pc}
 80144d4:	24005748 	.word	0x24005748

080144d8 <_reclaim_reent>:
 80144d8:	4b29      	ldr	r3, [pc, #164]	; (8014580 <_reclaim_reent+0xa8>)
 80144da:	681b      	ldr	r3, [r3, #0]
 80144dc:	4283      	cmp	r3, r0
 80144de:	b570      	push	{r4, r5, r6, lr}
 80144e0:	4604      	mov	r4, r0
 80144e2:	d04b      	beq.n	801457c <_reclaim_reent+0xa4>
 80144e4:	69c3      	ldr	r3, [r0, #28]
 80144e6:	b143      	cbz	r3, 80144fa <_reclaim_reent+0x22>
 80144e8:	68db      	ldr	r3, [r3, #12]
 80144ea:	2b00      	cmp	r3, #0
 80144ec:	d144      	bne.n	8014578 <_reclaim_reent+0xa0>
 80144ee:	69e3      	ldr	r3, [r4, #28]
 80144f0:	6819      	ldr	r1, [r3, #0]
 80144f2:	b111      	cbz	r1, 80144fa <_reclaim_reent+0x22>
 80144f4:	4620      	mov	r0, r4
 80144f6:	f000 fec3 	bl	8015280 <_free_r>
 80144fa:	6961      	ldr	r1, [r4, #20]
 80144fc:	b111      	cbz	r1, 8014504 <_reclaim_reent+0x2c>
 80144fe:	4620      	mov	r0, r4
 8014500:	f000 febe 	bl	8015280 <_free_r>
 8014504:	69e1      	ldr	r1, [r4, #28]
 8014506:	b111      	cbz	r1, 801450e <_reclaim_reent+0x36>
 8014508:	4620      	mov	r0, r4
 801450a:	f000 feb9 	bl	8015280 <_free_r>
 801450e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8014510:	b111      	cbz	r1, 8014518 <_reclaim_reent+0x40>
 8014512:	4620      	mov	r0, r4
 8014514:	f000 feb4 	bl	8015280 <_free_r>
 8014518:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801451a:	b111      	cbz	r1, 8014522 <_reclaim_reent+0x4a>
 801451c:	4620      	mov	r0, r4
 801451e:	f000 feaf 	bl	8015280 <_free_r>
 8014522:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8014524:	b111      	cbz	r1, 801452c <_reclaim_reent+0x54>
 8014526:	4620      	mov	r0, r4
 8014528:	f000 feaa 	bl	8015280 <_free_r>
 801452c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801452e:	b111      	cbz	r1, 8014536 <_reclaim_reent+0x5e>
 8014530:	4620      	mov	r0, r4
 8014532:	f000 fea5 	bl	8015280 <_free_r>
 8014536:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8014538:	b111      	cbz	r1, 8014540 <_reclaim_reent+0x68>
 801453a:	4620      	mov	r0, r4
 801453c:	f000 fea0 	bl	8015280 <_free_r>
 8014540:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8014542:	b111      	cbz	r1, 801454a <_reclaim_reent+0x72>
 8014544:	4620      	mov	r0, r4
 8014546:	f000 fe9b 	bl	8015280 <_free_r>
 801454a:	6a23      	ldr	r3, [r4, #32]
 801454c:	b1b3      	cbz	r3, 801457c <_reclaim_reent+0xa4>
 801454e:	4620      	mov	r0, r4
 8014550:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014554:	4718      	bx	r3
 8014556:	5949      	ldr	r1, [r1, r5]
 8014558:	b941      	cbnz	r1, 801456c <_reclaim_reent+0x94>
 801455a:	3504      	adds	r5, #4
 801455c:	69e3      	ldr	r3, [r4, #28]
 801455e:	2d80      	cmp	r5, #128	; 0x80
 8014560:	68d9      	ldr	r1, [r3, #12]
 8014562:	d1f8      	bne.n	8014556 <_reclaim_reent+0x7e>
 8014564:	4620      	mov	r0, r4
 8014566:	f000 fe8b 	bl	8015280 <_free_r>
 801456a:	e7c0      	b.n	80144ee <_reclaim_reent+0x16>
 801456c:	680e      	ldr	r6, [r1, #0]
 801456e:	4620      	mov	r0, r4
 8014570:	f000 fe86 	bl	8015280 <_free_r>
 8014574:	4631      	mov	r1, r6
 8014576:	e7ef      	b.n	8014558 <_reclaim_reent+0x80>
 8014578:	2500      	movs	r5, #0
 801457a:	e7ef      	b.n	801455c <_reclaim_reent+0x84>
 801457c:	bd70      	pop	{r4, r5, r6, pc}
 801457e:	bf00      	nop
 8014580:	2400006c 	.word	0x2400006c

08014584 <_lseek_r>:
 8014584:	b538      	push	{r3, r4, r5, lr}
 8014586:	4d07      	ldr	r5, [pc, #28]	; (80145a4 <_lseek_r+0x20>)
 8014588:	4604      	mov	r4, r0
 801458a:	4608      	mov	r0, r1
 801458c:	4611      	mov	r1, r2
 801458e:	2200      	movs	r2, #0
 8014590:	602a      	str	r2, [r5, #0]
 8014592:	461a      	mov	r2, r3
 8014594:	f7ef fa40 	bl	8003a18 <_lseek>
 8014598:	1c43      	adds	r3, r0, #1
 801459a:	d102      	bne.n	80145a2 <_lseek_r+0x1e>
 801459c:	682b      	ldr	r3, [r5, #0]
 801459e:	b103      	cbz	r3, 80145a2 <_lseek_r+0x1e>
 80145a0:	6023      	str	r3, [r4, #0]
 80145a2:	bd38      	pop	{r3, r4, r5, pc}
 80145a4:	24005748 	.word	0x24005748

080145a8 <_read_r>:
 80145a8:	b538      	push	{r3, r4, r5, lr}
 80145aa:	4d07      	ldr	r5, [pc, #28]	; (80145c8 <_read_r+0x20>)
 80145ac:	4604      	mov	r4, r0
 80145ae:	4608      	mov	r0, r1
 80145b0:	4611      	mov	r1, r2
 80145b2:	2200      	movs	r2, #0
 80145b4:	602a      	str	r2, [r5, #0]
 80145b6:	461a      	mov	r2, r3
 80145b8:	f7ef f9ce 	bl	8003958 <_read>
 80145bc:	1c43      	adds	r3, r0, #1
 80145be:	d102      	bne.n	80145c6 <_read_r+0x1e>
 80145c0:	682b      	ldr	r3, [r5, #0]
 80145c2:	b103      	cbz	r3, 80145c6 <_read_r+0x1e>
 80145c4:	6023      	str	r3, [r4, #0]
 80145c6:	bd38      	pop	{r3, r4, r5, pc}
 80145c8:	24005748 	.word	0x24005748

080145cc <_sbrk_r>:
 80145cc:	b538      	push	{r3, r4, r5, lr}
 80145ce:	4d06      	ldr	r5, [pc, #24]	; (80145e8 <_sbrk_r+0x1c>)
 80145d0:	2300      	movs	r3, #0
 80145d2:	4604      	mov	r4, r0
 80145d4:	4608      	mov	r0, r1
 80145d6:	602b      	str	r3, [r5, #0]
 80145d8:	f7ef fa2c 	bl	8003a34 <_sbrk>
 80145dc:	1c43      	adds	r3, r0, #1
 80145de:	d102      	bne.n	80145e6 <_sbrk_r+0x1a>
 80145e0:	682b      	ldr	r3, [r5, #0]
 80145e2:	b103      	cbz	r3, 80145e6 <_sbrk_r+0x1a>
 80145e4:	6023      	str	r3, [r4, #0]
 80145e6:	bd38      	pop	{r3, r4, r5, pc}
 80145e8:	24005748 	.word	0x24005748

080145ec <_write_r>:
 80145ec:	b538      	push	{r3, r4, r5, lr}
 80145ee:	4d07      	ldr	r5, [pc, #28]	; (801460c <_write_r+0x20>)
 80145f0:	4604      	mov	r4, r0
 80145f2:	4608      	mov	r0, r1
 80145f4:	4611      	mov	r1, r2
 80145f6:	2200      	movs	r2, #0
 80145f8:	602a      	str	r2, [r5, #0]
 80145fa:	461a      	mov	r2, r3
 80145fc:	f7ef f9c9 	bl	8003992 <_write>
 8014600:	1c43      	adds	r3, r0, #1
 8014602:	d102      	bne.n	801460a <_write_r+0x1e>
 8014604:	682b      	ldr	r3, [r5, #0]
 8014606:	b103      	cbz	r3, 801460a <_write_r+0x1e>
 8014608:	6023      	str	r3, [r4, #0]
 801460a:	bd38      	pop	{r3, r4, r5, pc}
 801460c:	24005748 	.word	0x24005748

08014610 <__errno>:
 8014610:	4b01      	ldr	r3, [pc, #4]	; (8014618 <__errno+0x8>)
 8014612:	6818      	ldr	r0, [r3, #0]
 8014614:	4770      	bx	lr
 8014616:	bf00      	nop
 8014618:	2400006c 	.word	0x2400006c

0801461c <__libc_init_array>:
 801461c:	b570      	push	{r4, r5, r6, lr}
 801461e:	4d0d      	ldr	r5, [pc, #52]	; (8014654 <__libc_init_array+0x38>)
 8014620:	4c0d      	ldr	r4, [pc, #52]	; (8014658 <__libc_init_array+0x3c>)
 8014622:	1b64      	subs	r4, r4, r5
 8014624:	10a4      	asrs	r4, r4, #2
 8014626:	2600      	movs	r6, #0
 8014628:	42a6      	cmp	r6, r4
 801462a:	d109      	bne.n	8014640 <__libc_init_array+0x24>
 801462c:	4d0b      	ldr	r5, [pc, #44]	; (801465c <__libc_init_array+0x40>)
 801462e:	4c0c      	ldr	r4, [pc, #48]	; (8014660 <__libc_init_array+0x44>)
 8014630:	f003 fa4a 	bl	8017ac8 <_init>
 8014634:	1b64      	subs	r4, r4, r5
 8014636:	10a4      	asrs	r4, r4, #2
 8014638:	2600      	movs	r6, #0
 801463a:	42a6      	cmp	r6, r4
 801463c:	d105      	bne.n	801464a <__libc_init_array+0x2e>
 801463e:	bd70      	pop	{r4, r5, r6, pc}
 8014640:	f855 3b04 	ldr.w	r3, [r5], #4
 8014644:	4798      	blx	r3
 8014646:	3601      	adds	r6, #1
 8014648:	e7ee      	b.n	8014628 <__libc_init_array+0xc>
 801464a:	f855 3b04 	ldr.w	r3, [r5], #4
 801464e:	4798      	blx	r3
 8014650:	3601      	adds	r6, #1
 8014652:	e7f2      	b.n	801463a <__libc_init_array+0x1e>
 8014654:	08018130 	.word	0x08018130
 8014658:	08018130 	.word	0x08018130
 801465c:	08018130 	.word	0x08018130
 8014660:	08018134 	.word	0x08018134

08014664 <__retarget_lock_init_recursive>:
 8014664:	4770      	bx	lr

08014666 <__retarget_lock_acquire_recursive>:
 8014666:	4770      	bx	lr

08014668 <__retarget_lock_release_recursive>:
 8014668:	4770      	bx	lr

0801466a <memcpy>:
 801466a:	440a      	add	r2, r1
 801466c:	4291      	cmp	r1, r2
 801466e:	f100 33ff 	add.w	r3, r0, #4294967295
 8014672:	d100      	bne.n	8014676 <memcpy+0xc>
 8014674:	4770      	bx	lr
 8014676:	b510      	push	{r4, lr}
 8014678:	f811 4b01 	ldrb.w	r4, [r1], #1
 801467c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014680:	4291      	cmp	r1, r2
 8014682:	d1f9      	bne.n	8014678 <memcpy+0xe>
 8014684:	bd10      	pop	{r4, pc}
	...

08014688 <nanf>:
 8014688:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8014690 <nanf+0x8>
 801468c:	4770      	bx	lr
 801468e:	bf00      	nop
 8014690:	7fc00000 	.word	0x7fc00000

08014694 <quorem>:
 8014694:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014698:	6903      	ldr	r3, [r0, #16]
 801469a:	690c      	ldr	r4, [r1, #16]
 801469c:	42a3      	cmp	r3, r4
 801469e:	4607      	mov	r7, r0
 80146a0:	db7e      	blt.n	80147a0 <quorem+0x10c>
 80146a2:	3c01      	subs	r4, #1
 80146a4:	f101 0814 	add.w	r8, r1, #20
 80146a8:	f100 0514 	add.w	r5, r0, #20
 80146ac:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80146b0:	9301      	str	r3, [sp, #4]
 80146b2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80146b6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80146ba:	3301      	adds	r3, #1
 80146bc:	429a      	cmp	r2, r3
 80146be:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80146c2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80146c6:	fbb2 f6f3 	udiv	r6, r2, r3
 80146ca:	d331      	bcc.n	8014730 <quorem+0x9c>
 80146cc:	f04f 0e00 	mov.w	lr, #0
 80146d0:	4640      	mov	r0, r8
 80146d2:	46ac      	mov	ip, r5
 80146d4:	46f2      	mov	sl, lr
 80146d6:	f850 2b04 	ldr.w	r2, [r0], #4
 80146da:	b293      	uxth	r3, r2
 80146dc:	fb06 e303 	mla	r3, r6, r3, lr
 80146e0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80146e4:	0c1a      	lsrs	r2, r3, #16
 80146e6:	b29b      	uxth	r3, r3
 80146e8:	ebaa 0303 	sub.w	r3, sl, r3
 80146ec:	f8dc a000 	ldr.w	sl, [ip]
 80146f0:	fa13 f38a 	uxtah	r3, r3, sl
 80146f4:	fb06 220e 	mla	r2, r6, lr, r2
 80146f8:	9300      	str	r3, [sp, #0]
 80146fa:	9b00      	ldr	r3, [sp, #0]
 80146fc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8014700:	b292      	uxth	r2, r2
 8014702:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8014706:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801470a:	f8bd 3000 	ldrh.w	r3, [sp]
 801470e:	4581      	cmp	r9, r0
 8014710:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014714:	f84c 3b04 	str.w	r3, [ip], #4
 8014718:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801471c:	d2db      	bcs.n	80146d6 <quorem+0x42>
 801471e:	f855 300b 	ldr.w	r3, [r5, fp]
 8014722:	b92b      	cbnz	r3, 8014730 <quorem+0x9c>
 8014724:	9b01      	ldr	r3, [sp, #4]
 8014726:	3b04      	subs	r3, #4
 8014728:	429d      	cmp	r5, r3
 801472a:	461a      	mov	r2, r3
 801472c:	d32c      	bcc.n	8014788 <quorem+0xf4>
 801472e:	613c      	str	r4, [r7, #16]
 8014730:	4638      	mov	r0, r7
 8014732:	f001 f8b7 	bl	80158a4 <__mcmp>
 8014736:	2800      	cmp	r0, #0
 8014738:	db22      	blt.n	8014780 <quorem+0xec>
 801473a:	3601      	adds	r6, #1
 801473c:	4629      	mov	r1, r5
 801473e:	2000      	movs	r0, #0
 8014740:	f858 2b04 	ldr.w	r2, [r8], #4
 8014744:	f8d1 c000 	ldr.w	ip, [r1]
 8014748:	b293      	uxth	r3, r2
 801474a:	1ac3      	subs	r3, r0, r3
 801474c:	0c12      	lsrs	r2, r2, #16
 801474e:	fa13 f38c 	uxtah	r3, r3, ip
 8014752:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8014756:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801475a:	b29b      	uxth	r3, r3
 801475c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014760:	45c1      	cmp	r9, r8
 8014762:	f841 3b04 	str.w	r3, [r1], #4
 8014766:	ea4f 4022 	mov.w	r0, r2, asr #16
 801476a:	d2e9      	bcs.n	8014740 <quorem+0xac>
 801476c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014770:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014774:	b922      	cbnz	r2, 8014780 <quorem+0xec>
 8014776:	3b04      	subs	r3, #4
 8014778:	429d      	cmp	r5, r3
 801477a:	461a      	mov	r2, r3
 801477c:	d30a      	bcc.n	8014794 <quorem+0x100>
 801477e:	613c      	str	r4, [r7, #16]
 8014780:	4630      	mov	r0, r6
 8014782:	b003      	add	sp, #12
 8014784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014788:	6812      	ldr	r2, [r2, #0]
 801478a:	3b04      	subs	r3, #4
 801478c:	2a00      	cmp	r2, #0
 801478e:	d1ce      	bne.n	801472e <quorem+0x9a>
 8014790:	3c01      	subs	r4, #1
 8014792:	e7c9      	b.n	8014728 <quorem+0x94>
 8014794:	6812      	ldr	r2, [r2, #0]
 8014796:	3b04      	subs	r3, #4
 8014798:	2a00      	cmp	r2, #0
 801479a:	d1f0      	bne.n	801477e <quorem+0xea>
 801479c:	3c01      	subs	r4, #1
 801479e:	e7eb      	b.n	8014778 <quorem+0xe4>
 80147a0:	2000      	movs	r0, #0
 80147a2:	e7ee      	b.n	8014782 <quorem+0xee>
 80147a4:	0000      	movs	r0, r0
	...

080147a8 <_dtoa_r>:
 80147a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80147ac:	ed2d 8b02 	vpush	{d8}
 80147b0:	69c5      	ldr	r5, [r0, #28]
 80147b2:	b091      	sub	sp, #68	; 0x44
 80147b4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80147b8:	ec59 8b10 	vmov	r8, r9, d0
 80147bc:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80147be:	9106      	str	r1, [sp, #24]
 80147c0:	4606      	mov	r6, r0
 80147c2:	9208      	str	r2, [sp, #32]
 80147c4:	930c      	str	r3, [sp, #48]	; 0x30
 80147c6:	b975      	cbnz	r5, 80147e6 <_dtoa_r+0x3e>
 80147c8:	2010      	movs	r0, #16
 80147ca:	f7fe fe13 	bl	80133f4 <malloc>
 80147ce:	4602      	mov	r2, r0
 80147d0:	61f0      	str	r0, [r6, #28]
 80147d2:	b920      	cbnz	r0, 80147de <_dtoa_r+0x36>
 80147d4:	4ba6      	ldr	r3, [pc, #664]	; (8014a70 <_dtoa_r+0x2c8>)
 80147d6:	21ef      	movs	r1, #239	; 0xef
 80147d8:	48a6      	ldr	r0, [pc, #664]	; (8014a74 <_dtoa_r+0x2cc>)
 80147da:	f002 fad9 	bl	8016d90 <__assert_func>
 80147de:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80147e2:	6005      	str	r5, [r0, #0]
 80147e4:	60c5      	str	r5, [r0, #12]
 80147e6:	69f3      	ldr	r3, [r6, #28]
 80147e8:	6819      	ldr	r1, [r3, #0]
 80147ea:	b151      	cbz	r1, 8014802 <_dtoa_r+0x5a>
 80147ec:	685a      	ldr	r2, [r3, #4]
 80147ee:	604a      	str	r2, [r1, #4]
 80147f0:	2301      	movs	r3, #1
 80147f2:	4093      	lsls	r3, r2
 80147f4:	608b      	str	r3, [r1, #8]
 80147f6:	4630      	mov	r0, r6
 80147f8:	f000 fdce 	bl	8015398 <_Bfree>
 80147fc:	69f3      	ldr	r3, [r6, #28]
 80147fe:	2200      	movs	r2, #0
 8014800:	601a      	str	r2, [r3, #0]
 8014802:	f1b9 0300 	subs.w	r3, r9, #0
 8014806:	bfbb      	ittet	lt
 8014808:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801480c:	9303      	strlt	r3, [sp, #12]
 801480e:	2300      	movge	r3, #0
 8014810:	2201      	movlt	r2, #1
 8014812:	bfac      	ite	ge
 8014814:	6023      	strge	r3, [r4, #0]
 8014816:	6022      	strlt	r2, [r4, #0]
 8014818:	4b97      	ldr	r3, [pc, #604]	; (8014a78 <_dtoa_r+0x2d0>)
 801481a:	9c03      	ldr	r4, [sp, #12]
 801481c:	43a3      	bics	r3, r4
 801481e:	d11c      	bne.n	801485a <_dtoa_r+0xb2>
 8014820:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014822:	f242 730f 	movw	r3, #9999	; 0x270f
 8014826:	6013      	str	r3, [r2, #0]
 8014828:	f3c4 0313 	ubfx	r3, r4, #0, #20
 801482c:	ea53 0308 	orrs.w	r3, r3, r8
 8014830:	f000 84fb 	beq.w	801522a <_dtoa_r+0xa82>
 8014834:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8014836:	b963      	cbnz	r3, 8014852 <_dtoa_r+0xaa>
 8014838:	4b90      	ldr	r3, [pc, #576]	; (8014a7c <_dtoa_r+0x2d4>)
 801483a:	e020      	b.n	801487e <_dtoa_r+0xd6>
 801483c:	4b90      	ldr	r3, [pc, #576]	; (8014a80 <_dtoa_r+0x2d8>)
 801483e:	9301      	str	r3, [sp, #4]
 8014840:	3308      	adds	r3, #8
 8014842:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8014844:	6013      	str	r3, [r2, #0]
 8014846:	9801      	ldr	r0, [sp, #4]
 8014848:	b011      	add	sp, #68	; 0x44
 801484a:	ecbd 8b02 	vpop	{d8}
 801484e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014852:	4b8a      	ldr	r3, [pc, #552]	; (8014a7c <_dtoa_r+0x2d4>)
 8014854:	9301      	str	r3, [sp, #4]
 8014856:	3303      	adds	r3, #3
 8014858:	e7f3      	b.n	8014842 <_dtoa_r+0x9a>
 801485a:	ed9d 8b02 	vldr	d8, [sp, #8]
 801485e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8014862:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014866:	d10c      	bne.n	8014882 <_dtoa_r+0xda>
 8014868:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801486a:	2301      	movs	r3, #1
 801486c:	6013      	str	r3, [r2, #0]
 801486e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8014870:	2b00      	cmp	r3, #0
 8014872:	f000 84d7 	beq.w	8015224 <_dtoa_r+0xa7c>
 8014876:	4b83      	ldr	r3, [pc, #524]	; (8014a84 <_dtoa_r+0x2dc>)
 8014878:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801487a:	6013      	str	r3, [r2, #0]
 801487c:	3b01      	subs	r3, #1
 801487e:	9301      	str	r3, [sp, #4]
 8014880:	e7e1      	b.n	8014846 <_dtoa_r+0x9e>
 8014882:	aa0e      	add	r2, sp, #56	; 0x38
 8014884:	a90f      	add	r1, sp, #60	; 0x3c
 8014886:	4630      	mov	r0, r6
 8014888:	eeb0 0b48 	vmov.f64	d0, d8
 801488c:	f001 f920 	bl	8015ad0 <__d2b>
 8014890:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8014894:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014896:	4605      	mov	r5, r0
 8014898:	2b00      	cmp	r3, #0
 801489a:	d046      	beq.n	801492a <_dtoa_r+0x182>
 801489c:	eeb0 7b48 	vmov.f64	d7, d8
 80148a0:	ee18 1a90 	vmov	r1, s17
 80148a4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80148a8:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 80148ac:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80148b0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80148b4:	2000      	movs	r0, #0
 80148b6:	ee07 1a90 	vmov	s15, r1
 80148ba:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 80148be:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8014a58 <_dtoa_r+0x2b0>
 80148c2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80148c6:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8014a60 <_dtoa_r+0x2b8>
 80148ca:	eea7 6b05 	vfma.f64	d6, d7, d5
 80148ce:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8014a68 <_dtoa_r+0x2c0>
 80148d2:	ee07 3a90 	vmov	s15, r3
 80148d6:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80148da:	eeb0 7b46 	vmov.f64	d7, d6
 80148de:	eea4 7b05 	vfma.f64	d7, d4, d5
 80148e2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80148e6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80148ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80148ee:	ee16 ba90 	vmov	fp, s13
 80148f2:	9009      	str	r0, [sp, #36]	; 0x24
 80148f4:	d508      	bpl.n	8014908 <_dtoa_r+0x160>
 80148f6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80148fa:	eeb4 6b47 	vcmp.f64	d6, d7
 80148fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014902:	bf18      	it	ne
 8014904:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8014908:	f1bb 0f16 	cmp.w	fp, #22
 801490c:	d82b      	bhi.n	8014966 <_dtoa_r+0x1be>
 801490e:	495e      	ldr	r1, [pc, #376]	; (8014a88 <_dtoa_r+0x2e0>)
 8014910:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8014914:	ed91 7b00 	vldr	d7, [r1]
 8014918:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801491c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014920:	d501      	bpl.n	8014926 <_dtoa_r+0x17e>
 8014922:	f10b 3bff 	add.w	fp, fp, #4294967295
 8014926:	2100      	movs	r1, #0
 8014928:	e01e      	b.n	8014968 <_dtoa_r+0x1c0>
 801492a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801492c:	4413      	add	r3, r2
 801492e:	f203 4132 	addw	r1, r3, #1074	; 0x432
 8014932:	2920      	cmp	r1, #32
 8014934:	bfc1      	itttt	gt
 8014936:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 801493a:	408c      	lslgt	r4, r1
 801493c:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 8014940:	fa28 f101 	lsrgt.w	r1, r8, r1
 8014944:	bfd6      	itet	le
 8014946:	f1c1 0120 	rsble	r1, r1, #32
 801494a:	4321      	orrgt	r1, r4
 801494c:	fa08 f101 	lslle.w	r1, r8, r1
 8014950:	ee07 1a90 	vmov	s15, r1
 8014954:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8014958:	3b01      	subs	r3, #1
 801495a:	ee17 1a90 	vmov	r1, s15
 801495e:	2001      	movs	r0, #1
 8014960:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8014964:	e7a7      	b.n	80148b6 <_dtoa_r+0x10e>
 8014966:	2101      	movs	r1, #1
 8014968:	1ad2      	subs	r2, r2, r3
 801496a:	1e53      	subs	r3, r2, #1
 801496c:	9305      	str	r3, [sp, #20]
 801496e:	bf45      	ittet	mi
 8014970:	f1c2 0301 	rsbmi	r3, r2, #1
 8014974:	9304      	strmi	r3, [sp, #16]
 8014976:	2300      	movpl	r3, #0
 8014978:	2300      	movmi	r3, #0
 801497a:	bf4c      	ite	mi
 801497c:	9305      	strmi	r3, [sp, #20]
 801497e:	9304      	strpl	r3, [sp, #16]
 8014980:	f1bb 0f00 	cmp.w	fp, #0
 8014984:	910b      	str	r1, [sp, #44]	; 0x2c
 8014986:	db18      	blt.n	80149ba <_dtoa_r+0x212>
 8014988:	9b05      	ldr	r3, [sp, #20]
 801498a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 801498e:	445b      	add	r3, fp
 8014990:	9305      	str	r3, [sp, #20]
 8014992:	2300      	movs	r3, #0
 8014994:	9a06      	ldr	r2, [sp, #24]
 8014996:	2a09      	cmp	r2, #9
 8014998:	d848      	bhi.n	8014a2c <_dtoa_r+0x284>
 801499a:	2a05      	cmp	r2, #5
 801499c:	bfc4      	itt	gt
 801499e:	3a04      	subgt	r2, #4
 80149a0:	9206      	strgt	r2, [sp, #24]
 80149a2:	9a06      	ldr	r2, [sp, #24]
 80149a4:	f1a2 0202 	sub.w	r2, r2, #2
 80149a8:	bfcc      	ite	gt
 80149aa:	2400      	movgt	r4, #0
 80149ac:	2401      	movle	r4, #1
 80149ae:	2a03      	cmp	r2, #3
 80149b0:	d847      	bhi.n	8014a42 <_dtoa_r+0x29a>
 80149b2:	e8df f002 	tbb	[pc, r2]
 80149b6:	2d0b      	.short	0x2d0b
 80149b8:	392b      	.short	0x392b
 80149ba:	9b04      	ldr	r3, [sp, #16]
 80149bc:	2200      	movs	r2, #0
 80149be:	eba3 030b 	sub.w	r3, r3, fp
 80149c2:	9304      	str	r3, [sp, #16]
 80149c4:	920a      	str	r2, [sp, #40]	; 0x28
 80149c6:	f1cb 0300 	rsb	r3, fp, #0
 80149ca:	e7e3      	b.n	8014994 <_dtoa_r+0x1ec>
 80149cc:	2200      	movs	r2, #0
 80149ce:	9207      	str	r2, [sp, #28]
 80149d0:	9a08      	ldr	r2, [sp, #32]
 80149d2:	2a00      	cmp	r2, #0
 80149d4:	dc38      	bgt.n	8014a48 <_dtoa_r+0x2a0>
 80149d6:	f04f 0a01 	mov.w	sl, #1
 80149da:	46d1      	mov	r9, sl
 80149dc:	4652      	mov	r2, sl
 80149de:	f8cd a020 	str.w	sl, [sp, #32]
 80149e2:	69f7      	ldr	r7, [r6, #28]
 80149e4:	2100      	movs	r1, #0
 80149e6:	2004      	movs	r0, #4
 80149e8:	f100 0c14 	add.w	ip, r0, #20
 80149ec:	4594      	cmp	ip, r2
 80149ee:	d930      	bls.n	8014a52 <_dtoa_r+0x2aa>
 80149f0:	6079      	str	r1, [r7, #4]
 80149f2:	4630      	mov	r0, r6
 80149f4:	930d      	str	r3, [sp, #52]	; 0x34
 80149f6:	f000 fc8f 	bl	8015318 <_Balloc>
 80149fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80149fc:	9001      	str	r0, [sp, #4]
 80149fe:	4602      	mov	r2, r0
 8014a00:	2800      	cmp	r0, #0
 8014a02:	d145      	bne.n	8014a90 <_dtoa_r+0x2e8>
 8014a04:	4b21      	ldr	r3, [pc, #132]	; (8014a8c <_dtoa_r+0x2e4>)
 8014a06:	f240 11af 	movw	r1, #431	; 0x1af
 8014a0a:	e6e5      	b.n	80147d8 <_dtoa_r+0x30>
 8014a0c:	2201      	movs	r2, #1
 8014a0e:	e7de      	b.n	80149ce <_dtoa_r+0x226>
 8014a10:	2200      	movs	r2, #0
 8014a12:	9207      	str	r2, [sp, #28]
 8014a14:	9a08      	ldr	r2, [sp, #32]
 8014a16:	eb0b 0a02 	add.w	sl, fp, r2
 8014a1a:	f10a 0901 	add.w	r9, sl, #1
 8014a1e:	464a      	mov	r2, r9
 8014a20:	2a01      	cmp	r2, #1
 8014a22:	bfb8      	it	lt
 8014a24:	2201      	movlt	r2, #1
 8014a26:	e7dc      	b.n	80149e2 <_dtoa_r+0x23a>
 8014a28:	2201      	movs	r2, #1
 8014a2a:	e7f2      	b.n	8014a12 <_dtoa_r+0x26a>
 8014a2c:	2401      	movs	r4, #1
 8014a2e:	2200      	movs	r2, #0
 8014a30:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8014a34:	f04f 3aff 	mov.w	sl, #4294967295
 8014a38:	2100      	movs	r1, #0
 8014a3a:	46d1      	mov	r9, sl
 8014a3c:	2212      	movs	r2, #18
 8014a3e:	9108      	str	r1, [sp, #32]
 8014a40:	e7cf      	b.n	80149e2 <_dtoa_r+0x23a>
 8014a42:	2201      	movs	r2, #1
 8014a44:	9207      	str	r2, [sp, #28]
 8014a46:	e7f5      	b.n	8014a34 <_dtoa_r+0x28c>
 8014a48:	f8dd a020 	ldr.w	sl, [sp, #32]
 8014a4c:	46d1      	mov	r9, sl
 8014a4e:	4652      	mov	r2, sl
 8014a50:	e7c7      	b.n	80149e2 <_dtoa_r+0x23a>
 8014a52:	3101      	adds	r1, #1
 8014a54:	0040      	lsls	r0, r0, #1
 8014a56:	e7c7      	b.n	80149e8 <_dtoa_r+0x240>
 8014a58:	636f4361 	.word	0x636f4361
 8014a5c:	3fd287a7 	.word	0x3fd287a7
 8014a60:	8b60c8b3 	.word	0x8b60c8b3
 8014a64:	3fc68a28 	.word	0x3fc68a28
 8014a68:	509f79fb 	.word	0x509f79fb
 8014a6c:	3fd34413 	.word	0x3fd34413
 8014a70:	08017d42 	.word	0x08017d42
 8014a74:	08017d59 	.word	0x08017d59
 8014a78:	7ff00000 	.word	0x7ff00000
 8014a7c:	08017d3e 	.word	0x08017d3e
 8014a80:	08017d35 	.word	0x08017d35
 8014a84:	08017d0d 	.word	0x08017d0d
 8014a88:	08017e48 	.word	0x08017e48
 8014a8c:	08017db1 	.word	0x08017db1
 8014a90:	69f2      	ldr	r2, [r6, #28]
 8014a92:	9901      	ldr	r1, [sp, #4]
 8014a94:	6011      	str	r1, [r2, #0]
 8014a96:	f1b9 0f0e 	cmp.w	r9, #14
 8014a9a:	d86c      	bhi.n	8014b76 <_dtoa_r+0x3ce>
 8014a9c:	2c00      	cmp	r4, #0
 8014a9e:	d06a      	beq.n	8014b76 <_dtoa_r+0x3ce>
 8014aa0:	f1bb 0f00 	cmp.w	fp, #0
 8014aa4:	f340 80a0 	ble.w	8014be8 <_dtoa_r+0x440>
 8014aa8:	4ac1      	ldr	r2, [pc, #772]	; (8014db0 <_dtoa_r+0x608>)
 8014aaa:	f00b 010f 	and.w	r1, fp, #15
 8014aae:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8014ab2:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8014ab6:	ed92 7b00 	vldr	d7, [r2]
 8014aba:	ea4f 122b 	mov.w	r2, fp, asr #4
 8014abe:	f000 8087 	beq.w	8014bd0 <_dtoa_r+0x428>
 8014ac2:	49bc      	ldr	r1, [pc, #752]	; (8014db4 <_dtoa_r+0x60c>)
 8014ac4:	ed91 6b08 	vldr	d6, [r1, #32]
 8014ac8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8014acc:	ed8d 6b02 	vstr	d6, [sp, #8]
 8014ad0:	f002 020f 	and.w	r2, r2, #15
 8014ad4:	2103      	movs	r1, #3
 8014ad6:	48b7      	ldr	r0, [pc, #732]	; (8014db4 <_dtoa_r+0x60c>)
 8014ad8:	2a00      	cmp	r2, #0
 8014ada:	d17b      	bne.n	8014bd4 <_dtoa_r+0x42c>
 8014adc:	ed9d 6b02 	vldr	d6, [sp, #8]
 8014ae0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8014ae4:	ed8d 7b02 	vstr	d7, [sp, #8]
 8014ae8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014aea:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014aee:	2a00      	cmp	r2, #0
 8014af0:	f000 80a0 	beq.w	8014c34 <_dtoa_r+0x48c>
 8014af4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8014af8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8014afc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b00:	f140 8098 	bpl.w	8014c34 <_dtoa_r+0x48c>
 8014b04:	f1b9 0f00 	cmp.w	r9, #0
 8014b08:	f000 8094 	beq.w	8014c34 <_dtoa_r+0x48c>
 8014b0c:	f1ba 0f00 	cmp.w	sl, #0
 8014b10:	dd2f      	ble.n	8014b72 <_dtoa_r+0x3ca>
 8014b12:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8014b16:	ee27 7b06 	vmul.f64	d7, d7, d6
 8014b1a:	ed8d 7b02 	vstr	d7, [sp, #8]
 8014b1e:	f10b 32ff 	add.w	r2, fp, #4294967295
 8014b22:	3101      	adds	r1, #1
 8014b24:	4654      	mov	r4, sl
 8014b26:	ed9d 6b02 	vldr	d6, [sp, #8]
 8014b2a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8014b2e:	ee07 1a90 	vmov	s15, r1
 8014b32:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8014b36:	eea7 5b06 	vfma.f64	d5, d7, d6
 8014b3a:	ee15 7a90 	vmov	r7, s11
 8014b3e:	ec51 0b15 	vmov	r0, r1, d5
 8014b42:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 8014b46:	2c00      	cmp	r4, #0
 8014b48:	d177      	bne.n	8014c3a <_dtoa_r+0x492>
 8014b4a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8014b4e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8014b52:	ec41 0b17 	vmov	d7, r0, r1
 8014b56:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8014b5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b5e:	f300 826a 	bgt.w	8015036 <_dtoa_r+0x88e>
 8014b62:	eeb1 7b47 	vneg.f64	d7, d7
 8014b66:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8014b6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b6e:	f100 8260 	bmi.w	8015032 <_dtoa_r+0x88a>
 8014b72:	ed8d 8b02 	vstr	d8, [sp, #8]
 8014b76:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014b78:	2a00      	cmp	r2, #0
 8014b7a:	f2c0 811d 	blt.w	8014db8 <_dtoa_r+0x610>
 8014b7e:	f1bb 0f0e 	cmp.w	fp, #14
 8014b82:	f300 8119 	bgt.w	8014db8 <_dtoa_r+0x610>
 8014b86:	4b8a      	ldr	r3, [pc, #552]	; (8014db0 <_dtoa_r+0x608>)
 8014b88:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8014b8c:	ed93 6b00 	vldr	d6, [r3]
 8014b90:	9b08      	ldr	r3, [sp, #32]
 8014b92:	2b00      	cmp	r3, #0
 8014b94:	f280 80b7 	bge.w	8014d06 <_dtoa_r+0x55e>
 8014b98:	f1b9 0f00 	cmp.w	r9, #0
 8014b9c:	f300 80b3 	bgt.w	8014d06 <_dtoa_r+0x55e>
 8014ba0:	f040 8246 	bne.w	8015030 <_dtoa_r+0x888>
 8014ba4:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8014ba8:	ee26 6b07 	vmul.f64	d6, d6, d7
 8014bac:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014bb0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8014bb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014bb8:	464c      	mov	r4, r9
 8014bba:	464f      	mov	r7, r9
 8014bbc:	f280 821c 	bge.w	8014ff8 <_dtoa_r+0x850>
 8014bc0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8014bc4:	2331      	movs	r3, #49	; 0x31
 8014bc6:	f808 3b01 	strb.w	r3, [r8], #1
 8014bca:	f10b 0b01 	add.w	fp, fp, #1
 8014bce:	e218      	b.n	8015002 <_dtoa_r+0x85a>
 8014bd0:	2102      	movs	r1, #2
 8014bd2:	e780      	b.n	8014ad6 <_dtoa_r+0x32e>
 8014bd4:	07d4      	lsls	r4, r2, #31
 8014bd6:	d504      	bpl.n	8014be2 <_dtoa_r+0x43a>
 8014bd8:	ed90 6b00 	vldr	d6, [r0]
 8014bdc:	3101      	adds	r1, #1
 8014bde:	ee27 7b06 	vmul.f64	d7, d7, d6
 8014be2:	1052      	asrs	r2, r2, #1
 8014be4:	3008      	adds	r0, #8
 8014be6:	e777      	b.n	8014ad8 <_dtoa_r+0x330>
 8014be8:	d022      	beq.n	8014c30 <_dtoa_r+0x488>
 8014bea:	f1cb 0200 	rsb	r2, fp, #0
 8014bee:	4970      	ldr	r1, [pc, #448]	; (8014db0 <_dtoa_r+0x608>)
 8014bf0:	f002 000f 	and.w	r0, r2, #15
 8014bf4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8014bf8:	ed91 7b00 	vldr	d7, [r1]
 8014bfc:	ee28 7b07 	vmul.f64	d7, d8, d7
 8014c00:	ed8d 7b02 	vstr	d7, [sp, #8]
 8014c04:	486b      	ldr	r0, [pc, #428]	; (8014db4 <_dtoa_r+0x60c>)
 8014c06:	1112      	asrs	r2, r2, #4
 8014c08:	2400      	movs	r4, #0
 8014c0a:	2102      	movs	r1, #2
 8014c0c:	b92a      	cbnz	r2, 8014c1a <_dtoa_r+0x472>
 8014c0e:	2c00      	cmp	r4, #0
 8014c10:	f43f af6a 	beq.w	8014ae8 <_dtoa_r+0x340>
 8014c14:	ed8d 7b02 	vstr	d7, [sp, #8]
 8014c18:	e766      	b.n	8014ae8 <_dtoa_r+0x340>
 8014c1a:	07d7      	lsls	r7, r2, #31
 8014c1c:	d505      	bpl.n	8014c2a <_dtoa_r+0x482>
 8014c1e:	ed90 6b00 	vldr	d6, [r0]
 8014c22:	3101      	adds	r1, #1
 8014c24:	2401      	movs	r4, #1
 8014c26:	ee27 7b06 	vmul.f64	d7, d7, d6
 8014c2a:	1052      	asrs	r2, r2, #1
 8014c2c:	3008      	adds	r0, #8
 8014c2e:	e7ed      	b.n	8014c0c <_dtoa_r+0x464>
 8014c30:	2102      	movs	r1, #2
 8014c32:	e759      	b.n	8014ae8 <_dtoa_r+0x340>
 8014c34:	465a      	mov	r2, fp
 8014c36:	464c      	mov	r4, r9
 8014c38:	e775      	b.n	8014b26 <_dtoa_r+0x37e>
 8014c3a:	ec41 0b17 	vmov	d7, r0, r1
 8014c3e:	495c      	ldr	r1, [pc, #368]	; (8014db0 <_dtoa_r+0x608>)
 8014c40:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8014c44:	ed11 4b02 	vldr	d4, [r1, #-8]
 8014c48:	9901      	ldr	r1, [sp, #4]
 8014c4a:	440c      	add	r4, r1
 8014c4c:	9907      	ldr	r1, [sp, #28]
 8014c4e:	b351      	cbz	r1, 8014ca6 <_dtoa_r+0x4fe>
 8014c50:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8014c54:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8014c58:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8014c5c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8014c60:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8014c64:	ee35 7b47 	vsub.f64	d7, d5, d7
 8014c68:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8014c6c:	ee14 1a90 	vmov	r1, s9
 8014c70:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8014c74:	3130      	adds	r1, #48	; 0x30
 8014c76:	ee36 6b45 	vsub.f64	d6, d6, d5
 8014c7a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8014c7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c82:	f808 1b01 	strb.w	r1, [r8], #1
 8014c86:	d439      	bmi.n	8014cfc <_dtoa_r+0x554>
 8014c88:	ee32 5b46 	vsub.f64	d5, d2, d6
 8014c8c:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8014c90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c94:	d472      	bmi.n	8014d7c <_dtoa_r+0x5d4>
 8014c96:	45a0      	cmp	r8, r4
 8014c98:	f43f af6b 	beq.w	8014b72 <_dtoa_r+0x3ca>
 8014c9c:	ee27 7b03 	vmul.f64	d7, d7, d3
 8014ca0:	ee26 6b03 	vmul.f64	d6, d6, d3
 8014ca4:	e7e0      	b.n	8014c68 <_dtoa_r+0x4c0>
 8014ca6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8014caa:	ee27 7b04 	vmul.f64	d7, d7, d4
 8014cae:	4620      	mov	r0, r4
 8014cb0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8014cb4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8014cb8:	ee14 1a90 	vmov	r1, s9
 8014cbc:	3130      	adds	r1, #48	; 0x30
 8014cbe:	f808 1b01 	strb.w	r1, [r8], #1
 8014cc2:	45a0      	cmp	r8, r4
 8014cc4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8014cc8:	ee36 6b45 	vsub.f64	d6, d6, d5
 8014ccc:	d118      	bne.n	8014d00 <_dtoa_r+0x558>
 8014cce:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8014cd2:	ee37 4b05 	vadd.f64	d4, d7, d5
 8014cd6:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8014cda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014cde:	dc4d      	bgt.n	8014d7c <_dtoa_r+0x5d4>
 8014ce0:	ee35 5b47 	vsub.f64	d5, d5, d7
 8014ce4:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8014ce8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014cec:	f57f af41 	bpl.w	8014b72 <_dtoa_r+0x3ca>
 8014cf0:	4680      	mov	r8, r0
 8014cf2:	3801      	subs	r0, #1
 8014cf4:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8014cf8:	2b30      	cmp	r3, #48	; 0x30
 8014cfa:	d0f9      	beq.n	8014cf0 <_dtoa_r+0x548>
 8014cfc:	4693      	mov	fp, r2
 8014cfe:	e02a      	b.n	8014d56 <_dtoa_r+0x5ae>
 8014d00:	ee26 6b03 	vmul.f64	d6, d6, d3
 8014d04:	e7d6      	b.n	8014cb4 <_dtoa_r+0x50c>
 8014d06:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014d0a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8014d0e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8014d12:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8014d16:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8014d1a:	ee15 3a10 	vmov	r3, s10
 8014d1e:	3330      	adds	r3, #48	; 0x30
 8014d20:	f808 3b01 	strb.w	r3, [r8], #1
 8014d24:	9b01      	ldr	r3, [sp, #4]
 8014d26:	eba8 0303 	sub.w	r3, r8, r3
 8014d2a:	4599      	cmp	r9, r3
 8014d2c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8014d30:	eea3 7b46 	vfms.f64	d7, d3, d6
 8014d34:	d133      	bne.n	8014d9e <_dtoa_r+0x5f6>
 8014d36:	ee37 7b07 	vadd.f64	d7, d7, d7
 8014d3a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8014d3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d42:	dc1a      	bgt.n	8014d7a <_dtoa_r+0x5d2>
 8014d44:	eeb4 7b46 	vcmp.f64	d7, d6
 8014d48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d4c:	d103      	bne.n	8014d56 <_dtoa_r+0x5ae>
 8014d4e:	ee15 3a10 	vmov	r3, s10
 8014d52:	07d9      	lsls	r1, r3, #31
 8014d54:	d411      	bmi.n	8014d7a <_dtoa_r+0x5d2>
 8014d56:	4629      	mov	r1, r5
 8014d58:	4630      	mov	r0, r6
 8014d5a:	f000 fb1d 	bl	8015398 <_Bfree>
 8014d5e:	2300      	movs	r3, #0
 8014d60:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014d62:	f888 3000 	strb.w	r3, [r8]
 8014d66:	f10b 0301 	add.w	r3, fp, #1
 8014d6a:	6013      	str	r3, [r2, #0]
 8014d6c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8014d6e:	2b00      	cmp	r3, #0
 8014d70:	f43f ad69 	beq.w	8014846 <_dtoa_r+0x9e>
 8014d74:	f8c3 8000 	str.w	r8, [r3]
 8014d78:	e565      	b.n	8014846 <_dtoa_r+0x9e>
 8014d7a:	465a      	mov	r2, fp
 8014d7c:	4643      	mov	r3, r8
 8014d7e:	4698      	mov	r8, r3
 8014d80:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 8014d84:	2939      	cmp	r1, #57	; 0x39
 8014d86:	d106      	bne.n	8014d96 <_dtoa_r+0x5ee>
 8014d88:	9901      	ldr	r1, [sp, #4]
 8014d8a:	4299      	cmp	r1, r3
 8014d8c:	d1f7      	bne.n	8014d7e <_dtoa_r+0x5d6>
 8014d8e:	9801      	ldr	r0, [sp, #4]
 8014d90:	2130      	movs	r1, #48	; 0x30
 8014d92:	3201      	adds	r2, #1
 8014d94:	7001      	strb	r1, [r0, #0]
 8014d96:	7819      	ldrb	r1, [r3, #0]
 8014d98:	3101      	adds	r1, #1
 8014d9a:	7019      	strb	r1, [r3, #0]
 8014d9c:	e7ae      	b.n	8014cfc <_dtoa_r+0x554>
 8014d9e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8014da2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8014da6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014daa:	d1b2      	bne.n	8014d12 <_dtoa_r+0x56a>
 8014dac:	e7d3      	b.n	8014d56 <_dtoa_r+0x5ae>
 8014dae:	bf00      	nop
 8014db0:	08017e48 	.word	0x08017e48
 8014db4:	08017e20 	.word	0x08017e20
 8014db8:	9907      	ldr	r1, [sp, #28]
 8014dba:	2900      	cmp	r1, #0
 8014dbc:	f000 80d0 	beq.w	8014f60 <_dtoa_r+0x7b8>
 8014dc0:	9906      	ldr	r1, [sp, #24]
 8014dc2:	2901      	cmp	r1, #1
 8014dc4:	f300 80b4 	bgt.w	8014f30 <_dtoa_r+0x788>
 8014dc8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014dca:	2900      	cmp	r1, #0
 8014dcc:	f000 80ac 	beq.w	8014f28 <_dtoa_r+0x780>
 8014dd0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8014dd4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8014dd8:	461c      	mov	r4, r3
 8014dda:	9309      	str	r3, [sp, #36]	; 0x24
 8014ddc:	9b04      	ldr	r3, [sp, #16]
 8014dde:	4413      	add	r3, r2
 8014de0:	9304      	str	r3, [sp, #16]
 8014de2:	9b05      	ldr	r3, [sp, #20]
 8014de4:	2101      	movs	r1, #1
 8014de6:	4413      	add	r3, r2
 8014de8:	4630      	mov	r0, r6
 8014dea:	9305      	str	r3, [sp, #20]
 8014dec:	f000 fbd4 	bl	8015598 <__i2b>
 8014df0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014df2:	4607      	mov	r7, r0
 8014df4:	f1b8 0f00 	cmp.w	r8, #0
 8014df8:	d00d      	beq.n	8014e16 <_dtoa_r+0x66e>
 8014dfa:	9a05      	ldr	r2, [sp, #20]
 8014dfc:	2a00      	cmp	r2, #0
 8014dfe:	dd0a      	ble.n	8014e16 <_dtoa_r+0x66e>
 8014e00:	4542      	cmp	r2, r8
 8014e02:	9904      	ldr	r1, [sp, #16]
 8014e04:	bfa8      	it	ge
 8014e06:	4642      	movge	r2, r8
 8014e08:	1a89      	subs	r1, r1, r2
 8014e0a:	9104      	str	r1, [sp, #16]
 8014e0c:	9905      	ldr	r1, [sp, #20]
 8014e0e:	eba8 0802 	sub.w	r8, r8, r2
 8014e12:	1a8a      	subs	r2, r1, r2
 8014e14:	9205      	str	r2, [sp, #20]
 8014e16:	b303      	cbz	r3, 8014e5a <_dtoa_r+0x6b2>
 8014e18:	9a07      	ldr	r2, [sp, #28]
 8014e1a:	2a00      	cmp	r2, #0
 8014e1c:	f000 80a5 	beq.w	8014f6a <_dtoa_r+0x7c2>
 8014e20:	2c00      	cmp	r4, #0
 8014e22:	dd13      	ble.n	8014e4c <_dtoa_r+0x6a4>
 8014e24:	4639      	mov	r1, r7
 8014e26:	4622      	mov	r2, r4
 8014e28:	4630      	mov	r0, r6
 8014e2a:	930d      	str	r3, [sp, #52]	; 0x34
 8014e2c:	f000 fc74 	bl	8015718 <__pow5mult>
 8014e30:	462a      	mov	r2, r5
 8014e32:	4601      	mov	r1, r0
 8014e34:	4607      	mov	r7, r0
 8014e36:	4630      	mov	r0, r6
 8014e38:	f000 fbc4 	bl	80155c4 <__multiply>
 8014e3c:	4629      	mov	r1, r5
 8014e3e:	9009      	str	r0, [sp, #36]	; 0x24
 8014e40:	4630      	mov	r0, r6
 8014e42:	f000 faa9 	bl	8015398 <_Bfree>
 8014e46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014e48:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014e4a:	4615      	mov	r5, r2
 8014e4c:	1b1a      	subs	r2, r3, r4
 8014e4e:	d004      	beq.n	8014e5a <_dtoa_r+0x6b2>
 8014e50:	4629      	mov	r1, r5
 8014e52:	4630      	mov	r0, r6
 8014e54:	f000 fc60 	bl	8015718 <__pow5mult>
 8014e58:	4605      	mov	r5, r0
 8014e5a:	2101      	movs	r1, #1
 8014e5c:	4630      	mov	r0, r6
 8014e5e:	f000 fb9b 	bl	8015598 <__i2b>
 8014e62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014e64:	2b00      	cmp	r3, #0
 8014e66:	4604      	mov	r4, r0
 8014e68:	f340 8081 	ble.w	8014f6e <_dtoa_r+0x7c6>
 8014e6c:	461a      	mov	r2, r3
 8014e6e:	4601      	mov	r1, r0
 8014e70:	4630      	mov	r0, r6
 8014e72:	f000 fc51 	bl	8015718 <__pow5mult>
 8014e76:	9b06      	ldr	r3, [sp, #24]
 8014e78:	2b01      	cmp	r3, #1
 8014e7a:	4604      	mov	r4, r0
 8014e7c:	dd7a      	ble.n	8014f74 <_dtoa_r+0x7cc>
 8014e7e:	2300      	movs	r3, #0
 8014e80:	9309      	str	r3, [sp, #36]	; 0x24
 8014e82:	6922      	ldr	r2, [r4, #16]
 8014e84:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8014e88:	6910      	ldr	r0, [r2, #16]
 8014e8a:	f000 fb37 	bl	80154fc <__hi0bits>
 8014e8e:	f1c0 0020 	rsb	r0, r0, #32
 8014e92:	9b05      	ldr	r3, [sp, #20]
 8014e94:	4418      	add	r0, r3
 8014e96:	f010 001f 	ands.w	r0, r0, #31
 8014e9a:	f000 8093 	beq.w	8014fc4 <_dtoa_r+0x81c>
 8014e9e:	f1c0 0220 	rsb	r2, r0, #32
 8014ea2:	2a04      	cmp	r2, #4
 8014ea4:	f340 8085 	ble.w	8014fb2 <_dtoa_r+0x80a>
 8014ea8:	9b04      	ldr	r3, [sp, #16]
 8014eaa:	f1c0 001c 	rsb	r0, r0, #28
 8014eae:	4403      	add	r3, r0
 8014eb0:	9304      	str	r3, [sp, #16]
 8014eb2:	9b05      	ldr	r3, [sp, #20]
 8014eb4:	4480      	add	r8, r0
 8014eb6:	4403      	add	r3, r0
 8014eb8:	9305      	str	r3, [sp, #20]
 8014eba:	9b04      	ldr	r3, [sp, #16]
 8014ebc:	2b00      	cmp	r3, #0
 8014ebe:	dd05      	ble.n	8014ecc <_dtoa_r+0x724>
 8014ec0:	4629      	mov	r1, r5
 8014ec2:	461a      	mov	r2, r3
 8014ec4:	4630      	mov	r0, r6
 8014ec6:	f000 fc81 	bl	80157cc <__lshift>
 8014eca:	4605      	mov	r5, r0
 8014ecc:	9b05      	ldr	r3, [sp, #20]
 8014ece:	2b00      	cmp	r3, #0
 8014ed0:	dd05      	ble.n	8014ede <_dtoa_r+0x736>
 8014ed2:	4621      	mov	r1, r4
 8014ed4:	461a      	mov	r2, r3
 8014ed6:	4630      	mov	r0, r6
 8014ed8:	f000 fc78 	bl	80157cc <__lshift>
 8014edc:	4604      	mov	r4, r0
 8014ede:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014ee0:	2b00      	cmp	r3, #0
 8014ee2:	d071      	beq.n	8014fc8 <_dtoa_r+0x820>
 8014ee4:	4621      	mov	r1, r4
 8014ee6:	4628      	mov	r0, r5
 8014ee8:	f000 fcdc 	bl	80158a4 <__mcmp>
 8014eec:	2800      	cmp	r0, #0
 8014eee:	da6b      	bge.n	8014fc8 <_dtoa_r+0x820>
 8014ef0:	2300      	movs	r3, #0
 8014ef2:	4629      	mov	r1, r5
 8014ef4:	220a      	movs	r2, #10
 8014ef6:	4630      	mov	r0, r6
 8014ef8:	f000 fa70 	bl	80153dc <__multadd>
 8014efc:	9b07      	ldr	r3, [sp, #28]
 8014efe:	f10b 3bff 	add.w	fp, fp, #4294967295
 8014f02:	4605      	mov	r5, r0
 8014f04:	2b00      	cmp	r3, #0
 8014f06:	f000 8197 	beq.w	8015238 <_dtoa_r+0xa90>
 8014f0a:	4639      	mov	r1, r7
 8014f0c:	2300      	movs	r3, #0
 8014f0e:	220a      	movs	r2, #10
 8014f10:	4630      	mov	r0, r6
 8014f12:	f000 fa63 	bl	80153dc <__multadd>
 8014f16:	f1ba 0f00 	cmp.w	sl, #0
 8014f1a:	4607      	mov	r7, r0
 8014f1c:	f300 8093 	bgt.w	8015046 <_dtoa_r+0x89e>
 8014f20:	9b06      	ldr	r3, [sp, #24]
 8014f22:	2b02      	cmp	r3, #2
 8014f24:	dc57      	bgt.n	8014fd6 <_dtoa_r+0x82e>
 8014f26:	e08e      	b.n	8015046 <_dtoa_r+0x89e>
 8014f28:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014f2a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8014f2e:	e751      	b.n	8014dd4 <_dtoa_r+0x62c>
 8014f30:	f109 34ff 	add.w	r4, r9, #4294967295
 8014f34:	42a3      	cmp	r3, r4
 8014f36:	bfbf      	itttt	lt
 8014f38:	1ae2      	sublt	r2, r4, r3
 8014f3a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8014f3c:	189b      	addlt	r3, r3, r2
 8014f3e:	930a      	strlt	r3, [sp, #40]	; 0x28
 8014f40:	bfae      	itee	ge
 8014f42:	1b1c      	subge	r4, r3, r4
 8014f44:	4623      	movlt	r3, r4
 8014f46:	2400      	movlt	r4, #0
 8014f48:	f1b9 0f00 	cmp.w	r9, #0
 8014f4c:	bfb5      	itete	lt
 8014f4e:	9a04      	ldrlt	r2, [sp, #16]
 8014f50:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8014f54:	eba2 0809 	sublt.w	r8, r2, r9
 8014f58:	464a      	movge	r2, r9
 8014f5a:	bfb8      	it	lt
 8014f5c:	2200      	movlt	r2, #0
 8014f5e:	e73c      	b.n	8014dda <_dtoa_r+0x632>
 8014f60:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8014f64:	9f07      	ldr	r7, [sp, #28]
 8014f66:	461c      	mov	r4, r3
 8014f68:	e744      	b.n	8014df4 <_dtoa_r+0x64c>
 8014f6a:	461a      	mov	r2, r3
 8014f6c:	e770      	b.n	8014e50 <_dtoa_r+0x6a8>
 8014f6e:	9b06      	ldr	r3, [sp, #24]
 8014f70:	2b01      	cmp	r3, #1
 8014f72:	dc18      	bgt.n	8014fa6 <_dtoa_r+0x7fe>
 8014f74:	9b02      	ldr	r3, [sp, #8]
 8014f76:	b9b3      	cbnz	r3, 8014fa6 <_dtoa_r+0x7fe>
 8014f78:	9b03      	ldr	r3, [sp, #12]
 8014f7a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8014f7e:	b9a2      	cbnz	r2, 8014faa <_dtoa_r+0x802>
 8014f80:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8014f84:	0d12      	lsrs	r2, r2, #20
 8014f86:	0512      	lsls	r2, r2, #20
 8014f88:	b18a      	cbz	r2, 8014fae <_dtoa_r+0x806>
 8014f8a:	9b04      	ldr	r3, [sp, #16]
 8014f8c:	3301      	adds	r3, #1
 8014f8e:	9304      	str	r3, [sp, #16]
 8014f90:	9b05      	ldr	r3, [sp, #20]
 8014f92:	3301      	adds	r3, #1
 8014f94:	9305      	str	r3, [sp, #20]
 8014f96:	2301      	movs	r3, #1
 8014f98:	9309      	str	r3, [sp, #36]	; 0x24
 8014f9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014f9c:	2b00      	cmp	r3, #0
 8014f9e:	f47f af70 	bne.w	8014e82 <_dtoa_r+0x6da>
 8014fa2:	2001      	movs	r0, #1
 8014fa4:	e775      	b.n	8014e92 <_dtoa_r+0x6ea>
 8014fa6:	2300      	movs	r3, #0
 8014fa8:	e7f6      	b.n	8014f98 <_dtoa_r+0x7f0>
 8014faa:	9b02      	ldr	r3, [sp, #8]
 8014fac:	e7f4      	b.n	8014f98 <_dtoa_r+0x7f0>
 8014fae:	9209      	str	r2, [sp, #36]	; 0x24
 8014fb0:	e7f3      	b.n	8014f9a <_dtoa_r+0x7f2>
 8014fb2:	d082      	beq.n	8014eba <_dtoa_r+0x712>
 8014fb4:	9b04      	ldr	r3, [sp, #16]
 8014fb6:	321c      	adds	r2, #28
 8014fb8:	4413      	add	r3, r2
 8014fba:	9304      	str	r3, [sp, #16]
 8014fbc:	9b05      	ldr	r3, [sp, #20]
 8014fbe:	4490      	add	r8, r2
 8014fc0:	4413      	add	r3, r2
 8014fc2:	e779      	b.n	8014eb8 <_dtoa_r+0x710>
 8014fc4:	4602      	mov	r2, r0
 8014fc6:	e7f5      	b.n	8014fb4 <_dtoa_r+0x80c>
 8014fc8:	f1b9 0f00 	cmp.w	r9, #0
 8014fcc:	dc36      	bgt.n	801503c <_dtoa_r+0x894>
 8014fce:	9b06      	ldr	r3, [sp, #24]
 8014fd0:	2b02      	cmp	r3, #2
 8014fd2:	dd33      	ble.n	801503c <_dtoa_r+0x894>
 8014fd4:	46ca      	mov	sl, r9
 8014fd6:	f1ba 0f00 	cmp.w	sl, #0
 8014fda:	d10d      	bne.n	8014ff8 <_dtoa_r+0x850>
 8014fdc:	4621      	mov	r1, r4
 8014fde:	4653      	mov	r3, sl
 8014fe0:	2205      	movs	r2, #5
 8014fe2:	4630      	mov	r0, r6
 8014fe4:	f000 f9fa 	bl	80153dc <__multadd>
 8014fe8:	4601      	mov	r1, r0
 8014fea:	4604      	mov	r4, r0
 8014fec:	4628      	mov	r0, r5
 8014fee:	f000 fc59 	bl	80158a4 <__mcmp>
 8014ff2:	2800      	cmp	r0, #0
 8014ff4:	f73f ade4 	bgt.w	8014bc0 <_dtoa_r+0x418>
 8014ff8:	9b08      	ldr	r3, [sp, #32]
 8014ffa:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8014ffe:	ea6f 0b03 	mvn.w	fp, r3
 8015002:	f04f 0900 	mov.w	r9, #0
 8015006:	4621      	mov	r1, r4
 8015008:	4630      	mov	r0, r6
 801500a:	f000 f9c5 	bl	8015398 <_Bfree>
 801500e:	2f00      	cmp	r7, #0
 8015010:	f43f aea1 	beq.w	8014d56 <_dtoa_r+0x5ae>
 8015014:	f1b9 0f00 	cmp.w	r9, #0
 8015018:	d005      	beq.n	8015026 <_dtoa_r+0x87e>
 801501a:	45b9      	cmp	r9, r7
 801501c:	d003      	beq.n	8015026 <_dtoa_r+0x87e>
 801501e:	4649      	mov	r1, r9
 8015020:	4630      	mov	r0, r6
 8015022:	f000 f9b9 	bl	8015398 <_Bfree>
 8015026:	4639      	mov	r1, r7
 8015028:	4630      	mov	r0, r6
 801502a:	f000 f9b5 	bl	8015398 <_Bfree>
 801502e:	e692      	b.n	8014d56 <_dtoa_r+0x5ae>
 8015030:	2400      	movs	r4, #0
 8015032:	4627      	mov	r7, r4
 8015034:	e7e0      	b.n	8014ff8 <_dtoa_r+0x850>
 8015036:	4693      	mov	fp, r2
 8015038:	4627      	mov	r7, r4
 801503a:	e5c1      	b.n	8014bc0 <_dtoa_r+0x418>
 801503c:	9b07      	ldr	r3, [sp, #28]
 801503e:	46ca      	mov	sl, r9
 8015040:	2b00      	cmp	r3, #0
 8015042:	f000 8100 	beq.w	8015246 <_dtoa_r+0xa9e>
 8015046:	f1b8 0f00 	cmp.w	r8, #0
 801504a:	dd05      	ble.n	8015058 <_dtoa_r+0x8b0>
 801504c:	4639      	mov	r1, r7
 801504e:	4642      	mov	r2, r8
 8015050:	4630      	mov	r0, r6
 8015052:	f000 fbbb 	bl	80157cc <__lshift>
 8015056:	4607      	mov	r7, r0
 8015058:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801505a:	2b00      	cmp	r3, #0
 801505c:	d05d      	beq.n	801511a <_dtoa_r+0x972>
 801505e:	6879      	ldr	r1, [r7, #4]
 8015060:	4630      	mov	r0, r6
 8015062:	f000 f959 	bl	8015318 <_Balloc>
 8015066:	4680      	mov	r8, r0
 8015068:	b928      	cbnz	r0, 8015076 <_dtoa_r+0x8ce>
 801506a:	4b82      	ldr	r3, [pc, #520]	; (8015274 <_dtoa_r+0xacc>)
 801506c:	4602      	mov	r2, r0
 801506e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8015072:	f7ff bbb1 	b.w	80147d8 <_dtoa_r+0x30>
 8015076:	693a      	ldr	r2, [r7, #16]
 8015078:	3202      	adds	r2, #2
 801507a:	0092      	lsls	r2, r2, #2
 801507c:	f107 010c 	add.w	r1, r7, #12
 8015080:	300c      	adds	r0, #12
 8015082:	f7ff faf2 	bl	801466a <memcpy>
 8015086:	2201      	movs	r2, #1
 8015088:	4641      	mov	r1, r8
 801508a:	4630      	mov	r0, r6
 801508c:	f000 fb9e 	bl	80157cc <__lshift>
 8015090:	9b01      	ldr	r3, [sp, #4]
 8015092:	3301      	adds	r3, #1
 8015094:	9304      	str	r3, [sp, #16]
 8015096:	9b01      	ldr	r3, [sp, #4]
 8015098:	4453      	add	r3, sl
 801509a:	9308      	str	r3, [sp, #32]
 801509c:	9b02      	ldr	r3, [sp, #8]
 801509e:	f003 0301 	and.w	r3, r3, #1
 80150a2:	46b9      	mov	r9, r7
 80150a4:	9307      	str	r3, [sp, #28]
 80150a6:	4607      	mov	r7, r0
 80150a8:	9b04      	ldr	r3, [sp, #16]
 80150aa:	4621      	mov	r1, r4
 80150ac:	3b01      	subs	r3, #1
 80150ae:	4628      	mov	r0, r5
 80150b0:	9302      	str	r3, [sp, #8]
 80150b2:	f7ff faef 	bl	8014694 <quorem>
 80150b6:	4603      	mov	r3, r0
 80150b8:	3330      	adds	r3, #48	; 0x30
 80150ba:	9005      	str	r0, [sp, #20]
 80150bc:	4649      	mov	r1, r9
 80150be:	4628      	mov	r0, r5
 80150c0:	9309      	str	r3, [sp, #36]	; 0x24
 80150c2:	f000 fbef 	bl	80158a4 <__mcmp>
 80150c6:	463a      	mov	r2, r7
 80150c8:	4682      	mov	sl, r0
 80150ca:	4621      	mov	r1, r4
 80150cc:	4630      	mov	r0, r6
 80150ce:	f000 fc05 	bl	80158dc <__mdiff>
 80150d2:	68c2      	ldr	r2, [r0, #12]
 80150d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80150d6:	4680      	mov	r8, r0
 80150d8:	bb0a      	cbnz	r2, 801511e <_dtoa_r+0x976>
 80150da:	4601      	mov	r1, r0
 80150dc:	4628      	mov	r0, r5
 80150de:	f000 fbe1 	bl	80158a4 <__mcmp>
 80150e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80150e4:	4602      	mov	r2, r0
 80150e6:	4641      	mov	r1, r8
 80150e8:	4630      	mov	r0, r6
 80150ea:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 80150ee:	f000 f953 	bl	8015398 <_Bfree>
 80150f2:	9b06      	ldr	r3, [sp, #24]
 80150f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80150f6:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80150fa:	ea43 0102 	orr.w	r1, r3, r2
 80150fe:	9b07      	ldr	r3, [sp, #28]
 8015100:	4319      	orrs	r1, r3
 8015102:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015104:	d10d      	bne.n	8015122 <_dtoa_r+0x97a>
 8015106:	2b39      	cmp	r3, #57	; 0x39
 8015108:	d029      	beq.n	801515e <_dtoa_r+0x9b6>
 801510a:	f1ba 0f00 	cmp.w	sl, #0
 801510e:	dd01      	ble.n	8015114 <_dtoa_r+0x96c>
 8015110:	9b05      	ldr	r3, [sp, #20]
 8015112:	3331      	adds	r3, #49	; 0x31
 8015114:	9a02      	ldr	r2, [sp, #8]
 8015116:	7013      	strb	r3, [r2, #0]
 8015118:	e775      	b.n	8015006 <_dtoa_r+0x85e>
 801511a:	4638      	mov	r0, r7
 801511c:	e7b8      	b.n	8015090 <_dtoa_r+0x8e8>
 801511e:	2201      	movs	r2, #1
 8015120:	e7e1      	b.n	80150e6 <_dtoa_r+0x93e>
 8015122:	f1ba 0f00 	cmp.w	sl, #0
 8015126:	db06      	blt.n	8015136 <_dtoa_r+0x98e>
 8015128:	9906      	ldr	r1, [sp, #24]
 801512a:	ea41 0a0a 	orr.w	sl, r1, sl
 801512e:	9907      	ldr	r1, [sp, #28]
 8015130:	ea5a 0a01 	orrs.w	sl, sl, r1
 8015134:	d120      	bne.n	8015178 <_dtoa_r+0x9d0>
 8015136:	2a00      	cmp	r2, #0
 8015138:	ddec      	ble.n	8015114 <_dtoa_r+0x96c>
 801513a:	4629      	mov	r1, r5
 801513c:	2201      	movs	r2, #1
 801513e:	4630      	mov	r0, r6
 8015140:	9304      	str	r3, [sp, #16]
 8015142:	f000 fb43 	bl	80157cc <__lshift>
 8015146:	4621      	mov	r1, r4
 8015148:	4605      	mov	r5, r0
 801514a:	f000 fbab 	bl	80158a4 <__mcmp>
 801514e:	2800      	cmp	r0, #0
 8015150:	9b04      	ldr	r3, [sp, #16]
 8015152:	dc02      	bgt.n	801515a <_dtoa_r+0x9b2>
 8015154:	d1de      	bne.n	8015114 <_dtoa_r+0x96c>
 8015156:	07da      	lsls	r2, r3, #31
 8015158:	d5dc      	bpl.n	8015114 <_dtoa_r+0x96c>
 801515a:	2b39      	cmp	r3, #57	; 0x39
 801515c:	d1d8      	bne.n	8015110 <_dtoa_r+0x968>
 801515e:	9a02      	ldr	r2, [sp, #8]
 8015160:	2339      	movs	r3, #57	; 0x39
 8015162:	7013      	strb	r3, [r2, #0]
 8015164:	4643      	mov	r3, r8
 8015166:	4698      	mov	r8, r3
 8015168:	3b01      	subs	r3, #1
 801516a:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 801516e:	2a39      	cmp	r2, #57	; 0x39
 8015170:	d051      	beq.n	8015216 <_dtoa_r+0xa6e>
 8015172:	3201      	adds	r2, #1
 8015174:	701a      	strb	r2, [r3, #0]
 8015176:	e746      	b.n	8015006 <_dtoa_r+0x85e>
 8015178:	2a00      	cmp	r2, #0
 801517a:	dd03      	ble.n	8015184 <_dtoa_r+0x9dc>
 801517c:	2b39      	cmp	r3, #57	; 0x39
 801517e:	d0ee      	beq.n	801515e <_dtoa_r+0x9b6>
 8015180:	3301      	adds	r3, #1
 8015182:	e7c7      	b.n	8015114 <_dtoa_r+0x96c>
 8015184:	9a04      	ldr	r2, [sp, #16]
 8015186:	9908      	ldr	r1, [sp, #32]
 8015188:	f802 3c01 	strb.w	r3, [r2, #-1]
 801518c:	428a      	cmp	r2, r1
 801518e:	d02b      	beq.n	80151e8 <_dtoa_r+0xa40>
 8015190:	4629      	mov	r1, r5
 8015192:	2300      	movs	r3, #0
 8015194:	220a      	movs	r2, #10
 8015196:	4630      	mov	r0, r6
 8015198:	f000 f920 	bl	80153dc <__multadd>
 801519c:	45b9      	cmp	r9, r7
 801519e:	4605      	mov	r5, r0
 80151a0:	f04f 0300 	mov.w	r3, #0
 80151a4:	f04f 020a 	mov.w	r2, #10
 80151a8:	4649      	mov	r1, r9
 80151aa:	4630      	mov	r0, r6
 80151ac:	d107      	bne.n	80151be <_dtoa_r+0xa16>
 80151ae:	f000 f915 	bl	80153dc <__multadd>
 80151b2:	4681      	mov	r9, r0
 80151b4:	4607      	mov	r7, r0
 80151b6:	9b04      	ldr	r3, [sp, #16]
 80151b8:	3301      	adds	r3, #1
 80151ba:	9304      	str	r3, [sp, #16]
 80151bc:	e774      	b.n	80150a8 <_dtoa_r+0x900>
 80151be:	f000 f90d 	bl	80153dc <__multadd>
 80151c2:	4639      	mov	r1, r7
 80151c4:	4681      	mov	r9, r0
 80151c6:	2300      	movs	r3, #0
 80151c8:	220a      	movs	r2, #10
 80151ca:	4630      	mov	r0, r6
 80151cc:	f000 f906 	bl	80153dc <__multadd>
 80151d0:	4607      	mov	r7, r0
 80151d2:	e7f0      	b.n	80151b6 <_dtoa_r+0xa0e>
 80151d4:	f1ba 0f00 	cmp.w	sl, #0
 80151d8:	9a01      	ldr	r2, [sp, #4]
 80151da:	bfcc      	ite	gt
 80151dc:	46d0      	movgt	r8, sl
 80151de:	f04f 0801 	movle.w	r8, #1
 80151e2:	4490      	add	r8, r2
 80151e4:	f04f 0900 	mov.w	r9, #0
 80151e8:	4629      	mov	r1, r5
 80151ea:	2201      	movs	r2, #1
 80151ec:	4630      	mov	r0, r6
 80151ee:	9302      	str	r3, [sp, #8]
 80151f0:	f000 faec 	bl	80157cc <__lshift>
 80151f4:	4621      	mov	r1, r4
 80151f6:	4605      	mov	r5, r0
 80151f8:	f000 fb54 	bl	80158a4 <__mcmp>
 80151fc:	2800      	cmp	r0, #0
 80151fe:	dcb1      	bgt.n	8015164 <_dtoa_r+0x9bc>
 8015200:	d102      	bne.n	8015208 <_dtoa_r+0xa60>
 8015202:	9b02      	ldr	r3, [sp, #8]
 8015204:	07db      	lsls	r3, r3, #31
 8015206:	d4ad      	bmi.n	8015164 <_dtoa_r+0x9bc>
 8015208:	4643      	mov	r3, r8
 801520a:	4698      	mov	r8, r3
 801520c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8015210:	2a30      	cmp	r2, #48	; 0x30
 8015212:	d0fa      	beq.n	801520a <_dtoa_r+0xa62>
 8015214:	e6f7      	b.n	8015006 <_dtoa_r+0x85e>
 8015216:	9a01      	ldr	r2, [sp, #4]
 8015218:	429a      	cmp	r2, r3
 801521a:	d1a4      	bne.n	8015166 <_dtoa_r+0x9be>
 801521c:	f10b 0b01 	add.w	fp, fp, #1
 8015220:	2331      	movs	r3, #49	; 0x31
 8015222:	e778      	b.n	8015116 <_dtoa_r+0x96e>
 8015224:	4b14      	ldr	r3, [pc, #80]	; (8015278 <_dtoa_r+0xad0>)
 8015226:	f7ff bb2a 	b.w	801487e <_dtoa_r+0xd6>
 801522a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801522c:	2b00      	cmp	r3, #0
 801522e:	f47f ab05 	bne.w	801483c <_dtoa_r+0x94>
 8015232:	4b12      	ldr	r3, [pc, #72]	; (801527c <_dtoa_r+0xad4>)
 8015234:	f7ff bb23 	b.w	801487e <_dtoa_r+0xd6>
 8015238:	f1ba 0f00 	cmp.w	sl, #0
 801523c:	dc03      	bgt.n	8015246 <_dtoa_r+0xa9e>
 801523e:	9b06      	ldr	r3, [sp, #24]
 8015240:	2b02      	cmp	r3, #2
 8015242:	f73f aec8 	bgt.w	8014fd6 <_dtoa_r+0x82e>
 8015246:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801524a:	4621      	mov	r1, r4
 801524c:	4628      	mov	r0, r5
 801524e:	f7ff fa21 	bl	8014694 <quorem>
 8015252:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8015256:	f808 3b01 	strb.w	r3, [r8], #1
 801525a:	9a01      	ldr	r2, [sp, #4]
 801525c:	eba8 0202 	sub.w	r2, r8, r2
 8015260:	4592      	cmp	sl, r2
 8015262:	ddb7      	ble.n	80151d4 <_dtoa_r+0xa2c>
 8015264:	4629      	mov	r1, r5
 8015266:	2300      	movs	r3, #0
 8015268:	220a      	movs	r2, #10
 801526a:	4630      	mov	r0, r6
 801526c:	f000 f8b6 	bl	80153dc <__multadd>
 8015270:	4605      	mov	r5, r0
 8015272:	e7ea      	b.n	801524a <_dtoa_r+0xaa2>
 8015274:	08017db1 	.word	0x08017db1
 8015278:	08017d0c 	.word	0x08017d0c
 801527c:	08017d35 	.word	0x08017d35

08015280 <_free_r>:
 8015280:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015282:	2900      	cmp	r1, #0
 8015284:	d044      	beq.n	8015310 <_free_r+0x90>
 8015286:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801528a:	9001      	str	r0, [sp, #4]
 801528c:	2b00      	cmp	r3, #0
 801528e:	f1a1 0404 	sub.w	r4, r1, #4
 8015292:	bfb8      	it	lt
 8015294:	18e4      	addlt	r4, r4, r3
 8015296:	f7fe f95d 	bl	8013554 <__malloc_lock>
 801529a:	4a1e      	ldr	r2, [pc, #120]	; (8015314 <_free_r+0x94>)
 801529c:	9801      	ldr	r0, [sp, #4]
 801529e:	6813      	ldr	r3, [r2, #0]
 80152a0:	b933      	cbnz	r3, 80152b0 <_free_r+0x30>
 80152a2:	6063      	str	r3, [r4, #4]
 80152a4:	6014      	str	r4, [r2, #0]
 80152a6:	b003      	add	sp, #12
 80152a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80152ac:	f7fe b958 	b.w	8013560 <__malloc_unlock>
 80152b0:	42a3      	cmp	r3, r4
 80152b2:	d908      	bls.n	80152c6 <_free_r+0x46>
 80152b4:	6825      	ldr	r5, [r4, #0]
 80152b6:	1961      	adds	r1, r4, r5
 80152b8:	428b      	cmp	r3, r1
 80152ba:	bf01      	itttt	eq
 80152bc:	6819      	ldreq	r1, [r3, #0]
 80152be:	685b      	ldreq	r3, [r3, #4]
 80152c0:	1949      	addeq	r1, r1, r5
 80152c2:	6021      	streq	r1, [r4, #0]
 80152c4:	e7ed      	b.n	80152a2 <_free_r+0x22>
 80152c6:	461a      	mov	r2, r3
 80152c8:	685b      	ldr	r3, [r3, #4]
 80152ca:	b10b      	cbz	r3, 80152d0 <_free_r+0x50>
 80152cc:	42a3      	cmp	r3, r4
 80152ce:	d9fa      	bls.n	80152c6 <_free_r+0x46>
 80152d0:	6811      	ldr	r1, [r2, #0]
 80152d2:	1855      	adds	r5, r2, r1
 80152d4:	42a5      	cmp	r5, r4
 80152d6:	d10b      	bne.n	80152f0 <_free_r+0x70>
 80152d8:	6824      	ldr	r4, [r4, #0]
 80152da:	4421      	add	r1, r4
 80152dc:	1854      	adds	r4, r2, r1
 80152de:	42a3      	cmp	r3, r4
 80152e0:	6011      	str	r1, [r2, #0]
 80152e2:	d1e0      	bne.n	80152a6 <_free_r+0x26>
 80152e4:	681c      	ldr	r4, [r3, #0]
 80152e6:	685b      	ldr	r3, [r3, #4]
 80152e8:	6053      	str	r3, [r2, #4]
 80152ea:	440c      	add	r4, r1
 80152ec:	6014      	str	r4, [r2, #0]
 80152ee:	e7da      	b.n	80152a6 <_free_r+0x26>
 80152f0:	d902      	bls.n	80152f8 <_free_r+0x78>
 80152f2:	230c      	movs	r3, #12
 80152f4:	6003      	str	r3, [r0, #0]
 80152f6:	e7d6      	b.n	80152a6 <_free_r+0x26>
 80152f8:	6825      	ldr	r5, [r4, #0]
 80152fa:	1961      	adds	r1, r4, r5
 80152fc:	428b      	cmp	r3, r1
 80152fe:	bf04      	itt	eq
 8015300:	6819      	ldreq	r1, [r3, #0]
 8015302:	685b      	ldreq	r3, [r3, #4]
 8015304:	6063      	str	r3, [r4, #4]
 8015306:	bf04      	itt	eq
 8015308:	1949      	addeq	r1, r1, r5
 801530a:	6021      	streq	r1, [r4, #0]
 801530c:	6054      	str	r4, [r2, #4]
 801530e:	e7ca      	b.n	80152a6 <_free_r+0x26>
 8015310:	b003      	add	sp, #12
 8015312:	bd30      	pop	{r4, r5, pc}
 8015314:	24005604 	.word	0x24005604

08015318 <_Balloc>:
 8015318:	b570      	push	{r4, r5, r6, lr}
 801531a:	69c6      	ldr	r6, [r0, #28]
 801531c:	4604      	mov	r4, r0
 801531e:	460d      	mov	r5, r1
 8015320:	b976      	cbnz	r6, 8015340 <_Balloc+0x28>
 8015322:	2010      	movs	r0, #16
 8015324:	f7fe f866 	bl	80133f4 <malloc>
 8015328:	4602      	mov	r2, r0
 801532a:	61e0      	str	r0, [r4, #28]
 801532c:	b920      	cbnz	r0, 8015338 <_Balloc+0x20>
 801532e:	4b18      	ldr	r3, [pc, #96]	; (8015390 <_Balloc+0x78>)
 8015330:	4818      	ldr	r0, [pc, #96]	; (8015394 <_Balloc+0x7c>)
 8015332:	216b      	movs	r1, #107	; 0x6b
 8015334:	f001 fd2c 	bl	8016d90 <__assert_func>
 8015338:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801533c:	6006      	str	r6, [r0, #0]
 801533e:	60c6      	str	r6, [r0, #12]
 8015340:	69e6      	ldr	r6, [r4, #28]
 8015342:	68f3      	ldr	r3, [r6, #12]
 8015344:	b183      	cbz	r3, 8015368 <_Balloc+0x50>
 8015346:	69e3      	ldr	r3, [r4, #28]
 8015348:	68db      	ldr	r3, [r3, #12]
 801534a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801534e:	b9b8      	cbnz	r0, 8015380 <_Balloc+0x68>
 8015350:	2101      	movs	r1, #1
 8015352:	fa01 f605 	lsl.w	r6, r1, r5
 8015356:	1d72      	adds	r2, r6, #5
 8015358:	0092      	lsls	r2, r2, #2
 801535a:	4620      	mov	r0, r4
 801535c:	f001 fd36 	bl	8016dcc <_calloc_r>
 8015360:	b160      	cbz	r0, 801537c <_Balloc+0x64>
 8015362:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8015366:	e00e      	b.n	8015386 <_Balloc+0x6e>
 8015368:	2221      	movs	r2, #33	; 0x21
 801536a:	2104      	movs	r1, #4
 801536c:	4620      	mov	r0, r4
 801536e:	f001 fd2d 	bl	8016dcc <_calloc_r>
 8015372:	69e3      	ldr	r3, [r4, #28]
 8015374:	60f0      	str	r0, [r6, #12]
 8015376:	68db      	ldr	r3, [r3, #12]
 8015378:	2b00      	cmp	r3, #0
 801537a:	d1e4      	bne.n	8015346 <_Balloc+0x2e>
 801537c:	2000      	movs	r0, #0
 801537e:	bd70      	pop	{r4, r5, r6, pc}
 8015380:	6802      	ldr	r2, [r0, #0]
 8015382:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015386:	2300      	movs	r3, #0
 8015388:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801538c:	e7f7      	b.n	801537e <_Balloc+0x66>
 801538e:	bf00      	nop
 8015390:	08017d42 	.word	0x08017d42
 8015394:	08017dc2 	.word	0x08017dc2

08015398 <_Bfree>:
 8015398:	b570      	push	{r4, r5, r6, lr}
 801539a:	69c6      	ldr	r6, [r0, #28]
 801539c:	4605      	mov	r5, r0
 801539e:	460c      	mov	r4, r1
 80153a0:	b976      	cbnz	r6, 80153c0 <_Bfree+0x28>
 80153a2:	2010      	movs	r0, #16
 80153a4:	f7fe f826 	bl	80133f4 <malloc>
 80153a8:	4602      	mov	r2, r0
 80153aa:	61e8      	str	r0, [r5, #28]
 80153ac:	b920      	cbnz	r0, 80153b8 <_Bfree+0x20>
 80153ae:	4b09      	ldr	r3, [pc, #36]	; (80153d4 <_Bfree+0x3c>)
 80153b0:	4809      	ldr	r0, [pc, #36]	; (80153d8 <_Bfree+0x40>)
 80153b2:	218f      	movs	r1, #143	; 0x8f
 80153b4:	f001 fcec 	bl	8016d90 <__assert_func>
 80153b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80153bc:	6006      	str	r6, [r0, #0]
 80153be:	60c6      	str	r6, [r0, #12]
 80153c0:	b13c      	cbz	r4, 80153d2 <_Bfree+0x3a>
 80153c2:	69eb      	ldr	r3, [r5, #28]
 80153c4:	6862      	ldr	r2, [r4, #4]
 80153c6:	68db      	ldr	r3, [r3, #12]
 80153c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80153cc:	6021      	str	r1, [r4, #0]
 80153ce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80153d2:	bd70      	pop	{r4, r5, r6, pc}
 80153d4:	08017d42 	.word	0x08017d42
 80153d8:	08017dc2 	.word	0x08017dc2

080153dc <__multadd>:
 80153dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80153e0:	690d      	ldr	r5, [r1, #16]
 80153e2:	4607      	mov	r7, r0
 80153e4:	460c      	mov	r4, r1
 80153e6:	461e      	mov	r6, r3
 80153e8:	f101 0c14 	add.w	ip, r1, #20
 80153ec:	2000      	movs	r0, #0
 80153ee:	f8dc 3000 	ldr.w	r3, [ip]
 80153f2:	b299      	uxth	r1, r3
 80153f4:	fb02 6101 	mla	r1, r2, r1, r6
 80153f8:	0c1e      	lsrs	r6, r3, #16
 80153fa:	0c0b      	lsrs	r3, r1, #16
 80153fc:	fb02 3306 	mla	r3, r2, r6, r3
 8015400:	b289      	uxth	r1, r1
 8015402:	3001      	adds	r0, #1
 8015404:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8015408:	4285      	cmp	r5, r0
 801540a:	f84c 1b04 	str.w	r1, [ip], #4
 801540e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8015412:	dcec      	bgt.n	80153ee <__multadd+0x12>
 8015414:	b30e      	cbz	r6, 801545a <__multadd+0x7e>
 8015416:	68a3      	ldr	r3, [r4, #8]
 8015418:	42ab      	cmp	r3, r5
 801541a:	dc19      	bgt.n	8015450 <__multadd+0x74>
 801541c:	6861      	ldr	r1, [r4, #4]
 801541e:	4638      	mov	r0, r7
 8015420:	3101      	adds	r1, #1
 8015422:	f7ff ff79 	bl	8015318 <_Balloc>
 8015426:	4680      	mov	r8, r0
 8015428:	b928      	cbnz	r0, 8015436 <__multadd+0x5a>
 801542a:	4602      	mov	r2, r0
 801542c:	4b0c      	ldr	r3, [pc, #48]	; (8015460 <__multadd+0x84>)
 801542e:	480d      	ldr	r0, [pc, #52]	; (8015464 <__multadd+0x88>)
 8015430:	21ba      	movs	r1, #186	; 0xba
 8015432:	f001 fcad 	bl	8016d90 <__assert_func>
 8015436:	6922      	ldr	r2, [r4, #16]
 8015438:	3202      	adds	r2, #2
 801543a:	f104 010c 	add.w	r1, r4, #12
 801543e:	0092      	lsls	r2, r2, #2
 8015440:	300c      	adds	r0, #12
 8015442:	f7ff f912 	bl	801466a <memcpy>
 8015446:	4621      	mov	r1, r4
 8015448:	4638      	mov	r0, r7
 801544a:	f7ff ffa5 	bl	8015398 <_Bfree>
 801544e:	4644      	mov	r4, r8
 8015450:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8015454:	3501      	adds	r5, #1
 8015456:	615e      	str	r6, [r3, #20]
 8015458:	6125      	str	r5, [r4, #16]
 801545a:	4620      	mov	r0, r4
 801545c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015460:	08017db1 	.word	0x08017db1
 8015464:	08017dc2 	.word	0x08017dc2

08015468 <__s2b>:
 8015468:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801546c:	460c      	mov	r4, r1
 801546e:	4615      	mov	r5, r2
 8015470:	461f      	mov	r7, r3
 8015472:	2209      	movs	r2, #9
 8015474:	3308      	adds	r3, #8
 8015476:	4606      	mov	r6, r0
 8015478:	fb93 f3f2 	sdiv	r3, r3, r2
 801547c:	2100      	movs	r1, #0
 801547e:	2201      	movs	r2, #1
 8015480:	429a      	cmp	r2, r3
 8015482:	db09      	blt.n	8015498 <__s2b+0x30>
 8015484:	4630      	mov	r0, r6
 8015486:	f7ff ff47 	bl	8015318 <_Balloc>
 801548a:	b940      	cbnz	r0, 801549e <__s2b+0x36>
 801548c:	4602      	mov	r2, r0
 801548e:	4b19      	ldr	r3, [pc, #100]	; (80154f4 <__s2b+0x8c>)
 8015490:	4819      	ldr	r0, [pc, #100]	; (80154f8 <__s2b+0x90>)
 8015492:	21d3      	movs	r1, #211	; 0xd3
 8015494:	f001 fc7c 	bl	8016d90 <__assert_func>
 8015498:	0052      	lsls	r2, r2, #1
 801549a:	3101      	adds	r1, #1
 801549c:	e7f0      	b.n	8015480 <__s2b+0x18>
 801549e:	9b08      	ldr	r3, [sp, #32]
 80154a0:	6143      	str	r3, [r0, #20]
 80154a2:	2d09      	cmp	r5, #9
 80154a4:	f04f 0301 	mov.w	r3, #1
 80154a8:	6103      	str	r3, [r0, #16]
 80154aa:	dd16      	ble.n	80154da <__s2b+0x72>
 80154ac:	f104 0909 	add.w	r9, r4, #9
 80154b0:	46c8      	mov	r8, r9
 80154b2:	442c      	add	r4, r5
 80154b4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80154b8:	4601      	mov	r1, r0
 80154ba:	3b30      	subs	r3, #48	; 0x30
 80154bc:	220a      	movs	r2, #10
 80154be:	4630      	mov	r0, r6
 80154c0:	f7ff ff8c 	bl	80153dc <__multadd>
 80154c4:	45a0      	cmp	r8, r4
 80154c6:	d1f5      	bne.n	80154b4 <__s2b+0x4c>
 80154c8:	f1a5 0408 	sub.w	r4, r5, #8
 80154cc:	444c      	add	r4, r9
 80154ce:	1b2d      	subs	r5, r5, r4
 80154d0:	1963      	adds	r3, r4, r5
 80154d2:	42bb      	cmp	r3, r7
 80154d4:	db04      	blt.n	80154e0 <__s2b+0x78>
 80154d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80154da:	340a      	adds	r4, #10
 80154dc:	2509      	movs	r5, #9
 80154de:	e7f6      	b.n	80154ce <__s2b+0x66>
 80154e0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80154e4:	4601      	mov	r1, r0
 80154e6:	3b30      	subs	r3, #48	; 0x30
 80154e8:	220a      	movs	r2, #10
 80154ea:	4630      	mov	r0, r6
 80154ec:	f7ff ff76 	bl	80153dc <__multadd>
 80154f0:	e7ee      	b.n	80154d0 <__s2b+0x68>
 80154f2:	bf00      	nop
 80154f4:	08017db1 	.word	0x08017db1
 80154f8:	08017dc2 	.word	0x08017dc2

080154fc <__hi0bits>:
 80154fc:	0c03      	lsrs	r3, r0, #16
 80154fe:	041b      	lsls	r3, r3, #16
 8015500:	b9d3      	cbnz	r3, 8015538 <__hi0bits+0x3c>
 8015502:	0400      	lsls	r0, r0, #16
 8015504:	2310      	movs	r3, #16
 8015506:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801550a:	bf04      	itt	eq
 801550c:	0200      	lsleq	r0, r0, #8
 801550e:	3308      	addeq	r3, #8
 8015510:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8015514:	bf04      	itt	eq
 8015516:	0100      	lsleq	r0, r0, #4
 8015518:	3304      	addeq	r3, #4
 801551a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801551e:	bf04      	itt	eq
 8015520:	0080      	lsleq	r0, r0, #2
 8015522:	3302      	addeq	r3, #2
 8015524:	2800      	cmp	r0, #0
 8015526:	db05      	blt.n	8015534 <__hi0bits+0x38>
 8015528:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801552c:	f103 0301 	add.w	r3, r3, #1
 8015530:	bf08      	it	eq
 8015532:	2320      	moveq	r3, #32
 8015534:	4618      	mov	r0, r3
 8015536:	4770      	bx	lr
 8015538:	2300      	movs	r3, #0
 801553a:	e7e4      	b.n	8015506 <__hi0bits+0xa>

0801553c <__lo0bits>:
 801553c:	6803      	ldr	r3, [r0, #0]
 801553e:	f013 0207 	ands.w	r2, r3, #7
 8015542:	d00c      	beq.n	801555e <__lo0bits+0x22>
 8015544:	07d9      	lsls	r1, r3, #31
 8015546:	d422      	bmi.n	801558e <__lo0bits+0x52>
 8015548:	079a      	lsls	r2, r3, #30
 801554a:	bf49      	itett	mi
 801554c:	085b      	lsrmi	r3, r3, #1
 801554e:	089b      	lsrpl	r3, r3, #2
 8015550:	6003      	strmi	r3, [r0, #0]
 8015552:	2201      	movmi	r2, #1
 8015554:	bf5c      	itt	pl
 8015556:	6003      	strpl	r3, [r0, #0]
 8015558:	2202      	movpl	r2, #2
 801555a:	4610      	mov	r0, r2
 801555c:	4770      	bx	lr
 801555e:	b299      	uxth	r1, r3
 8015560:	b909      	cbnz	r1, 8015566 <__lo0bits+0x2a>
 8015562:	0c1b      	lsrs	r3, r3, #16
 8015564:	2210      	movs	r2, #16
 8015566:	b2d9      	uxtb	r1, r3
 8015568:	b909      	cbnz	r1, 801556e <__lo0bits+0x32>
 801556a:	3208      	adds	r2, #8
 801556c:	0a1b      	lsrs	r3, r3, #8
 801556e:	0719      	lsls	r1, r3, #28
 8015570:	bf04      	itt	eq
 8015572:	091b      	lsreq	r3, r3, #4
 8015574:	3204      	addeq	r2, #4
 8015576:	0799      	lsls	r1, r3, #30
 8015578:	bf04      	itt	eq
 801557a:	089b      	lsreq	r3, r3, #2
 801557c:	3202      	addeq	r2, #2
 801557e:	07d9      	lsls	r1, r3, #31
 8015580:	d403      	bmi.n	801558a <__lo0bits+0x4e>
 8015582:	085b      	lsrs	r3, r3, #1
 8015584:	f102 0201 	add.w	r2, r2, #1
 8015588:	d003      	beq.n	8015592 <__lo0bits+0x56>
 801558a:	6003      	str	r3, [r0, #0]
 801558c:	e7e5      	b.n	801555a <__lo0bits+0x1e>
 801558e:	2200      	movs	r2, #0
 8015590:	e7e3      	b.n	801555a <__lo0bits+0x1e>
 8015592:	2220      	movs	r2, #32
 8015594:	e7e1      	b.n	801555a <__lo0bits+0x1e>
	...

08015598 <__i2b>:
 8015598:	b510      	push	{r4, lr}
 801559a:	460c      	mov	r4, r1
 801559c:	2101      	movs	r1, #1
 801559e:	f7ff febb 	bl	8015318 <_Balloc>
 80155a2:	4602      	mov	r2, r0
 80155a4:	b928      	cbnz	r0, 80155b2 <__i2b+0x1a>
 80155a6:	4b05      	ldr	r3, [pc, #20]	; (80155bc <__i2b+0x24>)
 80155a8:	4805      	ldr	r0, [pc, #20]	; (80155c0 <__i2b+0x28>)
 80155aa:	f240 1145 	movw	r1, #325	; 0x145
 80155ae:	f001 fbef 	bl	8016d90 <__assert_func>
 80155b2:	2301      	movs	r3, #1
 80155b4:	6144      	str	r4, [r0, #20]
 80155b6:	6103      	str	r3, [r0, #16]
 80155b8:	bd10      	pop	{r4, pc}
 80155ba:	bf00      	nop
 80155bc:	08017db1 	.word	0x08017db1
 80155c0:	08017dc2 	.word	0x08017dc2

080155c4 <__multiply>:
 80155c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80155c8:	4691      	mov	r9, r2
 80155ca:	690a      	ldr	r2, [r1, #16]
 80155cc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80155d0:	429a      	cmp	r2, r3
 80155d2:	bfb8      	it	lt
 80155d4:	460b      	movlt	r3, r1
 80155d6:	460c      	mov	r4, r1
 80155d8:	bfbc      	itt	lt
 80155da:	464c      	movlt	r4, r9
 80155dc:	4699      	movlt	r9, r3
 80155de:	6927      	ldr	r7, [r4, #16]
 80155e0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80155e4:	68a3      	ldr	r3, [r4, #8]
 80155e6:	6861      	ldr	r1, [r4, #4]
 80155e8:	eb07 060a 	add.w	r6, r7, sl
 80155ec:	42b3      	cmp	r3, r6
 80155ee:	b085      	sub	sp, #20
 80155f0:	bfb8      	it	lt
 80155f2:	3101      	addlt	r1, #1
 80155f4:	f7ff fe90 	bl	8015318 <_Balloc>
 80155f8:	b930      	cbnz	r0, 8015608 <__multiply+0x44>
 80155fa:	4602      	mov	r2, r0
 80155fc:	4b44      	ldr	r3, [pc, #272]	; (8015710 <__multiply+0x14c>)
 80155fe:	4845      	ldr	r0, [pc, #276]	; (8015714 <__multiply+0x150>)
 8015600:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8015604:	f001 fbc4 	bl	8016d90 <__assert_func>
 8015608:	f100 0514 	add.w	r5, r0, #20
 801560c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8015610:	462b      	mov	r3, r5
 8015612:	2200      	movs	r2, #0
 8015614:	4543      	cmp	r3, r8
 8015616:	d321      	bcc.n	801565c <__multiply+0x98>
 8015618:	f104 0314 	add.w	r3, r4, #20
 801561c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8015620:	f109 0314 	add.w	r3, r9, #20
 8015624:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8015628:	9202      	str	r2, [sp, #8]
 801562a:	1b3a      	subs	r2, r7, r4
 801562c:	3a15      	subs	r2, #21
 801562e:	f022 0203 	bic.w	r2, r2, #3
 8015632:	3204      	adds	r2, #4
 8015634:	f104 0115 	add.w	r1, r4, #21
 8015638:	428f      	cmp	r7, r1
 801563a:	bf38      	it	cc
 801563c:	2204      	movcc	r2, #4
 801563e:	9201      	str	r2, [sp, #4]
 8015640:	9a02      	ldr	r2, [sp, #8]
 8015642:	9303      	str	r3, [sp, #12]
 8015644:	429a      	cmp	r2, r3
 8015646:	d80c      	bhi.n	8015662 <__multiply+0x9e>
 8015648:	2e00      	cmp	r6, #0
 801564a:	dd03      	ble.n	8015654 <__multiply+0x90>
 801564c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8015650:	2b00      	cmp	r3, #0
 8015652:	d05b      	beq.n	801570c <__multiply+0x148>
 8015654:	6106      	str	r6, [r0, #16]
 8015656:	b005      	add	sp, #20
 8015658:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801565c:	f843 2b04 	str.w	r2, [r3], #4
 8015660:	e7d8      	b.n	8015614 <__multiply+0x50>
 8015662:	f8b3 a000 	ldrh.w	sl, [r3]
 8015666:	f1ba 0f00 	cmp.w	sl, #0
 801566a:	d024      	beq.n	80156b6 <__multiply+0xf2>
 801566c:	f104 0e14 	add.w	lr, r4, #20
 8015670:	46a9      	mov	r9, r5
 8015672:	f04f 0c00 	mov.w	ip, #0
 8015676:	f85e 2b04 	ldr.w	r2, [lr], #4
 801567a:	f8d9 1000 	ldr.w	r1, [r9]
 801567e:	fa1f fb82 	uxth.w	fp, r2
 8015682:	b289      	uxth	r1, r1
 8015684:	fb0a 110b 	mla	r1, sl, fp, r1
 8015688:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801568c:	f8d9 2000 	ldr.w	r2, [r9]
 8015690:	4461      	add	r1, ip
 8015692:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8015696:	fb0a c20b 	mla	r2, sl, fp, ip
 801569a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801569e:	b289      	uxth	r1, r1
 80156a0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80156a4:	4577      	cmp	r7, lr
 80156a6:	f849 1b04 	str.w	r1, [r9], #4
 80156aa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80156ae:	d8e2      	bhi.n	8015676 <__multiply+0xb2>
 80156b0:	9a01      	ldr	r2, [sp, #4]
 80156b2:	f845 c002 	str.w	ip, [r5, r2]
 80156b6:	9a03      	ldr	r2, [sp, #12]
 80156b8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80156bc:	3304      	adds	r3, #4
 80156be:	f1b9 0f00 	cmp.w	r9, #0
 80156c2:	d021      	beq.n	8015708 <__multiply+0x144>
 80156c4:	6829      	ldr	r1, [r5, #0]
 80156c6:	f104 0c14 	add.w	ip, r4, #20
 80156ca:	46ae      	mov	lr, r5
 80156cc:	f04f 0a00 	mov.w	sl, #0
 80156d0:	f8bc b000 	ldrh.w	fp, [ip]
 80156d4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80156d8:	fb09 220b 	mla	r2, r9, fp, r2
 80156dc:	4452      	add	r2, sl
 80156de:	b289      	uxth	r1, r1
 80156e0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80156e4:	f84e 1b04 	str.w	r1, [lr], #4
 80156e8:	f85c 1b04 	ldr.w	r1, [ip], #4
 80156ec:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80156f0:	f8be 1000 	ldrh.w	r1, [lr]
 80156f4:	fb09 110a 	mla	r1, r9, sl, r1
 80156f8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80156fc:	4567      	cmp	r7, ip
 80156fe:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8015702:	d8e5      	bhi.n	80156d0 <__multiply+0x10c>
 8015704:	9a01      	ldr	r2, [sp, #4]
 8015706:	50a9      	str	r1, [r5, r2]
 8015708:	3504      	adds	r5, #4
 801570a:	e799      	b.n	8015640 <__multiply+0x7c>
 801570c:	3e01      	subs	r6, #1
 801570e:	e79b      	b.n	8015648 <__multiply+0x84>
 8015710:	08017db1 	.word	0x08017db1
 8015714:	08017dc2 	.word	0x08017dc2

08015718 <__pow5mult>:
 8015718:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801571c:	4615      	mov	r5, r2
 801571e:	f012 0203 	ands.w	r2, r2, #3
 8015722:	4606      	mov	r6, r0
 8015724:	460f      	mov	r7, r1
 8015726:	d007      	beq.n	8015738 <__pow5mult+0x20>
 8015728:	4c25      	ldr	r4, [pc, #148]	; (80157c0 <__pow5mult+0xa8>)
 801572a:	3a01      	subs	r2, #1
 801572c:	2300      	movs	r3, #0
 801572e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8015732:	f7ff fe53 	bl	80153dc <__multadd>
 8015736:	4607      	mov	r7, r0
 8015738:	10ad      	asrs	r5, r5, #2
 801573a:	d03d      	beq.n	80157b8 <__pow5mult+0xa0>
 801573c:	69f4      	ldr	r4, [r6, #28]
 801573e:	b97c      	cbnz	r4, 8015760 <__pow5mult+0x48>
 8015740:	2010      	movs	r0, #16
 8015742:	f7fd fe57 	bl	80133f4 <malloc>
 8015746:	4602      	mov	r2, r0
 8015748:	61f0      	str	r0, [r6, #28]
 801574a:	b928      	cbnz	r0, 8015758 <__pow5mult+0x40>
 801574c:	4b1d      	ldr	r3, [pc, #116]	; (80157c4 <__pow5mult+0xac>)
 801574e:	481e      	ldr	r0, [pc, #120]	; (80157c8 <__pow5mult+0xb0>)
 8015750:	f240 11b3 	movw	r1, #435	; 0x1b3
 8015754:	f001 fb1c 	bl	8016d90 <__assert_func>
 8015758:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801575c:	6004      	str	r4, [r0, #0]
 801575e:	60c4      	str	r4, [r0, #12]
 8015760:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8015764:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8015768:	b94c      	cbnz	r4, 801577e <__pow5mult+0x66>
 801576a:	f240 2171 	movw	r1, #625	; 0x271
 801576e:	4630      	mov	r0, r6
 8015770:	f7ff ff12 	bl	8015598 <__i2b>
 8015774:	2300      	movs	r3, #0
 8015776:	f8c8 0008 	str.w	r0, [r8, #8]
 801577a:	4604      	mov	r4, r0
 801577c:	6003      	str	r3, [r0, #0]
 801577e:	f04f 0900 	mov.w	r9, #0
 8015782:	07eb      	lsls	r3, r5, #31
 8015784:	d50a      	bpl.n	801579c <__pow5mult+0x84>
 8015786:	4639      	mov	r1, r7
 8015788:	4622      	mov	r2, r4
 801578a:	4630      	mov	r0, r6
 801578c:	f7ff ff1a 	bl	80155c4 <__multiply>
 8015790:	4639      	mov	r1, r7
 8015792:	4680      	mov	r8, r0
 8015794:	4630      	mov	r0, r6
 8015796:	f7ff fdff 	bl	8015398 <_Bfree>
 801579a:	4647      	mov	r7, r8
 801579c:	106d      	asrs	r5, r5, #1
 801579e:	d00b      	beq.n	80157b8 <__pow5mult+0xa0>
 80157a0:	6820      	ldr	r0, [r4, #0]
 80157a2:	b938      	cbnz	r0, 80157b4 <__pow5mult+0x9c>
 80157a4:	4622      	mov	r2, r4
 80157a6:	4621      	mov	r1, r4
 80157a8:	4630      	mov	r0, r6
 80157aa:	f7ff ff0b 	bl	80155c4 <__multiply>
 80157ae:	6020      	str	r0, [r4, #0]
 80157b0:	f8c0 9000 	str.w	r9, [r0]
 80157b4:	4604      	mov	r4, r0
 80157b6:	e7e4      	b.n	8015782 <__pow5mult+0x6a>
 80157b8:	4638      	mov	r0, r7
 80157ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80157be:	bf00      	nop
 80157c0:	08017f10 	.word	0x08017f10
 80157c4:	08017d42 	.word	0x08017d42
 80157c8:	08017dc2 	.word	0x08017dc2

080157cc <__lshift>:
 80157cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80157d0:	460c      	mov	r4, r1
 80157d2:	6849      	ldr	r1, [r1, #4]
 80157d4:	6923      	ldr	r3, [r4, #16]
 80157d6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80157da:	68a3      	ldr	r3, [r4, #8]
 80157dc:	4607      	mov	r7, r0
 80157de:	4691      	mov	r9, r2
 80157e0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80157e4:	f108 0601 	add.w	r6, r8, #1
 80157e8:	42b3      	cmp	r3, r6
 80157ea:	db0b      	blt.n	8015804 <__lshift+0x38>
 80157ec:	4638      	mov	r0, r7
 80157ee:	f7ff fd93 	bl	8015318 <_Balloc>
 80157f2:	4605      	mov	r5, r0
 80157f4:	b948      	cbnz	r0, 801580a <__lshift+0x3e>
 80157f6:	4602      	mov	r2, r0
 80157f8:	4b28      	ldr	r3, [pc, #160]	; (801589c <__lshift+0xd0>)
 80157fa:	4829      	ldr	r0, [pc, #164]	; (80158a0 <__lshift+0xd4>)
 80157fc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8015800:	f001 fac6 	bl	8016d90 <__assert_func>
 8015804:	3101      	adds	r1, #1
 8015806:	005b      	lsls	r3, r3, #1
 8015808:	e7ee      	b.n	80157e8 <__lshift+0x1c>
 801580a:	2300      	movs	r3, #0
 801580c:	f100 0114 	add.w	r1, r0, #20
 8015810:	f100 0210 	add.w	r2, r0, #16
 8015814:	4618      	mov	r0, r3
 8015816:	4553      	cmp	r3, sl
 8015818:	db33      	blt.n	8015882 <__lshift+0xb6>
 801581a:	6920      	ldr	r0, [r4, #16]
 801581c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8015820:	f104 0314 	add.w	r3, r4, #20
 8015824:	f019 091f 	ands.w	r9, r9, #31
 8015828:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801582c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8015830:	d02b      	beq.n	801588a <__lshift+0xbe>
 8015832:	f1c9 0e20 	rsb	lr, r9, #32
 8015836:	468a      	mov	sl, r1
 8015838:	2200      	movs	r2, #0
 801583a:	6818      	ldr	r0, [r3, #0]
 801583c:	fa00 f009 	lsl.w	r0, r0, r9
 8015840:	4310      	orrs	r0, r2
 8015842:	f84a 0b04 	str.w	r0, [sl], #4
 8015846:	f853 2b04 	ldr.w	r2, [r3], #4
 801584a:	459c      	cmp	ip, r3
 801584c:	fa22 f20e 	lsr.w	r2, r2, lr
 8015850:	d8f3      	bhi.n	801583a <__lshift+0x6e>
 8015852:	ebac 0304 	sub.w	r3, ip, r4
 8015856:	3b15      	subs	r3, #21
 8015858:	f023 0303 	bic.w	r3, r3, #3
 801585c:	3304      	adds	r3, #4
 801585e:	f104 0015 	add.w	r0, r4, #21
 8015862:	4584      	cmp	ip, r0
 8015864:	bf38      	it	cc
 8015866:	2304      	movcc	r3, #4
 8015868:	50ca      	str	r2, [r1, r3]
 801586a:	b10a      	cbz	r2, 8015870 <__lshift+0xa4>
 801586c:	f108 0602 	add.w	r6, r8, #2
 8015870:	3e01      	subs	r6, #1
 8015872:	4638      	mov	r0, r7
 8015874:	612e      	str	r6, [r5, #16]
 8015876:	4621      	mov	r1, r4
 8015878:	f7ff fd8e 	bl	8015398 <_Bfree>
 801587c:	4628      	mov	r0, r5
 801587e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015882:	f842 0f04 	str.w	r0, [r2, #4]!
 8015886:	3301      	adds	r3, #1
 8015888:	e7c5      	b.n	8015816 <__lshift+0x4a>
 801588a:	3904      	subs	r1, #4
 801588c:	f853 2b04 	ldr.w	r2, [r3], #4
 8015890:	f841 2f04 	str.w	r2, [r1, #4]!
 8015894:	459c      	cmp	ip, r3
 8015896:	d8f9      	bhi.n	801588c <__lshift+0xc0>
 8015898:	e7ea      	b.n	8015870 <__lshift+0xa4>
 801589a:	bf00      	nop
 801589c:	08017db1 	.word	0x08017db1
 80158a0:	08017dc2 	.word	0x08017dc2

080158a4 <__mcmp>:
 80158a4:	b530      	push	{r4, r5, lr}
 80158a6:	6902      	ldr	r2, [r0, #16]
 80158a8:	690c      	ldr	r4, [r1, #16]
 80158aa:	1b12      	subs	r2, r2, r4
 80158ac:	d10e      	bne.n	80158cc <__mcmp+0x28>
 80158ae:	f100 0314 	add.w	r3, r0, #20
 80158b2:	3114      	adds	r1, #20
 80158b4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80158b8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80158bc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80158c0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80158c4:	42a5      	cmp	r5, r4
 80158c6:	d003      	beq.n	80158d0 <__mcmp+0x2c>
 80158c8:	d305      	bcc.n	80158d6 <__mcmp+0x32>
 80158ca:	2201      	movs	r2, #1
 80158cc:	4610      	mov	r0, r2
 80158ce:	bd30      	pop	{r4, r5, pc}
 80158d0:	4283      	cmp	r3, r0
 80158d2:	d3f3      	bcc.n	80158bc <__mcmp+0x18>
 80158d4:	e7fa      	b.n	80158cc <__mcmp+0x28>
 80158d6:	f04f 32ff 	mov.w	r2, #4294967295
 80158da:	e7f7      	b.n	80158cc <__mcmp+0x28>

080158dc <__mdiff>:
 80158dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80158e0:	460c      	mov	r4, r1
 80158e2:	4606      	mov	r6, r0
 80158e4:	4611      	mov	r1, r2
 80158e6:	4620      	mov	r0, r4
 80158e8:	4690      	mov	r8, r2
 80158ea:	f7ff ffdb 	bl	80158a4 <__mcmp>
 80158ee:	1e05      	subs	r5, r0, #0
 80158f0:	d110      	bne.n	8015914 <__mdiff+0x38>
 80158f2:	4629      	mov	r1, r5
 80158f4:	4630      	mov	r0, r6
 80158f6:	f7ff fd0f 	bl	8015318 <_Balloc>
 80158fa:	b930      	cbnz	r0, 801590a <__mdiff+0x2e>
 80158fc:	4b3a      	ldr	r3, [pc, #232]	; (80159e8 <__mdiff+0x10c>)
 80158fe:	4602      	mov	r2, r0
 8015900:	f240 2137 	movw	r1, #567	; 0x237
 8015904:	4839      	ldr	r0, [pc, #228]	; (80159ec <__mdiff+0x110>)
 8015906:	f001 fa43 	bl	8016d90 <__assert_func>
 801590a:	2301      	movs	r3, #1
 801590c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8015910:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015914:	bfa4      	itt	ge
 8015916:	4643      	movge	r3, r8
 8015918:	46a0      	movge	r8, r4
 801591a:	4630      	mov	r0, r6
 801591c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8015920:	bfa6      	itte	ge
 8015922:	461c      	movge	r4, r3
 8015924:	2500      	movge	r5, #0
 8015926:	2501      	movlt	r5, #1
 8015928:	f7ff fcf6 	bl	8015318 <_Balloc>
 801592c:	b920      	cbnz	r0, 8015938 <__mdiff+0x5c>
 801592e:	4b2e      	ldr	r3, [pc, #184]	; (80159e8 <__mdiff+0x10c>)
 8015930:	4602      	mov	r2, r0
 8015932:	f240 2145 	movw	r1, #581	; 0x245
 8015936:	e7e5      	b.n	8015904 <__mdiff+0x28>
 8015938:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801593c:	6926      	ldr	r6, [r4, #16]
 801593e:	60c5      	str	r5, [r0, #12]
 8015940:	f104 0914 	add.w	r9, r4, #20
 8015944:	f108 0514 	add.w	r5, r8, #20
 8015948:	f100 0e14 	add.w	lr, r0, #20
 801594c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8015950:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8015954:	f108 0210 	add.w	r2, r8, #16
 8015958:	46f2      	mov	sl, lr
 801595a:	2100      	movs	r1, #0
 801595c:	f859 3b04 	ldr.w	r3, [r9], #4
 8015960:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8015964:	fa11 f88b 	uxtah	r8, r1, fp
 8015968:	b299      	uxth	r1, r3
 801596a:	0c1b      	lsrs	r3, r3, #16
 801596c:	eba8 0801 	sub.w	r8, r8, r1
 8015970:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8015974:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8015978:	fa1f f888 	uxth.w	r8, r8
 801597c:	1419      	asrs	r1, r3, #16
 801597e:	454e      	cmp	r6, r9
 8015980:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8015984:	f84a 3b04 	str.w	r3, [sl], #4
 8015988:	d8e8      	bhi.n	801595c <__mdiff+0x80>
 801598a:	1b33      	subs	r3, r6, r4
 801598c:	3b15      	subs	r3, #21
 801598e:	f023 0303 	bic.w	r3, r3, #3
 8015992:	3304      	adds	r3, #4
 8015994:	3415      	adds	r4, #21
 8015996:	42a6      	cmp	r6, r4
 8015998:	bf38      	it	cc
 801599a:	2304      	movcc	r3, #4
 801599c:	441d      	add	r5, r3
 801599e:	4473      	add	r3, lr
 80159a0:	469e      	mov	lr, r3
 80159a2:	462e      	mov	r6, r5
 80159a4:	4566      	cmp	r6, ip
 80159a6:	d30e      	bcc.n	80159c6 <__mdiff+0xea>
 80159a8:	f10c 0203 	add.w	r2, ip, #3
 80159ac:	1b52      	subs	r2, r2, r5
 80159ae:	f022 0203 	bic.w	r2, r2, #3
 80159b2:	3d03      	subs	r5, #3
 80159b4:	45ac      	cmp	ip, r5
 80159b6:	bf38      	it	cc
 80159b8:	2200      	movcc	r2, #0
 80159ba:	4413      	add	r3, r2
 80159bc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80159c0:	b17a      	cbz	r2, 80159e2 <__mdiff+0x106>
 80159c2:	6107      	str	r7, [r0, #16]
 80159c4:	e7a4      	b.n	8015910 <__mdiff+0x34>
 80159c6:	f856 8b04 	ldr.w	r8, [r6], #4
 80159ca:	fa11 f288 	uxtah	r2, r1, r8
 80159ce:	1414      	asrs	r4, r2, #16
 80159d0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80159d4:	b292      	uxth	r2, r2
 80159d6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80159da:	f84e 2b04 	str.w	r2, [lr], #4
 80159de:	1421      	asrs	r1, r4, #16
 80159e0:	e7e0      	b.n	80159a4 <__mdiff+0xc8>
 80159e2:	3f01      	subs	r7, #1
 80159e4:	e7ea      	b.n	80159bc <__mdiff+0xe0>
 80159e6:	bf00      	nop
 80159e8:	08017db1 	.word	0x08017db1
 80159ec:	08017dc2 	.word	0x08017dc2

080159f0 <__ulp>:
 80159f0:	b082      	sub	sp, #8
 80159f2:	ed8d 0b00 	vstr	d0, [sp]
 80159f6:	9a01      	ldr	r2, [sp, #4]
 80159f8:	4b0f      	ldr	r3, [pc, #60]	; (8015a38 <__ulp+0x48>)
 80159fa:	4013      	ands	r3, r2
 80159fc:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8015a00:	2b00      	cmp	r3, #0
 8015a02:	dc08      	bgt.n	8015a16 <__ulp+0x26>
 8015a04:	425b      	negs	r3, r3
 8015a06:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8015a0a:	ea4f 5223 	mov.w	r2, r3, asr #20
 8015a0e:	da04      	bge.n	8015a1a <__ulp+0x2a>
 8015a10:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8015a14:	4113      	asrs	r3, r2
 8015a16:	2200      	movs	r2, #0
 8015a18:	e008      	b.n	8015a2c <__ulp+0x3c>
 8015a1a:	f1a2 0314 	sub.w	r3, r2, #20
 8015a1e:	2b1e      	cmp	r3, #30
 8015a20:	bfda      	itte	le
 8015a22:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8015a26:	40da      	lsrle	r2, r3
 8015a28:	2201      	movgt	r2, #1
 8015a2a:	2300      	movs	r3, #0
 8015a2c:	4619      	mov	r1, r3
 8015a2e:	4610      	mov	r0, r2
 8015a30:	ec41 0b10 	vmov	d0, r0, r1
 8015a34:	b002      	add	sp, #8
 8015a36:	4770      	bx	lr
 8015a38:	7ff00000 	.word	0x7ff00000

08015a3c <__b2d>:
 8015a3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015a40:	6906      	ldr	r6, [r0, #16]
 8015a42:	f100 0814 	add.w	r8, r0, #20
 8015a46:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8015a4a:	1f37      	subs	r7, r6, #4
 8015a4c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8015a50:	4610      	mov	r0, r2
 8015a52:	f7ff fd53 	bl	80154fc <__hi0bits>
 8015a56:	f1c0 0320 	rsb	r3, r0, #32
 8015a5a:	280a      	cmp	r0, #10
 8015a5c:	600b      	str	r3, [r1, #0]
 8015a5e:	491b      	ldr	r1, [pc, #108]	; (8015acc <__b2d+0x90>)
 8015a60:	dc15      	bgt.n	8015a8e <__b2d+0x52>
 8015a62:	f1c0 0c0b 	rsb	ip, r0, #11
 8015a66:	fa22 f30c 	lsr.w	r3, r2, ip
 8015a6a:	45b8      	cmp	r8, r7
 8015a6c:	ea43 0501 	orr.w	r5, r3, r1
 8015a70:	bf34      	ite	cc
 8015a72:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8015a76:	2300      	movcs	r3, #0
 8015a78:	3015      	adds	r0, #21
 8015a7a:	fa02 f000 	lsl.w	r0, r2, r0
 8015a7e:	fa23 f30c 	lsr.w	r3, r3, ip
 8015a82:	4303      	orrs	r3, r0
 8015a84:	461c      	mov	r4, r3
 8015a86:	ec45 4b10 	vmov	d0, r4, r5
 8015a8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015a8e:	45b8      	cmp	r8, r7
 8015a90:	bf3a      	itte	cc
 8015a92:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8015a96:	f1a6 0708 	subcc.w	r7, r6, #8
 8015a9a:	2300      	movcs	r3, #0
 8015a9c:	380b      	subs	r0, #11
 8015a9e:	d012      	beq.n	8015ac6 <__b2d+0x8a>
 8015aa0:	f1c0 0120 	rsb	r1, r0, #32
 8015aa4:	fa23 f401 	lsr.w	r4, r3, r1
 8015aa8:	4082      	lsls	r2, r0
 8015aaa:	4322      	orrs	r2, r4
 8015aac:	4547      	cmp	r7, r8
 8015aae:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8015ab2:	bf8c      	ite	hi
 8015ab4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8015ab8:	2200      	movls	r2, #0
 8015aba:	4083      	lsls	r3, r0
 8015abc:	40ca      	lsrs	r2, r1
 8015abe:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8015ac2:	4313      	orrs	r3, r2
 8015ac4:	e7de      	b.n	8015a84 <__b2d+0x48>
 8015ac6:	ea42 0501 	orr.w	r5, r2, r1
 8015aca:	e7db      	b.n	8015a84 <__b2d+0x48>
 8015acc:	3ff00000 	.word	0x3ff00000

08015ad0 <__d2b>:
 8015ad0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8015ad4:	460f      	mov	r7, r1
 8015ad6:	2101      	movs	r1, #1
 8015ad8:	ec59 8b10 	vmov	r8, r9, d0
 8015adc:	4616      	mov	r6, r2
 8015ade:	f7ff fc1b 	bl	8015318 <_Balloc>
 8015ae2:	4604      	mov	r4, r0
 8015ae4:	b930      	cbnz	r0, 8015af4 <__d2b+0x24>
 8015ae6:	4602      	mov	r2, r0
 8015ae8:	4b24      	ldr	r3, [pc, #144]	; (8015b7c <__d2b+0xac>)
 8015aea:	4825      	ldr	r0, [pc, #148]	; (8015b80 <__d2b+0xb0>)
 8015aec:	f240 310f 	movw	r1, #783	; 0x30f
 8015af0:	f001 f94e 	bl	8016d90 <__assert_func>
 8015af4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8015af8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8015afc:	bb2d      	cbnz	r5, 8015b4a <__d2b+0x7a>
 8015afe:	9301      	str	r3, [sp, #4]
 8015b00:	f1b8 0300 	subs.w	r3, r8, #0
 8015b04:	d026      	beq.n	8015b54 <__d2b+0x84>
 8015b06:	4668      	mov	r0, sp
 8015b08:	9300      	str	r3, [sp, #0]
 8015b0a:	f7ff fd17 	bl	801553c <__lo0bits>
 8015b0e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8015b12:	b1e8      	cbz	r0, 8015b50 <__d2b+0x80>
 8015b14:	f1c0 0320 	rsb	r3, r0, #32
 8015b18:	fa02 f303 	lsl.w	r3, r2, r3
 8015b1c:	430b      	orrs	r3, r1
 8015b1e:	40c2      	lsrs	r2, r0
 8015b20:	6163      	str	r3, [r4, #20]
 8015b22:	9201      	str	r2, [sp, #4]
 8015b24:	9b01      	ldr	r3, [sp, #4]
 8015b26:	61a3      	str	r3, [r4, #24]
 8015b28:	2b00      	cmp	r3, #0
 8015b2a:	bf14      	ite	ne
 8015b2c:	2202      	movne	r2, #2
 8015b2e:	2201      	moveq	r2, #1
 8015b30:	6122      	str	r2, [r4, #16]
 8015b32:	b1bd      	cbz	r5, 8015b64 <__d2b+0x94>
 8015b34:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8015b38:	4405      	add	r5, r0
 8015b3a:	603d      	str	r5, [r7, #0]
 8015b3c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8015b40:	6030      	str	r0, [r6, #0]
 8015b42:	4620      	mov	r0, r4
 8015b44:	b003      	add	sp, #12
 8015b46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015b4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8015b4e:	e7d6      	b.n	8015afe <__d2b+0x2e>
 8015b50:	6161      	str	r1, [r4, #20]
 8015b52:	e7e7      	b.n	8015b24 <__d2b+0x54>
 8015b54:	a801      	add	r0, sp, #4
 8015b56:	f7ff fcf1 	bl	801553c <__lo0bits>
 8015b5a:	9b01      	ldr	r3, [sp, #4]
 8015b5c:	6163      	str	r3, [r4, #20]
 8015b5e:	3020      	adds	r0, #32
 8015b60:	2201      	movs	r2, #1
 8015b62:	e7e5      	b.n	8015b30 <__d2b+0x60>
 8015b64:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8015b68:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8015b6c:	6038      	str	r0, [r7, #0]
 8015b6e:	6918      	ldr	r0, [r3, #16]
 8015b70:	f7ff fcc4 	bl	80154fc <__hi0bits>
 8015b74:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8015b78:	e7e2      	b.n	8015b40 <__d2b+0x70>
 8015b7a:	bf00      	nop
 8015b7c:	08017db1 	.word	0x08017db1
 8015b80:	08017dc2 	.word	0x08017dc2

08015b84 <__ratio>:
 8015b84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b88:	4688      	mov	r8, r1
 8015b8a:	4669      	mov	r1, sp
 8015b8c:	4681      	mov	r9, r0
 8015b8e:	f7ff ff55 	bl	8015a3c <__b2d>
 8015b92:	a901      	add	r1, sp, #4
 8015b94:	4640      	mov	r0, r8
 8015b96:	ec55 4b10 	vmov	r4, r5, d0
 8015b9a:	ee10 aa10 	vmov	sl, s0
 8015b9e:	f7ff ff4d 	bl	8015a3c <__b2d>
 8015ba2:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8015ba6:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8015baa:	1ad2      	subs	r2, r2, r3
 8015bac:	e9dd 3100 	ldrd	r3, r1, [sp]
 8015bb0:	1a5b      	subs	r3, r3, r1
 8015bb2:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8015bb6:	ec57 6b10 	vmov	r6, r7, d0
 8015bba:	2b00      	cmp	r3, #0
 8015bbc:	bfd6      	itet	le
 8015bbe:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8015bc2:	462a      	movgt	r2, r5
 8015bc4:	463a      	movle	r2, r7
 8015bc6:	46ab      	mov	fp, r5
 8015bc8:	bfd6      	itet	le
 8015bca:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 8015bce:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8015bd2:	ee00 3a90 	vmovle	s1, r3
 8015bd6:	ec4b ab17 	vmov	d7, sl, fp
 8015bda:	ee87 0b00 	vdiv.f64	d0, d7, d0
 8015bde:	b003      	add	sp, #12
 8015be0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015be4 <__copybits>:
 8015be4:	3901      	subs	r1, #1
 8015be6:	b570      	push	{r4, r5, r6, lr}
 8015be8:	1149      	asrs	r1, r1, #5
 8015bea:	6914      	ldr	r4, [r2, #16]
 8015bec:	3101      	adds	r1, #1
 8015bee:	f102 0314 	add.w	r3, r2, #20
 8015bf2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8015bf6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8015bfa:	1f05      	subs	r5, r0, #4
 8015bfc:	42a3      	cmp	r3, r4
 8015bfe:	d30c      	bcc.n	8015c1a <__copybits+0x36>
 8015c00:	1aa3      	subs	r3, r4, r2
 8015c02:	3b11      	subs	r3, #17
 8015c04:	f023 0303 	bic.w	r3, r3, #3
 8015c08:	3211      	adds	r2, #17
 8015c0a:	42a2      	cmp	r2, r4
 8015c0c:	bf88      	it	hi
 8015c0e:	2300      	movhi	r3, #0
 8015c10:	4418      	add	r0, r3
 8015c12:	2300      	movs	r3, #0
 8015c14:	4288      	cmp	r0, r1
 8015c16:	d305      	bcc.n	8015c24 <__copybits+0x40>
 8015c18:	bd70      	pop	{r4, r5, r6, pc}
 8015c1a:	f853 6b04 	ldr.w	r6, [r3], #4
 8015c1e:	f845 6f04 	str.w	r6, [r5, #4]!
 8015c22:	e7eb      	b.n	8015bfc <__copybits+0x18>
 8015c24:	f840 3b04 	str.w	r3, [r0], #4
 8015c28:	e7f4      	b.n	8015c14 <__copybits+0x30>

08015c2a <__any_on>:
 8015c2a:	f100 0214 	add.w	r2, r0, #20
 8015c2e:	6900      	ldr	r0, [r0, #16]
 8015c30:	114b      	asrs	r3, r1, #5
 8015c32:	4298      	cmp	r0, r3
 8015c34:	b510      	push	{r4, lr}
 8015c36:	db11      	blt.n	8015c5c <__any_on+0x32>
 8015c38:	dd0a      	ble.n	8015c50 <__any_on+0x26>
 8015c3a:	f011 011f 	ands.w	r1, r1, #31
 8015c3e:	d007      	beq.n	8015c50 <__any_on+0x26>
 8015c40:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8015c44:	fa24 f001 	lsr.w	r0, r4, r1
 8015c48:	fa00 f101 	lsl.w	r1, r0, r1
 8015c4c:	428c      	cmp	r4, r1
 8015c4e:	d10b      	bne.n	8015c68 <__any_on+0x3e>
 8015c50:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8015c54:	4293      	cmp	r3, r2
 8015c56:	d803      	bhi.n	8015c60 <__any_on+0x36>
 8015c58:	2000      	movs	r0, #0
 8015c5a:	bd10      	pop	{r4, pc}
 8015c5c:	4603      	mov	r3, r0
 8015c5e:	e7f7      	b.n	8015c50 <__any_on+0x26>
 8015c60:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8015c64:	2900      	cmp	r1, #0
 8015c66:	d0f5      	beq.n	8015c54 <__any_on+0x2a>
 8015c68:	2001      	movs	r0, #1
 8015c6a:	e7f6      	b.n	8015c5a <__any_on+0x30>

08015c6c <sulp>:
 8015c6c:	b570      	push	{r4, r5, r6, lr}
 8015c6e:	4604      	mov	r4, r0
 8015c70:	460d      	mov	r5, r1
 8015c72:	4616      	mov	r6, r2
 8015c74:	ec45 4b10 	vmov	d0, r4, r5
 8015c78:	f7ff feba 	bl	80159f0 <__ulp>
 8015c7c:	b17e      	cbz	r6, 8015c9e <sulp+0x32>
 8015c7e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8015c82:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8015c86:	2b00      	cmp	r3, #0
 8015c88:	dd09      	ble.n	8015c9e <sulp+0x32>
 8015c8a:	051b      	lsls	r3, r3, #20
 8015c8c:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8015c90:	2000      	movs	r0, #0
 8015c92:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 8015c96:	ec41 0b17 	vmov	d7, r0, r1
 8015c9a:	ee20 0b07 	vmul.f64	d0, d0, d7
 8015c9e:	bd70      	pop	{r4, r5, r6, pc}

08015ca0 <_strtod_l>:
 8015ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ca4:	ed2d 8b0e 	vpush	{d8-d14}
 8015ca8:	b097      	sub	sp, #92	; 0x5c
 8015caa:	4604      	mov	r4, r0
 8015cac:	920d      	str	r2, [sp, #52]	; 0x34
 8015cae:	2200      	movs	r2, #0
 8015cb0:	9212      	str	r2, [sp, #72]	; 0x48
 8015cb2:	468a      	mov	sl, r1
 8015cb4:	f04f 0800 	mov.w	r8, #0
 8015cb8:	f04f 0900 	mov.w	r9, #0
 8015cbc:	460a      	mov	r2, r1
 8015cbe:	9211      	str	r2, [sp, #68]	; 0x44
 8015cc0:	7811      	ldrb	r1, [r2, #0]
 8015cc2:	292b      	cmp	r1, #43	; 0x2b
 8015cc4:	d04c      	beq.n	8015d60 <_strtod_l+0xc0>
 8015cc6:	d839      	bhi.n	8015d3c <_strtod_l+0x9c>
 8015cc8:	290d      	cmp	r1, #13
 8015cca:	d833      	bhi.n	8015d34 <_strtod_l+0x94>
 8015ccc:	2908      	cmp	r1, #8
 8015cce:	d833      	bhi.n	8015d38 <_strtod_l+0x98>
 8015cd0:	2900      	cmp	r1, #0
 8015cd2:	d03c      	beq.n	8015d4e <_strtod_l+0xae>
 8015cd4:	2200      	movs	r2, #0
 8015cd6:	9208      	str	r2, [sp, #32]
 8015cd8:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8015cda:	7832      	ldrb	r2, [r6, #0]
 8015cdc:	2a30      	cmp	r2, #48	; 0x30
 8015cde:	f040 80b8 	bne.w	8015e52 <_strtod_l+0x1b2>
 8015ce2:	7872      	ldrb	r2, [r6, #1]
 8015ce4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8015ce8:	2a58      	cmp	r2, #88	; 0x58
 8015cea:	d170      	bne.n	8015dce <_strtod_l+0x12e>
 8015cec:	9302      	str	r3, [sp, #8]
 8015cee:	9b08      	ldr	r3, [sp, #32]
 8015cf0:	9301      	str	r3, [sp, #4]
 8015cf2:	ab12      	add	r3, sp, #72	; 0x48
 8015cf4:	9300      	str	r3, [sp, #0]
 8015cf6:	4a91      	ldr	r2, [pc, #580]	; (8015f3c <_strtod_l+0x29c>)
 8015cf8:	ab13      	add	r3, sp, #76	; 0x4c
 8015cfa:	a911      	add	r1, sp, #68	; 0x44
 8015cfc:	4620      	mov	r0, r4
 8015cfe:	f001 f8e3 	bl	8016ec8 <__gethex>
 8015d02:	f010 070f 	ands.w	r7, r0, #15
 8015d06:	4605      	mov	r5, r0
 8015d08:	d005      	beq.n	8015d16 <_strtod_l+0x76>
 8015d0a:	2f06      	cmp	r7, #6
 8015d0c:	d12a      	bne.n	8015d64 <_strtod_l+0xc4>
 8015d0e:	3601      	adds	r6, #1
 8015d10:	2300      	movs	r3, #0
 8015d12:	9611      	str	r6, [sp, #68]	; 0x44
 8015d14:	9308      	str	r3, [sp, #32]
 8015d16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015d18:	2b00      	cmp	r3, #0
 8015d1a:	f040 8555 	bne.w	80167c8 <_strtod_l+0xb28>
 8015d1e:	9b08      	ldr	r3, [sp, #32]
 8015d20:	ec49 8b10 	vmov	d0, r8, r9
 8015d24:	b1cb      	cbz	r3, 8015d5a <_strtod_l+0xba>
 8015d26:	eeb1 0b40 	vneg.f64	d0, d0
 8015d2a:	b017      	add	sp, #92	; 0x5c
 8015d2c:	ecbd 8b0e 	vpop	{d8-d14}
 8015d30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015d34:	2920      	cmp	r1, #32
 8015d36:	d1cd      	bne.n	8015cd4 <_strtod_l+0x34>
 8015d38:	3201      	adds	r2, #1
 8015d3a:	e7c0      	b.n	8015cbe <_strtod_l+0x1e>
 8015d3c:	292d      	cmp	r1, #45	; 0x2d
 8015d3e:	d1c9      	bne.n	8015cd4 <_strtod_l+0x34>
 8015d40:	2101      	movs	r1, #1
 8015d42:	9108      	str	r1, [sp, #32]
 8015d44:	1c51      	adds	r1, r2, #1
 8015d46:	9111      	str	r1, [sp, #68]	; 0x44
 8015d48:	7852      	ldrb	r2, [r2, #1]
 8015d4a:	2a00      	cmp	r2, #0
 8015d4c:	d1c4      	bne.n	8015cd8 <_strtod_l+0x38>
 8015d4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015d50:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 8015d54:	2b00      	cmp	r3, #0
 8015d56:	f040 8535 	bne.w	80167c4 <_strtod_l+0xb24>
 8015d5a:	ec49 8b10 	vmov	d0, r8, r9
 8015d5e:	e7e4      	b.n	8015d2a <_strtod_l+0x8a>
 8015d60:	2100      	movs	r1, #0
 8015d62:	e7ee      	b.n	8015d42 <_strtod_l+0xa2>
 8015d64:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015d66:	b13a      	cbz	r2, 8015d78 <_strtod_l+0xd8>
 8015d68:	2135      	movs	r1, #53	; 0x35
 8015d6a:	a814      	add	r0, sp, #80	; 0x50
 8015d6c:	f7ff ff3a 	bl	8015be4 <__copybits>
 8015d70:	9912      	ldr	r1, [sp, #72]	; 0x48
 8015d72:	4620      	mov	r0, r4
 8015d74:	f7ff fb10 	bl	8015398 <_Bfree>
 8015d78:	1e7b      	subs	r3, r7, #1
 8015d7a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8015d7c:	2b04      	cmp	r3, #4
 8015d7e:	d806      	bhi.n	8015d8e <_strtod_l+0xee>
 8015d80:	e8df f003 	tbb	[pc, r3]
 8015d84:	201d0314 	.word	0x201d0314
 8015d88:	14          	.byte	0x14
 8015d89:	00          	.byte	0x00
 8015d8a:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 8015d8e:	05eb      	lsls	r3, r5, #23
 8015d90:	bf48      	it	mi
 8015d92:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8015d96:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8015d9a:	0d1b      	lsrs	r3, r3, #20
 8015d9c:	051b      	lsls	r3, r3, #20
 8015d9e:	2b00      	cmp	r3, #0
 8015da0:	d1b9      	bne.n	8015d16 <_strtod_l+0x76>
 8015da2:	f7fe fc35 	bl	8014610 <__errno>
 8015da6:	2322      	movs	r3, #34	; 0x22
 8015da8:	6003      	str	r3, [r0, #0]
 8015daa:	e7b4      	b.n	8015d16 <_strtod_l+0x76>
 8015dac:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 8015db0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8015db4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8015db8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8015dbc:	e7e7      	b.n	8015d8e <_strtod_l+0xee>
 8015dbe:	f8df 9184 	ldr.w	r9, [pc, #388]	; 8015f44 <_strtod_l+0x2a4>
 8015dc2:	e7e4      	b.n	8015d8e <_strtod_l+0xee>
 8015dc4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8015dc8:	f04f 38ff 	mov.w	r8, #4294967295
 8015dcc:	e7df      	b.n	8015d8e <_strtod_l+0xee>
 8015dce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015dd0:	1c5a      	adds	r2, r3, #1
 8015dd2:	9211      	str	r2, [sp, #68]	; 0x44
 8015dd4:	785b      	ldrb	r3, [r3, #1]
 8015dd6:	2b30      	cmp	r3, #48	; 0x30
 8015dd8:	d0f9      	beq.n	8015dce <_strtod_l+0x12e>
 8015dda:	2b00      	cmp	r3, #0
 8015ddc:	d09b      	beq.n	8015d16 <_strtod_l+0x76>
 8015dde:	2301      	movs	r3, #1
 8015de0:	9306      	str	r3, [sp, #24]
 8015de2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015de4:	9309      	str	r3, [sp, #36]	; 0x24
 8015de6:	2300      	movs	r3, #0
 8015de8:	9305      	str	r3, [sp, #20]
 8015dea:	9307      	str	r3, [sp, #28]
 8015dec:	461e      	mov	r6, r3
 8015dee:	220a      	movs	r2, #10
 8015df0:	9811      	ldr	r0, [sp, #68]	; 0x44
 8015df2:	7805      	ldrb	r5, [r0, #0]
 8015df4:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8015df8:	b2d9      	uxtb	r1, r3
 8015dfa:	2909      	cmp	r1, #9
 8015dfc:	d92b      	bls.n	8015e56 <_strtod_l+0x1b6>
 8015dfe:	4950      	ldr	r1, [pc, #320]	; (8015f40 <_strtod_l+0x2a0>)
 8015e00:	2201      	movs	r2, #1
 8015e02:	f000 ffa9 	bl	8016d58 <strncmp>
 8015e06:	2800      	cmp	r0, #0
 8015e08:	d035      	beq.n	8015e76 <_strtod_l+0x1d6>
 8015e0a:	2000      	movs	r0, #0
 8015e0c:	462a      	mov	r2, r5
 8015e0e:	4633      	mov	r3, r6
 8015e10:	4683      	mov	fp, r0
 8015e12:	4601      	mov	r1, r0
 8015e14:	2a65      	cmp	r2, #101	; 0x65
 8015e16:	d001      	beq.n	8015e1c <_strtod_l+0x17c>
 8015e18:	2a45      	cmp	r2, #69	; 0x45
 8015e1a:	d118      	bne.n	8015e4e <_strtod_l+0x1ae>
 8015e1c:	b91b      	cbnz	r3, 8015e26 <_strtod_l+0x186>
 8015e1e:	9b06      	ldr	r3, [sp, #24]
 8015e20:	4303      	orrs	r3, r0
 8015e22:	d094      	beq.n	8015d4e <_strtod_l+0xae>
 8015e24:	2300      	movs	r3, #0
 8015e26:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
 8015e2a:	f10a 0201 	add.w	r2, sl, #1
 8015e2e:	9211      	str	r2, [sp, #68]	; 0x44
 8015e30:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8015e34:	2a2b      	cmp	r2, #43	; 0x2b
 8015e36:	d075      	beq.n	8015f24 <_strtod_l+0x284>
 8015e38:	2a2d      	cmp	r2, #45	; 0x2d
 8015e3a:	d07b      	beq.n	8015f34 <_strtod_l+0x294>
 8015e3c:	f04f 0e00 	mov.w	lr, #0
 8015e40:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8015e44:	2d09      	cmp	r5, #9
 8015e46:	f240 8083 	bls.w	8015f50 <_strtod_l+0x2b0>
 8015e4a:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 8015e4e:	2500      	movs	r5, #0
 8015e50:	e09e      	b.n	8015f90 <_strtod_l+0x2f0>
 8015e52:	2300      	movs	r3, #0
 8015e54:	e7c4      	b.n	8015de0 <_strtod_l+0x140>
 8015e56:	2e08      	cmp	r6, #8
 8015e58:	bfd5      	itete	le
 8015e5a:	9907      	ldrle	r1, [sp, #28]
 8015e5c:	9905      	ldrgt	r1, [sp, #20]
 8015e5e:	fb02 3301 	mlale	r3, r2, r1, r3
 8015e62:	fb02 3301 	mlagt	r3, r2, r1, r3
 8015e66:	f100 0001 	add.w	r0, r0, #1
 8015e6a:	bfd4      	ite	le
 8015e6c:	9307      	strle	r3, [sp, #28]
 8015e6e:	9305      	strgt	r3, [sp, #20]
 8015e70:	3601      	adds	r6, #1
 8015e72:	9011      	str	r0, [sp, #68]	; 0x44
 8015e74:	e7bc      	b.n	8015df0 <_strtod_l+0x150>
 8015e76:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015e78:	1c5a      	adds	r2, r3, #1
 8015e7a:	9211      	str	r2, [sp, #68]	; 0x44
 8015e7c:	785a      	ldrb	r2, [r3, #1]
 8015e7e:	b3ae      	cbz	r6, 8015eec <_strtod_l+0x24c>
 8015e80:	4683      	mov	fp, r0
 8015e82:	4633      	mov	r3, r6
 8015e84:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8015e88:	2909      	cmp	r1, #9
 8015e8a:	d912      	bls.n	8015eb2 <_strtod_l+0x212>
 8015e8c:	2101      	movs	r1, #1
 8015e8e:	e7c1      	b.n	8015e14 <_strtod_l+0x174>
 8015e90:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015e92:	1c5a      	adds	r2, r3, #1
 8015e94:	9211      	str	r2, [sp, #68]	; 0x44
 8015e96:	785a      	ldrb	r2, [r3, #1]
 8015e98:	3001      	adds	r0, #1
 8015e9a:	2a30      	cmp	r2, #48	; 0x30
 8015e9c:	d0f8      	beq.n	8015e90 <_strtod_l+0x1f0>
 8015e9e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8015ea2:	2b08      	cmp	r3, #8
 8015ea4:	f200 8495 	bhi.w	80167d2 <_strtod_l+0xb32>
 8015ea8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015eaa:	9309      	str	r3, [sp, #36]	; 0x24
 8015eac:	4683      	mov	fp, r0
 8015eae:	2000      	movs	r0, #0
 8015eb0:	4603      	mov	r3, r0
 8015eb2:	3a30      	subs	r2, #48	; 0x30
 8015eb4:	f100 0101 	add.w	r1, r0, #1
 8015eb8:	d012      	beq.n	8015ee0 <_strtod_l+0x240>
 8015eba:	448b      	add	fp, r1
 8015ebc:	eb00 0c03 	add.w	ip, r0, r3
 8015ec0:	4619      	mov	r1, r3
 8015ec2:	250a      	movs	r5, #10
 8015ec4:	4561      	cmp	r1, ip
 8015ec6:	d113      	bne.n	8015ef0 <_strtod_l+0x250>
 8015ec8:	1819      	adds	r1, r3, r0
 8015eca:	2908      	cmp	r1, #8
 8015ecc:	f103 0301 	add.w	r3, r3, #1
 8015ed0:	4403      	add	r3, r0
 8015ed2:	dc1b      	bgt.n	8015f0c <_strtod_l+0x26c>
 8015ed4:	9807      	ldr	r0, [sp, #28]
 8015ed6:	210a      	movs	r1, #10
 8015ed8:	fb01 2200 	mla	r2, r1, r0, r2
 8015edc:	9207      	str	r2, [sp, #28]
 8015ede:	2100      	movs	r1, #0
 8015ee0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8015ee2:	1c50      	adds	r0, r2, #1
 8015ee4:	9011      	str	r0, [sp, #68]	; 0x44
 8015ee6:	7852      	ldrb	r2, [r2, #1]
 8015ee8:	4608      	mov	r0, r1
 8015eea:	e7cb      	b.n	8015e84 <_strtod_l+0x1e4>
 8015eec:	4630      	mov	r0, r6
 8015eee:	e7d4      	b.n	8015e9a <_strtod_l+0x1fa>
 8015ef0:	2908      	cmp	r1, #8
 8015ef2:	f101 0101 	add.w	r1, r1, #1
 8015ef6:	dc03      	bgt.n	8015f00 <_strtod_l+0x260>
 8015ef8:	9f07      	ldr	r7, [sp, #28]
 8015efa:	436f      	muls	r7, r5
 8015efc:	9707      	str	r7, [sp, #28]
 8015efe:	e7e1      	b.n	8015ec4 <_strtod_l+0x224>
 8015f00:	2910      	cmp	r1, #16
 8015f02:	bfde      	ittt	le
 8015f04:	9f05      	ldrle	r7, [sp, #20]
 8015f06:	436f      	mulle	r7, r5
 8015f08:	9705      	strle	r7, [sp, #20]
 8015f0a:	e7db      	b.n	8015ec4 <_strtod_l+0x224>
 8015f0c:	2b10      	cmp	r3, #16
 8015f0e:	bfdf      	itttt	le
 8015f10:	9805      	ldrle	r0, [sp, #20]
 8015f12:	210a      	movle	r1, #10
 8015f14:	fb01 2200 	mlale	r2, r1, r0, r2
 8015f18:	9205      	strle	r2, [sp, #20]
 8015f1a:	e7e0      	b.n	8015ede <_strtod_l+0x23e>
 8015f1c:	f04f 0b00 	mov.w	fp, #0
 8015f20:	2101      	movs	r1, #1
 8015f22:	e77c      	b.n	8015e1e <_strtod_l+0x17e>
 8015f24:	f04f 0e00 	mov.w	lr, #0
 8015f28:	f10a 0202 	add.w	r2, sl, #2
 8015f2c:	9211      	str	r2, [sp, #68]	; 0x44
 8015f2e:	f89a 2002 	ldrb.w	r2, [sl, #2]
 8015f32:	e785      	b.n	8015e40 <_strtod_l+0x1a0>
 8015f34:	f04f 0e01 	mov.w	lr, #1
 8015f38:	e7f6      	b.n	8015f28 <_strtod_l+0x288>
 8015f3a:	bf00      	nop
 8015f3c:	08017f20 	.word	0x08017f20
 8015f40:	08017f1c 	.word	0x08017f1c
 8015f44:	7ff00000 	.word	0x7ff00000
 8015f48:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8015f4a:	1c55      	adds	r5, r2, #1
 8015f4c:	9511      	str	r5, [sp, #68]	; 0x44
 8015f4e:	7852      	ldrb	r2, [r2, #1]
 8015f50:	2a30      	cmp	r2, #48	; 0x30
 8015f52:	d0f9      	beq.n	8015f48 <_strtod_l+0x2a8>
 8015f54:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 8015f58:	2d08      	cmp	r5, #8
 8015f5a:	f63f af78 	bhi.w	8015e4e <_strtod_l+0x1ae>
 8015f5e:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8015f62:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8015f64:	920a      	str	r2, [sp, #40]	; 0x28
 8015f66:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8015f68:	1c55      	adds	r5, r2, #1
 8015f6a:	9511      	str	r5, [sp, #68]	; 0x44
 8015f6c:	7852      	ldrb	r2, [r2, #1]
 8015f6e:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 8015f72:	2f09      	cmp	r7, #9
 8015f74:	d937      	bls.n	8015fe6 <_strtod_l+0x346>
 8015f76:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8015f78:	1bed      	subs	r5, r5, r7
 8015f7a:	2d08      	cmp	r5, #8
 8015f7c:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8015f80:	dc02      	bgt.n	8015f88 <_strtod_l+0x2e8>
 8015f82:	4565      	cmp	r5, ip
 8015f84:	bfa8      	it	ge
 8015f86:	4665      	movge	r5, ip
 8015f88:	f1be 0f00 	cmp.w	lr, #0
 8015f8c:	d000      	beq.n	8015f90 <_strtod_l+0x2f0>
 8015f8e:	426d      	negs	r5, r5
 8015f90:	2b00      	cmp	r3, #0
 8015f92:	d14d      	bne.n	8016030 <_strtod_l+0x390>
 8015f94:	9b06      	ldr	r3, [sp, #24]
 8015f96:	4303      	orrs	r3, r0
 8015f98:	f47f aebd 	bne.w	8015d16 <_strtod_l+0x76>
 8015f9c:	2900      	cmp	r1, #0
 8015f9e:	f47f aed6 	bne.w	8015d4e <_strtod_l+0xae>
 8015fa2:	2a69      	cmp	r2, #105	; 0x69
 8015fa4:	d027      	beq.n	8015ff6 <_strtod_l+0x356>
 8015fa6:	dc24      	bgt.n	8015ff2 <_strtod_l+0x352>
 8015fa8:	2a49      	cmp	r2, #73	; 0x49
 8015faa:	d024      	beq.n	8015ff6 <_strtod_l+0x356>
 8015fac:	2a4e      	cmp	r2, #78	; 0x4e
 8015fae:	f47f aece 	bne.w	8015d4e <_strtod_l+0xae>
 8015fb2:	4995      	ldr	r1, [pc, #596]	; (8016208 <_strtod_l+0x568>)
 8015fb4:	a811      	add	r0, sp, #68	; 0x44
 8015fb6:	f001 f9c7 	bl	8017348 <__match>
 8015fba:	2800      	cmp	r0, #0
 8015fbc:	f43f aec7 	beq.w	8015d4e <_strtod_l+0xae>
 8015fc0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015fc2:	781b      	ldrb	r3, [r3, #0]
 8015fc4:	2b28      	cmp	r3, #40	; 0x28
 8015fc6:	d12d      	bne.n	8016024 <_strtod_l+0x384>
 8015fc8:	4990      	ldr	r1, [pc, #576]	; (801620c <_strtod_l+0x56c>)
 8015fca:	aa14      	add	r2, sp, #80	; 0x50
 8015fcc:	a811      	add	r0, sp, #68	; 0x44
 8015fce:	f001 f9cf 	bl	8017370 <__hexnan>
 8015fd2:	2805      	cmp	r0, #5
 8015fd4:	d126      	bne.n	8016024 <_strtod_l+0x384>
 8015fd6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015fd8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8015fdc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8015fe0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8015fe4:	e697      	b.n	8015d16 <_strtod_l+0x76>
 8015fe6:	250a      	movs	r5, #10
 8015fe8:	fb05 2c0c 	mla	ip, r5, ip, r2
 8015fec:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8015ff0:	e7b9      	b.n	8015f66 <_strtod_l+0x2c6>
 8015ff2:	2a6e      	cmp	r2, #110	; 0x6e
 8015ff4:	e7db      	b.n	8015fae <_strtod_l+0x30e>
 8015ff6:	4986      	ldr	r1, [pc, #536]	; (8016210 <_strtod_l+0x570>)
 8015ff8:	a811      	add	r0, sp, #68	; 0x44
 8015ffa:	f001 f9a5 	bl	8017348 <__match>
 8015ffe:	2800      	cmp	r0, #0
 8016000:	f43f aea5 	beq.w	8015d4e <_strtod_l+0xae>
 8016004:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016006:	4983      	ldr	r1, [pc, #524]	; (8016214 <_strtod_l+0x574>)
 8016008:	3b01      	subs	r3, #1
 801600a:	a811      	add	r0, sp, #68	; 0x44
 801600c:	9311      	str	r3, [sp, #68]	; 0x44
 801600e:	f001 f99b 	bl	8017348 <__match>
 8016012:	b910      	cbnz	r0, 801601a <_strtod_l+0x37a>
 8016014:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016016:	3301      	adds	r3, #1
 8016018:	9311      	str	r3, [sp, #68]	; 0x44
 801601a:	f8df 920c 	ldr.w	r9, [pc, #524]	; 8016228 <_strtod_l+0x588>
 801601e:	f04f 0800 	mov.w	r8, #0
 8016022:	e678      	b.n	8015d16 <_strtod_l+0x76>
 8016024:	487c      	ldr	r0, [pc, #496]	; (8016218 <_strtod_l+0x578>)
 8016026:	f000 feab 	bl	8016d80 <nan>
 801602a:	ec59 8b10 	vmov	r8, r9, d0
 801602e:	e672      	b.n	8015d16 <_strtod_l+0x76>
 8016030:	eddd 7a07 	vldr	s15, [sp, #28]
 8016034:	eba5 020b 	sub.w	r2, r5, fp
 8016038:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801603c:	2e00      	cmp	r6, #0
 801603e:	bf08      	it	eq
 8016040:	461e      	moveq	r6, r3
 8016042:	2b10      	cmp	r3, #16
 8016044:	9206      	str	r2, [sp, #24]
 8016046:	461a      	mov	r2, r3
 8016048:	bfa8      	it	ge
 801604a:	2210      	movge	r2, #16
 801604c:	2b09      	cmp	r3, #9
 801604e:	ec59 8b17 	vmov	r8, r9, d7
 8016052:	dd0c      	ble.n	801606e <_strtod_l+0x3ce>
 8016054:	4971      	ldr	r1, [pc, #452]	; (801621c <_strtod_l+0x57c>)
 8016056:	eddd 6a05 	vldr	s13, [sp, #20]
 801605a:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 801605e:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 8016062:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 8016066:	eea7 6b05 	vfma.f64	d6, d7, d5
 801606a:	ec59 8b16 	vmov	r8, r9, d6
 801606e:	2b0f      	cmp	r3, #15
 8016070:	dc37      	bgt.n	80160e2 <_strtod_l+0x442>
 8016072:	9906      	ldr	r1, [sp, #24]
 8016074:	2900      	cmp	r1, #0
 8016076:	f43f ae4e 	beq.w	8015d16 <_strtod_l+0x76>
 801607a:	dd23      	ble.n	80160c4 <_strtod_l+0x424>
 801607c:	2916      	cmp	r1, #22
 801607e:	dc0b      	bgt.n	8016098 <_strtod_l+0x3f8>
 8016080:	4b66      	ldr	r3, [pc, #408]	; (801621c <_strtod_l+0x57c>)
 8016082:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8016086:	ed93 7b00 	vldr	d7, [r3]
 801608a:	ec49 8b16 	vmov	d6, r8, r9
 801608e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8016092:	ec59 8b17 	vmov	r8, r9, d7
 8016096:	e63e      	b.n	8015d16 <_strtod_l+0x76>
 8016098:	9806      	ldr	r0, [sp, #24]
 801609a:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 801609e:	4281      	cmp	r1, r0
 80160a0:	db1f      	blt.n	80160e2 <_strtod_l+0x442>
 80160a2:	4a5e      	ldr	r2, [pc, #376]	; (801621c <_strtod_l+0x57c>)
 80160a4:	f1c3 030f 	rsb	r3, r3, #15
 80160a8:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 80160ac:	ed91 7b00 	vldr	d7, [r1]
 80160b0:	ec49 8b16 	vmov	d6, r8, r9
 80160b4:	1ac3      	subs	r3, r0, r3
 80160b6:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80160ba:	ee27 7b06 	vmul.f64	d7, d7, d6
 80160be:	ed92 6b00 	vldr	d6, [r2]
 80160c2:	e7e4      	b.n	801608e <_strtod_l+0x3ee>
 80160c4:	9906      	ldr	r1, [sp, #24]
 80160c6:	3116      	adds	r1, #22
 80160c8:	db0b      	blt.n	80160e2 <_strtod_l+0x442>
 80160ca:	4b54      	ldr	r3, [pc, #336]	; (801621c <_strtod_l+0x57c>)
 80160cc:	ebab 0505 	sub.w	r5, fp, r5
 80160d0:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80160d4:	ed95 7b00 	vldr	d7, [r5]
 80160d8:	ec49 8b16 	vmov	d6, r8, r9
 80160dc:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80160e0:	e7d7      	b.n	8016092 <_strtod_l+0x3f2>
 80160e2:	9906      	ldr	r1, [sp, #24]
 80160e4:	1a9a      	subs	r2, r3, r2
 80160e6:	440a      	add	r2, r1
 80160e8:	2a00      	cmp	r2, #0
 80160ea:	dd6e      	ble.n	80161ca <_strtod_l+0x52a>
 80160ec:	f012 000f 	ands.w	r0, r2, #15
 80160f0:	d00a      	beq.n	8016108 <_strtod_l+0x468>
 80160f2:	494a      	ldr	r1, [pc, #296]	; (801621c <_strtod_l+0x57c>)
 80160f4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80160f8:	ed91 7b00 	vldr	d7, [r1]
 80160fc:	ec49 8b16 	vmov	d6, r8, r9
 8016100:	ee27 7b06 	vmul.f64	d7, d7, d6
 8016104:	ec59 8b17 	vmov	r8, r9, d7
 8016108:	f032 020f 	bics.w	r2, r2, #15
 801610c:	d04e      	beq.n	80161ac <_strtod_l+0x50c>
 801610e:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 8016112:	dd22      	ble.n	801615a <_strtod_l+0x4ba>
 8016114:	2500      	movs	r5, #0
 8016116:	462e      	mov	r6, r5
 8016118:	9507      	str	r5, [sp, #28]
 801611a:	462f      	mov	r7, r5
 801611c:	2322      	movs	r3, #34	; 0x22
 801611e:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8016228 <_strtod_l+0x588>
 8016122:	6023      	str	r3, [r4, #0]
 8016124:	f04f 0800 	mov.w	r8, #0
 8016128:	9b07      	ldr	r3, [sp, #28]
 801612a:	2b00      	cmp	r3, #0
 801612c:	f43f adf3 	beq.w	8015d16 <_strtod_l+0x76>
 8016130:	9912      	ldr	r1, [sp, #72]	; 0x48
 8016132:	4620      	mov	r0, r4
 8016134:	f7ff f930 	bl	8015398 <_Bfree>
 8016138:	4639      	mov	r1, r7
 801613a:	4620      	mov	r0, r4
 801613c:	f7ff f92c 	bl	8015398 <_Bfree>
 8016140:	4631      	mov	r1, r6
 8016142:	4620      	mov	r0, r4
 8016144:	f7ff f928 	bl	8015398 <_Bfree>
 8016148:	9907      	ldr	r1, [sp, #28]
 801614a:	4620      	mov	r0, r4
 801614c:	f7ff f924 	bl	8015398 <_Bfree>
 8016150:	4629      	mov	r1, r5
 8016152:	4620      	mov	r0, r4
 8016154:	f7ff f920 	bl	8015398 <_Bfree>
 8016158:	e5dd      	b.n	8015d16 <_strtod_l+0x76>
 801615a:	2000      	movs	r0, #0
 801615c:	ec49 8b17 	vmov	d7, r8, r9
 8016160:	4f2f      	ldr	r7, [pc, #188]	; (8016220 <_strtod_l+0x580>)
 8016162:	1112      	asrs	r2, r2, #4
 8016164:	4601      	mov	r1, r0
 8016166:	2a01      	cmp	r2, #1
 8016168:	dc23      	bgt.n	80161b2 <_strtod_l+0x512>
 801616a:	b108      	cbz	r0, 8016170 <_strtod_l+0x4d0>
 801616c:	ec59 8b17 	vmov	r8, r9, d7
 8016170:	4a2b      	ldr	r2, [pc, #172]	; (8016220 <_strtod_l+0x580>)
 8016172:	482c      	ldr	r0, [pc, #176]	; (8016224 <_strtod_l+0x584>)
 8016174:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8016178:	ed92 7b00 	vldr	d7, [r2]
 801617c:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8016180:	ec49 8b16 	vmov	d6, r8, r9
 8016184:	4a28      	ldr	r2, [pc, #160]	; (8016228 <_strtod_l+0x588>)
 8016186:	ee27 7b06 	vmul.f64	d7, d7, d6
 801618a:	ee17 1a90 	vmov	r1, s15
 801618e:	400a      	ands	r2, r1
 8016190:	4282      	cmp	r2, r0
 8016192:	ec59 8b17 	vmov	r8, r9, d7
 8016196:	d8bd      	bhi.n	8016114 <_strtod_l+0x474>
 8016198:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 801619c:	4282      	cmp	r2, r0
 801619e:	bf86      	itte	hi
 80161a0:	f8df 9088 	ldrhi.w	r9, [pc, #136]	; 801622c <_strtod_l+0x58c>
 80161a4:	f04f 38ff 	movhi.w	r8, #4294967295
 80161a8:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 80161ac:	2200      	movs	r2, #0
 80161ae:	9205      	str	r2, [sp, #20]
 80161b0:	e076      	b.n	80162a0 <_strtod_l+0x600>
 80161b2:	f012 0f01 	tst.w	r2, #1
 80161b6:	d004      	beq.n	80161c2 <_strtod_l+0x522>
 80161b8:	ed97 6b00 	vldr	d6, [r7]
 80161bc:	2001      	movs	r0, #1
 80161be:	ee27 7b06 	vmul.f64	d7, d7, d6
 80161c2:	3101      	adds	r1, #1
 80161c4:	1052      	asrs	r2, r2, #1
 80161c6:	3708      	adds	r7, #8
 80161c8:	e7cd      	b.n	8016166 <_strtod_l+0x4c6>
 80161ca:	d0ef      	beq.n	80161ac <_strtod_l+0x50c>
 80161cc:	4252      	negs	r2, r2
 80161ce:	f012 000f 	ands.w	r0, r2, #15
 80161d2:	d00a      	beq.n	80161ea <_strtod_l+0x54a>
 80161d4:	4911      	ldr	r1, [pc, #68]	; (801621c <_strtod_l+0x57c>)
 80161d6:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80161da:	ed91 7b00 	vldr	d7, [r1]
 80161de:	ec49 8b16 	vmov	d6, r8, r9
 80161e2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80161e6:	ec59 8b17 	vmov	r8, r9, d7
 80161ea:	1112      	asrs	r2, r2, #4
 80161ec:	d0de      	beq.n	80161ac <_strtod_l+0x50c>
 80161ee:	2a1f      	cmp	r2, #31
 80161f0:	dd1e      	ble.n	8016230 <_strtod_l+0x590>
 80161f2:	2500      	movs	r5, #0
 80161f4:	462e      	mov	r6, r5
 80161f6:	9507      	str	r5, [sp, #28]
 80161f8:	462f      	mov	r7, r5
 80161fa:	2322      	movs	r3, #34	; 0x22
 80161fc:	f04f 0800 	mov.w	r8, #0
 8016200:	f04f 0900 	mov.w	r9, #0
 8016204:	6023      	str	r3, [r4, #0]
 8016206:	e78f      	b.n	8016128 <_strtod_l+0x488>
 8016208:	08017d09 	.word	0x08017d09
 801620c:	08017f34 	.word	0x08017f34
 8016210:	08017d01 	.word	0x08017d01
 8016214:	08017d38 	.word	0x08017d38
 8016218:	080180c5 	.word	0x080180c5
 801621c:	08017e48 	.word	0x08017e48
 8016220:	08017e20 	.word	0x08017e20
 8016224:	7ca00000 	.word	0x7ca00000
 8016228:	7ff00000 	.word	0x7ff00000
 801622c:	7fefffff 	.word	0x7fefffff
 8016230:	f012 0110 	ands.w	r1, r2, #16
 8016234:	bf18      	it	ne
 8016236:	216a      	movne	r1, #106	; 0x6a
 8016238:	9105      	str	r1, [sp, #20]
 801623a:	ec49 8b17 	vmov	d7, r8, r9
 801623e:	49be      	ldr	r1, [pc, #760]	; (8016538 <_strtod_l+0x898>)
 8016240:	2000      	movs	r0, #0
 8016242:	07d7      	lsls	r7, r2, #31
 8016244:	d504      	bpl.n	8016250 <_strtod_l+0x5b0>
 8016246:	ed91 6b00 	vldr	d6, [r1]
 801624a:	2001      	movs	r0, #1
 801624c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8016250:	1052      	asrs	r2, r2, #1
 8016252:	f101 0108 	add.w	r1, r1, #8
 8016256:	d1f4      	bne.n	8016242 <_strtod_l+0x5a2>
 8016258:	b108      	cbz	r0, 801625e <_strtod_l+0x5be>
 801625a:	ec59 8b17 	vmov	r8, r9, d7
 801625e:	9a05      	ldr	r2, [sp, #20]
 8016260:	b1ba      	cbz	r2, 8016292 <_strtod_l+0x5f2>
 8016262:	f3c9 510a 	ubfx	r1, r9, #20, #11
 8016266:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 801626a:	2a00      	cmp	r2, #0
 801626c:	4648      	mov	r0, r9
 801626e:	dd10      	ble.n	8016292 <_strtod_l+0x5f2>
 8016270:	2a1f      	cmp	r2, #31
 8016272:	f340 812c 	ble.w	80164ce <_strtod_l+0x82e>
 8016276:	2a34      	cmp	r2, #52	; 0x34
 8016278:	bfde      	ittt	le
 801627a:	f04f 32ff 	movle.w	r2, #4294967295
 801627e:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 8016282:	408a      	lslle	r2, r1
 8016284:	f04f 0800 	mov.w	r8, #0
 8016288:	bfcc      	ite	gt
 801628a:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 801628e:	ea02 0900 	andle.w	r9, r2, r0
 8016292:	ec49 8b17 	vmov	d7, r8, r9
 8016296:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801629a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801629e:	d0a8      	beq.n	80161f2 <_strtod_l+0x552>
 80162a0:	9a07      	ldr	r2, [sp, #28]
 80162a2:	9200      	str	r2, [sp, #0]
 80162a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80162a6:	4632      	mov	r2, r6
 80162a8:	4620      	mov	r0, r4
 80162aa:	f7ff f8dd 	bl	8015468 <__s2b>
 80162ae:	9007      	str	r0, [sp, #28]
 80162b0:	2800      	cmp	r0, #0
 80162b2:	f43f af2f 	beq.w	8016114 <_strtod_l+0x474>
 80162b6:	9a06      	ldr	r2, [sp, #24]
 80162b8:	2a00      	cmp	r2, #0
 80162ba:	ebab 0305 	sub.w	r3, fp, r5
 80162be:	ed9f 9b96 	vldr	d9, [pc, #600]	; 8016518 <_strtod_l+0x878>
 80162c2:	bfa8      	it	ge
 80162c4:	2300      	movge	r3, #0
 80162c6:	ed9f ab96 	vldr	d10, [pc, #600]	; 8016520 <_strtod_l+0x880>
 80162ca:	ed9f bb97 	vldr	d11, [pc, #604]	; 8016528 <_strtod_l+0x888>
 80162ce:	9309      	str	r3, [sp, #36]	; 0x24
 80162d0:	2500      	movs	r5, #0
 80162d2:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80162d6:	930c      	str	r3, [sp, #48]	; 0x30
 80162d8:	462e      	mov	r6, r5
 80162da:	9b07      	ldr	r3, [sp, #28]
 80162dc:	4620      	mov	r0, r4
 80162de:	6859      	ldr	r1, [r3, #4]
 80162e0:	f7ff f81a 	bl	8015318 <_Balloc>
 80162e4:	4607      	mov	r7, r0
 80162e6:	2800      	cmp	r0, #0
 80162e8:	f43f af18 	beq.w	801611c <_strtod_l+0x47c>
 80162ec:	9b07      	ldr	r3, [sp, #28]
 80162ee:	691a      	ldr	r2, [r3, #16]
 80162f0:	3202      	adds	r2, #2
 80162f2:	f103 010c 	add.w	r1, r3, #12
 80162f6:	0092      	lsls	r2, r2, #2
 80162f8:	300c      	adds	r0, #12
 80162fa:	f7fe f9b6 	bl	801466a <memcpy>
 80162fe:	ec49 8b10 	vmov	d0, r8, r9
 8016302:	aa14      	add	r2, sp, #80	; 0x50
 8016304:	a913      	add	r1, sp, #76	; 0x4c
 8016306:	4620      	mov	r0, r4
 8016308:	f7ff fbe2 	bl	8015ad0 <__d2b>
 801630c:	ec49 8b18 	vmov	d8, r8, r9
 8016310:	9012      	str	r0, [sp, #72]	; 0x48
 8016312:	2800      	cmp	r0, #0
 8016314:	f43f af02 	beq.w	801611c <_strtod_l+0x47c>
 8016318:	2101      	movs	r1, #1
 801631a:	4620      	mov	r0, r4
 801631c:	f7ff f93c 	bl	8015598 <__i2b>
 8016320:	4606      	mov	r6, r0
 8016322:	2800      	cmp	r0, #0
 8016324:	f43f aefa 	beq.w	801611c <_strtod_l+0x47c>
 8016328:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801632a:	9914      	ldr	r1, [sp, #80]	; 0x50
 801632c:	2b00      	cmp	r3, #0
 801632e:	bfab      	itete	ge
 8016330:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 8016332:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 8016334:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 8016338:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 801633c:	bfac      	ite	ge
 801633e:	eb03 0b02 	addge.w	fp, r3, r2
 8016342:	eba2 0a03 	sublt.w	sl, r2, r3
 8016346:	9a05      	ldr	r2, [sp, #20]
 8016348:	1a9b      	subs	r3, r3, r2
 801634a:	440b      	add	r3, r1
 801634c:	4a7b      	ldr	r2, [pc, #492]	; (801653c <_strtod_l+0x89c>)
 801634e:	3b01      	subs	r3, #1
 8016350:	4293      	cmp	r3, r2
 8016352:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 8016356:	f280 80cd 	bge.w	80164f4 <_strtod_l+0x854>
 801635a:	1ad2      	subs	r2, r2, r3
 801635c:	2a1f      	cmp	r2, #31
 801635e:	eba1 0102 	sub.w	r1, r1, r2
 8016362:	f04f 0001 	mov.w	r0, #1
 8016366:	f300 80b9 	bgt.w	80164dc <_strtod_l+0x83c>
 801636a:	fa00 f302 	lsl.w	r3, r0, r2
 801636e:	930b      	str	r3, [sp, #44]	; 0x2c
 8016370:	2300      	movs	r3, #0
 8016372:	930a      	str	r3, [sp, #40]	; 0x28
 8016374:	eb0b 0301 	add.w	r3, fp, r1
 8016378:	9a05      	ldr	r2, [sp, #20]
 801637a:	459b      	cmp	fp, r3
 801637c:	448a      	add	sl, r1
 801637e:	4492      	add	sl, r2
 8016380:	465a      	mov	r2, fp
 8016382:	bfa8      	it	ge
 8016384:	461a      	movge	r2, r3
 8016386:	4552      	cmp	r2, sl
 8016388:	bfa8      	it	ge
 801638a:	4652      	movge	r2, sl
 801638c:	2a00      	cmp	r2, #0
 801638e:	bfc2      	ittt	gt
 8016390:	1a9b      	subgt	r3, r3, r2
 8016392:	ebaa 0a02 	subgt.w	sl, sl, r2
 8016396:	ebab 0b02 	subgt.w	fp, fp, r2
 801639a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801639c:	2a00      	cmp	r2, #0
 801639e:	dd18      	ble.n	80163d2 <_strtod_l+0x732>
 80163a0:	4631      	mov	r1, r6
 80163a2:	4620      	mov	r0, r4
 80163a4:	930f      	str	r3, [sp, #60]	; 0x3c
 80163a6:	f7ff f9b7 	bl	8015718 <__pow5mult>
 80163aa:	4606      	mov	r6, r0
 80163ac:	2800      	cmp	r0, #0
 80163ae:	f43f aeb5 	beq.w	801611c <_strtod_l+0x47c>
 80163b2:	4601      	mov	r1, r0
 80163b4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80163b6:	4620      	mov	r0, r4
 80163b8:	f7ff f904 	bl	80155c4 <__multiply>
 80163bc:	900e      	str	r0, [sp, #56]	; 0x38
 80163be:	2800      	cmp	r0, #0
 80163c0:	f43f aeac 	beq.w	801611c <_strtod_l+0x47c>
 80163c4:	9912      	ldr	r1, [sp, #72]	; 0x48
 80163c6:	4620      	mov	r0, r4
 80163c8:	f7fe ffe6 	bl	8015398 <_Bfree>
 80163cc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80163ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80163d0:	9212      	str	r2, [sp, #72]	; 0x48
 80163d2:	2b00      	cmp	r3, #0
 80163d4:	f300 8093 	bgt.w	80164fe <_strtod_l+0x85e>
 80163d8:	9b06      	ldr	r3, [sp, #24]
 80163da:	2b00      	cmp	r3, #0
 80163dc:	dd08      	ble.n	80163f0 <_strtod_l+0x750>
 80163de:	4639      	mov	r1, r7
 80163e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80163e2:	4620      	mov	r0, r4
 80163e4:	f7ff f998 	bl	8015718 <__pow5mult>
 80163e8:	4607      	mov	r7, r0
 80163ea:	2800      	cmp	r0, #0
 80163ec:	f43f ae96 	beq.w	801611c <_strtod_l+0x47c>
 80163f0:	f1ba 0f00 	cmp.w	sl, #0
 80163f4:	dd08      	ble.n	8016408 <_strtod_l+0x768>
 80163f6:	4639      	mov	r1, r7
 80163f8:	4652      	mov	r2, sl
 80163fa:	4620      	mov	r0, r4
 80163fc:	f7ff f9e6 	bl	80157cc <__lshift>
 8016400:	4607      	mov	r7, r0
 8016402:	2800      	cmp	r0, #0
 8016404:	f43f ae8a 	beq.w	801611c <_strtod_l+0x47c>
 8016408:	f1bb 0f00 	cmp.w	fp, #0
 801640c:	dd08      	ble.n	8016420 <_strtod_l+0x780>
 801640e:	4631      	mov	r1, r6
 8016410:	465a      	mov	r2, fp
 8016412:	4620      	mov	r0, r4
 8016414:	f7ff f9da 	bl	80157cc <__lshift>
 8016418:	4606      	mov	r6, r0
 801641a:	2800      	cmp	r0, #0
 801641c:	f43f ae7e 	beq.w	801611c <_strtod_l+0x47c>
 8016420:	9912      	ldr	r1, [sp, #72]	; 0x48
 8016422:	463a      	mov	r2, r7
 8016424:	4620      	mov	r0, r4
 8016426:	f7ff fa59 	bl	80158dc <__mdiff>
 801642a:	4605      	mov	r5, r0
 801642c:	2800      	cmp	r0, #0
 801642e:	f43f ae75 	beq.w	801611c <_strtod_l+0x47c>
 8016432:	2300      	movs	r3, #0
 8016434:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 8016438:	60c3      	str	r3, [r0, #12]
 801643a:	4631      	mov	r1, r6
 801643c:	f7ff fa32 	bl	80158a4 <__mcmp>
 8016440:	2800      	cmp	r0, #0
 8016442:	da7f      	bge.n	8016544 <_strtod_l+0x8a4>
 8016444:	ea5a 0a08 	orrs.w	sl, sl, r8
 8016448:	f040 80a5 	bne.w	8016596 <_strtod_l+0x8f6>
 801644c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8016450:	2b00      	cmp	r3, #0
 8016452:	f040 80a0 	bne.w	8016596 <_strtod_l+0x8f6>
 8016456:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801645a:	0d1b      	lsrs	r3, r3, #20
 801645c:	051b      	lsls	r3, r3, #20
 801645e:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8016462:	f240 8098 	bls.w	8016596 <_strtod_l+0x8f6>
 8016466:	696b      	ldr	r3, [r5, #20]
 8016468:	b91b      	cbnz	r3, 8016472 <_strtod_l+0x7d2>
 801646a:	692b      	ldr	r3, [r5, #16]
 801646c:	2b01      	cmp	r3, #1
 801646e:	f340 8092 	ble.w	8016596 <_strtod_l+0x8f6>
 8016472:	4629      	mov	r1, r5
 8016474:	2201      	movs	r2, #1
 8016476:	4620      	mov	r0, r4
 8016478:	f7ff f9a8 	bl	80157cc <__lshift>
 801647c:	4631      	mov	r1, r6
 801647e:	4605      	mov	r5, r0
 8016480:	f7ff fa10 	bl	80158a4 <__mcmp>
 8016484:	2800      	cmp	r0, #0
 8016486:	f340 8086 	ble.w	8016596 <_strtod_l+0x8f6>
 801648a:	9905      	ldr	r1, [sp, #20]
 801648c:	4a2c      	ldr	r2, [pc, #176]	; (8016540 <_strtod_l+0x8a0>)
 801648e:	464b      	mov	r3, r9
 8016490:	2900      	cmp	r1, #0
 8016492:	f000 809f 	beq.w	80165d4 <_strtod_l+0x934>
 8016496:	ea02 0109 	and.w	r1, r2, r9
 801649a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801649e:	f300 8099 	bgt.w	80165d4 <_strtod_l+0x934>
 80164a2:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80164a6:	f77f aea8 	ble.w	80161fa <_strtod_l+0x55a>
 80164aa:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8016530 <_strtod_l+0x890>
 80164ae:	ec49 8b16 	vmov	d6, r8, r9
 80164b2:	4b23      	ldr	r3, [pc, #140]	; (8016540 <_strtod_l+0x8a0>)
 80164b4:	ee26 7b07 	vmul.f64	d7, d6, d7
 80164b8:	ee17 2a90 	vmov	r2, s15
 80164bc:	4013      	ands	r3, r2
 80164be:	ec59 8b17 	vmov	r8, r9, d7
 80164c2:	2b00      	cmp	r3, #0
 80164c4:	f47f ae34 	bne.w	8016130 <_strtod_l+0x490>
 80164c8:	2322      	movs	r3, #34	; 0x22
 80164ca:	6023      	str	r3, [r4, #0]
 80164cc:	e630      	b.n	8016130 <_strtod_l+0x490>
 80164ce:	f04f 31ff 	mov.w	r1, #4294967295
 80164d2:	fa01 f202 	lsl.w	r2, r1, r2
 80164d6:	ea02 0808 	and.w	r8, r2, r8
 80164da:	e6da      	b.n	8016292 <_strtod_l+0x5f2>
 80164dc:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 80164e0:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 80164e4:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 80164e8:	33e2      	adds	r3, #226	; 0xe2
 80164ea:	fa00 f303 	lsl.w	r3, r0, r3
 80164ee:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 80164f2:	e73f      	b.n	8016374 <_strtod_l+0x6d4>
 80164f4:	2200      	movs	r2, #0
 80164f6:	2301      	movs	r3, #1
 80164f8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80164fc:	e73a      	b.n	8016374 <_strtod_l+0x6d4>
 80164fe:	9912      	ldr	r1, [sp, #72]	; 0x48
 8016500:	461a      	mov	r2, r3
 8016502:	4620      	mov	r0, r4
 8016504:	f7ff f962 	bl	80157cc <__lshift>
 8016508:	9012      	str	r0, [sp, #72]	; 0x48
 801650a:	2800      	cmp	r0, #0
 801650c:	f47f af64 	bne.w	80163d8 <_strtod_l+0x738>
 8016510:	e604      	b.n	801611c <_strtod_l+0x47c>
 8016512:	bf00      	nop
 8016514:	f3af 8000 	nop.w
 8016518:	94a03595 	.word	0x94a03595
 801651c:	3fcfffff 	.word	0x3fcfffff
 8016520:	94a03595 	.word	0x94a03595
 8016524:	3fdfffff 	.word	0x3fdfffff
 8016528:	35afe535 	.word	0x35afe535
 801652c:	3fe00000 	.word	0x3fe00000
 8016530:	00000000 	.word	0x00000000
 8016534:	39500000 	.word	0x39500000
 8016538:	08017f48 	.word	0x08017f48
 801653c:	fffffc02 	.word	0xfffffc02
 8016540:	7ff00000 	.word	0x7ff00000
 8016544:	46cb      	mov	fp, r9
 8016546:	d15f      	bne.n	8016608 <_strtod_l+0x968>
 8016548:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801654c:	f1ba 0f00 	cmp.w	sl, #0
 8016550:	d02a      	beq.n	80165a8 <_strtod_l+0x908>
 8016552:	4aa7      	ldr	r2, [pc, #668]	; (80167f0 <_strtod_l+0xb50>)
 8016554:	4293      	cmp	r3, r2
 8016556:	d12b      	bne.n	80165b0 <_strtod_l+0x910>
 8016558:	9b05      	ldr	r3, [sp, #20]
 801655a:	4642      	mov	r2, r8
 801655c:	b1fb      	cbz	r3, 801659e <_strtod_l+0x8fe>
 801655e:	4ba5      	ldr	r3, [pc, #660]	; (80167f4 <_strtod_l+0xb54>)
 8016560:	ea09 0303 	and.w	r3, r9, r3
 8016564:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8016568:	f04f 31ff 	mov.w	r1, #4294967295
 801656c:	d81a      	bhi.n	80165a4 <_strtod_l+0x904>
 801656e:	0d1b      	lsrs	r3, r3, #20
 8016570:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8016574:	fa01 f303 	lsl.w	r3, r1, r3
 8016578:	429a      	cmp	r2, r3
 801657a:	d119      	bne.n	80165b0 <_strtod_l+0x910>
 801657c:	4b9e      	ldr	r3, [pc, #632]	; (80167f8 <_strtod_l+0xb58>)
 801657e:	459b      	cmp	fp, r3
 8016580:	d102      	bne.n	8016588 <_strtod_l+0x8e8>
 8016582:	3201      	adds	r2, #1
 8016584:	f43f adca 	beq.w	801611c <_strtod_l+0x47c>
 8016588:	4b9a      	ldr	r3, [pc, #616]	; (80167f4 <_strtod_l+0xb54>)
 801658a:	ea0b 0303 	and.w	r3, fp, r3
 801658e:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8016592:	f04f 0800 	mov.w	r8, #0
 8016596:	9b05      	ldr	r3, [sp, #20]
 8016598:	2b00      	cmp	r3, #0
 801659a:	d186      	bne.n	80164aa <_strtod_l+0x80a>
 801659c:	e5c8      	b.n	8016130 <_strtod_l+0x490>
 801659e:	f04f 33ff 	mov.w	r3, #4294967295
 80165a2:	e7e9      	b.n	8016578 <_strtod_l+0x8d8>
 80165a4:	460b      	mov	r3, r1
 80165a6:	e7e7      	b.n	8016578 <_strtod_l+0x8d8>
 80165a8:	ea53 0308 	orrs.w	r3, r3, r8
 80165ac:	f43f af6d 	beq.w	801648a <_strtod_l+0x7ea>
 80165b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80165b2:	b1cb      	cbz	r3, 80165e8 <_strtod_l+0x948>
 80165b4:	ea13 0f0b 	tst.w	r3, fp
 80165b8:	d0ed      	beq.n	8016596 <_strtod_l+0x8f6>
 80165ba:	9a05      	ldr	r2, [sp, #20]
 80165bc:	4640      	mov	r0, r8
 80165be:	4649      	mov	r1, r9
 80165c0:	f1ba 0f00 	cmp.w	sl, #0
 80165c4:	d014      	beq.n	80165f0 <_strtod_l+0x950>
 80165c6:	f7ff fb51 	bl	8015c6c <sulp>
 80165ca:	ee38 7b00 	vadd.f64	d7, d8, d0
 80165ce:	ec59 8b17 	vmov	r8, r9, d7
 80165d2:	e7e0      	b.n	8016596 <_strtod_l+0x8f6>
 80165d4:	4013      	ands	r3, r2
 80165d6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80165da:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80165de:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80165e2:	f04f 38ff 	mov.w	r8, #4294967295
 80165e6:	e7d6      	b.n	8016596 <_strtod_l+0x8f6>
 80165e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80165ea:	ea13 0f08 	tst.w	r3, r8
 80165ee:	e7e3      	b.n	80165b8 <_strtod_l+0x918>
 80165f0:	f7ff fb3c 	bl	8015c6c <sulp>
 80165f4:	ee38 0b40 	vsub.f64	d0, d8, d0
 80165f8:	eeb5 0b40 	vcmp.f64	d0, #0.0
 80165fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016600:	ec59 8b10 	vmov	r8, r9, d0
 8016604:	d1c7      	bne.n	8016596 <_strtod_l+0x8f6>
 8016606:	e5f8      	b.n	80161fa <_strtod_l+0x55a>
 8016608:	4631      	mov	r1, r6
 801660a:	4628      	mov	r0, r5
 801660c:	f7ff faba 	bl	8015b84 <__ratio>
 8016610:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8016614:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8016618:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801661c:	d85f      	bhi.n	80166de <_strtod_l+0xa3e>
 801661e:	f1ba 0f00 	cmp.w	sl, #0
 8016622:	d166      	bne.n	80166f2 <_strtod_l+0xa52>
 8016624:	f1b8 0f00 	cmp.w	r8, #0
 8016628:	d14d      	bne.n	80166c6 <_strtod_l+0xa26>
 801662a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801662e:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 8016632:	2b00      	cmp	r3, #0
 8016634:	d162      	bne.n	80166fc <_strtod_l+0xa5c>
 8016636:	eeb4 0bcd 	vcmpe.f64	d0, d13
 801663a:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 801663e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016642:	d401      	bmi.n	8016648 <_strtod_l+0x9a8>
 8016644:	ee20 db0d 	vmul.f64	d13, d0, d13
 8016648:	eeb1 cb4d 	vneg.f64	d12, d13
 801664c:	4869      	ldr	r0, [pc, #420]	; (80167f4 <_strtod_l+0xb54>)
 801664e:	f8df c1b0 	ldr.w	ip, [pc, #432]	; 8016800 <_strtod_l+0xb60>
 8016652:	ea0b 0100 	and.w	r1, fp, r0
 8016656:	4561      	cmp	r1, ip
 8016658:	ec53 2b1c 	vmov	r2, r3, d12
 801665c:	d17a      	bne.n	8016754 <_strtod_l+0xab4>
 801665e:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 8016662:	ec49 8b10 	vmov	d0, r8, r9
 8016666:	910a      	str	r1, [sp, #40]	; 0x28
 8016668:	f7ff f9c2 	bl	80159f0 <__ulp>
 801666c:	ec49 8b1e 	vmov	d14, r8, r9
 8016670:	4860      	ldr	r0, [pc, #384]	; (80167f4 <_strtod_l+0xb54>)
 8016672:	eea0 eb0c 	vfma.f64	d14, d0, d12
 8016676:	ee1e 3a90 	vmov	r3, s29
 801667a:	4a60      	ldr	r2, [pc, #384]	; (80167fc <_strtod_l+0xb5c>)
 801667c:	990a      	ldr	r1, [sp, #40]	; 0x28
 801667e:	4018      	ands	r0, r3
 8016680:	4290      	cmp	r0, r2
 8016682:	ec59 8b1e 	vmov	r8, r9, d14
 8016686:	d93c      	bls.n	8016702 <_strtod_l+0xa62>
 8016688:	ee18 2a90 	vmov	r2, s17
 801668c:	4b5a      	ldr	r3, [pc, #360]	; (80167f8 <_strtod_l+0xb58>)
 801668e:	429a      	cmp	r2, r3
 8016690:	d104      	bne.n	801669c <_strtod_l+0x9fc>
 8016692:	ee18 3a10 	vmov	r3, s16
 8016696:	3301      	adds	r3, #1
 8016698:	f43f ad40 	beq.w	801611c <_strtod_l+0x47c>
 801669c:	f8df 9158 	ldr.w	r9, [pc, #344]	; 80167f8 <_strtod_l+0xb58>
 80166a0:	f04f 38ff 	mov.w	r8, #4294967295
 80166a4:	9912      	ldr	r1, [sp, #72]	; 0x48
 80166a6:	4620      	mov	r0, r4
 80166a8:	f7fe fe76 	bl	8015398 <_Bfree>
 80166ac:	4639      	mov	r1, r7
 80166ae:	4620      	mov	r0, r4
 80166b0:	f7fe fe72 	bl	8015398 <_Bfree>
 80166b4:	4631      	mov	r1, r6
 80166b6:	4620      	mov	r0, r4
 80166b8:	f7fe fe6e 	bl	8015398 <_Bfree>
 80166bc:	4629      	mov	r1, r5
 80166be:	4620      	mov	r0, r4
 80166c0:	f7fe fe6a 	bl	8015398 <_Bfree>
 80166c4:	e609      	b.n	80162da <_strtod_l+0x63a>
 80166c6:	f1b8 0f01 	cmp.w	r8, #1
 80166ca:	d103      	bne.n	80166d4 <_strtod_l+0xa34>
 80166cc:	f1b9 0f00 	cmp.w	r9, #0
 80166d0:	f43f ad93 	beq.w	80161fa <_strtod_l+0x55a>
 80166d4:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 80166d8:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 80166dc:	e7b6      	b.n	801664c <_strtod_l+0x9ac>
 80166de:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 80166e2:	ee20 db0d 	vmul.f64	d13, d0, d13
 80166e6:	f1ba 0f00 	cmp.w	sl, #0
 80166ea:	d0ad      	beq.n	8016648 <_strtod_l+0x9a8>
 80166ec:	eeb0 cb4d 	vmov.f64	d12, d13
 80166f0:	e7ac      	b.n	801664c <_strtod_l+0x9ac>
 80166f2:	eeb7 cb00 	vmov.f64	d12, #112	; 0x3f800000  1.0
 80166f6:	eeb0 db4c 	vmov.f64	d13, d12
 80166fa:	e7a7      	b.n	801664c <_strtod_l+0x9ac>
 80166fc:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 8016700:	e7a4      	b.n	801664c <_strtod_l+0x9ac>
 8016702:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8016706:	9b05      	ldr	r3, [sp, #20]
 8016708:	46cb      	mov	fp, r9
 801670a:	2b00      	cmp	r3, #0
 801670c:	d1ca      	bne.n	80166a4 <_strtod_l+0xa04>
 801670e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8016712:	0d1b      	lsrs	r3, r3, #20
 8016714:	051b      	lsls	r3, r3, #20
 8016716:	4299      	cmp	r1, r3
 8016718:	d1c4      	bne.n	80166a4 <_strtod_l+0xa04>
 801671a:	ec51 0b1d 	vmov	r0, r1, d13
 801671e:	f7ea f80b 	bl	8000738 <__aeabi_d2lz>
 8016722:	f7e9 ffc3 	bl	80006ac <__aeabi_l2d>
 8016726:	f3c9 0b13 	ubfx	fp, r9, #0, #20
 801672a:	ec41 0b17 	vmov	d7, r0, r1
 801672e:	ea4b 0b08 	orr.w	fp, fp, r8
 8016732:	ea5b 0b0a 	orrs.w	fp, fp, sl
 8016736:	ee3d db47 	vsub.f64	d13, d13, d7
 801673a:	d03c      	beq.n	80167b6 <_strtod_l+0xb16>
 801673c:	eeb4 dbca 	vcmpe.f64	d13, d10
 8016740:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016744:	f53f acf4 	bmi.w	8016130 <_strtod_l+0x490>
 8016748:	eeb4 dbcb 	vcmpe.f64	d13, d11
 801674c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016750:	dda8      	ble.n	80166a4 <_strtod_l+0xa04>
 8016752:	e4ed      	b.n	8016130 <_strtod_l+0x490>
 8016754:	9805      	ldr	r0, [sp, #20]
 8016756:	b1f0      	cbz	r0, 8016796 <_strtod_l+0xaf6>
 8016758:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 801675c:	d81b      	bhi.n	8016796 <_strtod_l+0xaf6>
 801675e:	ed9f 7b22 	vldr	d7, [pc, #136]	; 80167e8 <_strtod_l+0xb48>
 8016762:	eeb4 dbc7 	vcmpe.f64	d13, d7
 8016766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801676a:	d811      	bhi.n	8016790 <_strtod_l+0xaf0>
 801676c:	eebc dbcd 	vcvt.u32.f64	s26, d13
 8016770:	ee1d 3a10 	vmov	r3, s26
 8016774:	2b01      	cmp	r3, #1
 8016776:	bf38      	it	cc
 8016778:	2301      	movcc	r3, #1
 801677a:	ee0d 3a10 	vmov	s26, r3
 801677e:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 8016782:	f1ba 0f00 	cmp.w	sl, #0
 8016786:	d113      	bne.n	80167b0 <_strtod_l+0xb10>
 8016788:	eeb1 7b4d 	vneg.f64	d7, d13
 801678c:	ec53 2b17 	vmov	r2, r3, d7
 8016790:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 8016794:	1a43      	subs	r3, r0, r1
 8016796:	eeb0 0b48 	vmov.f64	d0, d8
 801679a:	ec43 2b1c 	vmov	d12, r2, r3
 801679e:	910a      	str	r1, [sp, #40]	; 0x28
 80167a0:	f7ff f926 	bl	80159f0 <__ulp>
 80167a4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80167a6:	eeac 8b00 	vfma.f64	d8, d12, d0
 80167aa:	ec59 8b18 	vmov	r8, r9, d8
 80167ae:	e7aa      	b.n	8016706 <_strtod_l+0xa66>
 80167b0:	eeb0 7b4d 	vmov.f64	d7, d13
 80167b4:	e7ea      	b.n	801678c <_strtod_l+0xaec>
 80167b6:	eeb4 dbc9 	vcmpe.f64	d13, d9
 80167ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80167be:	f57f af71 	bpl.w	80166a4 <_strtod_l+0xa04>
 80167c2:	e4b5      	b.n	8016130 <_strtod_l+0x490>
 80167c4:	2300      	movs	r3, #0
 80167c6:	9308      	str	r3, [sp, #32]
 80167c8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80167ca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80167cc:	6013      	str	r3, [r2, #0]
 80167ce:	f7ff baa6 	b.w	8015d1e <_strtod_l+0x7e>
 80167d2:	2a65      	cmp	r2, #101	; 0x65
 80167d4:	f43f aba2 	beq.w	8015f1c <_strtod_l+0x27c>
 80167d8:	2a45      	cmp	r2, #69	; 0x45
 80167da:	f43f ab9f 	beq.w	8015f1c <_strtod_l+0x27c>
 80167de:	2101      	movs	r1, #1
 80167e0:	f7ff bbd8 	b.w	8015f94 <_strtod_l+0x2f4>
 80167e4:	f3af 8000 	nop.w
 80167e8:	ffc00000 	.word	0xffc00000
 80167ec:	41dfffff 	.word	0x41dfffff
 80167f0:	000fffff 	.word	0x000fffff
 80167f4:	7ff00000 	.word	0x7ff00000
 80167f8:	7fefffff 	.word	0x7fefffff
 80167fc:	7c9fffff 	.word	0x7c9fffff
 8016800:	7fe00000 	.word	0x7fe00000

08016804 <_strtod_r>:
 8016804:	4b01      	ldr	r3, [pc, #4]	; (801680c <_strtod_r+0x8>)
 8016806:	f7ff ba4b 	b.w	8015ca0 <_strtod_l>
 801680a:	bf00      	nop
 801680c:	24000070 	.word	0x24000070

08016810 <_strtol_l.constprop.0>:
 8016810:	2b01      	cmp	r3, #1
 8016812:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016816:	d001      	beq.n	801681c <_strtol_l.constprop.0+0xc>
 8016818:	2b24      	cmp	r3, #36	; 0x24
 801681a:	d906      	bls.n	801682a <_strtol_l.constprop.0+0x1a>
 801681c:	f7fd fef8 	bl	8014610 <__errno>
 8016820:	2316      	movs	r3, #22
 8016822:	6003      	str	r3, [r0, #0]
 8016824:	2000      	movs	r0, #0
 8016826:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801682a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8016910 <_strtol_l.constprop.0+0x100>
 801682e:	460d      	mov	r5, r1
 8016830:	462e      	mov	r6, r5
 8016832:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016836:	f81c 7004 	ldrb.w	r7, [ip, r4]
 801683a:	f017 0708 	ands.w	r7, r7, #8
 801683e:	d1f7      	bne.n	8016830 <_strtol_l.constprop.0+0x20>
 8016840:	2c2d      	cmp	r4, #45	; 0x2d
 8016842:	d132      	bne.n	80168aa <_strtol_l.constprop.0+0x9a>
 8016844:	782c      	ldrb	r4, [r5, #0]
 8016846:	2701      	movs	r7, #1
 8016848:	1cb5      	adds	r5, r6, #2
 801684a:	2b00      	cmp	r3, #0
 801684c:	d05b      	beq.n	8016906 <_strtol_l.constprop.0+0xf6>
 801684e:	2b10      	cmp	r3, #16
 8016850:	d109      	bne.n	8016866 <_strtol_l.constprop.0+0x56>
 8016852:	2c30      	cmp	r4, #48	; 0x30
 8016854:	d107      	bne.n	8016866 <_strtol_l.constprop.0+0x56>
 8016856:	782c      	ldrb	r4, [r5, #0]
 8016858:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801685c:	2c58      	cmp	r4, #88	; 0x58
 801685e:	d14d      	bne.n	80168fc <_strtol_l.constprop.0+0xec>
 8016860:	786c      	ldrb	r4, [r5, #1]
 8016862:	2310      	movs	r3, #16
 8016864:	3502      	adds	r5, #2
 8016866:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801686a:	f108 38ff 	add.w	r8, r8, #4294967295
 801686e:	f04f 0e00 	mov.w	lr, #0
 8016872:	fbb8 f9f3 	udiv	r9, r8, r3
 8016876:	4676      	mov	r6, lr
 8016878:	fb03 8a19 	mls	sl, r3, r9, r8
 801687c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8016880:	f1bc 0f09 	cmp.w	ip, #9
 8016884:	d816      	bhi.n	80168b4 <_strtol_l.constprop.0+0xa4>
 8016886:	4664      	mov	r4, ip
 8016888:	42a3      	cmp	r3, r4
 801688a:	dd24      	ble.n	80168d6 <_strtol_l.constprop.0+0xc6>
 801688c:	f1be 3fff 	cmp.w	lr, #4294967295
 8016890:	d008      	beq.n	80168a4 <_strtol_l.constprop.0+0x94>
 8016892:	45b1      	cmp	r9, r6
 8016894:	d31c      	bcc.n	80168d0 <_strtol_l.constprop.0+0xc0>
 8016896:	d101      	bne.n	801689c <_strtol_l.constprop.0+0x8c>
 8016898:	45a2      	cmp	sl, r4
 801689a:	db19      	blt.n	80168d0 <_strtol_l.constprop.0+0xc0>
 801689c:	fb06 4603 	mla	r6, r6, r3, r4
 80168a0:	f04f 0e01 	mov.w	lr, #1
 80168a4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80168a8:	e7e8      	b.n	801687c <_strtol_l.constprop.0+0x6c>
 80168aa:	2c2b      	cmp	r4, #43	; 0x2b
 80168ac:	bf04      	itt	eq
 80168ae:	782c      	ldrbeq	r4, [r5, #0]
 80168b0:	1cb5      	addeq	r5, r6, #2
 80168b2:	e7ca      	b.n	801684a <_strtol_l.constprop.0+0x3a>
 80168b4:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80168b8:	f1bc 0f19 	cmp.w	ip, #25
 80168bc:	d801      	bhi.n	80168c2 <_strtol_l.constprop.0+0xb2>
 80168be:	3c37      	subs	r4, #55	; 0x37
 80168c0:	e7e2      	b.n	8016888 <_strtol_l.constprop.0+0x78>
 80168c2:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80168c6:	f1bc 0f19 	cmp.w	ip, #25
 80168ca:	d804      	bhi.n	80168d6 <_strtol_l.constprop.0+0xc6>
 80168cc:	3c57      	subs	r4, #87	; 0x57
 80168ce:	e7db      	b.n	8016888 <_strtol_l.constprop.0+0x78>
 80168d0:	f04f 3eff 	mov.w	lr, #4294967295
 80168d4:	e7e6      	b.n	80168a4 <_strtol_l.constprop.0+0x94>
 80168d6:	f1be 3fff 	cmp.w	lr, #4294967295
 80168da:	d105      	bne.n	80168e8 <_strtol_l.constprop.0+0xd8>
 80168dc:	2322      	movs	r3, #34	; 0x22
 80168de:	6003      	str	r3, [r0, #0]
 80168e0:	4646      	mov	r6, r8
 80168e2:	b942      	cbnz	r2, 80168f6 <_strtol_l.constprop.0+0xe6>
 80168e4:	4630      	mov	r0, r6
 80168e6:	e79e      	b.n	8016826 <_strtol_l.constprop.0+0x16>
 80168e8:	b107      	cbz	r7, 80168ec <_strtol_l.constprop.0+0xdc>
 80168ea:	4276      	negs	r6, r6
 80168ec:	2a00      	cmp	r2, #0
 80168ee:	d0f9      	beq.n	80168e4 <_strtol_l.constprop.0+0xd4>
 80168f0:	f1be 0f00 	cmp.w	lr, #0
 80168f4:	d000      	beq.n	80168f8 <_strtol_l.constprop.0+0xe8>
 80168f6:	1e69      	subs	r1, r5, #1
 80168f8:	6011      	str	r1, [r2, #0]
 80168fa:	e7f3      	b.n	80168e4 <_strtol_l.constprop.0+0xd4>
 80168fc:	2430      	movs	r4, #48	; 0x30
 80168fe:	2b00      	cmp	r3, #0
 8016900:	d1b1      	bne.n	8016866 <_strtol_l.constprop.0+0x56>
 8016902:	2308      	movs	r3, #8
 8016904:	e7af      	b.n	8016866 <_strtol_l.constprop.0+0x56>
 8016906:	2c30      	cmp	r4, #48	; 0x30
 8016908:	d0a5      	beq.n	8016856 <_strtol_l.constprop.0+0x46>
 801690a:	230a      	movs	r3, #10
 801690c:	e7ab      	b.n	8016866 <_strtol_l.constprop.0+0x56>
 801690e:	bf00      	nop
 8016910:	08017f71 	.word	0x08017f71

08016914 <_strtol_r>:
 8016914:	f7ff bf7c 	b.w	8016810 <_strtol_l.constprop.0>

08016918 <__ssputs_r>:
 8016918:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801691c:	688e      	ldr	r6, [r1, #8]
 801691e:	461f      	mov	r7, r3
 8016920:	42be      	cmp	r6, r7
 8016922:	680b      	ldr	r3, [r1, #0]
 8016924:	4682      	mov	sl, r0
 8016926:	460c      	mov	r4, r1
 8016928:	4690      	mov	r8, r2
 801692a:	d82c      	bhi.n	8016986 <__ssputs_r+0x6e>
 801692c:	898a      	ldrh	r2, [r1, #12]
 801692e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8016932:	d026      	beq.n	8016982 <__ssputs_r+0x6a>
 8016934:	6965      	ldr	r5, [r4, #20]
 8016936:	6909      	ldr	r1, [r1, #16]
 8016938:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801693c:	eba3 0901 	sub.w	r9, r3, r1
 8016940:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8016944:	1c7b      	adds	r3, r7, #1
 8016946:	444b      	add	r3, r9
 8016948:	106d      	asrs	r5, r5, #1
 801694a:	429d      	cmp	r5, r3
 801694c:	bf38      	it	cc
 801694e:	461d      	movcc	r5, r3
 8016950:	0553      	lsls	r3, r2, #21
 8016952:	d527      	bpl.n	80169a4 <__ssputs_r+0x8c>
 8016954:	4629      	mov	r1, r5
 8016956:	f7fc fd7d 	bl	8013454 <_malloc_r>
 801695a:	4606      	mov	r6, r0
 801695c:	b360      	cbz	r0, 80169b8 <__ssputs_r+0xa0>
 801695e:	6921      	ldr	r1, [r4, #16]
 8016960:	464a      	mov	r2, r9
 8016962:	f7fd fe82 	bl	801466a <memcpy>
 8016966:	89a3      	ldrh	r3, [r4, #12]
 8016968:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801696c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016970:	81a3      	strh	r3, [r4, #12]
 8016972:	6126      	str	r6, [r4, #16]
 8016974:	6165      	str	r5, [r4, #20]
 8016976:	444e      	add	r6, r9
 8016978:	eba5 0509 	sub.w	r5, r5, r9
 801697c:	6026      	str	r6, [r4, #0]
 801697e:	60a5      	str	r5, [r4, #8]
 8016980:	463e      	mov	r6, r7
 8016982:	42be      	cmp	r6, r7
 8016984:	d900      	bls.n	8016988 <__ssputs_r+0x70>
 8016986:	463e      	mov	r6, r7
 8016988:	6820      	ldr	r0, [r4, #0]
 801698a:	4632      	mov	r2, r6
 801698c:	4641      	mov	r1, r8
 801698e:	f000 f9c9 	bl	8016d24 <memmove>
 8016992:	68a3      	ldr	r3, [r4, #8]
 8016994:	1b9b      	subs	r3, r3, r6
 8016996:	60a3      	str	r3, [r4, #8]
 8016998:	6823      	ldr	r3, [r4, #0]
 801699a:	4433      	add	r3, r6
 801699c:	6023      	str	r3, [r4, #0]
 801699e:	2000      	movs	r0, #0
 80169a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80169a4:	462a      	mov	r2, r5
 80169a6:	f000 fd90 	bl	80174ca <_realloc_r>
 80169aa:	4606      	mov	r6, r0
 80169ac:	2800      	cmp	r0, #0
 80169ae:	d1e0      	bne.n	8016972 <__ssputs_r+0x5a>
 80169b0:	6921      	ldr	r1, [r4, #16]
 80169b2:	4650      	mov	r0, sl
 80169b4:	f7fe fc64 	bl	8015280 <_free_r>
 80169b8:	230c      	movs	r3, #12
 80169ba:	f8ca 3000 	str.w	r3, [sl]
 80169be:	89a3      	ldrh	r3, [r4, #12]
 80169c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80169c4:	81a3      	strh	r3, [r4, #12]
 80169c6:	f04f 30ff 	mov.w	r0, #4294967295
 80169ca:	e7e9      	b.n	80169a0 <__ssputs_r+0x88>

080169cc <_svfiprintf_r>:
 80169cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80169d0:	4698      	mov	r8, r3
 80169d2:	898b      	ldrh	r3, [r1, #12]
 80169d4:	061b      	lsls	r3, r3, #24
 80169d6:	b09d      	sub	sp, #116	; 0x74
 80169d8:	4607      	mov	r7, r0
 80169da:	460d      	mov	r5, r1
 80169dc:	4614      	mov	r4, r2
 80169de:	d50e      	bpl.n	80169fe <_svfiprintf_r+0x32>
 80169e0:	690b      	ldr	r3, [r1, #16]
 80169e2:	b963      	cbnz	r3, 80169fe <_svfiprintf_r+0x32>
 80169e4:	2140      	movs	r1, #64	; 0x40
 80169e6:	f7fc fd35 	bl	8013454 <_malloc_r>
 80169ea:	6028      	str	r0, [r5, #0]
 80169ec:	6128      	str	r0, [r5, #16]
 80169ee:	b920      	cbnz	r0, 80169fa <_svfiprintf_r+0x2e>
 80169f0:	230c      	movs	r3, #12
 80169f2:	603b      	str	r3, [r7, #0]
 80169f4:	f04f 30ff 	mov.w	r0, #4294967295
 80169f8:	e0d0      	b.n	8016b9c <_svfiprintf_r+0x1d0>
 80169fa:	2340      	movs	r3, #64	; 0x40
 80169fc:	616b      	str	r3, [r5, #20]
 80169fe:	2300      	movs	r3, #0
 8016a00:	9309      	str	r3, [sp, #36]	; 0x24
 8016a02:	2320      	movs	r3, #32
 8016a04:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016a08:	f8cd 800c 	str.w	r8, [sp, #12]
 8016a0c:	2330      	movs	r3, #48	; 0x30
 8016a0e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8016bb4 <_svfiprintf_r+0x1e8>
 8016a12:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016a16:	f04f 0901 	mov.w	r9, #1
 8016a1a:	4623      	mov	r3, r4
 8016a1c:	469a      	mov	sl, r3
 8016a1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016a22:	b10a      	cbz	r2, 8016a28 <_svfiprintf_r+0x5c>
 8016a24:	2a25      	cmp	r2, #37	; 0x25
 8016a26:	d1f9      	bne.n	8016a1c <_svfiprintf_r+0x50>
 8016a28:	ebba 0b04 	subs.w	fp, sl, r4
 8016a2c:	d00b      	beq.n	8016a46 <_svfiprintf_r+0x7a>
 8016a2e:	465b      	mov	r3, fp
 8016a30:	4622      	mov	r2, r4
 8016a32:	4629      	mov	r1, r5
 8016a34:	4638      	mov	r0, r7
 8016a36:	f7ff ff6f 	bl	8016918 <__ssputs_r>
 8016a3a:	3001      	adds	r0, #1
 8016a3c:	f000 80a9 	beq.w	8016b92 <_svfiprintf_r+0x1c6>
 8016a40:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016a42:	445a      	add	r2, fp
 8016a44:	9209      	str	r2, [sp, #36]	; 0x24
 8016a46:	f89a 3000 	ldrb.w	r3, [sl]
 8016a4a:	2b00      	cmp	r3, #0
 8016a4c:	f000 80a1 	beq.w	8016b92 <_svfiprintf_r+0x1c6>
 8016a50:	2300      	movs	r3, #0
 8016a52:	f04f 32ff 	mov.w	r2, #4294967295
 8016a56:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016a5a:	f10a 0a01 	add.w	sl, sl, #1
 8016a5e:	9304      	str	r3, [sp, #16]
 8016a60:	9307      	str	r3, [sp, #28]
 8016a62:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016a66:	931a      	str	r3, [sp, #104]	; 0x68
 8016a68:	4654      	mov	r4, sl
 8016a6a:	2205      	movs	r2, #5
 8016a6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016a70:	4850      	ldr	r0, [pc, #320]	; (8016bb4 <_svfiprintf_r+0x1e8>)
 8016a72:	f7e9 fc35 	bl	80002e0 <memchr>
 8016a76:	9a04      	ldr	r2, [sp, #16]
 8016a78:	b9d8      	cbnz	r0, 8016ab2 <_svfiprintf_r+0xe6>
 8016a7a:	06d0      	lsls	r0, r2, #27
 8016a7c:	bf44      	itt	mi
 8016a7e:	2320      	movmi	r3, #32
 8016a80:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016a84:	0711      	lsls	r1, r2, #28
 8016a86:	bf44      	itt	mi
 8016a88:	232b      	movmi	r3, #43	; 0x2b
 8016a8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016a8e:	f89a 3000 	ldrb.w	r3, [sl]
 8016a92:	2b2a      	cmp	r3, #42	; 0x2a
 8016a94:	d015      	beq.n	8016ac2 <_svfiprintf_r+0xf6>
 8016a96:	9a07      	ldr	r2, [sp, #28]
 8016a98:	4654      	mov	r4, sl
 8016a9a:	2000      	movs	r0, #0
 8016a9c:	f04f 0c0a 	mov.w	ip, #10
 8016aa0:	4621      	mov	r1, r4
 8016aa2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016aa6:	3b30      	subs	r3, #48	; 0x30
 8016aa8:	2b09      	cmp	r3, #9
 8016aaa:	d94d      	bls.n	8016b48 <_svfiprintf_r+0x17c>
 8016aac:	b1b0      	cbz	r0, 8016adc <_svfiprintf_r+0x110>
 8016aae:	9207      	str	r2, [sp, #28]
 8016ab0:	e014      	b.n	8016adc <_svfiprintf_r+0x110>
 8016ab2:	eba0 0308 	sub.w	r3, r0, r8
 8016ab6:	fa09 f303 	lsl.w	r3, r9, r3
 8016aba:	4313      	orrs	r3, r2
 8016abc:	9304      	str	r3, [sp, #16]
 8016abe:	46a2      	mov	sl, r4
 8016ac0:	e7d2      	b.n	8016a68 <_svfiprintf_r+0x9c>
 8016ac2:	9b03      	ldr	r3, [sp, #12]
 8016ac4:	1d19      	adds	r1, r3, #4
 8016ac6:	681b      	ldr	r3, [r3, #0]
 8016ac8:	9103      	str	r1, [sp, #12]
 8016aca:	2b00      	cmp	r3, #0
 8016acc:	bfbb      	ittet	lt
 8016ace:	425b      	neglt	r3, r3
 8016ad0:	f042 0202 	orrlt.w	r2, r2, #2
 8016ad4:	9307      	strge	r3, [sp, #28]
 8016ad6:	9307      	strlt	r3, [sp, #28]
 8016ad8:	bfb8      	it	lt
 8016ada:	9204      	strlt	r2, [sp, #16]
 8016adc:	7823      	ldrb	r3, [r4, #0]
 8016ade:	2b2e      	cmp	r3, #46	; 0x2e
 8016ae0:	d10c      	bne.n	8016afc <_svfiprintf_r+0x130>
 8016ae2:	7863      	ldrb	r3, [r4, #1]
 8016ae4:	2b2a      	cmp	r3, #42	; 0x2a
 8016ae6:	d134      	bne.n	8016b52 <_svfiprintf_r+0x186>
 8016ae8:	9b03      	ldr	r3, [sp, #12]
 8016aea:	1d1a      	adds	r2, r3, #4
 8016aec:	681b      	ldr	r3, [r3, #0]
 8016aee:	9203      	str	r2, [sp, #12]
 8016af0:	2b00      	cmp	r3, #0
 8016af2:	bfb8      	it	lt
 8016af4:	f04f 33ff 	movlt.w	r3, #4294967295
 8016af8:	3402      	adds	r4, #2
 8016afa:	9305      	str	r3, [sp, #20]
 8016afc:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8016bc4 <_svfiprintf_r+0x1f8>
 8016b00:	7821      	ldrb	r1, [r4, #0]
 8016b02:	2203      	movs	r2, #3
 8016b04:	4650      	mov	r0, sl
 8016b06:	f7e9 fbeb 	bl	80002e0 <memchr>
 8016b0a:	b138      	cbz	r0, 8016b1c <_svfiprintf_r+0x150>
 8016b0c:	9b04      	ldr	r3, [sp, #16]
 8016b0e:	eba0 000a 	sub.w	r0, r0, sl
 8016b12:	2240      	movs	r2, #64	; 0x40
 8016b14:	4082      	lsls	r2, r0
 8016b16:	4313      	orrs	r3, r2
 8016b18:	3401      	adds	r4, #1
 8016b1a:	9304      	str	r3, [sp, #16]
 8016b1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016b20:	4825      	ldr	r0, [pc, #148]	; (8016bb8 <_svfiprintf_r+0x1ec>)
 8016b22:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016b26:	2206      	movs	r2, #6
 8016b28:	f7e9 fbda 	bl	80002e0 <memchr>
 8016b2c:	2800      	cmp	r0, #0
 8016b2e:	d038      	beq.n	8016ba2 <_svfiprintf_r+0x1d6>
 8016b30:	4b22      	ldr	r3, [pc, #136]	; (8016bbc <_svfiprintf_r+0x1f0>)
 8016b32:	bb1b      	cbnz	r3, 8016b7c <_svfiprintf_r+0x1b0>
 8016b34:	9b03      	ldr	r3, [sp, #12]
 8016b36:	3307      	adds	r3, #7
 8016b38:	f023 0307 	bic.w	r3, r3, #7
 8016b3c:	3308      	adds	r3, #8
 8016b3e:	9303      	str	r3, [sp, #12]
 8016b40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016b42:	4433      	add	r3, r6
 8016b44:	9309      	str	r3, [sp, #36]	; 0x24
 8016b46:	e768      	b.n	8016a1a <_svfiprintf_r+0x4e>
 8016b48:	fb0c 3202 	mla	r2, ip, r2, r3
 8016b4c:	460c      	mov	r4, r1
 8016b4e:	2001      	movs	r0, #1
 8016b50:	e7a6      	b.n	8016aa0 <_svfiprintf_r+0xd4>
 8016b52:	2300      	movs	r3, #0
 8016b54:	3401      	adds	r4, #1
 8016b56:	9305      	str	r3, [sp, #20]
 8016b58:	4619      	mov	r1, r3
 8016b5a:	f04f 0c0a 	mov.w	ip, #10
 8016b5e:	4620      	mov	r0, r4
 8016b60:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016b64:	3a30      	subs	r2, #48	; 0x30
 8016b66:	2a09      	cmp	r2, #9
 8016b68:	d903      	bls.n	8016b72 <_svfiprintf_r+0x1a6>
 8016b6a:	2b00      	cmp	r3, #0
 8016b6c:	d0c6      	beq.n	8016afc <_svfiprintf_r+0x130>
 8016b6e:	9105      	str	r1, [sp, #20]
 8016b70:	e7c4      	b.n	8016afc <_svfiprintf_r+0x130>
 8016b72:	fb0c 2101 	mla	r1, ip, r1, r2
 8016b76:	4604      	mov	r4, r0
 8016b78:	2301      	movs	r3, #1
 8016b7a:	e7f0      	b.n	8016b5e <_svfiprintf_r+0x192>
 8016b7c:	ab03      	add	r3, sp, #12
 8016b7e:	9300      	str	r3, [sp, #0]
 8016b80:	462a      	mov	r2, r5
 8016b82:	4b0f      	ldr	r3, [pc, #60]	; (8016bc0 <_svfiprintf_r+0x1f4>)
 8016b84:	a904      	add	r1, sp, #16
 8016b86:	4638      	mov	r0, r7
 8016b88:	f7fc fd82 	bl	8013690 <_printf_float>
 8016b8c:	1c42      	adds	r2, r0, #1
 8016b8e:	4606      	mov	r6, r0
 8016b90:	d1d6      	bne.n	8016b40 <_svfiprintf_r+0x174>
 8016b92:	89ab      	ldrh	r3, [r5, #12]
 8016b94:	065b      	lsls	r3, r3, #25
 8016b96:	f53f af2d 	bmi.w	80169f4 <_svfiprintf_r+0x28>
 8016b9a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016b9c:	b01d      	add	sp, #116	; 0x74
 8016b9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016ba2:	ab03      	add	r3, sp, #12
 8016ba4:	9300      	str	r3, [sp, #0]
 8016ba6:	462a      	mov	r2, r5
 8016ba8:	4b05      	ldr	r3, [pc, #20]	; (8016bc0 <_svfiprintf_r+0x1f4>)
 8016baa:	a904      	add	r1, sp, #16
 8016bac:	4638      	mov	r0, r7
 8016bae:	f7fc fff7 	bl	8013ba0 <_printf_i>
 8016bb2:	e7eb      	b.n	8016b8c <_svfiprintf_r+0x1c0>
 8016bb4:	08018071 	.word	0x08018071
 8016bb8:	0801807b 	.word	0x0801807b
 8016bbc:	08013691 	.word	0x08013691
 8016bc0:	08016919 	.word	0x08016919
 8016bc4:	08018077 	.word	0x08018077

08016bc8 <__sflush_r>:
 8016bc8:	898a      	ldrh	r2, [r1, #12]
 8016bca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016bce:	4605      	mov	r5, r0
 8016bd0:	0710      	lsls	r0, r2, #28
 8016bd2:	460c      	mov	r4, r1
 8016bd4:	d458      	bmi.n	8016c88 <__sflush_r+0xc0>
 8016bd6:	684b      	ldr	r3, [r1, #4]
 8016bd8:	2b00      	cmp	r3, #0
 8016bda:	dc05      	bgt.n	8016be8 <__sflush_r+0x20>
 8016bdc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8016bde:	2b00      	cmp	r3, #0
 8016be0:	dc02      	bgt.n	8016be8 <__sflush_r+0x20>
 8016be2:	2000      	movs	r0, #0
 8016be4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016be8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016bea:	2e00      	cmp	r6, #0
 8016bec:	d0f9      	beq.n	8016be2 <__sflush_r+0x1a>
 8016bee:	2300      	movs	r3, #0
 8016bf0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8016bf4:	682f      	ldr	r7, [r5, #0]
 8016bf6:	6a21      	ldr	r1, [r4, #32]
 8016bf8:	602b      	str	r3, [r5, #0]
 8016bfa:	d032      	beq.n	8016c62 <__sflush_r+0x9a>
 8016bfc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8016bfe:	89a3      	ldrh	r3, [r4, #12]
 8016c00:	075a      	lsls	r2, r3, #29
 8016c02:	d505      	bpl.n	8016c10 <__sflush_r+0x48>
 8016c04:	6863      	ldr	r3, [r4, #4]
 8016c06:	1ac0      	subs	r0, r0, r3
 8016c08:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016c0a:	b10b      	cbz	r3, 8016c10 <__sflush_r+0x48>
 8016c0c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8016c0e:	1ac0      	subs	r0, r0, r3
 8016c10:	2300      	movs	r3, #0
 8016c12:	4602      	mov	r2, r0
 8016c14:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016c16:	6a21      	ldr	r1, [r4, #32]
 8016c18:	4628      	mov	r0, r5
 8016c1a:	47b0      	blx	r6
 8016c1c:	1c43      	adds	r3, r0, #1
 8016c1e:	89a3      	ldrh	r3, [r4, #12]
 8016c20:	d106      	bne.n	8016c30 <__sflush_r+0x68>
 8016c22:	6829      	ldr	r1, [r5, #0]
 8016c24:	291d      	cmp	r1, #29
 8016c26:	d82b      	bhi.n	8016c80 <__sflush_r+0xb8>
 8016c28:	4a29      	ldr	r2, [pc, #164]	; (8016cd0 <__sflush_r+0x108>)
 8016c2a:	410a      	asrs	r2, r1
 8016c2c:	07d6      	lsls	r6, r2, #31
 8016c2e:	d427      	bmi.n	8016c80 <__sflush_r+0xb8>
 8016c30:	2200      	movs	r2, #0
 8016c32:	6062      	str	r2, [r4, #4]
 8016c34:	04d9      	lsls	r1, r3, #19
 8016c36:	6922      	ldr	r2, [r4, #16]
 8016c38:	6022      	str	r2, [r4, #0]
 8016c3a:	d504      	bpl.n	8016c46 <__sflush_r+0x7e>
 8016c3c:	1c42      	adds	r2, r0, #1
 8016c3e:	d101      	bne.n	8016c44 <__sflush_r+0x7c>
 8016c40:	682b      	ldr	r3, [r5, #0]
 8016c42:	b903      	cbnz	r3, 8016c46 <__sflush_r+0x7e>
 8016c44:	6560      	str	r0, [r4, #84]	; 0x54
 8016c46:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016c48:	602f      	str	r7, [r5, #0]
 8016c4a:	2900      	cmp	r1, #0
 8016c4c:	d0c9      	beq.n	8016be2 <__sflush_r+0x1a>
 8016c4e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016c52:	4299      	cmp	r1, r3
 8016c54:	d002      	beq.n	8016c5c <__sflush_r+0x94>
 8016c56:	4628      	mov	r0, r5
 8016c58:	f7fe fb12 	bl	8015280 <_free_r>
 8016c5c:	2000      	movs	r0, #0
 8016c5e:	6360      	str	r0, [r4, #52]	; 0x34
 8016c60:	e7c0      	b.n	8016be4 <__sflush_r+0x1c>
 8016c62:	2301      	movs	r3, #1
 8016c64:	4628      	mov	r0, r5
 8016c66:	47b0      	blx	r6
 8016c68:	1c41      	adds	r1, r0, #1
 8016c6a:	d1c8      	bne.n	8016bfe <__sflush_r+0x36>
 8016c6c:	682b      	ldr	r3, [r5, #0]
 8016c6e:	2b00      	cmp	r3, #0
 8016c70:	d0c5      	beq.n	8016bfe <__sflush_r+0x36>
 8016c72:	2b1d      	cmp	r3, #29
 8016c74:	d001      	beq.n	8016c7a <__sflush_r+0xb2>
 8016c76:	2b16      	cmp	r3, #22
 8016c78:	d101      	bne.n	8016c7e <__sflush_r+0xb6>
 8016c7a:	602f      	str	r7, [r5, #0]
 8016c7c:	e7b1      	b.n	8016be2 <__sflush_r+0x1a>
 8016c7e:	89a3      	ldrh	r3, [r4, #12]
 8016c80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016c84:	81a3      	strh	r3, [r4, #12]
 8016c86:	e7ad      	b.n	8016be4 <__sflush_r+0x1c>
 8016c88:	690f      	ldr	r7, [r1, #16]
 8016c8a:	2f00      	cmp	r7, #0
 8016c8c:	d0a9      	beq.n	8016be2 <__sflush_r+0x1a>
 8016c8e:	0793      	lsls	r3, r2, #30
 8016c90:	680e      	ldr	r6, [r1, #0]
 8016c92:	bf08      	it	eq
 8016c94:	694b      	ldreq	r3, [r1, #20]
 8016c96:	600f      	str	r7, [r1, #0]
 8016c98:	bf18      	it	ne
 8016c9a:	2300      	movne	r3, #0
 8016c9c:	eba6 0807 	sub.w	r8, r6, r7
 8016ca0:	608b      	str	r3, [r1, #8]
 8016ca2:	f1b8 0f00 	cmp.w	r8, #0
 8016ca6:	dd9c      	ble.n	8016be2 <__sflush_r+0x1a>
 8016ca8:	6a21      	ldr	r1, [r4, #32]
 8016caa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8016cac:	4643      	mov	r3, r8
 8016cae:	463a      	mov	r2, r7
 8016cb0:	4628      	mov	r0, r5
 8016cb2:	47b0      	blx	r6
 8016cb4:	2800      	cmp	r0, #0
 8016cb6:	dc06      	bgt.n	8016cc6 <__sflush_r+0xfe>
 8016cb8:	89a3      	ldrh	r3, [r4, #12]
 8016cba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016cbe:	81a3      	strh	r3, [r4, #12]
 8016cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8016cc4:	e78e      	b.n	8016be4 <__sflush_r+0x1c>
 8016cc6:	4407      	add	r7, r0
 8016cc8:	eba8 0800 	sub.w	r8, r8, r0
 8016ccc:	e7e9      	b.n	8016ca2 <__sflush_r+0xda>
 8016cce:	bf00      	nop
 8016cd0:	dfbffffe 	.word	0xdfbffffe

08016cd4 <_fflush_r>:
 8016cd4:	b538      	push	{r3, r4, r5, lr}
 8016cd6:	690b      	ldr	r3, [r1, #16]
 8016cd8:	4605      	mov	r5, r0
 8016cda:	460c      	mov	r4, r1
 8016cdc:	b913      	cbnz	r3, 8016ce4 <_fflush_r+0x10>
 8016cde:	2500      	movs	r5, #0
 8016ce0:	4628      	mov	r0, r5
 8016ce2:	bd38      	pop	{r3, r4, r5, pc}
 8016ce4:	b118      	cbz	r0, 8016cee <_fflush_r+0x1a>
 8016ce6:	6a03      	ldr	r3, [r0, #32]
 8016ce8:	b90b      	cbnz	r3, 8016cee <_fflush_r+0x1a>
 8016cea:	f7fd fb0b 	bl	8014304 <__sinit>
 8016cee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016cf2:	2b00      	cmp	r3, #0
 8016cf4:	d0f3      	beq.n	8016cde <_fflush_r+0xa>
 8016cf6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8016cf8:	07d0      	lsls	r0, r2, #31
 8016cfa:	d404      	bmi.n	8016d06 <_fflush_r+0x32>
 8016cfc:	0599      	lsls	r1, r3, #22
 8016cfe:	d402      	bmi.n	8016d06 <_fflush_r+0x32>
 8016d00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016d02:	f7fd fcb0 	bl	8014666 <__retarget_lock_acquire_recursive>
 8016d06:	4628      	mov	r0, r5
 8016d08:	4621      	mov	r1, r4
 8016d0a:	f7ff ff5d 	bl	8016bc8 <__sflush_r>
 8016d0e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016d10:	07da      	lsls	r2, r3, #31
 8016d12:	4605      	mov	r5, r0
 8016d14:	d4e4      	bmi.n	8016ce0 <_fflush_r+0xc>
 8016d16:	89a3      	ldrh	r3, [r4, #12]
 8016d18:	059b      	lsls	r3, r3, #22
 8016d1a:	d4e1      	bmi.n	8016ce0 <_fflush_r+0xc>
 8016d1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016d1e:	f7fd fca3 	bl	8014668 <__retarget_lock_release_recursive>
 8016d22:	e7dd      	b.n	8016ce0 <_fflush_r+0xc>

08016d24 <memmove>:
 8016d24:	4288      	cmp	r0, r1
 8016d26:	b510      	push	{r4, lr}
 8016d28:	eb01 0402 	add.w	r4, r1, r2
 8016d2c:	d902      	bls.n	8016d34 <memmove+0x10>
 8016d2e:	4284      	cmp	r4, r0
 8016d30:	4623      	mov	r3, r4
 8016d32:	d807      	bhi.n	8016d44 <memmove+0x20>
 8016d34:	1e43      	subs	r3, r0, #1
 8016d36:	42a1      	cmp	r1, r4
 8016d38:	d008      	beq.n	8016d4c <memmove+0x28>
 8016d3a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016d3e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8016d42:	e7f8      	b.n	8016d36 <memmove+0x12>
 8016d44:	4402      	add	r2, r0
 8016d46:	4601      	mov	r1, r0
 8016d48:	428a      	cmp	r2, r1
 8016d4a:	d100      	bne.n	8016d4e <memmove+0x2a>
 8016d4c:	bd10      	pop	{r4, pc}
 8016d4e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8016d52:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8016d56:	e7f7      	b.n	8016d48 <memmove+0x24>

08016d58 <strncmp>:
 8016d58:	b510      	push	{r4, lr}
 8016d5a:	b16a      	cbz	r2, 8016d78 <strncmp+0x20>
 8016d5c:	3901      	subs	r1, #1
 8016d5e:	1884      	adds	r4, r0, r2
 8016d60:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016d64:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8016d68:	429a      	cmp	r2, r3
 8016d6a:	d103      	bne.n	8016d74 <strncmp+0x1c>
 8016d6c:	42a0      	cmp	r0, r4
 8016d6e:	d001      	beq.n	8016d74 <strncmp+0x1c>
 8016d70:	2a00      	cmp	r2, #0
 8016d72:	d1f5      	bne.n	8016d60 <strncmp+0x8>
 8016d74:	1ad0      	subs	r0, r2, r3
 8016d76:	bd10      	pop	{r4, pc}
 8016d78:	4610      	mov	r0, r2
 8016d7a:	e7fc      	b.n	8016d76 <strncmp+0x1e>
 8016d7c:	0000      	movs	r0, r0
	...

08016d80 <nan>:
 8016d80:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8016d88 <nan+0x8>
 8016d84:	4770      	bx	lr
 8016d86:	bf00      	nop
 8016d88:	00000000 	.word	0x00000000
 8016d8c:	7ff80000 	.word	0x7ff80000

08016d90 <__assert_func>:
 8016d90:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8016d92:	4614      	mov	r4, r2
 8016d94:	461a      	mov	r2, r3
 8016d96:	4b09      	ldr	r3, [pc, #36]	; (8016dbc <__assert_func+0x2c>)
 8016d98:	681b      	ldr	r3, [r3, #0]
 8016d9a:	4605      	mov	r5, r0
 8016d9c:	68d8      	ldr	r0, [r3, #12]
 8016d9e:	b14c      	cbz	r4, 8016db4 <__assert_func+0x24>
 8016da0:	4b07      	ldr	r3, [pc, #28]	; (8016dc0 <__assert_func+0x30>)
 8016da2:	9100      	str	r1, [sp, #0]
 8016da4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8016da8:	4906      	ldr	r1, [pc, #24]	; (8016dc4 <__assert_func+0x34>)
 8016daa:	462b      	mov	r3, r5
 8016dac:	f000 fbca 	bl	8017544 <fiprintf>
 8016db0:	f000 fbda 	bl	8017568 <abort>
 8016db4:	4b04      	ldr	r3, [pc, #16]	; (8016dc8 <__assert_func+0x38>)
 8016db6:	461c      	mov	r4, r3
 8016db8:	e7f3      	b.n	8016da2 <__assert_func+0x12>
 8016dba:	bf00      	nop
 8016dbc:	2400006c 	.word	0x2400006c
 8016dc0:	0801808a 	.word	0x0801808a
 8016dc4:	08018097 	.word	0x08018097
 8016dc8:	080180c5 	.word	0x080180c5

08016dcc <_calloc_r>:
 8016dcc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016dce:	fba1 2402 	umull	r2, r4, r1, r2
 8016dd2:	b94c      	cbnz	r4, 8016de8 <_calloc_r+0x1c>
 8016dd4:	4611      	mov	r1, r2
 8016dd6:	9201      	str	r2, [sp, #4]
 8016dd8:	f7fc fb3c 	bl	8013454 <_malloc_r>
 8016ddc:	9a01      	ldr	r2, [sp, #4]
 8016dde:	4605      	mov	r5, r0
 8016de0:	b930      	cbnz	r0, 8016df0 <_calloc_r+0x24>
 8016de2:	4628      	mov	r0, r5
 8016de4:	b003      	add	sp, #12
 8016de6:	bd30      	pop	{r4, r5, pc}
 8016de8:	220c      	movs	r2, #12
 8016dea:	6002      	str	r2, [r0, #0]
 8016dec:	2500      	movs	r5, #0
 8016dee:	e7f8      	b.n	8016de2 <_calloc_r+0x16>
 8016df0:	4621      	mov	r1, r4
 8016df2:	f7fd fb54 	bl	801449e <memset>
 8016df6:	e7f4      	b.n	8016de2 <_calloc_r+0x16>

08016df8 <rshift>:
 8016df8:	6903      	ldr	r3, [r0, #16]
 8016dfa:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8016dfe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016e02:	ea4f 1261 	mov.w	r2, r1, asr #5
 8016e06:	f100 0414 	add.w	r4, r0, #20
 8016e0a:	dd45      	ble.n	8016e98 <rshift+0xa0>
 8016e0c:	f011 011f 	ands.w	r1, r1, #31
 8016e10:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8016e14:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8016e18:	d10c      	bne.n	8016e34 <rshift+0x3c>
 8016e1a:	f100 0710 	add.w	r7, r0, #16
 8016e1e:	4629      	mov	r1, r5
 8016e20:	42b1      	cmp	r1, r6
 8016e22:	d334      	bcc.n	8016e8e <rshift+0x96>
 8016e24:	1a9b      	subs	r3, r3, r2
 8016e26:	009b      	lsls	r3, r3, #2
 8016e28:	1eea      	subs	r2, r5, #3
 8016e2a:	4296      	cmp	r6, r2
 8016e2c:	bf38      	it	cc
 8016e2e:	2300      	movcc	r3, #0
 8016e30:	4423      	add	r3, r4
 8016e32:	e015      	b.n	8016e60 <rshift+0x68>
 8016e34:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8016e38:	f1c1 0820 	rsb	r8, r1, #32
 8016e3c:	40cf      	lsrs	r7, r1
 8016e3e:	f105 0e04 	add.w	lr, r5, #4
 8016e42:	46a1      	mov	r9, r4
 8016e44:	4576      	cmp	r6, lr
 8016e46:	46f4      	mov	ip, lr
 8016e48:	d815      	bhi.n	8016e76 <rshift+0x7e>
 8016e4a:	1a9a      	subs	r2, r3, r2
 8016e4c:	0092      	lsls	r2, r2, #2
 8016e4e:	3a04      	subs	r2, #4
 8016e50:	3501      	adds	r5, #1
 8016e52:	42ae      	cmp	r6, r5
 8016e54:	bf38      	it	cc
 8016e56:	2200      	movcc	r2, #0
 8016e58:	18a3      	adds	r3, r4, r2
 8016e5a:	50a7      	str	r7, [r4, r2]
 8016e5c:	b107      	cbz	r7, 8016e60 <rshift+0x68>
 8016e5e:	3304      	adds	r3, #4
 8016e60:	1b1a      	subs	r2, r3, r4
 8016e62:	42a3      	cmp	r3, r4
 8016e64:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8016e68:	bf08      	it	eq
 8016e6a:	2300      	moveq	r3, #0
 8016e6c:	6102      	str	r2, [r0, #16]
 8016e6e:	bf08      	it	eq
 8016e70:	6143      	streq	r3, [r0, #20]
 8016e72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016e76:	f8dc c000 	ldr.w	ip, [ip]
 8016e7a:	fa0c fc08 	lsl.w	ip, ip, r8
 8016e7e:	ea4c 0707 	orr.w	r7, ip, r7
 8016e82:	f849 7b04 	str.w	r7, [r9], #4
 8016e86:	f85e 7b04 	ldr.w	r7, [lr], #4
 8016e8a:	40cf      	lsrs	r7, r1
 8016e8c:	e7da      	b.n	8016e44 <rshift+0x4c>
 8016e8e:	f851 cb04 	ldr.w	ip, [r1], #4
 8016e92:	f847 cf04 	str.w	ip, [r7, #4]!
 8016e96:	e7c3      	b.n	8016e20 <rshift+0x28>
 8016e98:	4623      	mov	r3, r4
 8016e9a:	e7e1      	b.n	8016e60 <rshift+0x68>

08016e9c <__hexdig_fun>:
 8016e9c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8016ea0:	2b09      	cmp	r3, #9
 8016ea2:	d802      	bhi.n	8016eaa <__hexdig_fun+0xe>
 8016ea4:	3820      	subs	r0, #32
 8016ea6:	b2c0      	uxtb	r0, r0
 8016ea8:	4770      	bx	lr
 8016eaa:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8016eae:	2b05      	cmp	r3, #5
 8016eb0:	d801      	bhi.n	8016eb6 <__hexdig_fun+0x1a>
 8016eb2:	3847      	subs	r0, #71	; 0x47
 8016eb4:	e7f7      	b.n	8016ea6 <__hexdig_fun+0xa>
 8016eb6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8016eba:	2b05      	cmp	r3, #5
 8016ebc:	d801      	bhi.n	8016ec2 <__hexdig_fun+0x26>
 8016ebe:	3827      	subs	r0, #39	; 0x27
 8016ec0:	e7f1      	b.n	8016ea6 <__hexdig_fun+0xa>
 8016ec2:	2000      	movs	r0, #0
 8016ec4:	4770      	bx	lr
	...

08016ec8 <__gethex>:
 8016ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ecc:	4617      	mov	r7, r2
 8016ece:	680a      	ldr	r2, [r1, #0]
 8016ed0:	b085      	sub	sp, #20
 8016ed2:	f102 0b02 	add.w	fp, r2, #2
 8016ed6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8016eda:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8016ede:	4681      	mov	r9, r0
 8016ee0:	468a      	mov	sl, r1
 8016ee2:	9302      	str	r3, [sp, #8]
 8016ee4:	32fe      	adds	r2, #254	; 0xfe
 8016ee6:	eb02 030b 	add.w	r3, r2, fp
 8016eea:	46d8      	mov	r8, fp
 8016eec:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8016ef0:	9301      	str	r3, [sp, #4]
 8016ef2:	2830      	cmp	r0, #48	; 0x30
 8016ef4:	d0f7      	beq.n	8016ee6 <__gethex+0x1e>
 8016ef6:	f7ff ffd1 	bl	8016e9c <__hexdig_fun>
 8016efa:	4604      	mov	r4, r0
 8016efc:	2800      	cmp	r0, #0
 8016efe:	d138      	bne.n	8016f72 <__gethex+0xaa>
 8016f00:	49a7      	ldr	r1, [pc, #668]	; (80171a0 <__gethex+0x2d8>)
 8016f02:	2201      	movs	r2, #1
 8016f04:	4640      	mov	r0, r8
 8016f06:	f7ff ff27 	bl	8016d58 <strncmp>
 8016f0a:	4606      	mov	r6, r0
 8016f0c:	2800      	cmp	r0, #0
 8016f0e:	d169      	bne.n	8016fe4 <__gethex+0x11c>
 8016f10:	f898 0001 	ldrb.w	r0, [r8, #1]
 8016f14:	465d      	mov	r5, fp
 8016f16:	f7ff ffc1 	bl	8016e9c <__hexdig_fun>
 8016f1a:	2800      	cmp	r0, #0
 8016f1c:	d064      	beq.n	8016fe8 <__gethex+0x120>
 8016f1e:	465a      	mov	r2, fp
 8016f20:	7810      	ldrb	r0, [r2, #0]
 8016f22:	2830      	cmp	r0, #48	; 0x30
 8016f24:	4690      	mov	r8, r2
 8016f26:	f102 0201 	add.w	r2, r2, #1
 8016f2a:	d0f9      	beq.n	8016f20 <__gethex+0x58>
 8016f2c:	f7ff ffb6 	bl	8016e9c <__hexdig_fun>
 8016f30:	2301      	movs	r3, #1
 8016f32:	fab0 f480 	clz	r4, r0
 8016f36:	0964      	lsrs	r4, r4, #5
 8016f38:	465e      	mov	r6, fp
 8016f3a:	9301      	str	r3, [sp, #4]
 8016f3c:	4642      	mov	r2, r8
 8016f3e:	4615      	mov	r5, r2
 8016f40:	3201      	adds	r2, #1
 8016f42:	7828      	ldrb	r0, [r5, #0]
 8016f44:	f7ff ffaa 	bl	8016e9c <__hexdig_fun>
 8016f48:	2800      	cmp	r0, #0
 8016f4a:	d1f8      	bne.n	8016f3e <__gethex+0x76>
 8016f4c:	4994      	ldr	r1, [pc, #592]	; (80171a0 <__gethex+0x2d8>)
 8016f4e:	2201      	movs	r2, #1
 8016f50:	4628      	mov	r0, r5
 8016f52:	f7ff ff01 	bl	8016d58 <strncmp>
 8016f56:	b978      	cbnz	r0, 8016f78 <__gethex+0xb0>
 8016f58:	b946      	cbnz	r6, 8016f6c <__gethex+0xa4>
 8016f5a:	1c6e      	adds	r6, r5, #1
 8016f5c:	4632      	mov	r2, r6
 8016f5e:	4615      	mov	r5, r2
 8016f60:	3201      	adds	r2, #1
 8016f62:	7828      	ldrb	r0, [r5, #0]
 8016f64:	f7ff ff9a 	bl	8016e9c <__hexdig_fun>
 8016f68:	2800      	cmp	r0, #0
 8016f6a:	d1f8      	bne.n	8016f5e <__gethex+0x96>
 8016f6c:	1b73      	subs	r3, r6, r5
 8016f6e:	009e      	lsls	r6, r3, #2
 8016f70:	e004      	b.n	8016f7c <__gethex+0xb4>
 8016f72:	2400      	movs	r4, #0
 8016f74:	4626      	mov	r6, r4
 8016f76:	e7e1      	b.n	8016f3c <__gethex+0x74>
 8016f78:	2e00      	cmp	r6, #0
 8016f7a:	d1f7      	bne.n	8016f6c <__gethex+0xa4>
 8016f7c:	782b      	ldrb	r3, [r5, #0]
 8016f7e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8016f82:	2b50      	cmp	r3, #80	; 0x50
 8016f84:	d13d      	bne.n	8017002 <__gethex+0x13a>
 8016f86:	786b      	ldrb	r3, [r5, #1]
 8016f88:	2b2b      	cmp	r3, #43	; 0x2b
 8016f8a:	d02f      	beq.n	8016fec <__gethex+0x124>
 8016f8c:	2b2d      	cmp	r3, #45	; 0x2d
 8016f8e:	d031      	beq.n	8016ff4 <__gethex+0x12c>
 8016f90:	1c69      	adds	r1, r5, #1
 8016f92:	f04f 0b00 	mov.w	fp, #0
 8016f96:	7808      	ldrb	r0, [r1, #0]
 8016f98:	f7ff ff80 	bl	8016e9c <__hexdig_fun>
 8016f9c:	1e42      	subs	r2, r0, #1
 8016f9e:	b2d2      	uxtb	r2, r2
 8016fa0:	2a18      	cmp	r2, #24
 8016fa2:	d82e      	bhi.n	8017002 <__gethex+0x13a>
 8016fa4:	f1a0 0210 	sub.w	r2, r0, #16
 8016fa8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8016fac:	f7ff ff76 	bl	8016e9c <__hexdig_fun>
 8016fb0:	f100 3cff 	add.w	ip, r0, #4294967295
 8016fb4:	fa5f fc8c 	uxtb.w	ip, ip
 8016fb8:	f1bc 0f18 	cmp.w	ip, #24
 8016fbc:	d91d      	bls.n	8016ffa <__gethex+0x132>
 8016fbe:	f1bb 0f00 	cmp.w	fp, #0
 8016fc2:	d000      	beq.n	8016fc6 <__gethex+0xfe>
 8016fc4:	4252      	negs	r2, r2
 8016fc6:	4416      	add	r6, r2
 8016fc8:	f8ca 1000 	str.w	r1, [sl]
 8016fcc:	b1dc      	cbz	r4, 8017006 <__gethex+0x13e>
 8016fce:	9b01      	ldr	r3, [sp, #4]
 8016fd0:	2b00      	cmp	r3, #0
 8016fd2:	bf14      	ite	ne
 8016fd4:	f04f 0800 	movne.w	r8, #0
 8016fd8:	f04f 0806 	moveq.w	r8, #6
 8016fdc:	4640      	mov	r0, r8
 8016fde:	b005      	add	sp, #20
 8016fe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016fe4:	4645      	mov	r5, r8
 8016fe6:	4626      	mov	r6, r4
 8016fe8:	2401      	movs	r4, #1
 8016fea:	e7c7      	b.n	8016f7c <__gethex+0xb4>
 8016fec:	f04f 0b00 	mov.w	fp, #0
 8016ff0:	1ca9      	adds	r1, r5, #2
 8016ff2:	e7d0      	b.n	8016f96 <__gethex+0xce>
 8016ff4:	f04f 0b01 	mov.w	fp, #1
 8016ff8:	e7fa      	b.n	8016ff0 <__gethex+0x128>
 8016ffa:	230a      	movs	r3, #10
 8016ffc:	fb03 0002 	mla	r0, r3, r2, r0
 8017000:	e7d0      	b.n	8016fa4 <__gethex+0xdc>
 8017002:	4629      	mov	r1, r5
 8017004:	e7e0      	b.n	8016fc8 <__gethex+0x100>
 8017006:	eba5 0308 	sub.w	r3, r5, r8
 801700a:	3b01      	subs	r3, #1
 801700c:	4621      	mov	r1, r4
 801700e:	2b07      	cmp	r3, #7
 8017010:	dc0a      	bgt.n	8017028 <__gethex+0x160>
 8017012:	4648      	mov	r0, r9
 8017014:	f7fe f980 	bl	8015318 <_Balloc>
 8017018:	4604      	mov	r4, r0
 801701a:	b940      	cbnz	r0, 801702e <__gethex+0x166>
 801701c:	4b61      	ldr	r3, [pc, #388]	; (80171a4 <__gethex+0x2dc>)
 801701e:	4602      	mov	r2, r0
 8017020:	21e4      	movs	r1, #228	; 0xe4
 8017022:	4861      	ldr	r0, [pc, #388]	; (80171a8 <__gethex+0x2e0>)
 8017024:	f7ff feb4 	bl	8016d90 <__assert_func>
 8017028:	3101      	adds	r1, #1
 801702a:	105b      	asrs	r3, r3, #1
 801702c:	e7ef      	b.n	801700e <__gethex+0x146>
 801702e:	f100 0a14 	add.w	sl, r0, #20
 8017032:	2300      	movs	r3, #0
 8017034:	495a      	ldr	r1, [pc, #360]	; (80171a0 <__gethex+0x2d8>)
 8017036:	f8cd a004 	str.w	sl, [sp, #4]
 801703a:	469b      	mov	fp, r3
 801703c:	45a8      	cmp	r8, r5
 801703e:	d342      	bcc.n	80170c6 <__gethex+0x1fe>
 8017040:	9801      	ldr	r0, [sp, #4]
 8017042:	f840 bb04 	str.w	fp, [r0], #4
 8017046:	eba0 000a 	sub.w	r0, r0, sl
 801704a:	1080      	asrs	r0, r0, #2
 801704c:	6120      	str	r0, [r4, #16]
 801704e:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8017052:	4658      	mov	r0, fp
 8017054:	f7fe fa52 	bl	80154fc <__hi0bits>
 8017058:	683d      	ldr	r5, [r7, #0]
 801705a:	eba8 0000 	sub.w	r0, r8, r0
 801705e:	42a8      	cmp	r0, r5
 8017060:	dd59      	ble.n	8017116 <__gethex+0x24e>
 8017062:	eba0 0805 	sub.w	r8, r0, r5
 8017066:	4641      	mov	r1, r8
 8017068:	4620      	mov	r0, r4
 801706a:	f7fe fdde 	bl	8015c2a <__any_on>
 801706e:	4683      	mov	fp, r0
 8017070:	b1b8      	cbz	r0, 80170a2 <__gethex+0x1da>
 8017072:	f108 33ff 	add.w	r3, r8, #4294967295
 8017076:	1159      	asrs	r1, r3, #5
 8017078:	f003 021f 	and.w	r2, r3, #31
 801707c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8017080:	f04f 0b01 	mov.w	fp, #1
 8017084:	fa0b f202 	lsl.w	r2, fp, r2
 8017088:	420a      	tst	r2, r1
 801708a:	d00a      	beq.n	80170a2 <__gethex+0x1da>
 801708c:	455b      	cmp	r3, fp
 801708e:	dd06      	ble.n	801709e <__gethex+0x1d6>
 8017090:	f1a8 0102 	sub.w	r1, r8, #2
 8017094:	4620      	mov	r0, r4
 8017096:	f7fe fdc8 	bl	8015c2a <__any_on>
 801709a:	2800      	cmp	r0, #0
 801709c:	d138      	bne.n	8017110 <__gethex+0x248>
 801709e:	f04f 0b02 	mov.w	fp, #2
 80170a2:	4641      	mov	r1, r8
 80170a4:	4620      	mov	r0, r4
 80170a6:	f7ff fea7 	bl	8016df8 <rshift>
 80170aa:	4446      	add	r6, r8
 80170ac:	68bb      	ldr	r3, [r7, #8]
 80170ae:	42b3      	cmp	r3, r6
 80170b0:	da41      	bge.n	8017136 <__gethex+0x26e>
 80170b2:	4621      	mov	r1, r4
 80170b4:	4648      	mov	r0, r9
 80170b6:	f7fe f96f 	bl	8015398 <_Bfree>
 80170ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80170bc:	2300      	movs	r3, #0
 80170be:	6013      	str	r3, [r2, #0]
 80170c0:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 80170c4:	e78a      	b.n	8016fdc <__gethex+0x114>
 80170c6:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 80170ca:	2a2e      	cmp	r2, #46	; 0x2e
 80170cc:	d014      	beq.n	80170f8 <__gethex+0x230>
 80170ce:	2b20      	cmp	r3, #32
 80170d0:	d106      	bne.n	80170e0 <__gethex+0x218>
 80170d2:	9b01      	ldr	r3, [sp, #4]
 80170d4:	f843 bb04 	str.w	fp, [r3], #4
 80170d8:	f04f 0b00 	mov.w	fp, #0
 80170dc:	9301      	str	r3, [sp, #4]
 80170de:	465b      	mov	r3, fp
 80170e0:	7828      	ldrb	r0, [r5, #0]
 80170e2:	9303      	str	r3, [sp, #12]
 80170e4:	f7ff feda 	bl	8016e9c <__hexdig_fun>
 80170e8:	9b03      	ldr	r3, [sp, #12]
 80170ea:	f000 000f 	and.w	r0, r0, #15
 80170ee:	4098      	lsls	r0, r3
 80170f0:	ea4b 0b00 	orr.w	fp, fp, r0
 80170f4:	3304      	adds	r3, #4
 80170f6:	e7a1      	b.n	801703c <__gethex+0x174>
 80170f8:	45a8      	cmp	r8, r5
 80170fa:	d8e8      	bhi.n	80170ce <__gethex+0x206>
 80170fc:	2201      	movs	r2, #1
 80170fe:	4628      	mov	r0, r5
 8017100:	9303      	str	r3, [sp, #12]
 8017102:	f7ff fe29 	bl	8016d58 <strncmp>
 8017106:	4926      	ldr	r1, [pc, #152]	; (80171a0 <__gethex+0x2d8>)
 8017108:	9b03      	ldr	r3, [sp, #12]
 801710a:	2800      	cmp	r0, #0
 801710c:	d1df      	bne.n	80170ce <__gethex+0x206>
 801710e:	e795      	b.n	801703c <__gethex+0x174>
 8017110:	f04f 0b03 	mov.w	fp, #3
 8017114:	e7c5      	b.n	80170a2 <__gethex+0x1da>
 8017116:	da0b      	bge.n	8017130 <__gethex+0x268>
 8017118:	eba5 0800 	sub.w	r8, r5, r0
 801711c:	4621      	mov	r1, r4
 801711e:	4642      	mov	r2, r8
 8017120:	4648      	mov	r0, r9
 8017122:	f7fe fb53 	bl	80157cc <__lshift>
 8017126:	eba6 0608 	sub.w	r6, r6, r8
 801712a:	4604      	mov	r4, r0
 801712c:	f100 0a14 	add.w	sl, r0, #20
 8017130:	f04f 0b00 	mov.w	fp, #0
 8017134:	e7ba      	b.n	80170ac <__gethex+0x1e4>
 8017136:	687b      	ldr	r3, [r7, #4]
 8017138:	42b3      	cmp	r3, r6
 801713a:	dd73      	ble.n	8017224 <__gethex+0x35c>
 801713c:	1b9e      	subs	r6, r3, r6
 801713e:	42b5      	cmp	r5, r6
 8017140:	dc34      	bgt.n	80171ac <__gethex+0x2e4>
 8017142:	68fb      	ldr	r3, [r7, #12]
 8017144:	2b02      	cmp	r3, #2
 8017146:	d023      	beq.n	8017190 <__gethex+0x2c8>
 8017148:	2b03      	cmp	r3, #3
 801714a:	d025      	beq.n	8017198 <__gethex+0x2d0>
 801714c:	2b01      	cmp	r3, #1
 801714e:	d115      	bne.n	801717c <__gethex+0x2b4>
 8017150:	42b5      	cmp	r5, r6
 8017152:	d113      	bne.n	801717c <__gethex+0x2b4>
 8017154:	2d01      	cmp	r5, #1
 8017156:	d10b      	bne.n	8017170 <__gethex+0x2a8>
 8017158:	9a02      	ldr	r2, [sp, #8]
 801715a:	687b      	ldr	r3, [r7, #4]
 801715c:	6013      	str	r3, [r2, #0]
 801715e:	2301      	movs	r3, #1
 8017160:	6123      	str	r3, [r4, #16]
 8017162:	f8ca 3000 	str.w	r3, [sl]
 8017166:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017168:	f04f 0862 	mov.w	r8, #98	; 0x62
 801716c:	601c      	str	r4, [r3, #0]
 801716e:	e735      	b.n	8016fdc <__gethex+0x114>
 8017170:	1e69      	subs	r1, r5, #1
 8017172:	4620      	mov	r0, r4
 8017174:	f7fe fd59 	bl	8015c2a <__any_on>
 8017178:	2800      	cmp	r0, #0
 801717a:	d1ed      	bne.n	8017158 <__gethex+0x290>
 801717c:	4621      	mov	r1, r4
 801717e:	4648      	mov	r0, r9
 8017180:	f7fe f90a 	bl	8015398 <_Bfree>
 8017184:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8017186:	2300      	movs	r3, #0
 8017188:	6013      	str	r3, [r2, #0]
 801718a:	f04f 0850 	mov.w	r8, #80	; 0x50
 801718e:	e725      	b.n	8016fdc <__gethex+0x114>
 8017190:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017192:	2b00      	cmp	r3, #0
 8017194:	d1f2      	bne.n	801717c <__gethex+0x2b4>
 8017196:	e7df      	b.n	8017158 <__gethex+0x290>
 8017198:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801719a:	2b00      	cmp	r3, #0
 801719c:	d1dc      	bne.n	8017158 <__gethex+0x290>
 801719e:	e7ed      	b.n	801717c <__gethex+0x2b4>
 80171a0:	08017f1c 	.word	0x08017f1c
 80171a4:	08017db1 	.word	0x08017db1
 80171a8:	080180c6 	.word	0x080180c6
 80171ac:	f106 38ff 	add.w	r8, r6, #4294967295
 80171b0:	f1bb 0f00 	cmp.w	fp, #0
 80171b4:	d133      	bne.n	801721e <__gethex+0x356>
 80171b6:	f1b8 0f00 	cmp.w	r8, #0
 80171ba:	d004      	beq.n	80171c6 <__gethex+0x2fe>
 80171bc:	4641      	mov	r1, r8
 80171be:	4620      	mov	r0, r4
 80171c0:	f7fe fd33 	bl	8015c2a <__any_on>
 80171c4:	4683      	mov	fp, r0
 80171c6:	ea4f 1268 	mov.w	r2, r8, asr #5
 80171ca:	2301      	movs	r3, #1
 80171cc:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80171d0:	f008 081f 	and.w	r8, r8, #31
 80171d4:	fa03 f308 	lsl.w	r3, r3, r8
 80171d8:	4213      	tst	r3, r2
 80171da:	4631      	mov	r1, r6
 80171dc:	4620      	mov	r0, r4
 80171de:	bf18      	it	ne
 80171e0:	f04b 0b02 	orrne.w	fp, fp, #2
 80171e4:	1bad      	subs	r5, r5, r6
 80171e6:	f7ff fe07 	bl	8016df8 <rshift>
 80171ea:	687e      	ldr	r6, [r7, #4]
 80171ec:	f04f 0802 	mov.w	r8, #2
 80171f0:	f1bb 0f00 	cmp.w	fp, #0
 80171f4:	d04a      	beq.n	801728c <__gethex+0x3c4>
 80171f6:	68fb      	ldr	r3, [r7, #12]
 80171f8:	2b02      	cmp	r3, #2
 80171fa:	d016      	beq.n	801722a <__gethex+0x362>
 80171fc:	2b03      	cmp	r3, #3
 80171fe:	d018      	beq.n	8017232 <__gethex+0x36a>
 8017200:	2b01      	cmp	r3, #1
 8017202:	d109      	bne.n	8017218 <__gethex+0x350>
 8017204:	f01b 0f02 	tst.w	fp, #2
 8017208:	d006      	beq.n	8017218 <__gethex+0x350>
 801720a:	f8da 3000 	ldr.w	r3, [sl]
 801720e:	ea4b 0b03 	orr.w	fp, fp, r3
 8017212:	f01b 0f01 	tst.w	fp, #1
 8017216:	d10f      	bne.n	8017238 <__gethex+0x370>
 8017218:	f048 0810 	orr.w	r8, r8, #16
 801721c:	e036      	b.n	801728c <__gethex+0x3c4>
 801721e:	f04f 0b01 	mov.w	fp, #1
 8017222:	e7d0      	b.n	80171c6 <__gethex+0x2fe>
 8017224:	f04f 0801 	mov.w	r8, #1
 8017228:	e7e2      	b.n	80171f0 <__gethex+0x328>
 801722a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801722c:	f1c3 0301 	rsb	r3, r3, #1
 8017230:	930f      	str	r3, [sp, #60]	; 0x3c
 8017232:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017234:	2b00      	cmp	r3, #0
 8017236:	d0ef      	beq.n	8017218 <__gethex+0x350>
 8017238:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801723c:	f104 0214 	add.w	r2, r4, #20
 8017240:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8017244:	9301      	str	r3, [sp, #4]
 8017246:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 801724a:	2300      	movs	r3, #0
 801724c:	4694      	mov	ip, r2
 801724e:	f852 1b04 	ldr.w	r1, [r2], #4
 8017252:	f1b1 3fff 	cmp.w	r1, #4294967295
 8017256:	d01e      	beq.n	8017296 <__gethex+0x3ce>
 8017258:	3101      	adds	r1, #1
 801725a:	f8cc 1000 	str.w	r1, [ip]
 801725e:	f1b8 0f02 	cmp.w	r8, #2
 8017262:	f104 0214 	add.w	r2, r4, #20
 8017266:	d13d      	bne.n	80172e4 <__gethex+0x41c>
 8017268:	683b      	ldr	r3, [r7, #0]
 801726a:	3b01      	subs	r3, #1
 801726c:	42ab      	cmp	r3, r5
 801726e:	d10b      	bne.n	8017288 <__gethex+0x3c0>
 8017270:	1169      	asrs	r1, r5, #5
 8017272:	2301      	movs	r3, #1
 8017274:	f005 051f 	and.w	r5, r5, #31
 8017278:	fa03 f505 	lsl.w	r5, r3, r5
 801727c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017280:	421d      	tst	r5, r3
 8017282:	bf18      	it	ne
 8017284:	f04f 0801 	movne.w	r8, #1
 8017288:	f048 0820 	orr.w	r8, r8, #32
 801728c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801728e:	601c      	str	r4, [r3, #0]
 8017290:	9b02      	ldr	r3, [sp, #8]
 8017292:	601e      	str	r6, [r3, #0]
 8017294:	e6a2      	b.n	8016fdc <__gethex+0x114>
 8017296:	4290      	cmp	r0, r2
 8017298:	f842 3c04 	str.w	r3, [r2, #-4]
 801729c:	d8d6      	bhi.n	801724c <__gethex+0x384>
 801729e:	68a2      	ldr	r2, [r4, #8]
 80172a0:	4593      	cmp	fp, r2
 80172a2:	db17      	blt.n	80172d4 <__gethex+0x40c>
 80172a4:	6861      	ldr	r1, [r4, #4]
 80172a6:	4648      	mov	r0, r9
 80172a8:	3101      	adds	r1, #1
 80172aa:	f7fe f835 	bl	8015318 <_Balloc>
 80172ae:	4682      	mov	sl, r0
 80172b0:	b918      	cbnz	r0, 80172ba <__gethex+0x3f2>
 80172b2:	4b1b      	ldr	r3, [pc, #108]	; (8017320 <__gethex+0x458>)
 80172b4:	4602      	mov	r2, r0
 80172b6:	2184      	movs	r1, #132	; 0x84
 80172b8:	e6b3      	b.n	8017022 <__gethex+0x15a>
 80172ba:	6922      	ldr	r2, [r4, #16]
 80172bc:	3202      	adds	r2, #2
 80172be:	f104 010c 	add.w	r1, r4, #12
 80172c2:	0092      	lsls	r2, r2, #2
 80172c4:	300c      	adds	r0, #12
 80172c6:	f7fd f9d0 	bl	801466a <memcpy>
 80172ca:	4621      	mov	r1, r4
 80172cc:	4648      	mov	r0, r9
 80172ce:	f7fe f863 	bl	8015398 <_Bfree>
 80172d2:	4654      	mov	r4, sl
 80172d4:	6922      	ldr	r2, [r4, #16]
 80172d6:	1c51      	adds	r1, r2, #1
 80172d8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80172dc:	6121      	str	r1, [r4, #16]
 80172de:	2101      	movs	r1, #1
 80172e0:	6151      	str	r1, [r2, #20]
 80172e2:	e7bc      	b.n	801725e <__gethex+0x396>
 80172e4:	6921      	ldr	r1, [r4, #16]
 80172e6:	4559      	cmp	r1, fp
 80172e8:	dd0b      	ble.n	8017302 <__gethex+0x43a>
 80172ea:	2101      	movs	r1, #1
 80172ec:	4620      	mov	r0, r4
 80172ee:	f7ff fd83 	bl	8016df8 <rshift>
 80172f2:	68bb      	ldr	r3, [r7, #8]
 80172f4:	3601      	adds	r6, #1
 80172f6:	42b3      	cmp	r3, r6
 80172f8:	f6ff aedb 	blt.w	80170b2 <__gethex+0x1ea>
 80172fc:	f04f 0801 	mov.w	r8, #1
 8017300:	e7c2      	b.n	8017288 <__gethex+0x3c0>
 8017302:	f015 051f 	ands.w	r5, r5, #31
 8017306:	d0f9      	beq.n	80172fc <__gethex+0x434>
 8017308:	9b01      	ldr	r3, [sp, #4]
 801730a:	441a      	add	r2, r3
 801730c:	f1c5 0520 	rsb	r5, r5, #32
 8017310:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8017314:	f7fe f8f2 	bl	80154fc <__hi0bits>
 8017318:	42a8      	cmp	r0, r5
 801731a:	dbe6      	blt.n	80172ea <__gethex+0x422>
 801731c:	e7ee      	b.n	80172fc <__gethex+0x434>
 801731e:	bf00      	nop
 8017320:	08017db1 	.word	0x08017db1

08017324 <L_shift>:
 8017324:	f1c2 0208 	rsb	r2, r2, #8
 8017328:	0092      	lsls	r2, r2, #2
 801732a:	b570      	push	{r4, r5, r6, lr}
 801732c:	f1c2 0620 	rsb	r6, r2, #32
 8017330:	6843      	ldr	r3, [r0, #4]
 8017332:	6804      	ldr	r4, [r0, #0]
 8017334:	fa03 f506 	lsl.w	r5, r3, r6
 8017338:	432c      	orrs	r4, r5
 801733a:	40d3      	lsrs	r3, r2
 801733c:	6004      	str	r4, [r0, #0]
 801733e:	f840 3f04 	str.w	r3, [r0, #4]!
 8017342:	4288      	cmp	r0, r1
 8017344:	d3f4      	bcc.n	8017330 <L_shift+0xc>
 8017346:	bd70      	pop	{r4, r5, r6, pc}

08017348 <__match>:
 8017348:	b530      	push	{r4, r5, lr}
 801734a:	6803      	ldr	r3, [r0, #0]
 801734c:	3301      	adds	r3, #1
 801734e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017352:	b914      	cbnz	r4, 801735a <__match+0x12>
 8017354:	6003      	str	r3, [r0, #0]
 8017356:	2001      	movs	r0, #1
 8017358:	bd30      	pop	{r4, r5, pc}
 801735a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801735e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8017362:	2d19      	cmp	r5, #25
 8017364:	bf98      	it	ls
 8017366:	3220      	addls	r2, #32
 8017368:	42a2      	cmp	r2, r4
 801736a:	d0f0      	beq.n	801734e <__match+0x6>
 801736c:	2000      	movs	r0, #0
 801736e:	e7f3      	b.n	8017358 <__match+0x10>

08017370 <__hexnan>:
 8017370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017374:	680b      	ldr	r3, [r1, #0]
 8017376:	6801      	ldr	r1, [r0, #0]
 8017378:	115e      	asrs	r6, r3, #5
 801737a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801737e:	f013 031f 	ands.w	r3, r3, #31
 8017382:	b087      	sub	sp, #28
 8017384:	bf18      	it	ne
 8017386:	3604      	addne	r6, #4
 8017388:	2500      	movs	r5, #0
 801738a:	1f37      	subs	r7, r6, #4
 801738c:	4682      	mov	sl, r0
 801738e:	4690      	mov	r8, r2
 8017390:	9301      	str	r3, [sp, #4]
 8017392:	f846 5c04 	str.w	r5, [r6, #-4]
 8017396:	46b9      	mov	r9, r7
 8017398:	463c      	mov	r4, r7
 801739a:	9502      	str	r5, [sp, #8]
 801739c:	46ab      	mov	fp, r5
 801739e:	784a      	ldrb	r2, [r1, #1]
 80173a0:	1c4b      	adds	r3, r1, #1
 80173a2:	9303      	str	r3, [sp, #12]
 80173a4:	b342      	cbz	r2, 80173f8 <__hexnan+0x88>
 80173a6:	4610      	mov	r0, r2
 80173a8:	9105      	str	r1, [sp, #20]
 80173aa:	9204      	str	r2, [sp, #16]
 80173ac:	f7ff fd76 	bl	8016e9c <__hexdig_fun>
 80173b0:	2800      	cmp	r0, #0
 80173b2:	d14f      	bne.n	8017454 <__hexnan+0xe4>
 80173b4:	9a04      	ldr	r2, [sp, #16]
 80173b6:	9905      	ldr	r1, [sp, #20]
 80173b8:	2a20      	cmp	r2, #32
 80173ba:	d818      	bhi.n	80173ee <__hexnan+0x7e>
 80173bc:	9b02      	ldr	r3, [sp, #8]
 80173be:	459b      	cmp	fp, r3
 80173c0:	dd13      	ble.n	80173ea <__hexnan+0x7a>
 80173c2:	454c      	cmp	r4, r9
 80173c4:	d206      	bcs.n	80173d4 <__hexnan+0x64>
 80173c6:	2d07      	cmp	r5, #7
 80173c8:	dc04      	bgt.n	80173d4 <__hexnan+0x64>
 80173ca:	462a      	mov	r2, r5
 80173cc:	4649      	mov	r1, r9
 80173ce:	4620      	mov	r0, r4
 80173d0:	f7ff ffa8 	bl	8017324 <L_shift>
 80173d4:	4544      	cmp	r4, r8
 80173d6:	d950      	bls.n	801747a <__hexnan+0x10a>
 80173d8:	2300      	movs	r3, #0
 80173da:	f1a4 0904 	sub.w	r9, r4, #4
 80173de:	f844 3c04 	str.w	r3, [r4, #-4]
 80173e2:	f8cd b008 	str.w	fp, [sp, #8]
 80173e6:	464c      	mov	r4, r9
 80173e8:	461d      	mov	r5, r3
 80173ea:	9903      	ldr	r1, [sp, #12]
 80173ec:	e7d7      	b.n	801739e <__hexnan+0x2e>
 80173ee:	2a29      	cmp	r2, #41	; 0x29
 80173f0:	d155      	bne.n	801749e <__hexnan+0x12e>
 80173f2:	3102      	adds	r1, #2
 80173f4:	f8ca 1000 	str.w	r1, [sl]
 80173f8:	f1bb 0f00 	cmp.w	fp, #0
 80173fc:	d04f      	beq.n	801749e <__hexnan+0x12e>
 80173fe:	454c      	cmp	r4, r9
 8017400:	d206      	bcs.n	8017410 <__hexnan+0xa0>
 8017402:	2d07      	cmp	r5, #7
 8017404:	dc04      	bgt.n	8017410 <__hexnan+0xa0>
 8017406:	462a      	mov	r2, r5
 8017408:	4649      	mov	r1, r9
 801740a:	4620      	mov	r0, r4
 801740c:	f7ff ff8a 	bl	8017324 <L_shift>
 8017410:	4544      	cmp	r4, r8
 8017412:	d934      	bls.n	801747e <__hexnan+0x10e>
 8017414:	f1a8 0204 	sub.w	r2, r8, #4
 8017418:	4623      	mov	r3, r4
 801741a:	f853 1b04 	ldr.w	r1, [r3], #4
 801741e:	f842 1f04 	str.w	r1, [r2, #4]!
 8017422:	429f      	cmp	r7, r3
 8017424:	d2f9      	bcs.n	801741a <__hexnan+0xaa>
 8017426:	1b3b      	subs	r3, r7, r4
 8017428:	f023 0303 	bic.w	r3, r3, #3
 801742c:	3304      	adds	r3, #4
 801742e:	3e03      	subs	r6, #3
 8017430:	3401      	adds	r4, #1
 8017432:	42a6      	cmp	r6, r4
 8017434:	bf38      	it	cc
 8017436:	2304      	movcc	r3, #4
 8017438:	4443      	add	r3, r8
 801743a:	2200      	movs	r2, #0
 801743c:	f843 2b04 	str.w	r2, [r3], #4
 8017440:	429f      	cmp	r7, r3
 8017442:	d2fb      	bcs.n	801743c <__hexnan+0xcc>
 8017444:	683b      	ldr	r3, [r7, #0]
 8017446:	b91b      	cbnz	r3, 8017450 <__hexnan+0xe0>
 8017448:	4547      	cmp	r7, r8
 801744a:	d126      	bne.n	801749a <__hexnan+0x12a>
 801744c:	2301      	movs	r3, #1
 801744e:	603b      	str	r3, [r7, #0]
 8017450:	2005      	movs	r0, #5
 8017452:	e025      	b.n	80174a0 <__hexnan+0x130>
 8017454:	3501      	adds	r5, #1
 8017456:	2d08      	cmp	r5, #8
 8017458:	f10b 0b01 	add.w	fp, fp, #1
 801745c:	dd06      	ble.n	801746c <__hexnan+0xfc>
 801745e:	4544      	cmp	r4, r8
 8017460:	d9c3      	bls.n	80173ea <__hexnan+0x7a>
 8017462:	2300      	movs	r3, #0
 8017464:	f844 3c04 	str.w	r3, [r4, #-4]
 8017468:	2501      	movs	r5, #1
 801746a:	3c04      	subs	r4, #4
 801746c:	6822      	ldr	r2, [r4, #0]
 801746e:	f000 000f 	and.w	r0, r0, #15
 8017472:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8017476:	6020      	str	r0, [r4, #0]
 8017478:	e7b7      	b.n	80173ea <__hexnan+0x7a>
 801747a:	2508      	movs	r5, #8
 801747c:	e7b5      	b.n	80173ea <__hexnan+0x7a>
 801747e:	9b01      	ldr	r3, [sp, #4]
 8017480:	2b00      	cmp	r3, #0
 8017482:	d0df      	beq.n	8017444 <__hexnan+0xd4>
 8017484:	f1c3 0320 	rsb	r3, r3, #32
 8017488:	f04f 32ff 	mov.w	r2, #4294967295
 801748c:	40da      	lsrs	r2, r3
 801748e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8017492:	4013      	ands	r3, r2
 8017494:	f846 3c04 	str.w	r3, [r6, #-4]
 8017498:	e7d4      	b.n	8017444 <__hexnan+0xd4>
 801749a:	3f04      	subs	r7, #4
 801749c:	e7d2      	b.n	8017444 <__hexnan+0xd4>
 801749e:	2004      	movs	r0, #4
 80174a0:	b007      	add	sp, #28
 80174a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080174a6 <__ascii_mbtowc>:
 80174a6:	b082      	sub	sp, #8
 80174a8:	b901      	cbnz	r1, 80174ac <__ascii_mbtowc+0x6>
 80174aa:	a901      	add	r1, sp, #4
 80174ac:	b142      	cbz	r2, 80174c0 <__ascii_mbtowc+0x1a>
 80174ae:	b14b      	cbz	r3, 80174c4 <__ascii_mbtowc+0x1e>
 80174b0:	7813      	ldrb	r3, [r2, #0]
 80174b2:	600b      	str	r3, [r1, #0]
 80174b4:	7812      	ldrb	r2, [r2, #0]
 80174b6:	1e10      	subs	r0, r2, #0
 80174b8:	bf18      	it	ne
 80174ba:	2001      	movne	r0, #1
 80174bc:	b002      	add	sp, #8
 80174be:	4770      	bx	lr
 80174c0:	4610      	mov	r0, r2
 80174c2:	e7fb      	b.n	80174bc <__ascii_mbtowc+0x16>
 80174c4:	f06f 0001 	mvn.w	r0, #1
 80174c8:	e7f8      	b.n	80174bc <__ascii_mbtowc+0x16>

080174ca <_realloc_r>:
 80174ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80174ce:	4680      	mov	r8, r0
 80174d0:	4614      	mov	r4, r2
 80174d2:	460e      	mov	r6, r1
 80174d4:	b921      	cbnz	r1, 80174e0 <_realloc_r+0x16>
 80174d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80174da:	4611      	mov	r1, r2
 80174dc:	f7fb bfba 	b.w	8013454 <_malloc_r>
 80174e0:	b92a      	cbnz	r2, 80174ee <_realloc_r+0x24>
 80174e2:	f7fd fecd 	bl	8015280 <_free_r>
 80174e6:	4625      	mov	r5, r4
 80174e8:	4628      	mov	r0, r5
 80174ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80174ee:	f000 f842 	bl	8017576 <_malloc_usable_size_r>
 80174f2:	4284      	cmp	r4, r0
 80174f4:	4607      	mov	r7, r0
 80174f6:	d802      	bhi.n	80174fe <_realloc_r+0x34>
 80174f8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80174fc:	d812      	bhi.n	8017524 <_realloc_r+0x5a>
 80174fe:	4621      	mov	r1, r4
 8017500:	4640      	mov	r0, r8
 8017502:	f7fb ffa7 	bl	8013454 <_malloc_r>
 8017506:	4605      	mov	r5, r0
 8017508:	2800      	cmp	r0, #0
 801750a:	d0ed      	beq.n	80174e8 <_realloc_r+0x1e>
 801750c:	42bc      	cmp	r4, r7
 801750e:	4622      	mov	r2, r4
 8017510:	4631      	mov	r1, r6
 8017512:	bf28      	it	cs
 8017514:	463a      	movcs	r2, r7
 8017516:	f7fd f8a8 	bl	801466a <memcpy>
 801751a:	4631      	mov	r1, r6
 801751c:	4640      	mov	r0, r8
 801751e:	f7fd feaf 	bl	8015280 <_free_r>
 8017522:	e7e1      	b.n	80174e8 <_realloc_r+0x1e>
 8017524:	4635      	mov	r5, r6
 8017526:	e7df      	b.n	80174e8 <_realloc_r+0x1e>

08017528 <__ascii_wctomb>:
 8017528:	b149      	cbz	r1, 801753e <__ascii_wctomb+0x16>
 801752a:	2aff      	cmp	r2, #255	; 0xff
 801752c:	bf85      	ittet	hi
 801752e:	238a      	movhi	r3, #138	; 0x8a
 8017530:	6003      	strhi	r3, [r0, #0]
 8017532:	700a      	strbls	r2, [r1, #0]
 8017534:	f04f 30ff 	movhi.w	r0, #4294967295
 8017538:	bf98      	it	ls
 801753a:	2001      	movls	r0, #1
 801753c:	4770      	bx	lr
 801753e:	4608      	mov	r0, r1
 8017540:	4770      	bx	lr
	...

08017544 <fiprintf>:
 8017544:	b40e      	push	{r1, r2, r3}
 8017546:	b503      	push	{r0, r1, lr}
 8017548:	4601      	mov	r1, r0
 801754a:	ab03      	add	r3, sp, #12
 801754c:	4805      	ldr	r0, [pc, #20]	; (8017564 <fiprintf+0x20>)
 801754e:	f853 2b04 	ldr.w	r2, [r3], #4
 8017552:	6800      	ldr	r0, [r0, #0]
 8017554:	9301      	str	r3, [sp, #4]
 8017556:	f000 f83f 	bl	80175d8 <_vfiprintf_r>
 801755a:	b002      	add	sp, #8
 801755c:	f85d eb04 	ldr.w	lr, [sp], #4
 8017560:	b003      	add	sp, #12
 8017562:	4770      	bx	lr
 8017564:	2400006c 	.word	0x2400006c

08017568 <abort>:
 8017568:	b508      	push	{r3, lr}
 801756a:	2006      	movs	r0, #6
 801756c:	f000 fa0c 	bl	8017988 <raise>
 8017570:	2001      	movs	r0, #1
 8017572:	f7ec f9e7 	bl	8003944 <_exit>

08017576 <_malloc_usable_size_r>:
 8017576:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801757a:	1f18      	subs	r0, r3, #4
 801757c:	2b00      	cmp	r3, #0
 801757e:	bfbc      	itt	lt
 8017580:	580b      	ldrlt	r3, [r1, r0]
 8017582:	18c0      	addlt	r0, r0, r3
 8017584:	4770      	bx	lr

08017586 <__sfputc_r>:
 8017586:	6893      	ldr	r3, [r2, #8]
 8017588:	3b01      	subs	r3, #1
 801758a:	2b00      	cmp	r3, #0
 801758c:	b410      	push	{r4}
 801758e:	6093      	str	r3, [r2, #8]
 8017590:	da08      	bge.n	80175a4 <__sfputc_r+0x1e>
 8017592:	6994      	ldr	r4, [r2, #24]
 8017594:	42a3      	cmp	r3, r4
 8017596:	db01      	blt.n	801759c <__sfputc_r+0x16>
 8017598:	290a      	cmp	r1, #10
 801759a:	d103      	bne.n	80175a4 <__sfputc_r+0x1e>
 801759c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80175a0:	f000 b934 	b.w	801780c <__swbuf_r>
 80175a4:	6813      	ldr	r3, [r2, #0]
 80175a6:	1c58      	adds	r0, r3, #1
 80175a8:	6010      	str	r0, [r2, #0]
 80175aa:	7019      	strb	r1, [r3, #0]
 80175ac:	4608      	mov	r0, r1
 80175ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80175b2:	4770      	bx	lr

080175b4 <__sfputs_r>:
 80175b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80175b6:	4606      	mov	r6, r0
 80175b8:	460f      	mov	r7, r1
 80175ba:	4614      	mov	r4, r2
 80175bc:	18d5      	adds	r5, r2, r3
 80175be:	42ac      	cmp	r4, r5
 80175c0:	d101      	bne.n	80175c6 <__sfputs_r+0x12>
 80175c2:	2000      	movs	r0, #0
 80175c4:	e007      	b.n	80175d6 <__sfputs_r+0x22>
 80175c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80175ca:	463a      	mov	r2, r7
 80175cc:	4630      	mov	r0, r6
 80175ce:	f7ff ffda 	bl	8017586 <__sfputc_r>
 80175d2:	1c43      	adds	r3, r0, #1
 80175d4:	d1f3      	bne.n	80175be <__sfputs_r+0xa>
 80175d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080175d8 <_vfiprintf_r>:
 80175d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80175dc:	460d      	mov	r5, r1
 80175de:	b09d      	sub	sp, #116	; 0x74
 80175e0:	4614      	mov	r4, r2
 80175e2:	4698      	mov	r8, r3
 80175e4:	4606      	mov	r6, r0
 80175e6:	b118      	cbz	r0, 80175f0 <_vfiprintf_r+0x18>
 80175e8:	6a03      	ldr	r3, [r0, #32]
 80175ea:	b90b      	cbnz	r3, 80175f0 <_vfiprintf_r+0x18>
 80175ec:	f7fc fe8a 	bl	8014304 <__sinit>
 80175f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80175f2:	07d9      	lsls	r1, r3, #31
 80175f4:	d405      	bmi.n	8017602 <_vfiprintf_r+0x2a>
 80175f6:	89ab      	ldrh	r3, [r5, #12]
 80175f8:	059a      	lsls	r2, r3, #22
 80175fa:	d402      	bmi.n	8017602 <_vfiprintf_r+0x2a>
 80175fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80175fe:	f7fd f832 	bl	8014666 <__retarget_lock_acquire_recursive>
 8017602:	89ab      	ldrh	r3, [r5, #12]
 8017604:	071b      	lsls	r3, r3, #28
 8017606:	d501      	bpl.n	801760c <_vfiprintf_r+0x34>
 8017608:	692b      	ldr	r3, [r5, #16]
 801760a:	b99b      	cbnz	r3, 8017634 <_vfiprintf_r+0x5c>
 801760c:	4629      	mov	r1, r5
 801760e:	4630      	mov	r0, r6
 8017610:	f000 f93a 	bl	8017888 <__swsetup_r>
 8017614:	b170      	cbz	r0, 8017634 <_vfiprintf_r+0x5c>
 8017616:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017618:	07dc      	lsls	r4, r3, #31
 801761a:	d504      	bpl.n	8017626 <_vfiprintf_r+0x4e>
 801761c:	f04f 30ff 	mov.w	r0, #4294967295
 8017620:	b01d      	add	sp, #116	; 0x74
 8017622:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017626:	89ab      	ldrh	r3, [r5, #12]
 8017628:	0598      	lsls	r0, r3, #22
 801762a:	d4f7      	bmi.n	801761c <_vfiprintf_r+0x44>
 801762c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801762e:	f7fd f81b 	bl	8014668 <__retarget_lock_release_recursive>
 8017632:	e7f3      	b.n	801761c <_vfiprintf_r+0x44>
 8017634:	2300      	movs	r3, #0
 8017636:	9309      	str	r3, [sp, #36]	; 0x24
 8017638:	2320      	movs	r3, #32
 801763a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801763e:	f8cd 800c 	str.w	r8, [sp, #12]
 8017642:	2330      	movs	r3, #48	; 0x30
 8017644:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80177f8 <_vfiprintf_r+0x220>
 8017648:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801764c:	f04f 0901 	mov.w	r9, #1
 8017650:	4623      	mov	r3, r4
 8017652:	469a      	mov	sl, r3
 8017654:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017658:	b10a      	cbz	r2, 801765e <_vfiprintf_r+0x86>
 801765a:	2a25      	cmp	r2, #37	; 0x25
 801765c:	d1f9      	bne.n	8017652 <_vfiprintf_r+0x7a>
 801765e:	ebba 0b04 	subs.w	fp, sl, r4
 8017662:	d00b      	beq.n	801767c <_vfiprintf_r+0xa4>
 8017664:	465b      	mov	r3, fp
 8017666:	4622      	mov	r2, r4
 8017668:	4629      	mov	r1, r5
 801766a:	4630      	mov	r0, r6
 801766c:	f7ff ffa2 	bl	80175b4 <__sfputs_r>
 8017670:	3001      	adds	r0, #1
 8017672:	f000 80a9 	beq.w	80177c8 <_vfiprintf_r+0x1f0>
 8017676:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017678:	445a      	add	r2, fp
 801767a:	9209      	str	r2, [sp, #36]	; 0x24
 801767c:	f89a 3000 	ldrb.w	r3, [sl]
 8017680:	2b00      	cmp	r3, #0
 8017682:	f000 80a1 	beq.w	80177c8 <_vfiprintf_r+0x1f0>
 8017686:	2300      	movs	r3, #0
 8017688:	f04f 32ff 	mov.w	r2, #4294967295
 801768c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017690:	f10a 0a01 	add.w	sl, sl, #1
 8017694:	9304      	str	r3, [sp, #16]
 8017696:	9307      	str	r3, [sp, #28]
 8017698:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801769c:	931a      	str	r3, [sp, #104]	; 0x68
 801769e:	4654      	mov	r4, sl
 80176a0:	2205      	movs	r2, #5
 80176a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80176a6:	4854      	ldr	r0, [pc, #336]	; (80177f8 <_vfiprintf_r+0x220>)
 80176a8:	f7e8 fe1a 	bl	80002e0 <memchr>
 80176ac:	9a04      	ldr	r2, [sp, #16]
 80176ae:	b9d8      	cbnz	r0, 80176e8 <_vfiprintf_r+0x110>
 80176b0:	06d1      	lsls	r1, r2, #27
 80176b2:	bf44      	itt	mi
 80176b4:	2320      	movmi	r3, #32
 80176b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80176ba:	0713      	lsls	r3, r2, #28
 80176bc:	bf44      	itt	mi
 80176be:	232b      	movmi	r3, #43	; 0x2b
 80176c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80176c4:	f89a 3000 	ldrb.w	r3, [sl]
 80176c8:	2b2a      	cmp	r3, #42	; 0x2a
 80176ca:	d015      	beq.n	80176f8 <_vfiprintf_r+0x120>
 80176cc:	9a07      	ldr	r2, [sp, #28]
 80176ce:	4654      	mov	r4, sl
 80176d0:	2000      	movs	r0, #0
 80176d2:	f04f 0c0a 	mov.w	ip, #10
 80176d6:	4621      	mov	r1, r4
 80176d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80176dc:	3b30      	subs	r3, #48	; 0x30
 80176de:	2b09      	cmp	r3, #9
 80176e0:	d94d      	bls.n	801777e <_vfiprintf_r+0x1a6>
 80176e2:	b1b0      	cbz	r0, 8017712 <_vfiprintf_r+0x13a>
 80176e4:	9207      	str	r2, [sp, #28]
 80176e6:	e014      	b.n	8017712 <_vfiprintf_r+0x13a>
 80176e8:	eba0 0308 	sub.w	r3, r0, r8
 80176ec:	fa09 f303 	lsl.w	r3, r9, r3
 80176f0:	4313      	orrs	r3, r2
 80176f2:	9304      	str	r3, [sp, #16]
 80176f4:	46a2      	mov	sl, r4
 80176f6:	e7d2      	b.n	801769e <_vfiprintf_r+0xc6>
 80176f8:	9b03      	ldr	r3, [sp, #12]
 80176fa:	1d19      	adds	r1, r3, #4
 80176fc:	681b      	ldr	r3, [r3, #0]
 80176fe:	9103      	str	r1, [sp, #12]
 8017700:	2b00      	cmp	r3, #0
 8017702:	bfbb      	ittet	lt
 8017704:	425b      	neglt	r3, r3
 8017706:	f042 0202 	orrlt.w	r2, r2, #2
 801770a:	9307      	strge	r3, [sp, #28]
 801770c:	9307      	strlt	r3, [sp, #28]
 801770e:	bfb8      	it	lt
 8017710:	9204      	strlt	r2, [sp, #16]
 8017712:	7823      	ldrb	r3, [r4, #0]
 8017714:	2b2e      	cmp	r3, #46	; 0x2e
 8017716:	d10c      	bne.n	8017732 <_vfiprintf_r+0x15a>
 8017718:	7863      	ldrb	r3, [r4, #1]
 801771a:	2b2a      	cmp	r3, #42	; 0x2a
 801771c:	d134      	bne.n	8017788 <_vfiprintf_r+0x1b0>
 801771e:	9b03      	ldr	r3, [sp, #12]
 8017720:	1d1a      	adds	r2, r3, #4
 8017722:	681b      	ldr	r3, [r3, #0]
 8017724:	9203      	str	r2, [sp, #12]
 8017726:	2b00      	cmp	r3, #0
 8017728:	bfb8      	it	lt
 801772a:	f04f 33ff 	movlt.w	r3, #4294967295
 801772e:	3402      	adds	r4, #2
 8017730:	9305      	str	r3, [sp, #20]
 8017732:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8017808 <_vfiprintf_r+0x230>
 8017736:	7821      	ldrb	r1, [r4, #0]
 8017738:	2203      	movs	r2, #3
 801773a:	4650      	mov	r0, sl
 801773c:	f7e8 fdd0 	bl	80002e0 <memchr>
 8017740:	b138      	cbz	r0, 8017752 <_vfiprintf_r+0x17a>
 8017742:	9b04      	ldr	r3, [sp, #16]
 8017744:	eba0 000a 	sub.w	r0, r0, sl
 8017748:	2240      	movs	r2, #64	; 0x40
 801774a:	4082      	lsls	r2, r0
 801774c:	4313      	orrs	r3, r2
 801774e:	3401      	adds	r4, #1
 8017750:	9304      	str	r3, [sp, #16]
 8017752:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017756:	4829      	ldr	r0, [pc, #164]	; (80177fc <_vfiprintf_r+0x224>)
 8017758:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801775c:	2206      	movs	r2, #6
 801775e:	f7e8 fdbf 	bl	80002e0 <memchr>
 8017762:	2800      	cmp	r0, #0
 8017764:	d03f      	beq.n	80177e6 <_vfiprintf_r+0x20e>
 8017766:	4b26      	ldr	r3, [pc, #152]	; (8017800 <_vfiprintf_r+0x228>)
 8017768:	bb1b      	cbnz	r3, 80177b2 <_vfiprintf_r+0x1da>
 801776a:	9b03      	ldr	r3, [sp, #12]
 801776c:	3307      	adds	r3, #7
 801776e:	f023 0307 	bic.w	r3, r3, #7
 8017772:	3308      	adds	r3, #8
 8017774:	9303      	str	r3, [sp, #12]
 8017776:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017778:	443b      	add	r3, r7
 801777a:	9309      	str	r3, [sp, #36]	; 0x24
 801777c:	e768      	b.n	8017650 <_vfiprintf_r+0x78>
 801777e:	fb0c 3202 	mla	r2, ip, r2, r3
 8017782:	460c      	mov	r4, r1
 8017784:	2001      	movs	r0, #1
 8017786:	e7a6      	b.n	80176d6 <_vfiprintf_r+0xfe>
 8017788:	2300      	movs	r3, #0
 801778a:	3401      	adds	r4, #1
 801778c:	9305      	str	r3, [sp, #20]
 801778e:	4619      	mov	r1, r3
 8017790:	f04f 0c0a 	mov.w	ip, #10
 8017794:	4620      	mov	r0, r4
 8017796:	f810 2b01 	ldrb.w	r2, [r0], #1
 801779a:	3a30      	subs	r2, #48	; 0x30
 801779c:	2a09      	cmp	r2, #9
 801779e:	d903      	bls.n	80177a8 <_vfiprintf_r+0x1d0>
 80177a0:	2b00      	cmp	r3, #0
 80177a2:	d0c6      	beq.n	8017732 <_vfiprintf_r+0x15a>
 80177a4:	9105      	str	r1, [sp, #20]
 80177a6:	e7c4      	b.n	8017732 <_vfiprintf_r+0x15a>
 80177a8:	fb0c 2101 	mla	r1, ip, r1, r2
 80177ac:	4604      	mov	r4, r0
 80177ae:	2301      	movs	r3, #1
 80177b0:	e7f0      	b.n	8017794 <_vfiprintf_r+0x1bc>
 80177b2:	ab03      	add	r3, sp, #12
 80177b4:	9300      	str	r3, [sp, #0]
 80177b6:	462a      	mov	r2, r5
 80177b8:	4b12      	ldr	r3, [pc, #72]	; (8017804 <_vfiprintf_r+0x22c>)
 80177ba:	a904      	add	r1, sp, #16
 80177bc:	4630      	mov	r0, r6
 80177be:	f7fb ff67 	bl	8013690 <_printf_float>
 80177c2:	4607      	mov	r7, r0
 80177c4:	1c78      	adds	r0, r7, #1
 80177c6:	d1d6      	bne.n	8017776 <_vfiprintf_r+0x19e>
 80177c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80177ca:	07d9      	lsls	r1, r3, #31
 80177cc:	d405      	bmi.n	80177da <_vfiprintf_r+0x202>
 80177ce:	89ab      	ldrh	r3, [r5, #12]
 80177d0:	059a      	lsls	r2, r3, #22
 80177d2:	d402      	bmi.n	80177da <_vfiprintf_r+0x202>
 80177d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80177d6:	f7fc ff47 	bl	8014668 <__retarget_lock_release_recursive>
 80177da:	89ab      	ldrh	r3, [r5, #12]
 80177dc:	065b      	lsls	r3, r3, #25
 80177de:	f53f af1d 	bmi.w	801761c <_vfiprintf_r+0x44>
 80177e2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80177e4:	e71c      	b.n	8017620 <_vfiprintf_r+0x48>
 80177e6:	ab03      	add	r3, sp, #12
 80177e8:	9300      	str	r3, [sp, #0]
 80177ea:	462a      	mov	r2, r5
 80177ec:	4b05      	ldr	r3, [pc, #20]	; (8017804 <_vfiprintf_r+0x22c>)
 80177ee:	a904      	add	r1, sp, #16
 80177f0:	4630      	mov	r0, r6
 80177f2:	f7fc f9d5 	bl	8013ba0 <_printf_i>
 80177f6:	e7e4      	b.n	80177c2 <_vfiprintf_r+0x1ea>
 80177f8:	08018071 	.word	0x08018071
 80177fc:	0801807b 	.word	0x0801807b
 8017800:	08013691 	.word	0x08013691
 8017804:	080175b5 	.word	0x080175b5
 8017808:	08018077 	.word	0x08018077

0801780c <__swbuf_r>:
 801780c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801780e:	460e      	mov	r6, r1
 8017810:	4614      	mov	r4, r2
 8017812:	4605      	mov	r5, r0
 8017814:	b118      	cbz	r0, 801781e <__swbuf_r+0x12>
 8017816:	6a03      	ldr	r3, [r0, #32]
 8017818:	b90b      	cbnz	r3, 801781e <__swbuf_r+0x12>
 801781a:	f7fc fd73 	bl	8014304 <__sinit>
 801781e:	69a3      	ldr	r3, [r4, #24]
 8017820:	60a3      	str	r3, [r4, #8]
 8017822:	89a3      	ldrh	r3, [r4, #12]
 8017824:	071a      	lsls	r2, r3, #28
 8017826:	d525      	bpl.n	8017874 <__swbuf_r+0x68>
 8017828:	6923      	ldr	r3, [r4, #16]
 801782a:	b31b      	cbz	r3, 8017874 <__swbuf_r+0x68>
 801782c:	6823      	ldr	r3, [r4, #0]
 801782e:	6922      	ldr	r2, [r4, #16]
 8017830:	1a98      	subs	r0, r3, r2
 8017832:	6963      	ldr	r3, [r4, #20]
 8017834:	b2f6      	uxtb	r6, r6
 8017836:	4283      	cmp	r3, r0
 8017838:	4637      	mov	r7, r6
 801783a:	dc04      	bgt.n	8017846 <__swbuf_r+0x3a>
 801783c:	4621      	mov	r1, r4
 801783e:	4628      	mov	r0, r5
 8017840:	f7ff fa48 	bl	8016cd4 <_fflush_r>
 8017844:	b9e0      	cbnz	r0, 8017880 <__swbuf_r+0x74>
 8017846:	68a3      	ldr	r3, [r4, #8]
 8017848:	3b01      	subs	r3, #1
 801784a:	60a3      	str	r3, [r4, #8]
 801784c:	6823      	ldr	r3, [r4, #0]
 801784e:	1c5a      	adds	r2, r3, #1
 8017850:	6022      	str	r2, [r4, #0]
 8017852:	701e      	strb	r6, [r3, #0]
 8017854:	6962      	ldr	r2, [r4, #20]
 8017856:	1c43      	adds	r3, r0, #1
 8017858:	429a      	cmp	r2, r3
 801785a:	d004      	beq.n	8017866 <__swbuf_r+0x5a>
 801785c:	89a3      	ldrh	r3, [r4, #12]
 801785e:	07db      	lsls	r3, r3, #31
 8017860:	d506      	bpl.n	8017870 <__swbuf_r+0x64>
 8017862:	2e0a      	cmp	r6, #10
 8017864:	d104      	bne.n	8017870 <__swbuf_r+0x64>
 8017866:	4621      	mov	r1, r4
 8017868:	4628      	mov	r0, r5
 801786a:	f7ff fa33 	bl	8016cd4 <_fflush_r>
 801786e:	b938      	cbnz	r0, 8017880 <__swbuf_r+0x74>
 8017870:	4638      	mov	r0, r7
 8017872:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017874:	4621      	mov	r1, r4
 8017876:	4628      	mov	r0, r5
 8017878:	f000 f806 	bl	8017888 <__swsetup_r>
 801787c:	2800      	cmp	r0, #0
 801787e:	d0d5      	beq.n	801782c <__swbuf_r+0x20>
 8017880:	f04f 37ff 	mov.w	r7, #4294967295
 8017884:	e7f4      	b.n	8017870 <__swbuf_r+0x64>
	...

08017888 <__swsetup_r>:
 8017888:	b538      	push	{r3, r4, r5, lr}
 801788a:	4b2a      	ldr	r3, [pc, #168]	; (8017934 <__swsetup_r+0xac>)
 801788c:	4605      	mov	r5, r0
 801788e:	6818      	ldr	r0, [r3, #0]
 8017890:	460c      	mov	r4, r1
 8017892:	b118      	cbz	r0, 801789c <__swsetup_r+0x14>
 8017894:	6a03      	ldr	r3, [r0, #32]
 8017896:	b90b      	cbnz	r3, 801789c <__swsetup_r+0x14>
 8017898:	f7fc fd34 	bl	8014304 <__sinit>
 801789c:	89a3      	ldrh	r3, [r4, #12]
 801789e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80178a2:	0718      	lsls	r0, r3, #28
 80178a4:	d422      	bmi.n	80178ec <__swsetup_r+0x64>
 80178a6:	06d9      	lsls	r1, r3, #27
 80178a8:	d407      	bmi.n	80178ba <__swsetup_r+0x32>
 80178aa:	2309      	movs	r3, #9
 80178ac:	602b      	str	r3, [r5, #0]
 80178ae:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80178b2:	81a3      	strh	r3, [r4, #12]
 80178b4:	f04f 30ff 	mov.w	r0, #4294967295
 80178b8:	e034      	b.n	8017924 <__swsetup_r+0x9c>
 80178ba:	0758      	lsls	r0, r3, #29
 80178bc:	d512      	bpl.n	80178e4 <__swsetup_r+0x5c>
 80178be:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80178c0:	b141      	cbz	r1, 80178d4 <__swsetup_r+0x4c>
 80178c2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80178c6:	4299      	cmp	r1, r3
 80178c8:	d002      	beq.n	80178d0 <__swsetup_r+0x48>
 80178ca:	4628      	mov	r0, r5
 80178cc:	f7fd fcd8 	bl	8015280 <_free_r>
 80178d0:	2300      	movs	r3, #0
 80178d2:	6363      	str	r3, [r4, #52]	; 0x34
 80178d4:	89a3      	ldrh	r3, [r4, #12]
 80178d6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80178da:	81a3      	strh	r3, [r4, #12]
 80178dc:	2300      	movs	r3, #0
 80178de:	6063      	str	r3, [r4, #4]
 80178e0:	6923      	ldr	r3, [r4, #16]
 80178e2:	6023      	str	r3, [r4, #0]
 80178e4:	89a3      	ldrh	r3, [r4, #12]
 80178e6:	f043 0308 	orr.w	r3, r3, #8
 80178ea:	81a3      	strh	r3, [r4, #12]
 80178ec:	6923      	ldr	r3, [r4, #16]
 80178ee:	b94b      	cbnz	r3, 8017904 <__swsetup_r+0x7c>
 80178f0:	89a3      	ldrh	r3, [r4, #12]
 80178f2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80178f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80178fa:	d003      	beq.n	8017904 <__swsetup_r+0x7c>
 80178fc:	4621      	mov	r1, r4
 80178fe:	4628      	mov	r0, r5
 8017900:	f000 f884 	bl	8017a0c <__smakebuf_r>
 8017904:	89a0      	ldrh	r0, [r4, #12]
 8017906:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801790a:	f010 0301 	ands.w	r3, r0, #1
 801790e:	d00a      	beq.n	8017926 <__swsetup_r+0x9e>
 8017910:	2300      	movs	r3, #0
 8017912:	60a3      	str	r3, [r4, #8]
 8017914:	6963      	ldr	r3, [r4, #20]
 8017916:	425b      	negs	r3, r3
 8017918:	61a3      	str	r3, [r4, #24]
 801791a:	6923      	ldr	r3, [r4, #16]
 801791c:	b943      	cbnz	r3, 8017930 <__swsetup_r+0xa8>
 801791e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8017922:	d1c4      	bne.n	80178ae <__swsetup_r+0x26>
 8017924:	bd38      	pop	{r3, r4, r5, pc}
 8017926:	0781      	lsls	r1, r0, #30
 8017928:	bf58      	it	pl
 801792a:	6963      	ldrpl	r3, [r4, #20]
 801792c:	60a3      	str	r3, [r4, #8]
 801792e:	e7f4      	b.n	801791a <__swsetup_r+0x92>
 8017930:	2000      	movs	r0, #0
 8017932:	e7f7      	b.n	8017924 <__swsetup_r+0x9c>
 8017934:	2400006c 	.word	0x2400006c

08017938 <_raise_r>:
 8017938:	291f      	cmp	r1, #31
 801793a:	b538      	push	{r3, r4, r5, lr}
 801793c:	4604      	mov	r4, r0
 801793e:	460d      	mov	r5, r1
 8017940:	d904      	bls.n	801794c <_raise_r+0x14>
 8017942:	2316      	movs	r3, #22
 8017944:	6003      	str	r3, [r0, #0]
 8017946:	f04f 30ff 	mov.w	r0, #4294967295
 801794a:	bd38      	pop	{r3, r4, r5, pc}
 801794c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801794e:	b112      	cbz	r2, 8017956 <_raise_r+0x1e>
 8017950:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017954:	b94b      	cbnz	r3, 801796a <_raise_r+0x32>
 8017956:	4620      	mov	r0, r4
 8017958:	f000 f830 	bl	80179bc <_getpid_r>
 801795c:	462a      	mov	r2, r5
 801795e:	4601      	mov	r1, r0
 8017960:	4620      	mov	r0, r4
 8017962:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017966:	f000 b817 	b.w	8017998 <_kill_r>
 801796a:	2b01      	cmp	r3, #1
 801796c:	d00a      	beq.n	8017984 <_raise_r+0x4c>
 801796e:	1c59      	adds	r1, r3, #1
 8017970:	d103      	bne.n	801797a <_raise_r+0x42>
 8017972:	2316      	movs	r3, #22
 8017974:	6003      	str	r3, [r0, #0]
 8017976:	2001      	movs	r0, #1
 8017978:	e7e7      	b.n	801794a <_raise_r+0x12>
 801797a:	2400      	movs	r4, #0
 801797c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8017980:	4628      	mov	r0, r5
 8017982:	4798      	blx	r3
 8017984:	2000      	movs	r0, #0
 8017986:	e7e0      	b.n	801794a <_raise_r+0x12>

08017988 <raise>:
 8017988:	4b02      	ldr	r3, [pc, #8]	; (8017994 <raise+0xc>)
 801798a:	4601      	mov	r1, r0
 801798c:	6818      	ldr	r0, [r3, #0]
 801798e:	f7ff bfd3 	b.w	8017938 <_raise_r>
 8017992:	bf00      	nop
 8017994:	2400006c 	.word	0x2400006c

08017998 <_kill_r>:
 8017998:	b538      	push	{r3, r4, r5, lr}
 801799a:	4d07      	ldr	r5, [pc, #28]	; (80179b8 <_kill_r+0x20>)
 801799c:	2300      	movs	r3, #0
 801799e:	4604      	mov	r4, r0
 80179a0:	4608      	mov	r0, r1
 80179a2:	4611      	mov	r1, r2
 80179a4:	602b      	str	r3, [r5, #0]
 80179a6:	f7eb ffbd 	bl	8003924 <_kill>
 80179aa:	1c43      	adds	r3, r0, #1
 80179ac:	d102      	bne.n	80179b4 <_kill_r+0x1c>
 80179ae:	682b      	ldr	r3, [r5, #0]
 80179b0:	b103      	cbz	r3, 80179b4 <_kill_r+0x1c>
 80179b2:	6023      	str	r3, [r4, #0]
 80179b4:	bd38      	pop	{r3, r4, r5, pc}
 80179b6:	bf00      	nop
 80179b8:	24005748 	.word	0x24005748

080179bc <_getpid_r>:
 80179bc:	f7eb bfaa 	b.w	8003914 <_getpid>

080179c0 <__swhatbuf_r>:
 80179c0:	b570      	push	{r4, r5, r6, lr}
 80179c2:	460c      	mov	r4, r1
 80179c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80179c8:	2900      	cmp	r1, #0
 80179ca:	b096      	sub	sp, #88	; 0x58
 80179cc:	4615      	mov	r5, r2
 80179ce:	461e      	mov	r6, r3
 80179d0:	da0d      	bge.n	80179ee <__swhatbuf_r+0x2e>
 80179d2:	89a3      	ldrh	r3, [r4, #12]
 80179d4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80179d8:	f04f 0100 	mov.w	r1, #0
 80179dc:	bf0c      	ite	eq
 80179de:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80179e2:	2340      	movne	r3, #64	; 0x40
 80179e4:	2000      	movs	r0, #0
 80179e6:	6031      	str	r1, [r6, #0]
 80179e8:	602b      	str	r3, [r5, #0]
 80179ea:	b016      	add	sp, #88	; 0x58
 80179ec:	bd70      	pop	{r4, r5, r6, pc}
 80179ee:	466a      	mov	r2, sp
 80179f0:	f000 f848 	bl	8017a84 <_fstat_r>
 80179f4:	2800      	cmp	r0, #0
 80179f6:	dbec      	blt.n	80179d2 <__swhatbuf_r+0x12>
 80179f8:	9901      	ldr	r1, [sp, #4]
 80179fa:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80179fe:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8017a02:	4259      	negs	r1, r3
 8017a04:	4159      	adcs	r1, r3
 8017a06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017a0a:	e7eb      	b.n	80179e4 <__swhatbuf_r+0x24>

08017a0c <__smakebuf_r>:
 8017a0c:	898b      	ldrh	r3, [r1, #12]
 8017a0e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017a10:	079d      	lsls	r5, r3, #30
 8017a12:	4606      	mov	r6, r0
 8017a14:	460c      	mov	r4, r1
 8017a16:	d507      	bpl.n	8017a28 <__smakebuf_r+0x1c>
 8017a18:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8017a1c:	6023      	str	r3, [r4, #0]
 8017a1e:	6123      	str	r3, [r4, #16]
 8017a20:	2301      	movs	r3, #1
 8017a22:	6163      	str	r3, [r4, #20]
 8017a24:	b002      	add	sp, #8
 8017a26:	bd70      	pop	{r4, r5, r6, pc}
 8017a28:	ab01      	add	r3, sp, #4
 8017a2a:	466a      	mov	r2, sp
 8017a2c:	f7ff ffc8 	bl	80179c0 <__swhatbuf_r>
 8017a30:	9900      	ldr	r1, [sp, #0]
 8017a32:	4605      	mov	r5, r0
 8017a34:	4630      	mov	r0, r6
 8017a36:	f7fb fd0d 	bl	8013454 <_malloc_r>
 8017a3a:	b948      	cbnz	r0, 8017a50 <__smakebuf_r+0x44>
 8017a3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017a40:	059a      	lsls	r2, r3, #22
 8017a42:	d4ef      	bmi.n	8017a24 <__smakebuf_r+0x18>
 8017a44:	f023 0303 	bic.w	r3, r3, #3
 8017a48:	f043 0302 	orr.w	r3, r3, #2
 8017a4c:	81a3      	strh	r3, [r4, #12]
 8017a4e:	e7e3      	b.n	8017a18 <__smakebuf_r+0xc>
 8017a50:	89a3      	ldrh	r3, [r4, #12]
 8017a52:	6020      	str	r0, [r4, #0]
 8017a54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017a58:	81a3      	strh	r3, [r4, #12]
 8017a5a:	9b00      	ldr	r3, [sp, #0]
 8017a5c:	6163      	str	r3, [r4, #20]
 8017a5e:	9b01      	ldr	r3, [sp, #4]
 8017a60:	6120      	str	r0, [r4, #16]
 8017a62:	b15b      	cbz	r3, 8017a7c <__smakebuf_r+0x70>
 8017a64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017a68:	4630      	mov	r0, r6
 8017a6a:	f000 f81d 	bl	8017aa8 <_isatty_r>
 8017a6e:	b128      	cbz	r0, 8017a7c <__smakebuf_r+0x70>
 8017a70:	89a3      	ldrh	r3, [r4, #12]
 8017a72:	f023 0303 	bic.w	r3, r3, #3
 8017a76:	f043 0301 	orr.w	r3, r3, #1
 8017a7a:	81a3      	strh	r3, [r4, #12]
 8017a7c:	89a3      	ldrh	r3, [r4, #12]
 8017a7e:	431d      	orrs	r5, r3
 8017a80:	81a5      	strh	r5, [r4, #12]
 8017a82:	e7cf      	b.n	8017a24 <__smakebuf_r+0x18>

08017a84 <_fstat_r>:
 8017a84:	b538      	push	{r3, r4, r5, lr}
 8017a86:	4d07      	ldr	r5, [pc, #28]	; (8017aa4 <_fstat_r+0x20>)
 8017a88:	2300      	movs	r3, #0
 8017a8a:	4604      	mov	r4, r0
 8017a8c:	4608      	mov	r0, r1
 8017a8e:	4611      	mov	r1, r2
 8017a90:	602b      	str	r3, [r5, #0]
 8017a92:	f7eb ffa6 	bl	80039e2 <_fstat>
 8017a96:	1c43      	adds	r3, r0, #1
 8017a98:	d102      	bne.n	8017aa0 <_fstat_r+0x1c>
 8017a9a:	682b      	ldr	r3, [r5, #0]
 8017a9c:	b103      	cbz	r3, 8017aa0 <_fstat_r+0x1c>
 8017a9e:	6023      	str	r3, [r4, #0]
 8017aa0:	bd38      	pop	{r3, r4, r5, pc}
 8017aa2:	bf00      	nop
 8017aa4:	24005748 	.word	0x24005748

08017aa8 <_isatty_r>:
 8017aa8:	b538      	push	{r3, r4, r5, lr}
 8017aaa:	4d06      	ldr	r5, [pc, #24]	; (8017ac4 <_isatty_r+0x1c>)
 8017aac:	2300      	movs	r3, #0
 8017aae:	4604      	mov	r4, r0
 8017ab0:	4608      	mov	r0, r1
 8017ab2:	602b      	str	r3, [r5, #0]
 8017ab4:	f7eb ffa5 	bl	8003a02 <_isatty>
 8017ab8:	1c43      	adds	r3, r0, #1
 8017aba:	d102      	bne.n	8017ac2 <_isatty_r+0x1a>
 8017abc:	682b      	ldr	r3, [r5, #0]
 8017abe:	b103      	cbz	r3, 8017ac2 <_isatty_r+0x1a>
 8017ac0:	6023      	str	r3, [r4, #0]
 8017ac2:	bd38      	pop	{r3, r4, r5, pc}
 8017ac4:	24005748 	.word	0x24005748

08017ac8 <_init>:
 8017ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017aca:	bf00      	nop
 8017acc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017ace:	bc08      	pop	{r3}
 8017ad0:	469e      	mov	lr, r3
 8017ad2:	4770      	bx	lr

08017ad4 <_fini>:
 8017ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017ad6:	bf00      	nop
 8017ad8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017ada:	bc08      	pop	{r3}
 8017adc:	469e      	mov	lr, r3
 8017ade:	4770      	bx	lr
