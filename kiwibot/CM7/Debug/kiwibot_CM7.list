
kiwibot_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000177c0  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000648  08017a60  08017a60  00027a60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080180a8  080180a8  000301dc  2**0
                  CONTENTS
  4 .ARM          00000008  080180a8  080180a8  000280a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080180b0  080180b0  000301dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080180b0  080180b0  000280b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080180b4  080180b4  000280b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  24000000  080180b8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005574  240001dc  08018294  000301dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24005750  08018294  00035750  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0003020a  2**0
                  CONTENTS, READONLY
 13 .debug_info   00040972  00000000  00000000  0003024d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006917  00000000  00000000  00070bbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000026f0  00000000  00000000  000774d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001e46  00000000  00000000  00079bc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000450d0  00000000  00000000  0007ba0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00034d33  00000000  00000000  000c0ade  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001b2edc  00000000  00000000  000f5811  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000bc48  00000000  00000000  002a86f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  002b4338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001dc 	.word	0x240001dc
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08017a48 	.word	0x08017a48

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001e0 	.word	0x240001e0
 80002dc:	08017a48 	.word	0x08017a48

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	; 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295
 8000718:	f04f 30ff 	movne.w	r0, #4294967295
 800071c:	f000 b9a8 	b.w	8000a70 <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f83e 	bl	80007a8 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__aeabi_d2lz>:
 8000738:	b508      	push	{r3, lr}
 800073a:	4602      	mov	r2, r0
 800073c:	460b      	mov	r3, r1
 800073e:	ec43 2b17 	vmov	d7, r2, r3
 8000742:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800074a:	d403      	bmi.n	8000754 <__aeabi_d2lz+0x1c>
 800074c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000750:	f000 b80a 	b.w	8000768 <__aeabi_d2ulz>
 8000754:	eeb1 7b47 	vneg.f64	d7, d7
 8000758:	ec51 0b17 	vmov	r0, r1, d7
 800075c:	f000 f804 	bl	8000768 <__aeabi_d2ulz>
 8000760:	4240      	negs	r0, r0
 8000762:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000766:	bd08      	pop	{r3, pc}

08000768 <__aeabi_d2ulz>:
 8000768:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000798 <__aeabi_d2ulz+0x30>
 800076c:	ec41 0b17 	vmov	d7, r0, r1
 8000770:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80007a0 <__aeabi_d2ulz+0x38>
 8000774:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000778:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800077c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000780:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000784:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000788:	ee16 1a10 	vmov	r1, s12
 800078c:	ee17 0a90 	vmov	r0, s15
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	f3af 8000 	nop.w
 8000798:	00000000 	.word	0x00000000
 800079c:	3df00000 	.word	0x3df00000
 80007a0:	00000000 	.word	0x00000000
 80007a4:	41f00000 	.word	0x41f00000

080007a8 <__udivmoddi4>:
 80007a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007ac:	9e08      	ldr	r6, [sp, #32]
 80007ae:	460d      	mov	r5, r1
 80007b0:	4604      	mov	r4, r0
 80007b2:	460f      	mov	r7, r1
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d14a      	bne.n	800084e <__udivmoddi4+0xa6>
 80007b8:	428a      	cmp	r2, r1
 80007ba:	4694      	mov	ip, r2
 80007bc:	d965      	bls.n	800088a <__udivmoddi4+0xe2>
 80007be:	fab2 f382 	clz	r3, r2
 80007c2:	b143      	cbz	r3, 80007d6 <__udivmoddi4+0x2e>
 80007c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80007c8:	f1c3 0220 	rsb	r2, r3, #32
 80007cc:	409f      	lsls	r7, r3
 80007ce:	fa20 f202 	lsr.w	r2, r0, r2
 80007d2:	4317      	orrs	r7, r2
 80007d4:	409c      	lsls	r4, r3
 80007d6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80007da:	fa1f f58c 	uxth.w	r5, ip
 80007de:	fbb7 f1fe 	udiv	r1, r7, lr
 80007e2:	0c22      	lsrs	r2, r4, #16
 80007e4:	fb0e 7711 	mls	r7, lr, r1, r7
 80007e8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80007ec:	fb01 f005 	mul.w	r0, r1, r5
 80007f0:	4290      	cmp	r0, r2
 80007f2:	d90a      	bls.n	800080a <__udivmoddi4+0x62>
 80007f4:	eb1c 0202 	adds.w	r2, ip, r2
 80007f8:	f101 37ff 	add.w	r7, r1, #4294967295
 80007fc:	f080 811c 	bcs.w	8000a38 <__udivmoddi4+0x290>
 8000800:	4290      	cmp	r0, r2
 8000802:	f240 8119 	bls.w	8000a38 <__udivmoddi4+0x290>
 8000806:	3902      	subs	r1, #2
 8000808:	4462      	add	r2, ip
 800080a:	1a12      	subs	r2, r2, r0
 800080c:	b2a4      	uxth	r4, r4
 800080e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000812:	fb0e 2210 	mls	r2, lr, r0, r2
 8000816:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800081a:	fb00 f505 	mul.w	r5, r0, r5
 800081e:	42a5      	cmp	r5, r4
 8000820:	d90a      	bls.n	8000838 <__udivmoddi4+0x90>
 8000822:	eb1c 0404 	adds.w	r4, ip, r4
 8000826:	f100 32ff 	add.w	r2, r0, #4294967295
 800082a:	f080 8107 	bcs.w	8000a3c <__udivmoddi4+0x294>
 800082e:	42a5      	cmp	r5, r4
 8000830:	f240 8104 	bls.w	8000a3c <__udivmoddi4+0x294>
 8000834:	4464      	add	r4, ip
 8000836:	3802      	subs	r0, #2
 8000838:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800083c:	1b64      	subs	r4, r4, r5
 800083e:	2100      	movs	r1, #0
 8000840:	b11e      	cbz	r6, 800084a <__udivmoddi4+0xa2>
 8000842:	40dc      	lsrs	r4, r3
 8000844:	2300      	movs	r3, #0
 8000846:	e9c6 4300 	strd	r4, r3, [r6]
 800084a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800084e:	428b      	cmp	r3, r1
 8000850:	d908      	bls.n	8000864 <__udivmoddi4+0xbc>
 8000852:	2e00      	cmp	r6, #0
 8000854:	f000 80ed 	beq.w	8000a32 <__udivmoddi4+0x28a>
 8000858:	2100      	movs	r1, #0
 800085a:	e9c6 0500 	strd	r0, r5, [r6]
 800085e:	4608      	mov	r0, r1
 8000860:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000864:	fab3 f183 	clz	r1, r3
 8000868:	2900      	cmp	r1, #0
 800086a:	d149      	bne.n	8000900 <__udivmoddi4+0x158>
 800086c:	42ab      	cmp	r3, r5
 800086e:	d302      	bcc.n	8000876 <__udivmoddi4+0xce>
 8000870:	4282      	cmp	r2, r0
 8000872:	f200 80f8 	bhi.w	8000a66 <__udivmoddi4+0x2be>
 8000876:	1a84      	subs	r4, r0, r2
 8000878:	eb65 0203 	sbc.w	r2, r5, r3
 800087c:	2001      	movs	r0, #1
 800087e:	4617      	mov	r7, r2
 8000880:	2e00      	cmp	r6, #0
 8000882:	d0e2      	beq.n	800084a <__udivmoddi4+0xa2>
 8000884:	e9c6 4700 	strd	r4, r7, [r6]
 8000888:	e7df      	b.n	800084a <__udivmoddi4+0xa2>
 800088a:	b902      	cbnz	r2, 800088e <__udivmoddi4+0xe6>
 800088c:	deff      	udf	#255	; 0xff
 800088e:	fab2 f382 	clz	r3, r2
 8000892:	2b00      	cmp	r3, #0
 8000894:	f040 8090 	bne.w	80009b8 <__udivmoddi4+0x210>
 8000898:	1a8a      	subs	r2, r1, r2
 800089a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800089e:	fa1f fe8c 	uxth.w	lr, ip
 80008a2:	2101      	movs	r1, #1
 80008a4:	fbb2 f5f7 	udiv	r5, r2, r7
 80008a8:	fb07 2015 	mls	r0, r7, r5, r2
 80008ac:	0c22      	lsrs	r2, r4, #16
 80008ae:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80008b2:	fb0e f005 	mul.w	r0, lr, r5
 80008b6:	4290      	cmp	r0, r2
 80008b8:	d908      	bls.n	80008cc <__udivmoddi4+0x124>
 80008ba:	eb1c 0202 	adds.w	r2, ip, r2
 80008be:	f105 38ff 	add.w	r8, r5, #4294967295
 80008c2:	d202      	bcs.n	80008ca <__udivmoddi4+0x122>
 80008c4:	4290      	cmp	r0, r2
 80008c6:	f200 80cb 	bhi.w	8000a60 <__udivmoddi4+0x2b8>
 80008ca:	4645      	mov	r5, r8
 80008cc:	1a12      	subs	r2, r2, r0
 80008ce:	b2a4      	uxth	r4, r4
 80008d0:	fbb2 f0f7 	udiv	r0, r2, r7
 80008d4:	fb07 2210 	mls	r2, r7, r0, r2
 80008d8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80008dc:	fb0e fe00 	mul.w	lr, lr, r0
 80008e0:	45a6      	cmp	lr, r4
 80008e2:	d908      	bls.n	80008f6 <__udivmoddi4+0x14e>
 80008e4:	eb1c 0404 	adds.w	r4, ip, r4
 80008e8:	f100 32ff 	add.w	r2, r0, #4294967295
 80008ec:	d202      	bcs.n	80008f4 <__udivmoddi4+0x14c>
 80008ee:	45a6      	cmp	lr, r4
 80008f0:	f200 80bb 	bhi.w	8000a6a <__udivmoddi4+0x2c2>
 80008f4:	4610      	mov	r0, r2
 80008f6:	eba4 040e 	sub.w	r4, r4, lr
 80008fa:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80008fe:	e79f      	b.n	8000840 <__udivmoddi4+0x98>
 8000900:	f1c1 0720 	rsb	r7, r1, #32
 8000904:	408b      	lsls	r3, r1
 8000906:	fa22 fc07 	lsr.w	ip, r2, r7
 800090a:	ea4c 0c03 	orr.w	ip, ip, r3
 800090e:	fa05 f401 	lsl.w	r4, r5, r1
 8000912:	fa20 f307 	lsr.w	r3, r0, r7
 8000916:	40fd      	lsrs	r5, r7
 8000918:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800091c:	4323      	orrs	r3, r4
 800091e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000922:	fa1f fe8c 	uxth.w	lr, ip
 8000926:	fb09 5518 	mls	r5, r9, r8, r5
 800092a:	0c1c      	lsrs	r4, r3, #16
 800092c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000930:	fb08 f50e 	mul.w	r5, r8, lr
 8000934:	42a5      	cmp	r5, r4
 8000936:	fa02 f201 	lsl.w	r2, r2, r1
 800093a:	fa00 f001 	lsl.w	r0, r0, r1
 800093e:	d90b      	bls.n	8000958 <__udivmoddi4+0x1b0>
 8000940:	eb1c 0404 	adds.w	r4, ip, r4
 8000944:	f108 3aff 	add.w	sl, r8, #4294967295
 8000948:	f080 8088 	bcs.w	8000a5c <__udivmoddi4+0x2b4>
 800094c:	42a5      	cmp	r5, r4
 800094e:	f240 8085 	bls.w	8000a5c <__udivmoddi4+0x2b4>
 8000952:	f1a8 0802 	sub.w	r8, r8, #2
 8000956:	4464      	add	r4, ip
 8000958:	1b64      	subs	r4, r4, r5
 800095a:	b29d      	uxth	r5, r3
 800095c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000960:	fb09 4413 	mls	r4, r9, r3, r4
 8000964:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000968:	fb03 fe0e 	mul.w	lr, r3, lr
 800096c:	45a6      	cmp	lr, r4
 800096e:	d908      	bls.n	8000982 <__udivmoddi4+0x1da>
 8000970:	eb1c 0404 	adds.w	r4, ip, r4
 8000974:	f103 35ff 	add.w	r5, r3, #4294967295
 8000978:	d26c      	bcs.n	8000a54 <__udivmoddi4+0x2ac>
 800097a:	45a6      	cmp	lr, r4
 800097c:	d96a      	bls.n	8000a54 <__udivmoddi4+0x2ac>
 800097e:	3b02      	subs	r3, #2
 8000980:	4464      	add	r4, ip
 8000982:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000986:	fba3 9502 	umull	r9, r5, r3, r2
 800098a:	eba4 040e 	sub.w	r4, r4, lr
 800098e:	42ac      	cmp	r4, r5
 8000990:	46c8      	mov	r8, r9
 8000992:	46ae      	mov	lr, r5
 8000994:	d356      	bcc.n	8000a44 <__udivmoddi4+0x29c>
 8000996:	d053      	beq.n	8000a40 <__udivmoddi4+0x298>
 8000998:	b156      	cbz	r6, 80009b0 <__udivmoddi4+0x208>
 800099a:	ebb0 0208 	subs.w	r2, r0, r8
 800099e:	eb64 040e 	sbc.w	r4, r4, lr
 80009a2:	fa04 f707 	lsl.w	r7, r4, r7
 80009a6:	40ca      	lsrs	r2, r1
 80009a8:	40cc      	lsrs	r4, r1
 80009aa:	4317      	orrs	r7, r2
 80009ac:	e9c6 7400 	strd	r7, r4, [r6]
 80009b0:	4618      	mov	r0, r3
 80009b2:	2100      	movs	r1, #0
 80009b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009b8:	f1c3 0120 	rsb	r1, r3, #32
 80009bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80009c0:	fa20 f201 	lsr.w	r2, r0, r1
 80009c4:	fa25 f101 	lsr.w	r1, r5, r1
 80009c8:	409d      	lsls	r5, r3
 80009ca:	432a      	orrs	r2, r5
 80009cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009d0:	fa1f fe8c 	uxth.w	lr, ip
 80009d4:	fbb1 f0f7 	udiv	r0, r1, r7
 80009d8:	fb07 1510 	mls	r5, r7, r0, r1
 80009dc:	0c11      	lsrs	r1, r2, #16
 80009de:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80009e2:	fb00 f50e 	mul.w	r5, r0, lr
 80009e6:	428d      	cmp	r5, r1
 80009e8:	fa04 f403 	lsl.w	r4, r4, r3
 80009ec:	d908      	bls.n	8000a00 <__udivmoddi4+0x258>
 80009ee:	eb1c 0101 	adds.w	r1, ip, r1
 80009f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80009f6:	d22f      	bcs.n	8000a58 <__udivmoddi4+0x2b0>
 80009f8:	428d      	cmp	r5, r1
 80009fa:	d92d      	bls.n	8000a58 <__udivmoddi4+0x2b0>
 80009fc:	3802      	subs	r0, #2
 80009fe:	4461      	add	r1, ip
 8000a00:	1b49      	subs	r1, r1, r5
 8000a02:	b292      	uxth	r2, r2
 8000a04:	fbb1 f5f7 	udiv	r5, r1, r7
 8000a08:	fb07 1115 	mls	r1, r7, r5, r1
 8000a0c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000a10:	fb05 f10e 	mul.w	r1, r5, lr
 8000a14:	4291      	cmp	r1, r2
 8000a16:	d908      	bls.n	8000a2a <__udivmoddi4+0x282>
 8000a18:	eb1c 0202 	adds.w	r2, ip, r2
 8000a1c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000a20:	d216      	bcs.n	8000a50 <__udivmoddi4+0x2a8>
 8000a22:	4291      	cmp	r1, r2
 8000a24:	d914      	bls.n	8000a50 <__udivmoddi4+0x2a8>
 8000a26:	3d02      	subs	r5, #2
 8000a28:	4462      	add	r2, ip
 8000a2a:	1a52      	subs	r2, r2, r1
 8000a2c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000a30:	e738      	b.n	80008a4 <__udivmoddi4+0xfc>
 8000a32:	4631      	mov	r1, r6
 8000a34:	4630      	mov	r0, r6
 8000a36:	e708      	b.n	800084a <__udivmoddi4+0xa2>
 8000a38:	4639      	mov	r1, r7
 8000a3a:	e6e6      	b.n	800080a <__udivmoddi4+0x62>
 8000a3c:	4610      	mov	r0, r2
 8000a3e:	e6fb      	b.n	8000838 <__udivmoddi4+0x90>
 8000a40:	4548      	cmp	r0, r9
 8000a42:	d2a9      	bcs.n	8000998 <__udivmoddi4+0x1f0>
 8000a44:	ebb9 0802 	subs.w	r8, r9, r2
 8000a48:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000a4c:	3b01      	subs	r3, #1
 8000a4e:	e7a3      	b.n	8000998 <__udivmoddi4+0x1f0>
 8000a50:	4645      	mov	r5, r8
 8000a52:	e7ea      	b.n	8000a2a <__udivmoddi4+0x282>
 8000a54:	462b      	mov	r3, r5
 8000a56:	e794      	b.n	8000982 <__udivmoddi4+0x1da>
 8000a58:	4640      	mov	r0, r8
 8000a5a:	e7d1      	b.n	8000a00 <__udivmoddi4+0x258>
 8000a5c:	46d0      	mov	r8, sl
 8000a5e:	e77b      	b.n	8000958 <__udivmoddi4+0x1b0>
 8000a60:	3d02      	subs	r5, #2
 8000a62:	4462      	add	r2, ip
 8000a64:	e732      	b.n	80008cc <__udivmoddi4+0x124>
 8000a66:	4608      	mov	r0, r1
 8000a68:	e70a      	b.n	8000880 <__udivmoddi4+0xd8>
 8000a6a:	4464      	add	r4, ip
 8000a6c:	3802      	subs	r0, #2
 8000a6e:	e742      	b.n	80008f6 <__udivmoddi4+0x14e>

08000a70 <__aeabi_idiv0>:
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop

08000a74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a78:	4b3d      	ldr	r3, [pc, #244]	; (8000b70 <SystemInit+0xfc>)
 8000a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a7e:	4a3c      	ldr	r2, [pc, #240]	; (8000b70 <SystemInit+0xfc>)
 8000a80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000a88:	4b39      	ldr	r3, [pc, #228]	; (8000b70 <SystemInit+0xfc>)
 8000a8a:	691b      	ldr	r3, [r3, #16]
 8000a8c:	4a38      	ldr	r2, [pc, #224]	; (8000b70 <SystemInit+0xfc>)
 8000a8e:	f043 0310 	orr.w	r3, r3, #16
 8000a92:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000a94:	4b37      	ldr	r3, [pc, #220]	; (8000b74 <SystemInit+0x100>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	f003 030f 	and.w	r3, r3, #15
 8000a9c:	2b06      	cmp	r3, #6
 8000a9e:	d807      	bhi.n	8000ab0 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000aa0:	4b34      	ldr	r3, [pc, #208]	; (8000b74 <SystemInit+0x100>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	f023 030f 	bic.w	r3, r3, #15
 8000aa8:	4a32      	ldr	r2, [pc, #200]	; (8000b74 <SystemInit+0x100>)
 8000aaa:	f043 0307 	orr.w	r3, r3, #7
 8000aae:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000ab0:	4b31      	ldr	r3, [pc, #196]	; (8000b78 <SystemInit+0x104>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a30      	ldr	r2, [pc, #192]	; (8000b78 <SystemInit+0x104>)
 8000ab6:	f043 0301 	orr.w	r3, r3, #1
 8000aba:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000abc:	4b2e      	ldr	r3, [pc, #184]	; (8000b78 <SystemInit+0x104>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000ac2:	4b2d      	ldr	r3, [pc, #180]	; (8000b78 <SystemInit+0x104>)
 8000ac4:	681a      	ldr	r2, [r3, #0]
 8000ac6:	492c      	ldr	r1, [pc, #176]	; (8000b78 <SystemInit+0x104>)
 8000ac8:	4b2c      	ldr	r3, [pc, #176]	; (8000b7c <SystemInit+0x108>)
 8000aca:	4013      	ands	r3, r2
 8000acc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ace:	4b29      	ldr	r3, [pc, #164]	; (8000b74 <SystemInit+0x100>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	f003 0308 	and.w	r3, r3, #8
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d007      	beq.n	8000aea <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ada:	4b26      	ldr	r3, [pc, #152]	; (8000b74 <SystemInit+0x100>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	f023 030f 	bic.w	r3, r3, #15
 8000ae2:	4a24      	ldr	r2, [pc, #144]	; (8000b74 <SystemInit+0x100>)
 8000ae4:	f043 0307 	orr.w	r3, r3, #7
 8000ae8:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000aea:	4b23      	ldr	r3, [pc, #140]	; (8000b78 <SystemInit+0x104>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000af0:	4b21      	ldr	r3, [pc, #132]	; (8000b78 <SystemInit+0x104>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000af6:	4b20      	ldr	r3, [pc, #128]	; (8000b78 <SystemInit+0x104>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000afc:	4b1e      	ldr	r3, [pc, #120]	; (8000b78 <SystemInit+0x104>)
 8000afe:	4a20      	ldr	r2, [pc, #128]	; (8000b80 <SystemInit+0x10c>)
 8000b00:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000b02:	4b1d      	ldr	r3, [pc, #116]	; (8000b78 <SystemInit+0x104>)
 8000b04:	4a1f      	ldr	r2, [pc, #124]	; (8000b84 <SystemInit+0x110>)
 8000b06:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000b08:	4b1b      	ldr	r3, [pc, #108]	; (8000b78 <SystemInit+0x104>)
 8000b0a:	4a1f      	ldr	r2, [pc, #124]	; (8000b88 <SystemInit+0x114>)
 8000b0c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000b0e:	4b1a      	ldr	r3, [pc, #104]	; (8000b78 <SystemInit+0x104>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000b14:	4b18      	ldr	r3, [pc, #96]	; (8000b78 <SystemInit+0x104>)
 8000b16:	4a1c      	ldr	r2, [pc, #112]	; (8000b88 <SystemInit+0x114>)
 8000b18:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000b1a:	4b17      	ldr	r3, [pc, #92]	; (8000b78 <SystemInit+0x104>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000b20:	4b15      	ldr	r3, [pc, #84]	; (8000b78 <SystemInit+0x104>)
 8000b22:	4a19      	ldr	r2, [pc, #100]	; (8000b88 <SystemInit+0x114>)
 8000b24:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000b26:	4b14      	ldr	r3, [pc, #80]	; (8000b78 <SystemInit+0x104>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b2c:	4b12      	ldr	r3, [pc, #72]	; (8000b78 <SystemInit+0x104>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a11      	ldr	r2, [pc, #68]	; (8000b78 <SystemInit+0x104>)
 8000b32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b36:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000b38:	4b0f      	ldr	r3, [pc, #60]	; (8000b78 <SystemInit+0x104>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000b3e:	4b13      	ldr	r3, [pc, #76]	; (8000b8c <SystemInit+0x118>)
 8000b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b42:	4a12      	ldr	r2, [pc, #72]	; (8000b8c <SystemInit+0x118>)
 8000b44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b48:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000b4a:	4b11      	ldr	r3, [pc, #68]	; (8000b90 <SystemInit+0x11c>)
 8000b4c:	681a      	ldr	r2, [r3, #0]
 8000b4e:	4b11      	ldr	r3, [pc, #68]	; (8000b94 <SystemInit+0x120>)
 8000b50:	4013      	ands	r3, r2
 8000b52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000b56:	d202      	bcs.n	8000b5e <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000b58:	4b0f      	ldr	r3, [pc, #60]	; (8000b98 <SystemInit+0x124>)
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000b5e:	4b0f      	ldr	r3, [pc, #60]	; (8000b9c <SystemInit+0x128>)
 8000b60:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000b64:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000b66:	bf00      	nop
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr
 8000b70:	e000ed00 	.word	0xe000ed00
 8000b74:	52002000 	.word	0x52002000
 8000b78:	58024400 	.word	0x58024400
 8000b7c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000b80:	02020200 	.word	0x02020200
 8000b84:	01ff0000 	.word	0x01ff0000
 8000b88:	01010280 	.word	0x01010280
 8000b8c:	580000c0 	.word	0x580000c0
 8000b90:	5c001000 	.word	0x5c001000
 8000b94:	ffff0000 	.word	0xffff0000
 8000b98:	51008108 	.word	0x51008108
 8000b9c:	52004000 	.word	0x52004000

08000ba0 <_ZSt4ceilf>:
  using ::ceil;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  ceil(float __x)
  { return __builtin_ceilf(__x); }
 8000ba0:	b480      	push	{r7}
 8000ba2:	b083      	sub	sp, #12
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	ed87 0a01 	vstr	s0, [r7, #4]
 8000baa:	edd7 7a01 	vldr	s15, [r7, #4]
 8000bae:	fefa 7a67 	vrintp.f32	s15, s15
 8000bb2:	eeb0 0a67 	vmov.f32	s0, s15
 8000bb6:	370c      	adds	r7, #12
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr

08000bc0 <_ZN10LL_Control7EncoderC1EP17TIM_HandleTypeDefi>:
 *      Author: josue
 */

#include "Encoder.hpp"

LL_Control::Encoder::Encoder(TIM_HandleTypeDef * htim, int int_freq) {
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b084      	sub	sp, #16
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	60f8      	str	r0, [r7, #12]
 8000bc8:	60b9      	str	r1, [r7, #8]
 8000bca:	607a      	str	r2, [r7, #4]
 8000bcc:	4a09      	ldr	r2, [pc, #36]	; (8000bf4 <_ZN10LL_Control7EncoderC1EP17TIM_HandleTypeDefi+0x34>)
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	601a      	str	r2, [r3, #0]

	// Assignments
	this->htimCounter = htim;
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	68ba      	ldr	r2, [r7, #8]
 8000bd6:	605a      	str	r2, [r3, #4]
	this->int_freq = int_freq;
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	687a      	ldr	r2, [r7, #4]
 8000bdc:	611a      	str	r2, [r3, #16]

	set_encoderRes (537.667);
 8000bde:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8000bf8 <_ZN10LL_Control7EncoderC1EP17TIM_HandleTypeDefi+0x38>
 8000be2:	68f8      	ldr	r0, [r7, #12]
 8000be4:	f000 f838 	bl	8000c58 <_ZN10LL_Control7Encoder14set_encoderResEf>

}
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	4618      	mov	r0, r3
 8000bec:	3710      	adds	r7, #16
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	08017b48 	.word	0x08017b48
 8000bf8:	44066ab0 	.word	0x44066ab0

08000bfc <_ZN10LL_Control7EncoderD1Ev>:
LL_Control::Encoder::Encoder(){

}
LL_Control::Encoder::~Encoder() {
 8000bfc:	b480      	push	{r7}
 8000bfe:	b083      	sub	sp, #12
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
 8000c04:	4a04      	ldr	r2, [pc, #16]	; (8000c18 <_ZN10LL_Control7EncoderD1Ev+0x1c>)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	370c      	adds	r7, #12
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr
 8000c18:	08017b48 	.word	0x08017b48

08000c1c <_ZN10LL_Control7EncoderD0Ev>:
LL_Control::Encoder::~Encoder() {
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
}
 8000c24:	6878      	ldr	r0, [r7, #4]
 8000c26:	f7ff ffe9 	bl	8000bfc <_ZN10LL_Control7EncoderD1Ev>
 8000c2a:	211c      	movs	r1, #28
 8000c2c:	6878      	ldr	r0, [r7, #4]
 8000c2e:	f012 fb9d 	bl	801336c <_ZdlPvj>
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	4618      	mov	r0, r3
 8000c36:	3708      	adds	r7, #8
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}

08000c3c <_ZN10LL_Control7Encoder11set_ticksPREi>:
void LL_Control::Encoder::set_ticksPR(int ticks){
 8000c3c:	b480      	push	{r7}
 8000c3e:	b083      	sub	sp, #12
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
 8000c44:	6039      	str	r1, [r7, #0]
	ticksPerRevolution = ticks;
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	683a      	ldr	r2, [r7, #0]
 8000c4a:	60da      	str	r2, [r3, #12]
}
 8000c4c:	bf00      	nop
 8000c4e:	370c      	adds	r7, #12
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr

08000c58 <_ZN10LL_Control7Encoder14set_encoderResEf>:
void LL_Control::Encoder::set_encoderRes(float res){
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
 8000c60:	ed87 0a00 	vstr	s0, [r7]
	encoderRes = res;
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	683a      	ldr	r2, [r7, #0]
 8000c68:	609a      	str	r2, [r3, #8]
	set_ticksPR((int) std::ceil(res) );
 8000c6a:	ed97 0a00 	vldr	s0, [r7]
 8000c6e:	f7ff ff97 	bl	8000ba0 <_ZSt4ceilf>
 8000c72:	eef0 7a40 	vmov.f32	s15, s0
 8000c76:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c7a:	ee17 1a90 	vmov	r1, s15
 8000c7e:	6878      	ldr	r0, [r7, #4]
 8000c80:	f7ff ffdc 	bl	8000c3c <_ZN10LL_Control7Encoder11set_ticksPREi>
}
 8000c84:	bf00      	nop
 8000c86:	3708      	adds	r7, #8
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}

08000c8c <_ZN10LL_Control7Encoder7get_velEv>:
float LL_Control::Encoder::get_vel(){
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
	return vel;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	699b      	ldr	r3, [r3, #24]
 8000c98:	ee07 3a90 	vmov	s15, r3
}
 8000c9c:	eeb0 0a67 	vmov.f32	s0, s15
 8000ca0:	370c      	adds	r7, #12
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr

08000caa <_ZN10LL_Control7Encoder13get_frequencyEv>:

int LL_Control::Encoder::get_frequency(){
 8000caa:	b480      	push	{r7}
 8000cac:	b083      	sub	sp, #12
 8000cae:	af00      	add	r7, sp, #0
 8000cb0:	6078      	str	r0, [r7, #4]
	return int_freq;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	691b      	ldr	r3, [r3, #16]
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	370c      	adds	r7, #12
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
	...

08000cc4 <_ZN10LL_Control7Encoder6updateEv>:

void LL_Control::Encoder::update(){
 8000cc4:	b480      	push	{r7}
 8000cc6:	b085      	sub	sp, #20
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]

	//HAL_GPIO_WritePin (GPIOE, GPIO_PIN_1, GPIO_PIN_SET);

	int tick =__HAL_TIM_GET_COUNTER(htimCounter);
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cd4:	60fb      	str	r3, [r7, #12]
	//int tick = htimCounter->Instance->CNT;

	// Code to avoid jumps when a revolution is completed
		// This basically happens when the encoder value changes drastically
		// from the last value to the new one
	if (std::abs(lastTick - tick) > ticksPerRevolution - 1){
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	68da      	ldr	r2, [r3, #12]
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	6959      	ldr	r1, [r3, #20]
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	1acb      	subs	r3, r1, r3
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	bfb8      	it	lt
 8000ce6:	425b      	neglt	r3, r3
 8000ce8:	429a      	cmp	r2, r3
 8000cea:	dc04      	bgt.n	8000cf6 <_ZN10LL_Control7Encoder6updateEv+0x32>
		tick -= ticksPerRevolution;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	68db      	ldr	r3, [r3, #12]
 8000cf0:	68fa      	ldr	r2, [r7, #12]
 8000cf2:	1ad3      	subs	r3, r2, r3
 8000cf4:	60fb      	str	r3, [r7, #12]
	}

	// Update angular velocities:
	//w_rightWheel = 2*pi*(lastTick_r - tick_r)/(encoderTickpRev*(0.02));
	vel = 2*pi*(lastTick - tick)*1000/(encoderRes*int_freq);
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	695a      	ldr	r2, [r3, #20]
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	1ad3      	subs	r3, r2, r3
 8000cfe:	ee07 3a90 	vmov	s15, r3
 8000d02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d06:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8000d48 <_ZN10LL_Control7Encoder6updateEv+0x84>
 8000d0a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d0e:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8000d4c <_ZN10LL_Control7Encoder6updateEv+0x88>
 8000d12:	ee67 6a87 	vmul.f32	s13, s15, s14
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	ed93 7a02 	vldr	s14, [r3, #8]
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	691b      	ldr	r3, [r3, #16]
 8000d20:	ee07 3a90 	vmov	s15, r3
 8000d24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d28:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000d2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	edc3 7a06 	vstr	s15, [r3, #24]

	// Update last readout
	lastTick = tick;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	68fa      	ldr	r2, [r7, #12]
 8000d3a:	615a      	str	r2, [r3, #20]
}
 8000d3c:	bf00      	nop
 8000d3e:	3714      	adds	r7, #20
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr
 8000d48:	40c90ff9 	.word	0x40c90ff9
 8000d4c:	447a0000 	.word	0x447a0000

08000d50 <_ZN8JoystickC1EP17ADC_HandleTypeDefS1_>:
 *      Author: serfa
 */

#include "Joystick.hpp"

Joystick::Joystick(ADC_HandleTypeDef *_hadc1, ADC_HandleTypeDef *_hadc2) {
 8000d50:	b480      	push	{r7}
 8000d52:	b085      	sub	sp, #20
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	60f8      	str	r0, [r7, #12]
 8000d58:	60b9      	str	r1, [r7, #8]
 8000d5a:	607a      	str	r2, [r7, #4]
	hadc1 = _hadc1;
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	68ba      	ldr	r2, [r7, #8]
 8000d60:	605a      	str	r2, [r3, #4]
	hadc2 = _hadc2;
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	687a      	ldr	r2, [r7, #4]
 8000d66:	609a      	str	r2, [r3, #8]
    out_min = -1;
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	f04f 32ff 	mov.w	r2, #4294967295
 8000d6e:	629a      	str	r2, [r3, #40]	; 0x28
    out_max =  1;
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	2201      	movs	r2, #1
 8000d74:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	4618      	mov	r0, r3
 8000d7a:	3714      	adds	r7, #20
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr

08000d84 <_ZN8Joystick4readEv>:
void Joystick::read(){
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start(hadc1);
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	4618      	mov	r0, r3
 8000d92:	f003 fa7b 	bl	800428c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(hadc1, HAL_MAX_DELAY);
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	f04f 31ff 	mov.w	r1, #4294967295
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f003 fb3e 	bl	8004420 <HAL_ADC_PollForConversion>
    x_adc = HAL_ADC_GetValue(hadc1);
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	4618      	mov	r0, r3
 8000daa:	f003 fc2d 	bl	8004608 <HAL_ADC_GetValue>
 8000dae:	4603      	mov	r3, r0
 8000db0:	b29a      	uxth	r2, r3
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	819a      	strh	r2, [r3, #12]
    x_axis = x_adc / 1000;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	899b      	ldrh	r3, [r3, #12]
 8000dba:	4a19      	ldr	r2, [pc, #100]	; (8000e20 <_ZN8Joystick4readEv+0x9c>)
 8000dbc:	fba2 2303 	umull	r2, r3, r2, r3
 8000dc0:	099b      	lsrs	r3, r3, #6
 8000dc2:	b29b      	uxth	r3, r3
 8000dc4:	ee07 3a90 	vmov	s15, r3
 8000dc8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	edc3 7a04 	vstr	s15, [r3, #16]
    HAL_ADC_Start(hadc2);
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	689b      	ldr	r3, [r3, #8]
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f003 fa58 	bl	800428c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(hadc2, HAL_MAX_DELAY);
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	689b      	ldr	r3, [r3, #8]
 8000de0:	f04f 31ff 	mov.w	r1, #4294967295
 8000de4:	4618      	mov	r0, r3
 8000de6:	f003 fb1b 	bl	8004420 <HAL_ADC_PollForConversion>
    y_adc = HAL_ADC_GetValue(hadc2);
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	689b      	ldr	r3, [r3, #8]
 8000dee:	4618      	mov	r0, r3
 8000df0:	f003 fc0a 	bl	8004608 <HAL_ADC_GetValue>
 8000df4:	4603      	mov	r3, r0
 8000df6:	b29a      	uxth	r2, r3
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	81da      	strh	r2, [r3, #14]
    y_axis = y_adc / 1000;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	89db      	ldrh	r3, [r3, #14]
 8000e00:	4a07      	ldr	r2, [pc, #28]	; (8000e20 <_ZN8Joystick4readEv+0x9c>)
 8000e02:	fba2 2303 	umull	r2, r3, r2, r3
 8000e06:	099b      	lsrs	r3, r3, #6
 8000e08:	b29b      	uxth	r3, r3
 8000e0a:	ee07 3a90 	vmov	s15, r3
 8000e0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	edc3 7a05 	vstr	s15, [r3, #20]
}
 8000e18:	bf00      	nop
 8000e1a:	3708      	adds	r7, #8
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	10624dd3 	.word	0x10624dd3

08000e24 <_ZN8Joystick3mapEfii>:
float Joystick::map(float x, int in_min, int in_max){
 8000e24:	b480      	push	{r7}
 8000e26:	b085      	sub	sp, #20
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	60f8      	str	r0, [r7, #12]
 8000e2c:	ed87 0a02 	vstr	s0, [r7, #8]
 8000e30:	6079      	str	r1, [r7, #4]
 8000e32:	603a      	str	r2, [r7, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	ee07 3a90 	vmov	s15, r3
 8000e3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e3e:	ed97 7a02 	vldr	s14, [r7, #8]
 8000e42:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e4e:	1ad3      	subs	r3, r2, r3
 8000e50:	ee07 3a90 	vmov	s15, r3
 8000e54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e58:	ee67 6a27 	vmul.f32	s13, s14, s15
 8000e5c:	683a      	ldr	r2, [r7, #0]
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	1ad3      	subs	r3, r2, r3
 8000e62:	ee07 3a90 	vmov	s15, r3
 8000e66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e72:	ee07 3a90 	vmov	s15, r3
 8000e76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e7a:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8000e7e:	eeb0 0a67 	vmov.f32	s0, s15
 8000e82:	3714      	adds	r7, #20
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr

08000e8c <_ZN8Joystick7set_posEv>:
void Joystick::set_pos(){
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
	x_pos = map(x_axis, 25, 65);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	edd3 7a04 	vldr	s15, [r3, #16]
 8000e9a:	2241      	movs	r2, #65	; 0x41
 8000e9c:	2119      	movs	r1, #25
 8000e9e:	eeb0 0a67 	vmov.f32	s0, s15
 8000ea2:	6878      	ldr	r0, [r7, #4]
 8000ea4:	f7ff ffbe 	bl	8000e24 <_ZN8Joystick3mapEfii>
 8000ea8:	eef0 7a40 	vmov.f32	s15, s0
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	edc3 7a06 	vstr	s15, [r3, #24]
	y_pos = map(y_axis, 1, 65);
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	edd3 7a05 	vldr	s15, [r3, #20]
 8000eb8:	2241      	movs	r2, #65	; 0x41
 8000eba:	2101      	movs	r1, #1
 8000ebc:	eeb0 0a67 	vmov.f32	s0, s15
 8000ec0:	6878      	ldr	r0, [r7, #4]
 8000ec2:	f7ff ffaf 	bl	8000e24 <_ZN8Joystick3mapEfii>
 8000ec6:	eef0 7a40 	vmov.f32	s15, s0
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	edc3 7a07 	vstr	s15, [r3, #28]

	if(x_pos < -1){
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	edd3 7a06 	vldr	s15, [r3, #24]
 8000ed6:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8000eda:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ede:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ee2:	d502      	bpl.n	8000eea <_ZN8Joystick7set_posEv+0x5e>
	    	x_pos = -1;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	4a30      	ldr	r2, [pc, #192]	; (8000fa8 <_ZN8Joystick7set_posEv+0x11c>)
 8000ee8:	619a      	str	r2, [r3, #24]
	}
	if(y_pos < -1){
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	edd3 7a07 	vldr	s15, [r3, #28]
 8000ef0:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8000ef4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ef8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000efc:	d502      	bpl.n	8000f04 <_ZN8Joystick7set_posEv+0x78>
	        y_pos = -1;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	4a29      	ldr	r2, [pc, #164]	; (8000fa8 <_ZN8Joystick7set_posEv+0x11c>)
 8000f02:	61da      	str	r2, [r3, #28]
	}
	if(x_pos > 1){
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	edd3 7a06 	vldr	s15, [r3, #24]
 8000f0a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000f0e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f16:	dd03      	ble.n	8000f20 <_ZN8Joystick7set_posEv+0x94>
	    	x_pos = 1;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000f1e:	619a      	str	r2, [r3, #24]
	}
	if(y_pos > 1){
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	edd3 7a07 	vldr	s15, [r3, #28]
 8000f26:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000f2a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f32:	dd03      	ble.n	8000f3c <_ZN8Joystick7set_posEv+0xb0>
	        y_pos = 1;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000f3a:	61da      	str	r2, [r3, #28]
	}

	if((x_axis < 50) && (x_axis > 20)){
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	edd3 7a04 	vldr	s15, [r3, #16]
 8000f42:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8000fac <_ZN8Joystick7set_posEv+0x120>
 8000f46:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f4e:	d50d      	bpl.n	8000f6c <_ZN8Joystick7set_posEv+0xe0>
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	edd3 7a04 	vldr	s15, [r3, #16]
 8000f56:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8000f5a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f62:	dd03      	ble.n	8000f6c <_ZN8Joystick7set_posEv+0xe0>
		x_pos = 0;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	f04f 0200 	mov.w	r2, #0
 8000f6a:	619a      	str	r2, [r3, #24]
	}
	if((y_axis < 50) && (y_axis > 20)){
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	edd3 7a05 	vldr	s15, [r3, #20]
 8000f72:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8000fac <_ZN8Joystick7set_posEv+0x120>
 8000f76:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f7e:	d400      	bmi.n	8000f82 <_ZN8Joystick7set_posEv+0xf6>
	    y_pos = 0;
	}

}
 8000f80:	e00e      	b.n	8000fa0 <_ZN8Joystick7set_posEv+0x114>
	if((y_axis < 50) && (y_axis > 20)){
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	edd3 7a05 	vldr	s15, [r3, #20]
 8000f88:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8000f8c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f94:	dc00      	bgt.n	8000f98 <_ZN8Joystick7set_posEv+0x10c>
}
 8000f96:	e003      	b.n	8000fa0 <_ZN8Joystick7set_posEv+0x114>
	    y_pos = 0;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	f04f 0200 	mov.w	r2, #0
 8000f9e:	61da      	str	r2, [r3, #28]
}
 8000fa0:	bf00      	nop
 8000fa2:	3708      	adds	r7, #8
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	bf800000 	.word	0xbf800000
 8000fac:	42480000 	.word	0x42480000

08000fb0 <_ZN8Joystick8get_xPosEv>:
float Joystick::get_xPos(){
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
	return x_pos;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	699b      	ldr	r3, [r3, #24]
 8000fbc:	ee07 3a90 	vmov	s15, r3
}
 8000fc0:	eeb0 0a67 	vmov.f32	s0, s15
 8000fc4:	370c      	adds	r7, #12
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr

08000fce <_ZN8Joystick8get_yPosEv>:
float Joystick::get_yPos(){
 8000fce:	b480      	push	{r7}
 8000fd0:	b083      	sub	sp, #12
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	6078      	str	r0, [r7, #4]
	return y_pos;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	69db      	ldr	r3, [r3, #28]
 8000fda:	ee07 3a90 	vmov	s15, r3
}
 8000fde:	eeb0 0a67 	vmov.f32	s0, s15
 8000fe2:	370c      	adds	r7, #12
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr

08000fec <_ZN8Joystick8get_xADCEv>:
uint16_t Joystick::get_xADC()
{
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
	return x_adc;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	899b      	ldrh	r3, [r3, #12]
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	370c      	adds	r7, #12
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr

08001004 <_ZN8Joystick8get_yADCEv>:
uint16_t Joystick::get_yADC()
{
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
	return y_adc;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	89db      	ldrh	r3, [r3, #14]
}
 8001010:	4618      	mov	r0, r3
 8001012:	370c      	adds	r7, #12
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr

0800101c <_ZN6KeypadC1EP19__I2C_HandleTypeDef>:
 */

#include "Keypad.hpp"
//extern I2C_HandleTypeDef hi2c1;

Keypad::Keypad(I2C_HandleTypeDef *_hi2c)
 800101c:	b4b0      	push	{r4, r5, r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
 8001024:	6039      	str	r1, [r7, #0]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4a0b      	ldr	r2, [pc, #44]	; (8001058 <_ZN6KeypadC1EP19__I2C_HandleTypeDef+0x3c>)
 800102a:	f103 0411 	add.w	r4, r3, #17
 800102e:	4615      	mov	r5, r2
 8001030:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001032:	6020      	str	r0, [r4, #0]
 8001034:	6061      	str	r1, [r4, #4]
 8001036:	60a2      	str	r2, [r4, #8]
 8001038:	60e3      	str	r3, [r4, #12]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4a07      	ldr	r2, [pc, #28]	; (800105c <_ZN6KeypadC1EP19__I2C_HandleTypeDef+0x40>)
 800103e:	3321      	adds	r3, #33	; 0x21
 8001040:	6810      	ldr	r0, [r2, #0]
 8001042:	6018      	str	r0, [r3, #0]
{
	hi2c1 = _hi2c; 
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	683a      	ldr	r2, [r7, #0]
 8001048:	60da      	str	r2, [r3, #12]
}
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	4618      	mov	r0, r3
 800104e:	370c      	adds	r7, #12
 8001050:	46bd      	mov	sp, r7
 8001052:	bcb0      	pop	{r4, r5, r7}
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	08017a60 	.word	0x08017a60
 800105c:	08017a70 	.word	0x08017a70

08001060 <_ZN6Keypad12lcd_send_cmdEc>:
void Keypad::lcd_send_cmd (char cmd)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b086      	sub	sp, #24
 8001064:	af02      	add	r7, sp, #8
 8001066:	6078      	str	r0, [r7, #4]
 8001068:	460b      	mov	r3, r1
 800106a:	70fb      	strb	r3, [r7, #3]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800106c:	78fb      	ldrb	r3, [r7, #3]
 800106e:	f023 030f 	bic.w	r3, r3, #15
 8001072:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8001074:	78fb      	ldrb	r3, [r7, #3]
 8001076:	011b      	lsls	r3, r3, #4
 8001078:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800107a:	7bfb      	ldrb	r3, [r7, #15]
 800107c:	f043 030c 	orr.w	r3, r3, #12
 8001080:	b2db      	uxtb	r3, r3
 8001082:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8001084:	7bfb      	ldrb	r3, [r7, #15]
 8001086:	f043 0308 	orr.w	r3, r3, #8
 800108a:	b2db      	uxtb	r3, r3
 800108c:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 800108e:	7bbb      	ldrb	r3, [r7, #14]
 8001090:	f043 030c 	orr.w	r3, r3, #12
 8001094:	b2db      	uxtb	r3, r3
 8001096:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8001098:	7bbb      	ldrb	r3, [r7, #14]
 800109a:	f043 0308 	orr.w	r3, r3, #8
 800109e:	b2db      	uxtb	r3, r3
 80010a0:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	68d8      	ldr	r0, [r3, #12]
 80010a6:	f107 0208 	add.w	r2, r7, #8
 80010aa:	2364      	movs	r3, #100	; 0x64
 80010ac:	9300      	str	r3, [sp, #0]
 80010ae:	2304      	movs	r3, #4
 80010b0:	214e      	movs	r1, #78	; 0x4e
 80010b2:	f006 fe47 	bl	8007d44 <HAL_I2C_Master_Transmit>
}  
 80010b6:	bf00      	nop
 80010b8:	3710      	adds	r7, #16
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}

080010be <_ZN6Keypad13lcd_send_dataEc>:
void Keypad::lcd_send_data (char data)
{
 80010be:	b580      	push	{r7, lr}
 80010c0:	b086      	sub	sp, #24
 80010c2:	af02      	add	r7, sp, #8
 80010c4:	6078      	str	r0, [r7, #4]
 80010c6:	460b      	mov	r3, r1
 80010c8:	70fb      	strb	r3, [r7, #3]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80010ca:	78fb      	ldrb	r3, [r7, #3]
 80010cc:	f023 030f 	bic.w	r3, r3, #15
 80010d0:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80010d2:	78fb      	ldrb	r3, [r7, #3]
 80010d4:	011b      	lsls	r3, r3, #4
 80010d6:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80010d8:	7bfb      	ldrb	r3, [r7, #15]
 80010da:	f043 030d 	orr.w	r3, r3, #13
 80010de:	b2db      	uxtb	r3, r3
 80010e0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80010e2:	7bfb      	ldrb	r3, [r7, #15]
 80010e4:	f043 0309 	orr.w	r3, r3, #9
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80010ec:	7bbb      	ldrb	r3, [r7, #14]
 80010ee:	f043 030d 	orr.w	r3, r3, #13
 80010f2:	b2db      	uxtb	r3, r3
 80010f4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80010f6:	7bbb      	ldrb	r3, [r7, #14]
 80010f8:	f043 0309 	orr.w	r3, r3, #9
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	68d8      	ldr	r0, [r3, #12]
 8001104:	f107 0208 	add.w	r2, r7, #8
 8001108:	2364      	movs	r3, #100	; 0x64
 800110a:	9300      	str	r3, [sp, #0]
 800110c:	2304      	movs	r3, #4
 800110e:	214e      	movs	r1, #78	; 0x4e
 8001110:	f006 fe18 	bl	8007d44 <HAL_I2C_Master_Transmit>
}
 8001114:	bf00      	nop
 8001116:	3710      	adds	r7, #16
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}

0800111c <_ZN6Keypad15lcd_send_stringEPc>:
void Keypad::lcd_send_string (char *str)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
 8001124:	6039      	str	r1, [r7, #0]
	while (*str) lcd_send_data (*str++);
 8001126:	e007      	b.n	8001138 <_ZN6Keypad15lcd_send_stringEPc+0x1c>
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	1c5a      	adds	r2, r3, #1
 800112c:	603a      	str	r2, [r7, #0]
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	4619      	mov	r1, r3
 8001132:	6878      	ldr	r0, [r7, #4]
 8001134:	f7ff ffc3 	bl	80010be <_ZN6Keypad13lcd_send_dataEc>
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d1f3      	bne.n	8001128 <_ZN6Keypad15lcd_send_stringEPc+0xc>
}
 8001140:	bf00      	nop
 8001142:	bf00      	nop
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}

0800114a <_ZN6Keypad11lcd_put_curEii>:
void Keypad::lcd_put_cur(int row, int col)
{
 800114a:	b580      	push	{r7, lr}
 800114c:	b084      	sub	sp, #16
 800114e:	af00      	add	r7, sp, #0
 8001150:	60f8      	str	r0, [r7, #12]
 8001152:	60b9      	str	r1, [r7, #8]
 8001154:	607a      	str	r2, [r7, #4]
	switch (row)
 8001156:	68bb      	ldr	r3, [r7, #8]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d003      	beq.n	8001164 <_ZN6Keypad11lcd_put_curEii+0x1a>
 800115c:	68bb      	ldr	r3, [r7, #8]
 800115e:	2b01      	cmp	r3, #1
 8001160:	d005      	beq.n	800116e <_ZN6Keypad11lcd_put_curEii+0x24>
 8001162:	e009      	b.n	8001178 <_ZN6Keypad11lcd_put_curEii+0x2e>
    {
        case 0:
            col |= 0x80;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800116a:	607b      	str	r3, [r7, #4]
            break;
 800116c:	e004      	b.n	8001178 <_ZN6Keypad11lcd_put_curEii+0x2e>
        case 1:
            col |= 0xC0;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001174:	607b      	str	r3, [r7, #4]
            break;
 8001176:	bf00      	nop
    }

    lcd_send_cmd (col);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	b2db      	uxtb	r3, r3
 800117c:	4619      	mov	r1, r3
 800117e:	68f8      	ldr	r0, [r7, #12]
 8001180:	f7ff ff6e 	bl	8001060 <_ZN6Keypad12lcd_send_cmdEc>
}
 8001184:	bf00      	nop
 8001186:	3710      	adds	r7, #16
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}

0800118c <_ZN6Keypad9lcd_clearEv>:
void Keypad::lcd_clear (void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b084      	sub	sp, #16
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
	lcd_send_cmd (0x80);
 8001194:	2180      	movs	r1, #128	; 0x80
 8001196:	6878      	ldr	r0, [r7, #4]
 8001198:	f7ff ff62 	bl	8001060 <_ZN6Keypad12lcd_send_cmdEc>
	for (int i=0; i<70; i++)
 800119c:	2300      	movs	r3, #0
 800119e:	60fb      	str	r3, [r7, #12]
 80011a0:	e006      	b.n	80011b0 <_ZN6Keypad9lcd_clearEv+0x24>
	{
		lcd_send_data (' ');
 80011a2:	2120      	movs	r1, #32
 80011a4:	6878      	ldr	r0, [r7, #4]
 80011a6:	f7ff ff8a 	bl	80010be <_ZN6Keypad13lcd_send_dataEc>
	for (int i=0; i<70; i++)
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	3301      	adds	r3, #1
 80011ae:	60fb      	str	r3, [r7, #12]
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	2b45      	cmp	r3, #69	; 0x45
 80011b4:	ddf5      	ble.n	80011a2 <_ZN6Keypad9lcd_clearEv+0x16>
	}
}
 80011b6:	bf00      	nop
 80011b8:	bf00      	nop
 80011ba:	3710      	adds	r7, #16
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}

080011c0 <_ZN6Keypad8lcd_initEv>:
void Keypad::lcd_init (void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 80011c8:	2032      	movs	r0, #50	; 0x32
 80011ca:	f002 fcab 	bl	8003b24 <HAL_Delay>
	lcd_send_cmd (0x30);
 80011ce:	2130      	movs	r1, #48	; 0x30
 80011d0:	6878      	ldr	r0, [r7, #4]
 80011d2:	f7ff ff45 	bl	8001060 <_ZN6Keypad12lcd_send_cmdEc>
	HAL_Delay(5);  // wait for >4.1ms
 80011d6:	2005      	movs	r0, #5
 80011d8:	f002 fca4 	bl	8003b24 <HAL_Delay>
	lcd_send_cmd (0x30);
 80011dc:	2130      	movs	r1, #48	; 0x30
 80011de:	6878      	ldr	r0, [r7, #4]
 80011e0:	f7ff ff3e 	bl	8001060 <_ZN6Keypad12lcd_send_cmdEc>
	HAL_Delay(1);  // wait for >100us
 80011e4:	2001      	movs	r0, #1
 80011e6:	f002 fc9d 	bl	8003b24 <HAL_Delay>
	lcd_send_cmd (0x30);
 80011ea:	2130      	movs	r1, #48	; 0x30
 80011ec:	6878      	ldr	r0, [r7, #4]
 80011ee:	f7ff ff37 	bl	8001060 <_ZN6Keypad12lcd_send_cmdEc>
	HAL_Delay(10);
 80011f2:	200a      	movs	r0, #10
 80011f4:	f002 fc96 	bl	8003b24 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 80011f8:	2120      	movs	r1, #32
 80011fa:	6878      	ldr	r0, [r7, #4]
 80011fc:	f7ff ff30 	bl	8001060 <_ZN6Keypad12lcd_send_cmdEc>
	HAL_Delay(10);
 8001200:	200a      	movs	r0, #10
 8001202:	f002 fc8f 	bl	8003b24 <HAL_Delay>

  	// dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8001206:	2128      	movs	r1, #40	; 0x28
 8001208:	6878      	ldr	r0, [r7, #4]
 800120a:	f7ff ff29 	bl	8001060 <_ZN6Keypad12lcd_send_cmdEc>
	HAL_Delay(1);
 800120e:	2001      	movs	r0, #1
 8001210:	f002 fc88 	bl	8003b24 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8001214:	2108      	movs	r1, #8
 8001216:	6878      	ldr	r0, [r7, #4]
 8001218:	f7ff ff22 	bl	8001060 <_ZN6Keypad12lcd_send_cmdEc>
	HAL_Delay(1);
 800121c:	2001      	movs	r0, #1
 800121e:	f002 fc81 	bl	8003b24 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8001222:	2101      	movs	r1, #1
 8001224:	6878      	ldr	r0, [r7, #4]
 8001226:	f7ff ff1b 	bl	8001060 <_ZN6Keypad12lcd_send_cmdEc>
	HAL_Delay(1);
 800122a:	2001      	movs	r0, #1
 800122c:	f002 fc7a 	bl	8003b24 <HAL_Delay>
	HAL_Delay(1);
 8001230:	2001      	movs	r0, #1
 8001232:	f002 fc77 	bl	8003b24 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8001236:	2106      	movs	r1, #6
 8001238:	6878      	ldr	r0, [r7, #4]
 800123a:	f7ff ff11 	bl	8001060 <_ZN6Keypad12lcd_send_cmdEc>
	HAL_Delay(1);
 800123e:	2001      	movs	r0, #1
 8001240:	f002 fc70 	bl	8003b24 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8001244:	210c      	movs	r1, #12
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	f7ff ff0a 	bl	8001060 <_ZN6Keypad12lcd_send_cmdEc>
}   
 800124c:	bf00      	nop
 800124e:	3708      	adds	r7, #8
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}

08001254 <_ZN6Keypad11keypad_readEv>:
char Keypad::keypad_read()
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
	
  HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_RESET);
 800125c:	2200      	movs	r2, #0
 800125e:	2180      	movs	r1, #128	; 0x80
 8001260:	48b4      	ldr	r0, [pc, #720]	; (8001534 <_ZN6Keypad11keypad_readEv+0x2e0>)
 8001262:	f006 fc97 	bl	8007b94 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, GPIO_PIN_SET);
 8001266:	2201      	movs	r2, #1
 8001268:	f44f 7180 	mov.w	r1, #256	; 0x100
 800126c:	48b1      	ldr	r0, [pc, #708]	; (8001534 <_ZN6Keypad11keypad_readEv+0x2e0>)
 800126e:	f006 fc91 	bl	8007b94 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(R3_GPIO_Port, R3_Pin, GPIO_PIN_SET);
 8001272:	2201      	movs	r2, #1
 8001274:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001278:	48ae      	ldr	r0, [pc, #696]	; (8001534 <_ZN6Keypad11keypad_readEv+0x2e0>)
 800127a:	f006 fc8b 	bl	8007b94 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(R4_GPIO_Port, R4_Pin, GPIO_PIN_SET);
 800127e:	2201      	movs	r2, #1
 8001280:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001284:	48ab      	ldr	r0, [pc, #684]	; (8001534 <_ZN6Keypad11keypad_readEv+0x2e0>)
 8001286:	f006 fc85 	bl	8007b94 <HAL_GPIO_WritePin>

  if(!(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin))){
 800128a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800128e:	48a9      	ldr	r0, [pc, #676]	; (8001534 <_ZN6Keypad11keypad_readEv+0x2e0>)
 8001290:	f006 fc68 	bl	8007b64 <HAL_GPIO_ReadPin>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	bf0c      	ite	eq
 800129a:	2301      	moveq	r3, #1
 800129c:	2300      	movne	r3, #0
 800129e:	b2db      	uxtb	r3, r3
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d017      	beq.n	80012d4 <_ZN6Keypad11keypad_readEv+0x80>
    HAL_Delay(4);
 80012a4:	2004      	movs	r0, #4
 80012a6:	f002 fc3d 	bl	8003b24 <HAL_Delay>
    while(!(HAL_GPIO_ReadPin (C1_GPIO_Port, C1_Pin)));
 80012aa:	bf00      	nop
 80012ac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012b0:	48a0      	ldr	r0, [pc, #640]	; (8001534 <_ZN6Keypad11keypad_readEv+0x2e0>)
 80012b2:	f006 fc57 	bl	8007b64 <HAL_GPIO_ReadPin>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	bf0c      	ite	eq
 80012bc:	2301      	moveq	r3, #1
 80012be:	2300      	movne	r3, #0
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d1f2      	bne.n	80012ac <_ZN6Keypad11keypad_readEv+0x58>
    HAL_Delay(4);
 80012c6:	2004      	movs	r0, #4
 80012c8:	f002 fc2c 	bl	8003b24 <HAL_Delay>
    val_key = keys[0][0];
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	7c5a      	ldrb	r2, [r3, #17]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	741a      	strb	r2, [r3, #16]
  }
  if(!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin))){
 80012d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012d8:	4896      	ldr	r0, [pc, #600]	; (8001534 <_ZN6Keypad11keypad_readEv+0x2e0>)
 80012da:	f006 fc43 	bl	8007b64 <HAL_GPIO_ReadPin>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	bf0c      	ite	eq
 80012e4:	2301      	moveq	r3, #1
 80012e6:	2300      	movne	r3, #0
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d017      	beq.n	800131e <_ZN6Keypad11keypad_readEv+0xca>
    HAL_Delay(4);
 80012ee:	2004      	movs	r0, #4
 80012f0:	f002 fc18 	bl	8003b24 <HAL_Delay>
    while(!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin)));
 80012f4:	bf00      	nop
 80012f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012fa:	488e      	ldr	r0, [pc, #568]	; (8001534 <_ZN6Keypad11keypad_readEv+0x2e0>)
 80012fc:	f006 fc32 	bl	8007b64 <HAL_GPIO_ReadPin>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	bf0c      	ite	eq
 8001306:	2301      	moveq	r3, #1
 8001308:	2300      	movne	r3, #0
 800130a:	b2db      	uxtb	r3, r3
 800130c:	2b00      	cmp	r3, #0
 800130e:	d1f2      	bne.n	80012f6 <_ZN6Keypad11keypad_readEv+0xa2>
    HAL_Delay(4);
 8001310:	2004      	movs	r0, #4
 8001312:	f002 fc07 	bl	8003b24 <HAL_Delay>
    val_key = keys[0][1];
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	7c9a      	ldrb	r2, [r3, #18]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	741a      	strb	r2, [r3, #16]
  }
  if(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin))){
 800131e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001322:	4884      	ldr	r0, [pc, #528]	; (8001534 <_ZN6Keypad11keypad_readEv+0x2e0>)
 8001324:	f006 fc1e 	bl	8007b64 <HAL_GPIO_ReadPin>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	bf0c      	ite	eq
 800132e:	2301      	moveq	r3, #1
 8001330:	2300      	movne	r3, #0
 8001332:	b2db      	uxtb	r3, r3
 8001334:	2b00      	cmp	r3, #0
 8001336:	d017      	beq.n	8001368 <_ZN6Keypad11keypad_readEv+0x114>
    HAL_Delay(4);
 8001338:	2004      	movs	r0, #4
 800133a:	f002 fbf3 	bl	8003b24 <HAL_Delay>
    while(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin)));
 800133e:	bf00      	nop
 8001340:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001344:	487b      	ldr	r0, [pc, #492]	; (8001534 <_ZN6Keypad11keypad_readEv+0x2e0>)
 8001346:	f006 fc0d 	bl	8007b64 <HAL_GPIO_ReadPin>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	bf0c      	ite	eq
 8001350:	2301      	moveq	r3, #1
 8001352:	2300      	movne	r3, #0
 8001354:	b2db      	uxtb	r3, r3
 8001356:	2b00      	cmp	r3, #0
 8001358:	d1f2      	bne.n	8001340 <_ZN6Keypad11keypad_readEv+0xec>
    HAL_Delay(4);
 800135a:	2004      	movs	r0, #4
 800135c:	f002 fbe2 	bl	8003b24 <HAL_Delay>
    val_key = keys[0][2];
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	7cda      	ldrb	r2, [r3, #19]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	741a      	strb	r2, [r3, #16]
  }
  if (!(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin))){
 8001368:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800136c:	4871      	ldr	r0, [pc, #452]	; (8001534 <_ZN6Keypad11keypad_readEv+0x2e0>)
 800136e:	f006 fbf9 	bl	8007b64 <HAL_GPIO_ReadPin>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	bf0c      	ite	eq
 8001378:	2301      	moveq	r3, #1
 800137a:	2300      	movne	r3, #0
 800137c:	b2db      	uxtb	r3, r3
 800137e:	2b00      	cmp	r3, #0
 8001380:	d017      	beq.n	80013b2 <_ZN6Keypad11keypad_readEv+0x15e>
    HAL_Delay(4);
 8001382:	2004      	movs	r0, #4
 8001384:	f002 fbce 	bl	8003b24 <HAL_Delay>
    while(!(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin)));
 8001388:	bf00      	nop
 800138a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800138e:	4869      	ldr	r0, [pc, #420]	; (8001534 <_ZN6Keypad11keypad_readEv+0x2e0>)
 8001390:	f006 fbe8 	bl	8007b64 <HAL_GPIO_ReadPin>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	bf0c      	ite	eq
 800139a:	2301      	moveq	r3, #1
 800139c:	2300      	movne	r3, #0
 800139e:	b2db      	uxtb	r3, r3
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d1f2      	bne.n	800138a <_ZN6Keypad11keypad_readEv+0x136>
    HAL_Delay(4);
 80013a4:	2004      	movs	r0, #4
 80013a6:	f002 fbbd 	bl	8003b24 <HAL_Delay>
    val_key = keys[0][3];
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	7d1a      	ldrb	r2, [r3, #20]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	741a      	strb	r2, [r3, #16]
  }

  HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_SET);
 80013b2:	2201      	movs	r2, #1
 80013b4:	2180      	movs	r1, #128	; 0x80
 80013b6:	485f      	ldr	r0, [pc, #380]	; (8001534 <_ZN6Keypad11keypad_readEv+0x2e0>)
 80013b8:	f006 fbec 	bl	8007b94 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, GPIO_PIN_RESET);
 80013bc:	2200      	movs	r2, #0
 80013be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013c2:	485c      	ldr	r0, [pc, #368]	; (8001534 <_ZN6Keypad11keypad_readEv+0x2e0>)
 80013c4:	f006 fbe6 	bl	8007b94 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(R3_GPIO_Port, R3_Pin, GPIO_PIN_SET);
 80013c8:	2201      	movs	r2, #1
 80013ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013ce:	4859      	ldr	r0, [pc, #356]	; (8001534 <_ZN6Keypad11keypad_readEv+0x2e0>)
 80013d0:	f006 fbe0 	bl	8007b94 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(R4_GPIO_Port, R4_Pin, GPIO_PIN_SET);
 80013d4:	2201      	movs	r2, #1
 80013d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013da:	4856      	ldr	r0, [pc, #344]	; (8001534 <_ZN6Keypad11keypad_readEv+0x2e0>)
 80013dc:	f006 fbda 	bl	8007b94 <HAL_GPIO_WritePin>

  if(!(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin))){
 80013e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013e4:	4853      	ldr	r0, [pc, #332]	; (8001534 <_ZN6Keypad11keypad_readEv+0x2e0>)
 80013e6:	f006 fbbd 	bl	8007b64 <HAL_GPIO_ReadPin>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	bf0c      	ite	eq
 80013f0:	2301      	moveq	r3, #1
 80013f2:	2300      	movne	r3, #0
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d017      	beq.n	800142a <_ZN6Keypad11keypad_readEv+0x1d6>
    HAL_Delay(4);
 80013fa:	2004      	movs	r0, #4
 80013fc:	f002 fb92 	bl	8003b24 <HAL_Delay>
    while(!(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin)));
 8001400:	bf00      	nop
 8001402:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001406:	484b      	ldr	r0, [pc, #300]	; (8001534 <_ZN6Keypad11keypad_readEv+0x2e0>)
 8001408:	f006 fbac 	bl	8007b64 <HAL_GPIO_ReadPin>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	bf0c      	ite	eq
 8001412:	2301      	moveq	r3, #1
 8001414:	2300      	movne	r3, #0
 8001416:	b2db      	uxtb	r3, r3
 8001418:	2b00      	cmp	r3, #0
 800141a:	d1f2      	bne.n	8001402 <_ZN6Keypad11keypad_readEv+0x1ae>
    HAL_Delay(4);
 800141c:	2004      	movs	r0, #4
 800141e:	f002 fb81 	bl	8003b24 <HAL_Delay>
    val_key = keys[1][0];
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	7d5a      	ldrb	r2, [r3, #21]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	741a      	strb	r2, [r3, #16]
  }
  if(!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin))){
 800142a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800142e:	4841      	ldr	r0, [pc, #260]	; (8001534 <_ZN6Keypad11keypad_readEv+0x2e0>)
 8001430:	f006 fb98 	bl	8007b64 <HAL_GPIO_ReadPin>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	bf0c      	ite	eq
 800143a:	2301      	moveq	r3, #1
 800143c:	2300      	movne	r3, #0
 800143e:	b2db      	uxtb	r3, r3
 8001440:	2b00      	cmp	r3, #0
 8001442:	d017      	beq.n	8001474 <_ZN6Keypad11keypad_readEv+0x220>
    HAL_Delay(4);
 8001444:	2004      	movs	r0, #4
 8001446:	f002 fb6d 	bl	8003b24 <HAL_Delay>
    while(!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin)));
 800144a:	bf00      	nop
 800144c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001450:	4838      	ldr	r0, [pc, #224]	; (8001534 <_ZN6Keypad11keypad_readEv+0x2e0>)
 8001452:	f006 fb87 	bl	8007b64 <HAL_GPIO_ReadPin>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	bf0c      	ite	eq
 800145c:	2301      	moveq	r3, #1
 800145e:	2300      	movne	r3, #0
 8001460:	b2db      	uxtb	r3, r3
 8001462:	2b00      	cmp	r3, #0
 8001464:	d1f2      	bne.n	800144c <_ZN6Keypad11keypad_readEv+0x1f8>
    HAL_Delay(4);
 8001466:	2004      	movs	r0, #4
 8001468:	f002 fb5c 	bl	8003b24 <HAL_Delay>
    val_key = keys[1][1];
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	7d9a      	ldrb	r2, [r3, #22]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	741a      	strb	r2, [r3, #16]
    }
  if(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin))){
 8001474:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001478:	482e      	ldr	r0, [pc, #184]	; (8001534 <_ZN6Keypad11keypad_readEv+0x2e0>)
 800147a:	f006 fb73 	bl	8007b64 <HAL_GPIO_ReadPin>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	bf0c      	ite	eq
 8001484:	2301      	moveq	r3, #1
 8001486:	2300      	movne	r3, #0
 8001488:	b2db      	uxtb	r3, r3
 800148a:	2b00      	cmp	r3, #0
 800148c:	d017      	beq.n	80014be <_ZN6Keypad11keypad_readEv+0x26a>
    HAL_Delay(4);
 800148e:	2004      	movs	r0, #4
 8001490:	f002 fb48 	bl	8003b24 <HAL_Delay>
    while(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin)));
 8001494:	bf00      	nop
 8001496:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800149a:	4826      	ldr	r0, [pc, #152]	; (8001534 <_ZN6Keypad11keypad_readEv+0x2e0>)
 800149c:	f006 fb62 	bl	8007b64 <HAL_GPIO_ReadPin>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	bf0c      	ite	eq
 80014a6:	2301      	moveq	r3, #1
 80014a8:	2300      	movne	r3, #0
 80014aa:	b2db      	uxtb	r3, r3
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d1f2      	bne.n	8001496 <_ZN6Keypad11keypad_readEv+0x242>
    HAL_Delay(4);
 80014b0:	2004      	movs	r0, #4
 80014b2:	f002 fb37 	bl	8003b24 <HAL_Delay>
    val_key = keys[1][2];
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	7dda      	ldrb	r2, [r3, #23]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	741a      	strb	r2, [r3, #16]
  }
  if(!(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin))){
 80014be:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014c2:	481c      	ldr	r0, [pc, #112]	; (8001534 <_ZN6Keypad11keypad_readEv+0x2e0>)
 80014c4:	f006 fb4e 	bl	8007b64 <HAL_GPIO_ReadPin>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	bf0c      	ite	eq
 80014ce:	2301      	moveq	r3, #1
 80014d0:	2300      	movne	r3, #0
 80014d2:	b2db      	uxtb	r3, r3
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d017      	beq.n	8001508 <_ZN6Keypad11keypad_readEv+0x2b4>
    HAL_Delay(4);
 80014d8:	2004      	movs	r0, #4
 80014da:	f002 fb23 	bl	8003b24 <HAL_Delay>
    while(!(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin)));
 80014de:	bf00      	nop
 80014e0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014e4:	4813      	ldr	r0, [pc, #76]	; (8001534 <_ZN6Keypad11keypad_readEv+0x2e0>)
 80014e6:	f006 fb3d 	bl	8007b64 <HAL_GPIO_ReadPin>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	bf0c      	ite	eq
 80014f0:	2301      	moveq	r3, #1
 80014f2:	2300      	movne	r3, #0
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d1f2      	bne.n	80014e0 <_ZN6Keypad11keypad_readEv+0x28c>
    HAL_Delay(4);
 80014fa:	2004      	movs	r0, #4
 80014fc:	f002 fb12 	bl	8003b24 <HAL_Delay>
    val_key = keys[1][3];
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	7e1a      	ldrb	r2, [r3, #24]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	741a      	strb	r2, [r3, #16]
  }

  HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_SET);
 8001508:	2201      	movs	r2, #1
 800150a:	2180      	movs	r1, #128	; 0x80
 800150c:	4809      	ldr	r0, [pc, #36]	; (8001534 <_ZN6Keypad11keypad_readEv+0x2e0>)
 800150e:	f006 fb41 	bl	8007b94 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, GPIO_PIN_SET);
 8001512:	2201      	movs	r2, #1
 8001514:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001518:	4806      	ldr	r0, [pc, #24]	; (8001534 <_ZN6Keypad11keypad_readEv+0x2e0>)
 800151a:	f006 fb3b 	bl	8007b94 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(R3_GPIO_Port, R3_Pin, GPIO_PIN_RESET);
 800151e:	2200      	movs	r2, #0
 8001520:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001524:	4803      	ldr	r0, [pc, #12]	; (8001534 <_ZN6Keypad11keypad_readEv+0x2e0>)
 8001526:	f006 fb35 	bl	8007b94 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(R4_GPIO_Port, R4_Pin, GPIO_PIN_SET);
 800152a:	2201      	movs	r2, #1
 800152c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001530:	e002      	b.n	8001538 <_ZN6Keypad11keypad_readEv+0x2e4>
 8001532:	bf00      	nop
 8001534:	58021000 	.word	0x58021000
 8001538:	48a4      	ldr	r0, [pc, #656]	; (80017cc <_ZN6Keypad11keypad_readEv+0x578>)
 800153a:	f006 fb2b 	bl	8007b94 <HAL_GPIO_WritePin>

  if(!(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin))){
 800153e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001542:	48a2      	ldr	r0, [pc, #648]	; (80017cc <_ZN6Keypad11keypad_readEv+0x578>)
 8001544:	f006 fb0e 	bl	8007b64 <HAL_GPIO_ReadPin>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	bf0c      	ite	eq
 800154e:	2301      	moveq	r3, #1
 8001550:	2300      	movne	r3, #0
 8001552:	b2db      	uxtb	r3, r3
 8001554:	2b00      	cmp	r3, #0
 8001556:	d017      	beq.n	8001588 <_ZN6Keypad11keypad_readEv+0x334>
    HAL_Delay(4);
 8001558:	2004      	movs	r0, #4
 800155a:	f002 fae3 	bl	8003b24 <HAL_Delay>
    while(!(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin)));
 800155e:	bf00      	nop
 8001560:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001564:	4899      	ldr	r0, [pc, #612]	; (80017cc <_ZN6Keypad11keypad_readEv+0x578>)
 8001566:	f006 fafd 	bl	8007b64 <HAL_GPIO_ReadPin>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	bf0c      	ite	eq
 8001570:	2301      	moveq	r3, #1
 8001572:	2300      	movne	r3, #0
 8001574:	b2db      	uxtb	r3, r3
 8001576:	2b00      	cmp	r3, #0
 8001578:	d1f2      	bne.n	8001560 <_ZN6Keypad11keypad_readEv+0x30c>
    HAL_Delay(4);
 800157a:	2004      	movs	r0, #4
 800157c:	f002 fad2 	bl	8003b24 <HAL_Delay>
    val_key = keys[2][0];
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	7e5a      	ldrb	r2, [r3, #25]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	741a      	strb	r2, [r3, #16]
  }
  if(!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin))){
 8001588:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800158c:	488f      	ldr	r0, [pc, #572]	; (80017cc <_ZN6Keypad11keypad_readEv+0x578>)
 800158e:	f006 fae9 	bl	8007b64 <HAL_GPIO_ReadPin>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	bf0c      	ite	eq
 8001598:	2301      	moveq	r3, #1
 800159a:	2300      	movne	r3, #0
 800159c:	b2db      	uxtb	r3, r3
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d017      	beq.n	80015d2 <_ZN6Keypad11keypad_readEv+0x37e>
    HAL_Delay(4);
 80015a2:	2004      	movs	r0, #4
 80015a4:	f002 fabe 	bl	8003b24 <HAL_Delay>
    while(!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin)));
 80015a8:	bf00      	nop
 80015aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015ae:	4887      	ldr	r0, [pc, #540]	; (80017cc <_ZN6Keypad11keypad_readEv+0x578>)
 80015b0:	f006 fad8 	bl	8007b64 <HAL_GPIO_ReadPin>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	bf0c      	ite	eq
 80015ba:	2301      	moveq	r3, #1
 80015bc:	2300      	movne	r3, #0
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d1f2      	bne.n	80015aa <_ZN6Keypad11keypad_readEv+0x356>
    HAL_Delay(4);
 80015c4:	2004      	movs	r0, #4
 80015c6:	f002 faad 	bl	8003b24 <HAL_Delay>
    val_key = keys[2][1];
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	7e9a      	ldrb	r2, [r3, #26]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	741a      	strb	r2, [r3, #16]
  }
  if(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin))){
 80015d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015d6:	487d      	ldr	r0, [pc, #500]	; (80017cc <_ZN6Keypad11keypad_readEv+0x578>)
 80015d8:	f006 fac4 	bl	8007b64 <HAL_GPIO_ReadPin>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	bf0c      	ite	eq
 80015e2:	2301      	moveq	r3, #1
 80015e4:	2300      	movne	r3, #0
 80015e6:	b2db      	uxtb	r3, r3
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d017      	beq.n	800161c <_ZN6Keypad11keypad_readEv+0x3c8>
    HAL_Delay(4);
 80015ec:	2004      	movs	r0, #4
 80015ee:	f002 fa99 	bl	8003b24 <HAL_Delay>
    while(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin)));
 80015f2:	bf00      	nop
 80015f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015f8:	4874      	ldr	r0, [pc, #464]	; (80017cc <_ZN6Keypad11keypad_readEv+0x578>)
 80015fa:	f006 fab3 	bl	8007b64 <HAL_GPIO_ReadPin>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	bf0c      	ite	eq
 8001604:	2301      	moveq	r3, #1
 8001606:	2300      	movne	r3, #0
 8001608:	b2db      	uxtb	r3, r3
 800160a:	2b00      	cmp	r3, #0
 800160c:	d1f2      	bne.n	80015f4 <_ZN6Keypad11keypad_readEv+0x3a0>
    HAL_Delay(4);
 800160e:	2004      	movs	r0, #4
 8001610:	f002 fa88 	bl	8003b24 <HAL_Delay>
    val_key = keys[2][2];
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	7eda      	ldrb	r2, [r3, #27]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	741a      	strb	r2, [r3, #16]
  }
  if(!(HAL_GPIO_ReadPin (C4_GPIO_Port, C4_Pin))){
 800161c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001620:	486a      	ldr	r0, [pc, #424]	; (80017cc <_ZN6Keypad11keypad_readEv+0x578>)
 8001622:	f006 fa9f 	bl	8007b64 <HAL_GPIO_ReadPin>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	bf0c      	ite	eq
 800162c:	2301      	moveq	r3, #1
 800162e:	2300      	movne	r3, #0
 8001630:	b2db      	uxtb	r3, r3
 8001632:	2b00      	cmp	r3, #0
 8001634:	d017      	beq.n	8001666 <_ZN6Keypad11keypad_readEv+0x412>
    HAL_Delay(4);
 8001636:	2004      	movs	r0, #4
 8001638:	f002 fa74 	bl	8003b24 <HAL_Delay>
    while(!(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin)));
 800163c:	bf00      	nop
 800163e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001642:	4862      	ldr	r0, [pc, #392]	; (80017cc <_ZN6Keypad11keypad_readEv+0x578>)
 8001644:	f006 fa8e 	bl	8007b64 <HAL_GPIO_ReadPin>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	bf0c      	ite	eq
 800164e:	2301      	moveq	r3, #1
 8001650:	2300      	movne	r3, #0
 8001652:	b2db      	uxtb	r3, r3
 8001654:	2b00      	cmp	r3, #0
 8001656:	d1f2      	bne.n	800163e <_ZN6Keypad11keypad_readEv+0x3ea>
    HAL_Delay(4);
 8001658:	2004      	movs	r0, #4
 800165a:	f002 fa63 	bl	8003b24 <HAL_Delay>
    val_key = keys[2][3];
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	7f1a      	ldrb	r2, [r3, #28]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	741a      	strb	r2, [r3, #16]
  }

  HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_SET);
 8001666:	2201      	movs	r2, #1
 8001668:	2180      	movs	r1, #128	; 0x80
 800166a:	4858      	ldr	r0, [pc, #352]	; (80017cc <_ZN6Keypad11keypad_readEv+0x578>)
 800166c:	f006 fa92 	bl	8007b94 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, GPIO_PIN_SET);
 8001670:	2201      	movs	r2, #1
 8001672:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001676:	4855      	ldr	r0, [pc, #340]	; (80017cc <_ZN6Keypad11keypad_readEv+0x578>)
 8001678:	f006 fa8c 	bl	8007b94 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(R3_GPIO_Port, R3_Pin, GPIO_PIN_SET);
 800167c:	2201      	movs	r2, #1
 800167e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001682:	4852      	ldr	r0, [pc, #328]	; (80017cc <_ZN6Keypad11keypad_readEv+0x578>)
 8001684:	f006 fa86 	bl	8007b94 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(R4_GPIO_Port, R4_Pin, GPIO_PIN_RESET);
 8001688:	2200      	movs	r2, #0
 800168a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800168e:	484f      	ldr	r0, [pc, #316]	; (80017cc <_ZN6Keypad11keypad_readEv+0x578>)
 8001690:	f006 fa80 	bl	8007b94 <HAL_GPIO_WritePin>

  if(!(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin))){
 8001694:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001698:	484c      	ldr	r0, [pc, #304]	; (80017cc <_ZN6Keypad11keypad_readEv+0x578>)
 800169a:	f006 fa63 	bl	8007b64 <HAL_GPIO_ReadPin>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	bf0c      	ite	eq
 80016a4:	2301      	moveq	r3, #1
 80016a6:	2300      	movne	r3, #0
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d017      	beq.n	80016de <_ZN6Keypad11keypad_readEv+0x48a>
    HAL_Delay(4);
 80016ae:	2004      	movs	r0, #4
 80016b0:	f002 fa38 	bl	8003b24 <HAL_Delay>
    while(!(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin)));
 80016b4:	bf00      	nop
 80016b6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016ba:	4844      	ldr	r0, [pc, #272]	; (80017cc <_ZN6Keypad11keypad_readEv+0x578>)
 80016bc:	f006 fa52 	bl	8007b64 <HAL_GPIO_ReadPin>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	bf0c      	ite	eq
 80016c6:	2301      	moveq	r3, #1
 80016c8:	2300      	movne	r3, #0
 80016ca:	b2db      	uxtb	r3, r3
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d1f2      	bne.n	80016b6 <_ZN6Keypad11keypad_readEv+0x462>
    HAL_Delay(4);
 80016d0:	2004      	movs	r0, #4
 80016d2:	f002 fa27 	bl	8003b24 <HAL_Delay>
    val_key = keys[3][0];
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	7f5a      	ldrb	r2, [r3, #29]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	741a      	strb	r2, [r3, #16]
  }
  if(!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin))){
 80016de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016e2:	483a      	ldr	r0, [pc, #232]	; (80017cc <_ZN6Keypad11keypad_readEv+0x578>)
 80016e4:	f006 fa3e 	bl	8007b64 <HAL_GPIO_ReadPin>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	bf0c      	ite	eq
 80016ee:	2301      	moveq	r3, #1
 80016f0:	2300      	movne	r3, #0
 80016f2:	b2db      	uxtb	r3, r3
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d017      	beq.n	8001728 <_ZN6Keypad11keypad_readEv+0x4d4>
    HAL_Delay(4);
 80016f8:	2004      	movs	r0, #4
 80016fa:	f002 fa13 	bl	8003b24 <HAL_Delay>
    while (!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin)));
 80016fe:	bf00      	nop
 8001700:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001704:	4831      	ldr	r0, [pc, #196]	; (80017cc <_ZN6Keypad11keypad_readEv+0x578>)
 8001706:	f006 fa2d 	bl	8007b64 <HAL_GPIO_ReadPin>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	bf0c      	ite	eq
 8001710:	2301      	moveq	r3, #1
 8001712:	2300      	movne	r3, #0
 8001714:	b2db      	uxtb	r3, r3
 8001716:	2b00      	cmp	r3, #0
 8001718:	d1f2      	bne.n	8001700 <_ZN6Keypad11keypad_readEv+0x4ac>
    HAL_Delay(4);
 800171a:	2004      	movs	r0, #4
 800171c:	f002 fa02 	bl	8003b24 <HAL_Delay>
    val_key = keys[3][1];
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	7f9a      	ldrb	r2, [r3, #30]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	741a      	strb	r2, [r3, #16]
  }
  if(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin))){
 8001728:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800172c:	4827      	ldr	r0, [pc, #156]	; (80017cc <_ZN6Keypad11keypad_readEv+0x578>)
 800172e:	f006 fa19 	bl	8007b64 <HAL_GPIO_ReadPin>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	bf0c      	ite	eq
 8001738:	2301      	moveq	r3, #1
 800173a:	2300      	movne	r3, #0
 800173c:	b2db      	uxtb	r3, r3
 800173e:	2b00      	cmp	r3, #0
 8001740:	d017      	beq.n	8001772 <_ZN6Keypad11keypad_readEv+0x51e>
    HAL_Delay(4);
 8001742:	2004      	movs	r0, #4
 8001744:	f002 f9ee 	bl	8003b24 <HAL_Delay>
    while(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin)));
 8001748:	bf00      	nop
 800174a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800174e:	481f      	ldr	r0, [pc, #124]	; (80017cc <_ZN6Keypad11keypad_readEv+0x578>)
 8001750:	f006 fa08 	bl	8007b64 <HAL_GPIO_ReadPin>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	bf0c      	ite	eq
 800175a:	2301      	moveq	r3, #1
 800175c:	2300      	movne	r3, #0
 800175e:	b2db      	uxtb	r3, r3
 8001760:	2b00      	cmp	r3, #0
 8001762:	d1f2      	bne.n	800174a <_ZN6Keypad11keypad_readEv+0x4f6>
    HAL_Delay(4);
 8001764:	2004      	movs	r0, #4
 8001766:	f002 f9dd 	bl	8003b24 <HAL_Delay>
    val_key = keys[3][2];
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	7fda      	ldrb	r2, [r3, #31]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	741a      	strb	r2, [r3, #16]
  }
  if(!(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin))){
 8001772:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001776:	4815      	ldr	r0, [pc, #84]	; (80017cc <_ZN6Keypad11keypad_readEv+0x578>)
 8001778:	f006 f9f4 	bl	8007b64 <HAL_GPIO_ReadPin>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	bf0c      	ite	eq
 8001782:	2301      	moveq	r3, #1
 8001784:	2300      	movne	r3, #0
 8001786:	b2db      	uxtb	r3, r3
 8001788:	2b00      	cmp	r3, #0
 800178a:	d018      	beq.n	80017be <_ZN6Keypad11keypad_readEv+0x56a>
    HAL_Delay(4);
 800178c:	2004      	movs	r0, #4
 800178e:	f002 f9c9 	bl	8003b24 <HAL_Delay>
    while(!(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin)));
 8001792:	bf00      	nop
 8001794:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001798:	480c      	ldr	r0, [pc, #48]	; (80017cc <_ZN6Keypad11keypad_readEv+0x578>)
 800179a:	f006 f9e3 	bl	8007b64 <HAL_GPIO_ReadPin>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	bf0c      	ite	eq
 80017a4:	2301      	moveq	r3, #1
 80017a6:	2300      	movne	r3, #0
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d1f2      	bne.n	8001794 <_ZN6Keypad11keypad_readEv+0x540>
    HAL_Delay(4);
 80017ae:	2004      	movs	r0, #4
 80017b0:	f002 f9b8 	bl	8003b24 <HAL_Delay>
    val_key = keys[3][3];
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	f893 2020 	ldrb.w	r2, [r3, #32]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	741a      	strb	r2, [r3, #16]
  }
  return val_key;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	7c1b      	ldrb	r3, [r3, #16]
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3708      	adds	r7, #8
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	58021000 	.word	0x58021000

080017d0 <_ZN6Keypad8is_validEc>:

bool Keypad::is_valid(char _key)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
 80017d8:	460b      	mov	r3, r1
 80017da:	70fb      	strb	r3, [r7, #3]
    
  if(_key == '0'){
 80017dc:	78fb      	ldrb	r3, [r7, #3]
 80017de:	2b30      	cmp	r3, #48	; 0x30
 80017e0:	d101      	bne.n	80017e6 <_ZN6Keypad8is_validEc+0x16>
	  return true;
 80017e2:	2301      	movs	r3, #1
 80017e4:	e02c      	b.n	8001840 <_ZN6Keypad8is_validEc+0x70>
  }
  if(_key == '1'){
 80017e6:	78fb      	ldrb	r3, [r7, #3]
 80017e8:	2b31      	cmp	r3, #49	; 0x31
 80017ea:	d101      	bne.n	80017f0 <_ZN6Keypad8is_validEc+0x20>
  	  return true;
 80017ec:	2301      	movs	r3, #1
 80017ee:	e027      	b.n	8001840 <_ZN6Keypad8is_validEc+0x70>
  }
  if(_key == '2'){
 80017f0:	78fb      	ldrb	r3, [r7, #3]
 80017f2:	2b32      	cmp	r3, #50	; 0x32
 80017f4:	d101      	bne.n	80017fa <_ZN6Keypad8is_validEc+0x2a>
  	  return true;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e022      	b.n	8001840 <_ZN6Keypad8is_validEc+0x70>
  }
  if(_key == '3'){
 80017fa:	78fb      	ldrb	r3, [r7, #3]
 80017fc:	2b33      	cmp	r3, #51	; 0x33
 80017fe:	d101      	bne.n	8001804 <_ZN6Keypad8is_validEc+0x34>
  	  return true;
 8001800:	2301      	movs	r3, #1
 8001802:	e01d      	b.n	8001840 <_ZN6Keypad8is_validEc+0x70>
  }
  if(_key == '4'){
 8001804:	78fb      	ldrb	r3, [r7, #3]
 8001806:	2b34      	cmp	r3, #52	; 0x34
 8001808:	d101      	bne.n	800180e <_ZN6Keypad8is_validEc+0x3e>
  	  return true;
 800180a:	2301      	movs	r3, #1
 800180c:	e018      	b.n	8001840 <_ZN6Keypad8is_validEc+0x70>
  }
  if(_key == '5'){
 800180e:	78fb      	ldrb	r3, [r7, #3]
 8001810:	2b35      	cmp	r3, #53	; 0x35
 8001812:	d101      	bne.n	8001818 <_ZN6Keypad8is_validEc+0x48>
  	  return true;
 8001814:	2301      	movs	r3, #1
 8001816:	e013      	b.n	8001840 <_ZN6Keypad8is_validEc+0x70>
  }
  if(_key == '6'){
 8001818:	78fb      	ldrb	r3, [r7, #3]
 800181a:	2b36      	cmp	r3, #54	; 0x36
 800181c:	d101      	bne.n	8001822 <_ZN6Keypad8is_validEc+0x52>
	  return true;
 800181e:	2301      	movs	r3, #1
 8001820:	e00e      	b.n	8001840 <_ZN6Keypad8is_validEc+0x70>
  }
  if(_key == '7'){
 8001822:	78fb      	ldrb	r3, [r7, #3]
 8001824:	2b37      	cmp	r3, #55	; 0x37
 8001826:	d101      	bne.n	800182c <_ZN6Keypad8is_validEc+0x5c>
	  return true;
 8001828:	2301      	movs	r3, #1
 800182a:	e009      	b.n	8001840 <_ZN6Keypad8is_validEc+0x70>
  }
  if(_key == '8'){
 800182c:	78fb      	ldrb	r3, [r7, #3]
 800182e:	2b38      	cmp	r3, #56	; 0x38
 8001830:	d101      	bne.n	8001836 <_ZN6Keypad8is_validEc+0x66>
	  return true;
 8001832:	2301      	movs	r3, #1
 8001834:	e004      	b.n	8001840 <_ZN6Keypad8is_validEc+0x70>
  }
  if(_key == '9'){
 8001836:	78fb      	ldrb	r3, [r7, #3]
 8001838:	2b39      	cmp	r3, #57	; 0x39
 800183a:	d101      	bne.n	8001840 <_ZN6Keypad8is_validEc+0x70>
	  return true;
 800183c:	2301      	movs	r3, #1
 800183e:	e7ff      	b.n	8001840 <_ZN6Keypad8is_validEc+0x70>
  }
}
 8001840:	4618      	mov	r0, r3
 8001842:	370c      	adds	r7, #12
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr

0800184c <_ZN6Keypad14check_passwordEPc>:
bool Keypad::check_password(char *_input)
{
 800184c:	b480      	push	{r7}
 800184e:	b085      	sub	sp, #20
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
 8001854:	6039      	str	r1, [r7, #0]

  int aciertos = 0;
 8001856:	2300      	movs	r3, #0
 8001858:	60fb      	str	r3, [r7, #12]
  for (int i = 0; i < 4; i++)
 800185a:	2300      	movs	r3, #0
 800185c:	60bb      	str	r3, [r7, #8]
 800185e:	e010      	b.n	8001882 <_ZN6Keypad14check_passwordEPc+0x36>
  {
    if (_input[i] == password[i])
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	683a      	ldr	r2, [r7, #0]
 8001864:	4413      	add	r3, r2
 8001866:	781a      	ldrb	r2, [r3, #0]
 8001868:	6879      	ldr	r1, [r7, #4]
 800186a:	68bb      	ldr	r3, [r7, #8]
 800186c:	440b      	add	r3, r1
 800186e:	3321      	adds	r3, #33	; 0x21
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	429a      	cmp	r2, r3
 8001874:	d102      	bne.n	800187c <_ZN6Keypad14check_passwordEPc+0x30>
    {
      aciertos++;
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	3301      	adds	r3, #1
 800187a:	60fb      	str	r3, [r7, #12]
  for (int i = 0; i < 4; i++)
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	3301      	adds	r3, #1
 8001880:	60bb      	str	r3, [r7, #8]
 8001882:	68bb      	ldr	r3, [r7, #8]
 8001884:	2b03      	cmp	r3, #3
 8001886:	ddeb      	ble.n	8001860 <_ZN6Keypad14check_passwordEPc+0x14>
    }
  }

  if(aciertos == 4){
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	2b04      	cmp	r3, #4
 800188c:	d101      	bne.n	8001892 <_ZN6Keypad14check_passwordEPc+0x46>
    return true;
 800188e:	2301      	movs	r3, #1
 8001890:	e000      	b.n	8001894 <_ZN6Keypad14check_passwordEPc+0x48>
  } else {
    return false;
 8001892:	2300      	movs	r3, #0
  }
}
 8001894:	4618      	mov	r0, r3
 8001896:	3714      	adds	r7, #20
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr

080018a0 <_ZN10LL_Control8Motor_PIC1EPNS_7EncoderEP17TIM_HandleTypeDefii>:
 *
 *
 * */


LL_Control::Motor_PI::Motor_PI(LL_Control::Encoder * e, TIM_HandleTypeDef * htim, int minFreq, int maxFreq) {
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b084      	sub	sp, #16
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	60f8      	str	r0, [r7, #12]
 80018a8:	60b9      	str	r1, [r7, #8]
 80018aa:	607a      	str	r2, [r7, #4]
 80018ac:	603b      	str	r3, [r7, #0]
 80018ae:	4a1c      	ldr	r2, [pc, #112]	; (8001920 <_ZN10LL_Control8Motor_PIC1EPNS_7EncoderEP17TIM_HandleTypeDefii+0x80>)
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	601a      	str	r2, [r3, #0]
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	2201      	movs	r2, #1
 80018b8:	619a      	str	r2, [r3, #24]
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80018c0:	629a      	str	r2, [r3, #40]	; 0x28
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80018c8:	62da      	str	r2, [r3, #44]	; 0x2c

	enc = e;
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	68ba      	ldr	r2, [r7, #8]
 80018ce:	605a      	str	r2, [r3, #4]
	htimPWM = htim;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	687a      	ldr	r2, [r7, #4]
 80018d4:	609a      	str	r2, [r3, #8]

	runFrequency = enc->get_frequency();
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	4618      	mov	r0, r3
 80018dc:	f7ff f9e5 	bl	8000caa <_ZN10LL_Control7Encoder13get_frequencyEv>
 80018e0:	4602      	mov	r2, r0
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	625a      	str	r2, [r3, #36]	; 0x24
    // Velocity
    set_MaxVel(32.0f);
 80018e6:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 8001924 <_ZN10LL_Control8Motor_PIC1EPNS_7EncoderEP17TIM_HandleTypeDefii+0x84>
 80018ea:	68f8      	ldr	r0, [r7, #12]
 80018ec:	f000 f840 	bl	8001970 <_ZN10LL_Control8Motor_PI10set_MaxVelEf>
    set_MinVel(-32.0f);
 80018f0:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8001928 <_ZN10LL_Control8Motor_PIC1EPNS_7EncoderEP17TIM_HandleTypeDefii+0x88>
 80018f4:	68f8      	ldr	r0, [r7, #12]
 80018f6:	f000 f84a 	bl	800198e <_ZN10LL_Control8Motor_PI10set_MinVelEf>
    // Frequency
    minFreqPWM = minFreq;
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	683a      	ldr	r2, [r7, #0]
 80018fe:	621a      	str	r2, [r3, #32]
    maxFreqPWM = maxFreq;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	69ba      	ldr	r2, [r7, #24]
 8001904:	61da      	str	r2, [r3, #28]
    // Threshold
    set_threshold(0.05);
 8001906:	ed9f 0a09 	vldr	s0, [pc, #36]	; 800192c <_ZN10LL_Control8Motor_PIC1EPNS_7EncoderEP17TIM_HandleTypeDefii+0x8c>
 800190a:	68f8      	ldr	r0, [r7, #12]
 800190c:	f000 f896 	bl	8001a3c <_ZN10LL_Control8Motor_PI13set_thresholdEf>

    // Don't move
    stop();
 8001910:	68f8      	ldr	r0, [r7, #12]
 8001912:	f000 f9c5 	bl	8001ca0 <_ZN10LL_Control8Motor_PI4stopEv>
}
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	4618      	mov	r0, r3
 800191a:	3710      	adds	r7, #16
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	08017b58 	.word	0x08017b58
 8001924:	42000000 	.word	0x42000000
 8001928:	c2000000 	.word	0xc2000000
 800192c:	3d4ccccd 	.word	0x3d4ccccd

08001930 <_ZN10LL_Control8Motor_PID1Ev>:

LL_Control::Motor_PI::~Motor_PI() {
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	4a04      	ldr	r2, [pc, #16]	; (800194c <_ZN10LL_Control8Motor_PID1Ev+0x1c>)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4618      	mov	r0, r3
 8001942:	370c      	adds	r7, #12
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr
 800194c:	08017b58 	.word	0x08017b58

08001950 <_ZN10LL_Control8Motor_PID0Ev>:
LL_Control::Motor_PI::~Motor_PI() {
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
}
 8001958:	6878      	ldr	r0, [r7, #4]
 800195a:	f7ff ffe9 	bl	8001930 <_ZN10LL_Control8Motor_PID1Ev>
 800195e:	214c      	movs	r1, #76	; 0x4c
 8001960:	6878      	ldr	r0, [r7, #4]
 8001962:	f011 fd03 	bl	801336c <_ZdlPvj>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4618      	mov	r0, r3
 800196a:	3708      	adds	r7, #8
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}

08001970 <_ZN10LL_Control8Motor_PI10set_MaxVelEf>:

// ===== Setters =====

void LL_Control::Motor_PI::set_MaxVel(float nMax){
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
 8001978:	ed87 0a00 	vstr	s0, [r7]
	maxVel = nMax;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	683a      	ldr	r2, [r7, #0]
 8001980:	60da      	str	r2, [r3, #12]
}
 8001982:	bf00      	nop
 8001984:	370c      	adds	r7, #12
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr

0800198e <_ZN10LL_Control8Motor_PI10set_MinVelEf>:
void LL_Control::Motor_PI::set_MinVel(float nMin){
 800198e:	b480      	push	{r7}
 8001990:	b083      	sub	sp, #12
 8001992:	af00      	add	r7, sp, #0
 8001994:	6078      	str	r0, [r7, #4]
 8001996:	ed87 0a00 	vstr	s0, [r7]
	minVel = nMin;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	683a      	ldr	r2, [r7, #0]
 800199e:	611a      	str	r2, [r3, #16]
}
 80019a0:	bf00      	nop
 80019a2:	370c      	adds	r7, #12
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr

080019ac <_ZN10LL_Control8Motor_PI13set_referenceEf>:
void LL_Control::Motor_PI::set_reference(float ref){
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	ed87 0a00 	vstr	s0, [r7]
	// Limit the value if the ref is bigger
        // than our operational space
	if (ref > maxVel){
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	edd3 7a03 	vldr	s15, [r3, #12]
 80019be:	ed97 7a00 	vldr	s14, [r7]
 80019c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019ca:	dd03      	ble.n	80019d4 <_ZN10LL_Control8Motor_PI13set_referenceEf+0x28>
		ref = maxVel;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	603b      	str	r3, [r7, #0]
 80019d2:	e00c      	b.n	80019ee <_ZN10LL_Control8Motor_PI13set_referenceEf+0x42>
	}else if (ref < minVel){
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	edd3 7a04 	vldr	s15, [r3, #16]
 80019da:	ed97 7a00 	vldr	s14, [r7]
 80019de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019e6:	d502      	bpl.n	80019ee <_ZN10LL_Control8Motor_PI13set_referenceEf+0x42>
		ref = minVel;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	691b      	ldr	r3, [r3, #16]
 80019ec:	603b      	str	r3, [r7, #0]
	}
    reference = direction*ref;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	699b      	ldr	r3, [r3, #24]
 80019f2:	ee07 3a90 	vmov	s15, r3
 80019f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019fa:	edd7 7a00 	vldr	s15, [r7]
 80019fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
}
 8001a08:	bf00      	nop
 8001a0a:	370c      	adds	r7, #12
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr

08001a14 <_ZN10LL_Control8Motor_PI6set_KsEff>:
void LL_Control::Motor_PI::set_Ks(float k_i, float k_p){
 8001a14:	b480      	push	{r7}
 8001a16:	b085      	sub	sp, #20
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	60f8      	str	r0, [r7, #12]
 8001a1c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001a20:	edc7 0a01 	vstr	s1, [r7, #4]
	this->k_i = k_i;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	68ba      	ldr	r2, [r7, #8]
 8001a28:	629a      	str	r2, [r3, #40]	; 0x28
	this->k_p = k_p;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	687a      	ldr	r2, [r7, #4]
 8001a2e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001a30:	bf00      	nop
 8001a32:	3714      	adds	r7, #20
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr

08001a3c <_ZN10LL_Control8Motor_PI13set_thresholdEf>:
void LL_Control::Motor_PI::set_runFrequency(int f){
	runFrequency = f;
}
void LL_Control::Motor_PI::set_threshold(float t){
 8001a3c:	b480      	push	{r7}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
 8001a44:	ed87 0a00 	vstr	s0, [r7]
	threshold = t;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	683a      	ldr	r2, [r7, #0]
 8001a4c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001a4e:	bf00      	nop
 8001a50:	370c      	adds	r7, #12
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr

08001a5a <_ZN10LL_Control8Motor_PI7get_velEv>:

// ===== Getters =====
float LL_Control::Motor_PI::get_vel(){
 8001a5a:	b580      	push	{r7, lr}
 8001a5c:	b084      	sub	sp, #16
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	6078      	str	r0, [r7, #4]

	float vel = enc->get_vel();
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7ff f910 	bl	8000c8c <_ZN10LL_Control7Encoder7get_velEv>
 8001a6c:	ed87 0a03 	vstr	s0, [r7, #12]
	// Sometimes it overflows into an invalid value
		// We double check to clean even more the data
	// If the calculated value is bigger than our maximum velocity
	if (vel >  maxVel || vel < minVel){
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	edd3 7a03 	vldr	s15, [r3, #12]
 8001a76:	ed97 7a03 	vldr	s14, [r7, #12]
 8001a7a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a82:	dc09      	bgt.n	8001a98 <_ZN10LL_Control8Motor_PI7get_velEv+0x3e>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	edd3 7a04 	vldr	s15, [r3, #16]
 8001a8a:	ed97 7a03 	vldr	s14, [r7, #12]
 8001a8e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a96:	d502      	bpl.n	8001a9e <_ZN10LL_Control8Motor_PI7get_velEv+0x44>
		vel = lastVel;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	695b      	ldr	r3, [r3, #20]
 8001a9c:	60fb      	str	r3, [r7, #12]
	}

	// Update last reading
	lastVel = vel;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	68fa      	ldr	r2, [r7, #12]
 8001aa2:	615a      	str	r2, [r3, #20]

    // Should we invert this? 
	return vel;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	ee07 3a90 	vmov	s15, r3
}
 8001aaa:	eeb0 0a67 	vmov.f32	s0, s15
 8001aae:	3710      	adds	r7, #16
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}

08001ab4 <_ZN10LL_Control8Motor_PI3mapEfffff>:

// ===== Others =====
void LL_Control::Motor_PI::invert(){
    direction *= -1;
}
float LL_Control::Motor_PI::map(float x, float in_min, float in_max, float out_min, float out_max){
 8001ab4:	b480      	push	{r7}
 8001ab6:	b087      	sub	sp, #28
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6178      	str	r0, [r7, #20]
 8001abc:	ed87 0a04 	vstr	s0, [r7, #16]
 8001ac0:	edc7 0a03 	vstr	s1, [r7, #12]
 8001ac4:	ed87 1a02 	vstr	s2, [r7, #8]
 8001ac8:	edc7 1a01 	vstr	s3, [r7, #4]
 8001acc:	ed87 2a00 	vstr	s4, [r7]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8001ad0:	ed97 7a04 	vldr	s14, [r7, #16]
 8001ad4:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ad8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001adc:	edd7 6a00 	vldr	s13, [r7]
 8001ae0:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ae4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001ae8:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001aec:	ed97 7a02 	vldr	s14, [r7, #8]
 8001af0:	edd7 7a03 	vldr	s15, [r7, #12]
 8001af4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001af8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001afc:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b00:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8001b04:	eeb0 0a67 	vmov.f32	s0, s15
 8001b08:	371c      	adds	r7, #28
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr

08001b12 <_ZN10LL_Control8Motor_PI3mapEf>:
int LL_Control::Motor_PI::map(float x){
 8001b12:	b580      	push	{r7, lr}
 8001b14:	b082      	sub	sp, #8
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	6078      	str	r0, [r7, #4]
 8001b1a:	ed87 0a00 	vstr	s0, [r7]
	if (x > maxVel){
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	edd3 7a03 	vldr	s15, [r3, #12]
 8001b24:	ed97 7a00 	vldr	s14, [r7]
 8001b28:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b30:	dd03      	ble.n	8001b3a <_ZN10LL_Control8Motor_PI3mapEf+0x28>
		x = maxVel;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	68db      	ldr	r3, [r3, #12]
 8001b36:	603b      	str	r3, [r7, #0]
 8001b38:	e00c      	b.n	8001b54 <_ZN10LL_Control8Motor_PI3mapEf+0x42>
	}else if (x < minVel){
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	edd3 7a04 	vldr	s15, [r3, #16]
 8001b40:	ed97 7a00 	vldr	s14, [r7]
 8001b44:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b4c:	d502      	bpl.n	8001b54 <_ZN10LL_Control8Motor_PI3mapEf+0x42>
		x = minVel;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	691b      	ldr	r3, [r3, #16]
 8001b52:	603b      	str	r3, [r7, #0]
	}
	return (int) map(x, minVel, maxVel, minFreqPWM, maxFreqPWM);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	edd3 7a04 	vldr	s15, [r3, #16]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	ed93 7a03 	vldr	s14, [r3, #12]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6a1b      	ldr	r3, [r3, #32]
 8001b64:	ee06 3a90 	vmov	s13, r3
 8001b68:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	69db      	ldr	r3, [r3, #28]
 8001b70:	ee06 3a10 	vmov	s12, r3
 8001b74:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8001b78:	eeb0 2a46 	vmov.f32	s4, s12
 8001b7c:	eef0 1a66 	vmov.f32	s3, s13
 8001b80:	eeb0 1a47 	vmov.f32	s2, s14
 8001b84:	eef0 0a67 	vmov.f32	s1, s15
 8001b88:	ed97 0a00 	vldr	s0, [r7]
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	f7ff ff91 	bl	8001ab4 <_ZN10LL_Control8Motor_PI3mapEfffff>
 8001b92:	eef0 7a40 	vmov.f32	s15, s0
 8001b96:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b9a:	ee17 3a90 	vmov	r3, s15
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3708      	adds	r7, #8
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}

08001ba6 <_ZN10LL_Control8Motor_PI9go_to_refEv>:

void LL_Control::Motor_PI::go_to_ref(){
 8001ba6:	b580      	push	{r7, lr}
 8001ba8:	ed2d 8b02 	vpush	{d8}
 8001bac:	b082      	sub	sp, #8
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	6078      	str	r0, [r7, #4]

    // ===== #CONTROL =====
	error = reference - get_vel();
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	ed93 8a0d 	vldr	s16, [r3, #52]	; 0x34
 8001bb8:	6878      	ldr	r0, [r7, #4]
 8001bba:	f7ff ff4e 	bl	8001a5a <_ZN10LL_Control8Motor_PI7get_velEv>
 8001bbe:	eef0 7a40 	vmov.f32	s15, s0
 8001bc2:	ee78 7a67 	vsub.f32	s15, s16, s15
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44

	// Since we are not working with tasks, we can't actually make whiles
	if (error <= threshold && error >= -threshold){
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001bd8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001bdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001be0:	d80c      	bhi.n	8001bfc <_ZN10LL_Control8Motor_PI9go_to_refEv+0x56>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001bee:	eef1 7a67 	vneg.f32	s15, s15
 8001bf2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001bf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bfa:	da4a      	bge.n	8001c92 <_ZN10LL_Control8Motor_PI9go_to_refEv+0xec>
		return;
	}
    // If we are not on the threshold, keep altering PWM pulse
    
    // Update error on integral term
    intError += (float) (1.0f/runFrequency)*error ;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c06:	ee07 3a90 	vmov	s15, r3
 8001c0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c0e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8001c12:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8001c1c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
    	 * */
    //float intTerm = (1000/runFrequency)*error + lastError;

    // Regulate voltage to motor
        // Sadly, it isn't torque ;(
    control += (float) (1.0f/runFrequency)*(k_p*error + k_i*intError);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c34:	ee07 3a90 	vmov	s15, r3
 8001c38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c3c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8001c40:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	ed93 6a0b 	vldr	s12, [r3, #44]	; 0x2c
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8001c50:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	edd3 5a0a 	vldr	s11, [r3, #40]	; 0x28
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8001c60:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001c64:	ee76 7a27 	vadd.f32	s15, s12, s15
 8001c68:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48


    // Actually move motor
    //__HAL_TIM_SET_COMPARE(htimPWM, TIM_CHANNEL_1, control);
    htimPWM -> Instance-> CCR1 = map(control);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8001c7c:	eeb0 0a67 	vmov.f32	s0, s15
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	f7ff ff46 	bl	8001b12 <_ZN10LL_Control8Motor_PI3mapEf>
 8001c86:	4602      	mov	r2, r0
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	635a      	str	r2, [r3, #52]	; 0x34
 8001c90:	e000      	b.n	8001c94 <_ZN10LL_Control8Motor_PI9go_to_refEv+0xee>
		return;
 8001c92:	bf00      	nop

    // Update integral component
    //lastIntegral = intTerm;
}
 8001c94:	3708      	adds	r7, #8
 8001c96:	46bd      	mov	sp, r7
 8001c98:	ecbd 8b02 	vpop	{d8}
 8001c9c:	bd80      	pop	{r7, pc}
	...

08001ca0 <_ZN10LL_Control8Motor_PI4stopEv>:

void LL_Control::Motor_PI::stop(){
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
	set_reference(0.0);
 8001ca8:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8001cbc <_ZN10LL_Control8Motor_PI4stopEv+0x1c>
 8001cac:	6878      	ldr	r0, [r7, #4]
 8001cae:	f7ff fe7d 	bl	80019ac <_ZN10LL_Control8Motor_PI13set_referenceEf>
}
 8001cb2:	bf00      	nop
 8001cb4:	3708      	adds	r7, #8
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	00000000 	.word	0x00000000

08001cc0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8001cc6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001cca:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8001ccc:	bf00      	nop
 8001cce:	4b54      	ldr	r3, [pc, #336]	; (8001e20 <main+0x160>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d006      	beq.n	8001ce8 <main+0x28>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	1e5a      	subs	r2, r3, #1
 8001cde:	607a      	str	r2, [r7, #4]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	dd01      	ble.n	8001ce8 <main+0x28>
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e000      	b.n	8001cea <main+0x2a>
 8001ce8:	2300      	movs	r3, #0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d1ef      	bne.n	8001cce <main+0xe>
  if ( timeout < 0 )
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	da01      	bge.n	8001cf8 <main+0x38>
  {
  Error_Handler();
 8001cf4:	f001 f930 	bl	8002f58 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001cf8:	f001 feb8 	bl	8003a6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001cfc:	f000 f8bc 	bl	8001e78 <_Z18SystemClock_Configv>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001d00:	f000 f946 	bl	8001f90 <_Z24PeriphCommonClock_Configv>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8001d04:	4b46      	ldr	r3, [pc, #280]	; (8001e20 <main+0x160>)
 8001d06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d0a:	4a45      	ldr	r2, [pc, #276]	; (8001e20 <main+0x160>)
 8001d0c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d10:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d14:	4b42      	ldr	r3, [pc, #264]	; (8001e20 <main+0x160>)
 8001d16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d1e:	603b      	str	r3, [r7, #0]
 8001d20:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8001d22:	2000      	movs	r0, #0
 8001d24:	f005 ff50 	bl	8007bc8 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8001d28:	2100      	movs	r1, #0
 8001d2a:	2000      	movs	r0, #0
 8001d2c:	f005 ff66 	bl	8007bfc <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8001d30:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d34:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8001d36:	bf00      	nop
 8001d38:	4b39      	ldr	r3, [pc, #228]	; (8001e20 <main+0x160>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d106      	bne.n	8001d52 <main+0x92>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	1e5a      	subs	r2, r3, #1
 8001d48:	607a      	str	r2, [r7, #4]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	dd01      	ble.n	8001d52 <main+0x92>
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e000      	b.n	8001d54 <main+0x94>
 8001d52:	2300      	movs	r3, #0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d1ef      	bne.n	8001d38 <main+0x78>
if ( timeout < 0 )
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	da01      	bge.n	8001d62 <main+0xa2>
{
Error_Handler();
 8001d5e:	f001 f8fb 	bl	8002f58 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d62:	f000 fe25 	bl	80029b0 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8001d66:	f000 fdfb 	bl	8002960 <_ZL11MX_DMA_Initv>
  MX_USART3_UART_Init();
 8001d6a:	f000 fd63 	bl	8002834 <_ZL19MX_USART3_UART_Initv>
  MX_USB_OTG_FS_PCD_Init();
 8001d6e:	f000 fdc1 	bl	80028f4 <_ZL22MX_USB_OTG_FS_PCD_Initv>
  MX_TIM8_Init();
 8001d72:	f000 fcfb 	bl	800276c <_ZL12MX_TIM8_Initv>
  MX_TIM4_Init();
 8001d76:	f000 fc09 	bl	800258c <_ZL12MX_TIM4_Initv>
  MX_TIM2_Init();
 8001d7a:	f000 fae7 	bl	800234c <_ZL12MX_TIM2_Initv>
  MX_TIM3_Init();
 8001d7e:	f000 fb75 	bl	800246c <_ZL12MX_TIM3_Initv>
  MX_TIM1_Init();
 8001d82:	f000 fa81 	bl	8002288 <_ZL12MX_TIM1_Initv>
  MX_ADC1_Init();
 8001d86:	f000 f939 	bl	8001ffc <_ZL12MX_ADC1_Initv>
  MX_ADC2_Init();
 8001d8a:	f000 f9bf 	bl	800210c <_ZL12MX_ADC2_Initv>
  MX_I2C1_Init();
 8001d8e:	f000 fa2d 	bl	80021ec <_ZL12MX_I2C1_Initv>
  MX_TIM5_Init();
 8001d92:	f000 fc5b 	bl	800264c <_ZL12MX_TIM5_Initv>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001d96:	f00d fefb 	bl	800fb90 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of Destination */
  DestinationHandle = osSemaphoreNew(1, 1, &Destination_attributes);
 8001d9a:	4a22      	ldr	r2, [pc, #136]	; (8001e24 <main+0x164>)
 8001d9c:	2101      	movs	r1, #1
 8001d9e:	2001      	movs	r0, #1
 8001da0:	f00d ffed 	bl	800fd7e <osSemaphoreNew>
 8001da4:	4603      	mov	r3, r0
 8001da6:	4a20      	ldr	r2, [pc, #128]	; (8001e28 <main+0x168>)
 8001da8:	6013      	str	r3, [r2, #0]

  /* creation of Pass */
  PassHandle = osSemaphoreNew(1, 1, &Pass_attributes);
 8001daa:	4a20      	ldr	r2, [pc, #128]	; (8001e2c <main+0x16c>)
 8001dac:	2101      	movs	r1, #1
 8001dae:	2001      	movs	r0, #1
 8001db0:	f00d ffe5 	bl	800fd7e <osSemaphoreNew>
 8001db4:	4603      	mov	r3, r0
 8001db6:	4a1e      	ldr	r2, [pc, #120]	; (8001e30 <main+0x170>)
 8001db8:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of JoystickQueue */
  JoystickQueueHandle = osMessageQueueNew (16, sizeof(Data), &JoystickQueue_attributes);
 8001dba:	4a1e      	ldr	r2, [pc, #120]	; (8001e34 <main+0x174>)
 8001dbc:	2108      	movs	r1, #8
 8001dbe:	2010      	movs	r0, #16
 8001dc0:	f00e f8fc 	bl	800ffbc <osMessageQueueNew>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	4a1c      	ldr	r2, [pc, #112]	; (8001e38 <main+0x178>)
 8001dc8:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001dca:	4a1c      	ldr	r2, [pc, #112]	; (8001e3c <main+0x17c>)
 8001dcc:	2100      	movs	r1, #0
 8001dce:	481c      	ldr	r0, [pc, #112]	; (8001e40 <main+0x180>)
 8001dd0:	f00d ff28 	bl	800fc24 <osThreadNew>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	4a1b      	ldr	r2, [pc, #108]	; (8001e44 <main+0x184>)
 8001dd8:	6013      	str	r3, [r2, #0]

  /* creation of Joystick */
  JoystickHandle = osThreadNew(StartJoystick, NULL, &Joystick_attributes);
 8001dda:	4a1b      	ldr	r2, [pc, #108]	; (8001e48 <main+0x188>)
 8001ddc:	2100      	movs	r1, #0
 8001dde:	481b      	ldr	r0, [pc, #108]	; (8001e4c <main+0x18c>)
 8001de0:	f00d ff20 	bl	800fc24 <osThreadNew>
 8001de4:	4603      	mov	r3, r0
 8001de6:	4a1a      	ldr	r2, [pc, #104]	; (8001e50 <main+0x190>)
 8001de8:	6013      	str	r3, [r2, #0]

  /* creation of Chassis */
  ChassisHandle = osThreadNew(StartChassis, NULL, &Chassis_attributes);
 8001dea:	4a1a      	ldr	r2, [pc, #104]	; (8001e54 <main+0x194>)
 8001dec:	2100      	movs	r1, #0
 8001dee:	481a      	ldr	r0, [pc, #104]	; (8001e58 <main+0x198>)
 8001df0:	f00d ff18 	bl	800fc24 <osThreadNew>
 8001df4:	4603      	mov	r3, r0
 8001df6:	4a19      	ldr	r2, [pc, #100]	; (8001e5c <main+0x19c>)
 8001df8:	6013      	str	r3, [r2, #0]

  /* creation of UserInteraction */
  UserInteractionHandle = osThreadNew(StartUserInteraction, NULL, &UserInteraction_attributes);
 8001dfa:	4a19      	ldr	r2, [pc, #100]	; (8001e60 <main+0x1a0>)
 8001dfc:	2100      	movs	r1, #0
 8001dfe:	4819      	ldr	r0, [pc, #100]	; (8001e64 <main+0x1a4>)
 8001e00:	f00d ff10 	bl	800fc24 <osThreadNew>
 8001e04:	4603      	mov	r3, r0
 8001e06:	4a18      	ldr	r2, [pc, #96]	; (8001e68 <main+0x1a8>)
 8001e08:	6013      	str	r3, [r2, #0]

  /* creation of Door */
  DoorHandle = osThreadNew(StartDoor, NULL, &Door_attributes);
 8001e0a:	4a18      	ldr	r2, [pc, #96]	; (8001e6c <main+0x1ac>)
 8001e0c:	2100      	movs	r1, #0
 8001e0e:	4818      	ldr	r0, [pc, #96]	; (8001e70 <main+0x1b0>)
 8001e10:	f00d ff08 	bl	800fc24 <osThreadNew>
 8001e14:	4603      	mov	r3, r0
 8001e16:	4a17      	ldr	r2, [pc, #92]	; (8001e74 <main+0x1b4>)
 8001e18:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001e1a:	f00d fedd 	bl	800fbd8 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001e1e:	e7fe      	b.n	8001e1e <main+0x15e>
 8001e20:	58024400 	.word	0x58024400
 8001e24:	08017c2c 	.word	0x08017c2c
 8001e28:	24000b84 	.word	0x24000b84
 8001e2c:	08017c3c 	.word	0x08017c3c
 8001e30:	24000b88 	.word	0x24000b88
 8001e34:	08017c14 	.word	0x08017c14
 8001e38:	24000b80 	.word	0x24000b80
 8001e3c:	08017b60 	.word	0x08017b60
 8001e40:	08002b39 	.word	0x08002b39
 8001e44:	24000b6c 	.word	0x24000b6c
 8001e48:	08017b84 	.word	0x08017b84
 8001e4c:	08002b49 	.word	0x08002b49
 8001e50:	24000b70 	.word	0x24000b70
 8001e54:	08017ba8 	.word	0x08017ba8
 8001e58:	08002bed 	.word	0x08002bed
 8001e5c:	24000b74 	.word	0x24000b74
 8001e60:	08017bcc 	.word	0x08017bcc
 8001e64:	08002d6d 	.word	0x08002d6d
 8001e68:	24000b78 	.word	0x24000b78
 8001e6c:	08017bf0 	.word	0x08017bf0
 8001e70:	08002ee1 	.word	0x08002ee1
 8001e74:	24000b7c 	.word	0x24000b7c

08001e78 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b09c      	sub	sp, #112	; 0x70
 8001e7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e82:	224c      	movs	r2, #76	; 0x4c
 8001e84:	2100      	movs	r1, #0
 8001e86:	4618      	mov	r0, r3
 8001e88:	f012 fac9 	bl	801441e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e8c:	1d3b      	adds	r3, r7, #4
 8001e8e:	2220      	movs	r2, #32
 8001e90:	2100      	movs	r1, #0
 8001e92:	4618      	mov	r0, r3
 8001e94:	f012 fac3 	bl	801441e <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8001e98:	2004      	movs	r0, #4
 8001e9a:	f006 fc37 	bl	800870c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	603b      	str	r3, [r7, #0]
 8001ea2:	4b39      	ldr	r3, [pc, #228]	; (8001f88 <_Z18SystemClock_Configv+0x110>)
 8001ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ea6:	4a38      	ldr	r2, [pc, #224]	; (8001f88 <_Z18SystemClock_Configv+0x110>)
 8001ea8:	f023 0301 	bic.w	r3, r3, #1
 8001eac:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001eae:	4b36      	ldr	r3, [pc, #216]	; (8001f88 <_Z18SystemClock_Configv+0x110>)
 8001eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eb2:	f003 0301 	and.w	r3, r3, #1
 8001eb6:	603b      	str	r3, [r7, #0]
 8001eb8:	4b34      	ldr	r3, [pc, #208]	; (8001f8c <_Z18SystemClock_Configv+0x114>)
 8001eba:	699b      	ldr	r3, [r3, #24]
 8001ebc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001ec0:	4a32      	ldr	r2, [pc, #200]	; (8001f8c <_Z18SystemClock_Configv+0x114>)
 8001ec2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ec6:	6193      	str	r3, [r2, #24]
 8001ec8:	4b30      	ldr	r3, [pc, #192]	; (8001f8c <_Z18SystemClock_Configv+0x114>)
 8001eca:	699b      	ldr	r3, [r3, #24]
 8001ecc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001ed0:	603b      	str	r3, [r7, #0]
 8001ed2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001ed4:	bf00      	nop
 8001ed6:	4b2d      	ldr	r3, [pc, #180]	; (8001f8c <_Z18SystemClock_Configv+0x114>)
 8001ed8:	699b      	ldr	r3, [r3, #24]
 8001eda:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ede:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ee2:	bf14      	ite	ne
 8001ee4:	2301      	movne	r3, #1
 8001ee6:	2300      	moveq	r3, #0
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d1f3      	bne.n	8001ed6 <_Z18SystemClock_Configv+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001ef2:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001ef6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ef8:	2302      	movs	r3, #2
 8001efa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001efc:	2302      	movs	r3, #2
 8001efe:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001f00:	2301      	movs	r3, #1
 8001f02:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 18;
 8001f04:	2312      	movs	r3, #18
 8001f06:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001f08:	2302      	movs	r3, #2
 8001f0a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001f0c:	2302      	movs	r3, #2
 8001f0e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001f10:	2302      	movs	r3, #2
 8001f12:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001f14:	230c      	movs	r3, #12
 8001f16:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8001f18:	2302      	movs	r3, #2
 8001f1a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 8001f1c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001f20:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f26:	4618      	mov	r0, r3
 8001f28:	f006 fc5a 	bl	80087e0 <HAL_RCC_OscConfig>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	bf14      	ite	ne
 8001f32:	2301      	movne	r3, #1
 8001f34:	2300      	moveq	r3, #0
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d001      	beq.n	8001f40 <_Z18SystemClock_Configv+0xc8>
  {
    Error_Handler();
 8001f3c:	f001 f80c 	bl	8002f58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f40:	233f      	movs	r3, #63	; 0x3f
 8001f42:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f44:	2303      	movs	r3, #3
 8001f46:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001f50:	2340      	movs	r3, #64	; 0x40
 8001f52:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001f54:	2340      	movs	r3, #64	; 0x40
 8001f56:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001f58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f5c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001f5e:	2340      	movs	r3, #64	; 0x40
 8001f60:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001f62:	1d3b      	adds	r3, r7, #4
 8001f64:	2101      	movs	r1, #1
 8001f66:	4618      	mov	r0, r3
 8001f68:	f007 f894 	bl	8009094 <HAL_RCC_ClockConfig>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	bf14      	ite	ne
 8001f72:	2301      	movne	r3, #1
 8001f74:	2300      	moveq	r3, #0
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d001      	beq.n	8001f80 <_Z18SystemClock_Configv+0x108>
  {
    Error_Handler();
 8001f7c:	f000 ffec 	bl	8002f58 <Error_Handler>
  }
}
 8001f80:	bf00      	nop
 8001f82:	3770      	adds	r7, #112	; 0x70
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	58000400 	.word	0x58000400
 8001f8c:	58024800 	.word	0x58024800

08001f90 <_Z24PeriphCommonClock_Configv>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b0b0      	sub	sp, #192	; 0xc0
 8001f94:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f96:	463b      	mov	r3, r7
 8001f98:	22c0      	movs	r2, #192	; 0xc0
 8001f9a:	2100      	movs	r1, #0
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f012 fa3e 	bl	801441e <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001fa2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001fa6:	f04f 0300 	mov.w	r3, #0
 8001faa:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 18;
 8001fb2:	2312      	movs	r3, #18
 8001fb4:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 8001fb6:	2304      	movs	r3, #4
 8001fb8:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001fba:	2302      	movs	r3, #2
 8001fbc:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001fbe:	2302      	movs	r3, #2
 8001fc0:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001fc2:	23c0      	movs	r3, #192	; 0xc0
 8001fc4:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8001fc6:	2320      	movs	r3, #32
 8001fc8:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 6144;
 8001fca:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001fce:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001fd6:	463b      	mov	r3, r7
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f007 fc29 	bl	8009830 <HAL_RCCEx_PeriphCLKConfig>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	bf14      	ite	ne
 8001fe4:	2301      	movne	r3, #1
 8001fe6:	2300      	moveq	r3, #0
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d001      	beq.n	8001ff2 <_Z24PeriphCommonClock_Configv+0x62>
  {
    Error_Handler();
 8001fee:	f000 ffb3 	bl	8002f58 <Error_Handler>
  }
}
 8001ff2:	bf00      	nop
 8001ff4:	37c0      	adds	r7, #192	; 0xc0
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
	...

08001ffc <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b08a      	sub	sp, #40	; 0x28
 8002000:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8002002:	f107 031c 	add.w	r3, r7, #28
 8002006:	2200      	movs	r2, #0
 8002008:	601a      	str	r2, [r3, #0]
 800200a:	605a      	str	r2, [r3, #4]
 800200c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800200e:	463b      	mov	r3, r7
 8002010:	2200      	movs	r2, #0
 8002012:	601a      	str	r2, [r3, #0]
 8002014:	605a      	str	r2, [r3, #4]
 8002016:	609a      	str	r2, [r3, #8]
 8002018:	60da      	str	r2, [r3, #12]
 800201a:	611a      	str	r2, [r3, #16]
 800201c:	615a      	str	r2, [r3, #20]
 800201e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002020:	4b37      	ldr	r3, [pc, #220]	; (8002100 <_ZL12MX_ADC1_Initv+0x104>)
 8002022:	4a38      	ldr	r2, [pc, #224]	; (8002104 <_ZL12MX_ADC1_Initv+0x108>)
 8002024:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002026:	4b36      	ldr	r3, [pc, #216]	; (8002100 <_ZL12MX_ADC1_Initv+0x104>)
 8002028:	2200      	movs	r2, #0
 800202a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 800202c:	4b34      	ldr	r3, [pc, #208]	; (8002100 <_ZL12MX_ADC1_Initv+0x104>)
 800202e:	2200      	movs	r2, #0
 8002030:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002032:	4b33      	ldr	r3, [pc, #204]	; (8002100 <_ZL12MX_ADC1_Initv+0x104>)
 8002034:	2200      	movs	r2, #0
 8002036:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002038:	4b31      	ldr	r3, [pc, #196]	; (8002100 <_ZL12MX_ADC1_Initv+0x104>)
 800203a:	2204      	movs	r2, #4
 800203c:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800203e:	4b30      	ldr	r3, [pc, #192]	; (8002100 <_ZL12MX_ADC1_Initv+0x104>)
 8002040:	2200      	movs	r2, #0
 8002042:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002044:	4b2e      	ldr	r3, [pc, #184]	; (8002100 <_ZL12MX_ADC1_Initv+0x104>)
 8002046:	2200      	movs	r2, #0
 8002048:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 800204a:	4b2d      	ldr	r3, [pc, #180]	; (8002100 <_ZL12MX_ADC1_Initv+0x104>)
 800204c:	2201      	movs	r2, #1
 800204e:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002050:	4b2b      	ldr	r3, [pc, #172]	; (8002100 <_ZL12MX_ADC1_Initv+0x104>)
 8002052:	2200      	movs	r2, #0
 8002054:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002056:	4b2a      	ldr	r3, [pc, #168]	; (8002100 <_ZL12MX_ADC1_Initv+0x104>)
 8002058:	2200      	movs	r2, #0
 800205a:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800205c:	4b28      	ldr	r3, [pc, #160]	; (8002100 <_ZL12MX_ADC1_Initv+0x104>)
 800205e:	2200      	movs	r2, #0
 8002060:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8002062:	4b27      	ldr	r3, [pc, #156]	; (8002100 <_ZL12MX_ADC1_Initv+0x104>)
 8002064:	2200      	movs	r2, #0
 8002066:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002068:	4b25      	ldr	r3, [pc, #148]	; (8002100 <_ZL12MX_ADC1_Initv+0x104>)
 800206a:	2200      	movs	r2, #0
 800206c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800206e:	4b24      	ldr	r3, [pc, #144]	; (8002100 <_ZL12MX_ADC1_Initv+0x104>)
 8002070:	2200      	movs	r2, #0
 8002072:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8002074:	4b22      	ldr	r3, [pc, #136]	; (8002100 <_ZL12MX_ADC1_Initv+0x104>)
 8002076:	2200      	movs	r2, #0
 8002078:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800207c:	4820      	ldr	r0, [pc, #128]	; (8002100 <_ZL12MX_ADC1_Initv+0x104>)
 800207e:	f001 ff63 	bl	8003f48 <HAL_ADC_Init>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	bf14      	ite	ne
 8002088:	2301      	movne	r3, #1
 800208a:	2300      	moveq	r3, #0
 800208c:	b2db      	uxtb	r3, r3
 800208e:	2b00      	cmp	r3, #0
 8002090:	d001      	beq.n	8002096 <_ZL12MX_ADC1_Initv+0x9a>
  {
    Error_Handler();
 8002092:	f000 ff61 	bl	8002f58 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8002096:	2300      	movs	r3, #0
 8002098:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800209a:	f107 031c 	add.w	r3, r7, #28
 800209e:	4619      	mov	r1, r3
 80020a0:	4817      	ldr	r0, [pc, #92]	; (8002100 <_ZL12MX_ADC1_Initv+0x104>)
 80020a2:	f002 ffcb 	bl	800503c <HAL_ADCEx_MultiModeConfigChannel>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	bf14      	ite	ne
 80020ac:	2301      	movne	r3, #1
 80020ae:	2300      	moveq	r3, #0
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d001      	beq.n	80020ba <_ZL12MX_ADC1_Initv+0xbe>
  {
    Error_Handler();
 80020b6:	f000 ff4f 	bl	8002f58 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_18;
 80020ba:	4b13      	ldr	r3, [pc, #76]	; (8002108 <_ZL12MX_ADC1_Initv+0x10c>)
 80020bc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80020be:	2306      	movs	r3, #6
 80020c0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80020c2:	2300      	movs	r3, #0
 80020c4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80020c6:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80020ca:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80020cc:	2304      	movs	r3, #4
 80020ce:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80020d0:	2300      	movs	r3, #0
 80020d2:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80020d4:	2300      	movs	r3, #0
 80020d6:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020d8:	463b      	mov	r3, r7
 80020da:	4619      	mov	r1, r3
 80020dc:	4808      	ldr	r0, [pc, #32]	; (8002100 <_ZL12MX_ADC1_Initv+0x104>)
 80020de:	f002 faa1 	bl	8004624 <HAL_ADC_ConfigChannel>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	bf14      	ite	ne
 80020e8:	2301      	movne	r3, #1
 80020ea:	2300      	moveq	r3, #0
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d001      	beq.n	80020f6 <_ZL12MX_ADC1_Initv+0xfa>
  {
    Error_Handler();
 80020f2:	f000 ff31 	bl	8002f58 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80020f6:	bf00      	nop
 80020f8:	3728      	adds	r7, #40	; 0x28
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	240001f8 	.word	0x240001f8
 8002104:	40022000 	.word	0x40022000
 8002108:	4b840000 	.word	0x4b840000

0800210c <_ZL12MX_ADC2_Initv>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b088      	sub	sp, #32
 8002110:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002112:	1d3b      	adds	r3, r7, #4
 8002114:	2200      	movs	r2, #0
 8002116:	601a      	str	r2, [r3, #0]
 8002118:	605a      	str	r2, [r3, #4]
 800211a:	609a      	str	r2, [r3, #8]
 800211c:	60da      	str	r2, [r3, #12]
 800211e:	611a      	str	r2, [r3, #16]
 8002120:	615a      	str	r2, [r3, #20]
 8002122:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8002124:	4b2e      	ldr	r3, [pc, #184]	; (80021e0 <_ZL12MX_ADC2_Initv+0xd4>)
 8002126:	4a2f      	ldr	r2, [pc, #188]	; (80021e4 <_ZL12MX_ADC2_Initv+0xd8>)
 8002128:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800212a:	4b2d      	ldr	r3, [pc, #180]	; (80021e0 <_ZL12MX_ADC2_Initv+0xd4>)
 800212c:	2200      	movs	r2, #0
 800212e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8002130:	4b2b      	ldr	r3, [pc, #172]	; (80021e0 <_ZL12MX_ADC2_Initv+0xd4>)
 8002132:	2200      	movs	r2, #0
 8002134:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002136:	4b2a      	ldr	r3, [pc, #168]	; (80021e0 <_ZL12MX_ADC2_Initv+0xd4>)
 8002138:	2200      	movs	r2, #0
 800213a:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800213c:	4b28      	ldr	r3, [pc, #160]	; (80021e0 <_ZL12MX_ADC2_Initv+0xd4>)
 800213e:	2204      	movs	r2, #4
 8002140:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8002142:	4b27      	ldr	r3, [pc, #156]	; (80021e0 <_ZL12MX_ADC2_Initv+0xd4>)
 8002144:	2200      	movs	r2, #0
 8002146:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8002148:	4b25      	ldr	r3, [pc, #148]	; (80021e0 <_ZL12MX_ADC2_Initv+0xd4>)
 800214a:	2200      	movs	r2, #0
 800214c:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 800214e:	4b24      	ldr	r3, [pc, #144]	; (80021e0 <_ZL12MX_ADC2_Initv+0xd4>)
 8002150:	2201      	movs	r2, #1
 8002152:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8002154:	4b22      	ldr	r3, [pc, #136]	; (80021e0 <_ZL12MX_ADC2_Initv+0xd4>)
 8002156:	2200      	movs	r2, #0
 8002158:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800215a:	4b21      	ldr	r3, [pc, #132]	; (80021e0 <_ZL12MX_ADC2_Initv+0xd4>)
 800215c:	2200      	movs	r2, #0
 800215e:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002160:	4b1f      	ldr	r3, [pc, #124]	; (80021e0 <_ZL12MX_ADC2_Initv+0xd4>)
 8002162:	2200      	movs	r2, #0
 8002164:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8002166:	4b1e      	ldr	r3, [pc, #120]	; (80021e0 <_ZL12MX_ADC2_Initv+0xd4>)
 8002168:	2200      	movs	r2, #0
 800216a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800216c:	4b1c      	ldr	r3, [pc, #112]	; (80021e0 <_ZL12MX_ADC2_Initv+0xd4>)
 800216e:	2200      	movs	r2, #0
 8002170:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8002172:	4b1b      	ldr	r3, [pc, #108]	; (80021e0 <_ZL12MX_ADC2_Initv+0xd4>)
 8002174:	2200      	movs	r2, #0
 8002176:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8002178:	4b19      	ldr	r3, [pc, #100]	; (80021e0 <_ZL12MX_ADC2_Initv+0xd4>)
 800217a:	2200      	movs	r2, #0
 800217c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8002180:	4817      	ldr	r0, [pc, #92]	; (80021e0 <_ZL12MX_ADC2_Initv+0xd4>)
 8002182:	f001 fee1 	bl	8003f48 <HAL_ADC_Init>
 8002186:	4603      	mov	r3, r0
 8002188:	2b00      	cmp	r3, #0
 800218a:	bf14      	ite	ne
 800218c:	2301      	movne	r3, #1
 800218e:	2300      	moveq	r3, #0
 8002190:	b2db      	uxtb	r3, r3
 8002192:	2b00      	cmp	r3, #0
 8002194:	d001      	beq.n	800219a <_ZL12MX_ADC2_Initv+0x8e>
  {
    Error_Handler();
 8002196:	f000 fedf 	bl	8002f58 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_19;
 800219a:	4b13      	ldr	r3, [pc, #76]	; (80021e8 <_ZL12MX_ADC2_Initv+0xdc>)
 800219c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800219e:	2306      	movs	r3, #6
 80021a0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80021a2:	2300      	movs	r3, #0
 80021a4:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80021a6:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80021aa:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80021ac:	2304      	movs	r3, #4
 80021ae:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80021b0:	2300      	movs	r3, #0
 80021b2:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80021b4:	2300      	movs	r3, #0
 80021b6:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80021b8:	1d3b      	adds	r3, r7, #4
 80021ba:	4619      	mov	r1, r3
 80021bc:	4808      	ldr	r0, [pc, #32]	; (80021e0 <_ZL12MX_ADC2_Initv+0xd4>)
 80021be:	f002 fa31 	bl	8004624 <HAL_ADC_ConfigChannel>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	bf14      	ite	ne
 80021c8:	2301      	movne	r3, #1
 80021ca:	2300      	moveq	r3, #0
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d001      	beq.n	80021d6 <_ZL12MX_ADC2_Initv+0xca>
  {
    Error_Handler();
 80021d2:	f000 fec1 	bl	8002f58 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80021d6:	bf00      	nop
 80021d8:	3720      	adds	r7, #32
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	2400025c 	.word	0x2400025c
 80021e4:	40022100 	.word	0x40022100
 80021e8:	4fb80000 	.word	0x4fb80000

080021ec <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80021f0:	4b22      	ldr	r3, [pc, #136]	; (800227c <_ZL12MX_I2C1_Initv+0x90>)
 80021f2:	4a23      	ldr	r2, [pc, #140]	; (8002280 <_ZL12MX_I2C1_Initv+0x94>)
 80021f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00909FCE;
 80021f6:	4b21      	ldr	r3, [pc, #132]	; (800227c <_ZL12MX_I2C1_Initv+0x90>)
 80021f8:	4a22      	ldr	r2, [pc, #136]	; (8002284 <_ZL12MX_I2C1_Initv+0x98>)
 80021fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80021fc:	4b1f      	ldr	r3, [pc, #124]	; (800227c <_ZL12MX_I2C1_Initv+0x90>)
 80021fe:	2200      	movs	r2, #0
 8002200:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002202:	4b1e      	ldr	r3, [pc, #120]	; (800227c <_ZL12MX_I2C1_Initv+0x90>)
 8002204:	2201      	movs	r2, #1
 8002206:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002208:	4b1c      	ldr	r3, [pc, #112]	; (800227c <_ZL12MX_I2C1_Initv+0x90>)
 800220a:	2200      	movs	r2, #0
 800220c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800220e:	4b1b      	ldr	r3, [pc, #108]	; (800227c <_ZL12MX_I2C1_Initv+0x90>)
 8002210:	2200      	movs	r2, #0
 8002212:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002214:	4b19      	ldr	r3, [pc, #100]	; (800227c <_ZL12MX_I2C1_Initv+0x90>)
 8002216:	2200      	movs	r2, #0
 8002218:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800221a:	4b18      	ldr	r3, [pc, #96]	; (800227c <_ZL12MX_I2C1_Initv+0x90>)
 800221c:	2200      	movs	r2, #0
 800221e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002220:	4b16      	ldr	r3, [pc, #88]	; (800227c <_ZL12MX_I2C1_Initv+0x90>)
 8002222:	2200      	movs	r2, #0
 8002224:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002226:	4815      	ldr	r0, [pc, #84]	; (800227c <_ZL12MX_I2C1_Initv+0x90>)
 8002228:	f005 fcfc 	bl	8007c24 <HAL_I2C_Init>
 800222c:	4603      	mov	r3, r0
 800222e:	2b00      	cmp	r3, #0
 8002230:	bf14      	ite	ne
 8002232:	2301      	movne	r3, #1
 8002234:	2300      	moveq	r3, #0
 8002236:	b2db      	uxtb	r3, r3
 8002238:	2b00      	cmp	r3, #0
 800223a:	d001      	beq.n	8002240 <_ZL12MX_I2C1_Initv+0x54>
  {
    Error_Handler();
 800223c:	f000 fe8c 	bl	8002f58 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002240:	2100      	movs	r1, #0
 8002242:	480e      	ldr	r0, [pc, #56]	; (800227c <_ZL12MX_I2C1_Initv+0x90>)
 8002244:	f006 f882 	bl	800834c <HAL_I2CEx_ConfigAnalogFilter>
 8002248:	4603      	mov	r3, r0
 800224a:	2b00      	cmp	r3, #0
 800224c:	bf14      	ite	ne
 800224e:	2301      	movne	r3, #1
 8002250:	2300      	moveq	r3, #0
 8002252:	b2db      	uxtb	r3, r3
 8002254:	2b00      	cmp	r3, #0
 8002256:	d001      	beq.n	800225c <_ZL12MX_I2C1_Initv+0x70>
  {
    Error_Handler();
 8002258:	f000 fe7e 	bl	8002f58 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800225c:	2100      	movs	r1, #0
 800225e:	4807      	ldr	r0, [pc, #28]	; (800227c <_ZL12MX_I2C1_Initv+0x90>)
 8002260:	f006 f8bf 	bl	80083e2 <HAL_I2CEx_ConfigDigitalFilter>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	bf14      	ite	ne
 800226a:	2301      	movne	r3, #1
 800226c:	2300      	moveq	r3, #0
 800226e:	b2db      	uxtb	r3, r3
 8002270:	2b00      	cmp	r3, #0
 8002272:	d001      	beq.n	8002278 <_ZL12MX_I2C1_Initv+0x8c>
  {
    Error_Handler();
 8002274:	f000 fe70 	bl	8002f58 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002278:	bf00      	nop
 800227a:	bd80      	pop	{r7, pc}
 800227c:	240002c0 	.word	0x240002c0
 8002280:	40005400 	.word	0x40005400
 8002284:	00909fce 	.word	0x00909fce

08002288 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b088      	sub	sp, #32
 800228c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800228e:	f107 0310 	add.w	r3, r7, #16
 8002292:	2200      	movs	r2, #0
 8002294:	601a      	str	r2, [r3, #0]
 8002296:	605a      	str	r2, [r3, #4]
 8002298:	609a      	str	r2, [r3, #8]
 800229a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800229c:	1d3b      	adds	r3, r7, #4
 800229e:	2200      	movs	r2, #0
 80022a0:	601a      	str	r2, [r3, #0]
 80022a2:	605a      	str	r2, [r3, #4]
 80022a4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80022a6:	4b27      	ldr	r3, [pc, #156]	; (8002344 <_ZL12MX_TIM1_Initv+0xbc>)
 80022a8:	4a27      	ldr	r2, [pc, #156]	; (8002348 <_ZL12MX_TIM1_Initv+0xc0>)
 80022aa:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 74;
 80022ac:	4b25      	ldr	r3, [pc, #148]	; (8002344 <_ZL12MX_TIM1_Initv+0xbc>)
 80022ae:	224a      	movs	r2, #74	; 0x4a
 80022b0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022b2:	4b24      	ldr	r3, [pc, #144]	; (8002344 <_ZL12MX_TIM1_Initv+0xbc>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000;
 80022b8:	4b22      	ldr	r3, [pc, #136]	; (8002344 <_ZL12MX_TIM1_Initv+0xbc>)
 80022ba:	f644 6220 	movw	r2, #20000	; 0x4e20
 80022be:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022c0:	4b20      	ldr	r3, [pc, #128]	; (8002344 <_ZL12MX_TIM1_Initv+0xbc>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80022c6:	4b1f      	ldr	r3, [pc, #124]	; (8002344 <_ZL12MX_TIM1_Initv+0xbc>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80022cc:	4b1d      	ldr	r3, [pc, #116]	; (8002344 <_ZL12MX_TIM1_Initv+0xbc>)
 80022ce:	2280      	movs	r2, #128	; 0x80
 80022d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80022d2:	481c      	ldr	r0, [pc, #112]	; (8002344 <_ZL12MX_TIM1_Initv+0xbc>)
 80022d4:	f009 ffaa 	bl	800c22c <HAL_TIM_Base_Init>
 80022d8:	4603      	mov	r3, r0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	bf14      	ite	ne
 80022de:	2301      	movne	r3, #1
 80022e0:	2300      	moveq	r3, #0
 80022e2:	b2db      	uxtb	r3, r3
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d001      	beq.n	80022ec <_ZL12MX_TIM1_Initv+0x64>
  {
    Error_Handler();
 80022e8:	f000 fe36 	bl	8002f58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022f0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80022f2:	f107 0310 	add.w	r3, r7, #16
 80022f6:	4619      	mov	r1, r3
 80022f8:	4812      	ldr	r0, [pc, #72]	; (8002344 <_ZL12MX_TIM1_Initv+0xbc>)
 80022fa:	f00a fd5f 	bl	800cdbc <HAL_TIM_ConfigClockSource>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	bf14      	ite	ne
 8002304:	2301      	movne	r3, #1
 8002306:	2300      	moveq	r3, #0
 8002308:	b2db      	uxtb	r3, r3
 800230a:	2b00      	cmp	r3, #0
 800230c:	d001      	beq.n	8002312 <_ZL12MX_TIM1_Initv+0x8a>
  {
    Error_Handler();
 800230e:	f000 fe23 	bl	8002f58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002312:	2300      	movs	r3, #0
 8002314:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002316:	2300      	movs	r3, #0
 8002318:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800231a:	2300      	movs	r3, #0
 800231c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800231e:	1d3b      	adds	r3, r7, #4
 8002320:	4619      	mov	r1, r3
 8002322:	4808      	ldr	r0, [pc, #32]	; (8002344 <_ZL12MX_TIM1_Initv+0xbc>)
 8002324:	f00b fa9e 	bl	800d864 <HAL_TIMEx_MasterConfigSynchronization>
 8002328:	4603      	mov	r3, r0
 800232a:	2b00      	cmp	r3, #0
 800232c:	bf14      	ite	ne
 800232e:	2301      	movne	r3, #1
 8002330:	2300      	moveq	r3, #0
 8002332:	b2db      	uxtb	r3, r3
 8002334:	2b00      	cmp	r3, #0
 8002336:	d001      	beq.n	800233c <_ZL12MX_TIM1_Initv+0xb4>
  {
    Error_Handler();
 8002338:	f000 fe0e 	bl	8002f58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800233c:	bf00      	nop
 800233e:	3720      	adds	r7, #32
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}
 8002344:	24000314 	.word	0x24000314
 8002348:	40010000 	.word	0x40010000

0800234c <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b08e      	sub	sp, #56	; 0x38
 8002350:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002352:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002356:	2200      	movs	r2, #0
 8002358:	601a      	str	r2, [r3, #0]
 800235a:	605a      	str	r2, [r3, #4]
 800235c:	609a      	str	r2, [r3, #8]
 800235e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002360:	f107 031c 	add.w	r3, r7, #28
 8002364:	2200      	movs	r2, #0
 8002366:	601a      	str	r2, [r3, #0]
 8002368:	605a      	str	r2, [r3, #4]
 800236a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800236c:	463b      	mov	r3, r7
 800236e:	2200      	movs	r2, #0
 8002370:	601a      	str	r2, [r3, #0]
 8002372:	605a      	str	r2, [r3, #4]
 8002374:	609a      	str	r2, [r3, #8]
 8002376:	60da      	str	r2, [r3, #12]
 8002378:	611a      	str	r2, [r3, #16]
 800237a:	615a      	str	r2, [r3, #20]
 800237c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800237e:	4b3a      	ldr	r3, [pc, #232]	; (8002468 <_ZL12MX_TIM2_Initv+0x11c>)
 8002380:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002384:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 75;
 8002386:	4b38      	ldr	r3, [pc, #224]	; (8002468 <_ZL12MX_TIM2_Initv+0x11c>)
 8002388:	224b      	movs	r2, #75	; 0x4b
 800238a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800238c:	4b36      	ldr	r3, [pc, #216]	; (8002468 <_ZL12MX_TIM2_Initv+0x11c>)
 800238e:	2200      	movs	r2, #0
 8002390:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1950;
 8002392:	4b35      	ldr	r3, [pc, #212]	; (8002468 <_ZL12MX_TIM2_Initv+0x11c>)
 8002394:	f240 729e 	movw	r2, #1950	; 0x79e
 8002398:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800239a:	4b33      	ldr	r3, [pc, #204]	; (8002468 <_ZL12MX_TIM2_Initv+0x11c>)
 800239c:	2200      	movs	r2, #0
 800239e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80023a0:	4b31      	ldr	r3, [pc, #196]	; (8002468 <_ZL12MX_TIM2_Initv+0x11c>)
 80023a2:	2280      	movs	r2, #128	; 0x80
 80023a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80023a6:	4830      	ldr	r0, [pc, #192]	; (8002468 <_ZL12MX_TIM2_Initv+0x11c>)
 80023a8:	f009 ff40 	bl	800c22c <HAL_TIM_Base_Init>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	bf14      	ite	ne
 80023b2:	2301      	movne	r3, #1
 80023b4:	2300      	moveq	r3, #0
 80023b6:	b2db      	uxtb	r3, r3
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d001      	beq.n	80023c0 <_ZL12MX_TIM2_Initv+0x74>
  {
    Error_Handler();
 80023bc:	f000 fdcc 	bl	8002f58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023c4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80023c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80023ca:	4619      	mov	r1, r3
 80023cc:	4826      	ldr	r0, [pc, #152]	; (8002468 <_ZL12MX_TIM2_Initv+0x11c>)
 80023ce:	f00a fcf5 	bl	800cdbc <HAL_TIM_ConfigClockSource>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	bf14      	ite	ne
 80023d8:	2301      	movne	r3, #1
 80023da:	2300      	moveq	r3, #0
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d001      	beq.n	80023e6 <_ZL12MX_TIM2_Initv+0x9a>
  {
    Error_Handler();
 80023e2:	f000 fdb9 	bl	8002f58 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80023e6:	4820      	ldr	r0, [pc, #128]	; (8002468 <_ZL12MX_TIM2_Initv+0x11c>)
 80023e8:	f009 fff0 	bl	800c3cc <HAL_TIM_PWM_Init>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	bf14      	ite	ne
 80023f2:	2301      	movne	r3, #1
 80023f4:	2300      	moveq	r3, #0
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d001      	beq.n	8002400 <_ZL12MX_TIM2_Initv+0xb4>
  {
    Error_Handler();
 80023fc:	f000 fdac 	bl	8002f58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002400:	2300      	movs	r3, #0
 8002402:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002404:	2300      	movs	r3, #0
 8002406:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002408:	f107 031c 	add.w	r3, r7, #28
 800240c:	4619      	mov	r1, r3
 800240e:	4816      	ldr	r0, [pc, #88]	; (8002468 <_ZL12MX_TIM2_Initv+0x11c>)
 8002410:	f00b fa28 	bl	800d864 <HAL_TIMEx_MasterConfigSynchronization>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	bf14      	ite	ne
 800241a:	2301      	movne	r3, #1
 800241c:	2300      	moveq	r3, #0
 800241e:	b2db      	uxtb	r3, r3
 8002420:	2b00      	cmp	r3, #0
 8002422:	d001      	beq.n	8002428 <_ZL12MX_TIM2_Initv+0xdc>
  {
    Error_Handler();
 8002424:	f000 fd98 	bl	8002f58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002428:	2360      	movs	r3, #96	; 0x60
 800242a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800242c:	2300      	movs	r3, #0
 800242e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002430:	2300      	movs	r3, #0
 8002432:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002434:	2300      	movs	r3, #0
 8002436:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002438:	463b      	mov	r3, r7
 800243a:	2200      	movs	r2, #0
 800243c:	4619      	mov	r1, r3
 800243e:	480a      	ldr	r0, [pc, #40]	; (8002468 <_ZL12MX_TIM2_Initv+0x11c>)
 8002440:	f00a fba8 	bl	800cb94 <HAL_TIM_PWM_ConfigChannel>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	bf14      	ite	ne
 800244a:	2301      	movne	r3, #1
 800244c:	2300      	moveq	r3, #0
 800244e:	b2db      	uxtb	r3, r3
 8002450:	2b00      	cmp	r3, #0
 8002452:	d001      	beq.n	8002458 <_ZL12MX_TIM2_Initv+0x10c>
  {
    Error_Handler();
 8002454:	f000 fd80 	bl	8002f58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002458:	4803      	ldr	r0, [pc, #12]	; (8002468 <_ZL12MX_TIM2_Initv+0x11c>)
 800245a:	f000 ff85 	bl	8003368 <HAL_TIM_MspPostInit>

}
 800245e:	bf00      	nop
 8002460:	3738      	adds	r7, #56	; 0x38
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	24000360 	.word	0x24000360

0800246c <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b08e      	sub	sp, #56	; 0x38
 8002470:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002472:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002476:	2200      	movs	r2, #0
 8002478:	601a      	str	r2, [r3, #0]
 800247a:	605a      	str	r2, [r3, #4]
 800247c:	609a      	str	r2, [r3, #8]
 800247e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002480:	f107 031c 	add.w	r3, r7, #28
 8002484:	2200      	movs	r2, #0
 8002486:	601a      	str	r2, [r3, #0]
 8002488:	605a      	str	r2, [r3, #4]
 800248a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800248c:	463b      	mov	r3, r7
 800248e:	2200      	movs	r2, #0
 8002490:	601a      	str	r2, [r3, #0]
 8002492:	605a      	str	r2, [r3, #4]
 8002494:	609a      	str	r2, [r3, #8]
 8002496:	60da      	str	r2, [r3, #12]
 8002498:	611a      	str	r2, [r3, #16]
 800249a:	615a      	str	r2, [r3, #20]
 800249c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800249e:	4b39      	ldr	r3, [pc, #228]	; (8002584 <_ZL12MX_TIM3_Initv+0x118>)
 80024a0:	4a39      	ldr	r2, [pc, #228]	; (8002588 <_ZL12MX_TIM3_Initv+0x11c>)
 80024a2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 75;
 80024a4:	4b37      	ldr	r3, [pc, #220]	; (8002584 <_ZL12MX_TIM3_Initv+0x118>)
 80024a6:	224b      	movs	r2, #75	; 0x4b
 80024a8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024aa:	4b36      	ldr	r3, [pc, #216]	; (8002584 <_ZL12MX_TIM3_Initv+0x118>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1950;
 80024b0:	4b34      	ldr	r3, [pc, #208]	; (8002584 <_ZL12MX_TIM3_Initv+0x118>)
 80024b2:	f240 729e 	movw	r2, #1950	; 0x79e
 80024b6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024b8:	4b32      	ldr	r3, [pc, #200]	; (8002584 <_ZL12MX_TIM3_Initv+0x118>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80024be:	4b31      	ldr	r3, [pc, #196]	; (8002584 <_ZL12MX_TIM3_Initv+0x118>)
 80024c0:	2280      	movs	r2, #128	; 0x80
 80024c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80024c4:	482f      	ldr	r0, [pc, #188]	; (8002584 <_ZL12MX_TIM3_Initv+0x118>)
 80024c6:	f009 feb1 	bl	800c22c <HAL_TIM_Base_Init>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	bf14      	ite	ne
 80024d0:	2301      	movne	r3, #1
 80024d2:	2300      	moveq	r3, #0
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d001      	beq.n	80024de <_ZL12MX_TIM3_Initv+0x72>
  {
    Error_Handler();
 80024da:	f000 fd3d 	bl	8002f58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024e2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80024e4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80024e8:	4619      	mov	r1, r3
 80024ea:	4826      	ldr	r0, [pc, #152]	; (8002584 <_ZL12MX_TIM3_Initv+0x118>)
 80024ec:	f00a fc66 	bl	800cdbc <HAL_TIM_ConfigClockSource>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	bf14      	ite	ne
 80024f6:	2301      	movne	r3, #1
 80024f8:	2300      	moveq	r3, #0
 80024fa:	b2db      	uxtb	r3, r3
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d001      	beq.n	8002504 <_ZL12MX_TIM3_Initv+0x98>
  {
    Error_Handler();
 8002500:	f000 fd2a 	bl	8002f58 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002504:	481f      	ldr	r0, [pc, #124]	; (8002584 <_ZL12MX_TIM3_Initv+0x118>)
 8002506:	f009 ff61 	bl	800c3cc <HAL_TIM_PWM_Init>
 800250a:	4603      	mov	r3, r0
 800250c:	2b00      	cmp	r3, #0
 800250e:	bf14      	ite	ne
 8002510:	2301      	movne	r3, #1
 8002512:	2300      	moveq	r3, #0
 8002514:	b2db      	uxtb	r3, r3
 8002516:	2b00      	cmp	r3, #0
 8002518:	d001      	beq.n	800251e <_ZL12MX_TIM3_Initv+0xb2>
  {
    Error_Handler();
 800251a:	f000 fd1d 	bl	8002f58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800251e:	2300      	movs	r3, #0
 8002520:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002522:	2300      	movs	r3, #0
 8002524:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002526:	f107 031c 	add.w	r3, r7, #28
 800252a:	4619      	mov	r1, r3
 800252c:	4815      	ldr	r0, [pc, #84]	; (8002584 <_ZL12MX_TIM3_Initv+0x118>)
 800252e:	f00b f999 	bl	800d864 <HAL_TIMEx_MasterConfigSynchronization>
 8002532:	4603      	mov	r3, r0
 8002534:	2b00      	cmp	r3, #0
 8002536:	bf14      	ite	ne
 8002538:	2301      	movne	r3, #1
 800253a:	2300      	moveq	r3, #0
 800253c:	b2db      	uxtb	r3, r3
 800253e:	2b00      	cmp	r3, #0
 8002540:	d001      	beq.n	8002546 <_ZL12MX_TIM3_Initv+0xda>
  {
    Error_Handler();
 8002542:	f000 fd09 	bl	8002f58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002546:	2360      	movs	r3, #96	; 0x60
 8002548:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800254a:	2300      	movs	r3, #0
 800254c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800254e:	2300      	movs	r3, #0
 8002550:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002552:	2300      	movs	r3, #0
 8002554:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002556:	463b      	mov	r3, r7
 8002558:	2200      	movs	r2, #0
 800255a:	4619      	mov	r1, r3
 800255c:	4809      	ldr	r0, [pc, #36]	; (8002584 <_ZL12MX_TIM3_Initv+0x118>)
 800255e:	f00a fb19 	bl	800cb94 <HAL_TIM_PWM_ConfigChannel>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	bf14      	ite	ne
 8002568:	2301      	movne	r3, #1
 800256a:	2300      	moveq	r3, #0
 800256c:	b2db      	uxtb	r3, r3
 800256e:	2b00      	cmp	r3, #0
 8002570:	d001      	beq.n	8002576 <_ZL12MX_TIM3_Initv+0x10a>
  {
    Error_Handler();
 8002572:	f000 fcf1 	bl	8002f58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002576:	4803      	ldr	r0, [pc, #12]	; (8002584 <_ZL12MX_TIM3_Initv+0x118>)
 8002578:	f000 fef6 	bl	8003368 <HAL_TIM_MspPostInit>

}
 800257c:	bf00      	nop
 800257e:	3738      	adds	r7, #56	; 0x38
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}
 8002584:	240003ac 	.word	0x240003ac
 8002588:	40000400 	.word	0x40000400

0800258c <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b08c      	sub	sp, #48	; 0x30
 8002590:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002592:	f107 030c 	add.w	r3, r7, #12
 8002596:	2224      	movs	r2, #36	; 0x24
 8002598:	2100      	movs	r1, #0
 800259a:	4618      	mov	r0, r3
 800259c:	f011 ff3f 	bl	801441e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025a0:	463b      	mov	r3, r7
 80025a2:	2200      	movs	r2, #0
 80025a4:	601a      	str	r2, [r3, #0]
 80025a6:	605a      	str	r2, [r3, #4]
 80025a8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80025aa:	4b26      	ldr	r3, [pc, #152]	; (8002644 <_ZL12MX_TIM4_Initv+0xb8>)
 80025ac:	4a26      	ldr	r2, [pc, #152]	; (8002648 <_ZL12MX_TIM4_Initv+0xbc>)
 80025ae:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80025b0:	4b24      	ldr	r3, [pc, #144]	; (8002644 <_ZL12MX_TIM4_Initv+0xb8>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025b6:	4b23      	ldr	r3, [pc, #140]	; (8002644 <_ZL12MX_TIM4_Initv+0xb8>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 538;
 80025bc:	4b21      	ldr	r3, [pc, #132]	; (8002644 <_ZL12MX_TIM4_Initv+0xb8>)
 80025be:	f240 221a 	movw	r2, #538	; 0x21a
 80025c2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025c4:	4b1f      	ldr	r3, [pc, #124]	; (8002644 <_ZL12MX_TIM4_Initv+0xb8>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80025ca:	4b1e      	ldr	r3, [pc, #120]	; (8002644 <_ZL12MX_TIM4_Initv+0xb8>)
 80025cc:	2280      	movs	r2, #128	; 0x80
 80025ce:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80025d0:	2303      	movs	r3, #3
 80025d2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 80025d4:	2302      	movs	r3, #2
 80025d6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80025d8:	2301      	movs	r3, #1
 80025da:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80025dc:	2300      	movs	r3, #0
 80025de:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 1;
 80025e0:	2301      	movs	r3, #1
 80025e2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80025e4:	2302      	movs	r3, #2
 80025e6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80025e8:	2301      	movs	r3, #1
 80025ea:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80025ec:	2300      	movs	r3, #0
 80025ee:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 1;
 80025f0:	2301      	movs	r3, #1
 80025f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80025f4:	f107 030c 	add.w	r3, r7, #12
 80025f8:	4619      	mov	r1, r3
 80025fa:	4812      	ldr	r0, [pc, #72]	; (8002644 <_ZL12MX_TIM4_Initv+0xb8>)
 80025fc:	f00a f856 	bl	800c6ac <HAL_TIM_Encoder_Init>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	bf14      	ite	ne
 8002606:	2301      	movne	r3, #1
 8002608:	2300      	moveq	r3, #0
 800260a:	b2db      	uxtb	r3, r3
 800260c:	2b00      	cmp	r3, #0
 800260e:	d001      	beq.n	8002614 <_ZL12MX_TIM4_Initv+0x88>
  {
    Error_Handler();
 8002610:	f000 fca2 	bl	8002f58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002614:	2300      	movs	r3, #0
 8002616:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002618:	2300      	movs	r3, #0
 800261a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800261c:	463b      	mov	r3, r7
 800261e:	4619      	mov	r1, r3
 8002620:	4808      	ldr	r0, [pc, #32]	; (8002644 <_ZL12MX_TIM4_Initv+0xb8>)
 8002622:	f00b f91f 	bl	800d864 <HAL_TIMEx_MasterConfigSynchronization>
 8002626:	4603      	mov	r3, r0
 8002628:	2b00      	cmp	r3, #0
 800262a:	bf14      	ite	ne
 800262c:	2301      	movne	r3, #1
 800262e:	2300      	moveq	r3, #0
 8002630:	b2db      	uxtb	r3, r3
 8002632:	2b00      	cmp	r3, #0
 8002634:	d001      	beq.n	800263a <_ZL12MX_TIM4_Initv+0xae>
  {
    Error_Handler();
 8002636:	f000 fc8f 	bl	8002f58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800263a:	bf00      	nop
 800263c:	3730      	adds	r7, #48	; 0x30
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	240003f8 	.word	0x240003f8
 8002648:	40000800 	.word	0x40000800

0800264c <_ZL12MX_TIM5_Initv>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b08e      	sub	sp, #56	; 0x38
 8002650:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002652:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002656:	2200      	movs	r2, #0
 8002658:	601a      	str	r2, [r3, #0]
 800265a:	605a      	str	r2, [r3, #4]
 800265c:	609a      	str	r2, [r3, #8]
 800265e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002660:	f107 031c 	add.w	r3, r7, #28
 8002664:	2200      	movs	r2, #0
 8002666:	601a      	str	r2, [r3, #0]
 8002668:	605a      	str	r2, [r3, #4]
 800266a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800266c:	463b      	mov	r3, r7
 800266e:	2200      	movs	r2, #0
 8002670:	601a      	str	r2, [r3, #0]
 8002672:	605a      	str	r2, [r3, #4]
 8002674:	609a      	str	r2, [r3, #8]
 8002676:	60da      	str	r2, [r3, #12]
 8002678:	611a      	str	r2, [r3, #16]
 800267a:	615a      	str	r2, [r3, #20]
 800267c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800267e:	4b39      	ldr	r3, [pc, #228]	; (8002764 <_ZL12MX_TIM5_Initv+0x118>)
 8002680:	4a39      	ldr	r2, [pc, #228]	; (8002768 <_ZL12MX_TIM5_Initv+0x11c>)
 8002682:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 100-1;
 8002684:	4b37      	ldr	r3, [pc, #220]	; (8002764 <_ZL12MX_TIM5_Initv+0x118>)
 8002686:	2263      	movs	r2, #99	; 0x63
 8002688:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800268a:	4b36      	ldr	r3, [pc, #216]	; (8002764 <_ZL12MX_TIM5_Initv+0x118>)
 800268c:	2200      	movs	r2, #0
 800268e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 15000-1;
 8002690:	4b34      	ldr	r3, [pc, #208]	; (8002764 <_ZL12MX_TIM5_Initv+0x118>)
 8002692:	f643 2297 	movw	r2, #14999	; 0x3a97
 8002696:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002698:	4b32      	ldr	r3, [pc, #200]	; (8002764 <_ZL12MX_TIM5_Initv+0x118>)
 800269a:	2200      	movs	r2, #0
 800269c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800269e:	4b31      	ldr	r3, [pc, #196]	; (8002764 <_ZL12MX_TIM5_Initv+0x118>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80026a4:	482f      	ldr	r0, [pc, #188]	; (8002764 <_ZL12MX_TIM5_Initv+0x118>)
 80026a6:	f009 fdc1 	bl	800c22c <HAL_TIM_Base_Init>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	bf14      	ite	ne
 80026b0:	2301      	movne	r3, #1
 80026b2:	2300      	moveq	r3, #0
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d001      	beq.n	80026be <_ZL12MX_TIM5_Initv+0x72>
  {
    Error_Handler();
 80026ba:	f000 fc4d 	bl	8002f58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026c2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80026c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80026c8:	4619      	mov	r1, r3
 80026ca:	4826      	ldr	r0, [pc, #152]	; (8002764 <_ZL12MX_TIM5_Initv+0x118>)
 80026cc:	f00a fb76 	bl	800cdbc <HAL_TIM_ConfigClockSource>
 80026d0:	4603      	mov	r3, r0
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	bf14      	ite	ne
 80026d6:	2301      	movne	r3, #1
 80026d8:	2300      	moveq	r3, #0
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d001      	beq.n	80026e4 <_ZL12MX_TIM5_Initv+0x98>
  {
    Error_Handler();
 80026e0:	f000 fc3a 	bl	8002f58 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80026e4:	481f      	ldr	r0, [pc, #124]	; (8002764 <_ZL12MX_TIM5_Initv+0x118>)
 80026e6:	f009 fe71 	bl	800c3cc <HAL_TIM_PWM_Init>
 80026ea:	4603      	mov	r3, r0
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	bf14      	ite	ne
 80026f0:	2301      	movne	r3, #1
 80026f2:	2300      	moveq	r3, #0
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d001      	beq.n	80026fe <_ZL12MX_TIM5_Initv+0xb2>
  {
    Error_Handler();
 80026fa:	f000 fc2d 	bl	8002f58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026fe:	2300      	movs	r3, #0
 8002700:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002702:	2300      	movs	r3, #0
 8002704:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002706:	f107 031c 	add.w	r3, r7, #28
 800270a:	4619      	mov	r1, r3
 800270c:	4815      	ldr	r0, [pc, #84]	; (8002764 <_ZL12MX_TIM5_Initv+0x118>)
 800270e:	f00b f8a9 	bl	800d864 <HAL_TIMEx_MasterConfigSynchronization>
 8002712:	4603      	mov	r3, r0
 8002714:	2b00      	cmp	r3, #0
 8002716:	bf14      	ite	ne
 8002718:	2301      	movne	r3, #1
 800271a:	2300      	moveq	r3, #0
 800271c:	b2db      	uxtb	r3, r3
 800271e:	2b00      	cmp	r3, #0
 8002720:	d001      	beq.n	8002726 <_ZL12MX_TIM5_Initv+0xda>
  {
    Error_Handler();
 8002722:	f000 fc19 	bl	8002f58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002726:	2360      	movs	r3, #96	; 0x60
 8002728:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800272a:	2300      	movs	r3, #0
 800272c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800272e:	2300      	movs	r3, #0
 8002730:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002732:	2300      	movs	r3, #0
 8002734:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002736:	463b      	mov	r3, r7
 8002738:	220c      	movs	r2, #12
 800273a:	4619      	mov	r1, r3
 800273c:	4809      	ldr	r0, [pc, #36]	; (8002764 <_ZL12MX_TIM5_Initv+0x118>)
 800273e:	f00a fa29 	bl	800cb94 <HAL_TIM_PWM_ConfigChannel>
 8002742:	4603      	mov	r3, r0
 8002744:	2b00      	cmp	r3, #0
 8002746:	bf14      	ite	ne
 8002748:	2301      	movne	r3, #1
 800274a:	2300      	moveq	r3, #0
 800274c:	b2db      	uxtb	r3, r3
 800274e:	2b00      	cmp	r3, #0
 8002750:	d001      	beq.n	8002756 <_ZL12MX_TIM5_Initv+0x10a>
  {
    Error_Handler();
 8002752:	f000 fc01 	bl	8002f58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8002756:	4803      	ldr	r0, [pc, #12]	; (8002764 <_ZL12MX_TIM5_Initv+0x118>)
 8002758:	f000 fe06 	bl	8003368 <HAL_TIM_MspPostInit>

}
 800275c:	bf00      	nop
 800275e:	3738      	adds	r7, #56	; 0x38
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}
 8002764:	24000444 	.word	0x24000444
 8002768:	40000c00 	.word	0x40000c00

0800276c <_ZL12MX_TIM8_Initv>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b08c      	sub	sp, #48	; 0x30
 8002770:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002772:	f107 030c 	add.w	r3, r7, #12
 8002776:	2224      	movs	r2, #36	; 0x24
 8002778:	2100      	movs	r1, #0
 800277a:	4618      	mov	r0, r3
 800277c:	f011 fe4f 	bl	801441e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002780:	463b      	mov	r3, r7
 8002782:	2200      	movs	r2, #0
 8002784:	601a      	str	r2, [r3, #0]
 8002786:	605a      	str	r2, [r3, #4]
 8002788:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800278a:	4b28      	ldr	r3, [pc, #160]	; (800282c <_ZL12MX_TIM8_Initv+0xc0>)
 800278c:	4a28      	ldr	r2, [pc, #160]	; (8002830 <_ZL12MX_TIM8_Initv+0xc4>)
 800278e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002790:	4b26      	ldr	r3, [pc, #152]	; (800282c <_ZL12MX_TIM8_Initv+0xc0>)
 8002792:	2200      	movs	r2, #0
 8002794:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002796:	4b25      	ldr	r3, [pc, #148]	; (800282c <_ZL12MX_TIM8_Initv+0xc0>)
 8002798:	2200      	movs	r2, #0
 800279a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 538;
 800279c:	4b23      	ldr	r3, [pc, #140]	; (800282c <_ZL12MX_TIM8_Initv+0xc0>)
 800279e:	f240 221a 	movw	r2, #538	; 0x21a
 80027a2:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027a4:	4b21      	ldr	r3, [pc, #132]	; (800282c <_ZL12MX_TIM8_Initv+0xc0>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80027aa:	4b20      	ldr	r3, [pc, #128]	; (800282c <_ZL12MX_TIM8_Initv+0xc0>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80027b0:	4b1e      	ldr	r3, [pc, #120]	; (800282c <_ZL12MX_TIM8_Initv+0xc0>)
 80027b2:	2280      	movs	r2, #128	; 0x80
 80027b4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80027b6:	2303      	movs	r3, #3
 80027b8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80027ba:	2300      	movs	r3, #0
 80027bc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80027be:	2301      	movs	r3, #1
 80027c0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80027c2:	2300      	movs	r3, #0
 80027c4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 1;
 80027c6:	2301      	movs	r3, #1
 80027c8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80027ca:	2300      	movs	r3, #0
 80027cc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80027ce:	2301      	movs	r3, #1
 80027d0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80027d2:	2300      	movs	r3, #0
 80027d4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 1;
 80027d6:	2301      	movs	r3, #1
 80027d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 80027da:	f107 030c 	add.w	r3, r7, #12
 80027de:	4619      	mov	r1, r3
 80027e0:	4812      	ldr	r0, [pc, #72]	; (800282c <_ZL12MX_TIM8_Initv+0xc0>)
 80027e2:	f009 ff63 	bl	800c6ac <HAL_TIM_Encoder_Init>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	bf14      	ite	ne
 80027ec:	2301      	movne	r3, #1
 80027ee:	2300      	moveq	r3, #0
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d001      	beq.n	80027fa <_ZL12MX_TIM8_Initv+0x8e>
  {
    Error_Handler();
 80027f6:	f000 fbaf 	bl	8002f58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027fa:	2300      	movs	r3, #0
 80027fc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80027fe:	2300      	movs	r3, #0
 8002800:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002802:	2300      	movs	r3, #0
 8002804:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002806:	463b      	mov	r3, r7
 8002808:	4619      	mov	r1, r3
 800280a:	4808      	ldr	r0, [pc, #32]	; (800282c <_ZL12MX_TIM8_Initv+0xc0>)
 800280c:	f00b f82a 	bl	800d864 <HAL_TIMEx_MasterConfigSynchronization>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	bf14      	ite	ne
 8002816:	2301      	movne	r3, #1
 8002818:	2300      	moveq	r3, #0
 800281a:	b2db      	uxtb	r3, r3
 800281c:	2b00      	cmp	r3, #0
 800281e:	d001      	beq.n	8002824 <_ZL12MX_TIM8_Initv+0xb8>
  {
    Error_Handler();
 8002820:	f000 fb9a 	bl	8002f58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8002824:	bf00      	nop
 8002826:	3730      	adds	r7, #48	; 0x30
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}
 800282c:	24000490 	.word	0x24000490
 8002830:	40010400 	.word	0x40010400

08002834 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002838:	4b2c      	ldr	r3, [pc, #176]	; (80028ec <_ZL19MX_USART3_UART_Initv+0xb8>)
 800283a:	4a2d      	ldr	r2, [pc, #180]	; (80028f0 <_ZL19MX_USART3_UART_Initv+0xbc>)
 800283c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800283e:	4b2b      	ldr	r3, [pc, #172]	; (80028ec <_ZL19MX_USART3_UART_Initv+0xb8>)
 8002840:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002844:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002846:	4b29      	ldr	r3, [pc, #164]	; (80028ec <_ZL19MX_USART3_UART_Initv+0xb8>)
 8002848:	2200      	movs	r2, #0
 800284a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800284c:	4b27      	ldr	r3, [pc, #156]	; (80028ec <_ZL19MX_USART3_UART_Initv+0xb8>)
 800284e:	2200      	movs	r2, #0
 8002850:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002852:	4b26      	ldr	r3, [pc, #152]	; (80028ec <_ZL19MX_USART3_UART_Initv+0xb8>)
 8002854:	2200      	movs	r2, #0
 8002856:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002858:	4b24      	ldr	r3, [pc, #144]	; (80028ec <_ZL19MX_USART3_UART_Initv+0xb8>)
 800285a:	220c      	movs	r2, #12
 800285c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800285e:	4b23      	ldr	r3, [pc, #140]	; (80028ec <_ZL19MX_USART3_UART_Initv+0xb8>)
 8002860:	2200      	movs	r2, #0
 8002862:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002864:	4b21      	ldr	r3, [pc, #132]	; (80028ec <_ZL19MX_USART3_UART_Initv+0xb8>)
 8002866:	2200      	movs	r2, #0
 8002868:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800286a:	4b20      	ldr	r3, [pc, #128]	; (80028ec <_ZL19MX_USART3_UART_Initv+0xb8>)
 800286c:	2200      	movs	r2, #0
 800286e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002870:	4b1e      	ldr	r3, [pc, #120]	; (80028ec <_ZL19MX_USART3_UART_Initv+0xb8>)
 8002872:	2200      	movs	r2, #0
 8002874:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002876:	4b1d      	ldr	r3, [pc, #116]	; (80028ec <_ZL19MX_USART3_UART_Initv+0xb8>)
 8002878:	2200      	movs	r2, #0
 800287a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800287c:	481b      	ldr	r0, [pc, #108]	; (80028ec <_ZL19MX_USART3_UART_Initv+0xb8>)
 800287e:	f00b f89d 	bl	800d9bc <HAL_UART_Init>
 8002882:	4603      	mov	r3, r0
 8002884:	2b00      	cmp	r3, #0
 8002886:	bf14      	ite	ne
 8002888:	2301      	movne	r3, #1
 800288a:	2300      	moveq	r3, #0
 800288c:	b2db      	uxtb	r3, r3
 800288e:	2b00      	cmp	r3, #0
 8002890:	d001      	beq.n	8002896 <_ZL19MX_USART3_UART_Initv+0x62>
  {
    Error_Handler();
 8002892:	f000 fb61 	bl	8002f58 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002896:	2100      	movs	r1, #0
 8002898:	4814      	ldr	r0, [pc, #80]	; (80028ec <_ZL19MX_USART3_UART_Initv+0xb8>)
 800289a:	f00c fd61 	bl	800f360 <HAL_UARTEx_SetTxFifoThreshold>
 800289e:	4603      	mov	r3, r0
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	bf14      	ite	ne
 80028a4:	2301      	movne	r3, #1
 80028a6:	2300      	moveq	r3, #0
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d001      	beq.n	80028b2 <_ZL19MX_USART3_UART_Initv+0x7e>
  {
    Error_Handler();
 80028ae:	f000 fb53 	bl	8002f58 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80028b2:	2100      	movs	r1, #0
 80028b4:	480d      	ldr	r0, [pc, #52]	; (80028ec <_ZL19MX_USART3_UART_Initv+0xb8>)
 80028b6:	f00c fd91 	bl	800f3dc <HAL_UARTEx_SetRxFifoThreshold>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2b00      	cmp	r3, #0
 80028be:	bf14      	ite	ne
 80028c0:	2301      	movne	r3, #1
 80028c2:	2300      	moveq	r3, #0
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d001      	beq.n	80028ce <_ZL19MX_USART3_UART_Initv+0x9a>
  {
    Error_Handler();
 80028ca:	f000 fb45 	bl	8002f58 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80028ce:	4807      	ldr	r0, [pc, #28]	; (80028ec <_ZL19MX_USART3_UART_Initv+0xb8>)
 80028d0:	f00c fd0d 	bl	800f2ee <HAL_UARTEx_DisableFifoMode>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	bf14      	ite	ne
 80028da:	2301      	movne	r3, #1
 80028dc:	2300      	moveq	r3, #0
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d001      	beq.n	80028e8 <_ZL19MX_USART3_UART_Initv+0xb4>
  {
    Error_Handler();
 80028e4:	f000 fb38 	bl	8002f58 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80028e8:	bf00      	nop
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	240004dc 	.word	0x240004dc
 80028f0:	40004800 	.word	0x40004800

080028f4 <_ZL22MX_USB_OTG_FS_PCD_Initv>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80028f8:	4b17      	ldr	r3, [pc, #92]	; (8002958 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 80028fa:	4a18      	ldr	r2, [pc, #96]	; (800295c <_ZL22MX_USB_OTG_FS_PCD_Initv+0x68>)
 80028fc:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80028fe:	4b16      	ldr	r3, [pc, #88]	; (8002958 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8002900:	2209      	movs	r2, #9
 8002902:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002904:	4b14      	ldr	r3, [pc, #80]	; (8002958 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8002906:	2202      	movs	r2, #2
 8002908:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800290a:	4b13      	ldr	r3, [pc, #76]	; (8002958 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 800290c:	2200      	movs	r2, #0
 800290e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002910:	4b11      	ldr	r3, [pc, #68]	; (8002958 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8002912:	2202      	movs	r2, #2
 8002914:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8002916:	4b10      	ldr	r3, [pc, #64]	; (8002958 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8002918:	2200      	movs	r2, #0
 800291a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800291c:	4b0e      	ldr	r3, [pc, #56]	; (8002958 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 800291e:	2200      	movs	r2, #0
 8002920:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002922:	4b0d      	ldr	r3, [pc, #52]	; (8002958 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8002924:	2200      	movs	r2, #0
 8002926:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8002928:	4b0b      	ldr	r3, [pc, #44]	; (8002958 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 800292a:	2201      	movs	r2, #1
 800292c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800292e:	4b0a      	ldr	r3, [pc, #40]	; (8002958 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8002930:	2201      	movs	r2, #1
 8002932:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002934:	4b08      	ldr	r3, [pc, #32]	; (8002958 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8002936:	2200      	movs	r2, #0
 8002938:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800293a:	4807      	ldr	r0, [pc, #28]	; (8002958 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 800293c:	f005 fd9d 	bl	800847a <HAL_PCD_Init>
 8002940:	4603      	mov	r3, r0
 8002942:	2b00      	cmp	r3, #0
 8002944:	bf14      	ite	ne
 8002946:	2301      	movne	r3, #1
 8002948:	2300      	moveq	r3, #0
 800294a:	b2db      	uxtb	r3, r3
 800294c:	2b00      	cmp	r3, #0
 800294e:	d001      	beq.n	8002954 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>
  {
    Error_Handler();
 8002950:	f000 fb02 	bl	8002f58 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002954:	bf00      	nop
 8002956:	bd80      	pop	{r7, pc}
 8002958:	24000660 	.word	0x24000660
 800295c:	40080000 	.word	0x40080000

08002960 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b082      	sub	sp, #8
 8002964:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002966:	4b11      	ldr	r3, [pc, #68]	; (80029ac <_ZL11MX_DMA_Initv+0x4c>)
 8002968:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800296c:	4a0f      	ldr	r2, [pc, #60]	; (80029ac <_ZL11MX_DMA_Initv+0x4c>)
 800296e:	f043 0301 	orr.w	r3, r3, #1
 8002972:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002976:	4b0d      	ldr	r3, [pc, #52]	; (80029ac <_ZL11MX_DMA_Initv+0x4c>)
 8002978:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800297c:	f003 0301 	and.w	r3, r3, #1
 8002980:	607b      	str	r3, [r7, #4]
 8002982:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8002984:	2200      	movs	r2, #0
 8002986:	2105      	movs	r1, #5
 8002988:	200b      	movs	r0, #11
 800298a:	f002 fced 	bl	8005368 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800298e:	200b      	movs	r0, #11
 8002990:	f002 fd04 	bl	800539c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8002994:	2200      	movs	r2, #0
 8002996:	2105      	movs	r1, #5
 8002998:	200c      	movs	r0, #12
 800299a:	f002 fce5 	bl	8005368 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800299e:	200c      	movs	r0, #12
 80029a0:	f002 fcfc 	bl	800539c <HAL_NVIC_EnableIRQ>

}
 80029a4:	bf00      	nop
 80029a6:	3708      	adds	r7, #8
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	58024400 	.word	0x58024400

080029b0 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b08c      	sub	sp, #48	; 0x30
 80029b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029b6:	f107 031c 	add.w	r3, r7, #28
 80029ba:	2200      	movs	r2, #0
 80029bc:	601a      	str	r2, [r3, #0]
 80029be:	605a      	str	r2, [r3, #4]
 80029c0:	609a      	str	r2, [r3, #8]
 80029c2:	60da      	str	r2, [r3, #12]
 80029c4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80029c6:	4b58      	ldr	r3, [pc, #352]	; (8002b28 <_ZL12MX_GPIO_Initv+0x178>)
 80029c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029cc:	4a56      	ldr	r2, [pc, #344]	; (8002b28 <_ZL12MX_GPIO_Initv+0x178>)
 80029ce:	f043 0304 	orr.w	r3, r3, #4
 80029d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80029d6:	4b54      	ldr	r3, [pc, #336]	; (8002b28 <_ZL12MX_GPIO_Initv+0x178>)
 80029d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029dc:	f003 0304 	and.w	r3, r3, #4
 80029e0:	61bb      	str	r3, [r7, #24]
 80029e2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80029e4:	4b50      	ldr	r3, [pc, #320]	; (8002b28 <_ZL12MX_GPIO_Initv+0x178>)
 80029e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029ea:	4a4f      	ldr	r2, [pc, #316]	; (8002b28 <_ZL12MX_GPIO_Initv+0x178>)
 80029ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80029f4:	4b4c      	ldr	r3, [pc, #304]	; (8002b28 <_ZL12MX_GPIO_Initv+0x178>)
 80029f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029fe:	617b      	str	r3, [r7, #20]
 8002a00:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a02:	4b49      	ldr	r3, [pc, #292]	; (8002b28 <_ZL12MX_GPIO_Initv+0x178>)
 8002a04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a08:	4a47      	ldr	r2, [pc, #284]	; (8002b28 <_ZL12MX_GPIO_Initv+0x178>)
 8002a0a:	f043 0301 	orr.w	r3, r3, #1
 8002a0e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a12:	4b45      	ldr	r3, [pc, #276]	; (8002b28 <_ZL12MX_GPIO_Initv+0x178>)
 8002a14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a18:	f003 0301 	and.w	r3, r3, #1
 8002a1c:	613b      	str	r3, [r7, #16]
 8002a1e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a20:	4b41      	ldr	r3, [pc, #260]	; (8002b28 <_ZL12MX_GPIO_Initv+0x178>)
 8002a22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a26:	4a40      	ldr	r2, [pc, #256]	; (8002b28 <_ZL12MX_GPIO_Initv+0x178>)
 8002a28:	f043 0302 	orr.w	r3, r3, #2
 8002a2c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a30:	4b3d      	ldr	r3, [pc, #244]	; (8002b28 <_ZL12MX_GPIO_Initv+0x178>)
 8002a32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a36:	f003 0302 	and.w	r3, r3, #2
 8002a3a:	60fb      	str	r3, [r7, #12]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002a3e:	4b3a      	ldr	r3, [pc, #232]	; (8002b28 <_ZL12MX_GPIO_Initv+0x178>)
 8002a40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a44:	4a38      	ldr	r2, [pc, #224]	; (8002b28 <_ZL12MX_GPIO_Initv+0x178>)
 8002a46:	f043 0310 	orr.w	r3, r3, #16
 8002a4a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a4e:	4b36      	ldr	r3, [pc, #216]	; (8002b28 <_ZL12MX_GPIO_Initv+0x178>)
 8002a50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a54:	f003 0310 	and.w	r3, r3, #16
 8002a58:	60bb      	str	r3, [r7, #8]
 8002a5a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a5c:	4b32      	ldr	r3, [pc, #200]	; (8002b28 <_ZL12MX_GPIO_Initv+0x178>)
 8002a5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a62:	4a31      	ldr	r2, [pc, #196]	; (8002b28 <_ZL12MX_GPIO_Initv+0x178>)
 8002a64:	f043 0308 	orr.w	r3, r3, #8
 8002a68:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a6c:	4b2e      	ldr	r3, [pc, #184]	; (8002b28 <_ZL12MX_GPIO_Initv+0x178>)
 8002a6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a72:	f003 0308 	and.w	r3, r3, #8
 8002a76:	607b      	str	r3, [r7, #4]
 8002a78:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	f244 0101 	movw	r1, #16385	; 0x4001
 8002a80:	482a      	ldr	r0, [pc, #168]	; (8002b2c <_ZL12MX_GPIO_Initv+0x17c>)
 8002a82:	f005 f887 	bl	8007b94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, R1_Pin|R2_Pin|R3_Pin|R4_Pin
 8002a86:	2200      	movs	r2, #0
 8002a88:	f240 7182 	movw	r1, #1922	; 0x782
 8002a8c:	4828      	ldr	r0, [pc, #160]	; (8002b30 <_ZL12MX_GPIO_Initv+0x180>)
 8002a8e:	f005 f881 	bl	8007b94 <HAL_GPIO_WritePin>
                          |LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8002a92:	f244 0301 	movw	r3, #16385	; 0x4001
 8002a96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002aa0:	2302      	movs	r3, #2
 8002aa2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002aa4:	f107 031c 	add.w	r3, r7, #28
 8002aa8:	4619      	mov	r1, r3
 8002aaa:	4820      	ldr	r0, [pc, #128]	; (8002b2c <_ZL12MX_GPIO_Initv+0x17c>)
 8002aac:	f004 feaa 	bl	8007804 <HAL_GPIO_Init>

  /*Configure GPIO pins : R1_Pin R2_Pin R3_Pin R4_Pin */
  GPIO_InitStruct.Pin = R1_Pin|R2_Pin|R3_Pin|R4_Pin;
 8002ab0:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8002ab4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002aba:	2301      	movs	r3, #1
 8002abc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002ac2:	f107 031c 	add.w	r3, r7, #28
 8002ac6:	4619      	mov	r1, r3
 8002ac8:	4819      	ldr	r0, [pc, #100]	; (8002b30 <_ZL12MX_GPIO_Initv+0x180>)
 8002aca:	f004 fe9b 	bl	8007804 <HAL_GPIO_Init>

  /*Configure GPIO pins : C1_Pin C2_Pin C3_Pin C4_Pin */
  GPIO_InitStruct.Pin = C1_Pin|C2_Pin|C3_Pin|C4_Pin;
 8002ace:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 8002ad2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002adc:	f107 031c 	add.w	r3, r7, #28
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	4813      	ldr	r0, [pc, #76]	; (8002b30 <_ZL12MX_GPIO_Initv+0x180>)
 8002ae4:	f004 fe8e 	bl	8007804 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002ae8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002aec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002aee:	2300      	movs	r3, #0
 8002af0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af2:	2300      	movs	r3, #0
 8002af4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002af6:	f107 031c 	add.w	r3, r7, #28
 8002afa:	4619      	mov	r1, r3
 8002afc:	480d      	ldr	r0, [pc, #52]	; (8002b34 <_ZL12MX_GPIO_Initv+0x184>)
 8002afe:	f004 fe81 	bl	8007804 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002b02:	2302      	movs	r3, #2
 8002b04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b06:	2301      	movs	r3, #1
 8002b08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b0e:	2302      	movs	r3, #2
 8002b10:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002b12:	f107 031c 	add.w	r3, r7, #28
 8002b16:	4619      	mov	r1, r3
 8002b18:	4805      	ldr	r0, [pc, #20]	; (8002b30 <_ZL12MX_GPIO_Initv+0x180>)
 8002b1a:	f004 fe73 	bl	8007804 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002b1e:	bf00      	nop
 8002b20:	3730      	adds	r7, #48	; 0x30
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	58024400 	.word	0x58024400
 8002b2c:	58020400 	.word	0x58020400
 8002b30:	58021000 	.word	0x58021000
 8002b34:	58020800 	.word	0x58020800

08002b38 <_Z16StartDefaultTaskPv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b082      	sub	sp, #8
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002b40:	2001      	movs	r0, #1
 8002b42:	f00d f901 	bl	800fd48 <osDelay>
 8002b46:	e7fb      	b.n	8002b40 <_Z16StartDefaultTaskPv+0x8>

08002b48 <_Z13StartJoystickPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartJoystick */
void StartJoystick(void *argument)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	ed2d 8b02 	vpush	{d8}
 8002b4e:	b09e      	sub	sp, #120	; 0x78
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartJoystick */
  Joystick j1(&hadc1, &hadc2);
 8002b54:	f107 0314 	add.w	r3, r7, #20
 8002b58:	4a1f      	ldr	r2, [pc, #124]	; (8002bd8 <_Z13StartJoystickPv+0x90>)
 8002b5a:	4920      	ldr	r1, [pc, #128]	; (8002bdc <_Z13StartJoystickPv+0x94>)
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f7fe f8f7 	bl	8000d50 <_ZN8JoystickC1EP17ADC_HandleTypeDefS1_>
  /*bool pressed = false;
  osSemaphoreAcquire(DestinationHandle, osWaitForever);*/
  /* Infinite loop */
  for(;;)
  {
    j1.read();
 8002b62:	f107 0314 	add.w	r3, r7, #20
 8002b66:	4618      	mov	r0, r3
 8002b68:	f7fe f90c 	bl	8000d84 <_ZN8Joystick4readEv>
    j1.set_pos();
 8002b6c:	f107 0314 	add.w	r3, r7, #20
 8002b70:	4618      	mov	r0, r3
 8002b72:	f7fe f98b 	bl	8000e8c <_ZN8Joystick7set_posEv>
    osDelay(10U);
 8002b76:	200a      	movs	r0, #10
 8002b78:	f00d f8e6 	bl	800fd48 <osDelay>

    x_adc = j1.get_xADC();
 8002b7c:	f107 0314 	add.w	r3, r7, #20
 8002b80:	4618      	mov	r0, r3
 8002b82:	f7fe fa33 	bl	8000fec <_ZN8Joystick8get_xADCEv>
 8002b86:	4603      	mov	r3, r0
 8002b88:	461a      	mov	r2, r3
 8002b8a:	4b15      	ldr	r3, [pc, #84]	; (8002be0 <_Z13StartJoystickPv+0x98>)
 8002b8c:	801a      	strh	r2, [r3, #0]
    y_adc = j1.get_yADC();
 8002b8e:	f107 0314 	add.w	r3, r7, #20
 8002b92:	4618      	mov	r0, r3
 8002b94:	f7fe fa36 	bl	8001004 <_ZN8Joystick8get_yADCEv>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	4b11      	ldr	r3, [pc, #68]	; (8002be4 <_Z13StartJoystickPv+0x9c>)
 8002b9e:	801a      	strh	r2, [r3, #0]

    data_joystick = {j1.get_xPos(), j1.get_yPos()};
 8002ba0:	f107 0314 	add.w	r3, r7, #20
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f7fe fa03 	bl	8000fb0 <_ZN8Joystick8get_xPosEv>
 8002baa:	eeb0 8a40 	vmov.f32	s16, s0
 8002bae:	f107 0314 	add.w	r3, r7, #20
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f7fe fa0b 	bl	8000fce <_ZN8Joystick8get_yPosEv>
 8002bb8:	eef0 7a40 	vmov.f32	s15, s0
 8002bbc:	ed87 8a03 	vstr	s16, [r7, #12]
 8002bc0:	edc7 7a04 	vstr	s15, [r7, #16]
    osMessageQueuePut(JoystickQueueHandle,&data_joystick,0,200);
 8002bc4:	4b08      	ldr	r3, [pc, #32]	; (8002be8 <_Z13StartJoystickPv+0xa0>)
 8002bc6:	6818      	ldr	r0, [r3, #0]
 8002bc8:	f107 010c 	add.w	r1, r7, #12
 8002bcc:	23c8      	movs	r3, #200	; 0xc8
 8002bce:	2200      	movs	r2, #0
 8002bd0:	f00d fa68 	bl	80100a4 <osMessageQueuePut>
    j1.read();
 8002bd4:	e7c5      	b.n	8002b62 <_Z13StartJoystickPv+0x1a>
 8002bd6:	bf00      	nop
 8002bd8:	2400025c 	.word	0x2400025c
 8002bdc:	240001f8 	.word	0x240001f8
 8002be0:	24000bbe 	.word	0x24000bbe
 8002be4:	24000bc0 	.word	0x24000bc0
 8002be8:	24000b80 	.word	0x24000b80

08002bec <_Z12StartChassisPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartChassis */
void StartChassis(void *argument)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b0bc      	sub	sp, #240	; 0xf0
 8002bf0:	af04      	add	r7, sp, #16
 8002bf2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartChassis */
  Data reference;

  HAL_TIM_Encoder_Start_IT(&htim8, TIM_CHANNEL_ALL);
 8002bf4:	213c      	movs	r1, #60	; 0x3c
 8002bf6:	4855      	ldr	r0, [pc, #340]	; (8002d4c <_Z12StartChassisPv+0x160>)
 8002bf8:	f009 fdfe 	bl	800c7f8 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 8002bfc:	213c      	movs	r1, #60	; 0x3c
 8002bfe:	4854      	ldr	r0, [pc, #336]	; (8002d50 <_Z12StartChassisPv+0x164>)
 8002c00:	f009 fdfa 	bl	800c7f8 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 8002c04:	2100      	movs	r1, #0
 8002c06:	4853      	ldr	r0, [pc, #332]	; (8002d54 <_Z12StartChassisPv+0x168>)
 8002c08:	f009 fc42 	bl	800c490 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 8002c0c:	2100      	movs	r1, #0
 8002c0e:	4852      	ldr	r0, [pc, #328]	; (8002d58 <_Z12StartChassisPv+0x16c>)
 8002c10:	f009 fc3e 	bl	800c490 <HAL_TIM_PWM_Start>

  LL_Control::Encoder encL(&htim4, 50);
 8002c14:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002c18:	2232      	movs	r2, #50	; 0x32
 8002c1a:	494d      	ldr	r1, [pc, #308]	; (8002d50 <_Z12StartChassisPv+0x164>)
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f7fd ffcf 	bl	8000bc0 <_ZN10LL_Control7EncoderC1EP17TIM_HandleTypeDefi>
  LL_Control::Motor_PI  motorL(&encL, &htim2, 1050, 1950);
 8002c22:	f107 01bc 	add.w	r1, r7, #188	; 0xbc
 8002c26:	f107 0070 	add.w	r0, r7, #112	; 0x70
 8002c2a:	f240 739e 	movw	r3, #1950	; 0x79e
 8002c2e:	9300      	str	r3, [sp, #0]
 8002c30:	f240 431a 	movw	r3, #1050	; 0x41a
 8002c34:	4a48      	ldr	r2, [pc, #288]	; (8002d58 <_Z12StartChassisPv+0x16c>)
 8002c36:	f7fe fe33 	bl	80018a0 <_ZN10LL_Control8Motor_PIC1EPNS_7EncoderEP17TIM_HandleTypeDefii>
  motorL.set_Ks(10.0f,5);
 8002c3a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002c3e:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 8002c42:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8002c46:	4618      	mov	r0, r3
 8002c48:	f7fe fee4 	bl	8001a14 <_ZN10LL_Control8Motor_PI6set_KsEff>
  motorL.stop();
 8002c4c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002c50:	4618      	mov	r0, r3
 8002c52:	f7ff f825 	bl	8001ca0 <_ZN10LL_Control8Motor_PI4stopEv>

  LL_Control::Encoder encR(&htim8, 50);
 8002c56:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002c5a:	2232      	movs	r2, #50	; 0x32
 8002c5c:	493b      	ldr	r1, [pc, #236]	; (8002d4c <_Z12StartChassisPv+0x160>)
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f7fd ffae 	bl	8000bc0 <_ZN10LL_Control7EncoderC1EP17TIM_HandleTypeDefi>
  LL_Control::Motor_PI  motorR(&encR, &htim3, 1050, 1950);
 8002c64:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8002c68:	f107 0008 	add.w	r0, r7, #8
 8002c6c:	f240 739e 	movw	r3, #1950	; 0x79e
 8002c70:	9300      	str	r3, [sp, #0]
 8002c72:	f240 431a 	movw	r3, #1050	; 0x41a
 8002c76:	4a37      	ldr	r2, [pc, #220]	; (8002d54 <_Z12StartChassisPv+0x168>)
 8002c78:	f7fe fe12 	bl	80018a0 <_ZN10LL_Control8Motor_PIC1EPNS_7EncoderEP17TIM_HandleTypeDefii>
  motorR.set_Ks(10.0f,5);
 8002c7c:	f107 0308 	add.w	r3, r7, #8
 8002c80:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 8002c84:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f7fe fec3 	bl	8001a14 <_ZN10LL_Control8Motor_PI6set_KsEff>
  motorR.stop();
 8002c8e:	f107 0308 	add.w	r3, r7, #8
 8002c92:	4618      	mov	r0, r3
 8002c94:	f7ff f804 	bl	8001ca0 <_ZN10LL_Control8Motor_PI4stopEv>

  /* Infinite loop */
  for(;;)
  {
  osMessageQueueGet(JoystickQueueHandle, &reference, NULL, osWaitForever);
 8002c98:	4b30      	ldr	r3, [pc, #192]	; (8002d5c <_Z12StartChassisPv+0x170>)
 8002c9a:	6818      	ldr	r0, [r3, #0]
 8002c9c:	f107 01d8 	add.w	r1, r7, #216	; 0xd8
 8002ca0:	f04f 33ff 	mov.w	r3, #4294967295
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	f00d fa5d 	bl	8010164 <osMessageQueueGet>

  //motorL.set_reference(1);
  motorL.set_reference((reference.x_data*2)+(reference.y_data*2));
 8002caa:	edd7 7a36 	vldr	s15, [r7, #216]	; 0xd8
 8002cae:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002cb2:	edd7 7a37 	vldr	s15, [r7, #220]	; 0xdc
 8002cb6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002cba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cbe:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002cc2:	eeb0 0a67 	vmov.f32	s0, s15
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f7fe fe70 	bl	80019ac <_ZN10LL_Control8Motor_PI13set_referenceEf>
    encL.update();
 8002ccc:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f7fd fff7 	bl	8000cc4 <_ZN10LL_Control7Encoder6updateEv>
    motorL.go_to_ref();
 8002cd6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f7fe ff63 	bl	8001ba6 <_ZN10LL_Control8Motor_PI9go_to_refEv>

    //motorR.set_reference(-1);
    motorR.set_reference(-(reference.x_data*2)+(reference.y_data*2));
 8002ce0:	edd7 7a37 	vldr	s15, [r7, #220]	; 0xdc
 8002ce4:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002ce8:	edd7 7a36 	vldr	s15, [r7, #216]	; 0xd8
 8002cec:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002cf0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cf4:	f107 0308 	add.w	r3, r7, #8
 8002cf8:	eeb0 0a67 	vmov.f32	s0, s15
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f7fe fe55 	bl	80019ac <_ZN10LL_Control8Motor_PI13set_referenceEf>
    encR.update();
 8002d02:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002d06:	4618      	mov	r0, r3
 8002d08:	f7fd ffdc 	bl	8000cc4 <_ZN10LL_Control7Encoder6updateEv>
    motorR.go_to_ref();
 8002d0c:	f107 0308 	add.w	r3, r7, #8
 8002d10:	4618      	mov	r0, r3
 8002d12:	f7fe ff48 	bl	8001ba6 <_ZN10LL_Control8Motor_PI9go_to_refEv>

    //pwm_vel1=motorL.get_vel();
    //pwm_vel2=motorR.get_vel();

    snprintf(msg, 50, "CH_1: %.2f, CH_2: %.2f \r\n", reference.x_data, reference.y_data);
 8002d16:	edd7 7a36 	vldr	s15, [r7, #216]	; 0xd8
 8002d1a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002d1e:	edd7 6a37 	vldr	s13, [r7, #220]	; 0xdc
 8002d22:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8002d26:	ed8d 6b02 	vstr	d6, [sp, #8]
 8002d2a:	ed8d 7b00 	vstr	d7, [sp]
 8002d2e:	4a0c      	ldr	r2, [pc, #48]	; (8002d60 <_Z12StartChassisPv+0x174>)
 8002d30:	2132      	movs	r1, #50	; 0x32
 8002d32:	480c      	ldr	r0, [pc, #48]	; (8002d64 <_Z12StartChassisPv+0x178>)
 8002d34:	f011 fadc 	bl	80142f0 <sniprintf>
    HAL_UART_Transmit(&huart3,(uint8_t*) msg,sizeof(msg),10);
 8002d38:	230a      	movs	r3, #10
 8002d3a:	2232      	movs	r2, #50	; 0x32
 8002d3c:	4909      	ldr	r1, [pc, #36]	; (8002d64 <_Z12StartChassisPv+0x178>)
 8002d3e:	480a      	ldr	r0, [pc, #40]	; (8002d68 <_Z12StartChassisPv+0x17c>)
 8002d40:	f00a fe8c 	bl	800da5c <HAL_UART_Transmit>
    osDelay(20U);
 8002d44:	2014      	movs	r0, #20
 8002d46:	f00c ffff 	bl	800fd48 <osDelay>
  osMessageQueueGet(JoystickQueueHandle, &reference, NULL, osWaitForever);
 8002d4a:	e7a5      	b.n	8002c98 <_Z12StartChassisPv+0xac>
 8002d4c:	24000490 	.word	0x24000490
 8002d50:	240003f8 	.word	0x240003f8
 8002d54:	240003ac 	.word	0x240003ac
 8002d58:	24000360 	.word	0x24000360
 8002d5c:	24000b80 	.word	0x24000b80
 8002d60:	08017ad0 	.word	0x08017ad0
 8002d64:	24000b8c 	.word	0x24000b8c
 8002d68:	240004dc 	.word	0x240004dc

08002d6c <_Z20StartUserInteractionPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUserInteraction */
void StartUserInteraction(void *argument)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b090      	sub	sp, #64	; 0x40
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartUserValidation */
    char key;
    char key1;
    int count = 0;
 8002d74:	2300      	movs	r3, #0
 8002d76:	63fb      	str	r3, [r7, #60]	; 0x3c
    char password[4];

    Keypad k1(&hi2c1);
 8002d78:	f107 0308 	add.w	r3, r7, #8
 8002d7c:	4953      	ldr	r1, [pc, #332]	; (8002ecc <_Z20StartUserInteractionPv+0x160>)
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f7fe f94c 	bl	800101c <_ZN6KeypadC1EP19__I2C_HandleTypeDef>
    k1.lcd_init();
 8002d84:	f107 0308 	add.w	r3, r7, #8
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f7fe fa19 	bl	80011c0 <_ZN6Keypad8lcd_initEv>

    osSemaphoreAcquire(PassHandle, osWaitForever);
 8002d8e:	4b50      	ldr	r3, [pc, #320]	; (8002ed0 <_Z20StartUserInteractionPv+0x164>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f04f 31ff 	mov.w	r1, #4294967295
 8002d96:	4618      	mov	r0, r3
 8002d98:	f00d f87a 	bl	800fe90 <osSemaphoreAcquire>
    /* Infinite loop */
    for(;;)
    {
      //osSemaphoreAcquire(DestinationHandle, osWaitForever);

      key  = k1.keypad_read();
 8002d9c:	f107 0308 	add.w	r3, r7, #8
 8002da0:	4618      	mov	r0, r3
 8002da2:	f7fe fa57 	bl	8001254 <_ZN6Keypad11keypad_readEv>
 8002da6:	4603      	mov	r3, r0
 8002da8:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
      osDelay(250);
 8002dac:	20fa      	movs	r0, #250	; 0xfa
 8002dae:	f00c ffcb 	bl	800fd48 <osDelay>
      key1 = k1.keypad_read();
 8002db2:	f107 0308 	add.w	r3, r7, #8
 8002db6:	4618      	mov	r0, r3
 8002db8:	f7fe fa4c 	bl	8001254 <_ZN6Keypad11keypad_readEv>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

      if((key != key1) && (k1.is_valid(key1) == true)){
 8002dc2:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8002dc6:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	d00c      	beq.n	8002de8 <_Z20StartUserInteractionPv+0x7c>
 8002dce:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 8002dd2:	f107 0308 	add.w	r3, r7, #8
 8002dd6:	4611      	mov	r1, r2
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f7fe fcf9 	bl	80017d0 <_ZN6Keypad8is_validEc>
 8002dde:	4603      	mov	r3, r0
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d101      	bne.n	8002de8 <_Z20StartUserInteractionPv+0x7c>
 8002de4:	2301      	movs	r3, #1
 8002de6:	e000      	b.n	8002dea <_Z20StartUserInteractionPv+0x7e>
 8002de8:	2300      	movs	r3, #0
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d018      	beq.n	8002e20 <_Z20StartUserInteractionPv+0xb4>
        k1.lcd_put_cur(1, count);
 8002dee:	f107 0308 	add.w	r3, r7, #8
 8002df2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002df4:	2101      	movs	r1, #1
 8002df6:	4618      	mov	r0, r3
 8002df8:	f7fe f9a7 	bl	800114a <_ZN6Keypad11lcd_put_curEii>
        k1.lcd_send_data(key1);
 8002dfc:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 8002e00:	f107 0308 	add.w	r3, r7, #8
 8002e04:	4611      	mov	r1, r2
 8002e06:	4618      	mov	r0, r3
 8002e08:	f7fe f959 	bl	80010be <_ZN6Keypad13lcd_send_dataEc>
        password[count] = key1;
 8002e0c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002e10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e12:	4413      	add	r3, r2
 8002e14:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 8002e18:	701a      	strb	r2, [r3, #0]
        count++;
 8002e1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e1c:	3301      	adds	r3, #1
 8002e1e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if((key == '*' || key1 == '*') && (count == 4) ){
 8002e20:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8002e24:	2b2a      	cmp	r3, #42	; 0x2a
 8002e26:	d003      	beq.n	8002e30 <_Z20StartUserInteractionPv+0xc4>
 8002e28:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8002e2c:	2b2a      	cmp	r3, #42	; 0x2a
 8002e2e:	d13e      	bne.n	8002eae <_Z20StartUserInteractionPv+0x142>
 8002e30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e32:	2b04      	cmp	r3, #4
 8002e34:	d13b      	bne.n	8002eae <_Z20StartUserInteractionPv+0x142>
        if(k1.check_password(password)){
 8002e36:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002e3a:	f107 0308 	add.w	r3, r7, #8
 8002e3e:	4611      	mov	r1, r2
 8002e40:	4618      	mov	r0, r3
 8002e42:	f7fe fd03 	bl	800184c <_ZN6Keypad14check_passwordEPc>
 8002e46:	4603      	mov	r3, r0
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d018      	beq.n	8002e7e <_Z20StartUserInteractionPv+0x112>
          k1.lcd_put_cur(1, 0);
 8002e4c:	f107 0308 	add.w	r3, r7, #8
 8002e50:	2200      	movs	r2, #0
 8002e52:	2101      	movs	r1, #1
 8002e54:	4618      	mov	r0, r3
 8002e56:	f7fe f978 	bl	800114a <_ZN6Keypad11lcd_put_curEii>
          k1.lcd_send_string ("Correct  ");
 8002e5a:	f107 0308 	add.w	r3, r7, #8
 8002e5e:	491d      	ldr	r1, [pc, #116]	; (8002ed4 <_Z20StartUserInteractionPv+0x168>)
 8002e60:	4618      	mov	r0, r3
 8002e62:	f7fe f95b 	bl	800111c <_ZN6Keypad15lcd_send_stringEPc>
          count = 0;
 8002e66:	2300      	movs	r3, #0
 8002e68:	63fb      	str	r3, [r7, #60]	; 0x3c
          osSemaphoreRelease(PassHandle);
 8002e6a:	4b19      	ldr	r3, [pc, #100]	; (8002ed0 <_Z20StartUserInteractionPv+0x164>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f00d f860 	bl	800ff34 <osSemaphoreRelease>
          osDelay(3000);
 8002e74:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002e78:	f00c ff66 	bl	800fd48 <osDelay>
 8002e7c:	e012      	b.n	8002ea4 <_Z20StartUserInteractionPv+0x138>
        } else {
          k1.lcd_put_cur(1, 0);
 8002e7e:	f107 0308 	add.w	r3, r7, #8
 8002e82:	2200      	movs	r2, #0
 8002e84:	2101      	movs	r1, #1
 8002e86:	4618      	mov	r0, r3
 8002e88:	f7fe f95f 	bl	800114a <_ZN6Keypad11lcd_put_curEii>
          k1.lcd_send_string ("Incorrect ");
 8002e8c:	f107 0308 	add.w	r3, r7, #8
 8002e90:	4911      	ldr	r1, [pc, #68]	; (8002ed8 <_Z20StartUserInteractionPv+0x16c>)
 8002e92:	4618      	mov	r0, r3
 8002e94:	f7fe f942 	bl	800111c <_ZN6Keypad15lcd_send_stringEPc>
          count = 0;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	63fb      	str	r3, [r7, #60]	; 0x3c
          osDelay(3000);
 8002e9c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002ea0:	f00c ff52 	bl	800fd48 <osDelay>
        };
        k1.lcd_clear();
 8002ea4:	f107 0308 	add.w	r3, r7, #8
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f7fe f96f 	bl	800118c <_ZN6Keypad9lcd_clearEv>
      }

      k1.lcd_put_cur(0, 0);
 8002eae:	f107 0308 	add.w	r3, r7, #8
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	2100      	movs	r1, #0
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f7fe f947 	bl	800114a <_ZN6Keypad11lcd_put_curEii>
      k1.lcd_send_string ("Insert pass:    ");
 8002ebc:	f107 0308 	add.w	r3, r7, #8
 8002ec0:	4906      	ldr	r1, [pc, #24]	; (8002edc <_Z20StartUserInteractionPv+0x170>)
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f7fe f92a 	bl	800111c <_ZN6Keypad15lcd_send_stringEPc>
      key  = k1.keypad_read();
 8002ec8:	e768      	b.n	8002d9c <_Z20StartUserInteractionPv+0x30>
 8002eca:	bf00      	nop
 8002ecc:	240002c0 	.word	0x240002c0
 8002ed0:	24000b88 	.word	0x24000b88
 8002ed4:	08017aec 	.word	0x08017aec
 8002ed8:	08017af8 	.word	0x08017af8
 8002edc:	08017b04 	.word	0x08017b04

08002ee0 <_Z9StartDoorPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDoor */
void StartDoor(void *argument)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b082      	sub	sp, #8
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDoor */
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_4);
 8002ee8:	210c      	movs	r1, #12
 8002eea:	480f      	ldr	r0, [pc, #60]	; (8002f28 <_Z9StartDoorPv+0x48>)
 8002eec:	f009 fad0 	bl	800c490 <HAL_TIM_PWM_Start>
  /* Infinite loop */
  for(;;)
  {
    osSemaphoreAcquire(PassHandle, osWaitForever);
 8002ef0:	4b0e      	ldr	r3, [pc, #56]	; (8002f2c <_Z9StartDoorPv+0x4c>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f04f 31ff 	mov.w	r1, #4294967295
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f00c ffc9 	bl	800fe90 <osSemaphoreAcquire>

    osDelay(1);
 8002efe:	2001      	movs	r0, #1
 8002f00:	f00c ff22 	bl	800fd48 <osDelay>
    TIM5->CCR4 = 1500;
 8002f04:	4b0a      	ldr	r3, [pc, #40]	; (8002f30 <_Z9StartDoorPv+0x50>)
 8002f06:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8002f0a:	641a      	str	r2, [r3, #64]	; 0x40
    HAL_Delay(5000);
 8002f0c:	f241 3088 	movw	r0, #5000	; 0x1388
 8002f10:	f000 fe08 	bl	8003b24 <HAL_Delay>
    TIM5->CCR4 = 750;
 8002f14:	4b06      	ldr	r3, [pc, #24]	; (8002f30 <_Z9StartDoorPv+0x50>)
 8002f16:	f240 22ee 	movw	r2, #750	; 0x2ee
 8002f1a:	641a      	str	r2, [r3, #64]	; 0x40
    HAL_Delay(5000);
 8002f1c:	f241 3088 	movw	r0, #5000	; 0x1388
 8002f20:	f000 fe00 	bl	8003b24 <HAL_Delay>
    osSemaphoreAcquire(PassHandle, osWaitForever);
 8002f24:	e7e4      	b.n	8002ef0 <_Z9StartDoorPv+0x10>
 8002f26:	bf00      	nop
 8002f28:	24000444 	.word	0x24000444
 8002f2c:	24000b88 	.word	0x24000b88
 8002f30:	40000c00 	.word	0x40000c00

08002f34 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b082      	sub	sp, #8
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a04      	ldr	r2, [pc, #16]	; (8002f54 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d101      	bne.n	8002f4a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002f46:	f000 fdcd 	bl	8003ae4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002f4a:	bf00      	nop
 8002f4c:	3708      	adds	r7, #8
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	bf00      	nop
 8002f54:	40014800 	.word	0x40014800

08002f58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002f5c:	b672      	cpsid	i
}
 8002f5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002f60:	e7fe      	b.n	8002f60 <Error_Handler+0x8>
	...

08002f64 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b082      	sub	sp, #8
 8002f68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f6a:	4b0c      	ldr	r3, [pc, #48]	; (8002f9c <HAL_MspInit+0x38>)
 8002f6c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002f70:	4a0a      	ldr	r2, [pc, #40]	; (8002f9c <HAL_MspInit+0x38>)
 8002f72:	f043 0302 	orr.w	r3, r3, #2
 8002f76:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002f7a:	4b08      	ldr	r3, [pc, #32]	; (8002f9c <HAL_MspInit+0x38>)
 8002f7c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002f80:	f003 0302 	and.w	r3, r3, #2
 8002f84:	607b      	str	r3, [r7, #4]
 8002f86:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002f88:	2200      	movs	r2, #0
 8002f8a:	210f      	movs	r1, #15
 8002f8c:	f06f 0001 	mvn.w	r0, #1
 8002f90:	f002 f9ea 	bl	8005368 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f94:	bf00      	nop
 8002f96:	3708      	adds	r7, #8
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}
 8002f9c:	58024400 	.word	0x58024400

08002fa0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b08c      	sub	sp, #48	; 0x30
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fa8:	f107 031c 	add.w	r3, r7, #28
 8002fac:	2200      	movs	r2, #0
 8002fae:	601a      	str	r2, [r3, #0]
 8002fb0:	605a      	str	r2, [r3, #4]
 8002fb2:	609a      	str	r2, [r3, #8]
 8002fb4:	60da      	str	r2, [r3, #12]
 8002fb6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a39      	ldr	r2, [pc, #228]	; (80030a4 <HAL_ADC_MspInit+0x104>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d133      	bne.n	800302a <HAL_ADC_MspInit+0x8a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002fc2:	4b39      	ldr	r3, [pc, #228]	; (80030a8 <HAL_ADC_MspInit+0x108>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	3301      	adds	r3, #1
 8002fc8:	4a37      	ldr	r2, [pc, #220]	; (80030a8 <HAL_ADC_MspInit+0x108>)
 8002fca:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002fcc:	4b36      	ldr	r3, [pc, #216]	; (80030a8 <HAL_ADC_MspInit+0x108>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d10e      	bne.n	8002ff2 <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002fd4:	4b35      	ldr	r3, [pc, #212]	; (80030ac <HAL_ADC_MspInit+0x10c>)
 8002fd6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002fda:	4a34      	ldr	r2, [pc, #208]	; (80030ac <HAL_ADC_MspInit+0x10c>)
 8002fdc:	f043 0320 	orr.w	r3, r3, #32
 8002fe0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002fe4:	4b31      	ldr	r3, [pc, #196]	; (80030ac <HAL_ADC_MspInit+0x10c>)
 8002fe6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002fea:	f003 0320 	and.w	r3, r3, #32
 8002fee:	61bb      	str	r3, [r7, #24]
 8002ff0:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ff2:	4b2e      	ldr	r3, [pc, #184]	; (80030ac <HAL_ADC_MspInit+0x10c>)
 8002ff4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ff8:	4a2c      	ldr	r2, [pc, #176]	; (80030ac <HAL_ADC_MspInit+0x10c>)
 8002ffa:	f043 0301 	orr.w	r3, r3, #1
 8002ffe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003002:	4b2a      	ldr	r3, [pc, #168]	; (80030ac <HAL_ADC_MspInit+0x10c>)
 8003004:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003008:	f003 0301 	and.w	r3, r3, #1
 800300c:	617b      	str	r3, [r7, #20]
 800300e:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_INP18
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003010:	2310      	movs	r3, #16
 8003012:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003014:	2303      	movs	r3, #3
 8003016:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003018:	2300      	movs	r3, #0
 800301a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800301c:	f107 031c 	add.w	r3, r7, #28
 8003020:	4619      	mov	r1, r3
 8003022:	4823      	ldr	r0, [pc, #140]	; (80030b0 <HAL_ADC_MspInit+0x110>)
 8003024:	f004 fbee 	bl	8007804 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8003028:	e037      	b.n	800309a <HAL_ADC_MspInit+0xfa>
  else if(hadc->Instance==ADC2)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a21      	ldr	r2, [pc, #132]	; (80030b4 <HAL_ADC_MspInit+0x114>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d132      	bne.n	800309a <HAL_ADC_MspInit+0xfa>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8003034:	4b1c      	ldr	r3, [pc, #112]	; (80030a8 <HAL_ADC_MspInit+0x108>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	3301      	adds	r3, #1
 800303a:	4a1b      	ldr	r2, [pc, #108]	; (80030a8 <HAL_ADC_MspInit+0x108>)
 800303c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800303e:	4b1a      	ldr	r3, [pc, #104]	; (80030a8 <HAL_ADC_MspInit+0x108>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	2b01      	cmp	r3, #1
 8003044:	d10e      	bne.n	8003064 <HAL_ADC_MspInit+0xc4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8003046:	4b19      	ldr	r3, [pc, #100]	; (80030ac <HAL_ADC_MspInit+0x10c>)
 8003048:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800304c:	4a17      	ldr	r2, [pc, #92]	; (80030ac <HAL_ADC_MspInit+0x10c>)
 800304e:	f043 0320 	orr.w	r3, r3, #32
 8003052:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8003056:	4b15      	ldr	r3, [pc, #84]	; (80030ac <HAL_ADC_MspInit+0x10c>)
 8003058:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800305c:	f003 0320 	and.w	r3, r3, #32
 8003060:	613b      	str	r3, [r7, #16]
 8003062:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003064:	4b11      	ldr	r3, [pc, #68]	; (80030ac <HAL_ADC_MspInit+0x10c>)
 8003066:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800306a:	4a10      	ldr	r2, [pc, #64]	; (80030ac <HAL_ADC_MspInit+0x10c>)
 800306c:	f043 0301 	orr.w	r3, r3, #1
 8003070:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003074:	4b0d      	ldr	r3, [pc, #52]	; (80030ac <HAL_ADC_MspInit+0x10c>)
 8003076:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800307a:	f003 0301 	and.w	r3, r3, #1
 800307e:	60fb      	str	r3, [r7, #12]
 8003080:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003082:	2320      	movs	r3, #32
 8003084:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003086:	2303      	movs	r3, #3
 8003088:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800308a:	2300      	movs	r3, #0
 800308c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800308e:	f107 031c 	add.w	r3, r7, #28
 8003092:	4619      	mov	r1, r3
 8003094:	4806      	ldr	r0, [pc, #24]	; (80030b0 <HAL_ADC_MspInit+0x110>)
 8003096:	f004 fbb5 	bl	8007804 <HAL_GPIO_Init>
}
 800309a:	bf00      	nop
 800309c:	3730      	adds	r7, #48	; 0x30
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}
 80030a2:	bf00      	nop
 80030a4:	40022000 	.word	0x40022000
 80030a8:	24000bc4 	.word	0x24000bc4
 80030ac:	58024400 	.word	0x58024400
 80030b0:	58020000 	.word	0x58020000
 80030b4:	40022100 	.word	0x40022100

080030b8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b0ba      	sub	sp, #232	; 0xe8
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030c0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80030c4:	2200      	movs	r2, #0
 80030c6:	601a      	str	r2, [r3, #0]
 80030c8:	605a      	str	r2, [r3, #4]
 80030ca:	609a      	str	r2, [r3, #8]
 80030cc:	60da      	str	r2, [r3, #12]
 80030ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80030d0:	f107 0310 	add.w	r3, r7, #16
 80030d4:	22c0      	movs	r2, #192	; 0xc0
 80030d6:	2100      	movs	r1, #0
 80030d8:	4618      	mov	r0, r3
 80030da:	f011 f9a0 	bl	801441e <memset>
  if(hi2c->Instance==I2C1)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a27      	ldr	r2, [pc, #156]	; (8003180 <HAL_I2C_MspInit+0xc8>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d146      	bne.n	8003176 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80030e8:	f04f 0208 	mov.w	r2, #8
 80030ec:	f04f 0300 	mov.w	r3, #0
 80030f0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80030f4:	2300      	movs	r3, #0
 80030f6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80030fa:	f107 0310 	add.w	r3, r7, #16
 80030fe:	4618      	mov	r0, r3
 8003100:	f006 fb96 	bl	8009830 <HAL_RCCEx_PeriphCLKConfig>
 8003104:	4603      	mov	r3, r0
 8003106:	2b00      	cmp	r3, #0
 8003108:	d001      	beq.n	800310e <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 800310a:	f7ff ff25 	bl	8002f58 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800310e:	4b1d      	ldr	r3, [pc, #116]	; (8003184 <HAL_I2C_MspInit+0xcc>)
 8003110:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003114:	4a1b      	ldr	r2, [pc, #108]	; (8003184 <HAL_I2C_MspInit+0xcc>)
 8003116:	f043 0302 	orr.w	r3, r3, #2
 800311a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800311e:	4b19      	ldr	r3, [pc, #100]	; (8003184 <HAL_I2C_MspInit+0xcc>)
 8003120:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003124:	f003 0302 	and.w	r3, r3, #2
 8003128:	60fb      	str	r3, [r7, #12]
 800312a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800312c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003130:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003134:	2312      	movs	r3, #18
 8003136:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800313a:	2300      	movs	r3, #0
 800313c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003140:	2300      	movs	r3, #0
 8003142:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003146:	2304      	movs	r3, #4
 8003148:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800314c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003150:	4619      	mov	r1, r3
 8003152:	480d      	ldr	r0, [pc, #52]	; (8003188 <HAL_I2C_MspInit+0xd0>)
 8003154:	f004 fb56 	bl	8007804 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003158:	4b0a      	ldr	r3, [pc, #40]	; (8003184 <HAL_I2C_MspInit+0xcc>)
 800315a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800315e:	4a09      	ldr	r2, [pc, #36]	; (8003184 <HAL_I2C_MspInit+0xcc>)
 8003160:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003164:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003168:	4b06      	ldr	r3, [pc, #24]	; (8003184 <HAL_I2C_MspInit+0xcc>)
 800316a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800316e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003172:	60bb      	str	r3, [r7, #8]
 8003174:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003176:	bf00      	nop
 8003178:	37e8      	adds	r7, #232	; 0xe8
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop
 8003180:	40005400 	.word	0x40005400
 8003184:	58024400 	.word	0x58024400
 8003188:	58020400 	.word	0x58020400

0800318c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b086      	sub	sp, #24
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a2e      	ldr	r2, [pc, #184]	; (8003254 <HAL_TIM_Base_MspInit+0xc8>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d117      	bne.n	80031ce <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800319e:	4b2e      	ldr	r3, [pc, #184]	; (8003258 <HAL_TIM_Base_MspInit+0xcc>)
 80031a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80031a4:	4a2c      	ldr	r2, [pc, #176]	; (8003258 <HAL_TIM_Base_MspInit+0xcc>)
 80031a6:	f043 0301 	orr.w	r3, r3, #1
 80031aa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80031ae:	4b2a      	ldr	r3, [pc, #168]	; (8003258 <HAL_TIM_Base_MspInit+0xcc>)
 80031b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80031b4:	f003 0301 	and.w	r3, r3, #1
 80031b8:	617b      	str	r3, [r7, #20]
 80031ba:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 80031bc:	2200      	movs	r2, #0
 80031be:	2105      	movs	r1, #5
 80031c0:	2019      	movs	r0, #25
 80031c2:	f002 f8d1 	bl	8005368 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80031c6:	2019      	movs	r0, #25
 80031c8:	f002 f8e8 	bl	800539c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80031cc:	e03d      	b.n	800324a <HAL_TIM_Base_MspInit+0xbe>
  else if(htim_base->Instance==TIM2)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031d6:	d10f      	bne.n	80031f8 <HAL_TIM_Base_MspInit+0x6c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80031d8:	4b1f      	ldr	r3, [pc, #124]	; (8003258 <HAL_TIM_Base_MspInit+0xcc>)
 80031da:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80031de:	4a1e      	ldr	r2, [pc, #120]	; (8003258 <HAL_TIM_Base_MspInit+0xcc>)
 80031e0:	f043 0301 	orr.w	r3, r3, #1
 80031e4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80031e8:	4b1b      	ldr	r3, [pc, #108]	; (8003258 <HAL_TIM_Base_MspInit+0xcc>)
 80031ea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80031ee:	f003 0301 	and.w	r3, r3, #1
 80031f2:	613b      	str	r3, [r7, #16]
 80031f4:	693b      	ldr	r3, [r7, #16]
}
 80031f6:	e028      	b.n	800324a <HAL_TIM_Base_MspInit+0xbe>
  else if(htim_base->Instance==TIM3)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a17      	ldr	r2, [pc, #92]	; (800325c <HAL_TIM_Base_MspInit+0xd0>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d10f      	bne.n	8003222 <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003202:	4b15      	ldr	r3, [pc, #84]	; (8003258 <HAL_TIM_Base_MspInit+0xcc>)
 8003204:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003208:	4a13      	ldr	r2, [pc, #76]	; (8003258 <HAL_TIM_Base_MspInit+0xcc>)
 800320a:	f043 0302 	orr.w	r3, r3, #2
 800320e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003212:	4b11      	ldr	r3, [pc, #68]	; (8003258 <HAL_TIM_Base_MspInit+0xcc>)
 8003214:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003218:	f003 0302 	and.w	r3, r3, #2
 800321c:	60fb      	str	r3, [r7, #12]
 800321e:	68fb      	ldr	r3, [r7, #12]
}
 8003220:	e013      	b.n	800324a <HAL_TIM_Base_MspInit+0xbe>
  else if(htim_base->Instance==TIM5)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a0e      	ldr	r2, [pc, #56]	; (8003260 <HAL_TIM_Base_MspInit+0xd4>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d10e      	bne.n	800324a <HAL_TIM_Base_MspInit+0xbe>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800322c:	4b0a      	ldr	r3, [pc, #40]	; (8003258 <HAL_TIM_Base_MspInit+0xcc>)
 800322e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003232:	4a09      	ldr	r2, [pc, #36]	; (8003258 <HAL_TIM_Base_MspInit+0xcc>)
 8003234:	f043 0308 	orr.w	r3, r3, #8
 8003238:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800323c:	4b06      	ldr	r3, [pc, #24]	; (8003258 <HAL_TIM_Base_MspInit+0xcc>)
 800323e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003242:	f003 0308 	and.w	r3, r3, #8
 8003246:	60bb      	str	r3, [r7, #8]
 8003248:	68bb      	ldr	r3, [r7, #8]
}
 800324a:	bf00      	nop
 800324c:	3718      	adds	r7, #24
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}
 8003252:	bf00      	nop
 8003254:	40010000 	.word	0x40010000
 8003258:	58024400 	.word	0x58024400
 800325c:	40000400 	.word	0x40000400
 8003260:	40000c00 	.word	0x40000c00

08003264 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b08c      	sub	sp, #48	; 0x30
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800326c:	f107 031c 	add.w	r3, r7, #28
 8003270:	2200      	movs	r2, #0
 8003272:	601a      	str	r2, [r3, #0]
 8003274:	605a      	str	r2, [r3, #4]
 8003276:	609a      	str	r2, [r3, #8]
 8003278:	60da      	str	r2, [r3, #12]
 800327a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a34      	ldr	r2, [pc, #208]	; (8003354 <HAL_TIM_Encoder_MspInit+0xf0>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d12f      	bne.n	80032e6 <HAL_TIM_Encoder_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003286:	4b34      	ldr	r3, [pc, #208]	; (8003358 <HAL_TIM_Encoder_MspInit+0xf4>)
 8003288:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800328c:	4a32      	ldr	r2, [pc, #200]	; (8003358 <HAL_TIM_Encoder_MspInit+0xf4>)
 800328e:	f043 0304 	orr.w	r3, r3, #4
 8003292:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003296:	4b30      	ldr	r3, [pc, #192]	; (8003358 <HAL_TIM_Encoder_MspInit+0xf4>)
 8003298:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800329c:	f003 0304 	and.w	r3, r3, #4
 80032a0:	61bb      	str	r3, [r7, #24]
 80032a2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80032a4:	4b2c      	ldr	r3, [pc, #176]	; (8003358 <HAL_TIM_Encoder_MspInit+0xf4>)
 80032a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032aa:	4a2b      	ldr	r2, [pc, #172]	; (8003358 <HAL_TIM_Encoder_MspInit+0xf4>)
 80032ac:	f043 0308 	orr.w	r3, r3, #8
 80032b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80032b4:	4b28      	ldr	r3, [pc, #160]	; (8003358 <HAL_TIM_Encoder_MspInit+0xf4>)
 80032b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032ba:	f003 0308 	and.w	r3, r3, #8
 80032be:	617b      	str	r3, [r7, #20]
 80032c0:	697b      	ldr	r3, [r7, #20]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = EL_1_Pin|EL_2_Pin;
 80032c2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80032c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032c8:	2302      	movs	r3, #2
 80032ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80032cc:	2301      	movs	r3, #1
 80032ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80032d0:	2302      	movs	r3, #2
 80032d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80032d4:	2302      	movs	r3, #2
 80032d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80032d8:	f107 031c 	add.w	r3, r7, #28
 80032dc:	4619      	mov	r1, r3
 80032de:	481f      	ldr	r0, [pc, #124]	; (800335c <HAL_TIM_Encoder_MspInit+0xf8>)
 80032e0:	f004 fa90 	bl	8007804 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80032e4:	e032      	b.n	800334c <HAL_TIM_Encoder_MspInit+0xe8>
  else if(htim_encoder->Instance==TIM8)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a1d      	ldr	r2, [pc, #116]	; (8003360 <HAL_TIM_Encoder_MspInit+0xfc>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d12d      	bne.n	800334c <HAL_TIM_Encoder_MspInit+0xe8>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80032f0:	4b19      	ldr	r3, [pc, #100]	; (8003358 <HAL_TIM_Encoder_MspInit+0xf4>)
 80032f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80032f6:	4a18      	ldr	r2, [pc, #96]	; (8003358 <HAL_TIM_Encoder_MspInit+0xf4>)
 80032f8:	f043 0302 	orr.w	r3, r3, #2
 80032fc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003300:	4b15      	ldr	r3, [pc, #84]	; (8003358 <HAL_TIM_Encoder_MspInit+0xf4>)
 8003302:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003306:	f003 0302 	and.w	r3, r3, #2
 800330a:	613b      	str	r3, [r7, #16]
 800330c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800330e:	4b12      	ldr	r3, [pc, #72]	; (8003358 <HAL_TIM_Encoder_MspInit+0xf4>)
 8003310:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003314:	4a10      	ldr	r2, [pc, #64]	; (8003358 <HAL_TIM_Encoder_MspInit+0xf4>)
 8003316:	f043 0304 	orr.w	r3, r3, #4
 800331a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800331e:	4b0e      	ldr	r3, [pc, #56]	; (8003358 <HAL_TIM_Encoder_MspInit+0xf4>)
 8003320:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003324:	f003 0304 	and.w	r3, r3, #4
 8003328:	60fb      	str	r3, [r7, #12]
 800332a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ER_2_Pin|ER_1_Pin;
 800332c:	23c0      	movs	r3, #192	; 0xc0
 800332e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003330:	2302      	movs	r3, #2
 8003332:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003334:	2301      	movs	r3, #1
 8003336:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003338:	2302      	movs	r3, #2
 800333a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800333c:	2303      	movs	r3, #3
 800333e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003340:	f107 031c 	add.w	r3, r7, #28
 8003344:	4619      	mov	r1, r3
 8003346:	4807      	ldr	r0, [pc, #28]	; (8003364 <HAL_TIM_Encoder_MspInit+0x100>)
 8003348:	f004 fa5c 	bl	8007804 <HAL_GPIO_Init>
}
 800334c:	bf00      	nop
 800334e:	3730      	adds	r7, #48	; 0x30
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}
 8003354:	40000800 	.word	0x40000800
 8003358:	58024400 	.word	0x58024400
 800335c:	58020c00 	.word	0x58020c00
 8003360:	40010400 	.word	0x40010400
 8003364:	58020800 	.word	0x58020800

08003368 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b08a      	sub	sp, #40	; 0x28
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003370:	f107 0314 	add.w	r3, r7, #20
 8003374:	2200      	movs	r2, #0
 8003376:	601a      	str	r2, [r3, #0]
 8003378:	605a      	str	r2, [r3, #4]
 800337a:	609a      	str	r2, [r3, #8]
 800337c:	60da      	str	r2, [r3, #12]
 800337e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003388:	d11f      	bne.n	80033ca <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800338a:	4b36      	ldr	r3, [pc, #216]	; (8003464 <HAL_TIM_MspPostInit+0xfc>)
 800338c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003390:	4a34      	ldr	r2, [pc, #208]	; (8003464 <HAL_TIM_MspPostInit+0xfc>)
 8003392:	f043 0301 	orr.w	r3, r3, #1
 8003396:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800339a:	4b32      	ldr	r3, [pc, #200]	; (8003464 <HAL_TIM_MspPostInit+0xfc>)
 800339c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033a0:	f003 0301 	and.w	r3, r3, #1
 80033a4:	613b      	str	r3, [r7, #16]
 80033a6:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = PWM_L_Pin;
 80033a8:	2301      	movs	r3, #1
 80033aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033ac:	2302      	movs	r3, #2
 80033ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033b0:	2300      	movs	r3, #0
 80033b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80033b4:	2302      	movs	r3, #2
 80033b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80033b8:	2301      	movs	r3, #1
 80033ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_L_GPIO_Port, &GPIO_InitStruct);
 80033bc:	f107 0314 	add.w	r3, r7, #20
 80033c0:	4619      	mov	r1, r3
 80033c2:	4829      	ldr	r0, [pc, #164]	; (8003468 <HAL_TIM_MspPostInit+0x100>)
 80033c4:	f004 fa1e 	bl	8007804 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 80033c8:	e048      	b.n	800345c <HAL_TIM_MspPostInit+0xf4>
  else if(htim->Instance==TIM3)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a27      	ldr	r2, [pc, #156]	; (800346c <HAL_TIM_MspPostInit+0x104>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d11f      	bne.n	8003414 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033d4:	4b23      	ldr	r3, [pc, #140]	; (8003464 <HAL_TIM_MspPostInit+0xfc>)
 80033d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033da:	4a22      	ldr	r2, [pc, #136]	; (8003464 <HAL_TIM_MspPostInit+0xfc>)
 80033dc:	f043 0301 	orr.w	r3, r3, #1
 80033e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80033e4:	4b1f      	ldr	r3, [pc, #124]	; (8003464 <HAL_TIM_MspPostInit+0xfc>)
 80033e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033ea:	f003 0301 	and.w	r3, r3, #1
 80033ee:	60fb      	str	r3, [r7, #12]
 80033f0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_R_Pin;
 80033f2:	2340      	movs	r3, #64	; 0x40
 80033f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033f6:	2302      	movs	r3, #2
 80033f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033fa:	2300      	movs	r3, #0
 80033fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80033fe:	2302      	movs	r3, #2
 8003400:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003402:	2302      	movs	r3, #2
 8003404:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_R_GPIO_Port, &GPIO_InitStruct);
 8003406:	f107 0314 	add.w	r3, r7, #20
 800340a:	4619      	mov	r1, r3
 800340c:	4816      	ldr	r0, [pc, #88]	; (8003468 <HAL_TIM_MspPostInit+0x100>)
 800340e:	f004 f9f9 	bl	8007804 <HAL_GPIO_Init>
}
 8003412:	e023      	b.n	800345c <HAL_TIM_MspPostInit+0xf4>
  else if(htim->Instance==TIM5)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a15      	ldr	r2, [pc, #84]	; (8003470 <HAL_TIM_MspPostInit+0x108>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d11e      	bne.n	800345c <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800341e:	4b11      	ldr	r3, [pc, #68]	; (8003464 <HAL_TIM_MspPostInit+0xfc>)
 8003420:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003424:	4a0f      	ldr	r2, [pc, #60]	; (8003464 <HAL_TIM_MspPostInit+0xfc>)
 8003426:	f043 0301 	orr.w	r3, r3, #1
 800342a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800342e:	4b0d      	ldr	r3, [pc, #52]	; (8003464 <HAL_TIM_MspPostInit+0xfc>)
 8003430:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003434:	f003 0301 	and.w	r3, r3, #1
 8003438:	60bb      	str	r3, [r7, #8]
 800343a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800343c:	2308      	movs	r3, #8
 800343e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003440:	2302      	movs	r3, #2
 8003442:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003444:	2300      	movs	r3, #0
 8003446:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003448:	2300      	movs	r3, #0
 800344a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800344c:	2302      	movs	r3, #2
 800344e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003450:	f107 0314 	add.w	r3, r7, #20
 8003454:	4619      	mov	r1, r3
 8003456:	4804      	ldr	r0, [pc, #16]	; (8003468 <HAL_TIM_MspPostInit+0x100>)
 8003458:	f004 f9d4 	bl	8007804 <HAL_GPIO_Init>
}
 800345c:	bf00      	nop
 800345e:	3728      	adds	r7, #40	; 0x28
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}
 8003464:	58024400 	.word	0x58024400
 8003468:	58020000 	.word	0x58020000
 800346c:	40000400 	.word	0x40000400
 8003470:	40000c00 	.word	0x40000c00

08003474 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b0ba      	sub	sp, #232	; 0xe8
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800347c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003480:	2200      	movs	r2, #0
 8003482:	601a      	str	r2, [r3, #0]
 8003484:	605a      	str	r2, [r3, #4]
 8003486:	609a      	str	r2, [r3, #8]
 8003488:	60da      	str	r2, [r3, #12]
 800348a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800348c:	f107 0310 	add.w	r3, r7, #16
 8003490:	22c0      	movs	r2, #192	; 0xc0
 8003492:	2100      	movs	r1, #0
 8003494:	4618      	mov	r0, r3
 8003496:	f010 ffc2 	bl	801441e <memset>
  if(huart->Instance==USART3)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a59      	ldr	r2, [pc, #356]	; (8003604 <HAL_UART_MspInit+0x190>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	f040 80aa 	bne.w	80035fa <HAL_UART_MspInit+0x186>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80034a6:	f04f 0202 	mov.w	r2, #2
 80034aa:	f04f 0300 	mov.w	r3, #0
 80034ae:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80034b2:	2300      	movs	r3, #0
 80034b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80034b8:	f107 0310 	add.w	r3, r7, #16
 80034bc:	4618      	mov	r0, r3
 80034be:	f006 f9b7 	bl	8009830 <HAL_RCCEx_PeriphCLKConfig>
 80034c2:	4603      	mov	r3, r0
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d001      	beq.n	80034cc <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 80034c8:	f7ff fd46 	bl	8002f58 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80034cc:	4b4e      	ldr	r3, [pc, #312]	; (8003608 <HAL_UART_MspInit+0x194>)
 80034ce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80034d2:	4a4d      	ldr	r2, [pc, #308]	; (8003608 <HAL_UART_MspInit+0x194>)
 80034d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034d8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80034dc:	4b4a      	ldr	r3, [pc, #296]	; (8003608 <HAL_UART_MspInit+0x194>)
 80034de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80034e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034e6:	60fb      	str	r3, [r7, #12]
 80034e8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80034ea:	4b47      	ldr	r3, [pc, #284]	; (8003608 <HAL_UART_MspInit+0x194>)
 80034ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034f0:	4a45      	ldr	r2, [pc, #276]	; (8003608 <HAL_UART_MspInit+0x194>)
 80034f2:	f043 0308 	orr.w	r3, r3, #8
 80034f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80034fa:	4b43      	ldr	r3, [pc, #268]	; (8003608 <HAL_UART_MspInit+0x194>)
 80034fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003500:	f003 0308 	and.w	r3, r3, #8
 8003504:	60bb      	str	r3, [r7, #8]
 8003506:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8003508:	f44f 7340 	mov.w	r3, #768	; 0x300
 800350c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003510:	2302      	movs	r3, #2
 8003512:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003516:	2300      	movs	r3, #0
 8003518:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800351c:	2300      	movs	r3, #0
 800351e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003522:	2307      	movs	r3, #7
 8003524:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003528:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800352c:	4619      	mov	r1, r3
 800352e:	4837      	ldr	r0, [pc, #220]	; (800360c <HAL_UART_MspInit+0x198>)
 8003530:	f004 f968 	bl	8007804 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream0;
 8003534:	4b36      	ldr	r3, [pc, #216]	; (8003610 <HAL_UART_MspInit+0x19c>)
 8003536:	4a37      	ldr	r2, [pc, #220]	; (8003614 <HAL_UART_MspInit+0x1a0>)
 8003538:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 800353a:	4b35      	ldr	r3, [pc, #212]	; (8003610 <HAL_UART_MspInit+0x19c>)
 800353c:	222d      	movs	r2, #45	; 0x2d
 800353e:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003540:	4b33      	ldr	r3, [pc, #204]	; (8003610 <HAL_UART_MspInit+0x19c>)
 8003542:	2200      	movs	r2, #0
 8003544:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003546:	4b32      	ldr	r3, [pc, #200]	; (8003610 <HAL_UART_MspInit+0x19c>)
 8003548:	2200      	movs	r2, #0
 800354a:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800354c:	4b30      	ldr	r3, [pc, #192]	; (8003610 <HAL_UART_MspInit+0x19c>)
 800354e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003552:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003554:	4b2e      	ldr	r3, [pc, #184]	; (8003610 <HAL_UART_MspInit+0x19c>)
 8003556:	2200      	movs	r2, #0
 8003558:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800355a:	4b2d      	ldr	r3, [pc, #180]	; (8003610 <HAL_UART_MspInit+0x19c>)
 800355c:	2200      	movs	r2, #0
 800355e:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8003560:	4b2b      	ldr	r3, [pc, #172]	; (8003610 <HAL_UART_MspInit+0x19c>)
 8003562:	2200      	movs	r2, #0
 8003564:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003566:	4b2a      	ldr	r3, [pc, #168]	; (8003610 <HAL_UART_MspInit+0x19c>)
 8003568:	2200      	movs	r2, #0
 800356a:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800356c:	4b28      	ldr	r3, [pc, #160]	; (8003610 <HAL_UART_MspInit+0x19c>)
 800356e:	2200      	movs	r2, #0
 8003570:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8003572:	4827      	ldr	r0, [pc, #156]	; (8003610 <HAL_UART_MspInit+0x19c>)
 8003574:	f001 ff20 	bl	80053b8 <HAL_DMA_Init>
 8003578:	4603      	mov	r3, r0
 800357a:	2b00      	cmp	r3, #0
 800357c:	d001      	beq.n	8003582 <HAL_UART_MspInit+0x10e>
    {
      Error_Handler();
 800357e:	f7ff fceb 	bl	8002f58 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	4a22      	ldr	r2, [pc, #136]	; (8003610 <HAL_UART_MspInit+0x19c>)
 8003586:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800358a:	4a21      	ldr	r2, [pc, #132]	; (8003610 <HAL_UART_MspInit+0x19c>)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream1;
 8003590:	4b21      	ldr	r3, [pc, #132]	; (8003618 <HAL_UART_MspInit+0x1a4>)
 8003592:	4a22      	ldr	r2, [pc, #136]	; (800361c <HAL_UART_MspInit+0x1a8>)
 8003594:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8003596:	4b20      	ldr	r3, [pc, #128]	; (8003618 <HAL_UART_MspInit+0x1a4>)
 8003598:	222e      	movs	r2, #46	; 0x2e
 800359a:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800359c:	4b1e      	ldr	r3, [pc, #120]	; (8003618 <HAL_UART_MspInit+0x1a4>)
 800359e:	2240      	movs	r2, #64	; 0x40
 80035a0:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80035a2:	4b1d      	ldr	r3, [pc, #116]	; (8003618 <HAL_UART_MspInit+0x1a4>)
 80035a4:	2200      	movs	r2, #0
 80035a6:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80035a8:	4b1b      	ldr	r3, [pc, #108]	; (8003618 <HAL_UART_MspInit+0x1a4>)
 80035aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80035ae:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80035b0:	4b19      	ldr	r3, [pc, #100]	; (8003618 <HAL_UART_MspInit+0x1a4>)
 80035b2:	2200      	movs	r2, #0
 80035b4:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80035b6:	4b18      	ldr	r3, [pc, #96]	; (8003618 <HAL_UART_MspInit+0x1a4>)
 80035b8:	2200      	movs	r2, #0
 80035ba:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80035bc:	4b16      	ldr	r3, [pc, #88]	; (8003618 <HAL_UART_MspInit+0x1a4>)
 80035be:	2200      	movs	r2, #0
 80035c0:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80035c2:	4b15      	ldr	r3, [pc, #84]	; (8003618 <HAL_UART_MspInit+0x1a4>)
 80035c4:	2200      	movs	r2, #0
 80035c6:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80035c8:	4b13      	ldr	r3, [pc, #76]	; (8003618 <HAL_UART_MspInit+0x1a4>)
 80035ca:	2200      	movs	r2, #0
 80035cc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80035ce:	4812      	ldr	r0, [pc, #72]	; (8003618 <HAL_UART_MspInit+0x1a4>)
 80035d0:	f001 fef2 	bl	80053b8 <HAL_DMA_Init>
 80035d4:	4603      	mov	r3, r0
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d001      	beq.n	80035de <HAL_UART_MspInit+0x16a>
    {
      Error_Handler();
 80035da:	f7ff fcbd 	bl	8002f58 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	4a0d      	ldr	r2, [pc, #52]	; (8003618 <HAL_UART_MspInit+0x1a4>)
 80035e2:	67da      	str	r2, [r3, #124]	; 0x7c
 80035e4:	4a0c      	ldr	r2, [pc, #48]	; (8003618 <HAL_UART_MspInit+0x1a4>)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80035ea:	2200      	movs	r2, #0
 80035ec:	2105      	movs	r1, #5
 80035ee:	2027      	movs	r0, #39	; 0x27
 80035f0:	f001 feba 	bl	8005368 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80035f4:	2027      	movs	r0, #39	; 0x27
 80035f6:	f001 fed1 	bl	800539c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80035fa:	bf00      	nop
 80035fc:	37e8      	adds	r7, #232	; 0xe8
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}
 8003602:	bf00      	nop
 8003604:	40004800 	.word	0x40004800
 8003608:	58024400 	.word	0x58024400
 800360c:	58020c00 	.word	0x58020c00
 8003610:	24000570 	.word	0x24000570
 8003614:	40020010 	.word	0x40020010
 8003618:	240005e8 	.word	0x240005e8
 800361c:	40020028 	.word	0x40020028

08003620 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b0ba      	sub	sp, #232	; 0xe8
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003628:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800362c:	2200      	movs	r2, #0
 800362e:	601a      	str	r2, [r3, #0]
 8003630:	605a      	str	r2, [r3, #4]
 8003632:	609a      	str	r2, [r3, #8]
 8003634:	60da      	str	r2, [r3, #12]
 8003636:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003638:	f107 0310 	add.w	r3, r7, #16
 800363c:	22c0      	movs	r2, #192	; 0xc0
 800363e:	2100      	movs	r1, #0
 8003640:	4618      	mov	r0, r3
 8003642:	f010 feec 	bl	801441e <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a38      	ldr	r2, [pc, #224]	; (800372c <HAL_PCD_MspInit+0x10c>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d169      	bne.n	8003724 <HAL_PCD_MspInit+0x104>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8003650:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8003654:	f04f 0300 	mov.w	r3, #0
 8003658:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 800365c:	2301      	movs	r3, #1
 800365e:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 18;
 8003660:	2312      	movs	r3, #18
 8003662:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8003664:	2302      	movs	r3, #2
 8003666:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 3;
 8003668:	2303      	movs	r3, #3
 800366a:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 800366c:	2302      	movs	r3, #2
 800366e:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8003670:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003674:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 6144;
 8003676:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800367a:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 800367c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003680:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003684:	f107 0310 	add.w	r3, r7, #16
 8003688:	4618      	mov	r0, r3
 800368a:	f006 f8d1 	bl	8009830 <HAL_RCCEx_PeriphCLKConfig>
 800368e:	4603      	mov	r3, r0
 8003690:	2b00      	cmp	r3, #0
 8003692:	d001      	beq.n	8003698 <HAL_PCD_MspInit+0x78>
    {
      Error_Handler();
 8003694:	f7ff fc60 	bl	8002f58 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8003698:	f005 f892 	bl	80087c0 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800369c:	4b24      	ldr	r3, [pc, #144]	; (8003730 <HAL_PCD_MspInit+0x110>)
 800369e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80036a2:	4a23      	ldr	r2, [pc, #140]	; (8003730 <HAL_PCD_MspInit+0x110>)
 80036a4:	f043 0301 	orr.w	r3, r3, #1
 80036a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80036ac:	4b20      	ldr	r3, [pc, #128]	; (8003730 <HAL_PCD_MspInit+0x110>)
 80036ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80036b2:	f003 0301 	and.w	r3, r3, #1
 80036b6:	60fb      	str	r3, [r7, #12]
 80036b8:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80036ba:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80036be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036c2:	2302      	movs	r3, #2
 80036c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036c8:	2300      	movs	r3, #0
 80036ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036ce:	2300      	movs	r3, #0
 80036d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80036d4:	230a      	movs	r3, #10
 80036d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036da:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80036de:	4619      	mov	r1, r3
 80036e0:	4814      	ldr	r0, [pc, #80]	; (8003734 <HAL_PCD_MspInit+0x114>)
 80036e2:	f004 f88f 	bl	8007804 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80036e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80036ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80036ee:	2300      	movs	r3, #0
 80036f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036f4:	2300      	movs	r3, #0
 80036f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036fa:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80036fe:	4619      	mov	r1, r3
 8003700:	480c      	ldr	r0, [pc, #48]	; (8003734 <HAL_PCD_MspInit+0x114>)
 8003702:	f004 f87f 	bl	8007804 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8003706:	4b0a      	ldr	r3, [pc, #40]	; (8003730 <HAL_PCD_MspInit+0x110>)
 8003708:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800370c:	4a08      	ldr	r2, [pc, #32]	; (8003730 <HAL_PCD_MspInit+0x110>)
 800370e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003712:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8003716:	4b06      	ldr	r3, [pc, #24]	; (8003730 <HAL_PCD_MspInit+0x110>)
 8003718:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800371c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003720:	60bb      	str	r3, [r7, #8]
 8003722:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8003724:	bf00      	nop
 8003726:	37e8      	adds	r7, #232	; 0xe8
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}
 800372c:	40080000 	.word	0x40080000
 8003730:	58024400 	.word	0x58024400
 8003734:	58020000 	.word	0x58020000

08003738 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b08e      	sub	sp, #56	; 0x38
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM17 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2b0f      	cmp	r3, #15
 8003744:	d844      	bhi.n	80037d0 <HAL_InitTick+0x98>
  {
  HAL_NVIC_SetPriority(TIM17_IRQn, TickPriority ,0U);
 8003746:	2200      	movs	r2, #0
 8003748:	6879      	ldr	r1, [r7, #4]
 800374a:	2076      	movs	r0, #118	; 0x76
 800374c:	f001 fe0c 	bl	8005368 <HAL_NVIC_SetPriority>

  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8003750:	2076      	movs	r0, #118	; 0x76
 8003752:	f001 fe23 	bl	800539c <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8003756:	4a24      	ldr	r2, [pc, #144]	; (80037e8 <HAL_InitTick+0xb0>)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 800375c:	4b23      	ldr	r3, [pc, #140]	; (80037ec <HAL_InitTick+0xb4>)
 800375e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003762:	4a22      	ldr	r2, [pc, #136]	; (80037ec <HAL_InitTick+0xb4>)
 8003764:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003768:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800376c:	4b1f      	ldr	r3, [pc, #124]	; (80037ec <HAL_InitTick+0xb4>)
 800376e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003772:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003776:	60bb      	str	r3, [r7, #8]
 8003778:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800377a:	f107 020c 	add.w	r2, r7, #12
 800377e:	f107 0310 	add.w	r3, r7, #16
 8003782:	4611      	mov	r1, r2
 8003784:	4618      	mov	r0, r3
 8003786:	f006 f811 	bl	80097ac <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800378a:	f005 fff9 	bl	8009780 <HAL_RCC_GetPCLK2Freq>
 800378e:	4603      	mov	r3, r0
 8003790:	005b      	lsls	r3, r3, #1
 8003792:	637b      	str	r3, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003794:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003796:	4a16      	ldr	r2, [pc, #88]	; (80037f0 <HAL_InitTick+0xb8>)
 8003798:	fba2 2303 	umull	r2, r3, r2, r3
 800379c:	0c9b      	lsrs	r3, r3, #18
 800379e:	3b01      	subs	r3, #1
 80037a0:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 80037a2:	4b14      	ldr	r3, [pc, #80]	; (80037f4 <HAL_InitTick+0xbc>)
 80037a4:	4a14      	ldr	r2, [pc, #80]	; (80037f8 <HAL_InitTick+0xc0>)
 80037a6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 80037a8:	4b12      	ldr	r3, [pc, #72]	; (80037f4 <HAL_InitTick+0xbc>)
 80037aa:	f240 32e7 	movw	r2, #999	; 0x3e7
 80037ae:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 80037b0:	4a10      	ldr	r2, [pc, #64]	; (80037f4 <HAL_InitTick+0xbc>)
 80037b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037b4:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 80037b6:	4b0f      	ldr	r3, [pc, #60]	; (80037f4 <HAL_InitTick+0xbc>)
 80037b8:	2200      	movs	r2, #0
 80037ba:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037bc:	4b0d      	ldr	r3, [pc, #52]	; (80037f4 <HAL_InitTick+0xbc>)
 80037be:	2200      	movs	r2, #0
 80037c0:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 80037c2:	480c      	ldr	r0, [pc, #48]	; (80037f4 <HAL_InitTick+0xbc>)
 80037c4:	f008 fd32 	bl	800c22c <HAL_TIM_Base_Init>
 80037c8:	4603      	mov	r3, r0
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d107      	bne.n	80037de <HAL_InitTick+0xa6>
 80037ce:	e001      	b.n	80037d4 <HAL_InitTick+0x9c>
    return HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	e005      	b.n	80037e0 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim17);
 80037d4:	4807      	ldr	r0, [pc, #28]	; (80037f4 <HAL_InitTick+0xbc>)
 80037d6:	f008 fd81 	bl	800c2dc <HAL_TIM_Base_Start_IT>
 80037da:	4603      	mov	r3, r0
 80037dc:	e000      	b.n	80037e0 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	3738      	adds	r7, #56	; 0x38
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}
 80037e8:	24000008 	.word	0x24000008
 80037ec:	58024400 	.word	0x58024400
 80037f0:	431bde83 	.word	0x431bde83
 80037f4:	24000bc8 	.word	0x24000bc8
 80037f8:	40014800 	.word	0x40014800

080037fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80037fc:	b480      	push	{r7}
 80037fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003800:	e7fe      	b.n	8003800 <NMI_Handler+0x4>

08003802 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003802:	b480      	push	{r7}
 8003804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003806:	e7fe      	b.n	8003806 <HardFault_Handler+0x4>

08003808 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003808:	b480      	push	{r7}
 800380a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800380c:	e7fe      	b.n	800380c <MemManage_Handler+0x4>

0800380e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800380e:	b480      	push	{r7}
 8003810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003812:	e7fe      	b.n	8003812 <BusFault_Handler+0x4>

08003814 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003814:	b480      	push	{r7}
 8003816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003818:	e7fe      	b.n	8003818 <UsageFault_Handler+0x4>

0800381a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800381a:	b480      	push	{r7}
 800381c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800381e:	bf00      	nop
 8003820:	46bd      	mov	sp, r7
 8003822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003826:	4770      	bx	lr

08003828 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800382c:	4802      	ldr	r0, [pc, #8]	; (8003838 <DMA1_Stream0_IRQHandler+0x10>)
 800382e:	f002 fe83 	bl	8006538 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003832:	bf00      	nop
 8003834:	bd80      	pop	{r7, pc}
 8003836:	bf00      	nop
 8003838:	24000570 	.word	0x24000570

0800383c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8003840:	4802      	ldr	r0, [pc, #8]	; (800384c <DMA1_Stream1_IRQHandler+0x10>)
 8003842:	f002 fe79 	bl	8006538 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003846:	bf00      	nop
 8003848:	bd80      	pop	{r7, pc}
 800384a:	bf00      	nop
 800384c:	240005e8 	.word	0x240005e8

08003850 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003854:	4802      	ldr	r0, [pc, #8]	; (8003860 <TIM1_UP_IRQHandler+0x10>)
 8003856:	f009 f87d 	bl	800c954 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800385a:	bf00      	nop
 800385c:	bd80      	pop	{r7, pc}
 800385e:	bf00      	nop
 8003860:	24000314 	.word	0x24000314

08003864 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003868:	4802      	ldr	r0, [pc, #8]	; (8003874 <USART3_IRQHandler+0x10>)
 800386a:	f00a f985 	bl	800db78 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800386e:	bf00      	nop
 8003870:	bd80      	pop	{r7, pc}
 8003872:	bf00      	nop
 8003874:	240004dc 	.word	0x240004dc

08003878 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 800387c:	4802      	ldr	r0, [pc, #8]	; (8003888 <TIM17_IRQHandler+0x10>)
 800387e:	f009 f869 	bl	800c954 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8003882:	bf00      	nop
 8003884:	bd80      	pop	{r7, pc}
 8003886:	bf00      	nop
 8003888:	24000bc8 	.word	0x24000bc8

0800388c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800388c:	b480      	push	{r7}
 800388e:	af00      	add	r7, sp, #0
  return 1;
 8003890:	2301      	movs	r3, #1
}
 8003892:	4618      	mov	r0, r3
 8003894:	46bd      	mov	sp, r7
 8003896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389a:	4770      	bx	lr

0800389c <_kill>:

int _kill(int pid, int sig)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b082      	sub	sp, #8
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
 80038a4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80038a6:	f010 fe73 	bl	8014590 <__errno>
 80038aa:	4603      	mov	r3, r0
 80038ac:	2216      	movs	r2, #22
 80038ae:	601a      	str	r2, [r3, #0]
  return -1;
 80038b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	3708      	adds	r7, #8
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}

080038bc <_exit>:

void _exit (int status)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b082      	sub	sp, #8
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80038c4:	f04f 31ff 	mov.w	r1, #4294967295
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	f7ff ffe7 	bl	800389c <_kill>
  while (1) {}    /* Make sure we hang here */
 80038ce:	e7fe      	b.n	80038ce <_exit+0x12>

080038d0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b086      	sub	sp, #24
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	60f8      	str	r0, [r7, #12]
 80038d8:	60b9      	str	r1, [r7, #8]
 80038da:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038dc:	2300      	movs	r3, #0
 80038de:	617b      	str	r3, [r7, #20]
 80038e0:	e00a      	b.n	80038f8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80038e2:	f3af 8000 	nop.w
 80038e6:	4601      	mov	r1, r0
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	1c5a      	adds	r2, r3, #1
 80038ec:	60ba      	str	r2, [r7, #8]
 80038ee:	b2ca      	uxtb	r2, r1
 80038f0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	3301      	adds	r3, #1
 80038f6:	617b      	str	r3, [r7, #20]
 80038f8:	697a      	ldr	r2, [r7, #20]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	429a      	cmp	r2, r3
 80038fe:	dbf0      	blt.n	80038e2 <_read+0x12>
  }

  return len;
 8003900:	687b      	ldr	r3, [r7, #4]
}
 8003902:	4618      	mov	r0, r3
 8003904:	3718      	adds	r7, #24
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}

0800390a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800390a:	b580      	push	{r7, lr}
 800390c:	b086      	sub	sp, #24
 800390e:	af00      	add	r7, sp, #0
 8003910:	60f8      	str	r0, [r7, #12]
 8003912:	60b9      	str	r1, [r7, #8]
 8003914:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003916:	2300      	movs	r3, #0
 8003918:	617b      	str	r3, [r7, #20]
 800391a:	e009      	b.n	8003930 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	1c5a      	adds	r2, r3, #1
 8003920:	60ba      	str	r2, [r7, #8]
 8003922:	781b      	ldrb	r3, [r3, #0]
 8003924:	4618      	mov	r0, r3
 8003926:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	3301      	adds	r3, #1
 800392e:	617b      	str	r3, [r7, #20]
 8003930:	697a      	ldr	r2, [r7, #20]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	429a      	cmp	r2, r3
 8003936:	dbf1      	blt.n	800391c <_write+0x12>
  }
  return len;
 8003938:	687b      	ldr	r3, [r7, #4]
}
 800393a:	4618      	mov	r0, r3
 800393c:	3718      	adds	r7, #24
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}

08003942 <_close>:

int _close(int file)
{
 8003942:	b480      	push	{r7}
 8003944:	b083      	sub	sp, #12
 8003946:	af00      	add	r7, sp, #0
 8003948:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800394a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800394e:	4618      	mov	r0, r3
 8003950:	370c      	adds	r7, #12
 8003952:	46bd      	mov	sp, r7
 8003954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003958:	4770      	bx	lr

0800395a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800395a:	b480      	push	{r7}
 800395c:	b083      	sub	sp, #12
 800395e:	af00      	add	r7, sp, #0
 8003960:	6078      	str	r0, [r7, #4]
 8003962:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800396a:	605a      	str	r2, [r3, #4]
  return 0;
 800396c:	2300      	movs	r3, #0
}
 800396e:	4618      	mov	r0, r3
 8003970:	370c      	adds	r7, #12
 8003972:	46bd      	mov	sp, r7
 8003974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003978:	4770      	bx	lr

0800397a <_isatty>:

int _isatty(int file)
{
 800397a:	b480      	push	{r7}
 800397c:	b083      	sub	sp, #12
 800397e:	af00      	add	r7, sp, #0
 8003980:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003982:	2301      	movs	r3, #1
}
 8003984:	4618      	mov	r0, r3
 8003986:	370c      	adds	r7, #12
 8003988:	46bd      	mov	sp, r7
 800398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398e:	4770      	bx	lr

08003990 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003990:	b480      	push	{r7}
 8003992:	b085      	sub	sp, #20
 8003994:	af00      	add	r7, sp, #0
 8003996:	60f8      	str	r0, [r7, #12]
 8003998:	60b9      	str	r1, [r7, #8]
 800399a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800399c:	2300      	movs	r3, #0
}
 800399e:	4618      	mov	r0, r3
 80039a0:	3714      	adds	r7, #20
 80039a2:	46bd      	mov	sp, r7
 80039a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a8:	4770      	bx	lr
	...

080039ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b086      	sub	sp, #24
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80039b4:	4a14      	ldr	r2, [pc, #80]	; (8003a08 <_sbrk+0x5c>)
 80039b6:	4b15      	ldr	r3, [pc, #84]	; (8003a0c <_sbrk+0x60>)
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80039c0:	4b13      	ldr	r3, [pc, #76]	; (8003a10 <_sbrk+0x64>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d102      	bne.n	80039ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80039c8:	4b11      	ldr	r3, [pc, #68]	; (8003a10 <_sbrk+0x64>)
 80039ca:	4a12      	ldr	r2, [pc, #72]	; (8003a14 <_sbrk+0x68>)
 80039cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80039ce:	4b10      	ldr	r3, [pc, #64]	; (8003a10 <_sbrk+0x64>)
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	4413      	add	r3, r2
 80039d6:	693a      	ldr	r2, [r7, #16]
 80039d8:	429a      	cmp	r2, r3
 80039da:	d207      	bcs.n	80039ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80039dc:	f010 fdd8 	bl	8014590 <__errno>
 80039e0:	4603      	mov	r3, r0
 80039e2:	220c      	movs	r2, #12
 80039e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80039e6:	f04f 33ff 	mov.w	r3, #4294967295
 80039ea:	e009      	b.n	8003a00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80039ec:	4b08      	ldr	r3, [pc, #32]	; (8003a10 <_sbrk+0x64>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80039f2:	4b07      	ldr	r3, [pc, #28]	; (8003a10 <_sbrk+0x64>)
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	4413      	add	r3, r2
 80039fa:	4a05      	ldr	r2, [pc, #20]	; (8003a10 <_sbrk+0x64>)
 80039fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80039fe:	68fb      	ldr	r3, [r7, #12]
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	3718      	adds	r7, #24
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd80      	pop	{r7, pc}
 8003a08:	24080000 	.word	0x24080000
 8003a0c:	00000400 	.word	0x00000400
 8003a10:	24000c14 	.word	0x24000c14
 8003a14:	24005750 	.word	0x24005750

08003a18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003a18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003a50 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003a1c:	f7fd f82a 	bl	8000a74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003a20:	480c      	ldr	r0, [pc, #48]	; (8003a54 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003a22:	490d      	ldr	r1, [pc, #52]	; (8003a58 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003a24:	4a0d      	ldr	r2, [pc, #52]	; (8003a5c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003a26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003a28:	e002      	b.n	8003a30 <LoopCopyDataInit>

08003a2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003a2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003a2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003a2e:	3304      	adds	r3, #4

08003a30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003a30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003a32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003a34:	d3f9      	bcc.n	8003a2a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003a36:	4a0a      	ldr	r2, [pc, #40]	; (8003a60 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003a38:	4c0a      	ldr	r4, [pc, #40]	; (8003a64 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003a3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003a3c:	e001      	b.n	8003a42 <LoopFillZerobss>

08003a3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003a3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003a40:	3204      	adds	r2, #4

08003a42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003a42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003a44:	d3fb      	bcc.n	8003a3e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003a46:	f010 fda9 	bl	801459c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003a4a:	f7fe f939 	bl	8001cc0 <main>
  bx  lr
 8003a4e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003a50:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8003a54:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003a58:	240001dc 	.word	0x240001dc
  ldr r2, =_sidata
 8003a5c:	080180b8 	.word	0x080180b8
  ldr r2, =_sbss
 8003a60:	240001dc 	.word	0x240001dc
  ldr r4, =_ebss
 8003a64:	24005750 	.word	0x24005750

08003a68 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003a68:	e7fe      	b.n	8003a68 <ADC3_IRQHandler>
	...

08003a6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b082      	sub	sp, #8
 8003a70:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a72:	2003      	movs	r0, #3
 8003a74:	f001 fc6d 	bl	8005352 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003a78:	f005 fcc2 	bl	8009400 <HAL_RCC_GetSysClockFreq>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	4b15      	ldr	r3, [pc, #84]	; (8003ad4 <HAL_Init+0x68>)
 8003a80:	699b      	ldr	r3, [r3, #24]
 8003a82:	0a1b      	lsrs	r3, r3, #8
 8003a84:	f003 030f 	and.w	r3, r3, #15
 8003a88:	4913      	ldr	r1, [pc, #76]	; (8003ad8 <HAL_Init+0x6c>)
 8003a8a:	5ccb      	ldrb	r3, [r1, r3]
 8003a8c:	f003 031f 	and.w	r3, r3, #31
 8003a90:	fa22 f303 	lsr.w	r3, r2, r3
 8003a94:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003a96:	4b0f      	ldr	r3, [pc, #60]	; (8003ad4 <HAL_Init+0x68>)
 8003a98:	699b      	ldr	r3, [r3, #24]
 8003a9a:	f003 030f 	and.w	r3, r3, #15
 8003a9e:	4a0e      	ldr	r2, [pc, #56]	; (8003ad8 <HAL_Init+0x6c>)
 8003aa0:	5cd3      	ldrb	r3, [r2, r3]
 8003aa2:	f003 031f 	and.w	r3, r3, #31
 8003aa6:	687a      	ldr	r2, [r7, #4]
 8003aa8:	fa22 f303 	lsr.w	r3, r2, r3
 8003aac:	4a0b      	ldr	r2, [pc, #44]	; (8003adc <HAL_Init+0x70>)
 8003aae:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003ab0:	4a0b      	ldr	r2, [pc, #44]	; (8003ae0 <HAL_Init+0x74>)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003ab6:	200f      	movs	r0, #15
 8003ab8:	f7ff fe3e 	bl	8003738 <HAL_InitTick>
 8003abc:	4603      	mov	r3, r0
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d001      	beq.n	8003ac6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e002      	b.n	8003acc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003ac6:	f7ff fa4d 	bl	8002f64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003aca:	2300      	movs	r3, #0
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	3708      	adds	r7, #8
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}
 8003ad4:	58024400 	.word	0x58024400
 8003ad8:	08017b30 	.word	0x08017b30
 8003adc:	24000004 	.word	0x24000004
 8003ae0:	24000000 	.word	0x24000000

08003ae4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003ae8:	4b06      	ldr	r3, [pc, #24]	; (8003b04 <HAL_IncTick+0x20>)
 8003aea:	781b      	ldrb	r3, [r3, #0]
 8003aec:	461a      	mov	r2, r3
 8003aee:	4b06      	ldr	r3, [pc, #24]	; (8003b08 <HAL_IncTick+0x24>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4413      	add	r3, r2
 8003af4:	4a04      	ldr	r2, [pc, #16]	; (8003b08 <HAL_IncTick+0x24>)
 8003af6:	6013      	str	r3, [r2, #0]
}
 8003af8:	bf00      	nop
 8003afa:	46bd      	mov	sp, r7
 8003afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b00:	4770      	bx	lr
 8003b02:	bf00      	nop
 8003b04:	2400000c 	.word	0x2400000c
 8003b08:	24000c18 	.word	0x24000c18

08003b0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	af00      	add	r7, sp, #0
  return uwTick;
 8003b10:	4b03      	ldr	r3, [pc, #12]	; (8003b20 <HAL_GetTick+0x14>)
 8003b12:	681b      	ldr	r3, [r3, #0]
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	46bd      	mov	sp, r7
 8003b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1c:	4770      	bx	lr
 8003b1e:	bf00      	nop
 8003b20:	24000c18 	.word	0x24000c18

08003b24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b084      	sub	sp, #16
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003b2c:	f7ff ffee 	bl	8003b0c <HAL_GetTick>
 8003b30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b3c:	d005      	beq.n	8003b4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003b3e:	4b0a      	ldr	r3, [pc, #40]	; (8003b68 <HAL_Delay+0x44>)
 8003b40:	781b      	ldrb	r3, [r3, #0]
 8003b42:	461a      	mov	r2, r3
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	4413      	add	r3, r2
 8003b48:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003b4a:	bf00      	nop
 8003b4c:	f7ff ffde 	bl	8003b0c <HAL_GetTick>
 8003b50:	4602      	mov	r2, r0
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	1ad3      	subs	r3, r2, r3
 8003b56:	68fa      	ldr	r2, [r7, #12]
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	d8f7      	bhi.n	8003b4c <HAL_Delay+0x28>
  {
  }
}
 8003b5c:	bf00      	nop
 8003b5e:	bf00      	nop
 8003b60:	3710      	adds	r7, #16
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}
 8003b66:	bf00      	nop
 8003b68:	2400000c 	.word	0x2400000c

08003b6c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003b70:	4b03      	ldr	r3, [pc, #12]	; (8003b80 <HAL_GetREVID+0x14>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	0c1b      	lsrs	r3, r3, #16
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr
 8003b80:	5c001000 	.word	0x5c001000

08003b84 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b083      	sub	sp, #12
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
 8003b8c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	431a      	orrs	r2, r3
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	609a      	str	r2, [r3, #8]
}
 8003b9e:	bf00      	nop
 8003ba0:	370c      	adds	r7, #12
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba8:	4770      	bx	lr

08003baa <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003baa:	b480      	push	{r7}
 8003bac:	b083      	sub	sp, #12
 8003bae:	af00      	add	r7, sp, #0
 8003bb0:	6078      	str	r0, [r7, #4]
 8003bb2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	431a      	orrs	r2, r3
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	609a      	str	r2, [r3, #8]
}
 8003bc4:	bf00      	nop
 8003bc6:	370c      	adds	r7, #12
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bce:	4770      	bx	lr

08003bd0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b083      	sub	sp, #12
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	370c      	adds	r7, #12
 8003be4:	46bd      	mov	sp, r7
 8003be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bea:	4770      	bx	lr

08003bec <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b087      	sub	sp, #28
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	60f8      	str	r0, [r7, #12]
 8003bf4:	60b9      	str	r1, [r7, #8]
 8003bf6:	607a      	str	r2, [r7, #4]
 8003bf8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	3360      	adds	r3, #96	; 0x60
 8003bfe:	461a      	mov	r2, r3
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	4413      	add	r3, r2
 8003c06:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	430b      	orrs	r3, r1
 8003c1a:	431a      	orrs	r2, r3
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8003c20:	bf00      	nop
 8003c22:	371c      	adds	r7, #28
 8003c24:	46bd      	mov	sp, r7
 8003c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2a:	4770      	bx	lr

08003c2c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b085      	sub	sp, #20
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	60f8      	str	r0, [r7, #12]
 8003c34:	60b9      	str	r1, [r7, #8]
 8003c36:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	691b      	ldr	r3, [r3, #16]
 8003c3c:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	f003 031f 	and.w	r3, r3, #31
 8003c46:	6879      	ldr	r1, [r7, #4]
 8003c48:	fa01 f303 	lsl.w	r3, r1, r3
 8003c4c:	431a      	orrs	r2, r3
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	611a      	str	r2, [r3, #16]
}
 8003c52:	bf00      	nop
 8003c54:	3714      	adds	r7, #20
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr

08003c5e <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8003c5e:	b480      	push	{r7}
 8003c60:	b087      	sub	sp, #28
 8003c62:	af00      	add	r7, sp, #0
 8003c64:	60f8      	str	r0, [r7, #12]
 8003c66:	60b9      	str	r1, [r7, #8]
 8003c68:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	3360      	adds	r3, #96	; 0x60
 8003c6e:	461a      	mov	r2, r3
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	009b      	lsls	r3, r3, #2
 8003c74:	4413      	add	r3, r2
 8003c76:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	431a      	orrs	r2, r3
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	601a      	str	r2, [r3, #0]
  }
}
 8003c88:	bf00      	nop
 8003c8a:	371c      	adds	r7, #28
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr

08003c94 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b083      	sub	sp, #12
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	68db      	ldr	r3, [r3, #12]
 8003ca0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d101      	bne.n	8003cac <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e000      	b.n	8003cae <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003cac:	2300      	movs	r3, #0
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	370c      	adds	r7, #12
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr

08003cba <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003cba:	b480      	push	{r7}
 8003cbc:	b087      	sub	sp, #28
 8003cbe:	af00      	add	r7, sp, #0
 8003cc0:	60f8      	str	r0, [r7, #12]
 8003cc2:	60b9      	str	r1, [r7, #8]
 8003cc4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	3330      	adds	r3, #48	; 0x30
 8003cca:	461a      	mov	r2, r3
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	0a1b      	lsrs	r3, r3, #8
 8003cd0:	009b      	lsls	r3, r3, #2
 8003cd2:	f003 030c 	and.w	r3, r3, #12
 8003cd6:	4413      	add	r3, r2
 8003cd8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	f003 031f 	and.w	r3, r3, #31
 8003ce4:	211f      	movs	r1, #31
 8003ce6:	fa01 f303 	lsl.w	r3, r1, r3
 8003cea:	43db      	mvns	r3, r3
 8003cec:	401a      	ands	r2, r3
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	0e9b      	lsrs	r3, r3, #26
 8003cf2:	f003 011f 	and.w	r1, r3, #31
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	f003 031f 	and.w	r3, r3, #31
 8003cfc:	fa01 f303 	lsl.w	r3, r1, r3
 8003d00:	431a      	orrs	r2, r3
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003d06:	bf00      	nop
 8003d08:	371c      	adds	r7, #28
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr

08003d12 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003d12:	b480      	push	{r7}
 8003d14:	b087      	sub	sp, #28
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	60f8      	str	r0, [r7, #12]
 8003d1a:	60b9      	str	r1, [r7, #8]
 8003d1c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	3314      	adds	r3, #20
 8003d22:	461a      	mov	r2, r3
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	0e5b      	lsrs	r3, r3, #25
 8003d28:	009b      	lsls	r3, r3, #2
 8003d2a:	f003 0304 	and.w	r3, r3, #4
 8003d2e:	4413      	add	r3, r2
 8003d30:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	0d1b      	lsrs	r3, r3, #20
 8003d3a:	f003 031f 	and.w	r3, r3, #31
 8003d3e:	2107      	movs	r1, #7
 8003d40:	fa01 f303 	lsl.w	r3, r1, r3
 8003d44:	43db      	mvns	r3, r3
 8003d46:	401a      	ands	r2, r3
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	0d1b      	lsrs	r3, r3, #20
 8003d4c:	f003 031f 	and.w	r3, r3, #31
 8003d50:	6879      	ldr	r1, [r7, #4]
 8003d52:	fa01 f303 	lsl.w	r3, r1, r3
 8003d56:	431a      	orrs	r2, r3
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003d5c:	bf00      	nop
 8003d5e:	371c      	adds	r7, #28
 8003d60:	46bd      	mov	sp, r7
 8003d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d66:	4770      	bx	lr

08003d68 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b085      	sub	sp, #20
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	60f8      	str	r0, [r7, #12]
 8003d70:	60b9      	str	r1, [r7, #8]
 8003d72:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d80:	43db      	mvns	r3, r3
 8003d82:	401a      	ands	r2, r3
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	f003 0318 	and.w	r3, r3, #24
 8003d8a:	4908      	ldr	r1, [pc, #32]	; (8003dac <LL_ADC_SetChannelSingleDiff+0x44>)
 8003d8c:	40d9      	lsrs	r1, r3
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	400b      	ands	r3, r1
 8003d92:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d96:	431a      	orrs	r2, r3
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8003d9e:	bf00      	nop
 8003da0:	3714      	adds	r7, #20
 8003da2:	46bd      	mov	sp, r7
 8003da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da8:	4770      	bx	lr
 8003daa:	bf00      	nop
 8003dac:	000fffff 	.word	0x000fffff

08003db0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b083      	sub	sp, #12
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	f003 031f 	and.w	r3, r3, #31
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	370c      	adds	r7, #12
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dca:	4770      	bx	lr

08003dcc <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b083      	sub	sp, #12
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	370c      	adds	r7, #12
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr

08003de8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b083      	sub	sp, #12
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	689a      	ldr	r2, [r3, #8]
 8003df4:	4b04      	ldr	r3, [pc, #16]	; (8003e08 <LL_ADC_DisableDeepPowerDown+0x20>)
 8003df6:	4013      	ands	r3, r2
 8003df8:	687a      	ldr	r2, [r7, #4]
 8003dfa:	6093      	str	r3, [r2, #8]
}
 8003dfc:	bf00      	nop
 8003dfe:	370c      	adds	r7, #12
 8003e00:	46bd      	mov	sp, r7
 8003e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e06:	4770      	bx	lr
 8003e08:	5fffffc0 	.word	0x5fffffc0

08003e0c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b083      	sub	sp, #12
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e20:	d101      	bne.n	8003e26 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003e22:	2301      	movs	r3, #1
 8003e24:	e000      	b.n	8003e28 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003e26:	2300      	movs	r3, #0
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	370c      	adds	r7, #12
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e32:	4770      	bx	lr

08003e34 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b083      	sub	sp, #12
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	689a      	ldr	r2, [r3, #8]
 8003e40:	4b05      	ldr	r3, [pc, #20]	; (8003e58 <LL_ADC_EnableInternalRegulator+0x24>)
 8003e42:	4013      	ands	r3, r2
 8003e44:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003e4c:	bf00      	nop
 8003e4e:	370c      	adds	r7, #12
 8003e50:	46bd      	mov	sp, r7
 8003e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e56:	4770      	bx	lr
 8003e58:	6fffffc0 	.word	0x6fffffc0

08003e5c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b083      	sub	sp, #12
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e6c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e70:	d101      	bne.n	8003e76 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003e72:	2301      	movs	r3, #1
 8003e74:	e000      	b.n	8003e78 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003e76:	2300      	movs	r3, #0
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	370c      	adds	r7, #12
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e82:	4770      	bx	lr

08003e84 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b083      	sub	sp, #12
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	689a      	ldr	r2, [r3, #8]
 8003e90:	4b05      	ldr	r3, [pc, #20]	; (8003ea8 <LL_ADC_Enable+0x24>)
 8003e92:	4013      	ands	r3, r2
 8003e94:	f043 0201 	orr.w	r2, r3, #1
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003e9c:	bf00      	nop
 8003e9e:	370c      	adds	r7, #12
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea6:	4770      	bx	lr
 8003ea8:	7fffffc0 	.word	0x7fffffc0

08003eac <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b083      	sub	sp, #12
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	f003 0301 	and.w	r3, r3, #1
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	d101      	bne.n	8003ec4 <LL_ADC_IsEnabled+0x18>
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	e000      	b.n	8003ec6 <LL_ADC_IsEnabled+0x1a>
 8003ec4:	2300      	movs	r3, #0
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	370c      	adds	r7, #12
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed0:	4770      	bx	lr
	...

08003ed4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b083      	sub	sp, #12
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	689a      	ldr	r2, [r3, #8]
 8003ee0:	4b05      	ldr	r3, [pc, #20]	; (8003ef8 <LL_ADC_REG_StartConversion+0x24>)
 8003ee2:	4013      	ands	r3, r2
 8003ee4:	f043 0204 	orr.w	r2, r3, #4
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003eec:	bf00      	nop
 8003eee:	370c      	adds	r7, #12
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef6:	4770      	bx	lr
 8003ef8:	7fffffc0 	.word	0x7fffffc0

08003efc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b083      	sub	sp, #12
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	f003 0304 	and.w	r3, r3, #4
 8003f0c:	2b04      	cmp	r3, #4
 8003f0e:	d101      	bne.n	8003f14 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003f10:	2301      	movs	r3, #1
 8003f12:	e000      	b.n	8003f16 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003f14:	2300      	movs	r3, #0
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	370c      	adds	r7, #12
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f20:	4770      	bx	lr

08003f22 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003f22:	b480      	push	{r7}
 8003f24:	b083      	sub	sp, #12
 8003f26:	af00      	add	r7, sp, #0
 8003f28:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	f003 0308 	and.w	r3, r3, #8
 8003f32:	2b08      	cmp	r3, #8
 8003f34:	d101      	bne.n	8003f3a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003f36:	2301      	movs	r3, #1
 8003f38:	e000      	b.n	8003f3c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003f3a:	2300      	movs	r3, #0
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	370c      	adds	r7, #12
 8003f40:	46bd      	mov	sp, r7
 8003f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f46:	4770      	bx	lr

08003f48 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003f48:	b590      	push	{r4, r7, lr}
 8003f4a:	b089      	sub	sp, #36	; 0x24
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f50:	2300      	movs	r3, #0
 8003f52:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003f54:	2300      	movs	r3, #0
 8003f56:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d101      	bne.n	8003f62 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e18f      	b.n	8004282 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	68db      	ldr	r3, [r3, #12]
 8003f66:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d109      	bne.n	8003f84 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003f70:	6878      	ldr	r0, [r7, #4]
 8003f72:	f7ff f815 	bl	8002fa0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4618      	mov	r0, r3
 8003f8a:	f7ff ff3f 	bl	8003e0c <LL_ADC_IsDeepPowerDownEnabled>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d004      	beq.n	8003f9e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f7ff ff25 	bl	8003de8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f7ff ff5a 	bl	8003e5c <LL_ADC_IsInternalRegulatorEnabled>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d114      	bne.n	8003fd8 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f7ff ff3e 	bl	8003e34 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003fb8:	4b87      	ldr	r3, [pc, #540]	; (80041d8 <HAL_ADC_Init+0x290>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	099b      	lsrs	r3, r3, #6
 8003fbe:	4a87      	ldr	r2, [pc, #540]	; (80041dc <HAL_ADC_Init+0x294>)
 8003fc0:	fba2 2303 	umull	r2, r3, r2, r3
 8003fc4:	099b      	lsrs	r3, r3, #6
 8003fc6:	3301      	adds	r3, #1
 8003fc8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003fca:	e002      	b.n	8003fd2 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	3b01      	subs	r3, #1
 8003fd0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d1f9      	bne.n	8003fcc <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f7ff ff3d 	bl	8003e5c <LL_ADC_IsInternalRegulatorEnabled>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d10d      	bne.n	8004004 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fec:	f043 0210 	orr.w	r2, r3, #16
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ff8:	f043 0201 	orr.w	r2, r3, #1
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4618      	mov	r0, r3
 800400a:	f7ff ff77 	bl	8003efc <LL_ADC_REG_IsConversionOngoing>
 800400e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004014:	f003 0310 	and.w	r3, r3, #16
 8004018:	2b00      	cmp	r3, #0
 800401a:	f040 8129 	bne.w	8004270 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	2b00      	cmp	r3, #0
 8004022:	f040 8125 	bne.w	8004270 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800402a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800402e:	f043 0202 	orr.w	r2, r3, #2
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4618      	mov	r0, r3
 800403c:	f7ff ff36 	bl	8003eac <LL_ADC_IsEnabled>
 8004040:	4603      	mov	r3, r0
 8004042:	2b00      	cmp	r3, #0
 8004044:	d136      	bne.n	80040b4 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a65      	ldr	r2, [pc, #404]	; (80041e0 <HAL_ADC_Init+0x298>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d004      	beq.n	800405a <HAL_ADC_Init+0x112>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a63      	ldr	r2, [pc, #396]	; (80041e4 <HAL_ADC_Init+0x29c>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d10e      	bne.n	8004078 <HAL_ADC_Init+0x130>
 800405a:	4861      	ldr	r0, [pc, #388]	; (80041e0 <HAL_ADC_Init+0x298>)
 800405c:	f7ff ff26 	bl	8003eac <LL_ADC_IsEnabled>
 8004060:	4604      	mov	r4, r0
 8004062:	4860      	ldr	r0, [pc, #384]	; (80041e4 <HAL_ADC_Init+0x29c>)
 8004064:	f7ff ff22 	bl	8003eac <LL_ADC_IsEnabled>
 8004068:	4603      	mov	r3, r0
 800406a:	4323      	orrs	r3, r4
 800406c:	2b00      	cmp	r3, #0
 800406e:	bf0c      	ite	eq
 8004070:	2301      	moveq	r3, #1
 8004072:	2300      	movne	r3, #0
 8004074:	b2db      	uxtb	r3, r3
 8004076:	e008      	b.n	800408a <HAL_ADC_Init+0x142>
 8004078:	485b      	ldr	r0, [pc, #364]	; (80041e8 <HAL_ADC_Init+0x2a0>)
 800407a:	f7ff ff17 	bl	8003eac <LL_ADC_IsEnabled>
 800407e:	4603      	mov	r3, r0
 8004080:	2b00      	cmp	r3, #0
 8004082:	bf0c      	ite	eq
 8004084:	2301      	moveq	r3, #1
 8004086:	2300      	movne	r3, #0
 8004088:	b2db      	uxtb	r3, r3
 800408a:	2b00      	cmp	r3, #0
 800408c:	d012      	beq.n	80040b4 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a53      	ldr	r2, [pc, #332]	; (80041e0 <HAL_ADC_Init+0x298>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d004      	beq.n	80040a2 <HAL_ADC_Init+0x15a>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a51      	ldr	r2, [pc, #324]	; (80041e4 <HAL_ADC_Init+0x29c>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d101      	bne.n	80040a6 <HAL_ADC_Init+0x15e>
 80040a2:	4a52      	ldr	r2, [pc, #328]	; (80041ec <HAL_ADC_Init+0x2a4>)
 80040a4:	e000      	b.n	80040a8 <HAL_ADC_Init+0x160>
 80040a6:	4a52      	ldr	r2, [pc, #328]	; (80041f0 <HAL_ADC_Init+0x2a8>)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	4619      	mov	r1, r3
 80040ae:	4610      	mov	r0, r2
 80040b0:	f7ff fd68 	bl	8003b84 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80040b4:	f7ff fd5a 	bl	8003b6c <HAL_GetREVID>
 80040b8:	4603      	mov	r3, r0
 80040ba:	f241 0203 	movw	r2, #4099	; 0x1003
 80040be:	4293      	cmp	r3, r2
 80040c0:	d914      	bls.n	80040ec <HAL_ADC_Init+0x1a4>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	2b10      	cmp	r3, #16
 80040c8:	d110      	bne.n	80040ec <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	7d5b      	ldrb	r3, [r3, #21]
 80040ce:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80040d4:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80040da:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	7f1b      	ldrb	r3, [r3, #28]
 80040e0:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80040e2:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80040e4:	f043 030c 	orr.w	r3, r3, #12
 80040e8:	61bb      	str	r3, [r7, #24]
 80040ea:	e00d      	b.n	8004108 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	7d5b      	ldrb	r3, [r3, #21]
 80040f0:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80040f6:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80040fc:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	7f1b      	ldrb	r3, [r3, #28]
 8004102:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004104:	4313      	orrs	r3, r2
 8004106:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	7f1b      	ldrb	r3, [r3, #28]
 800410c:	2b01      	cmp	r3, #1
 800410e:	d106      	bne.n	800411e <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6a1b      	ldr	r3, [r3, #32]
 8004114:	3b01      	subs	r3, #1
 8004116:	045b      	lsls	r3, r3, #17
 8004118:	69ba      	ldr	r2, [r7, #24]
 800411a:	4313      	orrs	r3, r2
 800411c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004122:	2b00      	cmp	r3, #0
 8004124:	d009      	beq.n	800413a <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800412a:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004132:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004134:	69ba      	ldr	r2, [r7, #24]
 8004136:	4313      	orrs	r3, r2
 8004138:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	68da      	ldr	r2, [r3, #12]
 8004140:	4b2c      	ldr	r3, [pc, #176]	; (80041f4 <HAL_ADC_Init+0x2ac>)
 8004142:	4013      	ands	r3, r2
 8004144:	687a      	ldr	r2, [r7, #4]
 8004146:	6812      	ldr	r2, [r2, #0]
 8004148:	69b9      	ldr	r1, [r7, #24]
 800414a:	430b      	orrs	r3, r1
 800414c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4618      	mov	r0, r3
 8004154:	f7ff fed2 	bl	8003efc <LL_ADC_REG_IsConversionOngoing>
 8004158:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4618      	mov	r0, r3
 8004160:	f7ff fedf 	bl	8003f22 <LL_ADC_INJ_IsConversionOngoing>
 8004164:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d15f      	bne.n	800422c <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d15c      	bne.n	800422c <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	7d1b      	ldrb	r3, [r3, #20]
 8004176:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 800417c:	4313      	orrs	r3, r2
 800417e:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	68da      	ldr	r2, [r3, #12]
 8004186:	4b1c      	ldr	r3, [pc, #112]	; (80041f8 <HAL_ADC_Init+0x2b0>)
 8004188:	4013      	ands	r3, r2
 800418a:	687a      	ldr	r2, [r7, #4]
 800418c:	6812      	ldr	r2, [r2, #0]
 800418e:	69b9      	ldr	r1, [r7, #24]
 8004190:	430b      	orrs	r3, r1
 8004192:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800419a:	2b01      	cmp	r3, #1
 800419c:	d130      	bne.n	8004200 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a2:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	691a      	ldr	r2, [r3, #16]
 80041aa:	4b14      	ldr	r3, [pc, #80]	; (80041fc <HAL_ADC_Init+0x2b4>)
 80041ac:	4013      	ands	r3, r2
 80041ae:	687a      	ldr	r2, [r7, #4]
 80041b0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80041b2:	3a01      	subs	r2, #1
 80041b4:	0411      	lsls	r1, r2, #16
 80041b6:	687a      	ldr	r2, [r7, #4]
 80041b8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80041ba:	4311      	orrs	r1, r2
 80041bc:	687a      	ldr	r2, [r7, #4]
 80041be:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80041c0:	4311      	orrs	r1, r2
 80041c2:	687a      	ldr	r2, [r7, #4]
 80041c4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80041c6:	430a      	orrs	r2, r1
 80041c8:	431a      	orrs	r2, r3
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f042 0201 	orr.w	r2, r2, #1
 80041d2:	611a      	str	r2, [r3, #16]
 80041d4:	e01c      	b.n	8004210 <HAL_ADC_Init+0x2c8>
 80041d6:	bf00      	nop
 80041d8:	24000000 	.word	0x24000000
 80041dc:	053e2d63 	.word	0x053e2d63
 80041e0:	40022000 	.word	0x40022000
 80041e4:	40022100 	.word	0x40022100
 80041e8:	58026000 	.word	0x58026000
 80041ec:	40022300 	.word	0x40022300
 80041f0:	58026300 	.word	0x58026300
 80041f4:	fff0c003 	.word	0xfff0c003
 80041f8:	ffffbffc 	.word	0xffffbffc
 80041fc:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	691a      	ldr	r2, [r3, #16]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f022 0201 	bic.w	r2, r2, #1
 800420e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	691b      	ldr	r3, [r3, #16]
 8004216:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	430a      	orrs	r2, r1
 8004224:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f000 fdd6 	bl	8004dd8 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	68db      	ldr	r3, [r3, #12]
 8004230:	2b01      	cmp	r3, #1
 8004232:	d10c      	bne.n	800424e <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800423a:	f023 010f 	bic.w	r1, r3, #15
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	699b      	ldr	r3, [r3, #24]
 8004242:	1e5a      	subs	r2, r3, #1
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	430a      	orrs	r2, r1
 800424a:	631a      	str	r2, [r3, #48]	; 0x30
 800424c:	e007      	b.n	800425e <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f022 020f 	bic.w	r2, r2, #15
 800425c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004262:	f023 0303 	bic.w	r3, r3, #3
 8004266:	f043 0201 	orr.w	r2, r3, #1
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	655a      	str	r2, [r3, #84]	; 0x54
 800426e:	e007      	b.n	8004280 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004274:	f043 0210 	orr.w	r2, r3, #16
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800427c:	2301      	movs	r3, #1
 800427e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004280:	7ffb      	ldrb	r3, [r7, #31]
}
 8004282:	4618      	mov	r0, r3
 8004284:	3724      	adds	r7, #36	; 0x24
 8004286:	46bd      	mov	sp, r7
 8004288:	bd90      	pop	{r4, r7, pc}
 800428a:	bf00      	nop

0800428c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b086      	sub	sp, #24
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a5c      	ldr	r2, [pc, #368]	; (800440c <HAL_ADC_Start+0x180>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d004      	beq.n	80042a8 <HAL_ADC_Start+0x1c>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a5b      	ldr	r2, [pc, #364]	; (8004410 <HAL_ADC_Start+0x184>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d101      	bne.n	80042ac <HAL_ADC_Start+0x20>
 80042a8:	4b5a      	ldr	r3, [pc, #360]	; (8004414 <HAL_ADC_Start+0x188>)
 80042aa:	e000      	b.n	80042ae <HAL_ADC_Start+0x22>
 80042ac:	4b5a      	ldr	r3, [pc, #360]	; (8004418 <HAL_ADC_Start+0x18c>)
 80042ae:	4618      	mov	r0, r3
 80042b0:	f7ff fd7e 	bl	8003db0 <LL_ADC_GetMultimode>
 80042b4:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4618      	mov	r0, r3
 80042bc:	f7ff fe1e 	bl	8003efc <LL_ADC_REG_IsConversionOngoing>
 80042c0:	4603      	mov	r3, r0
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	f040 809a 	bne.w	80043fc <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	d101      	bne.n	80042d6 <HAL_ADC_Start+0x4a>
 80042d2:	2302      	movs	r3, #2
 80042d4:	e095      	b.n	8004402 <HAL_ADC_Start+0x176>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2201      	movs	r2, #1
 80042da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f000 fcf0 	bl	8004cc4 <ADC_Enable>
 80042e4:	4603      	mov	r3, r0
 80042e6:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80042e8:	7dfb      	ldrb	r3, [r7, #23]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	f040 8081 	bne.w	80043f2 <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80042f4:	4b49      	ldr	r3, [pc, #292]	; (800441c <HAL_ADC_Start+0x190>)
 80042f6:	4013      	ands	r3, r2
 80042f8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a42      	ldr	r2, [pc, #264]	; (8004410 <HAL_ADC_Start+0x184>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d002      	beq.n	8004310 <HAL_ADC_Start+0x84>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	e000      	b.n	8004312 <HAL_ADC_Start+0x86>
 8004310:	4b3e      	ldr	r3, [pc, #248]	; (800440c <HAL_ADC_Start+0x180>)
 8004312:	687a      	ldr	r2, [r7, #4]
 8004314:	6812      	ldr	r2, [r2, #0]
 8004316:	4293      	cmp	r3, r2
 8004318:	d002      	beq.n	8004320 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d105      	bne.n	800432c <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004324:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004330:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004334:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004338:	d106      	bne.n	8004348 <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800433e:	f023 0206 	bic.w	r2, r3, #6
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	659a      	str	r2, [r3, #88]	; 0x58
 8004346:	e002      	b.n	800434e <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2200      	movs	r2, #0
 800434c:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	221c      	movs	r2, #28
 8004354:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2200      	movs	r2, #0
 800435a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a2b      	ldr	r2, [pc, #172]	; (8004410 <HAL_ADC_Start+0x184>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d002      	beq.n	800436e <HAL_ADC_Start+0xe2>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	e000      	b.n	8004370 <HAL_ADC_Start+0xe4>
 800436e:	4b27      	ldr	r3, [pc, #156]	; (800440c <HAL_ADC_Start+0x180>)
 8004370:	687a      	ldr	r2, [r7, #4]
 8004372:	6812      	ldr	r2, [r2, #0]
 8004374:	4293      	cmp	r3, r2
 8004376:	d008      	beq.n	800438a <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d005      	beq.n	800438a <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	2b05      	cmp	r3, #5
 8004382:	d002      	beq.n	800438a <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	2b09      	cmp	r3, #9
 8004388:	d114      	bne.n	80043b4 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	68db      	ldr	r3, [r3, #12]
 8004390:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004394:	2b00      	cmp	r3, #0
 8004396:	d007      	beq.n	80043a8 <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800439c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80043a0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4618      	mov	r0, r3
 80043ae:	f7ff fd91 	bl	8003ed4 <LL_ADC_REG_StartConversion>
 80043b2:	e025      	b.n	8004400 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043b8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a12      	ldr	r2, [pc, #72]	; (8004410 <HAL_ADC_Start+0x184>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d002      	beq.n	80043d0 <HAL_ADC_Start+0x144>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	e000      	b.n	80043d2 <HAL_ADC_Start+0x146>
 80043d0:	4b0e      	ldr	r3, [pc, #56]	; (800440c <HAL_ADC_Start+0x180>)
 80043d2:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	68db      	ldr	r3, [r3, #12]
 80043d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d00f      	beq.n	8004400 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043e4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80043e8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	655a      	str	r2, [r3, #84]	; 0x54
 80043f0:	e006      	b.n	8004400 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2200      	movs	r2, #0
 80043f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80043fa:	e001      	b.n	8004400 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80043fc:	2302      	movs	r3, #2
 80043fe:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004400:	7dfb      	ldrb	r3, [r7, #23]
}
 8004402:	4618      	mov	r0, r3
 8004404:	3718      	adds	r7, #24
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}
 800440a:	bf00      	nop
 800440c:	40022000 	.word	0x40022000
 8004410:	40022100 	.word	0x40022100
 8004414:	40022300 	.word	0x40022300
 8004418:	58026300 	.word	0x58026300
 800441c:	fffff0fe 	.word	0xfffff0fe

08004420 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b088      	sub	sp, #32
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
 8004428:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a72      	ldr	r2, [pc, #456]	; (80045f8 <HAL_ADC_PollForConversion+0x1d8>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d004      	beq.n	800443e <HAL_ADC_PollForConversion+0x1e>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a70      	ldr	r2, [pc, #448]	; (80045fc <HAL_ADC_PollForConversion+0x1dc>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d101      	bne.n	8004442 <HAL_ADC_PollForConversion+0x22>
 800443e:	4b70      	ldr	r3, [pc, #448]	; (8004600 <HAL_ADC_PollForConversion+0x1e0>)
 8004440:	e000      	b.n	8004444 <HAL_ADC_PollForConversion+0x24>
 8004442:	4b70      	ldr	r3, [pc, #448]	; (8004604 <HAL_ADC_PollForConversion+0x1e4>)
 8004444:	4618      	mov	r0, r3
 8004446:	f7ff fcb3 	bl	8003db0 <LL_ADC_GetMultimode>
 800444a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	691b      	ldr	r3, [r3, #16]
 8004450:	2b08      	cmp	r3, #8
 8004452:	d102      	bne.n	800445a <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8004454:	2308      	movs	r3, #8
 8004456:	61fb      	str	r3, [r7, #28]
 8004458:	e037      	b.n	80044ca <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d005      	beq.n	800446c <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	2b05      	cmp	r3, #5
 8004464:	d002      	beq.n	800446c <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	2b09      	cmp	r3, #9
 800446a:	d111      	bne.n	8004490 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	68db      	ldr	r3, [r3, #12]
 8004472:	f003 0301 	and.w	r3, r3, #1
 8004476:	2b00      	cmp	r3, #0
 8004478:	d007      	beq.n	800448a <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800447e:	f043 0220 	orr.w	r2, r3, #32
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	e0b1      	b.n	80045ee <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800448a:	2304      	movs	r3, #4
 800448c:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 800448e:	e01c      	b.n	80044ca <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a58      	ldr	r2, [pc, #352]	; (80045f8 <HAL_ADC_PollForConversion+0x1d8>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d004      	beq.n	80044a4 <HAL_ADC_PollForConversion+0x84>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a57      	ldr	r2, [pc, #348]	; (80045fc <HAL_ADC_PollForConversion+0x1dc>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d101      	bne.n	80044a8 <HAL_ADC_PollForConversion+0x88>
 80044a4:	4b56      	ldr	r3, [pc, #344]	; (8004600 <HAL_ADC_PollForConversion+0x1e0>)
 80044a6:	e000      	b.n	80044aa <HAL_ADC_PollForConversion+0x8a>
 80044a8:	4b56      	ldr	r3, [pc, #344]	; (8004604 <HAL_ADC_PollForConversion+0x1e4>)
 80044aa:	4618      	mov	r0, r3
 80044ac:	f7ff fc8e 	bl	8003dcc <LL_ADC_GetMultiDMATransfer>
 80044b0:	4603      	mov	r3, r0
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d007      	beq.n	80044c6 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044ba:	f043 0220 	orr.w	r2, r3, #32
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	e093      	b.n	80045ee <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80044c6:	2304      	movs	r3, #4
 80044c8:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80044ca:	f7ff fb1f 	bl	8003b0c <HAL_GetTick>
 80044ce:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80044d0:	e021      	b.n	8004516 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044d8:	d01d      	beq.n	8004516 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80044da:	f7ff fb17 	bl	8003b0c <HAL_GetTick>
 80044de:	4602      	mov	r2, r0
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	1ad3      	subs	r3, r2, r3
 80044e4:	683a      	ldr	r2, [r7, #0]
 80044e6:	429a      	cmp	r2, r3
 80044e8:	d302      	bcc.n	80044f0 <HAL_ADC_PollForConversion+0xd0>
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d112      	bne.n	8004516 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	69fb      	ldr	r3, [r7, #28]
 80044f8:	4013      	ands	r3, r2
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d10b      	bne.n	8004516 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004502:	f043 0204 	orr.w	r2, r3, #4
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2200      	movs	r2, #0
 800450e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8004512:	2303      	movs	r3, #3
 8004514:	e06b      	b.n	80045ee <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	69fb      	ldr	r3, [r7, #28]
 800451e:	4013      	ands	r3, r2
 8004520:	2b00      	cmp	r3, #0
 8004522:	d0d6      	beq.n	80044d2 <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004528:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4618      	mov	r0, r3
 8004536:	f7ff fbad 	bl	8003c94 <LL_ADC_REG_IsTriggerSourceSWStart>
 800453a:	4603      	mov	r3, r0
 800453c:	2b00      	cmp	r3, #0
 800453e:	d01c      	beq.n	800457a <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	7d5b      	ldrb	r3, [r3, #21]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d118      	bne.n	800457a <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f003 0308 	and.w	r3, r3, #8
 8004552:	2b08      	cmp	r3, #8
 8004554:	d111      	bne.n	800457a <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800455a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004566:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800456a:	2b00      	cmp	r3, #0
 800456c:	d105      	bne.n	800457a <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004572:	f043 0201 	orr.w	r2, r3, #1
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a1f      	ldr	r2, [pc, #124]	; (80045fc <HAL_ADC_PollForConversion+0x1dc>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d002      	beq.n	800458a <HAL_ADC_PollForConversion+0x16a>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	e000      	b.n	800458c <HAL_ADC_PollForConversion+0x16c>
 800458a:	4b1b      	ldr	r3, [pc, #108]	; (80045f8 <HAL_ADC_PollForConversion+0x1d8>)
 800458c:	687a      	ldr	r2, [r7, #4]
 800458e:	6812      	ldr	r2, [r2, #0]
 8004590:	4293      	cmp	r3, r2
 8004592:	d008      	beq.n	80045a6 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d005      	beq.n	80045a6 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	2b05      	cmp	r3, #5
 800459e:	d002      	beq.n	80045a6 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	2b09      	cmp	r3, #9
 80045a4:	d104      	bne.n	80045b0 <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	68db      	ldr	r3, [r3, #12]
 80045ac:	61bb      	str	r3, [r7, #24]
 80045ae:	e00c      	b.n	80045ca <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a11      	ldr	r2, [pc, #68]	; (80045fc <HAL_ADC_PollForConversion+0x1dc>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d002      	beq.n	80045c0 <HAL_ADC_PollForConversion+0x1a0>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	e000      	b.n	80045c2 <HAL_ADC_PollForConversion+0x1a2>
 80045c0:	4b0d      	ldr	r3, [pc, #52]	; (80045f8 <HAL_ADC_PollForConversion+0x1d8>)
 80045c2:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	68db      	ldr	r3, [r3, #12]
 80045c8:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80045ca:	69fb      	ldr	r3, [r7, #28]
 80045cc:	2b08      	cmp	r3, #8
 80045ce:	d104      	bne.n	80045da <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	2208      	movs	r2, #8
 80045d6:	601a      	str	r2, [r3, #0]
 80045d8:	e008      	b.n	80045ec <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80045da:	69bb      	ldr	r3, [r7, #24]
 80045dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d103      	bne.n	80045ec <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	220c      	movs	r2, #12
 80045ea:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80045ec:	2300      	movs	r3, #0
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3720      	adds	r7, #32
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}
 80045f6:	bf00      	nop
 80045f8:	40022000 	.word	0x40022000
 80045fc:	40022100 	.word	0x40022100
 8004600:	40022300 	.word	0x40022300
 8004604:	58026300 	.word	0x58026300

08004608 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8004608:	b480      	push	{r7}
 800460a:	b083      	sub	sp, #12
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8004616:	4618      	mov	r0, r3
 8004618:	370c      	adds	r7, #12
 800461a:	46bd      	mov	sp, r7
 800461c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004620:	4770      	bx	lr
	...

08004624 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004624:	b590      	push	{r4, r7, lr}
 8004626:	b0a1      	sub	sp, #132	; 0x84
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
 800462c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800462e:	2300      	movs	r3, #0
 8004630:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8004634:	2300      	movs	r3, #0
 8004636:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	68db      	ldr	r3, [r3, #12]
 800463c:	4a9d      	ldr	r2, [pc, #628]	; (80048b4 <HAL_ADC_ConfigChannel+0x290>)
 800463e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004646:	2b01      	cmp	r3, #1
 8004648:	d101      	bne.n	800464e <HAL_ADC_ConfigChannel+0x2a>
 800464a:	2302      	movs	r3, #2
 800464c:	e321      	b.n	8004c92 <HAL_ADC_ConfigChannel+0x66e>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2201      	movs	r2, #1
 8004652:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4618      	mov	r0, r3
 800465c:	f7ff fc4e 	bl	8003efc <LL_ADC_REG_IsConversionOngoing>
 8004660:	4603      	mov	r3, r0
 8004662:	2b00      	cmp	r3, #0
 8004664:	f040 8306 	bne.w	8004c74 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004670:	2b00      	cmp	r3, #0
 8004672:	d108      	bne.n	8004686 <HAL_ADC_ConfigChannel+0x62>
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	0e9b      	lsrs	r3, r3, #26
 800467a:	f003 031f 	and.w	r3, r3, #31
 800467e:	2201      	movs	r2, #1
 8004680:	fa02 f303 	lsl.w	r3, r2, r3
 8004684:	e016      	b.n	80046b4 <HAL_ADC_ConfigChannel+0x90>
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800468c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800468e:	fa93 f3a3 	rbit	r3, r3
 8004692:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004694:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004696:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004698:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800469a:	2b00      	cmp	r3, #0
 800469c:	d101      	bne.n	80046a2 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 800469e:	2320      	movs	r3, #32
 80046a0:	e003      	b.n	80046aa <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 80046a2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80046a4:	fab3 f383 	clz	r3, r3
 80046a8:	b2db      	uxtb	r3, r3
 80046aa:	f003 031f 	and.w	r3, r3, #31
 80046ae:	2201      	movs	r2, #1
 80046b0:	fa02 f303 	lsl.w	r3, r2, r3
 80046b4:	687a      	ldr	r2, [r7, #4]
 80046b6:	6812      	ldr	r2, [r2, #0]
 80046b8:	69d1      	ldr	r1, [r2, #28]
 80046ba:	687a      	ldr	r2, [r7, #4]
 80046bc:	6812      	ldr	r2, [r2, #0]
 80046be:	430b      	orrs	r3, r1
 80046c0:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6818      	ldr	r0, [r3, #0]
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	6859      	ldr	r1, [r3, #4]
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	461a      	mov	r2, r3
 80046d0:	f7ff faf3 	bl	8003cba <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4618      	mov	r0, r3
 80046da:	f7ff fc0f 	bl	8003efc <LL_ADC_REG_IsConversionOngoing>
 80046de:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4618      	mov	r0, r3
 80046e6:	f7ff fc1c 	bl	8003f22 <LL_ADC_INJ_IsConversionOngoing>
 80046ea:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80046ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	f040 80b3 	bne.w	800485a <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80046f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	f040 80af 	bne.w	800485a <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6818      	ldr	r0, [r3, #0]
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	6819      	ldr	r1, [r3, #0]
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	461a      	mov	r2, r3
 800470a:	f7ff fb02 	bl	8003d12 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800470e:	4b6a      	ldr	r3, [pc, #424]	; (80048b8 <HAL_ADC_ConfigChannel+0x294>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004716:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800471a:	d10b      	bne.n	8004734 <HAL_ADC_ConfigChannel+0x110>
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	695a      	ldr	r2, [r3, #20]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	68db      	ldr	r3, [r3, #12]
 8004726:	089b      	lsrs	r3, r3, #2
 8004728:	f003 0307 	and.w	r3, r3, #7
 800472c:	005b      	lsls	r3, r3, #1
 800472e:	fa02 f303 	lsl.w	r3, r2, r3
 8004732:	e01d      	b.n	8004770 <HAL_ADC_ConfigChannel+0x14c>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	68db      	ldr	r3, [r3, #12]
 800473a:	f003 0310 	and.w	r3, r3, #16
 800473e:	2b00      	cmp	r3, #0
 8004740:	d10b      	bne.n	800475a <HAL_ADC_ConfigChannel+0x136>
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	695a      	ldr	r2, [r3, #20]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	68db      	ldr	r3, [r3, #12]
 800474c:	089b      	lsrs	r3, r3, #2
 800474e:	f003 0307 	and.w	r3, r3, #7
 8004752:	005b      	lsls	r3, r3, #1
 8004754:	fa02 f303 	lsl.w	r3, r2, r3
 8004758:	e00a      	b.n	8004770 <HAL_ADC_ConfigChannel+0x14c>
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	695a      	ldr	r2, [r3, #20]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	68db      	ldr	r3, [r3, #12]
 8004764:	089b      	lsrs	r3, r3, #2
 8004766:	f003 0304 	and.w	r3, r3, #4
 800476a:	005b      	lsls	r3, r3, #1
 800476c:	fa02 f303 	lsl.w	r3, r2, r3
 8004770:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	691b      	ldr	r3, [r3, #16]
 8004776:	2b04      	cmp	r3, #4
 8004778:	d027      	beq.n	80047ca <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6818      	ldr	r0, [r3, #0]
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	6919      	ldr	r1, [r3, #16]
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	681a      	ldr	r2, [r3, #0]
 8004786:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004788:	f7ff fa30 	bl	8003bec <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6818      	ldr	r0, [r3, #0]
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	6919      	ldr	r1, [r3, #16]
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	7e5b      	ldrb	r3, [r3, #25]
 8004798:	2b01      	cmp	r3, #1
 800479a:	d102      	bne.n	80047a2 <HAL_ADC_ConfigChannel+0x17e>
 800479c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80047a0:	e000      	b.n	80047a4 <HAL_ADC_ConfigChannel+0x180>
 80047a2:	2300      	movs	r3, #0
 80047a4:	461a      	mov	r2, r3
 80047a6:	f7ff fa5a 	bl	8003c5e <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6818      	ldr	r0, [r3, #0]
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	6919      	ldr	r1, [r3, #16]
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	7e1b      	ldrb	r3, [r3, #24]
 80047b6:	2b01      	cmp	r3, #1
 80047b8:	d102      	bne.n	80047c0 <HAL_ADC_ConfigChannel+0x19c>
 80047ba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80047be:	e000      	b.n	80047c2 <HAL_ADC_ConfigChannel+0x19e>
 80047c0:	2300      	movs	r3, #0
 80047c2:	461a      	mov	r2, r3
 80047c4:	f7ff fa32 	bl	8003c2c <LL_ADC_SetDataRightShift>
 80047c8:	e047      	b.n	800485a <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047d0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	069b      	lsls	r3, r3, #26
 80047da:	429a      	cmp	r2, r3
 80047dc:	d107      	bne.n	80047ee <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80047ec:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80047f4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	069b      	lsls	r3, r3, #26
 80047fe:	429a      	cmp	r2, r3
 8004800:	d107      	bne.n	8004812 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004810:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004818:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	069b      	lsls	r3, r3, #26
 8004822:	429a      	cmp	r2, r3
 8004824:	d107      	bne.n	8004836 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004834:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800483c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	069b      	lsls	r3, r3, #26
 8004846:	429a      	cmp	r2, r3
 8004848:	d107      	bne.n	800485a <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004858:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4618      	mov	r0, r3
 8004860:	f7ff fb24 	bl	8003eac <LL_ADC_IsEnabled>
 8004864:	4603      	mov	r3, r0
 8004866:	2b00      	cmp	r3, #0
 8004868:	f040 820d 	bne.w	8004c86 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6818      	ldr	r0, [r3, #0]
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	6819      	ldr	r1, [r3, #0]
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	68db      	ldr	r3, [r3, #12]
 8004878:	461a      	mov	r2, r3
 800487a:	f7ff fa75 	bl	8003d68 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	68db      	ldr	r3, [r3, #12]
 8004882:	4a0c      	ldr	r2, [pc, #48]	; (80048b4 <HAL_ADC_ConfigChannel+0x290>)
 8004884:	4293      	cmp	r3, r2
 8004886:	f040 8133 	bne.w	8004af0 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004896:	2b00      	cmp	r3, #0
 8004898:	d110      	bne.n	80048bc <HAL_ADC_ConfigChannel+0x298>
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	0e9b      	lsrs	r3, r3, #26
 80048a0:	3301      	adds	r3, #1
 80048a2:	f003 031f 	and.w	r3, r3, #31
 80048a6:	2b09      	cmp	r3, #9
 80048a8:	bf94      	ite	ls
 80048aa:	2301      	movls	r3, #1
 80048ac:	2300      	movhi	r3, #0
 80048ae:	b2db      	uxtb	r3, r3
 80048b0:	e01e      	b.n	80048f0 <HAL_ADC_ConfigChannel+0x2cc>
 80048b2:	bf00      	nop
 80048b4:	47ff0000 	.word	0x47ff0000
 80048b8:	5c001000 	.word	0x5c001000
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80048c4:	fa93 f3a3 	rbit	r3, r3
 80048c8:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80048ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048cc:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80048ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d101      	bne.n	80048d8 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 80048d4:	2320      	movs	r3, #32
 80048d6:	e003      	b.n	80048e0 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 80048d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048da:	fab3 f383 	clz	r3, r3
 80048de:	b2db      	uxtb	r3, r3
 80048e0:	3301      	adds	r3, #1
 80048e2:	f003 031f 	and.w	r3, r3, #31
 80048e6:	2b09      	cmp	r3, #9
 80048e8:	bf94      	ite	ls
 80048ea:	2301      	movls	r3, #1
 80048ec:	2300      	movhi	r3, #0
 80048ee:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d079      	beq.n	80049e8 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d107      	bne.n	8004910 <HAL_ADC_ConfigChannel+0x2ec>
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	0e9b      	lsrs	r3, r3, #26
 8004906:	3301      	adds	r3, #1
 8004908:	069b      	lsls	r3, r3, #26
 800490a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800490e:	e015      	b.n	800493c <HAL_ADC_ConfigChannel+0x318>
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004916:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004918:	fa93 f3a3 	rbit	r3, r3
 800491c:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800491e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004920:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8004922:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004924:	2b00      	cmp	r3, #0
 8004926:	d101      	bne.n	800492c <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8004928:	2320      	movs	r3, #32
 800492a:	e003      	b.n	8004934 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 800492c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800492e:	fab3 f383 	clz	r3, r3
 8004932:	b2db      	uxtb	r3, r3
 8004934:	3301      	adds	r3, #1
 8004936:	069b      	lsls	r3, r3, #26
 8004938:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004944:	2b00      	cmp	r3, #0
 8004946:	d109      	bne.n	800495c <HAL_ADC_ConfigChannel+0x338>
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	0e9b      	lsrs	r3, r3, #26
 800494e:	3301      	adds	r3, #1
 8004950:	f003 031f 	and.w	r3, r3, #31
 8004954:	2101      	movs	r1, #1
 8004956:	fa01 f303 	lsl.w	r3, r1, r3
 800495a:	e017      	b.n	800498c <HAL_ADC_ConfigChannel+0x368>
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004962:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004964:	fa93 f3a3 	rbit	r3, r3
 8004968:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800496a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800496c:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800496e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004970:	2b00      	cmp	r3, #0
 8004972:	d101      	bne.n	8004978 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8004974:	2320      	movs	r3, #32
 8004976:	e003      	b.n	8004980 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8004978:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800497a:	fab3 f383 	clz	r3, r3
 800497e:	b2db      	uxtb	r3, r3
 8004980:	3301      	adds	r3, #1
 8004982:	f003 031f 	and.w	r3, r3, #31
 8004986:	2101      	movs	r1, #1
 8004988:	fa01 f303 	lsl.w	r3, r1, r3
 800498c:	ea42 0103 	orr.w	r1, r2, r3
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004998:	2b00      	cmp	r3, #0
 800499a:	d10a      	bne.n	80049b2 <HAL_ADC_ConfigChannel+0x38e>
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	0e9b      	lsrs	r3, r3, #26
 80049a2:	3301      	adds	r3, #1
 80049a4:	f003 021f 	and.w	r2, r3, #31
 80049a8:	4613      	mov	r3, r2
 80049aa:	005b      	lsls	r3, r3, #1
 80049ac:	4413      	add	r3, r2
 80049ae:	051b      	lsls	r3, r3, #20
 80049b0:	e018      	b.n	80049e4 <HAL_ADC_ConfigChannel+0x3c0>
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049ba:	fa93 f3a3 	rbit	r3, r3
 80049be:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80049c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049c2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80049c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d101      	bne.n	80049ce <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 80049ca:	2320      	movs	r3, #32
 80049cc:	e003      	b.n	80049d6 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 80049ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049d0:	fab3 f383 	clz	r3, r3
 80049d4:	b2db      	uxtb	r3, r3
 80049d6:	3301      	adds	r3, #1
 80049d8:	f003 021f 	and.w	r2, r3, #31
 80049dc:	4613      	mov	r3, r2
 80049de:	005b      	lsls	r3, r3, #1
 80049e0:	4413      	add	r3, r2
 80049e2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80049e4:	430b      	orrs	r3, r1
 80049e6:	e07e      	b.n	8004ae6 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d107      	bne.n	8004a04 <HAL_ADC_ConfigChannel+0x3e0>
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	0e9b      	lsrs	r3, r3, #26
 80049fa:	3301      	adds	r3, #1
 80049fc:	069b      	lsls	r3, r3, #26
 80049fe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004a02:	e015      	b.n	8004a30 <HAL_ADC_ConfigChannel+0x40c>
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a0c:	fa93 f3a3 	rbit	r3, r3
 8004a10:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8004a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a14:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8004a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d101      	bne.n	8004a20 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8004a1c:	2320      	movs	r3, #32
 8004a1e:	e003      	b.n	8004a28 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8004a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a22:	fab3 f383 	clz	r3, r3
 8004a26:	b2db      	uxtb	r3, r3
 8004a28:	3301      	adds	r3, #1
 8004a2a:	069b      	lsls	r3, r3, #26
 8004a2c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d109      	bne.n	8004a50 <HAL_ADC_ConfigChannel+0x42c>
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	0e9b      	lsrs	r3, r3, #26
 8004a42:	3301      	adds	r3, #1
 8004a44:	f003 031f 	and.w	r3, r3, #31
 8004a48:	2101      	movs	r1, #1
 8004a4a:	fa01 f303 	lsl.w	r3, r1, r3
 8004a4e:	e017      	b.n	8004a80 <HAL_ADC_ConfigChannel+0x45c>
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a56:	69fb      	ldr	r3, [r7, #28]
 8004a58:	fa93 f3a3 	rbit	r3, r3
 8004a5c:	61bb      	str	r3, [r7, #24]
  return result;
 8004a5e:	69bb      	ldr	r3, [r7, #24]
 8004a60:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004a62:	6a3b      	ldr	r3, [r7, #32]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d101      	bne.n	8004a6c <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8004a68:	2320      	movs	r3, #32
 8004a6a:	e003      	b.n	8004a74 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8004a6c:	6a3b      	ldr	r3, [r7, #32]
 8004a6e:	fab3 f383 	clz	r3, r3
 8004a72:	b2db      	uxtb	r3, r3
 8004a74:	3301      	adds	r3, #1
 8004a76:	f003 031f 	and.w	r3, r3, #31
 8004a7a:	2101      	movs	r1, #1
 8004a7c:	fa01 f303 	lsl.w	r3, r1, r3
 8004a80:	ea42 0103 	orr.w	r1, r2, r3
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d10d      	bne.n	8004aac <HAL_ADC_ConfigChannel+0x488>
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	0e9b      	lsrs	r3, r3, #26
 8004a96:	3301      	adds	r3, #1
 8004a98:	f003 021f 	and.w	r2, r3, #31
 8004a9c:	4613      	mov	r3, r2
 8004a9e:	005b      	lsls	r3, r3, #1
 8004aa0:	4413      	add	r3, r2
 8004aa2:	3b1e      	subs	r3, #30
 8004aa4:	051b      	lsls	r3, r3, #20
 8004aa6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004aaa:	e01b      	b.n	8004ae4 <HAL_ADC_ConfigChannel+0x4c0>
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	fa93 f3a3 	rbit	r3, r3
 8004ab8:	60fb      	str	r3, [r7, #12]
  return result;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d101      	bne.n	8004ac8 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8004ac4:	2320      	movs	r3, #32
 8004ac6:	e003      	b.n	8004ad0 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	fab3 f383 	clz	r3, r3
 8004ace:	b2db      	uxtb	r3, r3
 8004ad0:	3301      	adds	r3, #1
 8004ad2:	f003 021f 	and.w	r2, r3, #31
 8004ad6:	4613      	mov	r3, r2
 8004ad8:	005b      	lsls	r3, r3, #1
 8004ada:	4413      	add	r3, r2
 8004adc:	3b1e      	subs	r3, #30
 8004ade:	051b      	lsls	r3, r3, #20
 8004ae0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004ae4:	430b      	orrs	r3, r1
 8004ae6:	683a      	ldr	r2, [r7, #0]
 8004ae8:	6892      	ldr	r2, [r2, #8]
 8004aea:	4619      	mov	r1, r3
 8004aec:	f7ff f911 	bl	8003d12 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	f280 80c6 	bge.w	8004c86 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a67      	ldr	r2, [pc, #412]	; (8004c9c <HAL_ADC_ConfigChannel+0x678>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d004      	beq.n	8004b0e <HAL_ADC_ConfigChannel+0x4ea>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a65      	ldr	r2, [pc, #404]	; (8004ca0 <HAL_ADC_ConfigChannel+0x67c>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d101      	bne.n	8004b12 <HAL_ADC_ConfigChannel+0x4ee>
 8004b0e:	4b65      	ldr	r3, [pc, #404]	; (8004ca4 <HAL_ADC_ConfigChannel+0x680>)
 8004b10:	e000      	b.n	8004b14 <HAL_ADC_ConfigChannel+0x4f0>
 8004b12:	4b65      	ldr	r3, [pc, #404]	; (8004ca8 <HAL_ADC_ConfigChannel+0x684>)
 8004b14:	4618      	mov	r0, r3
 8004b16:	f7ff f85b 	bl	8003bd0 <LL_ADC_GetCommonPathInternalCh>
 8004b1a:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a5e      	ldr	r2, [pc, #376]	; (8004c9c <HAL_ADC_ConfigChannel+0x678>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d004      	beq.n	8004b30 <HAL_ADC_ConfigChannel+0x50c>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a5d      	ldr	r2, [pc, #372]	; (8004ca0 <HAL_ADC_ConfigChannel+0x67c>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d10e      	bne.n	8004b4e <HAL_ADC_ConfigChannel+0x52a>
 8004b30:	485a      	ldr	r0, [pc, #360]	; (8004c9c <HAL_ADC_ConfigChannel+0x678>)
 8004b32:	f7ff f9bb 	bl	8003eac <LL_ADC_IsEnabled>
 8004b36:	4604      	mov	r4, r0
 8004b38:	4859      	ldr	r0, [pc, #356]	; (8004ca0 <HAL_ADC_ConfigChannel+0x67c>)
 8004b3a:	f7ff f9b7 	bl	8003eac <LL_ADC_IsEnabled>
 8004b3e:	4603      	mov	r3, r0
 8004b40:	4323      	orrs	r3, r4
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	bf0c      	ite	eq
 8004b46:	2301      	moveq	r3, #1
 8004b48:	2300      	movne	r3, #0
 8004b4a:	b2db      	uxtb	r3, r3
 8004b4c:	e008      	b.n	8004b60 <HAL_ADC_ConfigChannel+0x53c>
 8004b4e:	4857      	ldr	r0, [pc, #348]	; (8004cac <HAL_ADC_ConfigChannel+0x688>)
 8004b50:	f7ff f9ac 	bl	8003eac <LL_ADC_IsEnabled>
 8004b54:	4603      	mov	r3, r0
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	bf0c      	ite	eq
 8004b5a:	2301      	moveq	r3, #1
 8004b5c:	2300      	movne	r3, #0
 8004b5e:	b2db      	uxtb	r3, r3
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d07d      	beq.n	8004c60 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a51      	ldr	r2, [pc, #324]	; (8004cb0 <HAL_ADC_ConfigChannel+0x68c>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d130      	bne.n	8004bd0 <HAL_ADC_ConfigChannel+0x5ac>
 8004b6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b70:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d12b      	bne.n	8004bd0 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a4b      	ldr	r2, [pc, #300]	; (8004cac <HAL_ADC_ConfigChannel+0x688>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	f040 8081 	bne.w	8004c86 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a44      	ldr	r2, [pc, #272]	; (8004c9c <HAL_ADC_ConfigChannel+0x678>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d004      	beq.n	8004b98 <HAL_ADC_ConfigChannel+0x574>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a43      	ldr	r2, [pc, #268]	; (8004ca0 <HAL_ADC_ConfigChannel+0x67c>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d101      	bne.n	8004b9c <HAL_ADC_ConfigChannel+0x578>
 8004b98:	4a42      	ldr	r2, [pc, #264]	; (8004ca4 <HAL_ADC_ConfigChannel+0x680>)
 8004b9a:	e000      	b.n	8004b9e <HAL_ADC_ConfigChannel+0x57a>
 8004b9c:	4a42      	ldr	r2, [pc, #264]	; (8004ca8 <HAL_ADC_ConfigChannel+0x684>)
 8004b9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ba0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004ba4:	4619      	mov	r1, r3
 8004ba6:	4610      	mov	r0, r2
 8004ba8:	f7fe ffff 	bl	8003baa <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004bac:	4b41      	ldr	r3, [pc, #260]	; (8004cb4 <HAL_ADC_ConfigChannel+0x690>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	099b      	lsrs	r3, r3, #6
 8004bb2:	4a41      	ldr	r2, [pc, #260]	; (8004cb8 <HAL_ADC_ConfigChannel+0x694>)
 8004bb4:	fba2 2303 	umull	r2, r3, r2, r3
 8004bb8:	099b      	lsrs	r3, r3, #6
 8004bba:	3301      	adds	r3, #1
 8004bbc:	005b      	lsls	r3, r3, #1
 8004bbe:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004bc0:	e002      	b.n	8004bc8 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	3b01      	subs	r3, #1
 8004bc6:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d1f9      	bne.n	8004bc2 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004bce:	e05a      	b.n	8004c86 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a39      	ldr	r2, [pc, #228]	; (8004cbc <HAL_ADC_ConfigChannel+0x698>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d11e      	bne.n	8004c18 <HAL_ADC_ConfigChannel+0x5f4>
 8004bda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bdc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d119      	bne.n	8004c18 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a30      	ldr	r2, [pc, #192]	; (8004cac <HAL_ADC_ConfigChannel+0x688>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d14b      	bne.n	8004c86 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a2a      	ldr	r2, [pc, #168]	; (8004c9c <HAL_ADC_ConfigChannel+0x678>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d004      	beq.n	8004c02 <HAL_ADC_ConfigChannel+0x5de>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a28      	ldr	r2, [pc, #160]	; (8004ca0 <HAL_ADC_ConfigChannel+0x67c>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d101      	bne.n	8004c06 <HAL_ADC_ConfigChannel+0x5e2>
 8004c02:	4a28      	ldr	r2, [pc, #160]	; (8004ca4 <HAL_ADC_ConfigChannel+0x680>)
 8004c04:	e000      	b.n	8004c08 <HAL_ADC_ConfigChannel+0x5e4>
 8004c06:	4a28      	ldr	r2, [pc, #160]	; (8004ca8 <HAL_ADC_ConfigChannel+0x684>)
 8004c08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c0e:	4619      	mov	r1, r3
 8004c10:	4610      	mov	r0, r2
 8004c12:	f7fe ffca 	bl	8003baa <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004c16:	e036      	b.n	8004c86 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a28      	ldr	r2, [pc, #160]	; (8004cc0 <HAL_ADC_ConfigChannel+0x69c>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d131      	bne.n	8004c86 <HAL_ADC_ConfigChannel+0x662>
 8004c22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c24:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d12c      	bne.n	8004c86 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a1e      	ldr	r2, [pc, #120]	; (8004cac <HAL_ADC_ConfigChannel+0x688>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d127      	bne.n	8004c86 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a18      	ldr	r2, [pc, #96]	; (8004c9c <HAL_ADC_ConfigChannel+0x678>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d004      	beq.n	8004c4a <HAL_ADC_ConfigChannel+0x626>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a16      	ldr	r2, [pc, #88]	; (8004ca0 <HAL_ADC_ConfigChannel+0x67c>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d101      	bne.n	8004c4e <HAL_ADC_ConfigChannel+0x62a>
 8004c4a:	4a16      	ldr	r2, [pc, #88]	; (8004ca4 <HAL_ADC_ConfigChannel+0x680>)
 8004c4c:	e000      	b.n	8004c50 <HAL_ADC_ConfigChannel+0x62c>
 8004c4e:	4a16      	ldr	r2, [pc, #88]	; (8004ca8 <HAL_ADC_ConfigChannel+0x684>)
 8004c50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c52:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004c56:	4619      	mov	r1, r3
 8004c58:	4610      	mov	r0, r2
 8004c5a:	f7fe ffa6 	bl	8003baa <LL_ADC_SetCommonPathInternalCh>
 8004c5e:	e012      	b.n	8004c86 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c64:	f043 0220 	orr.w	r2, r3, #32
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8004c72:	e008      	b.n	8004c86 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c78:	f043 0220 	orr.w	r2, r3, #32
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004c80:	2301      	movs	r3, #1
 8004c82:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004c8e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	3784      	adds	r7, #132	; 0x84
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd90      	pop	{r4, r7, pc}
 8004c9a:	bf00      	nop
 8004c9c:	40022000 	.word	0x40022000
 8004ca0:	40022100 	.word	0x40022100
 8004ca4:	40022300 	.word	0x40022300
 8004ca8:	58026300 	.word	0x58026300
 8004cac:	58026000 	.word	0x58026000
 8004cb0:	cb840000 	.word	0xcb840000
 8004cb4:	24000000 	.word	0x24000000
 8004cb8:	053e2d63 	.word	0x053e2d63
 8004cbc:	c7520000 	.word	0xc7520000
 8004cc0:	cfb80000 	.word	0xcfb80000

08004cc4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b084      	sub	sp, #16
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	f7ff f8eb 	bl	8003eac <LL_ADC_IsEnabled>
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d16e      	bne.n	8004dba <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	689a      	ldr	r2, [r3, #8]
 8004ce2:	4b38      	ldr	r3, [pc, #224]	; (8004dc4 <ADC_Enable+0x100>)
 8004ce4:	4013      	ands	r3, r2
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d00d      	beq.n	8004d06 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cee:	f043 0210 	orr.w	r2, r3, #16
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cfa:	f043 0201 	orr.w	r2, r3, #1
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	e05a      	b.n	8004dbc <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f7ff f8ba 	bl	8003e84 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004d10:	f7fe fefc 	bl	8003b0c <HAL_GetTick>
 8004d14:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a2b      	ldr	r2, [pc, #172]	; (8004dc8 <ADC_Enable+0x104>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d004      	beq.n	8004d2a <ADC_Enable+0x66>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a29      	ldr	r2, [pc, #164]	; (8004dcc <ADC_Enable+0x108>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d101      	bne.n	8004d2e <ADC_Enable+0x6a>
 8004d2a:	4b29      	ldr	r3, [pc, #164]	; (8004dd0 <ADC_Enable+0x10c>)
 8004d2c:	e000      	b.n	8004d30 <ADC_Enable+0x6c>
 8004d2e:	4b29      	ldr	r3, [pc, #164]	; (8004dd4 <ADC_Enable+0x110>)
 8004d30:	4618      	mov	r0, r3
 8004d32:	f7ff f83d 	bl	8003db0 <LL_ADC_GetMultimode>
 8004d36:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a23      	ldr	r2, [pc, #140]	; (8004dcc <ADC_Enable+0x108>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d002      	beq.n	8004d48 <ADC_Enable+0x84>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	e000      	b.n	8004d4a <ADC_Enable+0x86>
 8004d48:	4b1f      	ldr	r3, [pc, #124]	; (8004dc8 <ADC_Enable+0x104>)
 8004d4a:	687a      	ldr	r2, [r7, #4]
 8004d4c:	6812      	ldr	r2, [r2, #0]
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d02c      	beq.n	8004dac <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d130      	bne.n	8004dba <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004d58:	e028      	b.n	8004dac <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4618      	mov	r0, r3
 8004d60:	f7ff f8a4 	bl	8003eac <LL_ADC_IsEnabled>
 8004d64:	4603      	mov	r3, r0
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d104      	bne.n	8004d74 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f7ff f888 	bl	8003e84 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004d74:	f7fe feca 	bl	8003b0c <HAL_GetTick>
 8004d78:	4602      	mov	r2, r0
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	1ad3      	subs	r3, r2, r3
 8004d7e:	2b02      	cmp	r3, #2
 8004d80:	d914      	bls.n	8004dac <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f003 0301 	and.w	r3, r3, #1
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	d00d      	beq.n	8004dac <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d94:	f043 0210 	orr.w	r2, r3, #16
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004da0:	f043 0201 	orr.w	r2, r3, #1
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8004da8:	2301      	movs	r3, #1
 8004daa:	e007      	b.n	8004dbc <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f003 0301 	and.w	r3, r3, #1
 8004db6:	2b01      	cmp	r3, #1
 8004db8:	d1cf      	bne.n	8004d5a <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004dba:	2300      	movs	r3, #0
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	3710      	adds	r7, #16
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}
 8004dc4:	8000003f 	.word	0x8000003f
 8004dc8:	40022000 	.word	0x40022000
 8004dcc:	40022100 	.word	0x40022100
 8004dd0:	40022300 	.word	0x40022300
 8004dd4:	58026300 	.word	0x58026300

08004dd8 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b084      	sub	sp, #16
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a7a      	ldr	r2, [pc, #488]	; (8004fd0 <ADC_ConfigureBoostMode+0x1f8>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d004      	beq.n	8004df4 <ADC_ConfigureBoostMode+0x1c>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a79      	ldr	r2, [pc, #484]	; (8004fd4 <ADC_ConfigureBoostMode+0x1fc>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d109      	bne.n	8004e08 <ADC_ConfigureBoostMode+0x30>
 8004df4:	4b78      	ldr	r3, [pc, #480]	; (8004fd8 <ADC_ConfigureBoostMode+0x200>)
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	bf14      	ite	ne
 8004e00:	2301      	movne	r3, #1
 8004e02:	2300      	moveq	r3, #0
 8004e04:	b2db      	uxtb	r3, r3
 8004e06:	e008      	b.n	8004e1a <ADC_ConfigureBoostMode+0x42>
 8004e08:	4b74      	ldr	r3, [pc, #464]	; (8004fdc <ADC_ConfigureBoostMode+0x204>)
 8004e0a:	689b      	ldr	r3, [r3, #8]
 8004e0c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	bf14      	ite	ne
 8004e14:	2301      	movne	r3, #1
 8004e16:	2300      	moveq	r3, #0
 8004e18:	b2db      	uxtb	r3, r3
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d01c      	beq.n	8004e58 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8004e1e:	f004 fc69 	bl	80096f4 <HAL_RCC_GetHCLKFreq>
 8004e22:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004e2c:	d010      	beq.n	8004e50 <ADC_ConfigureBoostMode+0x78>
 8004e2e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004e32:	d873      	bhi.n	8004f1c <ADC_ConfigureBoostMode+0x144>
 8004e34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e38:	d002      	beq.n	8004e40 <ADC_ConfigureBoostMode+0x68>
 8004e3a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004e3e:	d16d      	bne.n	8004f1c <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	0c1b      	lsrs	r3, r3, #16
 8004e46:	68fa      	ldr	r2, [r7, #12]
 8004e48:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e4c:	60fb      	str	r3, [r7, #12]
        break;
 8004e4e:	e068      	b.n	8004f22 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	089b      	lsrs	r3, r3, #2
 8004e54:	60fb      	str	r3, [r7, #12]
        break;
 8004e56:	e064      	b.n	8004f22 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004e58:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004e5c:	f04f 0100 	mov.w	r1, #0
 8004e60:	f005 fef0 	bl	800ac44 <HAL_RCCEx_GetPeriphCLKFreq>
 8004e64:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004e6e:	d051      	beq.n	8004f14 <ADC_ConfigureBoostMode+0x13c>
 8004e70:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004e74:	d854      	bhi.n	8004f20 <ADC_ConfigureBoostMode+0x148>
 8004e76:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004e7a:	d047      	beq.n	8004f0c <ADC_ConfigureBoostMode+0x134>
 8004e7c:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004e80:	d84e      	bhi.n	8004f20 <ADC_ConfigureBoostMode+0x148>
 8004e82:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004e86:	d03d      	beq.n	8004f04 <ADC_ConfigureBoostMode+0x12c>
 8004e88:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004e8c:	d848      	bhi.n	8004f20 <ADC_ConfigureBoostMode+0x148>
 8004e8e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e92:	d033      	beq.n	8004efc <ADC_ConfigureBoostMode+0x124>
 8004e94:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e98:	d842      	bhi.n	8004f20 <ADC_ConfigureBoostMode+0x148>
 8004e9a:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004e9e:	d029      	beq.n	8004ef4 <ADC_ConfigureBoostMode+0x11c>
 8004ea0:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004ea4:	d83c      	bhi.n	8004f20 <ADC_ConfigureBoostMode+0x148>
 8004ea6:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004eaa:	d01a      	beq.n	8004ee2 <ADC_ConfigureBoostMode+0x10a>
 8004eac:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004eb0:	d836      	bhi.n	8004f20 <ADC_ConfigureBoostMode+0x148>
 8004eb2:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004eb6:	d014      	beq.n	8004ee2 <ADC_ConfigureBoostMode+0x10a>
 8004eb8:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004ebc:	d830      	bhi.n	8004f20 <ADC_ConfigureBoostMode+0x148>
 8004ebe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ec2:	d00e      	beq.n	8004ee2 <ADC_ConfigureBoostMode+0x10a>
 8004ec4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ec8:	d82a      	bhi.n	8004f20 <ADC_ConfigureBoostMode+0x148>
 8004eca:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004ece:	d008      	beq.n	8004ee2 <ADC_ConfigureBoostMode+0x10a>
 8004ed0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004ed4:	d824      	bhi.n	8004f20 <ADC_ConfigureBoostMode+0x148>
 8004ed6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004eda:	d002      	beq.n	8004ee2 <ADC_ConfigureBoostMode+0x10a>
 8004edc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004ee0:	d11e      	bne.n	8004f20 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	0c9b      	lsrs	r3, r3, #18
 8004ee8:	005b      	lsls	r3, r3, #1
 8004eea:	68fa      	ldr	r2, [r7, #12]
 8004eec:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ef0:	60fb      	str	r3, [r7, #12]
        break;
 8004ef2:	e016      	b.n	8004f22 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	091b      	lsrs	r3, r3, #4
 8004ef8:	60fb      	str	r3, [r7, #12]
        break;
 8004efa:	e012      	b.n	8004f22 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	095b      	lsrs	r3, r3, #5
 8004f00:	60fb      	str	r3, [r7, #12]
        break;
 8004f02:	e00e      	b.n	8004f22 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	099b      	lsrs	r3, r3, #6
 8004f08:	60fb      	str	r3, [r7, #12]
        break;
 8004f0a:	e00a      	b.n	8004f22 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	09db      	lsrs	r3, r3, #7
 8004f10:	60fb      	str	r3, [r7, #12]
        break;
 8004f12:	e006      	b.n	8004f22 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	0a1b      	lsrs	r3, r3, #8
 8004f18:	60fb      	str	r3, [r7, #12]
        break;
 8004f1a:	e002      	b.n	8004f22 <ADC_ConfigureBoostMode+0x14a>
        break;
 8004f1c:	bf00      	nop
 8004f1e:	e000      	b.n	8004f22 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8004f20:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8004f22:	f7fe fe23 	bl	8003b6c <HAL_GetREVID>
 8004f26:	4603      	mov	r3, r0
 8004f28:	f241 0203 	movw	r2, #4099	; 0x1003
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d815      	bhi.n	8004f5c <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	4a2b      	ldr	r2, [pc, #172]	; (8004fe0 <ADC_ConfigureBoostMode+0x208>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d908      	bls.n	8004f4a <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	689a      	ldr	r2, [r3, #8]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f46:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004f48:	e03e      	b.n	8004fc8 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	689a      	ldr	r2, [r3, #8]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004f58:	609a      	str	r2, [r3, #8]
}
 8004f5a:	e035      	b.n	8004fc8 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	085b      	lsrs	r3, r3, #1
 8004f60:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	4a1f      	ldr	r2, [pc, #124]	; (8004fe4 <ADC_ConfigureBoostMode+0x20c>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d808      	bhi.n	8004f7c <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	689a      	ldr	r2, [r3, #8]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004f78:	609a      	str	r2, [r3, #8]
}
 8004f7a:	e025      	b.n	8004fc8 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	4a1a      	ldr	r2, [pc, #104]	; (8004fe8 <ADC_ConfigureBoostMode+0x210>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d80a      	bhi.n	8004f9a <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	689b      	ldr	r3, [r3, #8]
 8004f8a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f96:	609a      	str	r2, [r3, #8]
}
 8004f98:	e016      	b.n	8004fc8 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	4a13      	ldr	r2, [pc, #76]	; (8004fec <ADC_ConfigureBoostMode+0x214>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d80a      	bhi.n	8004fb8 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	689b      	ldr	r3, [r3, #8]
 8004fa8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fb4:	609a      	str	r2, [r3, #8]
}
 8004fb6:	e007      	b.n	8004fc8 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	689a      	ldr	r2, [r3, #8]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004fc6:	609a      	str	r2, [r3, #8]
}
 8004fc8:	bf00      	nop
 8004fca:	3710      	adds	r7, #16
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}
 8004fd0:	40022000 	.word	0x40022000
 8004fd4:	40022100 	.word	0x40022100
 8004fd8:	40022300 	.word	0x40022300
 8004fdc:	58026300 	.word	0x58026300
 8004fe0:	01312d00 	.word	0x01312d00
 8004fe4:	005f5e10 	.word	0x005f5e10
 8004fe8:	00bebc20 	.word	0x00bebc20
 8004fec:	017d7840 	.word	0x017d7840

08004ff0 <LL_ADC_IsEnabled>:
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b083      	sub	sp, #12
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	689b      	ldr	r3, [r3, #8]
 8004ffc:	f003 0301 	and.w	r3, r3, #1
 8005000:	2b01      	cmp	r3, #1
 8005002:	d101      	bne.n	8005008 <LL_ADC_IsEnabled+0x18>
 8005004:	2301      	movs	r3, #1
 8005006:	e000      	b.n	800500a <LL_ADC_IsEnabled+0x1a>
 8005008:	2300      	movs	r3, #0
}
 800500a:	4618      	mov	r0, r3
 800500c:	370c      	adds	r7, #12
 800500e:	46bd      	mov	sp, r7
 8005010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005014:	4770      	bx	lr

08005016 <LL_ADC_REG_IsConversionOngoing>:
{
 8005016:	b480      	push	{r7}
 8005018:	b083      	sub	sp, #12
 800501a:	af00      	add	r7, sp, #0
 800501c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	689b      	ldr	r3, [r3, #8]
 8005022:	f003 0304 	and.w	r3, r3, #4
 8005026:	2b04      	cmp	r3, #4
 8005028:	d101      	bne.n	800502e <LL_ADC_REG_IsConversionOngoing+0x18>
 800502a:	2301      	movs	r3, #1
 800502c:	e000      	b.n	8005030 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800502e:	2300      	movs	r3, #0
}
 8005030:	4618      	mov	r0, r3
 8005032:	370c      	adds	r7, #12
 8005034:	46bd      	mov	sp, r7
 8005036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503a:	4770      	bx	lr

0800503c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800503c:	b590      	push	{r4, r7, lr}
 800503e:	b09f      	sub	sp, #124	; 0x7c
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
 8005044:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005046:	2300      	movs	r3, #0
 8005048:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005052:	2b01      	cmp	r3, #1
 8005054:	d101      	bne.n	800505a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005056:	2302      	movs	r3, #2
 8005058:	e0be      	b.n	80051d8 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2201      	movs	r2, #1
 800505e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8005062:	2300      	movs	r3, #0
 8005064:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8005066:	2300      	movs	r3, #0
 8005068:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a5c      	ldr	r2, [pc, #368]	; (80051e0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d102      	bne.n	800507a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005074:	4b5b      	ldr	r3, [pc, #364]	; (80051e4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005076:	60bb      	str	r3, [r7, #8]
 8005078:	e001      	b.n	800507e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800507a:	2300      	movs	r3, #0
 800507c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d10b      	bne.n	800509c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005088:	f043 0220 	orr.w	r2, r3, #32
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2200      	movs	r2, #0
 8005094:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8005098:	2301      	movs	r3, #1
 800509a:	e09d      	b.n	80051d8 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	4618      	mov	r0, r3
 80050a0:	f7ff ffb9 	bl	8005016 <LL_ADC_REG_IsConversionOngoing>
 80050a4:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4618      	mov	r0, r3
 80050ac:	f7ff ffb3 	bl	8005016 <LL_ADC_REG_IsConversionOngoing>
 80050b0:	4603      	mov	r3, r0
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d17f      	bne.n	80051b6 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80050b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d17c      	bne.n	80051b6 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a47      	ldr	r2, [pc, #284]	; (80051e0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d004      	beq.n	80050d0 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a46      	ldr	r2, [pc, #280]	; (80051e4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d101      	bne.n	80050d4 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 80050d0:	4b45      	ldr	r3, [pc, #276]	; (80051e8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80050d2:	e000      	b.n	80050d6 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80050d4:	4b45      	ldr	r3, [pc, #276]	; (80051ec <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80050d6:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d039      	beq.n	8005154 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80050e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050e2:	689b      	ldr	r3, [r3, #8]
 80050e4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	431a      	orrs	r2, r3
 80050ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050f0:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a3a      	ldr	r2, [pc, #232]	; (80051e0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d004      	beq.n	8005106 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a38      	ldr	r2, [pc, #224]	; (80051e4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d10e      	bne.n	8005124 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8005106:	4836      	ldr	r0, [pc, #216]	; (80051e0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005108:	f7ff ff72 	bl	8004ff0 <LL_ADC_IsEnabled>
 800510c:	4604      	mov	r4, r0
 800510e:	4835      	ldr	r0, [pc, #212]	; (80051e4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005110:	f7ff ff6e 	bl	8004ff0 <LL_ADC_IsEnabled>
 8005114:	4603      	mov	r3, r0
 8005116:	4323      	orrs	r3, r4
 8005118:	2b00      	cmp	r3, #0
 800511a:	bf0c      	ite	eq
 800511c:	2301      	moveq	r3, #1
 800511e:	2300      	movne	r3, #0
 8005120:	b2db      	uxtb	r3, r3
 8005122:	e008      	b.n	8005136 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8005124:	4832      	ldr	r0, [pc, #200]	; (80051f0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8005126:	f7ff ff63 	bl	8004ff0 <LL_ADC_IsEnabled>
 800512a:	4603      	mov	r3, r0
 800512c:	2b00      	cmp	r3, #0
 800512e:	bf0c      	ite	eq
 8005130:	2301      	moveq	r3, #1
 8005132:	2300      	movne	r3, #0
 8005134:	b2db      	uxtb	r3, r3
 8005136:	2b00      	cmp	r3, #0
 8005138:	d047      	beq.n	80051ca <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800513a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800513c:	689a      	ldr	r2, [r3, #8]
 800513e:	4b2d      	ldr	r3, [pc, #180]	; (80051f4 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8005140:	4013      	ands	r3, r2
 8005142:	683a      	ldr	r2, [r7, #0]
 8005144:	6811      	ldr	r1, [r2, #0]
 8005146:	683a      	ldr	r2, [r7, #0]
 8005148:	6892      	ldr	r2, [r2, #8]
 800514a:	430a      	orrs	r2, r1
 800514c:	431a      	orrs	r2, r3
 800514e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005150:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005152:	e03a      	b.n	80051ca <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8005154:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005156:	689b      	ldr	r3, [r3, #8]
 8005158:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800515c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800515e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a1e      	ldr	r2, [pc, #120]	; (80051e0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d004      	beq.n	8005174 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a1d      	ldr	r2, [pc, #116]	; (80051e4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d10e      	bne.n	8005192 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8005174:	481a      	ldr	r0, [pc, #104]	; (80051e0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005176:	f7ff ff3b 	bl	8004ff0 <LL_ADC_IsEnabled>
 800517a:	4604      	mov	r4, r0
 800517c:	4819      	ldr	r0, [pc, #100]	; (80051e4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800517e:	f7ff ff37 	bl	8004ff0 <LL_ADC_IsEnabled>
 8005182:	4603      	mov	r3, r0
 8005184:	4323      	orrs	r3, r4
 8005186:	2b00      	cmp	r3, #0
 8005188:	bf0c      	ite	eq
 800518a:	2301      	moveq	r3, #1
 800518c:	2300      	movne	r3, #0
 800518e:	b2db      	uxtb	r3, r3
 8005190:	e008      	b.n	80051a4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8005192:	4817      	ldr	r0, [pc, #92]	; (80051f0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8005194:	f7ff ff2c 	bl	8004ff0 <LL_ADC_IsEnabled>
 8005198:	4603      	mov	r3, r0
 800519a:	2b00      	cmp	r3, #0
 800519c:	bf0c      	ite	eq
 800519e:	2301      	moveq	r3, #1
 80051a0:	2300      	movne	r3, #0
 80051a2:	b2db      	uxtb	r3, r3
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d010      	beq.n	80051ca <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80051a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051aa:	689a      	ldr	r2, [r3, #8]
 80051ac:	4b11      	ldr	r3, [pc, #68]	; (80051f4 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80051ae:	4013      	ands	r3, r2
 80051b0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80051b2:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80051b4:	e009      	b.n	80051ca <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051ba:	f043 0220 	orr.w	r2, r3, #32
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80051c2:	2301      	movs	r3, #1
 80051c4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80051c8:	e000      	b.n	80051cc <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80051ca:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2200      	movs	r2, #0
 80051d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80051d4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80051d8:	4618      	mov	r0, r3
 80051da:	377c      	adds	r7, #124	; 0x7c
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd90      	pop	{r4, r7, pc}
 80051e0:	40022000 	.word	0x40022000
 80051e4:	40022100 	.word	0x40022100
 80051e8:	40022300 	.word	0x40022300
 80051ec:	58026300 	.word	0x58026300
 80051f0:	58026000 	.word	0x58026000
 80051f4:	fffff0e0 	.word	0xfffff0e0

080051f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80051f8:	b480      	push	{r7}
 80051fa:	b085      	sub	sp, #20
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	f003 0307 	and.w	r3, r3, #7
 8005206:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005208:	4b0b      	ldr	r3, [pc, #44]	; (8005238 <__NVIC_SetPriorityGrouping+0x40>)
 800520a:	68db      	ldr	r3, [r3, #12]
 800520c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800520e:	68ba      	ldr	r2, [r7, #8]
 8005210:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005214:	4013      	ands	r3, r2
 8005216:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005220:	4b06      	ldr	r3, [pc, #24]	; (800523c <__NVIC_SetPriorityGrouping+0x44>)
 8005222:	4313      	orrs	r3, r2
 8005224:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005226:	4a04      	ldr	r2, [pc, #16]	; (8005238 <__NVIC_SetPriorityGrouping+0x40>)
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	60d3      	str	r3, [r2, #12]
}
 800522c:	bf00      	nop
 800522e:	3714      	adds	r7, #20
 8005230:	46bd      	mov	sp, r7
 8005232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005236:	4770      	bx	lr
 8005238:	e000ed00 	.word	0xe000ed00
 800523c:	05fa0000 	.word	0x05fa0000

08005240 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005240:	b480      	push	{r7}
 8005242:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005244:	4b04      	ldr	r3, [pc, #16]	; (8005258 <__NVIC_GetPriorityGrouping+0x18>)
 8005246:	68db      	ldr	r3, [r3, #12]
 8005248:	0a1b      	lsrs	r3, r3, #8
 800524a:	f003 0307 	and.w	r3, r3, #7
}
 800524e:	4618      	mov	r0, r3
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr
 8005258:	e000ed00 	.word	0xe000ed00

0800525c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800525c:	b480      	push	{r7}
 800525e:	b083      	sub	sp, #12
 8005260:	af00      	add	r7, sp, #0
 8005262:	4603      	mov	r3, r0
 8005264:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005266:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800526a:	2b00      	cmp	r3, #0
 800526c:	db0b      	blt.n	8005286 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800526e:	88fb      	ldrh	r3, [r7, #6]
 8005270:	f003 021f 	and.w	r2, r3, #31
 8005274:	4907      	ldr	r1, [pc, #28]	; (8005294 <__NVIC_EnableIRQ+0x38>)
 8005276:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800527a:	095b      	lsrs	r3, r3, #5
 800527c:	2001      	movs	r0, #1
 800527e:	fa00 f202 	lsl.w	r2, r0, r2
 8005282:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005286:	bf00      	nop
 8005288:	370c      	adds	r7, #12
 800528a:	46bd      	mov	sp, r7
 800528c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005290:	4770      	bx	lr
 8005292:	bf00      	nop
 8005294:	e000e100 	.word	0xe000e100

08005298 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005298:	b480      	push	{r7}
 800529a:	b083      	sub	sp, #12
 800529c:	af00      	add	r7, sp, #0
 800529e:	4603      	mov	r3, r0
 80052a0:	6039      	str	r1, [r7, #0]
 80052a2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80052a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	db0a      	blt.n	80052c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	b2da      	uxtb	r2, r3
 80052b0:	490c      	ldr	r1, [pc, #48]	; (80052e4 <__NVIC_SetPriority+0x4c>)
 80052b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80052b6:	0112      	lsls	r2, r2, #4
 80052b8:	b2d2      	uxtb	r2, r2
 80052ba:	440b      	add	r3, r1
 80052bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80052c0:	e00a      	b.n	80052d8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	b2da      	uxtb	r2, r3
 80052c6:	4908      	ldr	r1, [pc, #32]	; (80052e8 <__NVIC_SetPriority+0x50>)
 80052c8:	88fb      	ldrh	r3, [r7, #6]
 80052ca:	f003 030f 	and.w	r3, r3, #15
 80052ce:	3b04      	subs	r3, #4
 80052d0:	0112      	lsls	r2, r2, #4
 80052d2:	b2d2      	uxtb	r2, r2
 80052d4:	440b      	add	r3, r1
 80052d6:	761a      	strb	r2, [r3, #24]
}
 80052d8:	bf00      	nop
 80052da:	370c      	adds	r7, #12
 80052dc:	46bd      	mov	sp, r7
 80052de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e2:	4770      	bx	lr
 80052e4:	e000e100 	.word	0xe000e100
 80052e8:	e000ed00 	.word	0xe000ed00

080052ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b089      	sub	sp, #36	; 0x24
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	60f8      	str	r0, [r7, #12]
 80052f4:	60b9      	str	r1, [r7, #8]
 80052f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	f003 0307 	and.w	r3, r3, #7
 80052fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005300:	69fb      	ldr	r3, [r7, #28]
 8005302:	f1c3 0307 	rsb	r3, r3, #7
 8005306:	2b04      	cmp	r3, #4
 8005308:	bf28      	it	cs
 800530a:	2304      	movcs	r3, #4
 800530c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800530e:	69fb      	ldr	r3, [r7, #28]
 8005310:	3304      	adds	r3, #4
 8005312:	2b06      	cmp	r3, #6
 8005314:	d902      	bls.n	800531c <NVIC_EncodePriority+0x30>
 8005316:	69fb      	ldr	r3, [r7, #28]
 8005318:	3b03      	subs	r3, #3
 800531a:	e000      	b.n	800531e <NVIC_EncodePriority+0x32>
 800531c:	2300      	movs	r3, #0
 800531e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005320:	f04f 32ff 	mov.w	r2, #4294967295
 8005324:	69bb      	ldr	r3, [r7, #24]
 8005326:	fa02 f303 	lsl.w	r3, r2, r3
 800532a:	43da      	mvns	r2, r3
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	401a      	ands	r2, r3
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005334:	f04f 31ff 	mov.w	r1, #4294967295
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	fa01 f303 	lsl.w	r3, r1, r3
 800533e:	43d9      	mvns	r1, r3
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005344:	4313      	orrs	r3, r2
         );
}
 8005346:	4618      	mov	r0, r3
 8005348:	3724      	adds	r7, #36	; 0x24
 800534a:	46bd      	mov	sp, r7
 800534c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005350:	4770      	bx	lr

08005352 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005352:	b580      	push	{r7, lr}
 8005354:	b082      	sub	sp, #8
 8005356:	af00      	add	r7, sp, #0
 8005358:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f7ff ff4c 	bl	80051f8 <__NVIC_SetPriorityGrouping>
}
 8005360:	bf00      	nop
 8005362:	3708      	adds	r7, #8
 8005364:	46bd      	mov	sp, r7
 8005366:	bd80      	pop	{r7, pc}

08005368 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b086      	sub	sp, #24
 800536c:	af00      	add	r7, sp, #0
 800536e:	4603      	mov	r3, r0
 8005370:	60b9      	str	r1, [r7, #8]
 8005372:	607a      	str	r2, [r7, #4]
 8005374:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005376:	f7ff ff63 	bl	8005240 <__NVIC_GetPriorityGrouping>
 800537a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800537c:	687a      	ldr	r2, [r7, #4]
 800537e:	68b9      	ldr	r1, [r7, #8]
 8005380:	6978      	ldr	r0, [r7, #20]
 8005382:	f7ff ffb3 	bl	80052ec <NVIC_EncodePriority>
 8005386:	4602      	mov	r2, r0
 8005388:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800538c:	4611      	mov	r1, r2
 800538e:	4618      	mov	r0, r3
 8005390:	f7ff ff82 	bl	8005298 <__NVIC_SetPriority>
}
 8005394:	bf00      	nop
 8005396:	3718      	adds	r7, #24
 8005398:	46bd      	mov	sp, r7
 800539a:	bd80      	pop	{r7, pc}

0800539c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b082      	sub	sp, #8
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	4603      	mov	r3, r0
 80053a4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80053a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80053aa:	4618      	mov	r0, r3
 80053ac:	f7ff ff56 	bl	800525c <__NVIC_EnableIRQ>
}
 80053b0:	bf00      	nop
 80053b2:	3708      	adds	r7, #8
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}

080053b8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b086      	sub	sp, #24
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80053c0:	f7fe fba4 	bl	8003b0c <HAL_GetTick>
 80053c4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d101      	bne.n	80053d0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80053cc:	2301      	movs	r3, #1
 80053ce:	e316      	b.n	80059fe <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a66      	ldr	r2, [pc, #408]	; (8005570 <HAL_DMA_Init+0x1b8>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d04a      	beq.n	8005470 <HAL_DMA_Init+0xb8>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a65      	ldr	r2, [pc, #404]	; (8005574 <HAL_DMA_Init+0x1bc>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d045      	beq.n	8005470 <HAL_DMA_Init+0xb8>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a63      	ldr	r2, [pc, #396]	; (8005578 <HAL_DMA_Init+0x1c0>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d040      	beq.n	8005470 <HAL_DMA_Init+0xb8>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a62      	ldr	r2, [pc, #392]	; (800557c <HAL_DMA_Init+0x1c4>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d03b      	beq.n	8005470 <HAL_DMA_Init+0xb8>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a60      	ldr	r2, [pc, #384]	; (8005580 <HAL_DMA_Init+0x1c8>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d036      	beq.n	8005470 <HAL_DMA_Init+0xb8>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a5f      	ldr	r2, [pc, #380]	; (8005584 <HAL_DMA_Init+0x1cc>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d031      	beq.n	8005470 <HAL_DMA_Init+0xb8>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a5d      	ldr	r2, [pc, #372]	; (8005588 <HAL_DMA_Init+0x1d0>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d02c      	beq.n	8005470 <HAL_DMA_Init+0xb8>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a5c      	ldr	r2, [pc, #368]	; (800558c <HAL_DMA_Init+0x1d4>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d027      	beq.n	8005470 <HAL_DMA_Init+0xb8>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a5a      	ldr	r2, [pc, #360]	; (8005590 <HAL_DMA_Init+0x1d8>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d022      	beq.n	8005470 <HAL_DMA_Init+0xb8>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a59      	ldr	r2, [pc, #356]	; (8005594 <HAL_DMA_Init+0x1dc>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d01d      	beq.n	8005470 <HAL_DMA_Init+0xb8>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a57      	ldr	r2, [pc, #348]	; (8005598 <HAL_DMA_Init+0x1e0>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d018      	beq.n	8005470 <HAL_DMA_Init+0xb8>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a56      	ldr	r2, [pc, #344]	; (800559c <HAL_DMA_Init+0x1e4>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d013      	beq.n	8005470 <HAL_DMA_Init+0xb8>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a54      	ldr	r2, [pc, #336]	; (80055a0 <HAL_DMA_Init+0x1e8>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d00e      	beq.n	8005470 <HAL_DMA_Init+0xb8>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4a53      	ldr	r2, [pc, #332]	; (80055a4 <HAL_DMA_Init+0x1ec>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d009      	beq.n	8005470 <HAL_DMA_Init+0xb8>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a51      	ldr	r2, [pc, #324]	; (80055a8 <HAL_DMA_Init+0x1f0>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d004      	beq.n	8005470 <HAL_DMA_Init+0xb8>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a50      	ldr	r2, [pc, #320]	; (80055ac <HAL_DMA_Init+0x1f4>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d101      	bne.n	8005474 <HAL_DMA_Init+0xbc>
 8005470:	2301      	movs	r3, #1
 8005472:	e000      	b.n	8005476 <HAL_DMA_Init+0xbe>
 8005474:	2300      	movs	r3, #0
 8005476:	2b00      	cmp	r3, #0
 8005478:	f000 813b 	beq.w	80056f2 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2202      	movs	r2, #2
 8005480:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2200      	movs	r2, #0
 8005488:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a37      	ldr	r2, [pc, #220]	; (8005570 <HAL_DMA_Init+0x1b8>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d04a      	beq.n	800552c <HAL_DMA_Init+0x174>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a36      	ldr	r2, [pc, #216]	; (8005574 <HAL_DMA_Init+0x1bc>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d045      	beq.n	800552c <HAL_DMA_Init+0x174>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a34      	ldr	r2, [pc, #208]	; (8005578 <HAL_DMA_Init+0x1c0>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d040      	beq.n	800552c <HAL_DMA_Init+0x174>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a33      	ldr	r2, [pc, #204]	; (800557c <HAL_DMA_Init+0x1c4>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d03b      	beq.n	800552c <HAL_DMA_Init+0x174>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a31      	ldr	r2, [pc, #196]	; (8005580 <HAL_DMA_Init+0x1c8>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d036      	beq.n	800552c <HAL_DMA_Init+0x174>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a30      	ldr	r2, [pc, #192]	; (8005584 <HAL_DMA_Init+0x1cc>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d031      	beq.n	800552c <HAL_DMA_Init+0x174>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a2e      	ldr	r2, [pc, #184]	; (8005588 <HAL_DMA_Init+0x1d0>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d02c      	beq.n	800552c <HAL_DMA_Init+0x174>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a2d      	ldr	r2, [pc, #180]	; (800558c <HAL_DMA_Init+0x1d4>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d027      	beq.n	800552c <HAL_DMA_Init+0x174>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a2b      	ldr	r2, [pc, #172]	; (8005590 <HAL_DMA_Init+0x1d8>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d022      	beq.n	800552c <HAL_DMA_Init+0x174>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a2a      	ldr	r2, [pc, #168]	; (8005594 <HAL_DMA_Init+0x1dc>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d01d      	beq.n	800552c <HAL_DMA_Init+0x174>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a28      	ldr	r2, [pc, #160]	; (8005598 <HAL_DMA_Init+0x1e0>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d018      	beq.n	800552c <HAL_DMA_Init+0x174>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a27      	ldr	r2, [pc, #156]	; (800559c <HAL_DMA_Init+0x1e4>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d013      	beq.n	800552c <HAL_DMA_Init+0x174>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a25      	ldr	r2, [pc, #148]	; (80055a0 <HAL_DMA_Init+0x1e8>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d00e      	beq.n	800552c <HAL_DMA_Init+0x174>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a24      	ldr	r2, [pc, #144]	; (80055a4 <HAL_DMA_Init+0x1ec>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d009      	beq.n	800552c <HAL_DMA_Init+0x174>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a22      	ldr	r2, [pc, #136]	; (80055a8 <HAL_DMA_Init+0x1f0>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d004      	beq.n	800552c <HAL_DMA_Init+0x174>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a21      	ldr	r2, [pc, #132]	; (80055ac <HAL_DMA_Init+0x1f4>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d108      	bne.n	800553e <HAL_DMA_Init+0x186>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	681a      	ldr	r2, [r3, #0]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f022 0201 	bic.w	r2, r2, #1
 800553a:	601a      	str	r2, [r3, #0]
 800553c:	e007      	b.n	800554e <HAL_DMA_Init+0x196>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	681a      	ldr	r2, [r3, #0]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f022 0201 	bic.w	r2, r2, #1
 800554c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800554e:	e02f      	b.n	80055b0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005550:	f7fe fadc 	bl	8003b0c <HAL_GetTick>
 8005554:	4602      	mov	r2, r0
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	1ad3      	subs	r3, r2, r3
 800555a:	2b05      	cmp	r3, #5
 800555c:	d928      	bls.n	80055b0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2220      	movs	r2, #32
 8005562:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2203      	movs	r2, #3
 8005568:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800556c:	2301      	movs	r3, #1
 800556e:	e246      	b.n	80059fe <HAL_DMA_Init+0x646>
 8005570:	40020010 	.word	0x40020010
 8005574:	40020028 	.word	0x40020028
 8005578:	40020040 	.word	0x40020040
 800557c:	40020058 	.word	0x40020058
 8005580:	40020070 	.word	0x40020070
 8005584:	40020088 	.word	0x40020088
 8005588:	400200a0 	.word	0x400200a0
 800558c:	400200b8 	.word	0x400200b8
 8005590:	40020410 	.word	0x40020410
 8005594:	40020428 	.word	0x40020428
 8005598:	40020440 	.word	0x40020440
 800559c:	40020458 	.word	0x40020458
 80055a0:	40020470 	.word	0x40020470
 80055a4:	40020488 	.word	0x40020488
 80055a8:	400204a0 	.word	0x400204a0
 80055ac:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f003 0301 	and.w	r3, r3, #1
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d1c8      	bne.n	8005550 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80055c6:	697a      	ldr	r2, [r7, #20]
 80055c8:	4b83      	ldr	r3, [pc, #524]	; (80057d8 <HAL_DMA_Init+0x420>)
 80055ca:	4013      	ands	r3, r2
 80055cc:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80055d6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	691b      	ldr	r3, [r3, #16]
 80055dc:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80055e2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	699b      	ldr	r3, [r3, #24]
 80055e8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80055ee:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6a1b      	ldr	r3, [r3, #32]
 80055f4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80055f6:	697a      	ldr	r2, [r7, #20]
 80055f8:	4313      	orrs	r3, r2
 80055fa:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005600:	2b04      	cmp	r3, #4
 8005602:	d107      	bne.n	8005614 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800560c:	4313      	orrs	r3, r2
 800560e:	697a      	ldr	r2, [r7, #20]
 8005610:	4313      	orrs	r3, r2
 8005612:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8005614:	4b71      	ldr	r3, [pc, #452]	; (80057dc <HAL_DMA_Init+0x424>)
 8005616:	681a      	ldr	r2, [r3, #0]
 8005618:	4b71      	ldr	r3, [pc, #452]	; (80057e0 <HAL_DMA_Init+0x428>)
 800561a:	4013      	ands	r3, r2
 800561c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005620:	d328      	bcc.n	8005674 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	2b28      	cmp	r3, #40	; 0x28
 8005628:	d903      	bls.n	8005632 <HAL_DMA_Init+0x27a>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	2b2e      	cmp	r3, #46	; 0x2e
 8005630:	d917      	bls.n	8005662 <HAL_DMA_Init+0x2aa>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	2b3e      	cmp	r3, #62	; 0x3e
 8005638:	d903      	bls.n	8005642 <HAL_DMA_Init+0x28a>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	2b42      	cmp	r3, #66	; 0x42
 8005640:	d90f      	bls.n	8005662 <HAL_DMA_Init+0x2aa>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	2b46      	cmp	r3, #70	; 0x46
 8005648:	d903      	bls.n	8005652 <HAL_DMA_Init+0x29a>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	2b48      	cmp	r3, #72	; 0x48
 8005650:	d907      	bls.n	8005662 <HAL_DMA_Init+0x2aa>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	2b4e      	cmp	r3, #78	; 0x4e
 8005658:	d905      	bls.n	8005666 <HAL_DMA_Init+0x2ae>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	2b52      	cmp	r3, #82	; 0x52
 8005660:	d801      	bhi.n	8005666 <HAL_DMA_Init+0x2ae>
 8005662:	2301      	movs	r3, #1
 8005664:	e000      	b.n	8005668 <HAL_DMA_Init+0x2b0>
 8005666:	2300      	movs	r3, #0
 8005668:	2b00      	cmp	r3, #0
 800566a:	d003      	beq.n	8005674 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005672:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	697a      	ldr	r2, [r7, #20]
 800567a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	695b      	ldr	r3, [r3, #20]
 8005682:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	f023 0307 	bic.w	r3, r3, #7
 800568a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005690:	697a      	ldr	r2, [r7, #20]
 8005692:	4313      	orrs	r3, r2
 8005694:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800569a:	2b04      	cmp	r3, #4
 800569c:	d117      	bne.n	80056ce <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056a2:	697a      	ldr	r2, [r7, #20]
 80056a4:	4313      	orrs	r3, r2
 80056a6:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d00e      	beq.n	80056ce <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80056b0:	6878      	ldr	r0, [r7, #4]
 80056b2:	f001 ff1d 	bl	80074f0 <DMA_CheckFifoParam>
 80056b6:	4603      	mov	r3, r0
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d008      	beq.n	80056ce <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2240      	movs	r2, #64	; 0x40
 80056c0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2201      	movs	r2, #1
 80056c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80056ca:	2301      	movs	r3, #1
 80056cc:	e197      	b.n	80059fe <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	697a      	ldr	r2, [r7, #20]
 80056d4:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	f001 fe58 	bl	800738c <DMA_CalcBaseAndBitshift>
 80056dc:	4603      	mov	r3, r0
 80056de:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056e4:	f003 031f 	and.w	r3, r3, #31
 80056e8:	223f      	movs	r2, #63	; 0x3f
 80056ea:	409a      	lsls	r2, r3
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	609a      	str	r2, [r3, #8]
 80056f0:	e0cd      	b.n	800588e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a3b      	ldr	r2, [pc, #236]	; (80057e4 <HAL_DMA_Init+0x42c>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d022      	beq.n	8005742 <HAL_DMA_Init+0x38a>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4a39      	ldr	r2, [pc, #228]	; (80057e8 <HAL_DMA_Init+0x430>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d01d      	beq.n	8005742 <HAL_DMA_Init+0x38a>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4a38      	ldr	r2, [pc, #224]	; (80057ec <HAL_DMA_Init+0x434>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d018      	beq.n	8005742 <HAL_DMA_Init+0x38a>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a36      	ldr	r2, [pc, #216]	; (80057f0 <HAL_DMA_Init+0x438>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d013      	beq.n	8005742 <HAL_DMA_Init+0x38a>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a35      	ldr	r2, [pc, #212]	; (80057f4 <HAL_DMA_Init+0x43c>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d00e      	beq.n	8005742 <HAL_DMA_Init+0x38a>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a33      	ldr	r2, [pc, #204]	; (80057f8 <HAL_DMA_Init+0x440>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d009      	beq.n	8005742 <HAL_DMA_Init+0x38a>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a32      	ldr	r2, [pc, #200]	; (80057fc <HAL_DMA_Init+0x444>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d004      	beq.n	8005742 <HAL_DMA_Init+0x38a>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a30      	ldr	r2, [pc, #192]	; (8005800 <HAL_DMA_Init+0x448>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d101      	bne.n	8005746 <HAL_DMA_Init+0x38e>
 8005742:	2301      	movs	r3, #1
 8005744:	e000      	b.n	8005748 <HAL_DMA_Init+0x390>
 8005746:	2300      	movs	r3, #0
 8005748:	2b00      	cmp	r3, #0
 800574a:	f000 8097 	beq.w	800587c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a24      	ldr	r2, [pc, #144]	; (80057e4 <HAL_DMA_Init+0x42c>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d021      	beq.n	800579c <HAL_DMA_Init+0x3e4>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a22      	ldr	r2, [pc, #136]	; (80057e8 <HAL_DMA_Init+0x430>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d01c      	beq.n	800579c <HAL_DMA_Init+0x3e4>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a21      	ldr	r2, [pc, #132]	; (80057ec <HAL_DMA_Init+0x434>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d017      	beq.n	800579c <HAL_DMA_Init+0x3e4>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a1f      	ldr	r2, [pc, #124]	; (80057f0 <HAL_DMA_Init+0x438>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d012      	beq.n	800579c <HAL_DMA_Init+0x3e4>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a1e      	ldr	r2, [pc, #120]	; (80057f4 <HAL_DMA_Init+0x43c>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d00d      	beq.n	800579c <HAL_DMA_Init+0x3e4>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a1c      	ldr	r2, [pc, #112]	; (80057f8 <HAL_DMA_Init+0x440>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d008      	beq.n	800579c <HAL_DMA_Init+0x3e4>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a1b      	ldr	r2, [pc, #108]	; (80057fc <HAL_DMA_Init+0x444>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d003      	beq.n	800579c <HAL_DMA_Init+0x3e4>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a19      	ldr	r2, [pc, #100]	; (8005800 <HAL_DMA_Init+0x448>)
 800579a:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2202      	movs	r2, #2
 80057a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2200      	movs	r2, #0
 80057a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80057b4:	697a      	ldr	r2, [r7, #20]
 80057b6:	4b13      	ldr	r3, [pc, #76]	; (8005804 <HAL_DMA_Init+0x44c>)
 80057b8:	4013      	ands	r3, r2
 80057ba:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	689b      	ldr	r3, [r3, #8]
 80057c0:	2b40      	cmp	r3, #64	; 0x40
 80057c2:	d021      	beq.n	8005808 <HAL_DMA_Init+0x450>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	689b      	ldr	r3, [r3, #8]
 80057c8:	2b80      	cmp	r3, #128	; 0x80
 80057ca:	d102      	bne.n	80057d2 <HAL_DMA_Init+0x41a>
 80057cc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80057d0:	e01b      	b.n	800580a <HAL_DMA_Init+0x452>
 80057d2:	2300      	movs	r3, #0
 80057d4:	e019      	b.n	800580a <HAL_DMA_Init+0x452>
 80057d6:	bf00      	nop
 80057d8:	fe10803f 	.word	0xfe10803f
 80057dc:	5c001000 	.word	0x5c001000
 80057e0:	ffff0000 	.word	0xffff0000
 80057e4:	58025408 	.word	0x58025408
 80057e8:	5802541c 	.word	0x5802541c
 80057ec:	58025430 	.word	0x58025430
 80057f0:	58025444 	.word	0x58025444
 80057f4:	58025458 	.word	0x58025458
 80057f8:	5802546c 	.word	0x5802546c
 80057fc:	58025480 	.word	0x58025480
 8005800:	58025494 	.word	0x58025494
 8005804:	fffe000f 	.word	0xfffe000f
 8005808:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800580a:	687a      	ldr	r2, [r7, #4]
 800580c:	68d2      	ldr	r2, [r2, #12]
 800580e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005810:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	691b      	ldr	r3, [r3, #16]
 8005816:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005818:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	695b      	ldr	r3, [r3, #20]
 800581e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005820:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	699b      	ldr	r3, [r3, #24]
 8005826:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005828:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	69db      	ldr	r3, [r3, #28]
 800582e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005830:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6a1b      	ldr	r3, [r3, #32]
 8005836:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005838:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800583a:	697a      	ldr	r2, [r7, #20]
 800583c:	4313      	orrs	r3, r2
 800583e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	697a      	ldr	r2, [r7, #20]
 8005846:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	461a      	mov	r2, r3
 800584e:	4b6e      	ldr	r3, [pc, #440]	; (8005a08 <HAL_DMA_Init+0x650>)
 8005850:	4413      	add	r3, r2
 8005852:	4a6e      	ldr	r2, [pc, #440]	; (8005a0c <HAL_DMA_Init+0x654>)
 8005854:	fba2 2303 	umull	r2, r3, r2, r3
 8005858:	091b      	lsrs	r3, r3, #4
 800585a:	009a      	lsls	r2, r3, #2
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005860:	6878      	ldr	r0, [r7, #4]
 8005862:	f001 fd93 	bl	800738c <DMA_CalcBaseAndBitshift>
 8005866:	4603      	mov	r3, r0
 8005868:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800586e:	f003 031f 	and.w	r3, r3, #31
 8005872:	2201      	movs	r2, #1
 8005874:	409a      	lsls	r2, r3
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	605a      	str	r2, [r3, #4]
 800587a:	e008      	b.n	800588e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2240      	movs	r2, #64	; 0x40
 8005880:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2203      	movs	r2, #3
 8005886:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800588a:	2301      	movs	r3, #1
 800588c:	e0b7      	b.n	80059fe <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4a5f      	ldr	r2, [pc, #380]	; (8005a10 <HAL_DMA_Init+0x658>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d072      	beq.n	800597e <HAL_DMA_Init+0x5c6>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a5d      	ldr	r2, [pc, #372]	; (8005a14 <HAL_DMA_Init+0x65c>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d06d      	beq.n	800597e <HAL_DMA_Init+0x5c6>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4a5c      	ldr	r2, [pc, #368]	; (8005a18 <HAL_DMA_Init+0x660>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d068      	beq.n	800597e <HAL_DMA_Init+0x5c6>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a5a      	ldr	r2, [pc, #360]	; (8005a1c <HAL_DMA_Init+0x664>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d063      	beq.n	800597e <HAL_DMA_Init+0x5c6>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a59      	ldr	r2, [pc, #356]	; (8005a20 <HAL_DMA_Init+0x668>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d05e      	beq.n	800597e <HAL_DMA_Init+0x5c6>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4a57      	ldr	r2, [pc, #348]	; (8005a24 <HAL_DMA_Init+0x66c>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d059      	beq.n	800597e <HAL_DMA_Init+0x5c6>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4a56      	ldr	r2, [pc, #344]	; (8005a28 <HAL_DMA_Init+0x670>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d054      	beq.n	800597e <HAL_DMA_Init+0x5c6>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4a54      	ldr	r2, [pc, #336]	; (8005a2c <HAL_DMA_Init+0x674>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d04f      	beq.n	800597e <HAL_DMA_Init+0x5c6>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a53      	ldr	r2, [pc, #332]	; (8005a30 <HAL_DMA_Init+0x678>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d04a      	beq.n	800597e <HAL_DMA_Init+0x5c6>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a51      	ldr	r2, [pc, #324]	; (8005a34 <HAL_DMA_Init+0x67c>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d045      	beq.n	800597e <HAL_DMA_Init+0x5c6>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4a50      	ldr	r2, [pc, #320]	; (8005a38 <HAL_DMA_Init+0x680>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d040      	beq.n	800597e <HAL_DMA_Init+0x5c6>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a4e      	ldr	r2, [pc, #312]	; (8005a3c <HAL_DMA_Init+0x684>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d03b      	beq.n	800597e <HAL_DMA_Init+0x5c6>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a4d      	ldr	r2, [pc, #308]	; (8005a40 <HAL_DMA_Init+0x688>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d036      	beq.n	800597e <HAL_DMA_Init+0x5c6>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a4b      	ldr	r2, [pc, #300]	; (8005a44 <HAL_DMA_Init+0x68c>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d031      	beq.n	800597e <HAL_DMA_Init+0x5c6>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4a4a      	ldr	r2, [pc, #296]	; (8005a48 <HAL_DMA_Init+0x690>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d02c      	beq.n	800597e <HAL_DMA_Init+0x5c6>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a48      	ldr	r2, [pc, #288]	; (8005a4c <HAL_DMA_Init+0x694>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d027      	beq.n	800597e <HAL_DMA_Init+0x5c6>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4a47      	ldr	r2, [pc, #284]	; (8005a50 <HAL_DMA_Init+0x698>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d022      	beq.n	800597e <HAL_DMA_Init+0x5c6>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a45      	ldr	r2, [pc, #276]	; (8005a54 <HAL_DMA_Init+0x69c>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d01d      	beq.n	800597e <HAL_DMA_Init+0x5c6>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4a44      	ldr	r2, [pc, #272]	; (8005a58 <HAL_DMA_Init+0x6a0>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d018      	beq.n	800597e <HAL_DMA_Init+0x5c6>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a42      	ldr	r2, [pc, #264]	; (8005a5c <HAL_DMA_Init+0x6a4>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d013      	beq.n	800597e <HAL_DMA_Init+0x5c6>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a41      	ldr	r2, [pc, #260]	; (8005a60 <HAL_DMA_Init+0x6a8>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d00e      	beq.n	800597e <HAL_DMA_Init+0x5c6>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a3f      	ldr	r2, [pc, #252]	; (8005a64 <HAL_DMA_Init+0x6ac>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d009      	beq.n	800597e <HAL_DMA_Init+0x5c6>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a3e      	ldr	r2, [pc, #248]	; (8005a68 <HAL_DMA_Init+0x6b0>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d004      	beq.n	800597e <HAL_DMA_Init+0x5c6>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a3c      	ldr	r2, [pc, #240]	; (8005a6c <HAL_DMA_Init+0x6b4>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d101      	bne.n	8005982 <HAL_DMA_Init+0x5ca>
 800597e:	2301      	movs	r3, #1
 8005980:	e000      	b.n	8005984 <HAL_DMA_Init+0x5cc>
 8005982:	2300      	movs	r3, #0
 8005984:	2b00      	cmp	r3, #0
 8005986:	d032      	beq.n	80059ee <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005988:	6878      	ldr	r0, [r7, #4]
 800598a:	f001 fe2d 	bl	80075e8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	689b      	ldr	r3, [r3, #8]
 8005992:	2b80      	cmp	r3, #128	; 0x80
 8005994:	d102      	bne.n	800599c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2200      	movs	r2, #0
 800599a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	685a      	ldr	r2, [r3, #4]
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059a4:	b2d2      	uxtb	r2, r2
 80059a6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80059ac:	687a      	ldr	r2, [r7, #4]
 80059ae:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80059b0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	685b      	ldr	r3, [r3, #4]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d010      	beq.n	80059dc <HAL_DMA_Init+0x624>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	685b      	ldr	r3, [r3, #4]
 80059be:	2b08      	cmp	r3, #8
 80059c0:	d80c      	bhi.n	80059dc <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f001 feaa 	bl	800771c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80059cc:	2200      	movs	r2, #0
 80059ce:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059d4:	687a      	ldr	r2, [r7, #4]
 80059d6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80059d8:	605a      	str	r2, [r3, #4]
 80059da:	e008      	b.n	80059ee <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2200      	movs	r2, #0
 80059e0:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2200      	movs	r2, #0
 80059e6:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2200      	movs	r2, #0
 80059ec:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2200      	movs	r2, #0
 80059f2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2201      	movs	r2, #1
 80059f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80059fc:	2300      	movs	r3, #0
}
 80059fe:	4618      	mov	r0, r3
 8005a00:	3718      	adds	r7, #24
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}
 8005a06:	bf00      	nop
 8005a08:	a7fdabf8 	.word	0xa7fdabf8
 8005a0c:	cccccccd 	.word	0xcccccccd
 8005a10:	40020010 	.word	0x40020010
 8005a14:	40020028 	.word	0x40020028
 8005a18:	40020040 	.word	0x40020040
 8005a1c:	40020058 	.word	0x40020058
 8005a20:	40020070 	.word	0x40020070
 8005a24:	40020088 	.word	0x40020088
 8005a28:	400200a0 	.word	0x400200a0
 8005a2c:	400200b8 	.word	0x400200b8
 8005a30:	40020410 	.word	0x40020410
 8005a34:	40020428 	.word	0x40020428
 8005a38:	40020440 	.word	0x40020440
 8005a3c:	40020458 	.word	0x40020458
 8005a40:	40020470 	.word	0x40020470
 8005a44:	40020488 	.word	0x40020488
 8005a48:	400204a0 	.word	0x400204a0
 8005a4c:	400204b8 	.word	0x400204b8
 8005a50:	58025408 	.word	0x58025408
 8005a54:	5802541c 	.word	0x5802541c
 8005a58:	58025430 	.word	0x58025430
 8005a5c:	58025444 	.word	0x58025444
 8005a60:	58025458 	.word	0x58025458
 8005a64:	5802546c 	.word	0x5802546c
 8005a68:	58025480 	.word	0x58025480
 8005a6c:	58025494 	.word	0x58025494

08005a70 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b086      	sub	sp, #24
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8005a78:	f7fe f848 	bl	8003b0c <HAL_GetTick>
 8005a7c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d101      	bne.n	8005a88 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8005a84:	2301      	movs	r3, #1
 8005a86:	e2dc      	b.n	8006042 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005a8e:	b2db      	uxtb	r3, r3
 8005a90:	2b02      	cmp	r3, #2
 8005a92:	d008      	beq.n	8005aa6 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2280      	movs	r2, #128	; 0x80
 8005a98:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	e2cd      	b.n	8006042 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4a76      	ldr	r2, [pc, #472]	; (8005c84 <HAL_DMA_Abort+0x214>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d04a      	beq.n	8005b46 <HAL_DMA_Abort+0xd6>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4a74      	ldr	r2, [pc, #464]	; (8005c88 <HAL_DMA_Abort+0x218>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d045      	beq.n	8005b46 <HAL_DMA_Abort+0xd6>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4a73      	ldr	r2, [pc, #460]	; (8005c8c <HAL_DMA_Abort+0x21c>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d040      	beq.n	8005b46 <HAL_DMA_Abort+0xd6>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a71      	ldr	r2, [pc, #452]	; (8005c90 <HAL_DMA_Abort+0x220>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d03b      	beq.n	8005b46 <HAL_DMA_Abort+0xd6>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4a70      	ldr	r2, [pc, #448]	; (8005c94 <HAL_DMA_Abort+0x224>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d036      	beq.n	8005b46 <HAL_DMA_Abort+0xd6>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4a6e      	ldr	r2, [pc, #440]	; (8005c98 <HAL_DMA_Abort+0x228>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d031      	beq.n	8005b46 <HAL_DMA_Abort+0xd6>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4a6d      	ldr	r2, [pc, #436]	; (8005c9c <HAL_DMA_Abort+0x22c>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d02c      	beq.n	8005b46 <HAL_DMA_Abort+0xd6>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4a6b      	ldr	r2, [pc, #428]	; (8005ca0 <HAL_DMA_Abort+0x230>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d027      	beq.n	8005b46 <HAL_DMA_Abort+0xd6>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4a6a      	ldr	r2, [pc, #424]	; (8005ca4 <HAL_DMA_Abort+0x234>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d022      	beq.n	8005b46 <HAL_DMA_Abort+0xd6>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4a68      	ldr	r2, [pc, #416]	; (8005ca8 <HAL_DMA_Abort+0x238>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d01d      	beq.n	8005b46 <HAL_DMA_Abort+0xd6>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	4a67      	ldr	r2, [pc, #412]	; (8005cac <HAL_DMA_Abort+0x23c>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d018      	beq.n	8005b46 <HAL_DMA_Abort+0xd6>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	4a65      	ldr	r2, [pc, #404]	; (8005cb0 <HAL_DMA_Abort+0x240>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d013      	beq.n	8005b46 <HAL_DMA_Abort+0xd6>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4a64      	ldr	r2, [pc, #400]	; (8005cb4 <HAL_DMA_Abort+0x244>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d00e      	beq.n	8005b46 <HAL_DMA_Abort+0xd6>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4a62      	ldr	r2, [pc, #392]	; (8005cb8 <HAL_DMA_Abort+0x248>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d009      	beq.n	8005b46 <HAL_DMA_Abort+0xd6>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4a61      	ldr	r2, [pc, #388]	; (8005cbc <HAL_DMA_Abort+0x24c>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d004      	beq.n	8005b46 <HAL_DMA_Abort+0xd6>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4a5f      	ldr	r2, [pc, #380]	; (8005cc0 <HAL_DMA_Abort+0x250>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d101      	bne.n	8005b4a <HAL_DMA_Abort+0xda>
 8005b46:	2301      	movs	r3, #1
 8005b48:	e000      	b.n	8005b4c <HAL_DMA_Abort+0xdc>
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d013      	beq.n	8005b78 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	681a      	ldr	r2, [r3, #0]
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f022 021e 	bic.w	r2, r2, #30
 8005b5e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	695a      	ldr	r2, [r3, #20]
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005b6e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	617b      	str	r3, [r7, #20]
 8005b76:	e00a      	b.n	8005b8e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	681a      	ldr	r2, [r3, #0]
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f022 020e 	bic.w	r2, r2, #14
 8005b86:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4a3c      	ldr	r2, [pc, #240]	; (8005c84 <HAL_DMA_Abort+0x214>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d072      	beq.n	8005c7e <HAL_DMA_Abort+0x20e>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4a3a      	ldr	r2, [pc, #232]	; (8005c88 <HAL_DMA_Abort+0x218>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d06d      	beq.n	8005c7e <HAL_DMA_Abort+0x20e>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4a39      	ldr	r2, [pc, #228]	; (8005c8c <HAL_DMA_Abort+0x21c>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d068      	beq.n	8005c7e <HAL_DMA_Abort+0x20e>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4a37      	ldr	r2, [pc, #220]	; (8005c90 <HAL_DMA_Abort+0x220>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d063      	beq.n	8005c7e <HAL_DMA_Abort+0x20e>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4a36      	ldr	r2, [pc, #216]	; (8005c94 <HAL_DMA_Abort+0x224>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d05e      	beq.n	8005c7e <HAL_DMA_Abort+0x20e>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4a34      	ldr	r2, [pc, #208]	; (8005c98 <HAL_DMA_Abort+0x228>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d059      	beq.n	8005c7e <HAL_DMA_Abort+0x20e>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4a33      	ldr	r2, [pc, #204]	; (8005c9c <HAL_DMA_Abort+0x22c>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d054      	beq.n	8005c7e <HAL_DMA_Abort+0x20e>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4a31      	ldr	r2, [pc, #196]	; (8005ca0 <HAL_DMA_Abort+0x230>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d04f      	beq.n	8005c7e <HAL_DMA_Abort+0x20e>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4a30      	ldr	r2, [pc, #192]	; (8005ca4 <HAL_DMA_Abort+0x234>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d04a      	beq.n	8005c7e <HAL_DMA_Abort+0x20e>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4a2e      	ldr	r2, [pc, #184]	; (8005ca8 <HAL_DMA_Abort+0x238>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d045      	beq.n	8005c7e <HAL_DMA_Abort+0x20e>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4a2d      	ldr	r2, [pc, #180]	; (8005cac <HAL_DMA_Abort+0x23c>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d040      	beq.n	8005c7e <HAL_DMA_Abort+0x20e>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4a2b      	ldr	r2, [pc, #172]	; (8005cb0 <HAL_DMA_Abort+0x240>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d03b      	beq.n	8005c7e <HAL_DMA_Abort+0x20e>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4a2a      	ldr	r2, [pc, #168]	; (8005cb4 <HAL_DMA_Abort+0x244>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d036      	beq.n	8005c7e <HAL_DMA_Abort+0x20e>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4a28      	ldr	r2, [pc, #160]	; (8005cb8 <HAL_DMA_Abort+0x248>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d031      	beq.n	8005c7e <HAL_DMA_Abort+0x20e>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	4a27      	ldr	r2, [pc, #156]	; (8005cbc <HAL_DMA_Abort+0x24c>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d02c      	beq.n	8005c7e <HAL_DMA_Abort+0x20e>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4a25      	ldr	r2, [pc, #148]	; (8005cc0 <HAL_DMA_Abort+0x250>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d027      	beq.n	8005c7e <HAL_DMA_Abort+0x20e>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4a24      	ldr	r2, [pc, #144]	; (8005cc4 <HAL_DMA_Abort+0x254>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d022      	beq.n	8005c7e <HAL_DMA_Abort+0x20e>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4a22      	ldr	r2, [pc, #136]	; (8005cc8 <HAL_DMA_Abort+0x258>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d01d      	beq.n	8005c7e <HAL_DMA_Abort+0x20e>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4a21      	ldr	r2, [pc, #132]	; (8005ccc <HAL_DMA_Abort+0x25c>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d018      	beq.n	8005c7e <HAL_DMA_Abort+0x20e>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4a1f      	ldr	r2, [pc, #124]	; (8005cd0 <HAL_DMA_Abort+0x260>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d013      	beq.n	8005c7e <HAL_DMA_Abort+0x20e>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a1e      	ldr	r2, [pc, #120]	; (8005cd4 <HAL_DMA_Abort+0x264>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d00e      	beq.n	8005c7e <HAL_DMA_Abort+0x20e>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a1c      	ldr	r2, [pc, #112]	; (8005cd8 <HAL_DMA_Abort+0x268>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d009      	beq.n	8005c7e <HAL_DMA_Abort+0x20e>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4a1b      	ldr	r2, [pc, #108]	; (8005cdc <HAL_DMA_Abort+0x26c>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d004      	beq.n	8005c7e <HAL_DMA_Abort+0x20e>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a19      	ldr	r2, [pc, #100]	; (8005ce0 <HAL_DMA_Abort+0x270>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d132      	bne.n	8005ce4 <HAL_DMA_Abort+0x274>
 8005c7e:	2301      	movs	r3, #1
 8005c80:	e031      	b.n	8005ce6 <HAL_DMA_Abort+0x276>
 8005c82:	bf00      	nop
 8005c84:	40020010 	.word	0x40020010
 8005c88:	40020028 	.word	0x40020028
 8005c8c:	40020040 	.word	0x40020040
 8005c90:	40020058 	.word	0x40020058
 8005c94:	40020070 	.word	0x40020070
 8005c98:	40020088 	.word	0x40020088
 8005c9c:	400200a0 	.word	0x400200a0
 8005ca0:	400200b8 	.word	0x400200b8
 8005ca4:	40020410 	.word	0x40020410
 8005ca8:	40020428 	.word	0x40020428
 8005cac:	40020440 	.word	0x40020440
 8005cb0:	40020458 	.word	0x40020458
 8005cb4:	40020470 	.word	0x40020470
 8005cb8:	40020488 	.word	0x40020488
 8005cbc:	400204a0 	.word	0x400204a0
 8005cc0:	400204b8 	.word	0x400204b8
 8005cc4:	58025408 	.word	0x58025408
 8005cc8:	5802541c 	.word	0x5802541c
 8005ccc:	58025430 	.word	0x58025430
 8005cd0:	58025444 	.word	0x58025444
 8005cd4:	58025458 	.word	0x58025458
 8005cd8:	5802546c 	.word	0x5802546c
 8005cdc:	58025480 	.word	0x58025480
 8005ce0:	58025494 	.word	0x58025494
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d007      	beq.n	8005cfa <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cee:	681a      	ldr	r2, [r3, #0]
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cf4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005cf8:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4a6d      	ldr	r2, [pc, #436]	; (8005eb4 <HAL_DMA_Abort+0x444>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d04a      	beq.n	8005d9a <HAL_DMA_Abort+0x32a>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4a6b      	ldr	r2, [pc, #428]	; (8005eb8 <HAL_DMA_Abort+0x448>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d045      	beq.n	8005d9a <HAL_DMA_Abort+0x32a>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	4a6a      	ldr	r2, [pc, #424]	; (8005ebc <HAL_DMA_Abort+0x44c>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d040      	beq.n	8005d9a <HAL_DMA_Abort+0x32a>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a68      	ldr	r2, [pc, #416]	; (8005ec0 <HAL_DMA_Abort+0x450>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d03b      	beq.n	8005d9a <HAL_DMA_Abort+0x32a>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4a67      	ldr	r2, [pc, #412]	; (8005ec4 <HAL_DMA_Abort+0x454>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d036      	beq.n	8005d9a <HAL_DMA_Abort+0x32a>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a65      	ldr	r2, [pc, #404]	; (8005ec8 <HAL_DMA_Abort+0x458>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d031      	beq.n	8005d9a <HAL_DMA_Abort+0x32a>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4a64      	ldr	r2, [pc, #400]	; (8005ecc <HAL_DMA_Abort+0x45c>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d02c      	beq.n	8005d9a <HAL_DMA_Abort+0x32a>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4a62      	ldr	r2, [pc, #392]	; (8005ed0 <HAL_DMA_Abort+0x460>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d027      	beq.n	8005d9a <HAL_DMA_Abort+0x32a>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4a61      	ldr	r2, [pc, #388]	; (8005ed4 <HAL_DMA_Abort+0x464>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d022      	beq.n	8005d9a <HAL_DMA_Abort+0x32a>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4a5f      	ldr	r2, [pc, #380]	; (8005ed8 <HAL_DMA_Abort+0x468>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d01d      	beq.n	8005d9a <HAL_DMA_Abort+0x32a>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4a5e      	ldr	r2, [pc, #376]	; (8005edc <HAL_DMA_Abort+0x46c>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d018      	beq.n	8005d9a <HAL_DMA_Abort+0x32a>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4a5c      	ldr	r2, [pc, #368]	; (8005ee0 <HAL_DMA_Abort+0x470>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d013      	beq.n	8005d9a <HAL_DMA_Abort+0x32a>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4a5b      	ldr	r2, [pc, #364]	; (8005ee4 <HAL_DMA_Abort+0x474>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d00e      	beq.n	8005d9a <HAL_DMA_Abort+0x32a>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4a59      	ldr	r2, [pc, #356]	; (8005ee8 <HAL_DMA_Abort+0x478>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d009      	beq.n	8005d9a <HAL_DMA_Abort+0x32a>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4a58      	ldr	r2, [pc, #352]	; (8005eec <HAL_DMA_Abort+0x47c>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d004      	beq.n	8005d9a <HAL_DMA_Abort+0x32a>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a56      	ldr	r2, [pc, #344]	; (8005ef0 <HAL_DMA_Abort+0x480>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d108      	bne.n	8005dac <HAL_DMA_Abort+0x33c>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	681a      	ldr	r2, [r3, #0]
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f022 0201 	bic.w	r2, r2, #1
 8005da8:	601a      	str	r2, [r3, #0]
 8005daa:	e007      	b.n	8005dbc <HAL_DMA_Abort+0x34c>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	681a      	ldr	r2, [r3, #0]
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f022 0201 	bic.w	r2, r2, #1
 8005dba:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005dbc:	e013      	b.n	8005de6 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005dbe:	f7fd fea5 	bl	8003b0c <HAL_GetTick>
 8005dc2:	4602      	mov	r2, r0
 8005dc4:	693b      	ldr	r3, [r7, #16]
 8005dc6:	1ad3      	subs	r3, r2, r3
 8005dc8:	2b05      	cmp	r3, #5
 8005dca:	d90c      	bls.n	8005de6 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2220      	movs	r2, #32
 8005dd0:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2203      	movs	r2, #3
 8005dd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2200      	movs	r2, #0
 8005dde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8005de2:	2301      	movs	r3, #1
 8005de4:	e12d      	b.n	8006042 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005de6:	697b      	ldr	r3, [r7, #20]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f003 0301 	and.w	r3, r3, #1
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d1e5      	bne.n	8005dbe <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4a2f      	ldr	r2, [pc, #188]	; (8005eb4 <HAL_DMA_Abort+0x444>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d04a      	beq.n	8005e92 <HAL_DMA_Abort+0x422>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a2d      	ldr	r2, [pc, #180]	; (8005eb8 <HAL_DMA_Abort+0x448>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d045      	beq.n	8005e92 <HAL_DMA_Abort+0x422>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4a2c      	ldr	r2, [pc, #176]	; (8005ebc <HAL_DMA_Abort+0x44c>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d040      	beq.n	8005e92 <HAL_DMA_Abort+0x422>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4a2a      	ldr	r2, [pc, #168]	; (8005ec0 <HAL_DMA_Abort+0x450>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d03b      	beq.n	8005e92 <HAL_DMA_Abort+0x422>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4a29      	ldr	r2, [pc, #164]	; (8005ec4 <HAL_DMA_Abort+0x454>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d036      	beq.n	8005e92 <HAL_DMA_Abort+0x422>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4a27      	ldr	r2, [pc, #156]	; (8005ec8 <HAL_DMA_Abort+0x458>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d031      	beq.n	8005e92 <HAL_DMA_Abort+0x422>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4a26      	ldr	r2, [pc, #152]	; (8005ecc <HAL_DMA_Abort+0x45c>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d02c      	beq.n	8005e92 <HAL_DMA_Abort+0x422>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4a24      	ldr	r2, [pc, #144]	; (8005ed0 <HAL_DMA_Abort+0x460>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d027      	beq.n	8005e92 <HAL_DMA_Abort+0x422>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4a23      	ldr	r2, [pc, #140]	; (8005ed4 <HAL_DMA_Abort+0x464>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d022      	beq.n	8005e92 <HAL_DMA_Abort+0x422>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a21      	ldr	r2, [pc, #132]	; (8005ed8 <HAL_DMA_Abort+0x468>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d01d      	beq.n	8005e92 <HAL_DMA_Abort+0x422>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4a20      	ldr	r2, [pc, #128]	; (8005edc <HAL_DMA_Abort+0x46c>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d018      	beq.n	8005e92 <HAL_DMA_Abort+0x422>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4a1e      	ldr	r2, [pc, #120]	; (8005ee0 <HAL_DMA_Abort+0x470>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d013      	beq.n	8005e92 <HAL_DMA_Abort+0x422>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4a1d      	ldr	r2, [pc, #116]	; (8005ee4 <HAL_DMA_Abort+0x474>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d00e      	beq.n	8005e92 <HAL_DMA_Abort+0x422>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4a1b      	ldr	r2, [pc, #108]	; (8005ee8 <HAL_DMA_Abort+0x478>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d009      	beq.n	8005e92 <HAL_DMA_Abort+0x422>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a1a      	ldr	r2, [pc, #104]	; (8005eec <HAL_DMA_Abort+0x47c>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d004      	beq.n	8005e92 <HAL_DMA_Abort+0x422>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a18      	ldr	r2, [pc, #96]	; (8005ef0 <HAL_DMA_Abort+0x480>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d101      	bne.n	8005e96 <HAL_DMA_Abort+0x426>
 8005e92:	2301      	movs	r3, #1
 8005e94:	e000      	b.n	8005e98 <HAL_DMA_Abort+0x428>
 8005e96:	2300      	movs	r3, #0
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d02b      	beq.n	8005ef4 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ea0:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ea6:	f003 031f 	and.w	r3, r3, #31
 8005eaa:	223f      	movs	r2, #63	; 0x3f
 8005eac:	409a      	lsls	r2, r3
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	609a      	str	r2, [r3, #8]
 8005eb2:	e02a      	b.n	8005f0a <HAL_DMA_Abort+0x49a>
 8005eb4:	40020010 	.word	0x40020010
 8005eb8:	40020028 	.word	0x40020028
 8005ebc:	40020040 	.word	0x40020040
 8005ec0:	40020058 	.word	0x40020058
 8005ec4:	40020070 	.word	0x40020070
 8005ec8:	40020088 	.word	0x40020088
 8005ecc:	400200a0 	.word	0x400200a0
 8005ed0:	400200b8 	.word	0x400200b8
 8005ed4:	40020410 	.word	0x40020410
 8005ed8:	40020428 	.word	0x40020428
 8005edc:	40020440 	.word	0x40020440
 8005ee0:	40020458 	.word	0x40020458
 8005ee4:	40020470 	.word	0x40020470
 8005ee8:	40020488 	.word	0x40020488
 8005eec:	400204a0 	.word	0x400204a0
 8005ef0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ef8:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005efe:	f003 031f 	and.w	r3, r3, #31
 8005f02:	2201      	movs	r2, #1
 8005f04:	409a      	lsls	r2, r3
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4a4f      	ldr	r2, [pc, #316]	; (800604c <HAL_DMA_Abort+0x5dc>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d072      	beq.n	8005ffa <HAL_DMA_Abort+0x58a>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4a4d      	ldr	r2, [pc, #308]	; (8006050 <HAL_DMA_Abort+0x5e0>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d06d      	beq.n	8005ffa <HAL_DMA_Abort+0x58a>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4a4c      	ldr	r2, [pc, #304]	; (8006054 <HAL_DMA_Abort+0x5e4>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d068      	beq.n	8005ffa <HAL_DMA_Abort+0x58a>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4a4a      	ldr	r2, [pc, #296]	; (8006058 <HAL_DMA_Abort+0x5e8>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d063      	beq.n	8005ffa <HAL_DMA_Abort+0x58a>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4a49      	ldr	r2, [pc, #292]	; (800605c <HAL_DMA_Abort+0x5ec>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d05e      	beq.n	8005ffa <HAL_DMA_Abort+0x58a>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4a47      	ldr	r2, [pc, #284]	; (8006060 <HAL_DMA_Abort+0x5f0>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d059      	beq.n	8005ffa <HAL_DMA_Abort+0x58a>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4a46      	ldr	r2, [pc, #280]	; (8006064 <HAL_DMA_Abort+0x5f4>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d054      	beq.n	8005ffa <HAL_DMA_Abort+0x58a>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4a44      	ldr	r2, [pc, #272]	; (8006068 <HAL_DMA_Abort+0x5f8>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d04f      	beq.n	8005ffa <HAL_DMA_Abort+0x58a>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4a43      	ldr	r2, [pc, #268]	; (800606c <HAL_DMA_Abort+0x5fc>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d04a      	beq.n	8005ffa <HAL_DMA_Abort+0x58a>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4a41      	ldr	r2, [pc, #260]	; (8006070 <HAL_DMA_Abort+0x600>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d045      	beq.n	8005ffa <HAL_DMA_Abort+0x58a>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4a40      	ldr	r2, [pc, #256]	; (8006074 <HAL_DMA_Abort+0x604>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d040      	beq.n	8005ffa <HAL_DMA_Abort+0x58a>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a3e      	ldr	r2, [pc, #248]	; (8006078 <HAL_DMA_Abort+0x608>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d03b      	beq.n	8005ffa <HAL_DMA_Abort+0x58a>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4a3d      	ldr	r2, [pc, #244]	; (800607c <HAL_DMA_Abort+0x60c>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d036      	beq.n	8005ffa <HAL_DMA_Abort+0x58a>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4a3b      	ldr	r2, [pc, #236]	; (8006080 <HAL_DMA_Abort+0x610>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d031      	beq.n	8005ffa <HAL_DMA_Abort+0x58a>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a3a      	ldr	r2, [pc, #232]	; (8006084 <HAL_DMA_Abort+0x614>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d02c      	beq.n	8005ffa <HAL_DMA_Abort+0x58a>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a38      	ldr	r2, [pc, #224]	; (8006088 <HAL_DMA_Abort+0x618>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d027      	beq.n	8005ffa <HAL_DMA_Abort+0x58a>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4a37      	ldr	r2, [pc, #220]	; (800608c <HAL_DMA_Abort+0x61c>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d022      	beq.n	8005ffa <HAL_DMA_Abort+0x58a>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4a35      	ldr	r2, [pc, #212]	; (8006090 <HAL_DMA_Abort+0x620>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d01d      	beq.n	8005ffa <HAL_DMA_Abort+0x58a>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	4a34      	ldr	r2, [pc, #208]	; (8006094 <HAL_DMA_Abort+0x624>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d018      	beq.n	8005ffa <HAL_DMA_Abort+0x58a>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4a32      	ldr	r2, [pc, #200]	; (8006098 <HAL_DMA_Abort+0x628>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d013      	beq.n	8005ffa <HAL_DMA_Abort+0x58a>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4a31      	ldr	r2, [pc, #196]	; (800609c <HAL_DMA_Abort+0x62c>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d00e      	beq.n	8005ffa <HAL_DMA_Abort+0x58a>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4a2f      	ldr	r2, [pc, #188]	; (80060a0 <HAL_DMA_Abort+0x630>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d009      	beq.n	8005ffa <HAL_DMA_Abort+0x58a>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4a2e      	ldr	r2, [pc, #184]	; (80060a4 <HAL_DMA_Abort+0x634>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d004      	beq.n	8005ffa <HAL_DMA_Abort+0x58a>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4a2c      	ldr	r2, [pc, #176]	; (80060a8 <HAL_DMA_Abort+0x638>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d101      	bne.n	8005ffe <HAL_DMA_Abort+0x58e>
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	e000      	b.n	8006000 <HAL_DMA_Abort+0x590>
 8005ffe:	2300      	movs	r3, #0
 8006000:	2b00      	cmp	r3, #0
 8006002:	d015      	beq.n	8006030 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006008:	687a      	ldr	r2, [r7, #4]
 800600a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800600c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006012:	2b00      	cmp	r3, #0
 8006014:	d00c      	beq.n	8006030 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800601a:	681a      	ldr	r2, [r3, #0]
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006020:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006024:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800602a:	687a      	ldr	r2, [r7, #4]
 800602c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800602e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2201      	movs	r2, #1
 8006034:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2200      	movs	r2, #0
 800603c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8006040:	2300      	movs	r3, #0
}
 8006042:	4618      	mov	r0, r3
 8006044:	3718      	adds	r7, #24
 8006046:	46bd      	mov	sp, r7
 8006048:	bd80      	pop	{r7, pc}
 800604a:	bf00      	nop
 800604c:	40020010 	.word	0x40020010
 8006050:	40020028 	.word	0x40020028
 8006054:	40020040 	.word	0x40020040
 8006058:	40020058 	.word	0x40020058
 800605c:	40020070 	.word	0x40020070
 8006060:	40020088 	.word	0x40020088
 8006064:	400200a0 	.word	0x400200a0
 8006068:	400200b8 	.word	0x400200b8
 800606c:	40020410 	.word	0x40020410
 8006070:	40020428 	.word	0x40020428
 8006074:	40020440 	.word	0x40020440
 8006078:	40020458 	.word	0x40020458
 800607c:	40020470 	.word	0x40020470
 8006080:	40020488 	.word	0x40020488
 8006084:	400204a0 	.word	0x400204a0
 8006088:	400204b8 	.word	0x400204b8
 800608c:	58025408 	.word	0x58025408
 8006090:	5802541c 	.word	0x5802541c
 8006094:	58025430 	.word	0x58025430
 8006098:	58025444 	.word	0x58025444
 800609c:	58025458 	.word	0x58025458
 80060a0:	5802546c 	.word	0x5802546c
 80060a4:	58025480 	.word	0x58025480
 80060a8:	58025494 	.word	0x58025494

080060ac <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b084      	sub	sp, #16
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d101      	bne.n	80060be <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80060ba:	2301      	movs	r3, #1
 80060bc:	e237      	b.n	800652e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80060c4:	b2db      	uxtb	r3, r3
 80060c6:	2b02      	cmp	r3, #2
 80060c8:	d004      	beq.n	80060d4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2280      	movs	r2, #128	; 0x80
 80060ce:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80060d0:	2301      	movs	r3, #1
 80060d2:	e22c      	b.n	800652e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	4a5c      	ldr	r2, [pc, #368]	; (800624c <HAL_DMA_Abort_IT+0x1a0>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d04a      	beq.n	8006174 <HAL_DMA_Abort_IT+0xc8>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4a5b      	ldr	r2, [pc, #364]	; (8006250 <HAL_DMA_Abort_IT+0x1a4>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d045      	beq.n	8006174 <HAL_DMA_Abort_IT+0xc8>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4a59      	ldr	r2, [pc, #356]	; (8006254 <HAL_DMA_Abort_IT+0x1a8>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d040      	beq.n	8006174 <HAL_DMA_Abort_IT+0xc8>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4a58      	ldr	r2, [pc, #352]	; (8006258 <HAL_DMA_Abort_IT+0x1ac>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d03b      	beq.n	8006174 <HAL_DMA_Abort_IT+0xc8>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4a56      	ldr	r2, [pc, #344]	; (800625c <HAL_DMA_Abort_IT+0x1b0>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d036      	beq.n	8006174 <HAL_DMA_Abort_IT+0xc8>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4a55      	ldr	r2, [pc, #340]	; (8006260 <HAL_DMA_Abort_IT+0x1b4>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d031      	beq.n	8006174 <HAL_DMA_Abort_IT+0xc8>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4a53      	ldr	r2, [pc, #332]	; (8006264 <HAL_DMA_Abort_IT+0x1b8>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d02c      	beq.n	8006174 <HAL_DMA_Abort_IT+0xc8>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4a52      	ldr	r2, [pc, #328]	; (8006268 <HAL_DMA_Abort_IT+0x1bc>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d027      	beq.n	8006174 <HAL_DMA_Abort_IT+0xc8>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a50      	ldr	r2, [pc, #320]	; (800626c <HAL_DMA_Abort_IT+0x1c0>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d022      	beq.n	8006174 <HAL_DMA_Abort_IT+0xc8>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4a4f      	ldr	r2, [pc, #316]	; (8006270 <HAL_DMA_Abort_IT+0x1c4>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d01d      	beq.n	8006174 <HAL_DMA_Abort_IT+0xc8>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4a4d      	ldr	r2, [pc, #308]	; (8006274 <HAL_DMA_Abort_IT+0x1c8>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d018      	beq.n	8006174 <HAL_DMA_Abort_IT+0xc8>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4a4c      	ldr	r2, [pc, #304]	; (8006278 <HAL_DMA_Abort_IT+0x1cc>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d013      	beq.n	8006174 <HAL_DMA_Abort_IT+0xc8>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4a4a      	ldr	r2, [pc, #296]	; (800627c <HAL_DMA_Abort_IT+0x1d0>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d00e      	beq.n	8006174 <HAL_DMA_Abort_IT+0xc8>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4a49      	ldr	r2, [pc, #292]	; (8006280 <HAL_DMA_Abort_IT+0x1d4>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d009      	beq.n	8006174 <HAL_DMA_Abort_IT+0xc8>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4a47      	ldr	r2, [pc, #284]	; (8006284 <HAL_DMA_Abort_IT+0x1d8>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d004      	beq.n	8006174 <HAL_DMA_Abort_IT+0xc8>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4a46      	ldr	r2, [pc, #280]	; (8006288 <HAL_DMA_Abort_IT+0x1dc>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d101      	bne.n	8006178 <HAL_DMA_Abort_IT+0xcc>
 8006174:	2301      	movs	r3, #1
 8006176:	e000      	b.n	800617a <HAL_DMA_Abort_IT+0xce>
 8006178:	2300      	movs	r3, #0
 800617a:	2b00      	cmp	r3, #0
 800617c:	f000 8086 	beq.w	800628c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2204      	movs	r2, #4
 8006184:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a2f      	ldr	r2, [pc, #188]	; (800624c <HAL_DMA_Abort_IT+0x1a0>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d04a      	beq.n	8006228 <HAL_DMA_Abort_IT+0x17c>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4a2e      	ldr	r2, [pc, #184]	; (8006250 <HAL_DMA_Abort_IT+0x1a4>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d045      	beq.n	8006228 <HAL_DMA_Abort_IT+0x17c>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4a2c      	ldr	r2, [pc, #176]	; (8006254 <HAL_DMA_Abort_IT+0x1a8>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d040      	beq.n	8006228 <HAL_DMA_Abort_IT+0x17c>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a2b      	ldr	r2, [pc, #172]	; (8006258 <HAL_DMA_Abort_IT+0x1ac>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d03b      	beq.n	8006228 <HAL_DMA_Abort_IT+0x17c>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4a29      	ldr	r2, [pc, #164]	; (800625c <HAL_DMA_Abort_IT+0x1b0>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d036      	beq.n	8006228 <HAL_DMA_Abort_IT+0x17c>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4a28      	ldr	r2, [pc, #160]	; (8006260 <HAL_DMA_Abort_IT+0x1b4>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d031      	beq.n	8006228 <HAL_DMA_Abort_IT+0x17c>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4a26      	ldr	r2, [pc, #152]	; (8006264 <HAL_DMA_Abort_IT+0x1b8>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d02c      	beq.n	8006228 <HAL_DMA_Abort_IT+0x17c>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4a25      	ldr	r2, [pc, #148]	; (8006268 <HAL_DMA_Abort_IT+0x1bc>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d027      	beq.n	8006228 <HAL_DMA_Abort_IT+0x17c>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4a23      	ldr	r2, [pc, #140]	; (800626c <HAL_DMA_Abort_IT+0x1c0>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d022      	beq.n	8006228 <HAL_DMA_Abort_IT+0x17c>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a22      	ldr	r2, [pc, #136]	; (8006270 <HAL_DMA_Abort_IT+0x1c4>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d01d      	beq.n	8006228 <HAL_DMA_Abort_IT+0x17c>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a20      	ldr	r2, [pc, #128]	; (8006274 <HAL_DMA_Abort_IT+0x1c8>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d018      	beq.n	8006228 <HAL_DMA_Abort_IT+0x17c>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4a1f      	ldr	r2, [pc, #124]	; (8006278 <HAL_DMA_Abort_IT+0x1cc>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d013      	beq.n	8006228 <HAL_DMA_Abort_IT+0x17c>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a1d      	ldr	r2, [pc, #116]	; (800627c <HAL_DMA_Abort_IT+0x1d0>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d00e      	beq.n	8006228 <HAL_DMA_Abort_IT+0x17c>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a1c      	ldr	r2, [pc, #112]	; (8006280 <HAL_DMA_Abort_IT+0x1d4>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d009      	beq.n	8006228 <HAL_DMA_Abort_IT+0x17c>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a1a      	ldr	r2, [pc, #104]	; (8006284 <HAL_DMA_Abort_IT+0x1d8>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d004      	beq.n	8006228 <HAL_DMA_Abort_IT+0x17c>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a19      	ldr	r2, [pc, #100]	; (8006288 <HAL_DMA_Abort_IT+0x1dc>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d108      	bne.n	800623a <HAL_DMA_Abort_IT+0x18e>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	681a      	ldr	r2, [r3, #0]
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f022 0201 	bic.w	r2, r2, #1
 8006236:	601a      	str	r2, [r3, #0]
 8006238:	e178      	b.n	800652c <HAL_DMA_Abort_IT+0x480>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	681a      	ldr	r2, [r3, #0]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f022 0201 	bic.w	r2, r2, #1
 8006248:	601a      	str	r2, [r3, #0]
 800624a:	e16f      	b.n	800652c <HAL_DMA_Abort_IT+0x480>
 800624c:	40020010 	.word	0x40020010
 8006250:	40020028 	.word	0x40020028
 8006254:	40020040 	.word	0x40020040
 8006258:	40020058 	.word	0x40020058
 800625c:	40020070 	.word	0x40020070
 8006260:	40020088 	.word	0x40020088
 8006264:	400200a0 	.word	0x400200a0
 8006268:	400200b8 	.word	0x400200b8
 800626c:	40020410 	.word	0x40020410
 8006270:	40020428 	.word	0x40020428
 8006274:	40020440 	.word	0x40020440
 8006278:	40020458 	.word	0x40020458
 800627c:	40020470 	.word	0x40020470
 8006280:	40020488 	.word	0x40020488
 8006284:	400204a0 	.word	0x400204a0
 8006288:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	681a      	ldr	r2, [r3, #0]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f022 020e 	bic.w	r2, r2, #14
 800629a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a6c      	ldr	r2, [pc, #432]	; (8006454 <HAL_DMA_Abort_IT+0x3a8>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d04a      	beq.n	800633c <HAL_DMA_Abort_IT+0x290>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a6b      	ldr	r2, [pc, #428]	; (8006458 <HAL_DMA_Abort_IT+0x3ac>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d045      	beq.n	800633c <HAL_DMA_Abort_IT+0x290>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a69      	ldr	r2, [pc, #420]	; (800645c <HAL_DMA_Abort_IT+0x3b0>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d040      	beq.n	800633c <HAL_DMA_Abort_IT+0x290>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a68      	ldr	r2, [pc, #416]	; (8006460 <HAL_DMA_Abort_IT+0x3b4>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d03b      	beq.n	800633c <HAL_DMA_Abort_IT+0x290>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4a66      	ldr	r2, [pc, #408]	; (8006464 <HAL_DMA_Abort_IT+0x3b8>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d036      	beq.n	800633c <HAL_DMA_Abort_IT+0x290>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4a65      	ldr	r2, [pc, #404]	; (8006468 <HAL_DMA_Abort_IT+0x3bc>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d031      	beq.n	800633c <HAL_DMA_Abort_IT+0x290>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a63      	ldr	r2, [pc, #396]	; (800646c <HAL_DMA_Abort_IT+0x3c0>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d02c      	beq.n	800633c <HAL_DMA_Abort_IT+0x290>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a62      	ldr	r2, [pc, #392]	; (8006470 <HAL_DMA_Abort_IT+0x3c4>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d027      	beq.n	800633c <HAL_DMA_Abort_IT+0x290>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4a60      	ldr	r2, [pc, #384]	; (8006474 <HAL_DMA_Abort_IT+0x3c8>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d022      	beq.n	800633c <HAL_DMA_Abort_IT+0x290>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4a5f      	ldr	r2, [pc, #380]	; (8006478 <HAL_DMA_Abort_IT+0x3cc>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d01d      	beq.n	800633c <HAL_DMA_Abort_IT+0x290>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4a5d      	ldr	r2, [pc, #372]	; (800647c <HAL_DMA_Abort_IT+0x3d0>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d018      	beq.n	800633c <HAL_DMA_Abort_IT+0x290>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4a5c      	ldr	r2, [pc, #368]	; (8006480 <HAL_DMA_Abort_IT+0x3d4>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d013      	beq.n	800633c <HAL_DMA_Abort_IT+0x290>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4a5a      	ldr	r2, [pc, #360]	; (8006484 <HAL_DMA_Abort_IT+0x3d8>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d00e      	beq.n	800633c <HAL_DMA_Abort_IT+0x290>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4a59      	ldr	r2, [pc, #356]	; (8006488 <HAL_DMA_Abort_IT+0x3dc>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d009      	beq.n	800633c <HAL_DMA_Abort_IT+0x290>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4a57      	ldr	r2, [pc, #348]	; (800648c <HAL_DMA_Abort_IT+0x3e0>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d004      	beq.n	800633c <HAL_DMA_Abort_IT+0x290>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4a56      	ldr	r2, [pc, #344]	; (8006490 <HAL_DMA_Abort_IT+0x3e4>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d108      	bne.n	800634e <HAL_DMA_Abort_IT+0x2a2>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	681a      	ldr	r2, [r3, #0]
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f022 0201 	bic.w	r2, r2, #1
 800634a:	601a      	str	r2, [r3, #0]
 800634c:	e007      	b.n	800635e <HAL_DMA_Abort_IT+0x2b2>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	681a      	ldr	r2, [r3, #0]
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f022 0201 	bic.w	r2, r2, #1
 800635c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	4a3c      	ldr	r2, [pc, #240]	; (8006454 <HAL_DMA_Abort_IT+0x3a8>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d072      	beq.n	800644e <HAL_DMA_Abort_IT+0x3a2>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4a3a      	ldr	r2, [pc, #232]	; (8006458 <HAL_DMA_Abort_IT+0x3ac>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d06d      	beq.n	800644e <HAL_DMA_Abort_IT+0x3a2>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4a39      	ldr	r2, [pc, #228]	; (800645c <HAL_DMA_Abort_IT+0x3b0>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d068      	beq.n	800644e <HAL_DMA_Abort_IT+0x3a2>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4a37      	ldr	r2, [pc, #220]	; (8006460 <HAL_DMA_Abort_IT+0x3b4>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d063      	beq.n	800644e <HAL_DMA_Abort_IT+0x3a2>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4a36      	ldr	r2, [pc, #216]	; (8006464 <HAL_DMA_Abort_IT+0x3b8>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d05e      	beq.n	800644e <HAL_DMA_Abort_IT+0x3a2>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4a34      	ldr	r2, [pc, #208]	; (8006468 <HAL_DMA_Abort_IT+0x3bc>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d059      	beq.n	800644e <HAL_DMA_Abort_IT+0x3a2>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	4a33      	ldr	r2, [pc, #204]	; (800646c <HAL_DMA_Abort_IT+0x3c0>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d054      	beq.n	800644e <HAL_DMA_Abort_IT+0x3a2>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4a31      	ldr	r2, [pc, #196]	; (8006470 <HAL_DMA_Abort_IT+0x3c4>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d04f      	beq.n	800644e <HAL_DMA_Abort_IT+0x3a2>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4a30      	ldr	r2, [pc, #192]	; (8006474 <HAL_DMA_Abort_IT+0x3c8>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d04a      	beq.n	800644e <HAL_DMA_Abort_IT+0x3a2>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4a2e      	ldr	r2, [pc, #184]	; (8006478 <HAL_DMA_Abort_IT+0x3cc>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d045      	beq.n	800644e <HAL_DMA_Abort_IT+0x3a2>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4a2d      	ldr	r2, [pc, #180]	; (800647c <HAL_DMA_Abort_IT+0x3d0>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d040      	beq.n	800644e <HAL_DMA_Abort_IT+0x3a2>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	4a2b      	ldr	r2, [pc, #172]	; (8006480 <HAL_DMA_Abort_IT+0x3d4>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d03b      	beq.n	800644e <HAL_DMA_Abort_IT+0x3a2>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4a2a      	ldr	r2, [pc, #168]	; (8006484 <HAL_DMA_Abort_IT+0x3d8>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d036      	beq.n	800644e <HAL_DMA_Abort_IT+0x3a2>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4a28      	ldr	r2, [pc, #160]	; (8006488 <HAL_DMA_Abort_IT+0x3dc>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d031      	beq.n	800644e <HAL_DMA_Abort_IT+0x3a2>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	4a27      	ldr	r2, [pc, #156]	; (800648c <HAL_DMA_Abort_IT+0x3e0>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d02c      	beq.n	800644e <HAL_DMA_Abort_IT+0x3a2>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4a25      	ldr	r2, [pc, #148]	; (8006490 <HAL_DMA_Abort_IT+0x3e4>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d027      	beq.n	800644e <HAL_DMA_Abort_IT+0x3a2>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	4a24      	ldr	r2, [pc, #144]	; (8006494 <HAL_DMA_Abort_IT+0x3e8>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d022      	beq.n	800644e <HAL_DMA_Abort_IT+0x3a2>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	4a22      	ldr	r2, [pc, #136]	; (8006498 <HAL_DMA_Abort_IT+0x3ec>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d01d      	beq.n	800644e <HAL_DMA_Abort_IT+0x3a2>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	4a21      	ldr	r2, [pc, #132]	; (800649c <HAL_DMA_Abort_IT+0x3f0>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d018      	beq.n	800644e <HAL_DMA_Abort_IT+0x3a2>
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4a1f      	ldr	r2, [pc, #124]	; (80064a0 <HAL_DMA_Abort_IT+0x3f4>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d013      	beq.n	800644e <HAL_DMA_Abort_IT+0x3a2>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4a1e      	ldr	r2, [pc, #120]	; (80064a4 <HAL_DMA_Abort_IT+0x3f8>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d00e      	beq.n	800644e <HAL_DMA_Abort_IT+0x3a2>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4a1c      	ldr	r2, [pc, #112]	; (80064a8 <HAL_DMA_Abort_IT+0x3fc>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d009      	beq.n	800644e <HAL_DMA_Abort_IT+0x3a2>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4a1b      	ldr	r2, [pc, #108]	; (80064ac <HAL_DMA_Abort_IT+0x400>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d004      	beq.n	800644e <HAL_DMA_Abort_IT+0x3a2>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4a19      	ldr	r2, [pc, #100]	; (80064b0 <HAL_DMA_Abort_IT+0x404>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d132      	bne.n	80064b4 <HAL_DMA_Abort_IT+0x408>
 800644e:	2301      	movs	r3, #1
 8006450:	e031      	b.n	80064b6 <HAL_DMA_Abort_IT+0x40a>
 8006452:	bf00      	nop
 8006454:	40020010 	.word	0x40020010
 8006458:	40020028 	.word	0x40020028
 800645c:	40020040 	.word	0x40020040
 8006460:	40020058 	.word	0x40020058
 8006464:	40020070 	.word	0x40020070
 8006468:	40020088 	.word	0x40020088
 800646c:	400200a0 	.word	0x400200a0
 8006470:	400200b8 	.word	0x400200b8
 8006474:	40020410 	.word	0x40020410
 8006478:	40020428 	.word	0x40020428
 800647c:	40020440 	.word	0x40020440
 8006480:	40020458 	.word	0x40020458
 8006484:	40020470 	.word	0x40020470
 8006488:	40020488 	.word	0x40020488
 800648c:	400204a0 	.word	0x400204a0
 8006490:	400204b8 	.word	0x400204b8
 8006494:	58025408 	.word	0x58025408
 8006498:	5802541c 	.word	0x5802541c
 800649c:	58025430 	.word	0x58025430
 80064a0:	58025444 	.word	0x58025444
 80064a4:	58025458 	.word	0x58025458
 80064a8:	5802546c 	.word	0x5802546c
 80064ac:	58025480 	.word	0x58025480
 80064b0:	58025494 	.word	0x58025494
 80064b4:	2300      	movs	r3, #0
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d028      	beq.n	800650c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064be:	681a      	ldr	r2, [r3, #0]
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80064c8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064ce:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064d4:	f003 031f 	and.w	r3, r3, #31
 80064d8:	2201      	movs	r2, #1
 80064da:	409a      	lsls	r2, r3
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80064e4:	687a      	ldr	r2, [r7, #4]
 80064e6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80064e8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d00c      	beq.n	800650c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064f6:	681a      	ldr	r2, [r3, #0]
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006500:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006506:	687a      	ldr	r2, [r7, #4]
 8006508:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800650a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2201      	movs	r2, #1
 8006510:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2200      	movs	r2, #0
 8006518:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006520:	2b00      	cmp	r3, #0
 8006522:	d003      	beq.n	800652c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006528:	6878      	ldr	r0, [r7, #4]
 800652a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800652c:	2300      	movs	r3, #0
}
 800652e:	4618      	mov	r0, r3
 8006530:	3710      	adds	r7, #16
 8006532:	46bd      	mov	sp, r7
 8006534:	bd80      	pop	{r7, pc}
 8006536:	bf00      	nop

08006538 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b08a      	sub	sp, #40	; 0x28
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8006540:	2300      	movs	r3, #0
 8006542:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006544:	4b67      	ldr	r3, [pc, #412]	; (80066e4 <HAL_DMA_IRQHandler+0x1ac>)
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	4a67      	ldr	r2, [pc, #412]	; (80066e8 <HAL_DMA_IRQHandler+0x1b0>)
 800654a:	fba2 2303 	umull	r2, r3, r2, r3
 800654e:	0a9b      	lsrs	r3, r3, #10
 8006550:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006556:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800655c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800655e:	6a3b      	ldr	r3, [r7, #32]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8006564:	69fb      	ldr	r3, [r7, #28]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4a5f      	ldr	r2, [pc, #380]	; (80066ec <HAL_DMA_IRQHandler+0x1b4>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d04a      	beq.n	800660a <HAL_DMA_IRQHandler+0xd2>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a5d      	ldr	r2, [pc, #372]	; (80066f0 <HAL_DMA_IRQHandler+0x1b8>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d045      	beq.n	800660a <HAL_DMA_IRQHandler+0xd2>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4a5c      	ldr	r2, [pc, #368]	; (80066f4 <HAL_DMA_IRQHandler+0x1bc>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d040      	beq.n	800660a <HAL_DMA_IRQHandler+0xd2>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4a5a      	ldr	r2, [pc, #360]	; (80066f8 <HAL_DMA_IRQHandler+0x1c0>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d03b      	beq.n	800660a <HAL_DMA_IRQHandler+0xd2>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4a59      	ldr	r2, [pc, #356]	; (80066fc <HAL_DMA_IRQHandler+0x1c4>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d036      	beq.n	800660a <HAL_DMA_IRQHandler+0xd2>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4a57      	ldr	r2, [pc, #348]	; (8006700 <HAL_DMA_IRQHandler+0x1c8>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d031      	beq.n	800660a <HAL_DMA_IRQHandler+0xd2>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4a56      	ldr	r2, [pc, #344]	; (8006704 <HAL_DMA_IRQHandler+0x1cc>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d02c      	beq.n	800660a <HAL_DMA_IRQHandler+0xd2>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a54      	ldr	r2, [pc, #336]	; (8006708 <HAL_DMA_IRQHandler+0x1d0>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d027      	beq.n	800660a <HAL_DMA_IRQHandler+0xd2>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4a53      	ldr	r2, [pc, #332]	; (800670c <HAL_DMA_IRQHandler+0x1d4>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d022      	beq.n	800660a <HAL_DMA_IRQHandler+0xd2>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4a51      	ldr	r2, [pc, #324]	; (8006710 <HAL_DMA_IRQHandler+0x1d8>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d01d      	beq.n	800660a <HAL_DMA_IRQHandler+0xd2>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4a50      	ldr	r2, [pc, #320]	; (8006714 <HAL_DMA_IRQHandler+0x1dc>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d018      	beq.n	800660a <HAL_DMA_IRQHandler+0xd2>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	4a4e      	ldr	r2, [pc, #312]	; (8006718 <HAL_DMA_IRQHandler+0x1e0>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d013      	beq.n	800660a <HAL_DMA_IRQHandler+0xd2>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	4a4d      	ldr	r2, [pc, #308]	; (800671c <HAL_DMA_IRQHandler+0x1e4>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d00e      	beq.n	800660a <HAL_DMA_IRQHandler+0xd2>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4a4b      	ldr	r2, [pc, #300]	; (8006720 <HAL_DMA_IRQHandler+0x1e8>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d009      	beq.n	800660a <HAL_DMA_IRQHandler+0xd2>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4a4a      	ldr	r2, [pc, #296]	; (8006724 <HAL_DMA_IRQHandler+0x1ec>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d004      	beq.n	800660a <HAL_DMA_IRQHandler+0xd2>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	4a48      	ldr	r2, [pc, #288]	; (8006728 <HAL_DMA_IRQHandler+0x1f0>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d101      	bne.n	800660e <HAL_DMA_IRQHandler+0xd6>
 800660a:	2301      	movs	r3, #1
 800660c:	e000      	b.n	8006610 <HAL_DMA_IRQHandler+0xd8>
 800660e:	2300      	movs	r3, #0
 8006610:	2b00      	cmp	r3, #0
 8006612:	f000 842b 	beq.w	8006e6c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800661a:	f003 031f 	and.w	r3, r3, #31
 800661e:	2208      	movs	r2, #8
 8006620:	409a      	lsls	r2, r3
 8006622:	69bb      	ldr	r3, [r7, #24]
 8006624:	4013      	ands	r3, r2
 8006626:	2b00      	cmp	r3, #0
 8006628:	f000 80a2 	beq.w	8006770 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4a2e      	ldr	r2, [pc, #184]	; (80066ec <HAL_DMA_IRQHandler+0x1b4>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d04a      	beq.n	80066cc <HAL_DMA_IRQHandler+0x194>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4a2d      	ldr	r2, [pc, #180]	; (80066f0 <HAL_DMA_IRQHandler+0x1b8>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d045      	beq.n	80066cc <HAL_DMA_IRQHandler+0x194>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4a2b      	ldr	r2, [pc, #172]	; (80066f4 <HAL_DMA_IRQHandler+0x1bc>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d040      	beq.n	80066cc <HAL_DMA_IRQHandler+0x194>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	4a2a      	ldr	r2, [pc, #168]	; (80066f8 <HAL_DMA_IRQHandler+0x1c0>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d03b      	beq.n	80066cc <HAL_DMA_IRQHandler+0x194>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a28      	ldr	r2, [pc, #160]	; (80066fc <HAL_DMA_IRQHandler+0x1c4>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d036      	beq.n	80066cc <HAL_DMA_IRQHandler+0x194>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4a27      	ldr	r2, [pc, #156]	; (8006700 <HAL_DMA_IRQHandler+0x1c8>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d031      	beq.n	80066cc <HAL_DMA_IRQHandler+0x194>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4a25      	ldr	r2, [pc, #148]	; (8006704 <HAL_DMA_IRQHandler+0x1cc>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d02c      	beq.n	80066cc <HAL_DMA_IRQHandler+0x194>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	4a24      	ldr	r2, [pc, #144]	; (8006708 <HAL_DMA_IRQHandler+0x1d0>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d027      	beq.n	80066cc <HAL_DMA_IRQHandler+0x194>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4a22      	ldr	r2, [pc, #136]	; (800670c <HAL_DMA_IRQHandler+0x1d4>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d022      	beq.n	80066cc <HAL_DMA_IRQHandler+0x194>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	4a21      	ldr	r2, [pc, #132]	; (8006710 <HAL_DMA_IRQHandler+0x1d8>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d01d      	beq.n	80066cc <HAL_DMA_IRQHandler+0x194>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	4a1f      	ldr	r2, [pc, #124]	; (8006714 <HAL_DMA_IRQHandler+0x1dc>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d018      	beq.n	80066cc <HAL_DMA_IRQHandler+0x194>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	4a1e      	ldr	r2, [pc, #120]	; (8006718 <HAL_DMA_IRQHandler+0x1e0>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d013      	beq.n	80066cc <HAL_DMA_IRQHandler+0x194>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4a1c      	ldr	r2, [pc, #112]	; (800671c <HAL_DMA_IRQHandler+0x1e4>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d00e      	beq.n	80066cc <HAL_DMA_IRQHandler+0x194>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4a1b      	ldr	r2, [pc, #108]	; (8006720 <HAL_DMA_IRQHandler+0x1e8>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d009      	beq.n	80066cc <HAL_DMA_IRQHandler+0x194>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	4a19      	ldr	r2, [pc, #100]	; (8006724 <HAL_DMA_IRQHandler+0x1ec>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d004      	beq.n	80066cc <HAL_DMA_IRQHandler+0x194>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	4a18      	ldr	r2, [pc, #96]	; (8006728 <HAL_DMA_IRQHandler+0x1f0>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d12f      	bne.n	800672c <HAL_DMA_IRQHandler+0x1f4>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f003 0304 	and.w	r3, r3, #4
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	bf14      	ite	ne
 80066da:	2301      	movne	r3, #1
 80066dc:	2300      	moveq	r3, #0
 80066de:	b2db      	uxtb	r3, r3
 80066e0:	e02e      	b.n	8006740 <HAL_DMA_IRQHandler+0x208>
 80066e2:	bf00      	nop
 80066e4:	24000000 	.word	0x24000000
 80066e8:	1b4e81b5 	.word	0x1b4e81b5
 80066ec:	40020010 	.word	0x40020010
 80066f0:	40020028 	.word	0x40020028
 80066f4:	40020040 	.word	0x40020040
 80066f8:	40020058 	.word	0x40020058
 80066fc:	40020070 	.word	0x40020070
 8006700:	40020088 	.word	0x40020088
 8006704:	400200a0 	.word	0x400200a0
 8006708:	400200b8 	.word	0x400200b8
 800670c:	40020410 	.word	0x40020410
 8006710:	40020428 	.word	0x40020428
 8006714:	40020440 	.word	0x40020440
 8006718:	40020458 	.word	0x40020458
 800671c:	40020470 	.word	0x40020470
 8006720:	40020488 	.word	0x40020488
 8006724:	400204a0 	.word	0x400204a0
 8006728:	400204b8 	.word	0x400204b8
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f003 0308 	and.w	r3, r3, #8
 8006736:	2b00      	cmp	r3, #0
 8006738:	bf14      	ite	ne
 800673a:	2301      	movne	r3, #1
 800673c:	2300      	moveq	r3, #0
 800673e:	b2db      	uxtb	r3, r3
 8006740:	2b00      	cmp	r3, #0
 8006742:	d015      	beq.n	8006770 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	681a      	ldr	r2, [r3, #0]
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f022 0204 	bic.w	r2, r2, #4
 8006752:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006758:	f003 031f 	and.w	r3, r3, #31
 800675c:	2208      	movs	r2, #8
 800675e:	409a      	lsls	r2, r3
 8006760:	6a3b      	ldr	r3, [r7, #32]
 8006762:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006768:	f043 0201 	orr.w	r2, r3, #1
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006774:	f003 031f 	and.w	r3, r3, #31
 8006778:	69ba      	ldr	r2, [r7, #24]
 800677a:	fa22 f303 	lsr.w	r3, r2, r3
 800677e:	f003 0301 	and.w	r3, r3, #1
 8006782:	2b00      	cmp	r3, #0
 8006784:	d06e      	beq.n	8006864 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	4a69      	ldr	r2, [pc, #420]	; (8006930 <HAL_DMA_IRQHandler+0x3f8>)
 800678c:	4293      	cmp	r3, r2
 800678e:	d04a      	beq.n	8006826 <HAL_DMA_IRQHandler+0x2ee>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	4a67      	ldr	r2, [pc, #412]	; (8006934 <HAL_DMA_IRQHandler+0x3fc>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d045      	beq.n	8006826 <HAL_DMA_IRQHandler+0x2ee>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4a66      	ldr	r2, [pc, #408]	; (8006938 <HAL_DMA_IRQHandler+0x400>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d040      	beq.n	8006826 <HAL_DMA_IRQHandler+0x2ee>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	4a64      	ldr	r2, [pc, #400]	; (800693c <HAL_DMA_IRQHandler+0x404>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d03b      	beq.n	8006826 <HAL_DMA_IRQHandler+0x2ee>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	4a63      	ldr	r2, [pc, #396]	; (8006940 <HAL_DMA_IRQHandler+0x408>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d036      	beq.n	8006826 <HAL_DMA_IRQHandler+0x2ee>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	4a61      	ldr	r2, [pc, #388]	; (8006944 <HAL_DMA_IRQHandler+0x40c>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d031      	beq.n	8006826 <HAL_DMA_IRQHandler+0x2ee>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	4a60      	ldr	r2, [pc, #384]	; (8006948 <HAL_DMA_IRQHandler+0x410>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d02c      	beq.n	8006826 <HAL_DMA_IRQHandler+0x2ee>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4a5e      	ldr	r2, [pc, #376]	; (800694c <HAL_DMA_IRQHandler+0x414>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d027      	beq.n	8006826 <HAL_DMA_IRQHandler+0x2ee>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	4a5d      	ldr	r2, [pc, #372]	; (8006950 <HAL_DMA_IRQHandler+0x418>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d022      	beq.n	8006826 <HAL_DMA_IRQHandler+0x2ee>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	4a5b      	ldr	r2, [pc, #364]	; (8006954 <HAL_DMA_IRQHandler+0x41c>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d01d      	beq.n	8006826 <HAL_DMA_IRQHandler+0x2ee>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	4a5a      	ldr	r2, [pc, #360]	; (8006958 <HAL_DMA_IRQHandler+0x420>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d018      	beq.n	8006826 <HAL_DMA_IRQHandler+0x2ee>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	4a58      	ldr	r2, [pc, #352]	; (800695c <HAL_DMA_IRQHandler+0x424>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d013      	beq.n	8006826 <HAL_DMA_IRQHandler+0x2ee>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	4a57      	ldr	r2, [pc, #348]	; (8006960 <HAL_DMA_IRQHandler+0x428>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d00e      	beq.n	8006826 <HAL_DMA_IRQHandler+0x2ee>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	4a55      	ldr	r2, [pc, #340]	; (8006964 <HAL_DMA_IRQHandler+0x42c>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d009      	beq.n	8006826 <HAL_DMA_IRQHandler+0x2ee>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	4a54      	ldr	r2, [pc, #336]	; (8006968 <HAL_DMA_IRQHandler+0x430>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d004      	beq.n	8006826 <HAL_DMA_IRQHandler+0x2ee>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4a52      	ldr	r2, [pc, #328]	; (800696c <HAL_DMA_IRQHandler+0x434>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d10a      	bne.n	800683c <HAL_DMA_IRQHandler+0x304>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	695b      	ldr	r3, [r3, #20]
 800682c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006830:	2b00      	cmp	r3, #0
 8006832:	bf14      	ite	ne
 8006834:	2301      	movne	r3, #1
 8006836:	2300      	moveq	r3, #0
 8006838:	b2db      	uxtb	r3, r3
 800683a:	e003      	b.n	8006844 <HAL_DMA_IRQHandler+0x30c>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	2300      	movs	r3, #0
 8006844:	2b00      	cmp	r3, #0
 8006846:	d00d      	beq.n	8006864 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800684c:	f003 031f 	and.w	r3, r3, #31
 8006850:	2201      	movs	r2, #1
 8006852:	409a      	lsls	r2, r3
 8006854:	6a3b      	ldr	r3, [r7, #32]
 8006856:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800685c:	f043 0202 	orr.w	r2, r3, #2
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006868:	f003 031f 	and.w	r3, r3, #31
 800686c:	2204      	movs	r2, #4
 800686e:	409a      	lsls	r2, r3
 8006870:	69bb      	ldr	r3, [r7, #24]
 8006872:	4013      	ands	r3, r2
 8006874:	2b00      	cmp	r3, #0
 8006876:	f000 808f 	beq.w	8006998 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	4a2c      	ldr	r2, [pc, #176]	; (8006930 <HAL_DMA_IRQHandler+0x3f8>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d04a      	beq.n	800691a <HAL_DMA_IRQHandler+0x3e2>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4a2a      	ldr	r2, [pc, #168]	; (8006934 <HAL_DMA_IRQHandler+0x3fc>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d045      	beq.n	800691a <HAL_DMA_IRQHandler+0x3e2>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	4a29      	ldr	r2, [pc, #164]	; (8006938 <HAL_DMA_IRQHandler+0x400>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d040      	beq.n	800691a <HAL_DMA_IRQHandler+0x3e2>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4a27      	ldr	r2, [pc, #156]	; (800693c <HAL_DMA_IRQHandler+0x404>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d03b      	beq.n	800691a <HAL_DMA_IRQHandler+0x3e2>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	4a26      	ldr	r2, [pc, #152]	; (8006940 <HAL_DMA_IRQHandler+0x408>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d036      	beq.n	800691a <HAL_DMA_IRQHandler+0x3e2>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	4a24      	ldr	r2, [pc, #144]	; (8006944 <HAL_DMA_IRQHandler+0x40c>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d031      	beq.n	800691a <HAL_DMA_IRQHandler+0x3e2>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4a23      	ldr	r2, [pc, #140]	; (8006948 <HAL_DMA_IRQHandler+0x410>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d02c      	beq.n	800691a <HAL_DMA_IRQHandler+0x3e2>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	4a21      	ldr	r2, [pc, #132]	; (800694c <HAL_DMA_IRQHandler+0x414>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d027      	beq.n	800691a <HAL_DMA_IRQHandler+0x3e2>
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	4a20      	ldr	r2, [pc, #128]	; (8006950 <HAL_DMA_IRQHandler+0x418>)
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d022      	beq.n	800691a <HAL_DMA_IRQHandler+0x3e2>
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	4a1e      	ldr	r2, [pc, #120]	; (8006954 <HAL_DMA_IRQHandler+0x41c>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d01d      	beq.n	800691a <HAL_DMA_IRQHandler+0x3e2>
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	4a1d      	ldr	r2, [pc, #116]	; (8006958 <HAL_DMA_IRQHandler+0x420>)
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d018      	beq.n	800691a <HAL_DMA_IRQHandler+0x3e2>
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	4a1b      	ldr	r2, [pc, #108]	; (800695c <HAL_DMA_IRQHandler+0x424>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d013      	beq.n	800691a <HAL_DMA_IRQHandler+0x3e2>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	4a1a      	ldr	r2, [pc, #104]	; (8006960 <HAL_DMA_IRQHandler+0x428>)
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d00e      	beq.n	800691a <HAL_DMA_IRQHandler+0x3e2>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	4a18      	ldr	r2, [pc, #96]	; (8006964 <HAL_DMA_IRQHandler+0x42c>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d009      	beq.n	800691a <HAL_DMA_IRQHandler+0x3e2>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	4a17      	ldr	r2, [pc, #92]	; (8006968 <HAL_DMA_IRQHandler+0x430>)
 800690c:	4293      	cmp	r3, r2
 800690e:	d004      	beq.n	800691a <HAL_DMA_IRQHandler+0x3e2>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	4a15      	ldr	r2, [pc, #84]	; (800696c <HAL_DMA_IRQHandler+0x434>)
 8006916:	4293      	cmp	r3, r2
 8006918:	d12a      	bne.n	8006970 <HAL_DMA_IRQHandler+0x438>
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f003 0302 	and.w	r3, r3, #2
 8006924:	2b00      	cmp	r3, #0
 8006926:	bf14      	ite	ne
 8006928:	2301      	movne	r3, #1
 800692a:	2300      	moveq	r3, #0
 800692c:	b2db      	uxtb	r3, r3
 800692e:	e023      	b.n	8006978 <HAL_DMA_IRQHandler+0x440>
 8006930:	40020010 	.word	0x40020010
 8006934:	40020028 	.word	0x40020028
 8006938:	40020040 	.word	0x40020040
 800693c:	40020058 	.word	0x40020058
 8006940:	40020070 	.word	0x40020070
 8006944:	40020088 	.word	0x40020088
 8006948:	400200a0 	.word	0x400200a0
 800694c:	400200b8 	.word	0x400200b8
 8006950:	40020410 	.word	0x40020410
 8006954:	40020428 	.word	0x40020428
 8006958:	40020440 	.word	0x40020440
 800695c:	40020458 	.word	0x40020458
 8006960:	40020470 	.word	0x40020470
 8006964:	40020488 	.word	0x40020488
 8006968:	400204a0 	.word	0x400204a0
 800696c:	400204b8 	.word	0x400204b8
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	2300      	movs	r3, #0
 8006978:	2b00      	cmp	r3, #0
 800697a:	d00d      	beq.n	8006998 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006980:	f003 031f 	and.w	r3, r3, #31
 8006984:	2204      	movs	r2, #4
 8006986:	409a      	lsls	r2, r3
 8006988:	6a3b      	ldr	r3, [r7, #32]
 800698a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006990:	f043 0204 	orr.w	r2, r3, #4
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800699c:	f003 031f 	and.w	r3, r3, #31
 80069a0:	2210      	movs	r2, #16
 80069a2:	409a      	lsls	r2, r3
 80069a4:	69bb      	ldr	r3, [r7, #24]
 80069a6:	4013      	ands	r3, r2
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	f000 80a6 	beq.w	8006afa <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	4a85      	ldr	r2, [pc, #532]	; (8006bc8 <HAL_DMA_IRQHandler+0x690>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d04a      	beq.n	8006a4e <HAL_DMA_IRQHandler+0x516>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	4a83      	ldr	r2, [pc, #524]	; (8006bcc <HAL_DMA_IRQHandler+0x694>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d045      	beq.n	8006a4e <HAL_DMA_IRQHandler+0x516>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	4a82      	ldr	r2, [pc, #520]	; (8006bd0 <HAL_DMA_IRQHandler+0x698>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d040      	beq.n	8006a4e <HAL_DMA_IRQHandler+0x516>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4a80      	ldr	r2, [pc, #512]	; (8006bd4 <HAL_DMA_IRQHandler+0x69c>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d03b      	beq.n	8006a4e <HAL_DMA_IRQHandler+0x516>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4a7f      	ldr	r2, [pc, #508]	; (8006bd8 <HAL_DMA_IRQHandler+0x6a0>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d036      	beq.n	8006a4e <HAL_DMA_IRQHandler+0x516>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a7d      	ldr	r2, [pc, #500]	; (8006bdc <HAL_DMA_IRQHandler+0x6a4>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d031      	beq.n	8006a4e <HAL_DMA_IRQHandler+0x516>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4a7c      	ldr	r2, [pc, #496]	; (8006be0 <HAL_DMA_IRQHandler+0x6a8>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d02c      	beq.n	8006a4e <HAL_DMA_IRQHandler+0x516>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4a7a      	ldr	r2, [pc, #488]	; (8006be4 <HAL_DMA_IRQHandler+0x6ac>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d027      	beq.n	8006a4e <HAL_DMA_IRQHandler+0x516>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	4a79      	ldr	r2, [pc, #484]	; (8006be8 <HAL_DMA_IRQHandler+0x6b0>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d022      	beq.n	8006a4e <HAL_DMA_IRQHandler+0x516>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4a77      	ldr	r2, [pc, #476]	; (8006bec <HAL_DMA_IRQHandler+0x6b4>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d01d      	beq.n	8006a4e <HAL_DMA_IRQHandler+0x516>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4a76      	ldr	r2, [pc, #472]	; (8006bf0 <HAL_DMA_IRQHandler+0x6b8>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d018      	beq.n	8006a4e <HAL_DMA_IRQHandler+0x516>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4a74      	ldr	r2, [pc, #464]	; (8006bf4 <HAL_DMA_IRQHandler+0x6bc>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d013      	beq.n	8006a4e <HAL_DMA_IRQHandler+0x516>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4a73      	ldr	r2, [pc, #460]	; (8006bf8 <HAL_DMA_IRQHandler+0x6c0>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d00e      	beq.n	8006a4e <HAL_DMA_IRQHandler+0x516>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4a71      	ldr	r2, [pc, #452]	; (8006bfc <HAL_DMA_IRQHandler+0x6c4>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d009      	beq.n	8006a4e <HAL_DMA_IRQHandler+0x516>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4a70      	ldr	r2, [pc, #448]	; (8006c00 <HAL_DMA_IRQHandler+0x6c8>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d004      	beq.n	8006a4e <HAL_DMA_IRQHandler+0x516>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	4a6e      	ldr	r2, [pc, #440]	; (8006c04 <HAL_DMA_IRQHandler+0x6cc>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d10a      	bne.n	8006a64 <HAL_DMA_IRQHandler+0x52c>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f003 0308 	and.w	r3, r3, #8
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	bf14      	ite	ne
 8006a5c:	2301      	movne	r3, #1
 8006a5e:	2300      	moveq	r3, #0
 8006a60:	b2db      	uxtb	r3, r3
 8006a62:	e009      	b.n	8006a78 <HAL_DMA_IRQHandler+0x540>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f003 0304 	and.w	r3, r3, #4
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	bf14      	ite	ne
 8006a72:	2301      	movne	r3, #1
 8006a74:	2300      	moveq	r3, #0
 8006a76:	b2db      	uxtb	r3, r3
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d03e      	beq.n	8006afa <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a80:	f003 031f 	and.w	r3, r3, #31
 8006a84:	2210      	movs	r2, #16
 8006a86:	409a      	lsls	r2, r3
 8006a88:	6a3b      	ldr	r3, [r7, #32]
 8006a8a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d018      	beq.n	8006acc <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d108      	bne.n	8006aba <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d024      	beq.n	8006afa <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ab4:	6878      	ldr	r0, [r7, #4]
 8006ab6:	4798      	blx	r3
 8006ab8:	e01f      	b.n	8006afa <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d01b      	beq.n	8006afa <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	4798      	blx	r3
 8006aca:	e016      	b.n	8006afa <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d107      	bne.n	8006aea <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	681a      	ldr	r2, [r3, #0]
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f022 0208 	bic.w	r2, r2, #8
 8006ae8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d003      	beq.n	8006afa <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006afe:	f003 031f 	and.w	r3, r3, #31
 8006b02:	2220      	movs	r2, #32
 8006b04:	409a      	lsls	r2, r3
 8006b06:	69bb      	ldr	r3, [r7, #24]
 8006b08:	4013      	ands	r3, r2
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	f000 8110 	beq.w	8006d30 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	4a2c      	ldr	r2, [pc, #176]	; (8006bc8 <HAL_DMA_IRQHandler+0x690>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d04a      	beq.n	8006bb0 <HAL_DMA_IRQHandler+0x678>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	4a2b      	ldr	r2, [pc, #172]	; (8006bcc <HAL_DMA_IRQHandler+0x694>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d045      	beq.n	8006bb0 <HAL_DMA_IRQHandler+0x678>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	4a29      	ldr	r2, [pc, #164]	; (8006bd0 <HAL_DMA_IRQHandler+0x698>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d040      	beq.n	8006bb0 <HAL_DMA_IRQHandler+0x678>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4a28      	ldr	r2, [pc, #160]	; (8006bd4 <HAL_DMA_IRQHandler+0x69c>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d03b      	beq.n	8006bb0 <HAL_DMA_IRQHandler+0x678>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	4a26      	ldr	r2, [pc, #152]	; (8006bd8 <HAL_DMA_IRQHandler+0x6a0>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d036      	beq.n	8006bb0 <HAL_DMA_IRQHandler+0x678>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4a25      	ldr	r2, [pc, #148]	; (8006bdc <HAL_DMA_IRQHandler+0x6a4>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d031      	beq.n	8006bb0 <HAL_DMA_IRQHandler+0x678>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4a23      	ldr	r2, [pc, #140]	; (8006be0 <HAL_DMA_IRQHandler+0x6a8>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d02c      	beq.n	8006bb0 <HAL_DMA_IRQHandler+0x678>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4a22      	ldr	r2, [pc, #136]	; (8006be4 <HAL_DMA_IRQHandler+0x6ac>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d027      	beq.n	8006bb0 <HAL_DMA_IRQHandler+0x678>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	4a20      	ldr	r2, [pc, #128]	; (8006be8 <HAL_DMA_IRQHandler+0x6b0>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d022      	beq.n	8006bb0 <HAL_DMA_IRQHandler+0x678>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	4a1f      	ldr	r2, [pc, #124]	; (8006bec <HAL_DMA_IRQHandler+0x6b4>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d01d      	beq.n	8006bb0 <HAL_DMA_IRQHandler+0x678>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4a1d      	ldr	r2, [pc, #116]	; (8006bf0 <HAL_DMA_IRQHandler+0x6b8>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d018      	beq.n	8006bb0 <HAL_DMA_IRQHandler+0x678>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	4a1c      	ldr	r2, [pc, #112]	; (8006bf4 <HAL_DMA_IRQHandler+0x6bc>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d013      	beq.n	8006bb0 <HAL_DMA_IRQHandler+0x678>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4a1a      	ldr	r2, [pc, #104]	; (8006bf8 <HAL_DMA_IRQHandler+0x6c0>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d00e      	beq.n	8006bb0 <HAL_DMA_IRQHandler+0x678>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4a19      	ldr	r2, [pc, #100]	; (8006bfc <HAL_DMA_IRQHandler+0x6c4>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d009      	beq.n	8006bb0 <HAL_DMA_IRQHandler+0x678>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4a17      	ldr	r2, [pc, #92]	; (8006c00 <HAL_DMA_IRQHandler+0x6c8>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d004      	beq.n	8006bb0 <HAL_DMA_IRQHandler+0x678>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	4a16      	ldr	r2, [pc, #88]	; (8006c04 <HAL_DMA_IRQHandler+0x6cc>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d12b      	bne.n	8006c08 <HAL_DMA_IRQHandler+0x6d0>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f003 0310 	and.w	r3, r3, #16
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	bf14      	ite	ne
 8006bbe:	2301      	movne	r3, #1
 8006bc0:	2300      	moveq	r3, #0
 8006bc2:	b2db      	uxtb	r3, r3
 8006bc4:	e02a      	b.n	8006c1c <HAL_DMA_IRQHandler+0x6e4>
 8006bc6:	bf00      	nop
 8006bc8:	40020010 	.word	0x40020010
 8006bcc:	40020028 	.word	0x40020028
 8006bd0:	40020040 	.word	0x40020040
 8006bd4:	40020058 	.word	0x40020058
 8006bd8:	40020070 	.word	0x40020070
 8006bdc:	40020088 	.word	0x40020088
 8006be0:	400200a0 	.word	0x400200a0
 8006be4:	400200b8 	.word	0x400200b8
 8006be8:	40020410 	.word	0x40020410
 8006bec:	40020428 	.word	0x40020428
 8006bf0:	40020440 	.word	0x40020440
 8006bf4:	40020458 	.word	0x40020458
 8006bf8:	40020470 	.word	0x40020470
 8006bfc:	40020488 	.word	0x40020488
 8006c00:	400204a0 	.word	0x400204a0
 8006c04:	400204b8 	.word	0x400204b8
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f003 0302 	and.w	r3, r3, #2
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	bf14      	ite	ne
 8006c16:	2301      	movne	r3, #1
 8006c18:	2300      	moveq	r3, #0
 8006c1a:	b2db      	uxtb	r3, r3
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	f000 8087 	beq.w	8006d30 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c26:	f003 031f 	and.w	r3, r3, #31
 8006c2a:	2220      	movs	r2, #32
 8006c2c:	409a      	lsls	r2, r3
 8006c2e:	6a3b      	ldr	r3, [r7, #32]
 8006c30:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006c38:	b2db      	uxtb	r3, r3
 8006c3a:	2b04      	cmp	r3, #4
 8006c3c:	d139      	bne.n	8006cb2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	681a      	ldr	r2, [r3, #0]
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f022 0216 	bic.w	r2, r2, #22
 8006c4c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	695a      	ldr	r2, [r3, #20]
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006c5c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d103      	bne.n	8006c6e <HAL_DMA_IRQHandler+0x736>
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d007      	beq.n	8006c7e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	681a      	ldr	r2, [r3, #0]
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f022 0208 	bic.w	r2, r2, #8
 8006c7c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c82:	f003 031f 	and.w	r3, r3, #31
 8006c86:	223f      	movs	r2, #63	; 0x3f
 8006c88:	409a      	lsls	r2, r3
 8006c8a:	6a3b      	ldr	r3, [r7, #32]
 8006c8c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2201      	movs	r2, #1
 8006c92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	f000 834a 	beq.w	800733c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	4798      	blx	r3
          }
          return;
 8006cb0:	e344      	b.n	800733c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d018      	beq.n	8006cf2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d108      	bne.n	8006ce0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d02c      	beq.n	8006d30 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cda:	6878      	ldr	r0, [r7, #4]
 8006cdc:	4798      	blx	r3
 8006cde:	e027      	b.n	8006d30 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d023      	beq.n	8006d30 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cec:	6878      	ldr	r0, [r7, #4]
 8006cee:	4798      	blx	r3
 8006cf0:	e01e      	b.n	8006d30 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d10f      	bne.n	8006d20 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	681a      	ldr	r2, [r3, #0]
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f022 0210 	bic.w	r2, r2, #16
 8006d0e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2201      	movs	r2, #1
 8006d14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d003      	beq.n	8006d30 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d2c:	6878      	ldr	r0, [r7, #4]
 8006d2e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	f000 8306 	beq.w	8007346 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d3e:	f003 0301 	and.w	r3, r3, #1
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	f000 8088 	beq.w	8006e58 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2204      	movs	r2, #4
 8006d4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	4a7a      	ldr	r2, [pc, #488]	; (8006f40 <HAL_DMA_IRQHandler+0xa08>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d04a      	beq.n	8006df0 <HAL_DMA_IRQHandler+0x8b8>
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	4a79      	ldr	r2, [pc, #484]	; (8006f44 <HAL_DMA_IRQHandler+0xa0c>)
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d045      	beq.n	8006df0 <HAL_DMA_IRQHandler+0x8b8>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	4a77      	ldr	r2, [pc, #476]	; (8006f48 <HAL_DMA_IRQHandler+0xa10>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d040      	beq.n	8006df0 <HAL_DMA_IRQHandler+0x8b8>
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	4a76      	ldr	r2, [pc, #472]	; (8006f4c <HAL_DMA_IRQHandler+0xa14>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d03b      	beq.n	8006df0 <HAL_DMA_IRQHandler+0x8b8>
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	4a74      	ldr	r2, [pc, #464]	; (8006f50 <HAL_DMA_IRQHandler+0xa18>)
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	d036      	beq.n	8006df0 <HAL_DMA_IRQHandler+0x8b8>
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	4a73      	ldr	r2, [pc, #460]	; (8006f54 <HAL_DMA_IRQHandler+0xa1c>)
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	d031      	beq.n	8006df0 <HAL_DMA_IRQHandler+0x8b8>
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	4a71      	ldr	r2, [pc, #452]	; (8006f58 <HAL_DMA_IRQHandler+0xa20>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d02c      	beq.n	8006df0 <HAL_DMA_IRQHandler+0x8b8>
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	4a70      	ldr	r2, [pc, #448]	; (8006f5c <HAL_DMA_IRQHandler+0xa24>)
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d027      	beq.n	8006df0 <HAL_DMA_IRQHandler+0x8b8>
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	4a6e      	ldr	r2, [pc, #440]	; (8006f60 <HAL_DMA_IRQHandler+0xa28>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d022      	beq.n	8006df0 <HAL_DMA_IRQHandler+0x8b8>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	4a6d      	ldr	r2, [pc, #436]	; (8006f64 <HAL_DMA_IRQHandler+0xa2c>)
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d01d      	beq.n	8006df0 <HAL_DMA_IRQHandler+0x8b8>
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	4a6b      	ldr	r2, [pc, #428]	; (8006f68 <HAL_DMA_IRQHandler+0xa30>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d018      	beq.n	8006df0 <HAL_DMA_IRQHandler+0x8b8>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	4a6a      	ldr	r2, [pc, #424]	; (8006f6c <HAL_DMA_IRQHandler+0xa34>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d013      	beq.n	8006df0 <HAL_DMA_IRQHandler+0x8b8>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4a68      	ldr	r2, [pc, #416]	; (8006f70 <HAL_DMA_IRQHandler+0xa38>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d00e      	beq.n	8006df0 <HAL_DMA_IRQHandler+0x8b8>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4a67      	ldr	r2, [pc, #412]	; (8006f74 <HAL_DMA_IRQHandler+0xa3c>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d009      	beq.n	8006df0 <HAL_DMA_IRQHandler+0x8b8>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4a65      	ldr	r2, [pc, #404]	; (8006f78 <HAL_DMA_IRQHandler+0xa40>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d004      	beq.n	8006df0 <HAL_DMA_IRQHandler+0x8b8>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4a64      	ldr	r2, [pc, #400]	; (8006f7c <HAL_DMA_IRQHandler+0xa44>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d108      	bne.n	8006e02 <HAL_DMA_IRQHandler+0x8ca>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	681a      	ldr	r2, [r3, #0]
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f022 0201 	bic.w	r2, r2, #1
 8006dfe:	601a      	str	r2, [r3, #0]
 8006e00:	e007      	b.n	8006e12 <HAL_DMA_IRQHandler+0x8da>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	681a      	ldr	r2, [r3, #0]
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f022 0201 	bic.w	r2, r2, #1
 8006e10:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	3301      	adds	r3, #1
 8006e16:	60fb      	str	r3, [r7, #12]
 8006e18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e1a:	429a      	cmp	r2, r3
 8006e1c:	d307      	bcc.n	8006e2e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f003 0301 	and.w	r3, r3, #1
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d1f2      	bne.n	8006e12 <HAL_DMA_IRQHandler+0x8da>
 8006e2c:	e000      	b.n	8006e30 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8006e2e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f003 0301 	and.w	r3, r3, #1
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d004      	beq.n	8006e48 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2203      	movs	r2, #3
 8006e42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8006e46:	e003      	b.n	8006e50 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2201      	movs	r2, #1
 8006e4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2200      	movs	r2, #0
 8006e54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	f000 8272 	beq.w	8007346 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	4798      	blx	r3
 8006e6a:	e26c      	b.n	8007346 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	4a43      	ldr	r2, [pc, #268]	; (8006f80 <HAL_DMA_IRQHandler+0xa48>)
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d022      	beq.n	8006ebc <HAL_DMA_IRQHandler+0x984>
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	4a42      	ldr	r2, [pc, #264]	; (8006f84 <HAL_DMA_IRQHandler+0xa4c>)
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d01d      	beq.n	8006ebc <HAL_DMA_IRQHandler+0x984>
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	4a40      	ldr	r2, [pc, #256]	; (8006f88 <HAL_DMA_IRQHandler+0xa50>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d018      	beq.n	8006ebc <HAL_DMA_IRQHandler+0x984>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	4a3f      	ldr	r2, [pc, #252]	; (8006f8c <HAL_DMA_IRQHandler+0xa54>)
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d013      	beq.n	8006ebc <HAL_DMA_IRQHandler+0x984>
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	4a3d      	ldr	r2, [pc, #244]	; (8006f90 <HAL_DMA_IRQHandler+0xa58>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d00e      	beq.n	8006ebc <HAL_DMA_IRQHandler+0x984>
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	4a3c      	ldr	r2, [pc, #240]	; (8006f94 <HAL_DMA_IRQHandler+0xa5c>)
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d009      	beq.n	8006ebc <HAL_DMA_IRQHandler+0x984>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	4a3a      	ldr	r2, [pc, #232]	; (8006f98 <HAL_DMA_IRQHandler+0xa60>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d004      	beq.n	8006ebc <HAL_DMA_IRQHandler+0x984>
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	4a39      	ldr	r2, [pc, #228]	; (8006f9c <HAL_DMA_IRQHandler+0xa64>)
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	d101      	bne.n	8006ec0 <HAL_DMA_IRQHandler+0x988>
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	e000      	b.n	8006ec2 <HAL_DMA_IRQHandler+0x98a>
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	f000 823f 	beq.w	8007346 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ed4:	f003 031f 	and.w	r3, r3, #31
 8006ed8:	2204      	movs	r2, #4
 8006eda:	409a      	lsls	r2, r3
 8006edc:	697b      	ldr	r3, [r7, #20]
 8006ede:	4013      	ands	r3, r2
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	f000 80cd 	beq.w	8007080 <HAL_DMA_IRQHandler+0xb48>
 8006ee6:	693b      	ldr	r3, [r7, #16]
 8006ee8:	f003 0304 	and.w	r3, r3, #4
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	f000 80c7 	beq.w	8007080 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ef6:	f003 031f 	and.w	r3, r3, #31
 8006efa:	2204      	movs	r2, #4
 8006efc:	409a      	lsls	r2, r3
 8006efe:	69fb      	ldr	r3, [r7, #28]
 8006f00:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006f02:	693b      	ldr	r3, [r7, #16]
 8006f04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d049      	beq.n	8006fa0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006f0c:	693b      	ldr	r3, [r7, #16]
 8006f0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d109      	bne.n	8006f2a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	f000 8210 	beq.w	8007340 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f24:	6878      	ldr	r0, [r7, #4]
 8006f26:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006f28:	e20a      	b.n	8007340 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	f000 8206 	beq.w	8007340 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f38:	6878      	ldr	r0, [r7, #4]
 8006f3a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006f3c:	e200      	b.n	8007340 <HAL_DMA_IRQHandler+0xe08>
 8006f3e:	bf00      	nop
 8006f40:	40020010 	.word	0x40020010
 8006f44:	40020028 	.word	0x40020028
 8006f48:	40020040 	.word	0x40020040
 8006f4c:	40020058 	.word	0x40020058
 8006f50:	40020070 	.word	0x40020070
 8006f54:	40020088 	.word	0x40020088
 8006f58:	400200a0 	.word	0x400200a0
 8006f5c:	400200b8 	.word	0x400200b8
 8006f60:	40020410 	.word	0x40020410
 8006f64:	40020428 	.word	0x40020428
 8006f68:	40020440 	.word	0x40020440
 8006f6c:	40020458 	.word	0x40020458
 8006f70:	40020470 	.word	0x40020470
 8006f74:	40020488 	.word	0x40020488
 8006f78:	400204a0 	.word	0x400204a0
 8006f7c:	400204b8 	.word	0x400204b8
 8006f80:	58025408 	.word	0x58025408
 8006f84:	5802541c 	.word	0x5802541c
 8006f88:	58025430 	.word	0x58025430
 8006f8c:	58025444 	.word	0x58025444
 8006f90:	58025458 	.word	0x58025458
 8006f94:	5802546c 	.word	0x5802546c
 8006f98:	58025480 	.word	0x58025480
 8006f9c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006fa0:	693b      	ldr	r3, [r7, #16]
 8006fa2:	f003 0320 	and.w	r3, r3, #32
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d160      	bne.n	800706c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	4a7f      	ldr	r2, [pc, #508]	; (80071ac <HAL_DMA_IRQHandler+0xc74>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d04a      	beq.n	800704a <HAL_DMA_IRQHandler+0xb12>
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	4a7d      	ldr	r2, [pc, #500]	; (80071b0 <HAL_DMA_IRQHandler+0xc78>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d045      	beq.n	800704a <HAL_DMA_IRQHandler+0xb12>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	4a7c      	ldr	r2, [pc, #496]	; (80071b4 <HAL_DMA_IRQHandler+0xc7c>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d040      	beq.n	800704a <HAL_DMA_IRQHandler+0xb12>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	4a7a      	ldr	r2, [pc, #488]	; (80071b8 <HAL_DMA_IRQHandler+0xc80>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d03b      	beq.n	800704a <HAL_DMA_IRQHandler+0xb12>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	4a79      	ldr	r2, [pc, #484]	; (80071bc <HAL_DMA_IRQHandler+0xc84>)
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d036      	beq.n	800704a <HAL_DMA_IRQHandler+0xb12>
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	4a77      	ldr	r2, [pc, #476]	; (80071c0 <HAL_DMA_IRQHandler+0xc88>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d031      	beq.n	800704a <HAL_DMA_IRQHandler+0xb12>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4a76      	ldr	r2, [pc, #472]	; (80071c4 <HAL_DMA_IRQHandler+0xc8c>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d02c      	beq.n	800704a <HAL_DMA_IRQHandler+0xb12>
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	4a74      	ldr	r2, [pc, #464]	; (80071c8 <HAL_DMA_IRQHandler+0xc90>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d027      	beq.n	800704a <HAL_DMA_IRQHandler+0xb12>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	4a73      	ldr	r2, [pc, #460]	; (80071cc <HAL_DMA_IRQHandler+0xc94>)
 8007000:	4293      	cmp	r3, r2
 8007002:	d022      	beq.n	800704a <HAL_DMA_IRQHandler+0xb12>
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	4a71      	ldr	r2, [pc, #452]	; (80071d0 <HAL_DMA_IRQHandler+0xc98>)
 800700a:	4293      	cmp	r3, r2
 800700c:	d01d      	beq.n	800704a <HAL_DMA_IRQHandler+0xb12>
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	4a70      	ldr	r2, [pc, #448]	; (80071d4 <HAL_DMA_IRQHandler+0xc9c>)
 8007014:	4293      	cmp	r3, r2
 8007016:	d018      	beq.n	800704a <HAL_DMA_IRQHandler+0xb12>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4a6e      	ldr	r2, [pc, #440]	; (80071d8 <HAL_DMA_IRQHandler+0xca0>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d013      	beq.n	800704a <HAL_DMA_IRQHandler+0xb12>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	4a6d      	ldr	r2, [pc, #436]	; (80071dc <HAL_DMA_IRQHandler+0xca4>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d00e      	beq.n	800704a <HAL_DMA_IRQHandler+0xb12>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	4a6b      	ldr	r2, [pc, #428]	; (80071e0 <HAL_DMA_IRQHandler+0xca8>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d009      	beq.n	800704a <HAL_DMA_IRQHandler+0xb12>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4a6a      	ldr	r2, [pc, #424]	; (80071e4 <HAL_DMA_IRQHandler+0xcac>)
 800703c:	4293      	cmp	r3, r2
 800703e:	d004      	beq.n	800704a <HAL_DMA_IRQHandler+0xb12>
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	4a68      	ldr	r2, [pc, #416]	; (80071e8 <HAL_DMA_IRQHandler+0xcb0>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d108      	bne.n	800705c <HAL_DMA_IRQHandler+0xb24>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	681a      	ldr	r2, [r3, #0]
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f022 0208 	bic.w	r2, r2, #8
 8007058:	601a      	str	r2, [r3, #0]
 800705a:	e007      	b.n	800706c <HAL_DMA_IRQHandler+0xb34>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	681a      	ldr	r2, [r3, #0]
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f022 0204 	bic.w	r2, r2, #4
 800706a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007070:	2b00      	cmp	r3, #0
 8007072:	f000 8165 	beq.w	8007340 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800707e:	e15f      	b.n	8007340 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007084:	f003 031f 	and.w	r3, r3, #31
 8007088:	2202      	movs	r2, #2
 800708a:	409a      	lsls	r2, r3
 800708c:	697b      	ldr	r3, [r7, #20]
 800708e:	4013      	ands	r3, r2
 8007090:	2b00      	cmp	r3, #0
 8007092:	f000 80c5 	beq.w	8007220 <HAL_DMA_IRQHandler+0xce8>
 8007096:	693b      	ldr	r3, [r7, #16]
 8007098:	f003 0302 	and.w	r3, r3, #2
 800709c:	2b00      	cmp	r3, #0
 800709e:	f000 80bf 	beq.w	8007220 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070a6:	f003 031f 	and.w	r3, r3, #31
 80070aa:	2202      	movs	r2, #2
 80070ac:	409a      	lsls	r2, r3
 80070ae:	69fb      	ldr	r3, [r7, #28]
 80070b0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80070b2:	693b      	ldr	r3, [r7, #16]
 80070b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d018      	beq.n	80070ee <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80070bc:	693b      	ldr	r3, [r7, #16]
 80070be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d109      	bne.n	80070da <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	f000 813a 	beq.w	8007344 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070d4:	6878      	ldr	r0, [r7, #4]
 80070d6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80070d8:	e134      	b.n	8007344 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070de:	2b00      	cmp	r3, #0
 80070e0:	f000 8130 	beq.w	8007344 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070e8:	6878      	ldr	r0, [r7, #4]
 80070ea:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80070ec:	e12a      	b.n	8007344 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80070ee:	693b      	ldr	r3, [r7, #16]
 80070f0:	f003 0320 	and.w	r3, r3, #32
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	f040 8089 	bne.w	800720c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	4a2b      	ldr	r2, [pc, #172]	; (80071ac <HAL_DMA_IRQHandler+0xc74>)
 8007100:	4293      	cmp	r3, r2
 8007102:	d04a      	beq.n	800719a <HAL_DMA_IRQHandler+0xc62>
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	4a29      	ldr	r2, [pc, #164]	; (80071b0 <HAL_DMA_IRQHandler+0xc78>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d045      	beq.n	800719a <HAL_DMA_IRQHandler+0xc62>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	4a28      	ldr	r2, [pc, #160]	; (80071b4 <HAL_DMA_IRQHandler+0xc7c>)
 8007114:	4293      	cmp	r3, r2
 8007116:	d040      	beq.n	800719a <HAL_DMA_IRQHandler+0xc62>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	4a26      	ldr	r2, [pc, #152]	; (80071b8 <HAL_DMA_IRQHandler+0xc80>)
 800711e:	4293      	cmp	r3, r2
 8007120:	d03b      	beq.n	800719a <HAL_DMA_IRQHandler+0xc62>
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	4a25      	ldr	r2, [pc, #148]	; (80071bc <HAL_DMA_IRQHandler+0xc84>)
 8007128:	4293      	cmp	r3, r2
 800712a:	d036      	beq.n	800719a <HAL_DMA_IRQHandler+0xc62>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	4a23      	ldr	r2, [pc, #140]	; (80071c0 <HAL_DMA_IRQHandler+0xc88>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d031      	beq.n	800719a <HAL_DMA_IRQHandler+0xc62>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	4a22      	ldr	r2, [pc, #136]	; (80071c4 <HAL_DMA_IRQHandler+0xc8c>)
 800713c:	4293      	cmp	r3, r2
 800713e:	d02c      	beq.n	800719a <HAL_DMA_IRQHandler+0xc62>
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	4a20      	ldr	r2, [pc, #128]	; (80071c8 <HAL_DMA_IRQHandler+0xc90>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d027      	beq.n	800719a <HAL_DMA_IRQHandler+0xc62>
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	4a1f      	ldr	r2, [pc, #124]	; (80071cc <HAL_DMA_IRQHandler+0xc94>)
 8007150:	4293      	cmp	r3, r2
 8007152:	d022      	beq.n	800719a <HAL_DMA_IRQHandler+0xc62>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	4a1d      	ldr	r2, [pc, #116]	; (80071d0 <HAL_DMA_IRQHandler+0xc98>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d01d      	beq.n	800719a <HAL_DMA_IRQHandler+0xc62>
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	4a1c      	ldr	r2, [pc, #112]	; (80071d4 <HAL_DMA_IRQHandler+0xc9c>)
 8007164:	4293      	cmp	r3, r2
 8007166:	d018      	beq.n	800719a <HAL_DMA_IRQHandler+0xc62>
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	4a1a      	ldr	r2, [pc, #104]	; (80071d8 <HAL_DMA_IRQHandler+0xca0>)
 800716e:	4293      	cmp	r3, r2
 8007170:	d013      	beq.n	800719a <HAL_DMA_IRQHandler+0xc62>
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	4a19      	ldr	r2, [pc, #100]	; (80071dc <HAL_DMA_IRQHandler+0xca4>)
 8007178:	4293      	cmp	r3, r2
 800717a:	d00e      	beq.n	800719a <HAL_DMA_IRQHandler+0xc62>
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	4a17      	ldr	r2, [pc, #92]	; (80071e0 <HAL_DMA_IRQHandler+0xca8>)
 8007182:	4293      	cmp	r3, r2
 8007184:	d009      	beq.n	800719a <HAL_DMA_IRQHandler+0xc62>
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	4a16      	ldr	r2, [pc, #88]	; (80071e4 <HAL_DMA_IRQHandler+0xcac>)
 800718c:	4293      	cmp	r3, r2
 800718e:	d004      	beq.n	800719a <HAL_DMA_IRQHandler+0xc62>
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	4a14      	ldr	r2, [pc, #80]	; (80071e8 <HAL_DMA_IRQHandler+0xcb0>)
 8007196:	4293      	cmp	r3, r2
 8007198:	d128      	bne.n	80071ec <HAL_DMA_IRQHandler+0xcb4>
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	681a      	ldr	r2, [r3, #0]
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f022 0214 	bic.w	r2, r2, #20
 80071a8:	601a      	str	r2, [r3, #0]
 80071aa:	e027      	b.n	80071fc <HAL_DMA_IRQHandler+0xcc4>
 80071ac:	40020010 	.word	0x40020010
 80071b0:	40020028 	.word	0x40020028
 80071b4:	40020040 	.word	0x40020040
 80071b8:	40020058 	.word	0x40020058
 80071bc:	40020070 	.word	0x40020070
 80071c0:	40020088 	.word	0x40020088
 80071c4:	400200a0 	.word	0x400200a0
 80071c8:	400200b8 	.word	0x400200b8
 80071cc:	40020410 	.word	0x40020410
 80071d0:	40020428 	.word	0x40020428
 80071d4:	40020440 	.word	0x40020440
 80071d8:	40020458 	.word	0x40020458
 80071dc:	40020470 	.word	0x40020470
 80071e0:	40020488 	.word	0x40020488
 80071e4:	400204a0 	.word	0x400204a0
 80071e8:	400204b8 	.word	0x400204b8
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	681a      	ldr	r2, [r3, #0]
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f022 020a 	bic.w	r2, r2, #10
 80071fa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2201      	movs	r2, #1
 8007200:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2200      	movs	r2, #0
 8007208:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007210:	2b00      	cmp	r3, #0
 8007212:	f000 8097 	beq.w	8007344 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800721e:	e091      	b.n	8007344 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007224:	f003 031f 	and.w	r3, r3, #31
 8007228:	2208      	movs	r2, #8
 800722a:	409a      	lsls	r2, r3
 800722c:	697b      	ldr	r3, [r7, #20]
 800722e:	4013      	ands	r3, r2
 8007230:	2b00      	cmp	r3, #0
 8007232:	f000 8088 	beq.w	8007346 <HAL_DMA_IRQHandler+0xe0e>
 8007236:	693b      	ldr	r3, [r7, #16]
 8007238:	f003 0308 	and.w	r3, r3, #8
 800723c:	2b00      	cmp	r3, #0
 800723e:	f000 8082 	beq.w	8007346 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	4a41      	ldr	r2, [pc, #260]	; (800734c <HAL_DMA_IRQHandler+0xe14>)
 8007248:	4293      	cmp	r3, r2
 800724a:	d04a      	beq.n	80072e2 <HAL_DMA_IRQHandler+0xdaa>
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	4a3f      	ldr	r2, [pc, #252]	; (8007350 <HAL_DMA_IRQHandler+0xe18>)
 8007252:	4293      	cmp	r3, r2
 8007254:	d045      	beq.n	80072e2 <HAL_DMA_IRQHandler+0xdaa>
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	4a3e      	ldr	r2, [pc, #248]	; (8007354 <HAL_DMA_IRQHandler+0xe1c>)
 800725c:	4293      	cmp	r3, r2
 800725e:	d040      	beq.n	80072e2 <HAL_DMA_IRQHandler+0xdaa>
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	4a3c      	ldr	r2, [pc, #240]	; (8007358 <HAL_DMA_IRQHandler+0xe20>)
 8007266:	4293      	cmp	r3, r2
 8007268:	d03b      	beq.n	80072e2 <HAL_DMA_IRQHandler+0xdaa>
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	4a3b      	ldr	r2, [pc, #236]	; (800735c <HAL_DMA_IRQHandler+0xe24>)
 8007270:	4293      	cmp	r3, r2
 8007272:	d036      	beq.n	80072e2 <HAL_DMA_IRQHandler+0xdaa>
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	4a39      	ldr	r2, [pc, #228]	; (8007360 <HAL_DMA_IRQHandler+0xe28>)
 800727a:	4293      	cmp	r3, r2
 800727c:	d031      	beq.n	80072e2 <HAL_DMA_IRQHandler+0xdaa>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	4a38      	ldr	r2, [pc, #224]	; (8007364 <HAL_DMA_IRQHandler+0xe2c>)
 8007284:	4293      	cmp	r3, r2
 8007286:	d02c      	beq.n	80072e2 <HAL_DMA_IRQHandler+0xdaa>
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	4a36      	ldr	r2, [pc, #216]	; (8007368 <HAL_DMA_IRQHandler+0xe30>)
 800728e:	4293      	cmp	r3, r2
 8007290:	d027      	beq.n	80072e2 <HAL_DMA_IRQHandler+0xdaa>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	4a35      	ldr	r2, [pc, #212]	; (800736c <HAL_DMA_IRQHandler+0xe34>)
 8007298:	4293      	cmp	r3, r2
 800729a:	d022      	beq.n	80072e2 <HAL_DMA_IRQHandler+0xdaa>
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	4a33      	ldr	r2, [pc, #204]	; (8007370 <HAL_DMA_IRQHandler+0xe38>)
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d01d      	beq.n	80072e2 <HAL_DMA_IRQHandler+0xdaa>
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	4a32      	ldr	r2, [pc, #200]	; (8007374 <HAL_DMA_IRQHandler+0xe3c>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d018      	beq.n	80072e2 <HAL_DMA_IRQHandler+0xdaa>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	4a30      	ldr	r2, [pc, #192]	; (8007378 <HAL_DMA_IRQHandler+0xe40>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d013      	beq.n	80072e2 <HAL_DMA_IRQHandler+0xdaa>
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	4a2f      	ldr	r2, [pc, #188]	; (800737c <HAL_DMA_IRQHandler+0xe44>)
 80072c0:	4293      	cmp	r3, r2
 80072c2:	d00e      	beq.n	80072e2 <HAL_DMA_IRQHandler+0xdaa>
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	4a2d      	ldr	r2, [pc, #180]	; (8007380 <HAL_DMA_IRQHandler+0xe48>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d009      	beq.n	80072e2 <HAL_DMA_IRQHandler+0xdaa>
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	4a2c      	ldr	r2, [pc, #176]	; (8007384 <HAL_DMA_IRQHandler+0xe4c>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d004      	beq.n	80072e2 <HAL_DMA_IRQHandler+0xdaa>
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	4a2a      	ldr	r2, [pc, #168]	; (8007388 <HAL_DMA_IRQHandler+0xe50>)
 80072de:	4293      	cmp	r3, r2
 80072e0:	d108      	bne.n	80072f4 <HAL_DMA_IRQHandler+0xdbc>
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	681a      	ldr	r2, [r3, #0]
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f022 021c 	bic.w	r2, r2, #28
 80072f0:	601a      	str	r2, [r3, #0]
 80072f2:	e007      	b.n	8007304 <HAL_DMA_IRQHandler+0xdcc>
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	681a      	ldr	r2, [r3, #0]
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f022 020e 	bic.w	r2, r2, #14
 8007302:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007308:	f003 031f 	and.w	r3, r3, #31
 800730c:	2201      	movs	r2, #1
 800730e:	409a      	lsls	r2, r3
 8007310:	69fb      	ldr	r3, [r7, #28]
 8007312:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2201      	movs	r2, #1
 8007318:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2201      	movs	r2, #1
 800731e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2200      	movs	r2, #0
 8007326:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800732e:	2b00      	cmp	r3, #0
 8007330:	d009      	beq.n	8007346 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	4798      	blx	r3
 800733a:	e004      	b.n	8007346 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800733c:	bf00      	nop
 800733e:	e002      	b.n	8007346 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007340:	bf00      	nop
 8007342:	e000      	b.n	8007346 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007344:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007346:	3728      	adds	r7, #40	; 0x28
 8007348:	46bd      	mov	sp, r7
 800734a:	bd80      	pop	{r7, pc}
 800734c:	40020010 	.word	0x40020010
 8007350:	40020028 	.word	0x40020028
 8007354:	40020040 	.word	0x40020040
 8007358:	40020058 	.word	0x40020058
 800735c:	40020070 	.word	0x40020070
 8007360:	40020088 	.word	0x40020088
 8007364:	400200a0 	.word	0x400200a0
 8007368:	400200b8 	.word	0x400200b8
 800736c:	40020410 	.word	0x40020410
 8007370:	40020428 	.word	0x40020428
 8007374:	40020440 	.word	0x40020440
 8007378:	40020458 	.word	0x40020458
 800737c:	40020470 	.word	0x40020470
 8007380:	40020488 	.word	0x40020488
 8007384:	400204a0 	.word	0x400204a0
 8007388:	400204b8 	.word	0x400204b8

0800738c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800738c:	b480      	push	{r7}
 800738e:	b085      	sub	sp, #20
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	4a42      	ldr	r2, [pc, #264]	; (80074a4 <DMA_CalcBaseAndBitshift+0x118>)
 800739a:	4293      	cmp	r3, r2
 800739c:	d04a      	beq.n	8007434 <DMA_CalcBaseAndBitshift+0xa8>
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	4a41      	ldr	r2, [pc, #260]	; (80074a8 <DMA_CalcBaseAndBitshift+0x11c>)
 80073a4:	4293      	cmp	r3, r2
 80073a6:	d045      	beq.n	8007434 <DMA_CalcBaseAndBitshift+0xa8>
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	4a3f      	ldr	r2, [pc, #252]	; (80074ac <DMA_CalcBaseAndBitshift+0x120>)
 80073ae:	4293      	cmp	r3, r2
 80073b0:	d040      	beq.n	8007434 <DMA_CalcBaseAndBitshift+0xa8>
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	4a3e      	ldr	r2, [pc, #248]	; (80074b0 <DMA_CalcBaseAndBitshift+0x124>)
 80073b8:	4293      	cmp	r3, r2
 80073ba:	d03b      	beq.n	8007434 <DMA_CalcBaseAndBitshift+0xa8>
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	4a3c      	ldr	r2, [pc, #240]	; (80074b4 <DMA_CalcBaseAndBitshift+0x128>)
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d036      	beq.n	8007434 <DMA_CalcBaseAndBitshift+0xa8>
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	4a3b      	ldr	r2, [pc, #236]	; (80074b8 <DMA_CalcBaseAndBitshift+0x12c>)
 80073cc:	4293      	cmp	r3, r2
 80073ce:	d031      	beq.n	8007434 <DMA_CalcBaseAndBitshift+0xa8>
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	4a39      	ldr	r2, [pc, #228]	; (80074bc <DMA_CalcBaseAndBitshift+0x130>)
 80073d6:	4293      	cmp	r3, r2
 80073d8:	d02c      	beq.n	8007434 <DMA_CalcBaseAndBitshift+0xa8>
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	4a38      	ldr	r2, [pc, #224]	; (80074c0 <DMA_CalcBaseAndBitshift+0x134>)
 80073e0:	4293      	cmp	r3, r2
 80073e2:	d027      	beq.n	8007434 <DMA_CalcBaseAndBitshift+0xa8>
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	4a36      	ldr	r2, [pc, #216]	; (80074c4 <DMA_CalcBaseAndBitshift+0x138>)
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d022      	beq.n	8007434 <DMA_CalcBaseAndBitshift+0xa8>
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	4a35      	ldr	r2, [pc, #212]	; (80074c8 <DMA_CalcBaseAndBitshift+0x13c>)
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d01d      	beq.n	8007434 <DMA_CalcBaseAndBitshift+0xa8>
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	4a33      	ldr	r2, [pc, #204]	; (80074cc <DMA_CalcBaseAndBitshift+0x140>)
 80073fe:	4293      	cmp	r3, r2
 8007400:	d018      	beq.n	8007434 <DMA_CalcBaseAndBitshift+0xa8>
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	4a32      	ldr	r2, [pc, #200]	; (80074d0 <DMA_CalcBaseAndBitshift+0x144>)
 8007408:	4293      	cmp	r3, r2
 800740a:	d013      	beq.n	8007434 <DMA_CalcBaseAndBitshift+0xa8>
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	4a30      	ldr	r2, [pc, #192]	; (80074d4 <DMA_CalcBaseAndBitshift+0x148>)
 8007412:	4293      	cmp	r3, r2
 8007414:	d00e      	beq.n	8007434 <DMA_CalcBaseAndBitshift+0xa8>
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	4a2f      	ldr	r2, [pc, #188]	; (80074d8 <DMA_CalcBaseAndBitshift+0x14c>)
 800741c:	4293      	cmp	r3, r2
 800741e:	d009      	beq.n	8007434 <DMA_CalcBaseAndBitshift+0xa8>
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	4a2d      	ldr	r2, [pc, #180]	; (80074dc <DMA_CalcBaseAndBitshift+0x150>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d004      	beq.n	8007434 <DMA_CalcBaseAndBitshift+0xa8>
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	4a2c      	ldr	r2, [pc, #176]	; (80074e0 <DMA_CalcBaseAndBitshift+0x154>)
 8007430:	4293      	cmp	r3, r2
 8007432:	d101      	bne.n	8007438 <DMA_CalcBaseAndBitshift+0xac>
 8007434:	2301      	movs	r3, #1
 8007436:	e000      	b.n	800743a <DMA_CalcBaseAndBitshift+0xae>
 8007438:	2300      	movs	r3, #0
 800743a:	2b00      	cmp	r3, #0
 800743c:	d024      	beq.n	8007488 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	b2db      	uxtb	r3, r3
 8007444:	3b10      	subs	r3, #16
 8007446:	4a27      	ldr	r2, [pc, #156]	; (80074e4 <DMA_CalcBaseAndBitshift+0x158>)
 8007448:	fba2 2303 	umull	r2, r3, r2, r3
 800744c:	091b      	lsrs	r3, r3, #4
 800744e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	f003 0307 	and.w	r3, r3, #7
 8007456:	4a24      	ldr	r2, [pc, #144]	; (80074e8 <DMA_CalcBaseAndBitshift+0x15c>)
 8007458:	5cd3      	ldrb	r3, [r2, r3]
 800745a:	461a      	mov	r2, r3
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	2b03      	cmp	r3, #3
 8007464:	d908      	bls.n	8007478 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	461a      	mov	r2, r3
 800746c:	4b1f      	ldr	r3, [pc, #124]	; (80074ec <DMA_CalcBaseAndBitshift+0x160>)
 800746e:	4013      	ands	r3, r2
 8007470:	1d1a      	adds	r2, r3, #4
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	659a      	str	r2, [r3, #88]	; 0x58
 8007476:	e00d      	b.n	8007494 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	461a      	mov	r2, r3
 800747e:	4b1b      	ldr	r3, [pc, #108]	; (80074ec <DMA_CalcBaseAndBitshift+0x160>)
 8007480:	4013      	ands	r3, r2
 8007482:	687a      	ldr	r2, [r7, #4]
 8007484:	6593      	str	r3, [r2, #88]	; 0x58
 8007486:	e005      	b.n	8007494 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007498:	4618      	mov	r0, r3
 800749a:	3714      	adds	r7, #20
 800749c:	46bd      	mov	sp, r7
 800749e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a2:	4770      	bx	lr
 80074a4:	40020010 	.word	0x40020010
 80074a8:	40020028 	.word	0x40020028
 80074ac:	40020040 	.word	0x40020040
 80074b0:	40020058 	.word	0x40020058
 80074b4:	40020070 	.word	0x40020070
 80074b8:	40020088 	.word	0x40020088
 80074bc:	400200a0 	.word	0x400200a0
 80074c0:	400200b8 	.word	0x400200b8
 80074c4:	40020410 	.word	0x40020410
 80074c8:	40020428 	.word	0x40020428
 80074cc:	40020440 	.word	0x40020440
 80074d0:	40020458 	.word	0x40020458
 80074d4:	40020470 	.word	0x40020470
 80074d8:	40020488 	.word	0x40020488
 80074dc:	400204a0 	.word	0x400204a0
 80074e0:	400204b8 	.word	0x400204b8
 80074e4:	aaaaaaab 	.word	0xaaaaaaab
 80074e8:	08017c4c 	.word	0x08017c4c
 80074ec:	fffffc00 	.word	0xfffffc00

080074f0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80074f0:	b480      	push	{r7}
 80074f2:	b085      	sub	sp, #20
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80074f8:	2300      	movs	r3, #0
 80074fa:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	699b      	ldr	r3, [r3, #24]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d120      	bne.n	8007546 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007508:	2b03      	cmp	r3, #3
 800750a:	d858      	bhi.n	80075be <DMA_CheckFifoParam+0xce>
 800750c:	a201      	add	r2, pc, #4	; (adr r2, 8007514 <DMA_CheckFifoParam+0x24>)
 800750e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007512:	bf00      	nop
 8007514:	08007525 	.word	0x08007525
 8007518:	08007537 	.word	0x08007537
 800751c:	08007525 	.word	0x08007525
 8007520:	080075bf 	.word	0x080075bf
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007528:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800752c:	2b00      	cmp	r3, #0
 800752e:	d048      	beq.n	80075c2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8007530:	2301      	movs	r3, #1
 8007532:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007534:	e045      	b.n	80075c2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800753a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800753e:	d142      	bne.n	80075c6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8007540:	2301      	movs	r3, #1
 8007542:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007544:	e03f      	b.n	80075c6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	699b      	ldr	r3, [r3, #24]
 800754a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800754e:	d123      	bne.n	8007598 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007554:	2b03      	cmp	r3, #3
 8007556:	d838      	bhi.n	80075ca <DMA_CheckFifoParam+0xda>
 8007558:	a201      	add	r2, pc, #4	; (adr r2, 8007560 <DMA_CheckFifoParam+0x70>)
 800755a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800755e:	bf00      	nop
 8007560:	08007571 	.word	0x08007571
 8007564:	08007577 	.word	0x08007577
 8007568:	08007571 	.word	0x08007571
 800756c:	08007589 	.word	0x08007589
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007570:	2301      	movs	r3, #1
 8007572:	73fb      	strb	r3, [r7, #15]
        break;
 8007574:	e030      	b.n	80075d8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800757a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800757e:	2b00      	cmp	r3, #0
 8007580:	d025      	beq.n	80075ce <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8007582:	2301      	movs	r3, #1
 8007584:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007586:	e022      	b.n	80075ce <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800758c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007590:	d11f      	bne.n	80075d2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8007592:	2301      	movs	r3, #1
 8007594:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007596:	e01c      	b.n	80075d2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800759c:	2b02      	cmp	r3, #2
 800759e:	d902      	bls.n	80075a6 <DMA_CheckFifoParam+0xb6>
 80075a0:	2b03      	cmp	r3, #3
 80075a2:	d003      	beq.n	80075ac <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80075a4:	e018      	b.n	80075d8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80075a6:	2301      	movs	r3, #1
 80075a8:	73fb      	strb	r3, [r7, #15]
        break;
 80075aa:	e015      	b.n	80075d8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d00e      	beq.n	80075d6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80075b8:	2301      	movs	r3, #1
 80075ba:	73fb      	strb	r3, [r7, #15]
    break;
 80075bc:	e00b      	b.n	80075d6 <DMA_CheckFifoParam+0xe6>
        break;
 80075be:	bf00      	nop
 80075c0:	e00a      	b.n	80075d8 <DMA_CheckFifoParam+0xe8>
        break;
 80075c2:	bf00      	nop
 80075c4:	e008      	b.n	80075d8 <DMA_CheckFifoParam+0xe8>
        break;
 80075c6:	bf00      	nop
 80075c8:	e006      	b.n	80075d8 <DMA_CheckFifoParam+0xe8>
        break;
 80075ca:	bf00      	nop
 80075cc:	e004      	b.n	80075d8 <DMA_CheckFifoParam+0xe8>
        break;
 80075ce:	bf00      	nop
 80075d0:	e002      	b.n	80075d8 <DMA_CheckFifoParam+0xe8>
        break;
 80075d2:	bf00      	nop
 80075d4:	e000      	b.n	80075d8 <DMA_CheckFifoParam+0xe8>
    break;
 80075d6:	bf00      	nop
    }
  }

  return status;
 80075d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80075da:	4618      	mov	r0, r3
 80075dc:	3714      	adds	r7, #20
 80075de:	46bd      	mov	sp, r7
 80075e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e4:	4770      	bx	lr
 80075e6:	bf00      	nop

080075e8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80075e8:	b480      	push	{r7}
 80075ea:	b085      	sub	sp, #20
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	4a38      	ldr	r2, [pc, #224]	; (80076dc <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80075fc:	4293      	cmp	r3, r2
 80075fe:	d022      	beq.n	8007646 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	4a36      	ldr	r2, [pc, #216]	; (80076e0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8007606:	4293      	cmp	r3, r2
 8007608:	d01d      	beq.n	8007646 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	4a35      	ldr	r2, [pc, #212]	; (80076e4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8007610:	4293      	cmp	r3, r2
 8007612:	d018      	beq.n	8007646 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	4a33      	ldr	r2, [pc, #204]	; (80076e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800761a:	4293      	cmp	r3, r2
 800761c:	d013      	beq.n	8007646 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	4a32      	ldr	r2, [pc, #200]	; (80076ec <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007624:	4293      	cmp	r3, r2
 8007626:	d00e      	beq.n	8007646 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	4a30      	ldr	r2, [pc, #192]	; (80076f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800762e:	4293      	cmp	r3, r2
 8007630:	d009      	beq.n	8007646 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	4a2f      	ldr	r2, [pc, #188]	; (80076f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007638:	4293      	cmp	r3, r2
 800763a:	d004      	beq.n	8007646 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	4a2d      	ldr	r2, [pc, #180]	; (80076f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8007642:	4293      	cmp	r3, r2
 8007644:	d101      	bne.n	800764a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8007646:	2301      	movs	r3, #1
 8007648:	e000      	b.n	800764c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800764a:	2300      	movs	r3, #0
 800764c:	2b00      	cmp	r3, #0
 800764e:	d01a      	beq.n	8007686 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	b2db      	uxtb	r3, r3
 8007656:	3b08      	subs	r3, #8
 8007658:	4a28      	ldr	r2, [pc, #160]	; (80076fc <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800765a:	fba2 2303 	umull	r2, r3, r2, r3
 800765e:	091b      	lsrs	r3, r3, #4
 8007660:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8007662:	68fa      	ldr	r2, [r7, #12]
 8007664:	4b26      	ldr	r3, [pc, #152]	; (8007700 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8007666:	4413      	add	r3, r2
 8007668:	009b      	lsls	r3, r3, #2
 800766a:	461a      	mov	r2, r3
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	4a24      	ldr	r2, [pc, #144]	; (8007704 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007674:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	f003 031f 	and.w	r3, r3, #31
 800767c:	2201      	movs	r2, #1
 800767e:	409a      	lsls	r2, r3
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007684:	e024      	b.n	80076d0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	b2db      	uxtb	r3, r3
 800768c:	3b10      	subs	r3, #16
 800768e:	4a1e      	ldr	r2, [pc, #120]	; (8007708 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007690:	fba2 2303 	umull	r2, r3, r2, r3
 8007694:	091b      	lsrs	r3, r3, #4
 8007696:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007698:	68bb      	ldr	r3, [r7, #8]
 800769a:	4a1c      	ldr	r2, [pc, #112]	; (800770c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800769c:	4293      	cmp	r3, r2
 800769e:	d806      	bhi.n	80076ae <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80076a0:	68bb      	ldr	r3, [r7, #8]
 80076a2:	4a1b      	ldr	r2, [pc, #108]	; (8007710 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d902      	bls.n	80076ae <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	3308      	adds	r3, #8
 80076ac:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80076ae:	68fa      	ldr	r2, [r7, #12]
 80076b0:	4b18      	ldr	r3, [pc, #96]	; (8007714 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80076b2:	4413      	add	r3, r2
 80076b4:	009b      	lsls	r3, r3, #2
 80076b6:	461a      	mov	r2, r3
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	4a16      	ldr	r2, [pc, #88]	; (8007718 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80076c0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	f003 031f 	and.w	r3, r3, #31
 80076c8:	2201      	movs	r2, #1
 80076ca:	409a      	lsls	r2, r3
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	669a      	str	r2, [r3, #104]	; 0x68
}
 80076d0:	bf00      	nop
 80076d2:	3714      	adds	r7, #20
 80076d4:	46bd      	mov	sp, r7
 80076d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076da:	4770      	bx	lr
 80076dc:	58025408 	.word	0x58025408
 80076e0:	5802541c 	.word	0x5802541c
 80076e4:	58025430 	.word	0x58025430
 80076e8:	58025444 	.word	0x58025444
 80076ec:	58025458 	.word	0x58025458
 80076f0:	5802546c 	.word	0x5802546c
 80076f4:	58025480 	.word	0x58025480
 80076f8:	58025494 	.word	0x58025494
 80076fc:	cccccccd 	.word	0xcccccccd
 8007700:	16009600 	.word	0x16009600
 8007704:	58025880 	.word	0x58025880
 8007708:	aaaaaaab 	.word	0xaaaaaaab
 800770c:	400204b8 	.word	0x400204b8
 8007710:	4002040f 	.word	0x4002040f
 8007714:	10008200 	.word	0x10008200
 8007718:	40020880 	.word	0x40020880

0800771c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800771c:	b480      	push	{r7}
 800771e:	b085      	sub	sp, #20
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	685b      	ldr	r3, [r3, #4]
 8007728:	b2db      	uxtb	r3, r3
 800772a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d04a      	beq.n	80077c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	2b08      	cmp	r3, #8
 8007736:	d847      	bhi.n	80077c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	4a25      	ldr	r2, [pc, #148]	; (80077d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800773e:	4293      	cmp	r3, r2
 8007740:	d022      	beq.n	8007788 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	4a24      	ldr	r2, [pc, #144]	; (80077d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007748:	4293      	cmp	r3, r2
 800774a:	d01d      	beq.n	8007788 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	4a22      	ldr	r2, [pc, #136]	; (80077dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8007752:	4293      	cmp	r3, r2
 8007754:	d018      	beq.n	8007788 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	4a21      	ldr	r2, [pc, #132]	; (80077e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800775c:	4293      	cmp	r3, r2
 800775e:	d013      	beq.n	8007788 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	4a1f      	ldr	r2, [pc, #124]	; (80077e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8007766:	4293      	cmp	r3, r2
 8007768:	d00e      	beq.n	8007788 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	4a1e      	ldr	r2, [pc, #120]	; (80077e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007770:	4293      	cmp	r3, r2
 8007772:	d009      	beq.n	8007788 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	4a1c      	ldr	r2, [pc, #112]	; (80077ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800777a:	4293      	cmp	r3, r2
 800777c:	d004      	beq.n	8007788 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	4a1b      	ldr	r2, [pc, #108]	; (80077f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007784:	4293      	cmp	r3, r2
 8007786:	d101      	bne.n	800778c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007788:	2301      	movs	r3, #1
 800778a:	e000      	b.n	800778e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800778c:	2300      	movs	r3, #0
 800778e:	2b00      	cmp	r3, #0
 8007790:	d00a      	beq.n	80077a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8007792:	68fa      	ldr	r2, [r7, #12]
 8007794:	4b17      	ldr	r3, [pc, #92]	; (80077f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8007796:	4413      	add	r3, r2
 8007798:	009b      	lsls	r3, r3, #2
 800779a:	461a      	mov	r2, r3
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	4a15      	ldr	r2, [pc, #84]	; (80077f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80077a4:	671a      	str	r2, [r3, #112]	; 0x70
 80077a6:	e009      	b.n	80077bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80077a8:	68fa      	ldr	r2, [r7, #12]
 80077aa:	4b14      	ldr	r3, [pc, #80]	; (80077fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80077ac:	4413      	add	r3, r2
 80077ae:	009b      	lsls	r3, r3, #2
 80077b0:	461a      	mov	r2, r3
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	4a11      	ldr	r2, [pc, #68]	; (8007800 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80077ba:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	3b01      	subs	r3, #1
 80077c0:	2201      	movs	r2, #1
 80077c2:	409a      	lsls	r2, r3
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80077c8:	bf00      	nop
 80077ca:	3714      	adds	r7, #20
 80077cc:	46bd      	mov	sp, r7
 80077ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d2:	4770      	bx	lr
 80077d4:	58025408 	.word	0x58025408
 80077d8:	5802541c 	.word	0x5802541c
 80077dc:	58025430 	.word	0x58025430
 80077e0:	58025444 	.word	0x58025444
 80077e4:	58025458 	.word	0x58025458
 80077e8:	5802546c 	.word	0x5802546c
 80077ec:	58025480 	.word	0x58025480
 80077f0:	58025494 	.word	0x58025494
 80077f4:	1600963f 	.word	0x1600963f
 80077f8:	58025940 	.word	0x58025940
 80077fc:	1000823f 	.word	0x1000823f
 8007800:	40020940 	.word	0x40020940

08007804 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007804:	b480      	push	{r7}
 8007806:	b089      	sub	sp, #36	; 0x24
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
 800780c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800780e:	2300      	movs	r3, #0
 8007810:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007812:	4b89      	ldr	r3, [pc, #548]	; (8007a38 <HAL_GPIO_Init+0x234>)
 8007814:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007816:	e194      	b.n	8007b42 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	681a      	ldr	r2, [r3, #0]
 800781c:	2101      	movs	r1, #1
 800781e:	69fb      	ldr	r3, [r7, #28]
 8007820:	fa01 f303 	lsl.w	r3, r1, r3
 8007824:	4013      	ands	r3, r2
 8007826:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007828:	693b      	ldr	r3, [r7, #16]
 800782a:	2b00      	cmp	r3, #0
 800782c:	f000 8186 	beq.w	8007b3c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	685b      	ldr	r3, [r3, #4]
 8007834:	f003 0303 	and.w	r3, r3, #3
 8007838:	2b01      	cmp	r3, #1
 800783a:	d005      	beq.n	8007848 <HAL_GPIO_Init+0x44>
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	685b      	ldr	r3, [r3, #4]
 8007840:	f003 0303 	and.w	r3, r3, #3
 8007844:	2b02      	cmp	r3, #2
 8007846:	d130      	bne.n	80078aa <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	689b      	ldr	r3, [r3, #8]
 800784c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800784e:	69fb      	ldr	r3, [r7, #28]
 8007850:	005b      	lsls	r3, r3, #1
 8007852:	2203      	movs	r2, #3
 8007854:	fa02 f303 	lsl.w	r3, r2, r3
 8007858:	43db      	mvns	r3, r3
 800785a:	69ba      	ldr	r2, [r7, #24]
 800785c:	4013      	ands	r3, r2
 800785e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	68da      	ldr	r2, [r3, #12]
 8007864:	69fb      	ldr	r3, [r7, #28]
 8007866:	005b      	lsls	r3, r3, #1
 8007868:	fa02 f303 	lsl.w	r3, r2, r3
 800786c:	69ba      	ldr	r2, [r7, #24]
 800786e:	4313      	orrs	r3, r2
 8007870:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	69ba      	ldr	r2, [r7, #24]
 8007876:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	685b      	ldr	r3, [r3, #4]
 800787c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800787e:	2201      	movs	r2, #1
 8007880:	69fb      	ldr	r3, [r7, #28]
 8007882:	fa02 f303 	lsl.w	r3, r2, r3
 8007886:	43db      	mvns	r3, r3
 8007888:	69ba      	ldr	r2, [r7, #24]
 800788a:	4013      	ands	r3, r2
 800788c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	685b      	ldr	r3, [r3, #4]
 8007892:	091b      	lsrs	r3, r3, #4
 8007894:	f003 0201 	and.w	r2, r3, #1
 8007898:	69fb      	ldr	r3, [r7, #28]
 800789a:	fa02 f303 	lsl.w	r3, r2, r3
 800789e:	69ba      	ldr	r2, [r7, #24]
 80078a0:	4313      	orrs	r3, r2
 80078a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	69ba      	ldr	r2, [r7, #24]
 80078a8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	685b      	ldr	r3, [r3, #4]
 80078ae:	f003 0303 	and.w	r3, r3, #3
 80078b2:	2b03      	cmp	r3, #3
 80078b4:	d017      	beq.n	80078e6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	68db      	ldr	r3, [r3, #12]
 80078ba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80078bc:	69fb      	ldr	r3, [r7, #28]
 80078be:	005b      	lsls	r3, r3, #1
 80078c0:	2203      	movs	r2, #3
 80078c2:	fa02 f303 	lsl.w	r3, r2, r3
 80078c6:	43db      	mvns	r3, r3
 80078c8:	69ba      	ldr	r2, [r7, #24]
 80078ca:	4013      	ands	r3, r2
 80078cc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	689a      	ldr	r2, [r3, #8]
 80078d2:	69fb      	ldr	r3, [r7, #28]
 80078d4:	005b      	lsls	r3, r3, #1
 80078d6:	fa02 f303 	lsl.w	r3, r2, r3
 80078da:	69ba      	ldr	r2, [r7, #24]
 80078dc:	4313      	orrs	r3, r2
 80078de:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	69ba      	ldr	r2, [r7, #24]
 80078e4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	685b      	ldr	r3, [r3, #4]
 80078ea:	f003 0303 	and.w	r3, r3, #3
 80078ee:	2b02      	cmp	r3, #2
 80078f0:	d123      	bne.n	800793a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80078f2:	69fb      	ldr	r3, [r7, #28]
 80078f4:	08da      	lsrs	r2, r3, #3
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	3208      	adds	r2, #8
 80078fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007900:	69fb      	ldr	r3, [r7, #28]
 8007902:	f003 0307 	and.w	r3, r3, #7
 8007906:	009b      	lsls	r3, r3, #2
 8007908:	220f      	movs	r2, #15
 800790a:	fa02 f303 	lsl.w	r3, r2, r3
 800790e:	43db      	mvns	r3, r3
 8007910:	69ba      	ldr	r2, [r7, #24]
 8007912:	4013      	ands	r3, r2
 8007914:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	691a      	ldr	r2, [r3, #16]
 800791a:	69fb      	ldr	r3, [r7, #28]
 800791c:	f003 0307 	and.w	r3, r3, #7
 8007920:	009b      	lsls	r3, r3, #2
 8007922:	fa02 f303 	lsl.w	r3, r2, r3
 8007926:	69ba      	ldr	r2, [r7, #24]
 8007928:	4313      	orrs	r3, r2
 800792a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800792c:	69fb      	ldr	r3, [r7, #28]
 800792e:	08da      	lsrs	r2, r3, #3
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	3208      	adds	r2, #8
 8007934:	69b9      	ldr	r1, [r7, #24]
 8007936:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007940:	69fb      	ldr	r3, [r7, #28]
 8007942:	005b      	lsls	r3, r3, #1
 8007944:	2203      	movs	r2, #3
 8007946:	fa02 f303 	lsl.w	r3, r2, r3
 800794a:	43db      	mvns	r3, r3
 800794c:	69ba      	ldr	r2, [r7, #24]
 800794e:	4013      	ands	r3, r2
 8007950:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	685b      	ldr	r3, [r3, #4]
 8007956:	f003 0203 	and.w	r2, r3, #3
 800795a:	69fb      	ldr	r3, [r7, #28]
 800795c:	005b      	lsls	r3, r3, #1
 800795e:	fa02 f303 	lsl.w	r3, r2, r3
 8007962:	69ba      	ldr	r2, [r7, #24]
 8007964:	4313      	orrs	r3, r2
 8007966:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	69ba      	ldr	r2, [r7, #24]
 800796c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	685b      	ldr	r3, [r3, #4]
 8007972:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007976:	2b00      	cmp	r3, #0
 8007978:	f000 80e0 	beq.w	8007b3c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800797c:	4b2f      	ldr	r3, [pc, #188]	; (8007a3c <HAL_GPIO_Init+0x238>)
 800797e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007982:	4a2e      	ldr	r2, [pc, #184]	; (8007a3c <HAL_GPIO_Init+0x238>)
 8007984:	f043 0302 	orr.w	r3, r3, #2
 8007988:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800798c:	4b2b      	ldr	r3, [pc, #172]	; (8007a3c <HAL_GPIO_Init+0x238>)
 800798e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007992:	f003 0302 	and.w	r3, r3, #2
 8007996:	60fb      	str	r3, [r7, #12]
 8007998:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800799a:	4a29      	ldr	r2, [pc, #164]	; (8007a40 <HAL_GPIO_Init+0x23c>)
 800799c:	69fb      	ldr	r3, [r7, #28]
 800799e:	089b      	lsrs	r3, r3, #2
 80079a0:	3302      	adds	r3, #2
 80079a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80079a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80079a8:	69fb      	ldr	r3, [r7, #28]
 80079aa:	f003 0303 	and.w	r3, r3, #3
 80079ae:	009b      	lsls	r3, r3, #2
 80079b0:	220f      	movs	r2, #15
 80079b2:	fa02 f303 	lsl.w	r3, r2, r3
 80079b6:	43db      	mvns	r3, r3
 80079b8:	69ba      	ldr	r2, [r7, #24]
 80079ba:	4013      	ands	r3, r2
 80079bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	4a20      	ldr	r2, [pc, #128]	; (8007a44 <HAL_GPIO_Init+0x240>)
 80079c2:	4293      	cmp	r3, r2
 80079c4:	d052      	beq.n	8007a6c <HAL_GPIO_Init+0x268>
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	4a1f      	ldr	r2, [pc, #124]	; (8007a48 <HAL_GPIO_Init+0x244>)
 80079ca:	4293      	cmp	r3, r2
 80079cc:	d031      	beq.n	8007a32 <HAL_GPIO_Init+0x22e>
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	4a1e      	ldr	r2, [pc, #120]	; (8007a4c <HAL_GPIO_Init+0x248>)
 80079d2:	4293      	cmp	r3, r2
 80079d4:	d02b      	beq.n	8007a2e <HAL_GPIO_Init+0x22a>
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	4a1d      	ldr	r2, [pc, #116]	; (8007a50 <HAL_GPIO_Init+0x24c>)
 80079da:	4293      	cmp	r3, r2
 80079dc:	d025      	beq.n	8007a2a <HAL_GPIO_Init+0x226>
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	4a1c      	ldr	r2, [pc, #112]	; (8007a54 <HAL_GPIO_Init+0x250>)
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d01f      	beq.n	8007a26 <HAL_GPIO_Init+0x222>
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	4a1b      	ldr	r2, [pc, #108]	; (8007a58 <HAL_GPIO_Init+0x254>)
 80079ea:	4293      	cmp	r3, r2
 80079ec:	d019      	beq.n	8007a22 <HAL_GPIO_Init+0x21e>
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	4a1a      	ldr	r2, [pc, #104]	; (8007a5c <HAL_GPIO_Init+0x258>)
 80079f2:	4293      	cmp	r3, r2
 80079f4:	d013      	beq.n	8007a1e <HAL_GPIO_Init+0x21a>
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	4a19      	ldr	r2, [pc, #100]	; (8007a60 <HAL_GPIO_Init+0x25c>)
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d00d      	beq.n	8007a1a <HAL_GPIO_Init+0x216>
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	4a18      	ldr	r2, [pc, #96]	; (8007a64 <HAL_GPIO_Init+0x260>)
 8007a02:	4293      	cmp	r3, r2
 8007a04:	d007      	beq.n	8007a16 <HAL_GPIO_Init+0x212>
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	4a17      	ldr	r2, [pc, #92]	; (8007a68 <HAL_GPIO_Init+0x264>)
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d101      	bne.n	8007a12 <HAL_GPIO_Init+0x20e>
 8007a0e:	2309      	movs	r3, #9
 8007a10:	e02d      	b.n	8007a6e <HAL_GPIO_Init+0x26a>
 8007a12:	230a      	movs	r3, #10
 8007a14:	e02b      	b.n	8007a6e <HAL_GPIO_Init+0x26a>
 8007a16:	2308      	movs	r3, #8
 8007a18:	e029      	b.n	8007a6e <HAL_GPIO_Init+0x26a>
 8007a1a:	2307      	movs	r3, #7
 8007a1c:	e027      	b.n	8007a6e <HAL_GPIO_Init+0x26a>
 8007a1e:	2306      	movs	r3, #6
 8007a20:	e025      	b.n	8007a6e <HAL_GPIO_Init+0x26a>
 8007a22:	2305      	movs	r3, #5
 8007a24:	e023      	b.n	8007a6e <HAL_GPIO_Init+0x26a>
 8007a26:	2304      	movs	r3, #4
 8007a28:	e021      	b.n	8007a6e <HAL_GPIO_Init+0x26a>
 8007a2a:	2303      	movs	r3, #3
 8007a2c:	e01f      	b.n	8007a6e <HAL_GPIO_Init+0x26a>
 8007a2e:	2302      	movs	r3, #2
 8007a30:	e01d      	b.n	8007a6e <HAL_GPIO_Init+0x26a>
 8007a32:	2301      	movs	r3, #1
 8007a34:	e01b      	b.n	8007a6e <HAL_GPIO_Init+0x26a>
 8007a36:	bf00      	nop
 8007a38:	58000080 	.word	0x58000080
 8007a3c:	58024400 	.word	0x58024400
 8007a40:	58000400 	.word	0x58000400
 8007a44:	58020000 	.word	0x58020000
 8007a48:	58020400 	.word	0x58020400
 8007a4c:	58020800 	.word	0x58020800
 8007a50:	58020c00 	.word	0x58020c00
 8007a54:	58021000 	.word	0x58021000
 8007a58:	58021400 	.word	0x58021400
 8007a5c:	58021800 	.word	0x58021800
 8007a60:	58021c00 	.word	0x58021c00
 8007a64:	58022000 	.word	0x58022000
 8007a68:	58022400 	.word	0x58022400
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	69fa      	ldr	r2, [r7, #28]
 8007a70:	f002 0203 	and.w	r2, r2, #3
 8007a74:	0092      	lsls	r2, r2, #2
 8007a76:	4093      	lsls	r3, r2
 8007a78:	69ba      	ldr	r2, [r7, #24]
 8007a7a:	4313      	orrs	r3, r2
 8007a7c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007a7e:	4938      	ldr	r1, [pc, #224]	; (8007b60 <HAL_GPIO_Init+0x35c>)
 8007a80:	69fb      	ldr	r3, [r7, #28]
 8007a82:	089b      	lsrs	r3, r3, #2
 8007a84:	3302      	adds	r3, #2
 8007a86:	69ba      	ldr	r2, [r7, #24]
 8007a88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007a8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007a94:	693b      	ldr	r3, [r7, #16]
 8007a96:	43db      	mvns	r3, r3
 8007a98:	69ba      	ldr	r2, [r7, #24]
 8007a9a:	4013      	ands	r3, r2
 8007a9c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	685b      	ldr	r3, [r3, #4]
 8007aa2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d003      	beq.n	8007ab2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8007aaa:	69ba      	ldr	r2, [r7, #24]
 8007aac:	693b      	ldr	r3, [r7, #16]
 8007aae:	4313      	orrs	r3, r2
 8007ab0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007ab2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007ab6:	69bb      	ldr	r3, [r7, #24]
 8007ab8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007aba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007abe:	685b      	ldr	r3, [r3, #4]
 8007ac0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007ac2:	693b      	ldr	r3, [r7, #16]
 8007ac4:	43db      	mvns	r3, r3
 8007ac6:	69ba      	ldr	r2, [r7, #24]
 8007ac8:	4013      	ands	r3, r2
 8007aca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	685b      	ldr	r3, [r3, #4]
 8007ad0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d003      	beq.n	8007ae0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8007ad8:	69ba      	ldr	r2, [r7, #24]
 8007ada:	693b      	ldr	r3, [r7, #16]
 8007adc:	4313      	orrs	r3, r2
 8007ade:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007ae0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007ae4:	69bb      	ldr	r3, [r7, #24]
 8007ae6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007ae8:	697b      	ldr	r3, [r7, #20]
 8007aea:	685b      	ldr	r3, [r3, #4]
 8007aec:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007aee:	693b      	ldr	r3, [r7, #16]
 8007af0:	43db      	mvns	r3, r3
 8007af2:	69ba      	ldr	r2, [r7, #24]
 8007af4:	4013      	ands	r3, r2
 8007af6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	685b      	ldr	r3, [r3, #4]
 8007afc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d003      	beq.n	8007b0c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8007b04:	69ba      	ldr	r2, [r7, #24]
 8007b06:	693b      	ldr	r3, [r7, #16]
 8007b08:	4313      	orrs	r3, r2
 8007b0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007b0c:	697b      	ldr	r3, [r7, #20]
 8007b0e:	69ba      	ldr	r2, [r7, #24]
 8007b10:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007b12:	697b      	ldr	r3, [r7, #20]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007b18:	693b      	ldr	r3, [r7, #16]
 8007b1a:	43db      	mvns	r3, r3
 8007b1c:	69ba      	ldr	r2, [r7, #24]
 8007b1e:	4013      	ands	r3, r2
 8007b20:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	685b      	ldr	r3, [r3, #4]
 8007b26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d003      	beq.n	8007b36 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8007b2e:	69ba      	ldr	r2, [r7, #24]
 8007b30:	693b      	ldr	r3, [r7, #16]
 8007b32:	4313      	orrs	r3, r2
 8007b34:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007b36:	697b      	ldr	r3, [r7, #20]
 8007b38:	69ba      	ldr	r2, [r7, #24]
 8007b3a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007b3c:	69fb      	ldr	r3, [r7, #28]
 8007b3e:	3301      	adds	r3, #1
 8007b40:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007b42:	683b      	ldr	r3, [r7, #0]
 8007b44:	681a      	ldr	r2, [r3, #0]
 8007b46:	69fb      	ldr	r3, [r7, #28]
 8007b48:	fa22 f303 	lsr.w	r3, r2, r3
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	f47f ae63 	bne.w	8007818 <HAL_GPIO_Init+0x14>
  }
}
 8007b52:	bf00      	nop
 8007b54:	bf00      	nop
 8007b56:	3724      	adds	r7, #36	; 0x24
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5e:	4770      	bx	lr
 8007b60:	58000400 	.word	0x58000400

08007b64 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007b64:	b480      	push	{r7}
 8007b66:	b085      	sub	sp, #20
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
 8007b6c:	460b      	mov	r3, r1
 8007b6e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	691a      	ldr	r2, [r3, #16]
 8007b74:	887b      	ldrh	r3, [r7, #2]
 8007b76:	4013      	ands	r3, r2
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d002      	beq.n	8007b82 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007b7c:	2301      	movs	r3, #1
 8007b7e:	73fb      	strb	r3, [r7, #15]
 8007b80:	e001      	b.n	8007b86 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007b82:	2300      	movs	r3, #0
 8007b84:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007b86:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b88:	4618      	mov	r0, r3
 8007b8a:	3714      	adds	r7, #20
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b92:	4770      	bx	lr

08007b94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007b94:	b480      	push	{r7}
 8007b96:	b083      	sub	sp, #12
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
 8007b9c:	460b      	mov	r3, r1
 8007b9e:	807b      	strh	r3, [r7, #2]
 8007ba0:	4613      	mov	r3, r2
 8007ba2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007ba4:	787b      	ldrb	r3, [r7, #1]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d003      	beq.n	8007bb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007baa:	887a      	ldrh	r2, [r7, #2]
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007bb0:	e003      	b.n	8007bba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007bb2:	887b      	ldrh	r3, [r7, #2]
 8007bb4:	041a      	lsls	r2, r3, #16
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	619a      	str	r2, [r3, #24]
}
 8007bba:	bf00      	nop
 8007bbc:	370c      	adds	r7, #12
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc4:	4770      	bx	lr
	...

08007bc8 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8007bc8:	b480      	push	{r7}
 8007bca:	b083      	sub	sp, #12
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8007bd0:	4a08      	ldr	r2, [pc, #32]	; (8007bf4 <HAL_HSEM_FastTake+0x2c>)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	3320      	adds	r3, #32
 8007bd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007bda:	4a07      	ldr	r2, [pc, #28]	; (8007bf8 <HAL_HSEM_FastTake+0x30>)
 8007bdc:	4293      	cmp	r3, r2
 8007bde:	d101      	bne.n	8007be4 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8007be0:	2300      	movs	r3, #0
 8007be2:	e000      	b.n	8007be6 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8007be4:	2301      	movs	r3, #1
}
 8007be6:	4618      	mov	r0, r3
 8007be8:	370c      	adds	r7, #12
 8007bea:	46bd      	mov	sp, r7
 8007bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf0:	4770      	bx	lr
 8007bf2:	bf00      	nop
 8007bf4:	58026400 	.word	0x58026400
 8007bf8:	80000300 	.word	0x80000300

08007bfc <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8007bfc:	b480      	push	{r7}
 8007bfe:	b083      	sub	sp, #12
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
 8007c04:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8007c06:	4906      	ldr	r1, [pc, #24]	; (8007c20 <HAL_HSEM_Release+0x24>)
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8007c14:	bf00      	nop
 8007c16:	370c      	adds	r7, #12
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1e:	4770      	bx	lr
 8007c20:	58026400 	.word	0x58026400

08007c24 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b082      	sub	sp, #8
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d101      	bne.n	8007c36 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007c32:	2301      	movs	r3, #1
 8007c34:	e07f      	b.n	8007d36 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007c3c:	b2db      	uxtb	r3, r3
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d106      	bne.n	8007c50 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2200      	movs	r2, #0
 8007c46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007c4a:	6878      	ldr	r0, [r7, #4]
 8007c4c:	f7fb fa34 	bl	80030b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2224      	movs	r2, #36	; 0x24
 8007c54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	681a      	ldr	r2, [r3, #0]
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f022 0201 	bic.w	r2, r2, #1
 8007c66:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	685a      	ldr	r2, [r3, #4]
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007c74:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	689a      	ldr	r2, [r3, #8]
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007c84:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	68db      	ldr	r3, [r3, #12]
 8007c8a:	2b01      	cmp	r3, #1
 8007c8c:	d107      	bne.n	8007c9e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	689a      	ldr	r2, [r3, #8]
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007c9a:	609a      	str	r2, [r3, #8]
 8007c9c:	e006      	b.n	8007cac <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	689a      	ldr	r2, [r3, #8]
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8007caa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	68db      	ldr	r3, [r3, #12]
 8007cb0:	2b02      	cmp	r3, #2
 8007cb2:	d104      	bne.n	8007cbe <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007cbc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	6859      	ldr	r1, [r3, #4]
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681a      	ldr	r2, [r3, #0]
 8007cc8:	4b1d      	ldr	r3, [pc, #116]	; (8007d40 <HAL_I2C_Init+0x11c>)
 8007cca:	430b      	orrs	r3, r1
 8007ccc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	68da      	ldr	r2, [r3, #12]
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007cdc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	691a      	ldr	r2, [r3, #16]
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	695b      	ldr	r3, [r3, #20]
 8007ce6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	699b      	ldr	r3, [r3, #24]
 8007cee:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	430a      	orrs	r2, r1
 8007cf6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	69d9      	ldr	r1, [r3, #28]
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	6a1a      	ldr	r2, [r3, #32]
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	430a      	orrs	r2, r1
 8007d06:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	681a      	ldr	r2, [r3, #0]
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	f042 0201 	orr.w	r2, r2, #1
 8007d16:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	2220      	movs	r2, #32
 8007d22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2200      	movs	r2, #0
 8007d2a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2200      	movs	r2, #0
 8007d30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007d34:	2300      	movs	r3, #0
}
 8007d36:	4618      	mov	r0, r3
 8007d38:	3708      	adds	r7, #8
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	bd80      	pop	{r7, pc}
 8007d3e:	bf00      	nop
 8007d40:	02008000 	.word	0x02008000

08007d44 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b088      	sub	sp, #32
 8007d48:	af02      	add	r7, sp, #8
 8007d4a:	60f8      	str	r0, [r7, #12]
 8007d4c:	607a      	str	r2, [r7, #4]
 8007d4e:	461a      	mov	r2, r3
 8007d50:	460b      	mov	r3, r1
 8007d52:	817b      	strh	r3, [r7, #10]
 8007d54:	4613      	mov	r3, r2
 8007d56:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007d5e:	b2db      	uxtb	r3, r3
 8007d60:	2b20      	cmp	r3, #32
 8007d62:	f040 80da 	bne.w	8007f1a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007d6c:	2b01      	cmp	r3, #1
 8007d6e:	d101      	bne.n	8007d74 <HAL_I2C_Master_Transmit+0x30>
 8007d70:	2302      	movs	r3, #2
 8007d72:	e0d3      	b.n	8007f1c <HAL_I2C_Master_Transmit+0x1d8>
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	2201      	movs	r2, #1
 8007d78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007d7c:	f7fb fec6 	bl	8003b0c <HAL_GetTick>
 8007d80:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007d82:	697b      	ldr	r3, [r7, #20]
 8007d84:	9300      	str	r3, [sp, #0]
 8007d86:	2319      	movs	r3, #25
 8007d88:	2201      	movs	r2, #1
 8007d8a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007d8e:	68f8      	ldr	r0, [r7, #12]
 8007d90:	f000 f8f0 	bl	8007f74 <I2C_WaitOnFlagUntilTimeout>
 8007d94:	4603      	mov	r3, r0
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d001      	beq.n	8007d9e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8007d9a:	2301      	movs	r3, #1
 8007d9c:	e0be      	b.n	8007f1c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	2221      	movs	r2, #33	; 0x21
 8007da2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	2210      	movs	r2, #16
 8007daa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	2200      	movs	r2, #0
 8007db2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	687a      	ldr	r2, [r7, #4]
 8007db8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	893a      	ldrh	r2, [r7, #8]
 8007dbe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007dca:	b29b      	uxth	r3, r3
 8007dcc:	2bff      	cmp	r3, #255	; 0xff
 8007dce:	d90e      	bls.n	8007dee <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	22ff      	movs	r2, #255	; 0xff
 8007dd4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007dda:	b2da      	uxtb	r2, r3
 8007ddc:	8979      	ldrh	r1, [r7, #10]
 8007dde:	4b51      	ldr	r3, [pc, #324]	; (8007f24 <HAL_I2C_Master_Transmit+0x1e0>)
 8007de0:	9300      	str	r3, [sp, #0]
 8007de2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007de6:	68f8      	ldr	r0, [r7, #12]
 8007de8:	f000 fa7e 	bl	80082e8 <I2C_TransferConfig>
 8007dec:	e06c      	b.n	8007ec8 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007df2:	b29a      	uxth	r2, r3
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007dfc:	b2da      	uxtb	r2, r3
 8007dfe:	8979      	ldrh	r1, [r7, #10]
 8007e00:	4b48      	ldr	r3, [pc, #288]	; (8007f24 <HAL_I2C_Master_Transmit+0x1e0>)
 8007e02:	9300      	str	r3, [sp, #0]
 8007e04:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007e08:	68f8      	ldr	r0, [r7, #12]
 8007e0a:	f000 fa6d 	bl	80082e8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8007e0e:	e05b      	b.n	8007ec8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007e10:	697a      	ldr	r2, [r7, #20]
 8007e12:	6a39      	ldr	r1, [r7, #32]
 8007e14:	68f8      	ldr	r0, [r7, #12]
 8007e16:	f000 f8fc 	bl	8008012 <I2C_WaitOnTXISFlagUntilTimeout>
 8007e1a:	4603      	mov	r3, r0
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d001      	beq.n	8007e24 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8007e20:	2301      	movs	r3, #1
 8007e22:	e07b      	b.n	8007f1c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e28:	781a      	ldrb	r2, [r3, #0]
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e34:	1c5a      	adds	r2, r3, #1
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e3e:	b29b      	uxth	r3, r3
 8007e40:	3b01      	subs	r3, #1
 8007e42:	b29a      	uxth	r2, r3
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e4c:	3b01      	subs	r3, #1
 8007e4e:	b29a      	uxth	r2, r3
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e58:	b29b      	uxth	r3, r3
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d034      	beq.n	8007ec8 <HAL_I2C_Master_Transmit+0x184>
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d130      	bne.n	8007ec8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007e66:	697b      	ldr	r3, [r7, #20]
 8007e68:	9300      	str	r3, [sp, #0]
 8007e6a:	6a3b      	ldr	r3, [r7, #32]
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	2180      	movs	r1, #128	; 0x80
 8007e70:	68f8      	ldr	r0, [r7, #12]
 8007e72:	f000 f87f 	bl	8007f74 <I2C_WaitOnFlagUntilTimeout>
 8007e76:	4603      	mov	r3, r0
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d001      	beq.n	8007e80 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8007e7c:	2301      	movs	r3, #1
 8007e7e:	e04d      	b.n	8007f1c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e84:	b29b      	uxth	r3, r3
 8007e86:	2bff      	cmp	r3, #255	; 0xff
 8007e88:	d90e      	bls.n	8007ea8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	22ff      	movs	r2, #255	; 0xff
 8007e8e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e94:	b2da      	uxtb	r2, r3
 8007e96:	8979      	ldrh	r1, [r7, #10]
 8007e98:	2300      	movs	r3, #0
 8007e9a:	9300      	str	r3, [sp, #0]
 8007e9c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007ea0:	68f8      	ldr	r0, [r7, #12]
 8007ea2:	f000 fa21 	bl	80082e8 <I2C_TransferConfig>
 8007ea6:	e00f      	b.n	8007ec8 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007eac:	b29a      	uxth	r2, r3
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007eb6:	b2da      	uxtb	r2, r3
 8007eb8:	8979      	ldrh	r1, [r7, #10]
 8007eba:	2300      	movs	r3, #0
 8007ebc:	9300      	str	r3, [sp, #0]
 8007ebe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007ec2:	68f8      	ldr	r0, [r7, #12]
 8007ec4:	f000 fa10 	bl	80082e8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ecc:	b29b      	uxth	r3, r3
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d19e      	bne.n	8007e10 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007ed2:	697a      	ldr	r2, [r7, #20]
 8007ed4:	6a39      	ldr	r1, [r7, #32]
 8007ed6:	68f8      	ldr	r0, [r7, #12]
 8007ed8:	f000 f8e2 	bl	80080a0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007edc:	4603      	mov	r3, r0
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d001      	beq.n	8007ee6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8007ee2:	2301      	movs	r3, #1
 8007ee4:	e01a      	b.n	8007f1c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	2220      	movs	r2, #32
 8007eec:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	6859      	ldr	r1, [r3, #4]
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	681a      	ldr	r2, [r3, #0]
 8007ef8:	4b0b      	ldr	r3, [pc, #44]	; (8007f28 <HAL_I2C_Master_Transmit+0x1e4>)
 8007efa:	400b      	ands	r3, r1
 8007efc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	2220      	movs	r2, #32
 8007f02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	2200      	movs	r2, #0
 8007f0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	2200      	movs	r2, #0
 8007f12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007f16:	2300      	movs	r3, #0
 8007f18:	e000      	b.n	8007f1c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8007f1a:	2302      	movs	r3, #2
  }
}
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	3718      	adds	r7, #24
 8007f20:	46bd      	mov	sp, r7
 8007f22:	bd80      	pop	{r7, pc}
 8007f24:	80002000 	.word	0x80002000
 8007f28:	fe00e800 	.word	0xfe00e800

08007f2c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007f2c:	b480      	push	{r7}
 8007f2e:	b083      	sub	sp, #12
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	699b      	ldr	r3, [r3, #24]
 8007f3a:	f003 0302 	and.w	r3, r3, #2
 8007f3e:	2b02      	cmp	r3, #2
 8007f40:	d103      	bne.n	8007f4a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	2200      	movs	r2, #0
 8007f48:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	699b      	ldr	r3, [r3, #24]
 8007f50:	f003 0301 	and.w	r3, r3, #1
 8007f54:	2b01      	cmp	r3, #1
 8007f56:	d007      	beq.n	8007f68 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	699a      	ldr	r2, [r3, #24]
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	f042 0201 	orr.w	r2, r2, #1
 8007f66:	619a      	str	r2, [r3, #24]
  }
}
 8007f68:	bf00      	nop
 8007f6a:	370c      	adds	r7, #12
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f72:	4770      	bx	lr

08007f74 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b084      	sub	sp, #16
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	60f8      	str	r0, [r7, #12]
 8007f7c:	60b9      	str	r1, [r7, #8]
 8007f7e:	603b      	str	r3, [r7, #0]
 8007f80:	4613      	mov	r3, r2
 8007f82:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007f84:	e031      	b.n	8007fea <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f8c:	d02d      	beq.n	8007fea <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f8e:	f7fb fdbd 	bl	8003b0c <HAL_GetTick>
 8007f92:	4602      	mov	r2, r0
 8007f94:	69bb      	ldr	r3, [r7, #24]
 8007f96:	1ad3      	subs	r3, r2, r3
 8007f98:	683a      	ldr	r2, [r7, #0]
 8007f9a:	429a      	cmp	r2, r3
 8007f9c:	d302      	bcc.n	8007fa4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007f9e:	683b      	ldr	r3, [r7, #0]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d122      	bne.n	8007fea <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	699a      	ldr	r2, [r3, #24]
 8007faa:	68bb      	ldr	r3, [r7, #8]
 8007fac:	4013      	ands	r3, r2
 8007fae:	68ba      	ldr	r2, [r7, #8]
 8007fb0:	429a      	cmp	r2, r3
 8007fb2:	bf0c      	ite	eq
 8007fb4:	2301      	moveq	r3, #1
 8007fb6:	2300      	movne	r3, #0
 8007fb8:	b2db      	uxtb	r3, r3
 8007fba:	461a      	mov	r2, r3
 8007fbc:	79fb      	ldrb	r3, [r7, #7]
 8007fbe:	429a      	cmp	r2, r3
 8007fc0:	d113      	bne.n	8007fea <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fc6:	f043 0220 	orr.w	r2, r3, #32
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	2220      	movs	r2, #32
 8007fd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	2200      	movs	r2, #0
 8007fda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8007fe6:	2301      	movs	r3, #1
 8007fe8:	e00f      	b.n	800800a <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	699a      	ldr	r2, [r3, #24]
 8007ff0:	68bb      	ldr	r3, [r7, #8]
 8007ff2:	4013      	ands	r3, r2
 8007ff4:	68ba      	ldr	r2, [r7, #8]
 8007ff6:	429a      	cmp	r2, r3
 8007ff8:	bf0c      	ite	eq
 8007ffa:	2301      	moveq	r3, #1
 8007ffc:	2300      	movne	r3, #0
 8007ffe:	b2db      	uxtb	r3, r3
 8008000:	461a      	mov	r2, r3
 8008002:	79fb      	ldrb	r3, [r7, #7]
 8008004:	429a      	cmp	r2, r3
 8008006:	d0be      	beq.n	8007f86 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008008:	2300      	movs	r3, #0
}
 800800a:	4618      	mov	r0, r3
 800800c:	3710      	adds	r7, #16
 800800e:	46bd      	mov	sp, r7
 8008010:	bd80      	pop	{r7, pc}

08008012 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008012:	b580      	push	{r7, lr}
 8008014:	b084      	sub	sp, #16
 8008016:	af00      	add	r7, sp, #0
 8008018:	60f8      	str	r0, [r7, #12]
 800801a:	60b9      	str	r1, [r7, #8]
 800801c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800801e:	e033      	b.n	8008088 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008020:	687a      	ldr	r2, [r7, #4]
 8008022:	68b9      	ldr	r1, [r7, #8]
 8008024:	68f8      	ldr	r0, [r7, #12]
 8008026:	f000 f87f 	bl	8008128 <I2C_IsErrorOccurred>
 800802a:	4603      	mov	r3, r0
 800802c:	2b00      	cmp	r3, #0
 800802e:	d001      	beq.n	8008034 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008030:	2301      	movs	r3, #1
 8008032:	e031      	b.n	8008098 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008034:	68bb      	ldr	r3, [r7, #8]
 8008036:	f1b3 3fff 	cmp.w	r3, #4294967295
 800803a:	d025      	beq.n	8008088 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800803c:	f7fb fd66 	bl	8003b0c <HAL_GetTick>
 8008040:	4602      	mov	r2, r0
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	1ad3      	subs	r3, r2, r3
 8008046:	68ba      	ldr	r2, [r7, #8]
 8008048:	429a      	cmp	r2, r3
 800804a:	d302      	bcc.n	8008052 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800804c:	68bb      	ldr	r3, [r7, #8]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d11a      	bne.n	8008088 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	699b      	ldr	r3, [r3, #24]
 8008058:	f003 0302 	and.w	r3, r3, #2
 800805c:	2b02      	cmp	r3, #2
 800805e:	d013      	beq.n	8008088 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008064:	f043 0220 	orr.w	r2, r3, #32
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	2220      	movs	r2, #32
 8008070:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	2200      	movs	r2, #0
 8008078:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	2200      	movs	r2, #0
 8008080:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8008084:	2301      	movs	r3, #1
 8008086:	e007      	b.n	8008098 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	699b      	ldr	r3, [r3, #24]
 800808e:	f003 0302 	and.w	r3, r3, #2
 8008092:	2b02      	cmp	r3, #2
 8008094:	d1c4      	bne.n	8008020 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8008096:	2300      	movs	r3, #0
}
 8008098:	4618      	mov	r0, r3
 800809a:	3710      	adds	r7, #16
 800809c:	46bd      	mov	sp, r7
 800809e:	bd80      	pop	{r7, pc}

080080a0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b084      	sub	sp, #16
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	60f8      	str	r0, [r7, #12]
 80080a8:	60b9      	str	r1, [r7, #8]
 80080aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80080ac:	e02f      	b.n	800810e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80080ae:	687a      	ldr	r2, [r7, #4]
 80080b0:	68b9      	ldr	r1, [r7, #8]
 80080b2:	68f8      	ldr	r0, [r7, #12]
 80080b4:	f000 f838 	bl	8008128 <I2C_IsErrorOccurred>
 80080b8:	4603      	mov	r3, r0
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d001      	beq.n	80080c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80080be:	2301      	movs	r3, #1
 80080c0:	e02d      	b.n	800811e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80080c2:	f7fb fd23 	bl	8003b0c <HAL_GetTick>
 80080c6:	4602      	mov	r2, r0
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	1ad3      	subs	r3, r2, r3
 80080cc:	68ba      	ldr	r2, [r7, #8]
 80080ce:	429a      	cmp	r2, r3
 80080d0:	d302      	bcc.n	80080d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80080d2:	68bb      	ldr	r3, [r7, #8]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d11a      	bne.n	800810e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	699b      	ldr	r3, [r3, #24]
 80080de:	f003 0320 	and.w	r3, r3, #32
 80080e2:	2b20      	cmp	r3, #32
 80080e4:	d013      	beq.n	800810e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080ea:	f043 0220 	orr.w	r2, r3, #32
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	2220      	movs	r2, #32
 80080f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	2200      	movs	r2, #0
 80080fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	2200      	movs	r2, #0
 8008106:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800810a:	2301      	movs	r3, #1
 800810c:	e007      	b.n	800811e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	699b      	ldr	r3, [r3, #24]
 8008114:	f003 0320 	and.w	r3, r3, #32
 8008118:	2b20      	cmp	r3, #32
 800811a:	d1c8      	bne.n	80080ae <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800811c:	2300      	movs	r3, #0
}
 800811e:	4618      	mov	r0, r3
 8008120:	3710      	adds	r7, #16
 8008122:	46bd      	mov	sp, r7
 8008124:	bd80      	pop	{r7, pc}
	...

08008128 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b08a      	sub	sp, #40	; 0x28
 800812c:	af00      	add	r7, sp, #0
 800812e:	60f8      	str	r0, [r7, #12]
 8008130:	60b9      	str	r1, [r7, #8]
 8008132:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008134:	2300      	movs	r3, #0
 8008136:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	699b      	ldr	r3, [r3, #24]
 8008140:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8008142:	2300      	movs	r3, #0
 8008144:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800814a:	69bb      	ldr	r3, [r7, #24]
 800814c:	f003 0310 	and.w	r3, r3, #16
 8008150:	2b00      	cmp	r3, #0
 8008152:	d068      	beq.n	8008226 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	2210      	movs	r2, #16
 800815a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800815c:	e049      	b.n	80081f2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800815e:	68bb      	ldr	r3, [r7, #8]
 8008160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008164:	d045      	beq.n	80081f2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008166:	f7fb fcd1 	bl	8003b0c <HAL_GetTick>
 800816a:	4602      	mov	r2, r0
 800816c:	69fb      	ldr	r3, [r7, #28]
 800816e:	1ad3      	subs	r3, r2, r3
 8008170:	68ba      	ldr	r2, [r7, #8]
 8008172:	429a      	cmp	r2, r3
 8008174:	d302      	bcc.n	800817c <I2C_IsErrorOccurred+0x54>
 8008176:	68bb      	ldr	r3, [r7, #8]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d13a      	bne.n	80081f2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	685b      	ldr	r3, [r3, #4]
 8008182:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008186:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800818e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	699b      	ldr	r3, [r3, #24]
 8008196:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800819a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800819e:	d121      	bne.n	80081e4 <I2C_IsErrorOccurred+0xbc>
 80081a0:	697b      	ldr	r3, [r7, #20]
 80081a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80081a6:	d01d      	beq.n	80081e4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80081a8:	7cfb      	ldrb	r3, [r7, #19]
 80081aa:	2b20      	cmp	r3, #32
 80081ac:	d01a      	beq.n	80081e4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	685a      	ldr	r2, [r3, #4]
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80081bc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80081be:	f7fb fca5 	bl	8003b0c <HAL_GetTick>
 80081c2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80081c4:	e00e      	b.n	80081e4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80081c6:	f7fb fca1 	bl	8003b0c <HAL_GetTick>
 80081ca:	4602      	mov	r2, r0
 80081cc:	69fb      	ldr	r3, [r7, #28]
 80081ce:	1ad3      	subs	r3, r2, r3
 80081d0:	2b19      	cmp	r3, #25
 80081d2:	d907      	bls.n	80081e4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80081d4:	6a3b      	ldr	r3, [r7, #32]
 80081d6:	f043 0320 	orr.w	r3, r3, #32
 80081da:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80081dc:	2301      	movs	r3, #1
 80081de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80081e2:	e006      	b.n	80081f2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	699b      	ldr	r3, [r3, #24]
 80081ea:	f003 0320 	and.w	r3, r3, #32
 80081ee:	2b20      	cmp	r3, #32
 80081f0:	d1e9      	bne.n	80081c6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	699b      	ldr	r3, [r3, #24]
 80081f8:	f003 0320 	and.w	r3, r3, #32
 80081fc:	2b20      	cmp	r3, #32
 80081fe:	d003      	beq.n	8008208 <I2C_IsErrorOccurred+0xe0>
 8008200:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008204:	2b00      	cmp	r3, #0
 8008206:	d0aa      	beq.n	800815e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8008208:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800820c:	2b00      	cmp	r3, #0
 800820e:	d103      	bne.n	8008218 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	2220      	movs	r2, #32
 8008216:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8008218:	6a3b      	ldr	r3, [r7, #32]
 800821a:	f043 0304 	orr.w	r3, r3, #4
 800821e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8008220:	2301      	movs	r3, #1
 8008222:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	699b      	ldr	r3, [r3, #24]
 800822c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800822e:	69bb      	ldr	r3, [r7, #24]
 8008230:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008234:	2b00      	cmp	r3, #0
 8008236:	d00b      	beq.n	8008250 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8008238:	6a3b      	ldr	r3, [r7, #32]
 800823a:	f043 0301 	orr.w	r3, r3, #1
 800823e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008248:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800824a:	2301      	movs	r3, #1
 800824c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8008250:	69bb      	ldr	r3, [r7, #24]
 8008252:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008256:	2b00      	cmp	r3, #0
 8008258:	d00b      	beq.n	8008272 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800825a:	6a3b      	ldr	r3, [r7, #32]
 800825c:	f043 0308 	orr.w	r3, r3, #8
 8008260:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800826a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800826c:	2301      	movs	r3, #1
 800826e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8008272:	69bb      	ldr	r3, [r7, #24]
 8008274:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008278:	2b00      	cmp	r3, #0
 800827a:	d00b      	beq.n	8008294 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800827c:	6a3b      	ldr	r3, [r7, #32]
 800827e:	f043 0302 	orr.w	r3, r3, #2
 8008282:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	f44f 7200 	mov.w	r2, #512	; 0x200
 800828c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800828e:	2301      	movs	r3, #1
 8008290:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8008294:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008298:	2b00      	cmp	r3, #0
 800829a:	d01c      	beq.n	80082d6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800829c:	68f8      	ldr	r0, [r7, #12]
 800829e:	f7ff fe45 	bl	8007f2c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	6859      	ldr	r1, [r3, #4]
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	681a      	ldr	r2, [r3, #0]
 80082ac:	4b0d      	ldr	r3, [pc, #52]	; (80082e4 <I2C_IsErrorOccurred+0x1bc>)
 80082ae:	400b      	ands	r3, r1
 80082b0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80082b6:	6a3b      	ldr	r3, [r7, #32]
 80082b8:	431a      	orrs	r2, r3
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	2220      	movs	r2, #32
 80082c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	2200      	movs	r2, #0
 80082ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	2200      	movs	r2, #0
 80082d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80082d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80082da:	4618      	mov	r0, r3
 80082dc:	3728      	adds	r7, #40	; 0x28
 80082de:	46bd      	mov	sp, r7
 80082e0:	bd80      	pop	{r7, pc}
 80082e2:	bf00      	nop
 80082e4:	fe00e800 	.word	0xfe00e800

080082e8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80082e8:	b480      	push	{r7}
 80082ea:	b087      	sub	sp, #28
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	60f8      	str	r0, [r7, #12]
 80082f0:	607b      	str	r3, [r7, #4]
 80082f2:	460b      	mov	r3, r1
 80082f4:	817b      	strh	r3, [r7, #10]
 80082f6:	4613      	mov	r3, r2
 80082f8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80082fa:	897b      	ldrh	r3, [r7, #10]
 80082fc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008300:	7a7b      	ldrb	r3, [r7, #9]
 8008302:	041b      	lsls	r3, r3, #16
 8008304:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008308:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800830e:	6a3b      	ldr	r3, [r7, #32]
 8008310:	4313      	orrs	r3, r2
 8008312:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008316:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	685a      	ldr	r2, [r3, #4]
 800831e:	6a3b      	ldr	r3, [r7, #32]
 8008320:	0d5b      	lsrs	r3, r3, #21
 8008322:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8008326:	4b08      	ldr	r3, [pc, #32]	; (8008348 <I2C_TransferConfig+0x60>)
 8008328:	430b      	orrs	r3, r1
 800832a:	43db      	mvns	r3, r3
 800832c:	ea02 0103 	and.w	r1, r2, r3
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	697a      	ldr	r2, [r7, #20]
 8008336:	430a      	orrs	r2, r1
 8008338:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800833a:	bf00      	nop
 800833c:	371c      	adds	r7, #28
 800833e:	46bd      	mov	sp, r7
 8008340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008344:	4770      	bx	lr
 8008346:	bf00      	nop
 8008348:	03ff63ff 	.word	0x03ff63ff

0800834c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800834c:	b480      	push	{r7}
 800834e:	b083      	sub	sp, #12
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
 8008354:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800835c:	b2db      	uxtb	r3, r3
 800835e:	2b20      	cmp	r3, #32
 8008360:	d138      	bne.n	80083d4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008368:	2b01      	cmp	r3, #1
 800836a:	d101      	bne.n	8008370 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800836c:	2302      	movs	r3, #2
 800836e:	e032      	b.n	80083d6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2201      	movs	r2, #1
 8008374:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2224      	movs	r2, #36	; 0x24
 800837c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	681a      	ldr	r2, [r3, #0]
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	f022 0201 	bic.w	r2, r2, #1
 800838e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	681a      	ldr	r2, [r3, #0]
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800839e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	6819      	ldr	r1, [r3, #0]
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	683a      	ldr	r2, [r7, #0]
 80083ac:	430a      	orrs	r2, r1
 80083ae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	681a      	ldr	r2, [r3, #0]
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	f042 0201 	orr.w	r2, r2, #1
 80083be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2220      	movs	r2, #32
 80083c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2200      	movs	r2, #0
 80083cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80083d0:	2300      	movs	r3, #0
 80083d2:	e000      	b.n	80083d6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80083d4:	2302      	movs	r3, #2
  }
}
 80083d6:	4618      	mov	r0, r3
 80083d8:	370c      	adds	r7, #12
 80083da:	46bd      	mov	sp, r7
 80083dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e0:	4770      	bx	lr

080083e2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80083e2:	b480      	push	{r7}
 80083e4:	b085      	sub	sp, #20
 80083e6:	af00      	add	r7, sp, #0
 80083e8:	6078      	str	r0, [r7, #4]
 80083ea:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80083f2:	b2db      	uxtb	r3, r3
 80083f4:	2b20      	cmp	r3, #32
 80083f6:	d139      	bne.n	800846c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80083fe:	2b01      	cmp	r3, #1
 8008400:	d101      	bne.n	8008406 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008402:	2302      	movs	r3, #2
 8008404:	e033      	b.n	800846e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	2201      	movs	r2, #1
 800840a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	2224      	movs	r2, #36	; 0x24
 8008412:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	681a      	ldr	r2, [r3, #0]
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	f022 0201 	bic.w	r2, r2, #1
 8008424:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008434:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	021b      	lsls	r3, r3, #8
 800843a:	68fa      	ldr	r2, [r7, #12]
 800843c:	4313      	orrs	r3, r2
 800843e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	68fa      	ldr	r2, [r7, #12]
 8008446:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	681a      	ldr	r2, [r3, #0]
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	f042 0201 	orr.w	r2, r2, #1
 8008456:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	2220      	movs	r2, #32
 800845c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2200      	movs	r2, #0
 8008464:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008468:	2300      	movs	r3, #0
 800846a:	e000      	b.n	800846e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800846c:	2302      	movs	r3, #2
  }
}
 800846e:	4618      	mov	r0, r3
 8008470:	3714      	adds	r7, #20
 8008472:	46bd      	mov	sp, r7
 8008474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008478:	4770      	bx	lr

0800847a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800847a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800847c:	b08f      	sub	sp, #60	; 0x3c
 800847e:	af0a      	add	r7, sp, #40	; 0x28
 8008480:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d101      	bne.n	800848c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8008488:	2301      	movs	r3, #1
 800848a:	e116      	b.n	80086ba <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8008498:	b2db      	uxtb	r3, r3
 800849a:	2b00      	cmp	r3, #0
 800849c:	d106      	bne.n	80084ac <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	2200      	movs	r2, #0
 80084a2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80084a6:	6878      	ldr	r0, [r7, #4]
 80084a8:	f7fb f8ba 	bl	8003620 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2203      	movs	r2, #3
 80084b0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80084b4:	68bb      	ldr	r3, [r7, #8]
 80084b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d102      	bne.n	80084c6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	2200      	movs	r2, #0
 80084c4:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	4618      	mov	r0, r3
 80084cc:	f007 f880 	bl	800f5d0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	603b      	str	r3, [r7, #0]
 80084d6:	687e      	ldr	r6, [r7, #4]
 80084d8:	466d      	mov	r5, sp
 80084da:	f106 0410 	add.w	r4, r6, #16
 80084de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80084e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80084e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80084e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80084e6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80084ea:	e885 0003 	stmia.w	r5, {r0, r1}
 80084ee:	1d33      	adds	r3, r6, #4
 80084f0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80084f2:	6838      	ldr	r0, [r7, #0]
 80084f4:	f006 fffe 	bl	800f4f4 <USB_CoreInit>
 80084f8:	4603      	mov	r3, r0
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d005      	beq.n	800850a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	2202      	movs	r2, #2
 8008502:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8008506:	2301      	movs	r3, #1
 8008508:	e0d7      	b.n	80086ba <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	2100      	movs	r1, #0
 8008510:	4618      	mov	r0, r3
 8008512:	f007 f86e 	bl	800f5f2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008516:	2300      	movs	r3, #0
 8008518:	73fb      	strb	r3, [r7, #15]
 800851a:	e04a      	b.n	80085b2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800851c:	7bfa      	ldrb	r2, [r7, #15]
 800851e:	6879      	ldr	r1, [r7, #4]
 8008520:	4613      	mov	r3, r2
 8008522:	00db      	lsls	r3, r3, #3
 8008524:	4413      	add	r3, r2
 8008526:	009b      	lsls	r3, r3, #2
 8008528:	440b      	add	r3, r1
 800852a:	333d      	adds	r3, #61	; 0x3d
 800852c:	2201      	movs	r2, #1
 800852e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8008530:	7bfa      	ldrb	r2, [r7, #15]
 8008532:	6879      	ldr	r1, [r7, #4]
 8008534:	4613      	mov	r3, r2
 8008536:	00db      	lsls	r3, r3, #3
 8008538:	4413      	add	r3, r2
 800853a:	009b      	lsls	r3, r3, #2
 800853c:	440b      	add	r3, r1
 800853e:	333c      	adds	r3, #60	; 0x3c
 8008540:	7bfa      	ldrb	r2, [r7, #15]
 8008542:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8008544:	7bfa      	ldrb	r2, [r7, #15]
 8008546:	7bfb      	ldrb	r3, [r7, #15]
 8008548:	b298      	uxth	r0, r3
 800854a:	6879      	ldr	r1, [r7, #4]
 800854c:	4613      	mov	r3, r2
 800854e:	00db      	lsls	r3, r3, #3
 8008550:	4413      	add	r3, r2
 8008552:	009b      	lsls	r3, r3, #2
 8008554:	440b      	add	r3, r1
 8008556:	3356      	adds	r3, #86	; 0x56
 8008558:	4602      	mov	r2, r0
 800855a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800855c:	7bfa      	ldrb	r2, [r7, #15]
 800855e:	6879      	ldr	r1, [r7, #4]
 8008560:	4613      	mov	r3, r2
 8008562:	00db      	lsls	r3, r3, #3
 8008564:	4413      	add	r3, r2
 8008566:	009b      	lsls	r3, r3, #2
 8008568:	440b      	add	r3, r1
 800856a:	3340      	adds	r3, #64	; 0x40
 800856c:	2200      	movs	r2, #0
 800856e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8008570:	7bfa      	ldrb	r2, [r7, #15]
 8008572:	6879      	ldr	r1, [r7, #4]
 8008574:	4613      	mov	r3, r2
 8008576:	00db      	lsls	r3, r3, #3
 8008578:	4413      	add	r3, r2
 800857a:	009b      	lsls	r3, r3, #2
 800857c:	440b      	add	r3, r1
 800857e:	3344      	adds	r3, #68	; 0x44
 8008580:	2200      	movs	r2, #0
 8008582:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8008584:	7bfa      	ldrb	r2, [r7, #15]
 8008586:	6879      	ldr	r1, [r7, #4]
 8008588:	4613      	mov	r3, r2
 800858a:	00db      	lsls	r3, r3, #3
 800858c:	4413      	add	r3, r2
 800858e:	009b      	lsls	r3, r3, #2
 8008590:	440b      	add	r3, r1
 8008592:	3348      	adds	r3, #72	; 0x48
 8008594:	2200      	movs	r2, #0
 8008596:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8008598:	7bfa      	ldrb	r2, [r7, #15]
 800859a:	6879      	ldr	r1, [r7, #4]
 800859c:	4613      	mov	r3, r2
 800859e:	00db      	lsls	r3, r3, #3
 80085a0:	4413      	add	r3, r2
 80085a2:	009b      	lsls	r3, r3, #2
 80085a4:	440b      	add	r3, r1
 80085a6:	334c      	adds	r3, #76	; 0x4c
 80085a8:	2200      	movs	r2, #0
 80085aa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80085ac:	7bfb      	ldrb	r3, [r7, #15]
 80085ae:	3301      	adds	r3, #1
 80085b0:	73fb      	strb	r3, [r7, #15]
 80085b2:	7bfa      	ldrb	r2, [r7, #15]
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	685b      	ldr	r3, [r3, #4]
 80085b8:	429a      	cmp	r2, r3
 80085ba:	d3af      	bcc.n	800851c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80085bc:	2300      	movs	r3, #0
 80085be:	73fb      	strb	r3, [r7, #15]
 80085c0:	e044      	b.n	800864c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80085c2:	7bfa      	ldrb	r2, [r7, #15]
 80085c4:	6879      	ldr	r1, [r7, #4]
 80085c6:	4613      	mov	r3, r2
 80085c8:	00db      	lsls	r3, r3, #3
 80085ca:	4413      	add	r3, r2
 80085cc:	009b      	lsls	r3, r3, #2
 80085ce:	440b      	add	r3, r1
 80085d0:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80085d4:	2200      	movs	r2, #0
 80085d6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80085d8:	7bfa      	ldrb	r2, [r7, #15]
 80085da:	6879      	ldr	r1, [r7, #4]
 80085dc:	4613      	mov	r3, r2
 80085de:	00db      	lsls	r3, r3, #3
 80085e0:	4413      	add	r3, r2
 80085e2:	009b      	lsls	r3, r3, #2
 80085e4:	440b      	add	r3, r1
 80085e6:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80085ea:	7bfa      	ldrb	r2, [r7, #15]
 80085ec:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80085ee:	7bfa      	ldrb	r2, [r7, #15]
 80085f0:	6879      	ldr	r1, [r7, #4]
 80085f2:	4613      	mov	r3, r2
 80085f4:	00db      	lsls	r3, r3, #3
 80085f6:	4413      	add	r3, r2
 80085f8:	009b      	lsls	r3, r3, #2
 80085fa:	440b      	add	r3, r1
 80085fc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008600:	2200      	movs	r2, #0
 8008602:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8008604:	7bfa      	ldrb	r2, [r7, #15]
 8008606:	6879      	ldr	r1, [r7, #4]
 8008608:	4613      	mov	r3, r2
 800860a:	00db      	lsls	r3, r3, #3
 800860c:	4413      	add	r3, r2
 800860e:	009b      	lsls	r3, r3, #2
 8008610:	440b      	add	r3, r1
 8008612:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8008616:	2200      	movs	r2, #0
 8008618:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800861a:	7bfa      	ldrb	r2, [r7, #15]
 800861c:	6879      	ldr	r1, [r7, #4]
 800861e:	4613      	mov	r3, r2
 8008620:	00db      	lsls	r3, r3, #3
 8008622:	4413      	add	r3, r2
 8008624:	009b      	lsls	r3, r3, #2
 8008626:	440b      	add	r3, r1
 8008628:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800862c:	2200      	movs	r2, #0
 800862e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8008630:	7bfa      	ldrb	r2, [r7, #15]
 8008632:	6879      	ldr	r1, [r7, #4]
 8008634:	4613      	mov	r3, r2
 8008636:	00db      	lsls	r3, r3, #3
 8008638:	4413      	add	r3, r2
 800863a:	009b      	lsls	r3, r3, #2
 800863c:	440b      	add	r3, r1
 800863e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008642:	2200      	movs	r2, #0
 8008644:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008646:	7bfb      	ldrb	r3, [r7, #15]
 8008648:	3301      	adds	r3, #1
 800864a:	73fb      	strb	r3, [r7, #15]
 800864c:	7bfa      	ldrb	r2, [r7, #15]
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	685b      	ldr	r3, [r3, #4]
 8008652:	429a      	cmp	r2, r3
 8008654:	d3b5      	bcc.n	80085c2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	603b      	str	r3, [r7, #0]
 800865c:	687e      	ldr	r6, [r7, #4]
 800865e:	466d      	mov	r5, sp
 8008660:	f106 0410 	add.w	r4, r6, #16
 8008664:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008666:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008668:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800866a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800866c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008670:	e885 0003 	stmia.w	r5, {r0, r1}
 8008674:	1d33      	adds	r3, r6, #4
 8008676:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008678:	6838      	ldr	r0, [r7, #0]
 800867a:	f007 f807 	bl	800f68c <USB_DevInit>
 800867e:	4603      	mov	r3, r0
 8008680:	2b00      	cmp	r3, #0
 8008682:	d005      	beq.n	8008690 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2202      	movs	r2, #2
 8008688:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800868c:	2301      	movs	r3, #1
 800868e:	e014      	b.n	80086ba <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2200      	movs	r2, #0
 8008694:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2201      	movs	r2, #1
 800869c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086a4:	2b01      	cmp	r3, #1
 80086a6:	d102      	bne.n	80086ae <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80086a8:	6878      	ldr	r0, [r7, #4]
 80086aa:	f000 f80b 	bl	80086c4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	4618      	mov	r0, r3
 80086b4:	f007 f9c5 	bl	800fa42 <USB_DevDisconnect>

  return HAL_OK;
 80086b8:	2300      	movs	r3, #0
}
 80086ba:	4618      	mov	r0, r3
 80086bc:	3714      	adds	r7, #20
 80086be:	46bd      	mov	sp, r7
 80086c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080086c4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80086c4:	b480      	push	{r7}
 80086c6:	b085      	sub	sp, #20
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	2201      	movs	r2, #1
 80086d6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	2200      	movs	r2, #0
 80086de:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	699b      	ldr	r3, [r3, #24]
 80086e6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80086f2:	4b05      	ldr	r3, [pc, #20]	; (8008708 <HAL_PCDEx_ActivateLPM+0x44>)
 80086f4:	4313      	orrs	r3, r2
 80086f6:	68fa      	ldr	r2, [r7, #12]
 80086f8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80086fa:	2300      	movs	r3, #0
}
 80086fc:	4618      	mov	r0, r3
 80086fe:	3714      	adds	r7, #20
 8008700:	46bd      	mov	sp, r7
 8008702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008706:	4770      	bx	lr
 8008708:	10000003 	.word	0x10000003

0800870c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800870c:	b580      	push	{r7, lr}
 800870e:	b084      	sub	sp, #16
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8008714:	4b29      	ldr	r3, [pc, #164]	; (80087bc <HAL_PWREx_ConfigSupply+0xb0>)
 8008716:	68db      	ldr	r3, [r3, #12]
 8008718:	f003 0307 	and.w	r3, r3, #7
 800871c:	2b06      	cmp	r3, #6
 800871e:	d00a      	beq.n	8008736 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008720:	4b26      	ldr	r3, [pc, #152]	; (80087bc <HAL_PWREx_ConfigSupply+0xb0>)
 8008722:	68db      	ldr	r3, [r3, #12]
 8008724:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008728:	687a      	ldr	r2, [r7, #4]
 800872a:	429a      	cmp	r2, r3
 800872c:	d001      	beq.n	8008732 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800872e:	2301      	movs	r3, #1
 8008730:	e040      	b.n	80087b4 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8008732:	2300      	movs	r3, #0
 8008734:	e03e      	b.n	80087b4 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008736:	4b21      	ldr	r3, [pc, #132]	; (80087bc <HAL_PWREx_ConfigSupply+0xb0>)
 8008738:	68db      	ldr	r3, [r3, #12]
 800873a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800873e:	491f      	ldr	r1, [pc, #124]	; (80087bc <HAL_PWREx_ConfigSupply+0xb0>)
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	4313      	orrs	r3, r2
 8008744:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8008746:	f7fb f9e1 	bl	8003b0c <HAL_GetTick>
 800874a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800874c:	e009      	b.n	8008762 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800874e:	f7fb f9dd 	bl	8003b0c <HAL_GetTick>
 8008752:	4602      	mov	r2, r0
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	1ad3      	subs	r3, r2, r3
 8008758:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800875c:	d901      	bls.n	8008762 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800875e:	2301      	movs	r3, #1
 8008760:	e028      	b.n	80087b4 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008762:	4b16      	ldr	r3, [pc, #88]	; (80087bc <HAL_PWREx_ConfigSupply+0xb0>)
 8008764:	685b      	ldr	r3, [r3, #4]
 8008766:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800876a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800876e:	d1ee      	bne.n	800874e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	2b1e      	cmp	r3, #30
 8008774:	d008      	beq.n	8008788 <HAL_PWREx_ConfigSupply+0x7c>
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	2b2e      	cmp	r3, #46	; 0x2e
 800877a:	d005      	beq.n	8008788 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	2b1d      	cmp	r3, #29
 8008780:	d002      	beq.n	8008788 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	2b2d      	cmp	r3, #45	; 0x2d
 8008786:	d114      	bne.n	80087b2 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8008788:	f7fb f9c0 	bl	8003b0c <HAL_GetTick>
 800878c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800878e:	e009      	b.n	80087a4 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008790:	f7fb f9bc 	bl	8003b0c <HAL_GetTick>
 8008794:	4602      	mov	r2, r0
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	1ad3      	subs	r3, r2, r3
 800879a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800879e:	d901      	bls.n	80087a4 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80087a0:	2301      	movs	r3, #1
 80087a2:	e007      	b.n	80087b4 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80087a4:	4b05      	ldr	r3, [pc, #20]	; (80087bc <HAL_PWREx_ConfigSupply+0xb0>)
 80087a6:	68db      	ldr	r3, [r3, #12]
 80087a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80087ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80087b0:	d1ee      	bne.n	8008790 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80087b2:	2300      	movs	r3, #0
}
 80087b4:	4618      	mov	r0, r3
 80087b6:	3710      	adds	r7, #16
 80087b8:	46bd      	mov	sp, r7
 80087ba:	bd80      	pop	{r7, pc}
 80087bc:	58024800 	.word	0x58024800

080087c0 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80087c0:	b480      	push	{r7}
 80087c2:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80087c4:	4b05      	ldr	r3, [pc, #20]	; (80087dc <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80087c6:	68db      	ldr	r3, [r3, #12]
 80087c8:	4a04      	ldr	r2, [pc, #16]	; (80087dc <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80087ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80087ce:	60d3      	str	r3, [r2, #12]
}
 80087d0:	bf00      	nop
 80087d2:	46bd      	mov	sp, r7
 80087d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d8:	4770      	bx	lr
 80087da:	bf00      	nop
 80087dc:	58024800 	.word	0x58024800

080087e0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b08c      	sub	sp, #48	; 0x30
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d102      	bne.n	80087f4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80087ee:	2301      	movs	r3, #1
 80087f0:	f000 bc48 	b.w	8009084 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	f003 0301 	and.w	r3, r3, #1
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	f000 8088 	beq.w	8008912 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008802:	4b99      	ldr	r3, [pc, #612]	; (8008a68 <HAL_RCC_OscConfig+0x288>)
 8008804:	691b      	ldr	r3, [r3, #16]
 8008806:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800880a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800880c:	4b96      	ldr	r3, [pc, #600]	; (8008a68 <HAL_RCC_OscConfig+0x288>)
 800880e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008810:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008814:	2b10      	cmp	r3, #16
 8008816:	d007      	beq.n	8008828 <HAL_RCC_OscConfig+0x48>
 8008818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800881a:	2b18      	cmp	r3, #24
 800881c:	d111      	bne.n	8008842 <HAL_RCC_OscConfig+0x62>
 800881e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008820:	f003 0303 	and.w	r3, r3, #3
 8008824:	2b02      	cmp	r3, #2
 8008826:	d10c      	bne.n	8008842 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008828:	4b8f      	ldr	r3, [pc, #572]	; (8008a68 <HAL_RCC_OscConfig+0x288>)
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008830:	2b00      	cmp	r3, #0
 8008832:	d06d      	beq.n	8008910 <HAL_RCC_OscConfig+0x130>
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	685b      	ldr	r3, [r3, #4]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d169      	bne.n	8008910 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800883c:	2301      	movs	r3, #1
 800883e:	f000 bc21 	b.w	8009084 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	685b      	ldr	r3, [r3, #4]
 8008846:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800884a:	d106      	bne.n	800885a <HAL_RCC_OscConfig+0x7a>
 800884c:	4b86      	ldr	r3, [pc, #536]	; (8008a68 <HAL_RCC_OscConfig+0x288>)
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	4a85      	ldr	r2, [pc, #532]	; (8008a68 <HAL_RCC_OscConfig+0x288>)
 8008852:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008856:	6013      	str	r3, [r2, #0]
 8008858:	e02e      	b.n	80088b8 <HAL_RCC_OscConfig+0xd8>
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	685b      	ldr	r3, [r3, #4]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d10c      	bne.n	800887c <HAL_RCC_OscConfig+0x9c>
 8008862:	4b81      	ldr	r3, [pc, #516]	; (8008a68 <HAL_RCC_OscConfig+0x288>)
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	4a80      	ldr	r2, [pc, #512]	; (8008a68 <HAL_RCC_OscConfig+0x288>)
 8008868:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800886c:	6013      	str	r3, [r2, #0]
 800886e:	4b7e      	ldr	r3, [pc, #504]	; (8008a68 <HAL_RCC_OscConfig+0x288>)
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	4a7d      	ldr	r2, [pc, #500]	; (8008a68 <HAL_RCC_OscConfig+0x288>)
 8008874:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008878:	6013      	str	r3, [r2, #0]
 800887a:	e01d      	b.n	80088b8 <HAL_RCC_OscConfig+0xd8>
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	685b      	ldr	r3, [r3, #4]
 8008880:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008884:	d10c      	bne.n	80088a0 <HAL_RCC_OscConfig+0xc0>
 8008886:	4b78      	ldr	r3, [pc, #480]	; (8008a68 <HAL_RCC_OscConfig+0x288>)
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	4a77      	ldr	r2, [pc, #476]	; (8008a68 <HAL_RCC_OscConfig+0x288>)
 800888c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008890:	6013      	str	r3, [r2, #0]
 8008892:	4b75      	ldr	r3, [pc, #468]	; (8008a68 <HAL_RCC_OscConfig+0x288>)
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	4a74      	ldr	r2, [pc, #464]	; (8008a68 <HAL_RCC_OscConfig+0x288>)
 8008898:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800889c:	6013      	str	r3, [r2, #0]
 800889e:	e00b      	b.n	80088b8 <HAL_RCC_OscConfig+0xd8>
 80088a0:	4b71      	ldr	r3, [pc, #452]	; (8008a68 <HAL_RCC_OscConfig+0x288>)
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	4a70      	ldr	r2, [pc, #448]	; (8008a68 <HAL_RCC_OscConfig+0x288>)
 80088a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80088aa:	6013      	str	r3, [r2, #0]
 80088ac:	4b6e      	ldr	r3, [pc, #440]	; (8008a68 <HAL_RCC_OscConfig+0x288>)
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	4a6d      	ldr	r2, [pc, #436]	; (8008a68 <HAL_RCC_OscConfig+0x288>)
 80088b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80088b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	685b      	ldr	r3, [r3, #4]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d013      	beq.n	80088e8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088c0:	f7fb f924 	bl	8003b0c <HAL_GetTick>
 80088c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80088c6:	e008      	b.n	80088da <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80088c8:	f7fb f920 	bl	8003b0c <HAL_GetTick>
 80088cc:	4602      	mov	r2, r0
 80088ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088d0:	1ad3      	subs	r3, r2, r3
 80088d2:	2b64      	cmp	r3, #100	; 0x64
 80088d4:	d901      	bls.n	80088da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80088d6:	2303      	movs	r3, #3
 80088d8:	e3d4      	b.n	8009084 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80088da:	4b63      	ldr	r3, [pc, #396]	; (8008a68 <HAL_RCC_OscConfig+0x288>)
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d0f0      	beq.n	80088c8 <HAL_RCC_OscConfig+0xe8>
 80088e6:	e014      	b.n	8008912 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088e8:	f7fb f910 	bl	8003b0c <HAL_GetTick>
 80088ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80088ee:	e008      	b.n	8008902 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80088f0:	f7fb f90c 	bl	8003b0c <HAL_GetTick>
 80088f4:	4602      	mov	r2, r0
 80088f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088f8:	1ad3      	subs	r3, r2, r3
 80088fa:	2b64      	cmp	r3, #100	; 0x64
 80088fc:	d901      	bls.n	8008902 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80088fe:	2303      	movs	r3, #3
 8008900:	e3c0      	b.n	8009084 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008902:	4b59      	ldr	r3, [pc, #356]	; (8008a68 <HAL_RCC_OscConfig+0x288>)
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800890a:	2b00      	cmp	r3, #0
 800890c:	d1f0      	bne.n	80088f0 <HAL_RCC_OscConfig+0x110>
 800890e:	e000      	b.n	8008912 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008910:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	f003 0302 	and.w	r3, r3, #2
 800891a:	2b00      	cmp	r3, #0
 800891c:	f000 80ca 	beq.w	8008ab4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008920:	4b51      	ldr	r3, [pc, #324]	; (8008a68 <HAL_RCC_OscConfig+0x288>)
 8008922:	691b      	ldr	r3, [r3, #16]
 8008924:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008928:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800892a:	4b4f      	ldr	r3, [pc, #316]	; (8008a68 <HAL_RCC_OscConfig+0x288>)
 800892c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800892e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008930:	6a3b      	ldr	r3, [r7, #32]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d007      	beq.n	8008946 <HAL_RCC_OscConfig+0x166>
 8008936:	6a3b      	ldr	r3, [r7, #32]
 8008938:	2b18      	cmp	r3, #24
 800893a:	d156      	bne.n	80089ea <HAL_RCC_OscConfig+0x20a>
 800893c:	69fb      	ldr	r3, [r7, #28]
 800893e:	f003 0303 	and.w	r3, r3, #3
 8008942:	2b00      	cmp	r3, #0
 8008944:	d151      	bne.n	80089ea <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008946:	4b48      	ldr	r3, [pc, #288]	; (8008a68 <HAL_RCC_OscConfig+0x288>)
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	f003 0304 	and.w	r3, r3, #4
 800894e:	2b00      	cmp	r3, #0
 8008950:	d005      	beq.n	800895e <HAL_RCC_OscConfig+0x17e>
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	68db      	ldr	r3, [r3, #12]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d101      	bne.n	800895e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800895a:	2301      	movs	r3, #1
 800895c:	e392      	b.n	8009084 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800895e:	4b42      	ldr	r3, [pc, #264]	; (8008a68 <HAL_RCC_OscConfig+0x288>)
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	f023 0219 	bic.w	r2, r3, #25
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	68db      	ldr	r3, [r3, #12]
 800896a:	493f      	ldr	r1, [pc, #252]	; (8008a68 <HAL_RCC_OscConfig+0x288>)
 800896c:	4313      	orrs	r3, r2
 800896e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008970:	f7fb f8cc 	bl	8003b0c <HAL_GetTick>
 8008974:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008976:	e008      	b.n	800898a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008978:	f7fb f8c8 	bl	8003b0c <HAL_GetTick>
 800897c:	4602      	mov	r2, r0
 800897e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008980:	1ad3      	subs	r3, r2, r3
 8008982:	2b02      	cmp	r3, #2
 8008984:	d901      	bls.n	800898a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8008986:	2303      	movs	r3, #3
 8008988:	e37c      	b.n	8009084 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800898a:	4b37      	ldr	r3, [pc, #220]	; (8008a68 <HAL_RCC_OscConfig+0x288>)
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	f003 0304 	and.w	r3, r3, #4
 8008992:	2b00      	cmp	r3, #0
 8008994:	d0f0      	beq.n	8008978 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008996:	f7fb f8e9 	bl	8003b6c <HAL_GetREVID>
 800899a:	4603      	mov	r3, r0
 800899c:	f241 0203 	movw	r2, #4099	; 0x1003
 80089a0:	4293      	cmp	r3, r2
 80089a2:	d817      	bhi.n	80089d4 <HAL_RCC_OscConfig+0x1f4>
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	691b      	ldr	r3, [r3, #16]
 80089a8:	2b40      	cmp	r3, #64	; 0x40
 80089aa:	d108      	bne.n	80089be <HAL_RCC_OscConfig+0x1de>
 80089ac:	4b2e      	ldr	r3, [pc, #184]	; (8008a68 <HAL_RCC_OscConfig+0x288>)
 80089ae:	685b      	ldr	r3, [r3, #4]
 80089b0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80089b4:	4a2c      	ldr	r2, [pc, #176]	; (8008a68 <HAL_RCC_OscConfig+0x288>)
 80089b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80089ba:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80089bc:	e07a      	b.n	8008ab4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80089be:	4b2a      	ldr	r3, [pc, #168]	; (8008a68 <HAL_RCC_OscConfig+0x288>)
 80089c0:	685b      	ldr	r3, [r3, #4]
 80089c2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	691b      	ldr	r3, [r3, #16]
 80089ca:	031b      	lsls	r3, r3, #12
 80089cc:	4926      	ldr	r1, [pc, #152]	; (8008a68 <HAL_RCC_OscConfig+0x288>)
 80089ce:	4313      	orrs	r3, r2
 80089d0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80089d2:	e06f      	b.n	8008ab4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80089d4:	4b24      	ldr	r3, [pc, #144]	; (8008a68 <HAL_RCC_OscConfig+0x288>)
 80089d6:	685b      	ldr	r3, [r3, #4]
 80089d8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	691b      	ldr	r3, [r3, #16]
 80089e0:	061b      	lsls	r3, r3, #24
 80089e2:	4921      	ldr	r1, [pc, #132]	; (8008a68 <HAL_RCC_OscConfig+0x288>)
 80089e4:	4313      	orrs	r3, r2
 80089e6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80089e8:	e064      	b.n	8008ab4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	68db      	ldr	r3, [r3, #12]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d047      	beq.n	8008a82 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80089f2:	4b1d      	ldr	r3, [pc, #116]	; (8008a68 <HAL_RCC_OscConfig+0x288>)
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	f023 0219 	bic.w	r2, r3, #25
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	68db      	ldr	r3, [r3, #12]
 80089fe:	491a      	ldr	r1, [pc, #104]	; (8008a68 <HAL_RCC_OscConfig+0x288>)
 8008a00:	4313      	orrs	r3, r2
 8008a02:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a04:	f7fb f882 	bl	8003b0c <HAL_GetTick>
 8008a08:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008a0a:	e008      	b.n	8008a1e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008a0c:	f7fb f87e 	bl	8003b0c <HAL_GetTick>
 8008a10:	4602      	mov	r2, r0
 8008a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a14:	1ad3      	subs	r3, r2, r3
 8008a16:	2b02      	cmp	r3, #2
 8008a18:	d901      	bls.n	8008a1e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8008a1a:	2303      	movs	r3, #3
 8008a1c:	e332      	b.n	8009084 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008a1e:	4b12      	ldr	r3, [pc, #72]	; (8008a68 <HAL_RCC_OscConfig+0x288>)
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	f003 0304 	and.w	r3, r3, #4
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d0f0      	beq.n	8008a0c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008a2a:	f7fb f89f 	bl	8003b6c <HAL_GetREVID>
 8008a2e:	4603      	mov	r3, r0
 8008a30:	f241 0203 	movw	r2, #4099	; 0x1003
 8008a34:	4293      	cmp	r3, r2
 8008a36:	d819      	bhi.n	8008a6c <HAL_RCC_OscConfig+0x28c>
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	691b      	ldr	r3, [r3, #16]
 8008a3c:	2b40      	cmp	r3, #64	; 0x40
 8008a3e:	d108      	bne.n	8008a52 <HAL_RCC_OscConfig+0x272>
 8008a40:	4b09      	ldr	r3, [pc, #36]	; (8008a68 <HAL_RCC_OscConfig+0x288>)
 8008a42:	685b      	ldr	r3, [r3, #4]
 8008a44:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8008a48:	4a07      	ldr	r2, [pc, #28]	; (8008a68 <HAL_RCC_OscConfig+0x288>)
 8008a4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008a4e:	6053      	str	r3, [r2, #4]
 8008a50:	e030      	b.n	8008ab4 <HAL_RCC_OscConfig+0x2d4>
 8008a52:	4b05      	ldr	r3, [pc, #20]	; (8008a68 <HAL_RCC_OscConfig+0x288>)
 8008a54:	685b      	ldr	r3, [r3, #4]
 8008a56:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	691b      	ldr	r3, [r3, #16]
 8008a5e:	031b      	lsls	r3, r3, #12
 8008a60:	4901      	ldr	r1, [pc, #4]	; (8008a68 <HAL_RCC_OscConfig+0x288>)
 8008a62:	4313      	orrs	r3, r2
 8008a64:	604b      	str	r3, [r1, #4]
 8008a66:	e025      	b.n	8008ab4 <HAL_RCC_OscConfig+0x2d4>
 8008a68:	58024400 	.word	0x58024400
 8008a6c:	4b9a      	ldr	r3, [pc, #616]	; (8008cd8 <HAL_RCC_OscConfig+0x4f8>)
 8008a6e:	685b      	ldr	r3, [r3, #4]
 8008a70:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	691b      	ldr	r3, [r3, #16]
 8008a78:	061b      	lsls	r3, r3, #24
 8008a7a:	4997      	ldr	r1, [pc, #604]	; (8008cd8 <HAL_RCC_OscConfig+0x4f8>)
 8008a7c:	4313      	orrs	r3, r2
 8008a7e:	604b      	str	r3, [r1, #4]
 8008a80:	e018      	b.n	8008ab4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008a82:	4b95      	ldr	r3, [pc, #596]	; (8008cd8 <HAL_RCC_OscConfig+0x4f8>)
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	4a94      	ldr	r2, [pc, #592]	; (8008cd8 <HAL_RCC_OscConfig+0x4f8>)
 8008a88:	f023 0301 	bic.w	r3, r3, #1
 8008a8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a8e:	f7fb f83d 	bl	8003b0c <HAL_GetTick>
 8008a92:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008a94:	e008      	b.n	8008aa8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008a96:	f7fb f839 	bl	8003b0c <HAL_GetTick>
 8008a9a:	4602      	mov	r2, r0
 8008a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a9e:	1ad3      	subs	r3, r2, r3
 8008aa0:	2b02      	cmp	r3, #2
 8008aa2:	d901      	bls.n	8008aa8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8008aa4:	2303      	movs	r3, #3
 8008aa6:	e2ed      	b.n	8009084 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008aa8:	4b8b      	ldr	r3, [pc, #556]	; (8008cd8 <HAL_RCC_OscConfig+0x4f8>)
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	f003 0304 	and.w	r3, r3, #4
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d1f0      	bne.n	8008a96 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	f003 0310 	and.w	r3, r3, #16
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	f000 80a9 	beq.w	8008c14 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008ac2:	4b85      	ldr	r3, [pc, #532]	; (8008cd8 <HAL_RCC_OscConfig+0x4f8>)
 8008ac4:	691b      	ldr	r3, [r3, #16]
 8008ac6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008aca:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008acc:	4b82      	ldr	r3, [pc, #520]	; (8008cd8 <HAL_RCC_OscConfig+0x4f8>)
 8008ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ad0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008ad2:	69bb      	ldr	r3, [r7, #24]
 8008ad4:	2b08      	cmp	r3, #8
 8008ad6:	d007      	beq.n	8008ae8 <HAL_RCC_OscConfig+0x308>
 8008ad8:	69bb      	ldr	r3, [r7, #24]
 8008ada:	2b18      	cmp	r3, #24
 8008adc:	d13a      	bne.n	8008b54 <HAL_RCC_OscConfig+0x374>
 8008ade:	697b      	ldr	r3, [r7, #20]
 8008ae0:	f003 0303 	and.w	r3, r3, #3
 8008ae4:	2b01      	cmp	r3, #1
 8008ae6:	d135      	bne.n	8008b54 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008ae8:	4b7b      	ldr	r3, [pc, #492]	; (8008cd8 <HAL_RCC_OscConfig+0x4f8>)
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d005      	beq.n	8008b00 <HAL_RCC_OscConfig+0x320>
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	69db      	ldr	r3, [r3, #28]
 8008af8:	2b80      	cmp	r3, #128	; 0x80
 8008afa:	d001      	beq.n	8008b00 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8008afc:	2301      	movs	r3, #1
 8008afe:	e2c1      	b.n	8009084 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008b00:	f7fb f834 	bl	8003b6c <HAL_GetREVID>
 8008b04:	4603      	mov	r3, r0
 8008b06:	f241 0203 	movw	r2, #4099	; 0x1003
 8008b0a:	4293      	cmp	r3, r2
 8008b0c:	d817      	bhi.n	8008b3e <HAL_RCC_OscConfig+0x35e>
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	6a1b      	ldr	r3, [r3, #32]
 8008b12:	2b20      	cmp	r3, #32
 8008b14:	d108      	bne.n	8008b28 <HAL_RCC_OscConfig+0x348>
 8008b16:	4b70      	ldr	r3, [pc, #448]	; (8008cd8 <HAL_RCC_OscConfig+0x4f8>)
 8008b18:	685b      	ldr	r3, [r3, #4]
 8008b1a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008b1e:	4a6e      	ldr	r2, [pc, #440]	; (8008cd8 <HAL_RCC_OscConfig+0x4f8>)
 8008b20:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008b24:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008b26:	e075      	b.n	8008c14 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008b28:	4b6b      	ldr	r3, [pc, #428]	; (8008cd8 <HAL_RCC_OscConfig+0x4f8>)
 8008b2a:	685b      	ldr	r3, [r3, #4]
 8008b2c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	6a1b      	ldr	r3, [r3, #32]
 8008b34:	069b      	lsls	r3, r3, #26
 8008b36:	4968      	ldr	r1, [pc, #416]	; (8008cd8 <HAL_RCC_OscConfig+0x4f8>)
 8008b38:	4313      	orrs	r3, r2
 8008b3a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008b3c:	e06a      	b.n	8008c14 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008b3e:	4b66      	ldr	r3, [pc, #408]	; (8008cd8 <HAL_RCC_OscConfig+0x4f8>)
 8008b40:	68db      	ldr	r3, [r3, #12]
 8008b42:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	6a1b      	ldr	r3, [r3, #32]
 8008b4a:	061b      	lsls	r3, r3, #24
 8008b4c:	4962      	ldr	r1, [pc, #392]	; (8008cd8 <HAL_RCC_OscConfig+0x4f8>)
 8008b4e:	4313      	orrs	r3, r2
 8008b50:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008b52:	e05f      	b.n	8008c14 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	69db      	ldr	r3, [r3, #28]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d042      	beq.n	8008be2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008b5c:	4b5e      	ldr	r3, [pc, #376]	; (8008cd8 <HAL_RCC_OscConfig+0x4f8>)
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	4a5d      	ldr	r2, [pc, #372]	; (8008cd8 <HAL_RCC_OscConfig+0x4f8>)
 8008b62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b68:	f7fa ffd0 	bl	8003b0c <HAL_GetTick>
 8008b6c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008b6e:	e008      	b.n	8008b82 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008b70:	f7fa ffcc 	bl	8003b0c <HAL_GetTick>
 8008b74:	4602      	mov	r2, r0
 8008b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b78:	1ad3      	subs	r3, r2, r3
 8008b7a:	2b02      	cmp	r3, #2
 8008b7c:	d901      	bls.n	8008b82 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8008b7e:	2303      	movs	r3, #3
 8008b80:	e280      	b.n	8009084 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008b82:	4b55      	ldr	r3, [pc, #340]	; (8008cd8 <HAL_RCC_OscConfig+0x4f8>)
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d0f0      	beq.n	8008b70 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008b8e:	f7fa ffed 	bl	8003b6c <HAL_GetREVID>
 8008b92:	4603      	mov	r3, r0
 8008b94:	f241 0203 	movw	r2, #4099	; 0x1003
 8008b98:	4293      	cmp	r3, r2
 8008b9a:	d817      	bhi.n	8008bcc <HAL_RCC_OscConfig+0x3ec>
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	6a1b      	ldr	r3, [r3, #32]
 8008ba0:	2b20      	cmp	r3, #32
 8008ba2:	d108      	bne.n	8008bb6 <HAL_RCC_OscConfig+0x3d6>
 8008ba4:	4b4c      	ldr	r3, [pc, #304]	; (8008cd8 <HAL_RCC_OscConfig+0x4f8>)
 8008ba6:	685b      	ldr	r3, [r3, #4]
 8008ba8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008bac:	4a4a      	ldr	r2, [pc, #296]	; (8008cd8 <HAL_RCC_OscConfig+0x4f8>)
 8008bae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008bb2:	6053      	str	r3, [r2, #4]
 8008bb4:	e02e      	b.n	8008c14 <HAL_RCC_OscConfig+0x434>
 8008bb6:	4b48      	ldr	r3, [pc, #288]	; (8008cd8 <HAL_RCC_OscConfig+0x4f8>)
 8008bb8:	685b      	ldr	r3, [r3, #4]
 8008bba:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	6a1b      	ldr	r3, [r3, #32]
 8008bc2:	069b      	lsls	r3, r3, #26
 8008bc4:	4944      	ldr	r1, [pc, #272]	; (8008cd8 <HAL_RCC_OscConfig+0x4f8>)
 8008bc6:	4313      	orrs	r3, r2
 8008bc8:	604b      	str	r3, [r1, #4]
 8008bca:	e023      	b.n	8008c14 <HAL_RCC_OscConfig+0x434>
 8008bcc:	4b42      	ldr	r3, [pc, #264]	; (8008cd8 <HAL_RCC_OscConfig+0x4f8>)
 8008bce:	68db      	ldr	r3, [r3, #12]
 8008bd0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	6a1b      	ldr	r3, [r3, #32]
 8008bd8:	061b      	lsls	r3, r3, #24
 8008bda:	493f      	ldr	r1, [pc, #252]	; (8008cd8 <HAL_RCC_OscConfig+0x4f8>)
 8008bdc:	4313      	orrs	r3, r2
 8008bde:	60cb      	str	r3, [r1, #12]
 8008be0:	e018      	b.n	8008c14 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008be2:	4b3d      	ldr	r3, [pc, #244]	; (8008cd8 <HAL_RCC_OscConfig+0x4f8>)
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	4a3c      	ldr	r2, [pc, #240]	; (8008cd8 <HAL_RCC_OscConfig+0x4f8>)
 8008be8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008bec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008bee:	f7fa ff8d 	bl	8003b0c <HAL_GetTick>
 8008bf2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008bf4:	e008      	b.n	8008c08 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008bf6:	f7fa ff89 	bl	8003b0c <HAL_GetTick>
 8008bfa:	4602      	mov	r2, r0
 8008bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bfe:	1ad3      	subs	r3, r2, r3
 8008c00:	2b02      	cmp	r3, #2
 8008c02:	d901      	bls.n	8008c08 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008c04:	2303      	movs	r3, #3
 8008c06:	e23d      	b.n	8009084 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008c08:	4b33      	ldr	r3, [pc, #204]	; (8008cd8 <HAL_RCC_OscConfig+0x4f8>)
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d1f0      	bne.n	8008bf6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	f003 0308 	and.w	r3, r3, #8
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d036      	beq.n	8008c8e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	695b      	ldr	r3, [r3, #20]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d019      	beq.n	8008c5c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008c28:	4b2b      	ldr	r3, [pc, #172]	; (8008cd8 <HAL_RCC_OscConfig+0x4f8>)
 8008c2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c2c:	4a2a      	ldr	r2, [pc, #168]	; (8008cd8 <HAL_RCC_OscConfig+0x4f8>)
 8008c2e:	f043 0301 	orr.w	r3, r3, #1
 8008c32:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c34:	f7fa ff6a 	bl	8003b0c <HAL_GetTick>
 8008c38:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008c3a:	e008      	b.n	8008c4e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008c3c:	f7fa ff66 	bl	8003b0c <HAL_GetTick>
 8008c40:	4602      	mov	r2, r0
 8008c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c44:	1ad3      	subs	r3, r2, r3
 8008c46:	2b02      	cmp	r3, #2
 8008c48:	d901      	bls.n	8008c4e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8008c4a:	2303      	movs	r3, #3
 8008c4c:	e21a      	b.n	8009084 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008c4e:	4b22      	ldr	r3, [pc, #136]	; (8008cd8 <HAL_RCC_OscConfig+0x4f8>)
 8008c50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c52:	f003 0302 	and.w	r3, r3, #2
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d0f0      	beq.n	8008c3c <HAL_RCC_OscConfig+0x45c>
 8008c5a:	e018      	b.n	8008c8e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008c5c:	4b1e      	ldr	r3, [pc, #120]	; (8008cd8 <HAL_RCC_OscConfig+0x4f8>)
 8008c5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c60:	4a1d      	ldr	r2, [pc, #116]	; (8008cd8 <HAL_RCC_OscConfig+0x4f8>)
 8008c62:	f023 0301 	bic.w	r3, r3, #1
 8008c66:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c68:	f7fa ff50 	bl	8003b0c <HAL_GetTick>
 8008c6c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008c6e:	e008      	b.n	8008c82 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008c70:	f7fa ff4c 	bl	8003b0c <HAL_GetTick>
 8008c74:	4602      	mov	r2, r0
 8008c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c78:	1ad3      	subs	r3, r2, r3
 8008c7a:	2b02      	cmp	r3, #2
 8008c7c:	d901      	bls.n	8008c82 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8008c7e:	2303      	movs	r3, #3
 8008c80:	e200      	b.n	8009084 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008c82:	4b15      	ldr	r3, [pc, #84]	; (8008cd8 <HAL_RCC_OscConfig+0x4f8>)
 8008c84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c86:	f003 0302 	and.w	r3, r3, #2
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d1f0      	bne.n	8008c70 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	f003 0320 	and.w	r3, r3, #32
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d039      	beq.n	8008d0e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	699b      	ldr	r3, [r3, #24]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d01c      	beq.n	8008cdc <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008ca2:	4b0d      	ldr	r3, [pc, #52]	; (8008cd8 <HAL_RCC_OscConfig+0x4f8>)
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	4a0c      	ldr	r2, [pc, #48]	; (8008cd8 <HAL_RCC_OscConfig+0x4f8>)
 8008ca8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008cac:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008cae:	f7fa ff2d 	bl	8003b0c <HAL_GetTick>
 8008cb2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008cb4:	e008      	b.n	8008cc8 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008cb6:	f7fa ff29 	bl	8003b0c <HAL_GetTick>
 8008cba:	4602      	mov	r2, r0
 8008cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cbe:	1ad3      	subs	r3, r2, r3
 8008cc0:	2b02      	cmp	r3, #2
 8008cc2:	d901      	bls.n	8008cc8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8008cc4:	2303      	movs	r3, #3
 8008cc6:	e1dd      	b.n	8009084 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008cc8:	4b03      	ldr	r3, [pc, #12]	; (8008cd8 <HAL_RCC_OscConfig+0x4f8>)
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d0f0      	beq.n	8008cb6 <HAL_RCC_OscConfig+0x4d6>
 8008cd4:	e01b      	b.n	8008d0e <HAL_RCC_OscConfig+0x52e>
 8008cd6:	bf00      	nop
 8008cd8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008cdc:	4b9b      	ldr	r3, [pc, #620]	; (8008f4c <HAL_RCC_OscConfig+0x76c>)
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	4a9a      	ldr	r2, [pc, #616]	; (8008f4c <HAL_RCC_OscConfig+0x76c>)
 8008ce2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008ce6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008ce8:	f7fa ff10 	bl	8003b0c <HAL_GetTick>
 8008cec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008cee:	e008      	b.n	8008d02 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008cf0:	f7fa ff0c 	bl	8003b0c <HAL_GetTick>
 8008cf4:	4602      	mov	r2, r0
 8008cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cf8:	1ad3      	subs	r3, r2, r3
 8008cfa:	2b02      	cmp	r3, #2
 8008cfc:	d901      	bls.n	8008d02 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8008cfe:	2303      	movs	r3, #3
 8008d00:	e1c0      	b.n	8009084 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008d02:	4b92      	ldr	r3, [pc, #584]	; (8008f4c <HAL_RCC_OscConfig+0x76c>)
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d1f0      	bne.n	8008cf0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	f003 0304 	and.w	r3, r3, #4
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	f000 8081 	beq.w	8008e1e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008d1c:	4b8c      	ldr	r3, [pc, #560]	; (8008f50 <HAL_RCC_OscConfig+0x770>)
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	4a8b      	ldr	r2, [pc, #556]	; (8008f50 <HAL_RCC_OscConfig+0x770>)
 8008d22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008d26:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008d28:	f7fa fef0 	bl	8003b0c <HAL_GetTick>
 8008d2c:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008d2e:	e008      	b.n	8008d42 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008d30:	f7fa feec 	bl	8003b0c <HAL_GetTick>
 8008d34:	4602      	mov	r2, r0
 8008d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d38:	1ad3      	subs	r3, r2, r3
 8008d3a:	2b64      	cmp	r3, #100	; 0x64
 8008d3c:	d901      	bls.n	8008d42 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8008d3e:	2303      	movs	r3, #3
 8008d40:	e1a0      	b.n	8009084 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008d42:	4b83      	ldr	r3, [pc, #524]	; (8008f50 <HAL_RCC_OscConfig+0x770>)
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d0f0      	beq.n	8008d30 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	689b      	ldr	r3, [r3, #8]
 8008d52:	2b01      	cmp	r3, #1
 8008d54:	d106      	bne.n	8008d64 <HAL_RCC_OscConfig+0x584>
 8008d56:	4b7d      	ldr	r3, [pc, #500]	; (8008f4c <HAL_RCC_OscConfig+0x76c>)
 8008d58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d5a:	4a7c      	ldr	r2, [pc, #496]	; (8008f4c <HAL_RCC_OscConfig+0x76c>)
 8008d5c:	f043 0301 	orr.w	r3, r3, #1
 8008d60:	6713      	str	r3, [r2, #112]	; 0x70
 8008d62:	e02d      	b.n	8008dc0 <HAL_RCC_OscConfig+0x5e0>
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	689b      	ldr	r3, [r3, #8]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d10c      	bne.n	8008d86 <HAL_RCC_OscConfig+0x5a6>
 8008d6c:	4b77      	ldr	r3, [pc, #476]	; (8008f4c <HAL_RCC_OscConfig+0x76c>)
 8008d6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d70:	4a76      	ldr	r2, [pc, #472]	; (8008f4c <HAL_RCC_OscConfig+0x76c>)
 8008d72:	f023 0301 	bic.w	r3, r3, #1
 8008d76:	6713      	str	r3, [r2, #112]	; 0x70
 8008d78:	4b74      	ldr	r3, [pc, #464]	; (8008f4c <HAL_RCC_OscConfig+0x76c>)
 8008d7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d7c:	4a73      	ldr	r2, [pc, #460]	; (8008f4c <HAL_RCC_OscConfig+0x76c>)
 8008d7e:	f023 0304 	bic.w	r3, r3, #4
 8008d82:	6713      	str	r3, [r2, #112]	; 0x70
 8008d84:	e01c      	b.n	8008dc0 <HAL_RCC_OscConfig+0x5e0>
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	689b      	ldr	r3, [r3, #8]
 8008d8a:	2b05      	cmp	r3, #5
 8008d8c:	d10c      	bne.n	8008da8 <HAL_RCC_OscConfig+0x5c8>
 8008d8e:	4b6f      	ldr	r3, [pc, #444]	; (8008f4c <HAL_RCC_OscConfig+0x76c>)
 8008d90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d92:	4a6e      	ldr	r2, [pc, #440]	; (8008f4c <HAL_RCC_OscConfig+0x76c>)
 8008d94:	f043 0304 	orr.w	r3, r3, #4
 8008d98:	6713      	str	r3, [r2, #112]	; 0x70
 8008d9a:	4b6c      	ldr	r3, [pc, #432]	; (8008f4c <HAL_RCC_OscConfig+0x76c>)
 8008d9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d9e:	4a6b      	ldr	r2, [pc, #428]	; (8008f4c <HAL_RCC_OscConfig+0x76c>)
 8008da0:	f043 0301 	orr.w	r3, r3, #1
 8008da4:	6713      	str	r3, [r2, #112]	; 0x70
 8008da6:	e00b      	b.n	8008dc0 <HAL_RCC_OscConfig+0x5e0>
 8008da8:	4b68      	ldr	r3, [pc, #416]	; (8008f4c <HAL_RCC_OscConfig+0x76c>)
 8008daa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008dac:	4a67      	ldr	r2, [pc, #412]	; (8008f4c <HAL_RCC_OscConfig+0x76c>)
 8008dae:	f023 0301 	bic.w	r3, r3, #1
 8008db2:	6713      	str	r3, [r2, #112]	; 0x70
 8008db4:	4b65      	ldr	r3, [pc, #404]	; (8008f4c <HAL_RCC_OscConfig+0x76c>)
 8008db6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008db8:	4a64      	ldr	r2, [pc, #400]	; (8008f4c <HAL_RCC_OscConfig+0x76c>)
 8008dba:	f023 0304 	bic.w	r3, r3, #4
 8008dbe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	689b      	ldr	r3, [r3, #8]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d015      	beq.n	8008df4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008dc8:	f7fa fea0 	bl	8003b0c <HAL_GetTick>
 8008dcc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008dce:	e00a      	b.n	8008de6 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008dd0:	f7fa fe9c 	bl	8003b0c <HAL_GetTick>
 8008dd4:	4602      	mov	r2, r0
 8008dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dd8:	1ad3      	subs	r3, r2, r3
 8008dda:	f241 3288 	movw	r2, #5000	; 0x1388
 8008dde:	4293      	cmp	r3, r2
 8008de0:	d901      	bls.n	8008de6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8008de2:	2303      	movs	r3, #3
 8008de4:	e14e      	b.n	8009084 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008de6:	4b59      	ldr	r3, [pc, #356]	; (8008f4c <HAL_RCC_OscConfig+0x76c>)
 8008de8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008dea:	f003 0302 	and.w	r3, r3, #2
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d0ee      	beq.n	8008dd0 <HAL_RCC_OscConfig+0x5f0>
 8008df2:	e014      	b.n	8008e1e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008df4:	f7fa fe8a 	bl	8003b0c <HAL_GetTick>
 8008df8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008dfa:	e00a      	b.n	8008e12 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008dfc:	f7fa fe86 	bl	8003b0c <HAL_GetTick>
 8008e00:	4602      	mov	r2, r0
 8008e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e04:	1ad3      	subs	r3, r2, r3
 8008e06:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e0a:	4293      	cmp	r3, r2
 8008e0c:	d901      	bls.n	8008e12 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8008e0e:	2303      	movs	r3, #3
 8008e10:	e138      	b.n	8009084 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008e12:	4b4e      	ldr	r3, [pc, #312]	; (8008f4c <HAL_RCC_OscConfig+0x76c>)
 8008e14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e16:	f003 0302 	and.w	r3, r3, #2
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d1ee      	bne.n	8008dfc <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	f000 812d 	beq.w	8009082 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008e28:	4b48      	ldr	r3, [pc, #288]	; (8008f4c <HAL_RCC_OscConfig+0x76c>)
 8008e2a:	691b      	ldr	r3, [r3, #16]
 8008e2c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008e30:	2b18      	cmp	r3, #24
 8008e32:	f000 80bd 	beq.w	8008fb0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e3a:	2b02      	cmp	r3, #2
 8008e3c:	f040 809e 	bne.w	8008f7c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008e40:	4b42      	ldr	r3, [pc, #264]	; (8008f4c <HAL_RCC_OscConfig+0x76c>)
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	4a41      	ldr	r2, [pc, #260]	; (8008f4c <HAL_RCC_OscConfig+0x76c>)
 8008e46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008e4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e4c:	f7fa fe5e 	bl	8003b0c <HAL_GetTick>
 8008e50:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008e52:	e008      	b.n	8008e66 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008e54:	f7fa fe5a 	bl	8003b0c <HAL_GetTick>
 8008e58:	4602      	mov	r2, r0
 8008e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e5c:	1ad3      	subs	r3, r2, r3
 8008e5e:	2b02      	cmp	r3, #2
 8008e60:	d901      	bls.n	8008e66 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8008e62:	2303      	movs	r3, #3
 8008e64:	e10e      	b.n	8009084 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008e66:	4b39      	ldr	r3, [pc, #228]	; (8008f4c <HAL_RCC_OscConfig+0x76c>)
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d1f0      	bne.n	8008e54 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008e72:	4b36      	ldr	r3, [pc, #216]	; (8008f4c <HAL_RCC_OscConfig+0x76c>)
 8008e74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008e76:	4b37      	ldr	r3, [pc, #220]	; (8008f54 <HAL_RCC_OscConfig+0x774>)
 8008e78:	4013      	ands	r3, r2
 8008e7a:	687a      	ldr	r2, [r7, #4]
 8008e7c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8008e7e:	687a      	ldr	r2, [r7, #4]
 8008e80:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008e82:	0112      	lsls	r2, r2, #4
 8008e84:	430a      	orrs	r2, r1
 8008e86:	4931      	ldr	r1, [pc, #196]	; (8008f4c <HAL_RCC_OscConfig+0x76c>)
 8008e88:	4313      	orrs	r3, r2
 8008e8a:	628b      	str	r3, [r1, #40]	; 0x28
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e90:	3b01      	subs	r3, #1
 8008e92:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e9a:	3b01      	subs	r3, #1
 8008e9c:	025b      	lsls	r3, r3, #9
 8008e9e:	b29b      	uxth	r3, r3
 8008ea0:	431a      	orrs	r2, r3
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ea6:	3b01      	subs	r3, #1
 8008ea8:	041b      	lsls	r3, r3, #16
 8008eaa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008eae:	431a      	orrs	r2, r3
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008eb4:	3b01      	subs	r3, #1
 8008eb6:	061b      	lsls	r3, r3, #24
 8008eb8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008ebc:	4923      	ldr	r1, [pc, #140]	; (8008f4c <HAL_RCC_OscConfig+0x76c>)
 8008ebe:	4313      	orrs	r3, r2
 8008ec0:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8008ec2:	4b22      	ldr	r3, [pc, #136]	; (8008f4c <HAL_RCC_OscConfig+0x76c>)
 8008ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ec6:	4a21      	ldr	r2, [pc, #132]	; (8008f4c <HAL_RCC_OscConfig+0x76c>)
 8008ec8:	f023 0301 	bic.w	r3, r3, #1
 8008ecc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008ece:	4b1f      	ldr	r3, [pc, #124]	; (8008f4c <HAL_RCC_OscConfig+0x76c>)
 8008ed0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008ed2:	4b21      	ldr	r3, [pc, #132]	; (8008f58 <HAL_RCC_OscConfig+0x778>)
 8008ed4:	4013      	ands	r3, r2
 8008ed6:	687a      	ldr	r2, [r7, #4]
 8008ed8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008eda:	00d2      	lsls	r2, r2, #3
 8008edc:	491b      	ldr	r1, [pc, #108]	; (8008f4c <HAL_RCC_OscConfig+0x76c>)
 8008ede:	4313      	orrs	r3, r2
 8008ee0:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008ee2:	4b1a      	ldr	r3, [pc, #104]	; (8008f4c <HAL_RCC_OscConfig+0x76c>)
 8008ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ee6:	f023 020c 	bic.w	r2, r3, #12
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008eee:	4917      	ldr	r1, [pc, #92]	; (8008f4c <HAL_RCC_OscConfig+0x76c>)
 8008ef0:	4313      	orrs	r3, r2
 8008ef2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008ef4:	4b15      	ldr	r3, [pc, #84]	; (8008f4c <HAL_RCC_OscConfig+0x76c>)
 8008ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ef8:	f023 0202 	bic.w	r2, r3, #2
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f00:	4912      	ldr	r1, [pc, #72]	; (8008f4c <HAL_RCC_OscConfig+0x76c>)
 8008f02:	4313      	orrs	r3, r2
 8008f04:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008f06:	4b11      	ldr	r3, [pc, #68]	; (8008f4c <HAL_RCC_OscConfig+0x76c>)
 8008f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f0a:	4a10      	ldr	r2, [pc, #64]	; (8008f4c <HAL_RCC_OscConfig+0x76c>)
 8008f0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008f10:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f12:	4b0e      	ldr	r3, [pc, #56]	; (8008f4c <HAL_RCC_OscConfig+0x76c>)
 8008f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f16:	4a0d      	ldr	r2, [pc, #52]	; (8008f4c <HAL_RCC_OscConfig+0x76c>)
 8008f18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008f1c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008f1e:	4b0b      	ldr	r3, [pc, #44]	; (8008f4c <HAL_RCC_OscConfig+0x76c>)
 8008f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f22:	4a0a      	ldr	r2, [pc, #40]	; (8008f4c <HAL_RCC_OscConfig+0x76c>)
 8008f24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008f28:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8008f2a:	4b08      	ldr	r3, [pc, #32]	; (8008f4c <HAL_RCC_OscConfig+0x76c>)
 8008f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f2e:	4a07      	ldr	r2, [pc, #28]	; (8008f4c <HAL_RCC_OscConfig+0x76c>)
 8008f30:	f043 0301 	orr.w	r3, r3, #1
 8008f34:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008f36:	4b05      	ldr	r3, [pc, #20]	; (8008f4c <HAL_RCC_OscConfig+0x76c>)
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	4a04      	ldr	r2, [pc, #16]	; (8008f4c <HAL_RCC_OscConfig+0x76c>)
 8008f3c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008f40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f42:	f7fa fde3 	bl	8003b0c <HAL_GetTick>
 8008f46:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008f48:	e011      	b.n	8008f6e <HAL_RCC_OscConfig+0x78e>
 8008f4a:	bf00      	nop
 8008f4c:	58024400 	.word	0x58024400
 8008f50:	58024800 	.word	0x58024800
 8008f54:	fffffc0c 	.word	0xfffffc0c
 8008f58:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008f5c:	f7fa fdd6 	bl	8003b0c <HAL_GetTick>
 8008f60:	4602      	mov	r2, r0
 8008f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f64:	1ad3      	subs	r3, r2, r3
 8008f66:	2b02      	cmp	r3, #2
 8008f68:	d901      	bls.n	8008f6e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8008f6a:	2303      	movs	r3, #3
 8008f6c:	e08a      	b.n	8009084 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008f6e:	4b47      	ldr	r3, [pc, #284]	; (800908c <HAL_RCC_OscConfig+0x8ac>)
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d0f0      	beq.n	8008f5c <HAL_RCC_OscConfig+0x77c>
 8008f7a:	e082      	b.n	8009082 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008f7c:	4b43      	ldr	r3, [pc, #268]	; (800908c <HAL_RCC_OscConfig+0x8ac>)
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	4a42      	ldr	r2, [pc, #264]	; (800908c <HAL_RCC_OscConfig+0x8ac>)
 8008f82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008f86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f88:	f7fa fdc0 	bl	8003b0c <HAL_GetTick>
 8008f8c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008f8e:	e008      	b.n	8008fa2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008f90:	f7fa fdbc 	bl	8003b0c <HAL_GetTick>
 8008f94:	4602      	mov	r2, r0
 8008f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f98:	1ad3      	subs	r3, r2, r3
 8008f9a:	2b02      	cmp	r3, #2
 8008f9c:	d901      	bls.n	8008fa2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8008f9e:	2303      	movs	r3, #3
 8008fa0:	e070      	b.n	8009084 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008fa2:	4b3a      	ldr	r3, [pc, #232]	; (800908c <HAL_RCC_OscConfig+0x8ac>)
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d1f0      	bne.n	8008f90 <HAL_RCC_OscConfig+0x7b0>
 8008fae:	e068      	b.n	8009082 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008fb0:	4b36      	ldr	r3, [pc, #216]	; (800908c <HAL_RCC_OscConfig+0x8ac>)
 8008fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fb4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008fb6:	4b35      	ldr	r3, [pc, #212]	; (800908c <HAL_RCC_OscConfig+0x8ac>)
 8008fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fba:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fc0:	2b01      	cmp	r3, #1
 8008fc2:	d031      	beq.n	8009028 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008fc4:	693b      	ldr	r3, [r7, #16]
 8008fc6:	f003 0203 	and.w	r2, r3, #3
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008fce:	429a      	cmp	r2, r3
 8008fd0:	d12a      	bne.n	8009028 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008fd2:	693b      	ldr	r3, [r7, #16]
 8008fd4:	091b      	lsrs	r3, r3, #4
 8008fd6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008fde:	429a      	cmp	r2, r3
 8008fe0:	d122      	bne.n	8009028 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fec:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008fee:	429a      	cmp	r2, r3
 8008ff0:	d11a      	bne.n	8009028 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	0a5b      	lsrs	r3, r3, #9
 8008ff6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ffe:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009000:	429a      	cmp	r2, r3
 8009002:	d111      	bne.n	8009028 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	0c1b      	lsrs	r3, r3, #16
 8009008:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009010:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009012:	429a      	cmp	r2, r3
 8009014:	d108      	bne.n	8009028 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	0e1b      	lsrs	r3, r3, #24
 800901a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009022:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009024:	429a      	cmp	r2, r3
 8009026:	d001      	beq.n	800902c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8009028:	2301      	movs	r3, #1
 800902a:	e02b      	b.n	8009084 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800902c:	4b17      	ldr	r3, [pc, #92]	; (800908c <HAL_RCC_OscConfig+0x8ac>)
 800902e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009030:	08db      	lsrs	r3, r3, #3
 8009032:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009036:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800903c:	693a      	ldr	r2, [r7, #16]
 800903e:	429a      	cmp	r2, r3
 8009040:	d01f      	beq.n	8009082 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8009042:	4b12      	ldr	r3, [pc, #72]	; (800908c <HAL_RCC_OscConfig+0x8ac>)
 8009044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009046:	4a11      	ldr	r2, [pc, #68]	; (800908c <HAL_RCC_OscConfig+0x8ac>)
 8009048:	f023 0301 	bic.w	r3, r3, #1
 800904c:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800904e:	f7fa fd5d 	bl	8003b0c <HAL_GetTick>
 8009052:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8009054:	bf00      	nop
 8009056:	f7fa fd59 	bl	8003b0c <HAL_GetTick>
 800905a:	4602      	mov	r2, r0
 800905c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800905e:	4293      	cmp	r3, r2
 8009060:	d0f9      	beq.n	8009056 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009062:	4b0a      	ldr	r3, [pc, #40]	; (800908c <HAL_RCC_OscConfig+0x8ac>)
 8009064:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009066:	4b0a      	ldr	r3, [pc, #40]	; (8009090 <HAL_RCC_OscConfig+0x8b0>)
 8009068:	4013      	ands	r3, r2
 800906a:	687a      	ldr	r2, [r7, #4]
 800906c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800906e:	00d2      	lsls	r2, r2, #3
 8009070:	4906      	ldr	r1, [pc, #24]	; (800908c <HAL_RCC_OscConfig+0x8ac>)
 8009072:	4313      	orrs	r3, r2
 8009074:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8009076:	4b05      	ldr	r3, [pc, #20]	; (800908c <HAL_RCC_OscConfig+0x8ac>)
 8009078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800907a:	4a04      	ldr	r2, [pc, #16]	; (800908c <HAL_RCC_OscConfig+0x8ac>)
 800907c:	f043 0301 	orr.w	r3, r3, #1
 8009080:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8009082:	2300      	movs	r3, #0
}
 8009084:	4618      	mov	r0, r3
 8009086:	3730      	adds	r7, #48	; 0x30
 8009088:	46bd      	mov	sp, r7
 800908a:	bd80      	pop	{r7, pc}
 800908c:	58024400 	.word	0x58024400
 8009090:	ffff0007 	.word	0xffff0007

08009094 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009094:	b580      	push	{r7, lr}
 8009096:	b086      	sub	sp, #24
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]
 800909c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d101      	bne.n	80090a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80090a4:	2301      	movs	r3, #1
 80090a6:	e19c      	b.n	80093e2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80090a8:	4b8a      	ldr	r3, [pc, #552]	; (80092d4 <HAL_RCC_ClockConfig+0x240>)
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	f003 030f 	and.w	r3, r3, #15
 80090b0:	683a      	ldr	r2, [r7, #0]
 80090b2:	429a      	cmp	r2, r3
 80090b4:	d910      	bls.n	80090d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80090b6:	4b87      	ldr	r3, [pc, #540]	; (80092d4 <HAL_RCC_ClockConfig+0x240>)
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	f023 020f 	bic.w	r2, r3, #15
 80090be:	4985      	ldr	r1, [pc, #532]	; (80092d4 <HAL_RCC_ClockConfig+0x240>)
 80090c0:	683b      	ldr	r3, [r7, #0]
 80090c2:	4313      	orrs	r3, r2
 80090c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80090c6:	4b83      	ldr	r3, [pc, #524]	; (80092d4 <HAL_RCC_ClockConfig+0x240>)
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	f003 030f 	and.w	r3, r3, #15
 80090ce:	683a      	ldr	r2, [r7, #0]
 80090d0:	429a      	cmp	r2, r3
 80090d2:	d001      	beq.n	80090d8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80090d4:	2301      	movs	r3, #1
 80090d6:	e184      	b.n	80093e2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	f003 0304 	and.w	r3, r3, #4
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d010      	beq.n	8009106 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	691a      	ldr	r2, [r3, #16]
 80090e8:	4b7b      	ldr	r3, [pc, #492]	; (80092d8 <HAL_RCC_ClockConfig+0x244>)
 80090ea:	699b      	ldr	r3, [r3, #24]
 80090ec:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80090f0:	429a      	cmp	r2, r3
 80090f2:	d908      	bls.n	8009106 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80090f4:	4b78      	ldr	r3, [pc, #480]	; (80092d8 <HAL_RCC_ClockConfig+0x244>)
 80090f6:	699b      	ldr	r3, [r3, #24]
 80090f8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	691b      	ldr	r3, [r3, #16]
 8009100:	4975      	ldr	r1, [pc, #468]	; (80092d8 <HAL_RCC_ClockConfig+0x244>)
 8009102:	4313      	orrs	r3, r2
 8009104:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	f003 0308 	and.w	r3, r3, #8
 800910e:	2b00      	cmp	r3, #0
 8009110:	d010      	beq.n	8009134 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	695a      	ldr	r2, [r3, #20]
 8009116:	4b70      	ldr	r3, [pc, #448]	; (80092d8 <HAL_RCC_ClockConfig+0x244>)
 8009118:	69db      	ldr	r3, [r3, #28]
 800911a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800911e:	429a      	cmp	r2, r3
 8009120:	d908      	bls.n	8009134 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009122:	4b6d      	ldr	r3, [pc, #436]	; (80092d8 <HAL_RCC_ClockConfig+0x244>)
 8009124:	69db      	ldr	r3, [r3, #28]
 8009126:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	695b      	ldr	r3, [r3, #20]
 800912e:	496a      	ldr	r1, [pc, #424]	; (80092d8 <HAL_RCC_ClockConfig+0x244>)
 8009130:	4313      	orrs	r3, r2
 8009132:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	f003 0310 	and.w	r3, r3, #16
 800913c:	2b00      	cmp	r3, #0
 800913e:	d010      	beq.n	8009162 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	699a      	ldr	r2, [r3, #24]
 8009144:	4b64      	ldr	r3, [pc, #400]	; (80092d8 <HAL_RCC_ClockConfig+0x244>)
 8009146:	69db      	ldr	r3, [r3, #28]
 8009148:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800914c:	429a      	cmp	r2, r3
 800914e:	d908      	bls.n	8009162 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009150:	4b61      	ldr	r3, [pc, #388]	; (80092d8 <HAL_RCC_ClockConfig+0x244>)
 8009152:	69db      	ldr	r3, [r3, #28]
 8009154:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	699b      	ldr	r3, [r3, #24]
 800915c:	495e      	ldr	r1, [pc, #376]	; (80092d8 <HAL_RCC_ClockConfig+0x244>)
 800915e:	4313      	orrs	r3, r2
 8009160:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	f003 0320 	and.w	r3, r3, #32
 800916a:	2b00      	cmp	r3, #0
 800916c:	d010      	beq.n	8009190 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	69da      	ldr	r2, [r3, #28]
 8009172:	4b59      	ldr	r3, [pc, #356]	; (80092d8 <HAL_RCC_ClockConfig+0x244>)
 8009174:	6a1b      	ldr	r3, [r3, #32]
 8009176:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800917a:	429a      	cmp	r2, r3
 800917c:	d908      	bls.n	8009190 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800917e:	4b56      	ldr	r3, [pc, #344]	; (80092d8 <HAL_RCC_ClockConfig+0x244>)
 8009180:	6a1b      	ldr	r3, [r3, #32]
 8009182:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	69db      	ldr	r3, [r3, #28]
 800918a:	4953      	ldr	r1, [pc, #332]	; (80092d8 <HAL_RCC_ClockConfig+0x244>)
 800918c:	4313      	orrs	r3, r2
 800918e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	f003 0302 	and.w	r3, r3, #2
 8009198:	2b00      	cmp	r3, #0
 800919a:	d010      	beq.n	80091be <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	68da      	ldr	r2, [r3, #12]
 80091a0:	4b4d      	ldr	r3, [pc, #308]	; (80092d8 <HAL_RCC_ClockConfig+0x244>)
 80091a2:	699b      	ldr	r3, [r3, #24]
 80091a4:	f003 030f 	and.w	r3, r3, #15
 80091a8:	429a      	cmp	r2, r3
 80091aa:	d908      	bls.n	80091be <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80091ac:	4b4a      	ldr	r3, [pc, #296]	; (80092d8 <HAL_RCC_ClockConfig+0x244>)
 80091ae:	699b      	ldr	r3, [r3, #24]
 80091b0:	f023 020f 	bic.w	r2, r3, #15
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	68db      	ldr	r3, [r3, #12]
 80091b8:	4947      	ldr	r1, [pc, #284]	; (80092d8 <HAL_RCC_ClockConfig+0x244>)
 80091ba:	4313      	orrs	r3, r2
 80091bc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	f003 0301 	and.w	r3, r3, #1
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d055      	beq.n	8009276 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80091ca:	4b43      	ldr	r3, [pc, #268]	; (80092d8 <HAL_RCC_ClockConfig+0x244>)
 80091cc:	699b      	ldr	r3, [r3, #24]
 80091ce:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	689b      	ldr	r3, [r3, #8]
 80091d6:	4940      	ldr	r1, [pc, #256]	; (80092d8 <HAL_RCC_ClockConfig+0x244>)
 80091d8:	4313      	orrs	r3, r2
 80091da:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	685b      	ldr	r3, [r3, #4]
 80091e0:	2b02      	cmp	r3, #2
 80091e2:	d107      	bne.n	80091f4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80091e4:	4b3c      	ldr	r3, [pc, #240]	; (80092d8 <HAL_RCC_ClockConfig+0x244>)
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d121      	bne.n	8009234 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80091f0:	2301      	movs	r3, #1
 80091f2:	e0f6      	b.n	80093e2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	685b      	ldr	r3, [r3, #4]
 80091f8:	2b03      	cmp	r3, #3
 80091fa:	d107      	bne.n	800920c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80091fc:	4b36      	ldr	r3, [pc, #216]	; (80092d8 <HAL_RCC_ClockConfig+0x244>)
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009204:	2b00      	cmp	r3, #0
 8009206:	d115      	bne.n	8009234 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009208:	2301      	movs	r3, #1
 800920a:	e0ea      	b.n	80093e2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	685b      	ldr	r3, [r3, #4]
 8009210:	2b01      	cmp	r3, #1
 8009212:	d107      	bne.n	8009224 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009214:	4b30      	ldr	r3, [pc, #192]	; (80092d8 <HAL_RCC_ClockConfig+0x244>)
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800921c:	2b00      	cmp	r3, #0
 800921e:	d109      	bne.n	8009234 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009220:	2301      	movs	r3, #1
 8009222:	e0de      	b.n	80093e2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009224:	4b2c      	ldr	r3, [pc, #176]	; (80092d8 <HAL_RCC_ClockConfig+0x244>)
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	f003 0304 	and.w	r3, r3, #4
 800922c:	2b00      	cmp	r3, #0
 800922e:	d101      	bne.n	8009234 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009230:	2301      	movs	r3, #1
 8009232:	e0d6      	b.n	80093e2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009234:	4b28      	ldr	r3, [pc, #160]	; (80092d8 <HAL_RCC_ClockConfig+0x244>)
 8009236:	691b      	ldr	r3, [r3, #16]
 8009238:	f023 0207 	bic.w	r2, r3, #7
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	685b      	ldr	r3, [r3, #4]
 8009240:	4925      	ldr	r1, [pc, #148]	; (80092d8 <HAL_RCC_ClockConfig+0x244>)
 8009242:	4313      	orrs	r3, r2
 8009244:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009246:	f7fa fc61 	bl	8003b0c <HAL_GetTick>
 800924a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800924c:	e00a      	b.n	8009264 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800924e:	f7fa fc5d 	bl	8003b0c <HAL_GetTick>
 8009252:	4602      	mov	r2, r0
 8009254:	697b      	ldr	r3, [r7, #20]
 8009256:	1ad3      	subs	r3, r2, r3
 8009258:	f241 3288 	movw	r2, #5000	; 0x1388
 800925c:	4293      	cmp	r3, r2
 800925e:	d901      	bls.n	8009264 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8009260:	2303      	movs	r3, #3
 8009262:	e0be      	b.n	80093e2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009264:	4b1c      	ldr	r3, [pc, #112]	; (80092d8 <HAL_RCC_ClockConfig+0x244>)
 8009266:	691b      	ldr	r3, [r3, #16]
 8009268:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	685b      	ldr	r3, [r3, #4]
 8009270:	00db      	lsls	r3, r3, #3
 8009272:	429a      	cmp	r2, r3
 8009274:	d1eb      	bne.n	800924e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	f003 0302 	and.w	r3, r3, #2
 800927e:	2b00      	cmp	r3, #0
 8009280:	d010      	beq.n	80092a4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	68da      	ldr	r2, [r3, #12]
 8009286:	4b14      	ldr	r3, [pc, #80]	; (80092d8 <HAL_RCC_ClockConfig+0x244>)
 8009288:	699b      	ldr	r3, [r3, #24]
 800928a:	f003 030f 	and.w	r3, r3, #15
 800928e:	429a      	cmp	r2, r3
 8009290:	d208      	bcs.n	80092a4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009292:	4b11      	ldr	r3, [pc, #68]	; (80092d8 <HAL_RCC_ClockConfig+0x244>)
 8009294:	699b      	ldr	r3, [r3, #24]
 8009296:	f023 020f 	bic.w	r2, r3, #15
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	68db      	ldr	r3, [r3, #12]
 800929e:	490e      	ldr	r1, [pc, #56]	; (80092d8 <HAL_RCC_ClockConfig+0x244>)
 80092a0:	4313      	orrs	r3, r2
 80092a2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80092a4:	4b0b      	ldr	r3, [pc, #44]	; (80092d4 <HAL_RCC_ClockConfig+0x240>)
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	f003 030f 	and.w	r3, r3, #15
 80092ac:	683a      	ldr	r2, [r7, #0]
 80092ae:	429a      	cmp	r2, r3
 80092b0:	d214      	bcs.n	80092dc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80092b2:	4b08      	ldr	r3, [pc, #32]	; (80092d4 <HAL_RCC_ClockConfig+0x240>)
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	f023 020f 	bic.w	r2, r3, #15
 80092ba:	4906      	ldr	r1, [pc, #24]	; (80092d4 <HAL_RCC_ClockConfig+0x240>)
 80092bc:	683b      	ldr	r3, [r7, #0]
 80092be:	4313      	orrs	r3, r2
 80092c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80092c2:	4b04      	ldr	r3, [pc, #16]	; (80092d4 <HAL_RCC_ClockConfig+0x240>)
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	f003 030f 	and.w	r3, r3, #15
 80092ca:	683a      	ldr	r2, [r7, #0]
 80092cc:	429a      	cmp	r2, r3
 80092ce:	d005      	beq.n	80092dc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80092d0:	2301      	movs	r3, #1
 80092d2:	e086      	b.n	80093e2 <HAL_RCC_ClockConfig+0x34e>
 80092d4:	52002000 	.word	0x52002000
 80092d8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	f003 0304 	and.w	r3, r3, #4
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d010      	beq.n	800930a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	691a      	ldr	r2, [r3, #16]
 80092ec:	4b3f      	ldr	r3, [pc, #252]	; (80093ec <HAL_RCC_ClockConfig+0x358>)
 80092ee:	699b      	ldr	r3, [r3, #24]
 80092f0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80092f4:	429a      	cmp	r2, r3
 80092f6:	d208      	bcs.n	800930a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80092f8:	4b3c      	ldr	r3, [pc, #240]	; (80093ec <HAL_RCC_ClockConfig+0x358>)
 80092fa:	699b      	ldr	r3, [r3, #24]
 80092fc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	691b      	ldr	r3, [r3, #16]
 8009304:	4939      	ldr	r1, [pc, #228]	; (80093ec <HAL_RCC_ClockConfig+0x358>)
 8009306:	4313      	orrs	r3, r2
 8009308:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	f003 0308 	and.w	r3, r3, #8
 8009312:	2b00      	cmp	r3, #0
 8009314:	d010      	beq.n	8009338 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	695a      	ldr	r2, [r3, #20]
 800931a:	4b34      	ldr	r3, [pc, #208]	; (80093ec <HAL_RCC_ClockConfig+0x358>)
 800931c:	69db      	ldr	r3, [r3, #28]
 800931e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009322:	429a      	cmp	r2, r3
 8009324:	d208      	bcs.n	8009338 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009326:	4b31      	ldr	r3, [pc, #196]	; (80093ec <HAL_RCC_ClockConfig+0x358>)
 8009328:	69db      	ldr	r3, [r3, #28]
 800932a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	695b      	ldr	r3, [r3, #20]
 8009332:	492e      	ldr	r1, [pc, #184]	; (80093ec <HAL_RCC_ClockConfig+0x358>)
 8009334:	4313      	orrs	r3, r2
 8009336:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	f003 0310 	and.w	r3, r3, #16
 8009340:	2b00      	cmp	r3, #0
 8009342:	d010      	beq.n	8009366 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	699a      	ldr	r2, [r3, #24]
 8009348:	4b28      	ldr	r3, [pc, #160]	; (80093ec <HAL_RCC_ClockConfig+0x358>)
 800934a:	69db      	ldr	r3, [r3, #28]
 800934c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009350:	429a      	cmp	r2, r3
 8009352:	d208      	bcs.n	8009366 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009354:	4b25      	ldr	r3, [pc, #148]	; (80093ec <HAL_RCC_ClockConfig+0x358>)
 8009356:	69db      	ldr	r3, [r3, #28]
 8009358:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	699b      	ldr	r3, [r3, #24]
 8009360:	4922      	ldr	r1, [pc, #136]	; (80093ec <HAL_RCC_ClockConfig+0x358>)
 8009362:	4313      	orrs	r3, r2
 8009364:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	f003 0320 	and.w	r3, r3, #32
 800936e:	2b00      	cmp	r3, #0
 8009370:	d010      	beq.n	8009394 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	69da      	ldr	r2, [r3, #28]
 8009376:	4b1d      	ldr	r3, [pc, #116]	; (80093ec <HAL_RCC_ClockConfig+0x358>)
 8009378:	6a1b      	ldr	r3, [r3, #32]
 800937a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800937e:	429a      	cmp	r2, r3
 8009380:	d208      	bcs.n	8009394 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8009382:	4b1a      	ldr	r3, [pc, #104]	; (80093ec <HAL_RCC_ClockConfig+0x358>)
 8009384:	6a1b      	ldr	r3, [r3, #32]
 8009386:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	69db      	ldr	r3, [r3, #28]
 800938e:	4917      	ldr	r1, [pc, #92]	; (80093ec <HAL_RCC_ClockConfig+0x358>)
 8009390:	4313      	orrs	r3, r2
 8009392:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009394:	f000 f834 	bl	8009400 <HAL_RCC_GetSysClockFreq>
 8009398:	4602      	mov	r2, r0
 800939a:	4b14      	ldr	r3, [pc, #80]	; (80093ec <HAL_RCC_ClockConfig+0x358>)
 800939c:	699b      	ldr	r3, [r3, #24]
 800939e:	0a1b      	lsrs	r3, r3, #8
 80093a0:	f003 030f 	and.w	r3, r3, #15
 80093a4:	4912      	ldr	r1, [pc, #72]	; (80093f0 <HAL_RCC_ClockConfig+0x35c>)
 80093a6:	5ccb      	ldrb	r3, [r1, r3]
 80093a8:	f003 031f 	and.w	r3, r3, #31
 80093ac:	fa22 f303 	lsr.w	r3, r2, r3
 80093b0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80093b2:	4b0e      	ldr	r3, [pc, #56]	; (80093ec <HAL_RCC_ClockConfig+0x358>)
 80093b4:	699b      	ldr	r3, [r3, #24]
 80093b6:	f003 030f 	and.w	r3, r3, #15
 80093ba:	4a0d      	ldr	r2, [pc, #52]	; (80093f0 <HAL_RCC_ClockConfig+0x35c>)
 80093bc:	5cd3      	ldrb	r3, [r2, r3]
 80093be:	f003 031f 	and.w	r3, r3, #31
 80093c2:	693a      	ldr	r2, [r7, #16]
 80093c4:	fa22 f303 	lsr.w	r3, r2, r3
 80093c8:	4a0a      	ldr	r2, [pc, #40]	; (80093f4 <HAL_RCC_ClockConfig+0x360>)
 80093ca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80093cc:	4a0a      	ldr	r2, [pc, #40]	; (80093f8 <HAL_RCC_ClockConfig+0x364>)
 80093ce:	693b      	ldr	r3, [r7, #16]
 80093d0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80093d2:	4b0a      	ldr	r3, [pc, #40]	; (80093fc <HAL_RCC_ClockConfig+0x368>)
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	4618      	mov	r0, r3
 80093d8:	f7fa f9ae 	bl	8003738 <HAL_InitTick>
 80093dc:	4603      	mov	r3, r0
 80093de:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80093e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80093e2:	4618      	mov	r0, r3
 80093e4:	3718      	adds	r7, #24
 80093e6:	46bd      	mov	sp, r7
 80093e8:	bd80      	pop	{r7, pc}
 80093ea:	bf00      	nop
 80093ec:	58024400 	.word	0x58024400
 80093f0:	08017b30 	.word	0x08017b30
 80093f4:	24000004 	.word	0x24000004
 80093f8:	24000000 	.word	0x24000000
 80093fc:	24000008 	.word	0x24000008

08009400 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009400:	b480      	push	{r7}
 8009402:	b089      	sub	sp, #36	; 0x24
 8009404:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009406:	4bb3      	ldr	r3, [pc, #716]	; (80096d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009408:	691b      	ldr	r3, [r3, #16]
 800940a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800940e:	2b18      	cmp	r3, #24
 8009410:	f200 8155 	bhi.w	80096be <HAL_RCC_GetSysClockFreq+0x2be>
 8009414:	a201      	add	r2, pc, #4	; (adr r2, 800941c <HAL_RCC_GetSysClockFreq+0x1c>)
 8009416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800941a:	bf00      	nop
 800941c:	08009481 	.word	0x08009481
 8009420:	080096bf 	.word	0x080096bf
 8009424:	080096bf 	.word	0x080096bf
 8009428:	080096bf 	.word	0x080096bf
 800942c:	080096bf 	.word	0x080096bf
 8009430:	080096bf 	.word	0x080096bf
 8009434:	080096bf 	.word	0x080096bf
 8009438:	080096bf 	.word	0x080096bf
 800943c:	080094a7 	.word	0x080094a7
 8009440:	080096bf 	.word	0x080096bf
 8009444:	080096bf 	.word	0x080096bf
 8009448:	080096bf 	.word	0x080096bf
 800944c:	080096bf 	.word	0x080096bf
 8009450:	080096bf 	.word	0x080096bf
 8009454:	080096bf 	.word	0x080096bf
 8009458:	080096bf 	.word	0x080096bf
 800945c:	080094ad 	.word	0x080094ad
 8009460:	080096bf 	.word	0x080096bf
 8009464:	080096bf 	.word	0x080096bf
 8009468:	080096bf 	.word	0x080096bf
 800946c:	080096bf 	.word	0x080096bf
 8009470:	080096bf 	.word	0x080096bf
 8009474:	080096bf 	.word	0x080096bf
 8009478:	080096bf 	.word	0x080096bf
 800947c:	080094b3 	.word	0x080094b3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009480:	4b94      	ldr	r3, [pc, #592]	; (80096d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	f003 0320 	and.w	r3, r3, #32
 8009488:	2b00      	cmp	r3, #0
 800948a:	d009      	beq.n	80094a0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800948c:	4b91      	ldr	r3, [pc, #580]	; (80096d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	08db      	lsrs	r3, r3, #3
 8009492:	f003 0303 	and.w	r3, r3, #3
 8009496:	4a90      	ldr	r2, [pc, #576]	; (80096d8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009498:	fa22 f303 	lsr.w	r3, r2, r3
 800949c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800949e:	e111      	b.n	80096c4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80094a0:	4b8d      	ldr	r3, [pc, #564]	; (80096d8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80094a2:	61bb      	str	r3, [r7, #24]
      break;
 80094a4:	e10e      	b.n	80096c4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80094a6:	4b8d      	ldr	r3, [pc, #564]	; (80096dc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80094a8:	61bb      	str	r3, [r7, #24]
      break;
 80094aa:	e10b      	b.n	80096c4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80094ac:	4b8c      	ldr	r3, [pc, #560]	; (80096e0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80094ae:	61bb      	str	r3, [r7, #24]
      break;
 80094b0:	e108      	b.n	80096c4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80094b2:	4b88      	ldr	r3, [pc, #544]	; (80096d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80094b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094b6:	f003 0303 	and.w	r3, r3, #3
 80094ba:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80094bc:	4b85      	ldr	r3, [pc, #532]	; (80096d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80094be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094c0:	091b      	lsrs	r3, r3, #4
 80094c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80094c6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80094c8:	4b82      	ldr	r3, [pc, #520]	; (80096d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80094ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094cc:	f003 0301 	and.w	r3, r3, #1
 80094d0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80094d2:	4b80      	ldr	r3, [pc, #512]	; (80096d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80094d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094d6:	08db      	lsrs	r3, r3, #3
 80094d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80094dc:	68fa      	ldr	r2, [r7, #12]
 80094de:	fb02 f303 	mul.w	r3, r2, r3
 80094e2:	ee07 3a90 	vmov	s15, r3
 80094e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094ea:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80094ee:	693b      	ldr	r3, [r7, #16]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	f000 80e1 	beq.w	80096b8 <HAL_RCC_GetSysClockFreq+0x2b8>
 80094f6:	697b      	ldr	r3, [r7, #20]
 80094f8:	2b02      	cmp	r3, #2
 80094fa:	f000 8083 	beq.w	8009604 <HAL_RCC_GetSysClockFreq+0x204>
 80094fe:	697b      	ldr	r3, [r7, #20]
 8009500:	2b02      	cmp	r3, #2
 8009502:	f200 80a1 	bhi.w	8009648 <HAL_RCC_GetSysClockFreq+0x248>
 8009506:	697b      	ldr	r3, [r7, #20]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d003      	beq.n	8009514 <HAL_RCC_GetSysClockFreq+0x114>
 800950c:	697b      	ldr	r3, [r7, #20]
 800950e:	2b01      	cmp	r3, #1
 8009510:	d056      	beq.n	80095c0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8009512:	e099      	b.n	8009648 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009514:	4b6f      	ldr	r3, [pc, #444]	; (80096d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	f003 0320 	and.w	r3, r3, #32
 800951c:	2b00      	cmp	r3, #0
 800951e:	d02d      	beq.n	800957c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009520:	4b6c      	ldr	r3, [pc, #432]	; (80096d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	08db      	lsrs	r3, r3, #3
 8009526:	f003 0303 	and.w	r3, r3, #3
 800952a:	4a6b      	ldr	r2, [pc, #428]	; (80096d8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800952c:	fa22 f303 	lsr.w	r3, r2, r3
 8009530:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	ee07 3a90 	vmov	s15, r3
 8009538:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800953c:	693b      	ldr	r3, [r7, #16]
 800953e:	ee07 3a90 	vmov	s15, r3
 8009542:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009546:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800954a:	4b62      	ldr	r3, [pc, #392]	; (80096d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800954c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800954e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009552:	ee07 3a90 	vmov	s15, r3
 8009556:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800955a:	ed97 6a02 	vldr	s12, [r7, #8]
 800955e:	eddf 5a61 	vldr	s11, [pc, #388]	; 80096e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009562:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009566:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800956a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800956e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009572:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009576:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800957a:	e087      	b.n	800968c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800957c:	693b      	ldr	r3, [r7, #16]
 800957e:	ee07 3a90 	vmov	s15, r3
 8009582:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009586:	eddf 6a58 	vldr	s13, [pc, #352]	; 80096e8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800958a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800958e:	4b51      	ldr	r3, [pc, #324]	; (80096d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009592:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009596:	ee07 3a90 	vmov	s15, r3
 800959a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800959e:	ed97 6a02 	vldr	s12, [r7, #8]
 80095a2:	eddf 5a50 	vldr	s11, [pc, #320]	; 80096e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80095a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80095aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80095ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80095b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80095b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095ba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80095be:	e065      	b.n	800968c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80095c0:	693b      	ldr	r3, [r7, #16]
 80095c2:	ee07 3a90 	vmov	s15, r3
 80095c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095ca:	eddf 6a48 	vldr	s13, [pc, #288]	; 80096ec <HAL_RCC_GetSysClockFreq+0x2ec>
 80095ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80095d2:	4b40      	ldr	r3, [pc, #256]	; (80096d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80095d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095da:	ee07 3a90 	vmov	s15, r3
 80095de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095e2:	ed97 6a02 	vldr	s12, [r7, #8]
 80095e6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80096e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80095ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80095ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80095f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80095f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80095fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095fe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009602:	e043      	b.n	800968c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009604:	693b      	ldr	r3, [r7, #16]
 8009606:	ee07 3a90 	vmov	s15, r3
 800960a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800960e:	eddf 6a38 	vldr	s13, [pc, #224]	; 80096f0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8009612:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009616:	4b2f      	ldr	r3, [pc, #188]	; (80096d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800961a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800961e:	ee07 3a90 	vmov	s15, r3
 8009622:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009626:	ed97 6a02 	vldr	s12, [r7, #8]
 800962a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80096e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800962e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009632:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009636:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800963a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800963e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009642:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009646:	e021      	b.n	800968c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009648:	693b      	ldr	r3, [r7, #16]
 800964a:	ee07 3a90 	vmov	s15, r3
 800964e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009652:	eddf 6a26 	vldr	s13, [pc, #152]	; 80096ec <HAL_RCC_GetSysClockFreq+0x2ec>
 8009656:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800965a:	4b1e      	ldr	r3, [pc, #120]	; (80096d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800965c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800965e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009662:	ee07 3a90 	vmov	s15, r3
 8009666:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800966a:	ed97 6a02 	vldr	s12, [r7, #8]
 800966e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80096e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009672:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009676:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800967a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800967e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009682:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009686:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800968a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800968c:	4b11      	ldr	r3, [pc, #68]	; (80096d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800968e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009690:	0a5b      	lsrs	r3, r3, #9
 8009692:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009696:	3301      	adds	r3, #1
 8009698:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800969a:	683b      	ldr	r3, [r7, #0]
 800969c:	ee07 3a90 	vmov	s15, r3
 80096a0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80096a4:	edd7 6a07 	vldr	s13, [r7, #28]
 80096a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80096ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80096b0:	ee17 3a90 	vmov	r3, s15
 80096b4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80096b6:	e005      	b.n	80096c4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80096b8:	2300      	movs	r3, #0
 80096ba:	61bb      	str	r3, [r7, #24]
      break;
 80096bc:	e002      	b.n	80096c4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80096be:	4b07      	ldr	r3, [pc, #28]	; (80096dc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80096c0:	61bb      	str	r3, [r7, #24]
      break;
 80096c2:	bf00      	nop
  }

  return sysclockfreq;
 80096c4:	69bb      	ldr	r3, [r7, #24]
}
 80096c6:	4618      	mov	r0, r3
 80096c8:	3724      	adds	r7, #36	; 0x24
 80096ca:	46bd      	mov	sp, r7
 80096cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d0:	4770      	bx	lr
 80096d2:	bf00      	nop
 80096d4:	58024400 	.word	0x58024400
 80096d8:	03d09000 	.word	0x03d09000
 80096dc:	003d0900 	.word	0x003d0900
 80096e0:	007a1200 	.word	0x007a1200
 80096e4:	46000000 	.word	0x46000000
 80096e8:	4c742400 	.word	0x4c742400
 80096ec:	4a742400 	.word	0x4a742400
 80096f0:	4af42400 	.word	0x4af42400

080096f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80096f4:	b580      	push	{r7, lr}
 80096f6:	b082      	sub	sp, #8
 80096f8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80096fa:	f7ff fe81 	bl	8009400 <HAL_RCC_GetSysClockFreq>
 80096fe:	4602      	mov	r2, r0
 8009700:	4b10      	ldr	r3, [pc, #64]	; (8009744 <HAL_RCC_GetHCLKFreq+0x50>)
 8009702:	699b      	ldr	r3, [r3, #24]
 8009704:	0a1b      	lsrs	r3, r3, #8
 8009706:	f003 030f 	and.w	r3, r3, #15
 800970a:	490f      	ldr	r1, [pc, #60]	; (8009748 <HAL_RCC_GetHCLKFreq+0x54>)
 800970c:	5ccb      	ldrb	r3, [r1, r3]
 800970e:	f003 031f 	and.w	r3, r3, #31
 8009712:	fa22 f303 	lsr.w	r3, r2, r3
 8009716:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009718:	4b0a      	ldr	r3, [pc, #40]	; (8009744 <HAL_RCC_GetHCLKFreq+0x50>)
 800971a:	699b      	ldr	r3, [r3, #24]
 800971c:	f003 030f 	and.w	r3, r3, #15
 8009720:	4a09      	ldr	r2, [pc, #36]	; (8009748 <HAL_RCC_GetHCLKFreq+0x54>)
 8009722:	5cd3      	ldrb	r3, [r2, r3]
 8009724:	f003 031f 	and.w	r3, r3, #31
 8009728:	687a      	ldr	r2, [r7, #4]
 800972a:	fa22 f303 	lsr.w	r3, r2, r3
 800972e:	4a07      	ldr	r2, [pc, #28]	; (800974c <HAL_RCC_GetHCLKFreq+0x58>)
 8009730:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009732:	4a07      	ldr	r2, [pc, #28]	; (8009750 <HAL_RCC_GetHCLKFreq+0x5c>)
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009738:	4b04      	ldr	r3, [pc, #16]	; (800974c <HAL_RCC_GetHCLKFreq+0x58>)
 800973a:	681b      	ldr	r3, [r3, #0]
}
 800973c:	4618      	mov	r0, r3
 800973e:	3708      	adds	r7, #8
 8009740:	46bd      	mov	sp, r7
 8009742:	bd80      	pop	{r7, pc}
 8009744:	58024400 	.word	0x58024400
 8009748:	08017b30 	.word	0x08017b30
 800974c:	24000004 	.word	0x24000004
 8009750:	24000000 	.word	0x24000000

08009754 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009754:	b580      	push	{r7, lr}
 8009756:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009758:	f7ff ffcc 	bl	80096f4 <HAL_RCC_GetHCLKFreq>
 800975c:	4602      	mov	r2, r0
 800975e:	4b06      	ldr	r3, [pc, #24]	; (8009778 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009760:	69db      	ldr	r3, [r3, #28]
 8009762:	091b      	lsrs	r3, r3, #4
 8009764:	f003 0307 	and.w	r3, r3, #7
 8009768:	4904      	ldr	r1, [pc, #16]	; (800977c <HAL_RCC_GetPCLK1Freq+0x28>)
 800976a:	5ccb      	ldrb	r3, [r1, r3]
 800976c:	f003 031f 	and.w	r3, r3, #31
 8009770:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009774:	4618      	mov	r0, r3
 8009776:	bd80      	pop	{r7, pc}
 8009778:	58024400 	.word	0x58024400
 800977c:	08017b30 	.word	0x08017b30

08009780 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009780:	b580      	push	{r7, lr}
 8009782:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009784:	f7ff ffb6 	bl	80096f4 <HAL_RCC_GetHCLKFreq>
 8009788:	4602      	mov	r2, r0
 800978a:	4b06      	ldr	r3, [pc, #24]	; (80097a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800978c:	69db      	ldr	r3, [r3, #28]
 800978e:	0a1b      	lsrs	r3, r3, #8
 8009790:	f003 0307 	and.w	r3, r3, #7
 8009794:	4904      	ldr	r1, [pc, #16]	; (80097a8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009796:	5ccb      	ldrb	r3, [r1, r3]
 8009798:	f003 031f 	and.w	r3, r3, #31
 800979c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80097a0:	4618      	mov	r0, r3
 80097a2:	bd80      	pop	{r7, pc}
 80097a4:	58024400 	.word	0x58024400
 80097a8:	08017b30 	.word	0x08017b30

080097ac <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80097ac:	b480      	push	{r7}
 80097ae:	b083      	sub	sp, #12
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	6078      	str	r0, [r7, #4]
 80097b4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	223f      	movs	r2, #63	; 0x3f
 80097ba:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80097bc:	4b1a      	ldr	r3, [pc, #104]	; (8009828 <HAL_RCC_GetClockConfig+0x7c>)
 80097be:	691b      	ldr	r3, [r3, #16]
 80097c0:	f003 0207 	and.w	r2, r3, #7
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80097c8:	4b17      	ldr	r3, [pc, #92]	; (8009828 <HAL_RCC_GetClockConfig+0x7c>)
 80097ca:	699b      	ldr	r3, [r3, #24]
 80097cc:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80097d4:	4b14      	ldr	r3, [pc, #80]	; (8009828 <HAL_RCC_GetClockConfig+0x7c>)
 80097d6:	699b      	ldr	r3, [r3, #24]
 80097d8:	f003 020f 	and.w	r2, r3, #15
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80097e0:	4b11      	ldr	r3, [pc, #68]	; (8009828 <HAL_RCC_GetClockConfig+0x7c>)
 80097e2:	699b      	ldr	r3, [r3, #24]
 80097e4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80097ec:	4b0e      	ldr	r3, [pc, #56]	; (8009828 <HAL_RCC_GetClockConfig+0x7c>)
 80097ee:	69db      	ldr	r3, [r3, #28]
 80097f0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80097f8:	4b0b      	ldr	r3, [pc, #44]	; (8009828 <HAL_RCC_GetClockConfig+0x7c>)
 80097fa:	69db      	ldr	r3, [r3, #28]
 80097fc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8009804:	4b08      	ldr	r3, [pc, #32]	; (8009828 <HAL_RCC_GetClockConfig+0x7c>)
 8009806:	6a1b      	ldr	r3, [r3, #32]
 8009808:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8009810:	4b06      	ldr	r3, [pc, #24]	; (800982c <HAL_RCC_GetClockConfig+0x80>)
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	f003 020f 	and.w	r2, r3, #15
 8009818:	683b      	ldr	r3, [r7, #0]
 800981a:	601a      	str	r2, [r3, #0]
}
 800981c:	bf00      	nop
 800981e:	370c      	adds	r7, #12
 8009820:	46bd      	mov	sp, r7
 8009822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009826:	4770      	bx	lr
 8009828:	58024400 	.word	0x58024400
 800982c:	52002000 	.word	0x52002000

08009830 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009830:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009834:	b0ca      	sub	sp, #296	; 0x128
 8009836:	af00      	add	r7, sp, #0
 8009838:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800983c:	2300      	movs	r3, #0
 800983e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009842:	2300      	movs	r3, #0
 8009844:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009848:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800984c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009850:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8009854:	2500      	movs	r5, #0
 8009856:	ea54 0305 	orrs.w	r3, r4, r5
 800985a:	d049      	beq.n	80098f0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800985c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009860:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009862:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009866:	d02f      	beq.n	80098c8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8009868:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800986c:	d828      	bhi.n	80098c0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800986e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009872:	d01a      	beq.n	80098aa <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8009874:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009878:	d822      	bhi.n	80098c0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800987a:	2b00      	cmp	r3, #0
 800987c:	d003      	beq.n	8009886 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800987e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009882:	d007      	beq.n	8009894 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009884:	e01c      	b.n	80098c0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009886:	4bb8      	ldr	r3, [pc, #736]	; (8009b68 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800988a:	4ab7      	ldr	r2, [pc, #732]	; (8009b68 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800988c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009890:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009892:	e01a      	b.n	80098ca <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009894:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009898:	3308      	adds	r3, #8
 800989a:	2102      	movs	r1, #2
 800989c:	4618      	mov	r0, r3
 800989e:	f002 fb61 	bl	800bf64 <RCCEx_PLL2_Config>
 80098a2:	4603      	mov	r3, r0
 80098a4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80098a8:	e00f      	b.n	80098ca <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80098aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098ae:	3328      	adds	r3, #40	; 0x28
 80098b0:	2102      	movs	r1, #2
 80098b2:	4618      	mov	r0, r3
 80098b4:	f002 fc08 	bl	800c0c8 <RCCEx_PLL3_Config>
 80098b8:	4603      	mov	r3, r0
 80098ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80098be:	e004      	b.n	80098ca <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80098c0:	2301      	movs	r3, #1
 80098c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80098c6:	e000      	b.n	80098ca <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80098c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80098ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d10a      	bne.n	80098e8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80098d2:	4ba5      	ldr	r3, [pc, #660]	; (8009b68 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80098d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80098d6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80098da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80098e0:	4aa1      	ldr	r2, [pc, #644]	; (8009b68 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80098e2:	430b      	orrs	r3, r1
 80098e4:	6513      	str	r3, [r2, #80]	; 0x50
 80098e6:	e003      	b.n	80098f0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098e8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80098ec:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80098f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098f8:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80098fc:	f04f 0900 	mov.w	r9, #0
 8009900:	ea58 0309 	orrs.w	r3, r8, r9
 8009904:	d047      	beq.n	8009996 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8009906:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800990a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800990c:	2b04      	cmp	r3, #4
 800990e:	d82a      	bhi.n	8009966 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8009910:	a201      	add	r2, pc, #4	; (adr r2, 8009918 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8009912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009916:	bf00      	nop
 8009918:	0800992d 	.word	0x0800992d
 800991c:	0800993b 	.word	0x0800993b
 8009920:	08009951 	.word	0x08009951
 8009924:	0800996f 	.word	0x0800996f
 8009928:	0800996f 	.word	0x0800996f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800992c:	4b8e      	ldr	r3, [pc, #568]	; (8009b68 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800992e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009930:	4a8d      	ldr	r2, [pc, #564]	; (8009b68 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009932:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009936:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009938:	e01a      	b.n	8009970 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800993a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800993e:	3308      	adds	r3, #8
 8009940:	2100      	movs	r1, #0
 8009942:	4618      	mov	r0, r3
 8009944:	f002 fb0e 	bl	800bf64 <RCCEx_PLL2_Config>
 8009948:	4603      	mov	r3, r0
 800994a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800994e:	e00f      	b.n	8009970 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009950:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009954:	3328      	adds	r3, #40	; 0x28
 8009956:	2100      	movs	r1, #0
 8009958:	4618      	mov	r0, r3
 800995a:	f002 fbb5 	bl	800c0c8 <RCCEx_PLL3_Config>
 800995e:	4603      	mov	r3, r0
 8009960:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009964:	e004      	b.n	8009970 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009966:	2301      	movs	r3, #1
 8009968:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800996c:	e000      	b.n	8009970 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800996e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009970:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009974:	2b00      	cmp	r3, #0
 8009976:	d10a      	bne.n	800998e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009978:	4b7b      	ldr	r3, [pc, #492]	; (8009b68 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800997a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800997c:	f023 0107 	bic.w	r1, r3, #7
 8009980:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009984:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009986:	4a78      	ldr	r2, [pc, #480]	; (8009b68 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009988:	430b      	orrs	r3, r1
 800998a:	6513      	str	r3, [r2, #80]	; 0x50
 800998c:	e003      	b.n	8009996 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800998e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009992:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8009996:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800999a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800999e:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80099a2:	f04f 0b00 	mov.w	fp, #0
 80099a6:	ea5a 030b 	orrs.w	r3, sl, fp
 80099aa:	d04c      	beq.n	8009a46 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80099ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80099b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80099b6:	d030      	beq.n	8009a1a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80099b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80099bc:	d829      	bhi.n	8009a12 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80099be:	2bc0      	cmp	r3, #192	; 0xc0
 80099c0:	d02d      	beq.n	8009a1e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80099c2:	2bc0      	cmp	r3, #192	; 0xc0
 80099c4:	d825      	bhi.n	8009a12 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80099c6:	2b80      	cmp	r3, #128	; 0x80
 80099c8:	d018      	beq.n	80099fc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80099ca:	2b80      	cmp	r3, #128	; 0x80
 80099cc:	d821      	bhi.n	8009a12 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d002      	beq.n	80099d8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80099d2:	2b40      	cmp	r3, #64	; 0x40
 80099d4:	d007      	beq.n	80099e6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80099d6:	e01c      	b.n	8009a12 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80099d8:	4b63      	ldr	r3, [pc, #396]	; (8009b68 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80099da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099dc:	4a62      	ldr	r2, [pc, #392]	; (8009b68 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80099de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80099e2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80099e4:	e01c      	b.n	8009a20 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80099e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099ea:	3308      	adds	r3, #8
 80099ec:	2100      	movs	r1, #0
 80099ee:	4618      	mov	r0, r3
 80099f0:	f002 fab8 	bl	800bf64 <RCCEx_PLL2_Config>
 80099f4:	4603      	mov	r3, r0
 80099f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80099fa:	e011      	b.n	8009a20 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80099fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a00:	3328      	adds	r3, #40	; 0x28
 8009a02:	2100      	movs	r1, #0
 8009a04:	4618      	mov	r0, r3
 8009a06:	f002 fb5f 	bl	800c0c8 <RCCEx_PLL3_Config>
 8009a0a:	4603      	mov	r3, r0
 8009a0c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009a10:	e006      	b.n	8009a20 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009a12:	2301      	movs	r3, #1
 8009a14:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009a18:	e002      	b.n	8009a20 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8009a1a:	bf00      	nop
 8009a1c:	e000      	b.n	8009a20 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8009a1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009a20:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d10a      	bne.n	8009a3e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8009a28:	4b4f      	ldr	r3, [pc, #316]	; (8009b68 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009a2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a2c:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8009a30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a36:	4a4c      	ldr	r2, [pc, #304]	; (8009b68 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009a38:	430b      	orrs	r3, r1
 8009a3a:	6513      	str	r3, [r2, #80]	; 0x50
 8009a3c:	e003      	b.n	8009a46 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a3e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009a42:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009a46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a4e:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8009a52:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009a56:	2300      	movs	r3, #0
 8009a58:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8009a5c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8009a60:	460b      	mov	r3, r1
 8009a62:	4313      	orrs	r3, r2
 8009a64:	d053      	beq.n	8009b0e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8009a66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a6a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009a6e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009a72:	d035      	beq.n	8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8009a74:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009a78:	d82e      	bhi.n	8009ad8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009a7a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009a7e:	d031      	beq.n	8009ae4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8009a80:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009a84:	d828      	bhi.n	8009ad8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009a86:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009a8a:	d01a      	beq.n	8009ac2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8009a8c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009a90:	d822      	bhi.n	8009ad8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d003      	beq.n	8009a9e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8009a96:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009a9a:	d007      	beq.n	8009aac <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8009a9c:	e01c      	b.n	8009ad8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009a9e:	4b32      	ldr	r3, [pc, #200]	; (8009b68 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009aa2:	4a31      	ldr	r2, [pc, #196]	; (8009b68 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009aa4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009aa8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009aaa:	e01c      	b.n	8009ae6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009aac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ab0:	3308      	adds	r3, #8
 8009ab2:	2100      	movs	r1, #0
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	f002 fa55 	bl	800bf64 <RCCEx_PLL2_Config>
 8009aba:	4603      	mov	r3, r0
 8009abc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009ac0:	e011      	b.n	8009ae6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009ac2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ac6:	3328      	adds	r3, #40	; 0x28
 8009ac8:	2100      	movs	r1, #0
 8009aca:	4618      	mov	r0, r3
 8009acc:	f002 fafc 	bl	800c0c8 <RCCEx_PLL3_Config>
 8009ad0:	4603      	mov	r3, r0
 8009ad2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009ad6:	e006      	b.n	8009ae6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009ad8:	2301      	movs	r3, #1
 8009ada:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009ade:	e002      	b.n	8009ae6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8009ae0:	bf00      	nop
 8009ae2:	e000      	b.n	8009ae6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8009ae4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009ae6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d10b      	bne.n	8009b06 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009aee:	4b1e      	ldr	r3, [pc, #120]	; (8009b68 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009af0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009af2:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8009af6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009afa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009afe:	4a1a      	ldr	r2, [pc, #104]	; (8009b68 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009b00:	430b      	orrs	r3, r1
 8009b02:	6593      	str	r3, [r2, #88]	; 0x58
 8009b04:	e003      	b.n	8009b0e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b06:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009b0a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009b0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b16:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8009b1a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009b1e:	2300      	movs	r3, #0
 8009b20:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009b24:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8009b28:	460b      	mov	r3, r1
 8009b2a:	4313      	orrs	r3, r2
 8009b2c:	d056      	beq.n	8009bdc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8009b2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b32:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009b36:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009b3a:	d038      	beq.n	8009bae <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8009b3c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009b40:	d831      	bhi.n	8009ba6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009b42:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009b46:	d034      	beq.n	8009bb2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8009b48:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009b4c:	d82b      	bhi.n	8009ba6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009b4e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009b52:	d01d      	beq.n	8009b90 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8009b54:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009b58:	d825      	bhi.n	8009ba6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d006      	beq.n	8009b6c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8009b5e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009b62:	d00a      	beq.n	8009b7a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8009b64:	e01f      	b.n	8009ba6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009b66:	bf00      	nop
 8009b68:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009b6c:	4ba2      	ldr	r3, [pc, #648]	; (8009df8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b70:	4aa1      	ldr	r2, [pc, #644]	; (8009df8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009b72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009b76:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009b78:	e01c      	b.n	8009bb4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009b7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b7e:	3308      	adds	r3, #8
 8009b80:	2100      	movs	r1, #0
 8009b82:	4618      	mov	r0, r3
 8009b84:	f002 f9ee 	bl	800bf64 <RCCEx_PLL2_Config>
 8009b88:	4603      	mov	r3, r0
 8009b8a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009b8e:	e011      	b.n	8009bb4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009b90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b94:	3328      	adds	r3, #40	; 0x28
 8009b96:	2100      	movs	r1, #0
 8009b98:	4618      	mov	r0, r3
 8009b9a:	f002 fa95 	bl	800c0c8 <RCCEx_PLL3_Config>
 8009b9e:	4603      	mov	r3, r0
 8009ba0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009ba4:	e006      	b.n	8009bb4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009ba6:	2301      	movs	r3, #1
 8009ba8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009bac:	e002      	b.n	8009bb4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8009bae:	bf00      	nop
 8009bb0:	e000      	b.n	8009bb4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8009bb2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009bb4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d10b      	bne.n	8009bd4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009bbc:	4b8e      	ldr	r3, [pc, #568]	; (8009df8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009bbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009bc0:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8009bc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009bc8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009bcc:	4a8a      	ldr	r2, [pc, #552]	; (8009df8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009bce:	430b      	orrs	r3, r1
 8009bd0:	6593      	str	r3, [r2, #88]	; 0x58
 8009bd2:	e003      	b.n	8009bdc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009bd4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009bd8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009bdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009be4:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8009be8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009bec:	2300      	movs	r3, #0
 8009bee:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009bf2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8009bf6:	460b      	mov	r3, r1
 8009bf8:	4313      	orrs	r3, r2
 8009bfa:	d03a      	beq.n	8009c72 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8009bfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c02:	2b30      	cmp	r3, #48	; 0x30
 8009c04:	d01f      	beq.n	8009c46 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8009c06:	2b30      	cmp	r3, #48	; 0x30
 8009c08:	d819      	bhi.n	8009c3e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8009c0a:	2b20      	cmp	r3, #32
 8009c0c:	d00c      	beq.n	8009c28 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8009c0e:	2b20      	cmp	r3, #32
 8009c10:	d815      	bhi.n	8009c3e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d019      	beq.n	8009c4a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8009c16:	2b10      	cmp	r3, #16
 8009c18:	d111      	bne.n	8009c3e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c1a:	4b77      	ldr	r3, [pc, #476]	; (8009df8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c1e:	4a76      	ldr	r2, [pc, #472]	; (8009df8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009c20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009c24:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8009c26:	e011      	b.n	8009c4c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009c28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c2c:	3308      	adds	r3, #8
 8009c2e:	2102      	movs	r1, #2
 8009c30:	4618      	mov	r0, r3
 8009c32:	f002 f997 	bl	800bf64 <RCCEx_PLL2_Config>
 8009c36:	4603      	mov	r3, r0
 8009c38:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8009c3c:	e006      	b.n	8009c4c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009c3e:	2301      	movs	r3, #1
 8009c40:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009c44:	e002      	b.n	8009c4c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8009c46:	bf00      	nop
 8009c48:	e000      	b.n	8009c4c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8009c4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009c4c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d10a      	bne.n	8009c6a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009c54:	4b68      	ldr	r3, [pc, #416]	; (8009df8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009c56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c58:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8009c5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c62:	4a65      	ldr	r2, [pc, #404]	; (8009df8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009c64:	430b      	orrs	r3, r1
 8009c66:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009c68:	e003      	b.n	8009c72 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c6a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009c6e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009c72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c7a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8009c7e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009c82:	2300      	movs	r3, #0
 8009c84:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009c88:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8009c8c:	460b      	mov	r3, r1
 8009c8e:	4313      	orrs	r3, r2
 8009c90:	d051      	beq.n	8009d36 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8009c92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009c98:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009c9c:	d035      	beq.n	8009d0a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8009c9e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009ca2:	d82e      	bhi.n	8009d02 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009ca4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009ca8:	d031      	beq.n	8009d0e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8009caa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009cae:	d828      	bhi.n	8009d02 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009cb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009cb4:	d01a      	beq.n	8009cec <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8009cb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009cba:	d822      	bhi.n	8009d02 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d003      	beq.n	8009cc8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8009cc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009cc4:	d007      	beq.n	8009cd6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8009cc6:	e01c      	b.n	8009d02 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009cc8:	4b4b      	ldr	r3, [pc, #300]	; (8009df8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ccc:	4a4a      	ldr	r2, [pc, #296]	; (8009df8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009cce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009cd2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009cd4:	e01c      	b.n	8009d10 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009cd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009cda:	3308      	adds	r3, #8
 8009cdc:	2100      	movs	r1, #0
 8009cde:	4618      	mov	r0, r3
 8009ce0:	f002 f940 	bl	800bf64 <RCCEx_PLL2_Config>
 8009ce4:	4603      	mov	r3, r0
 8009ce6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009cea:	e011      	b.n	8009d10 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009cec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009cf0:	3328      	adds	r3, #40	; 0x28
 8009cf2:	2100      	movs	r1, #0
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	f002 f9e7 	bl	800c0c8 <RCCEx_PLL3_Config>
 8009cfa:	4603      	mov	r3, r0
 8009cfc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009d00:	e006      	b.n	8009d10 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009d02:	2301      	movs	r3, #1
 8009d04:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009d08:	e002      	b.n	8009d10 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8009d0a:	bf00      	nop
 8009d0c:	e000      	b.n	8009d10 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8009d0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009d10:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d10a      	bne.n	8009d2e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009d18:	4b37      	ldr	r3, [pc, #220]	; (8009df8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009d1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d1c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8009d20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009d26:	4a34      	ldr	r2, [pc, #208]	; (8009df8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009d28:	430b      	orrs	r3, r1
 8009d2a:	6513      	str	r3, [r2, #80]	; 0x50
 8009d2c:	e003      	b.n	8009d36 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d2e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009d32:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009d36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d3e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8009d42:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009d46:	2300      	movs	r3, #0
 8009d48:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009d4c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8009d50:	460b      	mov	r3, r1
 8009d52:	4313      	orrs	r3, r2
 8009d54:	d056      	beq.n	8009e04 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8009d56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009d5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009d60:	d033      	beq.n	8009dca <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8009d62:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009d66:	d82c      	bhi.n	8009dc2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009d68:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009d6c:	d02f      	beq.n	8009dce <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8009d6e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009d72:	d826      	bhi.n	8009dc2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009d74:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009d78:	d02b      	beq.n	8009dd2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8009d7a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009d7e:	d820      	bhi.n	8009dc2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009d80:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009d84:	d012      	beq.n	8009dac <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8009d86:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009d8a:	d81a      	bhi.n	8009dc2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d022      	beq.n	8009dd6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8009d90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009d94:	d115      	bne.n	8009dc2 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009d96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d9a:	3308      	adds	r3, #8
 8009d9c:	2101      	movs	r1, #1
 8009d9e:	4618      	mov	r0, r3
 8009da0:	f002 f8e0 	bl	800bf64 <RCCEx_PLL2_Config>
 8009da4:	4603      	mov	r3, r0
 8009da6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009daa:	e015      	b.n	8009dd8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009dac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009db0:	3328      	adds	r3, #40	; 0x28
 8009db2:	2101      	movs	r1, #1
 8009db4:	4618      	mov	r0, r3
 8009db6:	f002 f987 	bl	800c0c8 <RCCEx_PLL3_Config>
 8009dba:	4603      	mov	r3, r0
 8009dbc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009dc0:	e00a      	b.n	8009dd8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009dc2:	2301      	movs	r3, #1
 8009dc4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009dc8:	e006      	b.n	8009dd8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009dca:	bf00      	nop
 8009dcc:	e004      	b.n	8009dd8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009dce:	bf00      	nop
 8009dd0:	e002      	b.n	8009dd8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009dd2:	bf00      	nop
 8009dd4:	e000      	b.n	8009dd8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009dd6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009dd8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d10d      	bne.n	8009dfc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009de0:	4b05      	ldr	r3, [pc, #20]	; (8009df8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009de2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009de4:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8009de8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009dec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009dee:	4a02      	ldr	r2, [pc, #8]	; (8009df8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009df0:	430b      	orrs	r3, r1
 8009df2:	6513      	str	r3, [r2, #80]	; 0x50
 8009df4:	e006      	b.n	8009e04 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8009df6:	bf00      	nop
 8009df8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009dfc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009e00:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009e04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e0c:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8009e10:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009e14:	2300      	movs	r3, #0
 8009e16:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009e1a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8009e1e:	460b      	mov	r3, r1
 8009e20:	4313      	orrs	r3, r2
 8009e22:	d055      	beq.n	8009ed0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8009e24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e28:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009e2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009e30:	d033      	beq.n	8009e9a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8009e32:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009e36:	d82c      	bhi.n	8009e92 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009e38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e3c:	d02f      	beq.n	8009e9e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8009e3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e42:	d826      	bhi.n	8009e92 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009e44:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009e48:	d02b      	beq.n	8009ea2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8009e4a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009e4e:	d820      	bhi.n	8009e92 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009e50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009e54:	d012      	beq.n	8009e7c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8009e56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009e5a:	d81a      	bhi.n	8009e92 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d022      	beq.n	8009ea6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8009e60:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009e64:	d115      	bne.n	8009e92 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009e66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e6a:	3308      	adds	r3, #8
 8009e6c:	2101      	movs	r1, #1
 8009e6e:	4618      	mov	r0, r3
 8009e70:	f002 f878 	bl	800bf64 <RCCEx_PLL2_Config>
 8009e74:	4603      	mov	r3, r0
 8009e76:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009e7a:	e015      	b.n	8009ea8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009e7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e80:	3328      	adds	r3, #40	; 0x28
 8009e82:	2101      	movs	r1, #1
 8009e84:	4618      	mov	r0, r3
 8009e86:	f002 f91f 	bl	800c0c8 <RCCEx_PLL3_Config>
 8009e8a:	4603      	mov	r3, r0
 8009e8c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009e90:	e00a      	b.n	8009ea8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8009e92:	2301      	movs	r3, #1
 8009e94:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009e98:	e006      	b.n	8009ea8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009e9a:	bf00      	nop
 8009e9c:	e004      	b.n	8009ea8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009e9e:	bf00      	nop
 8009ea0:	e002      	b.n	8009ea8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009ea2:	bf00      	nop
 8009ea4:	e000      	b.n	8009ea8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009ea6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009ea8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d10b      	bne.n	8009ec8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009eb0:	4ba3      	ldr	r3, [pc, #652]	; (800a140 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009eb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009eb4:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8009eb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ebc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009ec0:	4a9f      	ldr	r2, [pc, #636]	; (800a140 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009ec2:	430b      	orrs	r3, r1
 8009ec4:	6593      	str	r3, [r2, #88]	; 0x58
 8009ec6:	e003      	b.n	8009ed0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ec8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009ecc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009ed0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ed8:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8009edc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009ee0:	2300      	movs	r3, #0
 8009ee2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009ee6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009eea:	460b      	mov	r3, r1
 8009eec:	4313      	orrs	r3, r2
 8009eee:	d037      	beq.n	8009f60 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8009ef0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ef4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ef6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009efa:	d00e      	beq.n	8009f1a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8009efc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009f00:	d816      	bhi.n	8009f30 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d018      	beq.n	8009f38 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8009f06:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009f0a:	d111      	bne.n	8009f30 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009f0c:	4b8c      	ldr	r3, [pc, #560]	; (800a140 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f10:	4a8b      	ldr	r2, [pc, #556]	; (800a140 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009f12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009f16:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009f18:	e00f      	b.n	8009f3a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009f1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f1e:	3308      	adds	r3, #8
 8009f20:	2101      	movs	r1, #1
 8009f22:	4618      	mov	r0, r3
 8009f24:	f002 f81e 	bl	800bf64 <RCCEx_PLL2_Config>
 8009f28:	4603      	mov	r3, r0
 8009f2a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009f2e:	e004      	b.n	8009f3a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009f30:	2301      	movs	r3, #1
 8009f32:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009f36:	e000      	b.n	8009f3a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8009f38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009f3a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d10a      	bne.n	8009f58 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009f42:	4b7f      	ldr	r3, [pc, #508]	; (800a140 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009f44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f46:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8009f4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f50:	4a7b      	ldr	r2, [pc, #492]	; (800a140 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009f52:	430b      	orrs	r3, r1
 8009f54:	6513      	str	r3, [r2, #80]	; 0x50
 8009f56:	e003      	b.n	8009f60 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f58:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009f5c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009f60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f68:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8009f6c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009f70:	2300      	movs	r3, #0
 8009f72:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009f76:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8009f7a:	460b      	mov	r3, r1
 8009f7c:	4313      	orrs	r3, r2
 8009f7e:	d039      	beq.n	8009ff4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8009f80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f86:	2b03      	cmp	r3, #3
 8009f88:	d81c      	bhi.n	8009fc4 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8009f8a:	a201      	add	r2, pc, #4	; (adr r2, 8009f90 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8009f8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f90:	08009fcd 	.word	0x08009fcd
 8009f94:	08009fa1 	.word	0x08009fa1
 8009f98:	08009faf 	.word	0x08009faf
 8009f9c:	08009fcd 	.word	0x08009fcd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009fa0:	4b67      	ldr	r3, [pc, #412]	; (800a140 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fa4:	4a66      	ldr	r2, [pc, #408]	; (800a140 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009fa6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009faa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009fac:	e00f      	b.n	8009fce <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009fae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009fb2:	3308      	adds	r3, #8
 8009fb4:	2102      	movs	r1, #2
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	f001 ffd4 	bl	800bf64 <RCCEx_PLL2_Config>
 8009fbc:	4603      	mov	r3, r0
 8009fbe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009fc2:	e004      	b.n	8009fce <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009fc4:	2301      	movs	r3, #1
 8009fc6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009fca:	e000      	b.n	8009fce <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8009fcc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009fce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d10a      	bne.n	8009fec <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009fd6:	4b5a      	ldr	r3, [pc, #360]	; (800a140 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009fd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009fda:	f023 0103 	bic.w	r1, r3, #3
 8009fde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009fe2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009fe4:	4a56      	ldr	r2, [pc, #344]	; (800a140 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009fe6:	430b      	orrs	r3, r1
 8009fe8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009fea:	e003      	b.n	8009ff4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009fec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009ff0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009ff4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ffc:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800a000:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a004:	2300      	movs	r3, #0
 800a006:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a00a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800a00e:	460b      	mov	r3, r1
 800a010:	4313      	orrs	r3, r2
 800a012:	f000 809f 	beq.w	800a154 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a016:	4b4b      	ldr	r3, [pc, #300]	; (800a144 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	4a4a      	ldr	r2, [pc, #296]	; (800a144 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800a01c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a020:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a022:	f7f9 fd73 	bl	8003b0c <HAL_GetTick>
 800a026:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a02a:	e00b      	b.n	800a044 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a02c:	f7f9 fd6e 	bl	8003b0c <HAL_GetTick>
 800a030:	4602      	mov	r2, r0
 800a032:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800a036:	1ad3      	subs	r3, r2, r3
 800a038:	2b64      	cmp	r3, #100	; 0x64
 800a03a:	d903      	bls.n	800a044 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800a03c:	2303      	movs	r3, #3
 800a03e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a042:	e005      	b.n	800a050 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a044:	4b3f      	ldr	r3, [pc, #252]	; (800a144 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d0ed      	beq.n	800a02c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800a050:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a054:	2b00      	cmp	r3, #0
 800a056:	d179      	bne.n	800a14c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800a058:	4b39      	ldr	r3, [pc, #228]	; (800a140 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a05a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a05c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a060:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a064:	4053      	eors	r3, r2
 800a066:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d015      	beq.n	800a09a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a06e:	4b34      	ldr	r3, [pc, #208]	; (800a140 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a070:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a072:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a076:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a07a:	4b31      	ldr	r3, [pc, #196]	; (800a140 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a07c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a07e:	4a30      	ldr	r2, [pc, #192]	; (800a140 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a080:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a084:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a086:	4b2e      	ldr	r3, [pc, #184]	; (800a140 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a088:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a08a:	4a2d      	ldr	r2, [pc, #180]	; (800a140 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a08c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a090:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800a092:	4a2b      	ldr	r2, [pc, #172]	; (800a140 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a094:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a098:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800a09a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a09e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a0a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a0a6:	d118      	bne.n	800a0da <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a0a8:	f7f9 fd30 	bl	8003b0c <HAL_GetTick>
 800a0ac:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a0b0:	e00d      	b.n	800a0ce <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a0b2:	f7f9 fd2b 	bl	8003b0c <HAL_GetTick>
 800a0b6:	4602      	mov	r2, r0
 800a0b8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800a0bc:	1ad2      	subs	r2, r2, r3
 800a0be:	f241 3388 	movw	r3, #5000	; 0x1388
 800a0c2:	429a      	cmp	r2, r3
 800a0c4:	d903      	bls.n	800a0ce <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800a0c6:	2303      	movs	r3, #3
 800a0c8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800a0cc:	e005      	b.n	800a0da <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a0ce:	4b1c      	ldr	r3, [pc, #112]	; (800a140 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a0d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0d2:	f003 0302 	and.w	r3, r3, #2
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d0eb      	beq.n	800a0b2 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800a0da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d129      	bne.n	800a136 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a0e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a0e6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a0ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a0ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a0f2:	d10e      	bne.n	800a112 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800a0f4:	4b12      	ldr	r3, [pc, #72]	; (800a140 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a0f6:	691b      	ldr	r3, [r3, #16]
 800a0f8:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800a0fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a100:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a104:	091a      	lsrs	r2, r3, #4
 800a106:	4b10      	ldr	r3, [pc, #64]	; (800a148 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800a108:	4013      	ands	r3, r2
 800a10a:	4a0d      	ldr	r2, [pc, #52]	; (800a140 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a10c:	430b      	orrs	r3, r1
 800a10e:	6113      	str	r3, [r2, #16]
 800a110:	e005      	b.n	800a11e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800a112:	4b0b      	ldr	r3, [pc, #44]	; (800a140 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a114:	691b      	ldr	r3, [r3, #16]
 800a116:	4a0a      	ldr	r2, [pc, #40]	; (800a140 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a118:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a11c:	6113      	str	r3, [r2, #16]
 800a11e:	4b08      	ldr	r3, [pc, #32]	; (800a140 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a120:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800a122:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a126:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a12a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a12e:	4a04      	ldr	r2, [pc, #16]	; (800a140 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a130:	430b      	orrs	r3, r1
 800a132:	6713      	str	r3, [r2, #112]	; 0x70
 800a134:	e00e      	b.n	800a154 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a136:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a13a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800a13e:	e009      	b.n	800a154 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800a140:	58024400 	.word	0x58024400
 800a144:	58024800 	.word	0x58024800
 800a148:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a14c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a150:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800a154:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a15c:	f002 0301 	and.w	r3, r2, #1
 800a160:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a164:	2300      	movs	r3, #0
 800a166:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a16a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a16e:	460b      	mov	r3, r1
 800a170:	4313      	orrs	r3, r2
 800a172:	f000 8089 	beq.w	800a288 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800a176:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a17a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a17c:	2b28      	cmp	r3, #40	; 0x28
 800a17e:	d86b      	bhi.n	800a258 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800a180:	a201      	add	r2, pc, #4	; (adr r2, 800a188 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800a182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a186:	bf00      	nop
 800a188:	0800a261 	.word	0x0800a261
 800a18c:	0800a259 	.word	0x0800a259
 800a190:	0800a259 	.word	0x0800a259
 800a194:	0800a259 	.word	0x0800a259
 800a198:	0800a259 	.word	0x0800a259
 800a19c:	0800a259 	.word	0x0800a259
 800a1a0:	0800a259 	.word	0x0800a259
 800a1a4:	0800a259 	.word	0x0800a259
 800a1a8:	0800a22d 	.word	0x0800a22d
 800a1ac:	0800a259 	.word	0x0800a259
 800a1b0:	0800a259 	.word	0x0800a259
 800a1b4:	0800a259 	.word	0x0800a259
 800a1b8:	0800a259 	.word	0x0800a259
 800a1bc:	0800a259 	.word	0x0800a259
 800a1c0:	0800a259 	.word	0x0800a259
 800a1c4:	0800a259 	.word	0x0800a259
 800a1c8:	0800a243 	.word	0x0800a243
 800a1cc:	0800a259 	.word	0x0800a259
 800a1d0:	0800a259 	.word	0x0800a259
 800a1d4:	0800a259 	.word	0x0800a259
 800a1d8:	0800a259 	.word	0x0800a259
 800a1dc:	0800a259 	.word	0x0800a259
 800a1e0:	0800a259 	.word	0x0800a259
 800a1e4:	0800a259 	.word	0x0800a259
 800a1e8:	0800a261 	.word	0x0800a261
 800a1ec:	0800a259 	.word	0x0800a259
 800a1f0:	0800a259 	.word	0x0800a259
 800a1f4:	0800a259 	.word	0x0800a259
 800a1f8:	0800a259 	.word	0x0800a259
 800a1fc:	0800a259 	.word	0x0800a259
 800a200:	0800a259 	.word	0x0800a259
 800a204:	0800a259 	.word	0x0800a259
 800a208:	0800a261 	.word	0x0800a261
 800a20c:	0800a259 	.word	0x0800a259
 800a210:	0800a259 	.word	0x0800a259
 800a214:	0800a259 	.word	0x0800a259
 800a218:	0800a259 	.word	0x0800a259
 800a21c:	0800a259 	.word	0x0800a259
 800a220:	0800a259 	.word	0x0800a259
 800a224:	0800a259 	.word	0x0800a259
 800a228:	0800a261 	.word	0x0800a261
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a22c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a230:	3308      	adds	r3, #8
 800a232:	2101      	movs	r1, #1
 800a234:	4618      	mov	r0, r3
 800a236:	f001 fe95 	bl	800bf64 <RCCEx_PLL2_Config>
 800a23a:	4603      	mov	r3, r0
 800a23c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a240:	e00f      	b.n	800a262 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a242:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a246:	3328      	adds	r3, #40	; 0x28
 800a248:	2101      	movs	r1, #1
 800a24a:	4618      	mov	r0, r3
 800a24c:	f001 ff3c 	bl	800c0c8 <RCCEx_PLL3_Config>
 800a250:	4603      	mov	r3, r0
 800a252:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a256:	e004      	b.n	800a262 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a258:	2301      	movs	r3, #1
 800a25a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a25e:	e000      	b.n	800a262 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800a260:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a262:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a266:	2b00      	cmp	r3, #0
 800a268:	d10a      	bne.n	800a280 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800a26a:	4bbf      	ldr	r3, [pc, #764]	; (800a568 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a26c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a26e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800a272:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a276:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a278:	4abb      	ldr	r2, [pc, #748]	; (800a568 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a27a:	430b      	orrs	r3, r1
 800a27c:	6553      	str	r3, [r2, #84]	; 0x54
 800a27e:	e003      	b.n	800a288 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a280:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a284:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a288:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a28c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a290:	f002 0302 	and.w	r3, r2, #2
 800a294:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a298:	2300      	movs	r3, #0
 800a29a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800a29e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800a2a2:	460b      	mov	r3, r1
 800a2a4:	4313      	orrs	r3, r2
 800a2a6:	d041      	beq.n	800a32c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800a2a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a2ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a2ae:	2b05      	cmp	r3, #5
 800a2b0:	d824      	bhi.n	800a2fc <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800a2b2:	a201      	add	r2, pc, #4	; (adr r2, 800a2b8 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800a2b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2b8:	0800a305 	.word	0x0800a305
 800a2bc:	0800a2d1 	.word	0x0800a2d1
 800a2c0:	0800a2e7 	.word	0x0800a2e7
 800a2c4:	0800a305 	.word	0x0800a305
 800a2c8:	0800a305 	.word	0x0800a305
 800a2cc:	0800a305 	.word	0x0800a305
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a2d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a2d4:	3308      	adds	r3, #8
 800a2d6:	2101      	movs	r1, #1
 800a2d8:	4618      	mov	r0, r3
 800a2da:	f001 fe43 	bl	800bf64 <RCCEx_PLL2_Config>
 800a2de:	4603      	mov	r3, r0
 800a2e0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a2e4:	e00f      	b.n	800a306 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a2e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a2ea:	3328      	adds	r3, #40	; 0x28
 800a2ec:	2101      	movs	r1, #1
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	f001 feea 	bl	800c0c8 <RCCEx_PLL3_Config>
 800a2f4:	4603      	mov	r3, r0
 800a2f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a2fa:	e004      	b.n	800a306 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a2fc:	2301      	movs	r3, #1
 800a2fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a302:	e000      	b.n	800a306 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800a304:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a306:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d10a      	bne.n	800a324 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a30e:	4b96      	ldr	r3, [pc, #600]	; (800a568 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a310:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a312:	f023 0107 	bic.w	r1, r3, #7
 800a316:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a31a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a31c:	4a92      	ldr	r2, [pc, #584]	; (800a568 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a31e:	430b      	orrs	r3, r1
 800a320:	6553      	str	r3, [r2, #84]	; 0x54
 800a322:	e003      	b.n	800a32c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a324:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a328:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a32c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a330:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a334:	f002 0304 	and.w	r3, r2, #4
 800a338:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a33c:	2300      	movs	r3, #0
 800a33e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a342:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800a346:	460b      	mov	r3, r1
 800a348:	4313      	orrs	r3, r2
 800a34a:	d044      	beq.n	800a3d6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800a34c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a350:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a354:	2b05      	cmp	r3, #5
 800a356:	d825      	bhi.n	800a3a4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800a358:	a201      	add	r2, pc, #4	; (adr r2, 800a360 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800a35a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a35e:	bf00      	nop
 800a360:	0800a3ad 	.word	0x0800a3ad
 800a364:	0800a379 	.word	0x0800a379
 800a368:	0800a38f 	.word	0x0800a38f
 800a36c:	0800a3ad 	.word	0x0800a3ad
 800a370:	0800a3ad 	.word	0x0800a3ad
 800a374:	0800a3ad 	.word	0x0800a3ad
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a378:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a37c:	3308      	adds	r3, #8
 800a37e:	2101      	movs	r1, #1
 800a380:	4618      	mov	r0, r3
 800a382:	f001 fdef 	bl	800bf64 <RCCEx_PLL2_Config>
 800a386:	4603      	mov	r3, r0
 800a388:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a38c:	e00f      	b.n	800a3ae <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a38e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a392:	3328      	adds	r3, #40	; 0x28
 800a394:	2101      	movs	r1, #1
 800a396:	4618      	mov	r0, r3
 800a398:	f001 fe96 	bl	800c0c8 <RCCEx_PLL3_Config>
 800a39c:	4603      	mov	r3, r0
 800a39e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a3a2:	e004      	b.n	800a3ae <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a3a4:	2301      	movs	r3, #1
 800a3a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a3aa:	e000      	b.n	800a3ae <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800a3ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a3ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d10b      	bne.n	800a3ce <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a3b6:	4b6c      	ldr	r3, [pc, #432]	; (800a568 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a3b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a3ba:	f023 0107 	bic.w	r1, r3, #7
 800a3be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a3c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a3c6:	4a68      	ldr	r2, [pc, #416]	; (800a568 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a3c8:	430b      	orrs	r3, r1
 800a3ca:	6593      	str	r3, [r2, #88]	; 0x58
 800a3cc:	e003      	b.n	800a3d6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a3ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a3d2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a3d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a3da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3de:	f002 0320 	and.w	r3, r2, #32
 800a3e2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a3e6:	2300      	movs	r3, #0
 800a3e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a3ec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a3f0:	460b      	mov	r3, r1
 800a3f2:	4313      	orrs	r3, r2
 800a3f4:	d055      	beq.n	800a4a2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800a3f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a3fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a3fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a402:	d033      	beq.n	800a46c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800a404:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a408:	d82c      	bhi.n	800a464 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a40a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a40e:	d02f      	beq.n	800a470 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800a410:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a414:	d826      	bhi.n	800a464 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a416:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a41a:	d02b      	beq.n	800a474 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800a41c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a420:	d820      	bhi.n	800a464 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a422:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a426:	d012      	beq.n	800a44e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800a428:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a42c:	d81a      	bhi.n	800a464 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d022      	beq.n	800a478 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800a432:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a436:	d115      	bne.n	800a464 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a438:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a43c:	3308      	adds	r3, #8
 800a43e:	2100      	movs	r1, #0
 800a440:	4618      	mov	r0, r3
 800a442:	f001 fd8f 	bl	800bf64 <RCCEx_PLL2_Config>
 800a446:	4603      	mov	r3, r0
 800a448:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a44c:	e015      	b.n	800a47a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a44e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a452:	3328      	adds	r3, #40	; 0x28
 800a454:	2102      	movs	r1, #2
 800a456:	4618      	mov	r0, r3
 800a458:	f001 fe36 	bl	800c0c8 <RCCEx_PLL3_Config>
 800a45c:	4603      	mov	r3, r0
 800a45e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a462:	e00a      	b.n	800a47a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a464:	2301      	movs	r3, #1
 800a466:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a46a:	e006      	b.n	800a47a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a46c:	bf00      	nop
 800a46e:	e004      	b.n	800a47a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a470:	bf00      	nop
 800a472:	e002      	b.n	800a47a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a474:	bf00      	nop
 800a476:	e000      	b.n	800a47a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a478:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a47a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d10b      	bne.n	800a49a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a482:	4b39      	ldr	r3, [pc, #228]	; (800a568 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a484:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a486:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800a48a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a48e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a492:	4a35      	ldr	r2, [pc, #212]	; (800a568 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a494:	430b      	orrs	r3, r1
 800a496:	6553      	str	r3, [r2, #84]	; 0x54
 800a498:	e003      	b.n	800a4a2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a49a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a49e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a4a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a4a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4aa:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800a4ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a4b2:	2300      	movs	r3, #0
 800a4b4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800a4b8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800a4bc:	460b      	mov	r3, r1
 800a4be:	4313      	orrs	r3, r2
 800a4c0:	d058      	beq.n	800a574 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800a4c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a4c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a4ca:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a4ce:	d033      	beq.n	800a538 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800a4d0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a4d4:	d82c      	bhi.n	800a530 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a4d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a4da:	d02f      	beq.n	800a53c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800a4dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a4e0:	d826      	bhi.n	800a530 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a4e2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a4e6:	d02b      	beq.n	800a540 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800a4e8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a4ec:	d820      	bhi.n	800a530 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a4ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a4f2:	d012      	beq.n	800a51a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800a4f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a4f8:	d81a      	bhi.n	800a530 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d022      	beq.n	800a544 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800a4fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a502:	d115      	bne.n	800a530 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a504:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a508:	3308      	adds	r3, #8
 800a50a:	2100      	movs	r1, #0
 800a50c:	4618      	mov	r0, r3
 800a50e:	f001 fd29 	bl	800bf64 <RCCEx_PLL2_Config>
 800a512:	4603      	mov	r3, r0
 800a514:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a518:	e015      	b.n	800a546 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a51a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a51e:	3328      	adds	r3, #40	; 0x28
 800a520:	2102      	movs	r1, #2
 800a522:	4618      	mov	r0, r3
 800a524:	f001 fdd0 	bl	800c0c8 <RCCEx_PLL3_Config>
 800a528:	4603      	mov	r3, r0
 800a52a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a52e:	e00a      	b.n	800a546 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a530:	2301      	movs	r3, #1
 800a532:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a536:	e006      	b.n	800a546 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a538:	bf00      	nop
 800a53a:	e004      	b.n	800a546 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a53c:	bf00      	nop
 800a53e:	e002      	b.n	800a546 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a540:	bf00      	nop
 800a542:	e000      	b.n	800a546 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a544:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a546:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d10e      	bne.n	800a56c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a54e:	4b06      	ldr	r3, [pc, #24]	; (800a568 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a550:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a552:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800a556:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a55a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a55e:	4a02      	ldr	r2, [pc, #8]	; (800a568 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a560:	430b      	orrs	r3, r1
 800a562:	6593      	str	r3, [r2, #88]	; 0x58
 800a564:	e006      	b.n	800a574 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800a566:	bf00      	nop
 800a568:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a56c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a570:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a574:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a57c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800a580:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a584:	2300      	movs	r3, #0
 800a586:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a58a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800a58e:	460b      	mov	r3, r1
 800a590:	4313      	orrs	r3, r2
 800a592:	d055      	beq.n	800a640 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800a594:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a598:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a59c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a5a0:	d033      	beq.n	800a60a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800a5a2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a5a6:	d82c      	bhi.n	800a602 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a5a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a5ac:	d02f      	beq.n	800a60e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800a5ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a5b2:	d826      	bhi.n	800a602 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a5b4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a5b8:	d02b      	beq.n	800a612 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800a5ba:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a5be:	d820      	bhi.n	800a602 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a5c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a5c4:	d012      	beq.n	800a5ec <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800a5c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a5ca:	d81a      	bhi.n	800a602 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d022      	beq.n	800a616 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800a5d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a5d4:	d115      	bne.n	800a602 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a5d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a5da:	3308      	adds	r3, #8
 800a5dc:	2100      	movs	r1, #0
 800a5de:	4618      	mov	r0, r3
 800a5e0:	f001 fcc0 	bl	800bf64 <RCCEx_PLL2_Config>
 800a5e4:	4603      	mov	r3, r0
 800a5e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a5ea:	e015      	b.n	800a618 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a5ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a5f0:	3328      	adds	r3, #40	; 0x28
 800a5f2:	2102      	movs	r1, #2
 800a5f4:	4618      	mov	r0, r3
 800a5f6:	f001 fd67 	bl	800c0c8 <RCCEx_PLL3_Config>
 800a5fa:	4603      	mov	r3, r0
 800a5fc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a600:	e00a      	b.n	800a618 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a602:	2301      	movs	r3, #1
 800a604:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a608:	e006      	b.n	800a618 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a60a:	bf00      	nop
 800a60c:	e004      	b.n	800a618 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a60e:	bf00      	nop
 800a610:	e002      	b.n	800a618 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a612:	bf00      	nop
 800a614:	e000      	b.n	800a618 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a616:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a618:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d10b      	bne.n	800a638 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a620:	4ba1      	ldr	r3, [pc, #644]	; (800a8a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a622:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a624:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800a628:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a62c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a630:	4a9d      	ldr	r2, [pc, #628]	; (800a8a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a632:	430b      	orrs	r3, r1
 800a634:	6593      	str	r3, [r2, #88]	; 0x58
 800a636:	e003      	b.n	800a640 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a638:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a63c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800a640:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a644:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a648:	f002 0308 	and.w	r3, r2, #8
 800a64c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a650:	2300      	movs	r3, #0
 800a652:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a656:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800a65a:	460b      	mov	r3, r1
 800a65c:	4313      	orrs	r3, r2
 800a65e:	d01e      	beq.n	800a69e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800a660:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a664:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a668:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a66c:	d10c      	bne.n	800a688 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a66e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a672:	3328      	adds	r3, #40	; 0x28
 800a674:	2102      	movs	r1, #2
 800a676:	4618      	mov	r0, r3
 800a678:	f001 fd26 	bl	800c0c8 <RCCEx_PLL3_Config>
 800a67c:	4603      	mov	r3, r0
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d002      	beq.n	800a688 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800a682:	2301      	movs	r3, #1
 800a684:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800a688:	4b87      	ldr	r3, [pc, #540]	; (800a8a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a68a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a68c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a690:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a694:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a698:	4a83      	ldr	r2, [pc, #524]	; (800a8a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a69a:	430b      	orrs	r3, r1
 800a69c:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a69e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a6a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6a6:	f002 0310 	and.w	r3, r2, #16
 800a6aa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a6b4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800a6b8:	460b      	mov	r3, r1
 800a6ba:	4313      	orrs	r3, r2
 800a6bc:	d01e      	beq.n	800a6fc <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800a6be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a6c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a6c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a6ca:	d10c      	bne.n	800a6e6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a6cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a6d0:	3328      	adds	r3, #40	; 0x28
 800a6d2:	2102      	movs	r1, #2
 800a6d4:	4618      	mov	r0, r3
 800a6d6:	f001 fcf7 	bl	800c0c8 <RCCEx_PLL3_Config>
 800a6da:	4603      	mov	r3, r0
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d002      	beq.n	800a6e6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800a6e0:	2301      	movs	r3, #1
 800a6e2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a6e6:	4b70      	ldr	r3, [pc, #448]	; (800a8a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a6e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a6ea:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a6ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a6f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a6f6:	4a6c      	ldr	r2, [pc, #432]	; (800a8a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a6f8:	430b      	orrs	r3, r1
 800a6fa:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a6fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a700:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a704:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800a708:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a70c:	2300      	movs	r3, #0
 800a70e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a712:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800a716:	460b      	mov	r3, r1
 800a718:	4313      	orrs	r3, r2
 800a71a:	d03e      	beq.n	800a79a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800a71c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a720:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a724:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a728:	d022      	beq.n	800a770 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800a72a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a72e:	d81b      	bhi.n	800a768 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800a730:	2b00      	cmp	r3, #0
 800a732:	d003      	beq.n	800a73c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800a734:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a738:	d00b      	beq.n	800a752 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800a73a:	e015      	b.n	800a768 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a73c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a740:	3308      	adds	r3, #8
 800a742:	2100      	movs	r1, #0
 800a744:	4618      	mov	r0, r3
 800a746:	f001 fc0d 	bl	800bf64 <RCCEx_PLL2_Config>
 800a74a:	4603      	mov	r3, r0
 800a74c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a750:	e00f      	b.n	800a772 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a752:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a756:	3328      	adds	r3, #40	; 0x28
 800a758:	2102      	movs	r1, #2
 800a75a:	4618      	mov	r0, r3
 800a75c:	f001 fcb4 	bl	800c0c8 <RCCEx_PLL3_Config>
 800a760:	4603      	mov	r3, r0
 800a762:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a766:	e004      	b.n	800a772 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a768:	2301      	movs	r3, #1
 800a76a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a76e:	e000      	b.n	800a772 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800a770:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a772:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a776:	2b00      	cmp	r3, #0
 800a778:	d10b      	bne.n	800a792 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a77a:	4b4b      	ldr	r3, [pc, #300]	; (800a8a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a77c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a77e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800a782:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a786:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a78a:	4a47      	ldr	r2, [pc, #284]	; (800a8a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a78c:	430b      	orrs	r3, r1
 800a78e:	6593      	str	r3, [r2, #88]	; 0x58
 800a790:	e003      	b.n	800a79a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a792:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a796:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a79a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a79e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7a2:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800a7a6:	67bb      	str	r3, [r7, #120]	; 0x78
 800a7a8:	2300      	movs	r3, #0
 800a7aa:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a7ac:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800a7b0:	460b      	mov	r3, r1
 800a7b2:	4313      	orrs	r3, r2
 800a7b4:	d03b      	beq.n	800a82e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800a7b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a7ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7be:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a7c2:	d01f      	beq.n	800a804 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800a7c4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a7c8:	d818      	bhi.n	800a7fc <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800a7ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a7ce:	d003      	beq.n	800a7d8 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800a7d0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a7d4:	d007      	beq.n	800a7e6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800a7d6:	e011      	b.n	800a7fc <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a7d8:	4b33      	ldr	r3, [pc, #204]	; (800a8a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a7da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7dc:	4a32      	ldr	r2, [pc, #200]	; (800a8a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a7de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a7e2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800a7e4:	e00f      	b.n	800a806 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a7e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a7ea:	3328      	adds	r3, #40	; 0x28
 800a7ec:	2101      	movs	r1, #1
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	f001 fc6a 	bl	800c0c8 <RCCEx_PLL3_Config>
 800a7f4:	4603      	mov	r3, r0
 800a7f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800a7fa:	e004      	b.n	800a806 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a7fc:	2301      	movs	r3, #1
 800a7fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a802:	e000      	b.n	800a806 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800a804:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a806:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d10b      	bne.n	800a826 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a80e:	4b26      	ldr	r3, [pc, #152]	; (800a8a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a810:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a812:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800a816:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a81a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a81e:	4a22      	ldr	r2, [pc, #136]	; (800a8a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a820:	430b      	orrs	r3, r1
 800a822:	6553      	str	r3, [r2, #84]	; 0x54
 800a824:	e003      	b.n	800a82e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a826:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a82a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a82e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a832:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a836:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800a83a:	673b      	str	r3, [r7, #112]	; 0x70
 800a83c:	2300      	movs	r3, #0
 800a83e:	677b      	str	r3, [r7, #116]	; 0x74
 800a840:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800a844:	460b      	mov	r3, r1
 800a846:	4313      	orrs	r3, r2
 800a848:	d034      	beq.n	800a8b4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800a84a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a84e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a850:	2b00      	cmp	r3, #0
 800a852:	d003      	beq.n	800a85c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800a854:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a858:	d007      	beq.n	800a86a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800a85a:	e011      	b.n	800a880 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a85c:	4b12      	ldr	r3, [pc, #72]	; (800a8a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a85e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a860:	4a11      	ldr	r2, [pc, #68]	; (800a8a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a862:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a866:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a868:	e00e      	b.n	800a888 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a86a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a86e:	3308      	adds	r3, #8
 800a870:	2102      	movs	r1, #2
 800a872:	4618      	mov	r0, r3
 800a874:	f001 fb76 	bl	800bf64 <RCCEx_PLL2_Config>
 800a878:	4603      	mov	r3, r0
 800a87a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a87e:	e003      	b.n	800a888 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800a880:	2301      	movs	r3, #1
 800a882:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a886:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a888:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d10d      	bne.n	800a8ac <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a890:	4b05      	ldr	r3, [pc, #20]	; (800a8a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a892:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a894:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a898:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a89c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a89e:	4a02      	ldr	r2, [pc, #8]	; (800a8a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a8a0:	430b      	orrs	r3, r1
 800a8a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a8a4:	e006      	b.n	800a8b4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800a8a6:	bf00      	nop
 800a8a8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a8ac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a8b0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a8b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a8b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8bc:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800a8c0:	66bb      	str	r3, [r7, #104]	; 0x68
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a8c6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800a8ca:	460b      	mov	r3, r1
 800a8cc:	4313      	orrs	r3, r2
 800a8ce:	d00c      	beq.n	800a8ea <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a8d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a8d4:	3328      	adds	r3, #40	; 0x28
 800a8d6:	2102      	movs	r1, #2
 800a8d8:	4618      	mov	r0, r3
 800a8da:	f001 fbf5 	bl	800c0c8 <RCCEx_PLL3_Config>
 800a8de:	4603      	mov	r3, r0
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d002      	beq.n	800a8ea <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800a8e4:	2301      	movs	r3, #1
 800a8e6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a8ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a8ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8f2:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800a8f6:	663b      	str	r3, [r7, #96]	; 0x60
 800a8f8:	2300      	movs	r3, #0
 800a8fa:	667b      	str	r3, [r7, #100]	; 0x64
 800a8fc:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800a900:	460b      	mov	r3, r1
 800a902:	4313      	orrs	r3, r2
 800a904:	d038      	beq.n	800a978 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800a906:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a90a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a90e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a912:	d018      	beq.n	800a946 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800a914:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a918:	d811      	bhi.n	800a93e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800a91a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a91e:	d014      	beq.n	800a94a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800a920:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a924:	d80b      	bhi.n	800a93e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800a926:	2b00      	cmp	r3, #0
 800a928:	d011      	beq.n	800a94e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800a92a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a92e:	d106      	bne.n	800a93e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a930:	4bc3      	ldr	r3, [pc, #780]	; (800ac40 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a934:	4ac2      	ldr	r2, [pc, #776]	; (800ac40 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a936:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a93a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800a93c:	e008      	b.n	800a950 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a93e:	2301      	movs	r3, #1
 800a940:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a944:	e004      	b.n	800a950 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a946:	bf00      	nop
 800a948:	e002      	b.n	800a950 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a94a:	bf00      	nop
 800a94c:	e000      	b.n	800a950 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a94e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a950:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a954:	2b00      	cmp	r3, #0
 800a956:	d10b      	bne.n	800a970 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a958:	4bb9      	ldr	r3, [pc, #740]	; (800ac40 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a95a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a95c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a960:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a964:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a968:	4ab5      	ldr	r2, [pc, #724]	; (800ac40 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a96a:	430b      	orrs	r3, r1
 800a96c:	6553      	str	r3, [r2, #84]	; 0x54
 800a96e:	e003      	b.n	800a978 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a970:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a974:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a978:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a97c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a980:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800a984:	65bb      	str	r3, [r7, #88]	; 0x58
 800a986:	2300      	movs	r3, #0
 800a988:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a98a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800a98e:	460b      	mov	r3, r1
 800a990:	4313      	orrs	r3, r2
 800a992:	d009      	beq.n	800a9a8 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a994:	4baa      	ldr	r3, [pc, #680]	; (800ac40 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a996:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a998:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a99c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a9a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a9a2:	4aa7      	ldr	r2, [pc, #668]	; (800ac40 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a9a4:	430b      	orrs	r3, r1
 800a9a6:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800a9a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a9ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9b0:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800a9b4:	653b      	str	r3, [r7, #80]	; 0x50
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	657b      	str	r3, [r7, #84]	; 0x54
 800a9ba:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800a9be:	460b      	mov	r3, r1
 800a9c0:	4313      	orrs	r3, r2
 800a9c2:	d00a      	beq.n	800a9da <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800a9c4:	4b9e      	ldr	r3, [pc, #632]	; (800ac40 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a9c6:	691b      	ldr	r3, [r3, #16]
 800a9c8:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800a9cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a9d0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800a9d4:	4a9a      	ldr	r2, [pc, #616]	; (800ac40 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a9d6:	430b      	orrs	r3, r1
 800a9d8:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a9da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a9de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9e2:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800a9e6:	64bb      	str	r3, [r7, #72]	; 0x48
 800a9e8:	2300      	movs	r3, #0
 800a9ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a9ec:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800a9f0:	460b      	mov	r3, r1
 800a9f2:	4313      	orrs	r3, r2
 800a9f4:	d009      	beq.n	800aa0a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a9f6:	4b92      	ldr	r3, [pc, #584]	; (800ac40 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a9f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a9fa:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800a9fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aa04:	4a8e      	ldr	r2, [pc, #568]	; (800ac40 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800aa06:	430b      	orrs	r3, r1
 800aa08:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800aa0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa12:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800aa16:	643b      	str	r3, [r7, #64]	; 0x40
 800aa18:	2300      	movs	r3, #0
 800aa1a:	647b      	str	r3, [r7, #68]	; 0x44
 800aa1c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800aa20:	460b      	mov	r3, r1
 800aa22:	4313      	orrs	r3, r2
 800aa24:	d00e      	beq.n	800aa44 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800aa26:	4b86      	ldr	r3, [pc, #536]	; (800ac40 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800aa28:	691b      	ldr	r3, [r3, #16]
 800aa2a:	4a85      	ldr	r2, [pc, #532]	; (800ac40 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800aa2c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800aa30:	6113      	str	r3, [r2, #16]
 800aa32:	4b83      	ldr	r3, [pc, #524]	; (800ac40 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800aa34:	6919      	ldr	r1, [r3, #16]
 800aa36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa3a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800aa3e:	4a80      	ldr	r2, [pc, #512]	; (800ac40 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800aa40:	430b      	orrs	r3, r1
 800aa42:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800aa44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa4c:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800aa50:	63bb      	str	r3, [r7, #56]	; 0x38
 800aa52:	2300      	movs	r3, #0
 800aa54:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aa56:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800aa5a:	460b      	mov	r3, r1
 800aa5c:	4313      	orrs	r3, r2
 800aa5e:	d009      	beq.n	800aa74 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800aa60:	4b77      	ldr	r3, [pc, #476]	; (800ac40 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800aa62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa64:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800aa68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa6e:	4a74      	ldr	r2, [pc, #464]	; (800ac40 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800aa70:	430b      	orrs	r3, r1
 800aa72:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800aa74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa7c:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800aa80:	633b      	str	r3, [r7, #48]	; 0x30
 800aa82:	2300      	movs	r3, #0
 800aa84:	637b      	str	r3, [r7, #52]	; 0x34
 800aa86:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800aa8a:	460b      	mov	r3, r1
 800aa8c:	4313      	orrs	r3, r2
 800aa8e:	d00a      	beq.n	800aaa6 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800aa90:	4b6b      	ldr	r3, [pc, #428]	; (800ac40 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800aa92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa94:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800aa98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aaa0:	4a67      	ldr	r2, [pc, #412]	; (800ac40 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800aaa2:	430b      	orrs	r3, r1
 800aaa4:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800aaa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aaaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaae:	2100      	movs	r1, #0
 800aab0:	62b9      	str	r1, [r7, #40]	; 0x28
 800aab2:	f003 0301 	and.w	r3, r3, #1
 800aab6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800aab8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800aabc:	460b      	mov	r3, r1
 800aabe:	4313      	orrs	r3, r2
 800aac0:	d011      	beq.n	800aae6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800aac2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aac6:	3308      	adds	r3, #8
 800aac8:	2100      	movs	r1, #0
 800aaca:	4618      	mov	r0, r3
 800aacc:	f001 fa4a 	bl	800bf64 <RCCEx_PLL2_Config>
 800aad0:	4603      	mov	r3, r0
 800aad2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800aad6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d003      	beq.n	800aae6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aade:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aae2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800aae6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aaea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaee:	2100      	movs	r1, #0
 800aaf0:	6239      	str	r1, [r7, #32]
 800aaf2:	f003 0302 	and.w	r3, r3, #2
 800aaf6:	627b      	str	r3, [r7, #36]	; 0x24
 800aaf8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800aafc:	460b      	mov	r3, r1
 800aafe:	4313      	orrs	r3, r2
 800ab00:	d011      	beq.n	800ab26 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ab02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab06:	3308      	adds	r3, #8
 800ab08:	2101      	movs	r1, #1
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	f001 fa2a 	bl	800bf64 <RCCEx_PLL2_Config>
 800ab10:	4603      	mov	r3, r0
 800ab12:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800ab16:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d003      	beq.n	800ab26 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab1e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ab22:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800ab26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab2e:	2100      	movs	r1, #0
 800ab30:	61b9      	str	r1, [r7, #24]
 800ab32:	f003 0304 	and.w	r3, r3, #4
 800ab36:	61fb      	str	r3, [r7, #28]
 800ab38:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800ab3c:	460b      	mov	r3, r1
 800ab3e:	4313      	orrs	r3, r2
 800ab40:	d011      	beq.n	800ab66 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ab42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab46:	3308      	adds	r3, #8
 800ab48:	2102      	movs	r1, #2
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	f001 fa0a 	bl	800bf64 <RCCEx_PLL2_Config>
 800ab50:	4603      	mov	r3, r0
 800ab52:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800ab56:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d003      	beq.n	800ab66 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab5e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ab62:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800ab66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab6e:	2100      	movs	r1, #0
 800ab70:	6139      	str	r1, [r7, #16]
 800ab72:	f003 0308 	and.w	r3, r3, #8
 800ab76:	617b      	str	r3, [r7, #20]
 800ab78:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800ab7c:	460b      	mov	r3, r1
 800ab7e:	4313      	orrs	r3, r2
 800ab80:	d011      	beq.n	800aba6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ab82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab86:	3328      	adds	r3, #40	; 0x28
 800ab88:	2100      	movs	r1, #0
 800ab8a:	4618      	mov	r0, r3
 800ab8c:	f001 fa9c 	bl	800c0c8 <RCCEx_PLL3_Config>
 800ab90:	4603      	mov	r3, r0
 800ab92:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800ab96:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d003      	beq.n	800aba6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab9e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aba2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800aba6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800abaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abae:	2100      	movs	r1, #0
 800abb0:	60b9      	str	r1, [r7, #8]
 800abb2:	f003 0310 	and.w	r3, r3, #16
 800abb6:	60fb      	str	r3, [r7, #12]
 800abb8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800abbc:	460b      	mov	r3, r1
 800abbe:	4313      	orrs	r3, r2
 800abc0:	d011      	beq.n	800abe6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800abc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800abc6:	3328      	adds	r3, #40	; 0x28
 800abc8:	2101      	movs	r1, #1
 800abca:	4618      	mov	r0, r3
 800abcc:	f001 fa7c 	bl	800c0c8 <RCCEx_PLL3_Config>
 800abd0:	4603      	mov	r3, r0
 800abd2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800abd6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d003      	beq.n	800abe6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800abde:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800abe2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800abe6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800abea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abee:	2100      	movs	r1, #0
 800abf0:	6039      	str	r1, [r7, #0]
 800abf2:	f003 0320 	and.w	r3, r3, #32
 800abf6:	607b      	str	r3, [r7, #4]
 800abf8:	e9d7 1200 	ldrd	r1, r2, [r7]
 800abfc:	460b      	mov	r3, r1
 800abfe:	4313      	orrs	r3, r2
 800ac00:	d011      	beq.n	800ac26 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ac02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac06:	3328      	adds	r3, #40	; 0x28
 800ac08:	2102      	movs	r1, #2
 800ac0a:	4618      	mov	r0, r3
 800ac0c:	f001 fa5c 	bl	800c0c8 <RCCEx_PLL3_Config>
 800ac10:	4603      	mov	r3, r0
 800ac12:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800ac16:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d003      	beq.n	800ac26 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac1e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ac22:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800ac26:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d101      	bne.n	800ac32 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800ac2e:	2300      	movs	r3, #0
 800ac30:	e000      	b.n	800ac34 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800ac32:	2301      	movs	r3, #1
}
 800ac34:	4618      	mov	r0, r3
 800ac36:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800ac3a:	46bd      	mov	sp, r7
 800ac3c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ac40:	58024400 	.word	0x58024400

0800ac44 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800ac44:	b580      	push	{r7, lr}
 800ac46:	b090      	sub	sp, #64	; 0x40
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800ac4e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ac52:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800ac56:	430b      	orrs	r3, r1
 800ac58:	f040 8094 	bne.w	800ad84 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800ac5c:	4b9e      	ldr	r3, [pc, #632]	; (800aed8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ac5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac60:	f003 0307 	and.w	r3, r3, #7
 800ac64:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800ac66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac68:	2b04      	cmp	r3, #4
 800ac6a:	f200 8087 	bhi.w	800ad7c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800ac6e:	a201      	add	r2, pc, #4	; (adr r2, 800ac74 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800ac70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac74:	0800ac89 	.word	0x0800ac89
 800ac78:	0800acb1 	.word	0x0800acb1
 800ac7c:	0800acd9 	.word	0x0800acd9
 800ac80:	0800ad75 	.word	0x0800ad75
 800ac84:	0800ad01 	.word	0x0800ad01
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ac88:	4b93      	ldr	r3, [pc, #588]	; (800aed8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ac90:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ac94:	d108      	bne.n	800aca8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ac96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ac9a:	4618      	mov	r0, r3
 800ac9c:	f001 f810 	bl	800bcc0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800aca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aca2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aca4:	f000 bd45 	b.w	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aca8:	2300      	movs	r3, #0
 800acaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800acac:	f000 bd41 	b.w	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800acb0:	4b89      	ldr	r3, [pc, #548]	; (800aed8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800acb8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800acbc:	d108      	bne.n	800acd0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800acbe:	f107 0318 	add.w	r3, r7, #24
 800acc2:	4618      	mov	r0, r3
 800acc4:	f000 fd54 	bl	800b770 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800acc8:	69bb      	ldr	r3, [r7, #24]
 800acca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800accc:	f000 bd31 	b.w	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800acd0:	2300      	movs	r3, #0
 800acd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800acd4:	f000 bd2d 	b.w	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800acd8:	4b7f      	ldr	r3, [pc, #508]	; (800aed8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ace0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ace4:	d108      	bne.n	800acf8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ace6:	f107 030c 	add.w	r3, r7, #12
 800acea:	4618      	mov	r0, r3
 800acec:	f000 fe94 	bl	800ba18 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800acf4:	f000 bd1d 	b.w	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800acf8:	2300      	movs	r3, #0
 800acfa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800acfc:	f000 bd19 	b.w	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ad00:	4b75      	ldr	r3, [pc, #468]	; (800aed8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ad02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ad04:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ad08:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ad0a:	4b73      	ldr	r3, [pc, #460]	; (800aed8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	f003 0304 	and.w	r3, r3, #4
 800ad12:	2b04      	cmp	r3, #4
 800ad14:	d10c      	bne.n	800ad30 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800ad16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d109      	bne.n	800ad30 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ad1c:	4b6e      	ldr	r3, [pc, #440]	; (800aed8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	08db      	lsrs	r3, r3, #3
 800ad22:	f003 0303 	and.w	r3, r3, #3
 800ad26:	4a6d      	ldr	r2, [pc, #436]	; (800aedc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800ad28:	fa22 f303 	lsr.w	r3, r2, r3
 800ad2c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ad2e:	e01f      	b.n	800ad70 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ad30:	4b69      	ldr	r3, [pc, #420]	; (800aed8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ad3c:	d106      	bne.n	800ad4c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800ad3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad40:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ad44:	d102      	bne.n	800ad4c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ad46:	4b66      	ldr	r3, [pc, #408]	; (800aee0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800ad48:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ad4a:	e011      	b.n	800ad70 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ad4c:	4b62      	ldr	r3, [pc, #392]	; (800aed8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ad54:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ad58:	d106      	bne.n	800ad68 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800ad5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ad60:	d102      	bne.n	800ad68 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ad62:	4b60      	ldr	r3, [pc, #384]	; (800aee4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800ad64:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ad66:	e003      	b.n	800ad70 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ad68:	2300      	movs	r3, #0
 800ad6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800ad6c:	f000 bce1 	b.w	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ad70:	f000 bcdf 	b.w	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ad74:	4b5c      	ldr	r3, [pc, #368]	; (800aee8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800ad76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ad78:	f000 bcdb 	b.w	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800ad7c:	2300      	movs	r3, #0
 800ad7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ad80:	f000 bcd7 	b.w	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800ad84:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ad88:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800ad8c:	430b      	orrs	r3, r1
 800ad8e:	f040 80ad 	bne.w	800aeec <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800ad92:	4b51      	ldr	r3, [pc, #324]	; (800aed8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ad94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad96:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800ad9a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800ad9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ada2:	d056      	beq.n	800ae52 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800ada4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ada6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800adaa:	f200 8090 	bhi.w	800aece <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800adae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adb0:	2bc0      	cmp	r3, #192	; 0xc0
 800adb2:	f000 8088 	beq.w	800aec6 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800adb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adb8:	2bc0      	cmp	r3, #192	; 0xc0
 800adba:	f200 8088 	bhi.w	800aece <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800adbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adc0:	2b80      	cmp	r3, #128	; 0x80
 800adc2:	d032      	beq.n	800ae2a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800adc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adc6:	2b80      	cmp	r3, #128	; 0x80
 800adc8:	f200 8081 	bhi.w	800aece <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800adcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adce:	2b00      	cmp	r3, #0
 800add0:	d003      	beq.n	800adda <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800add2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800add4:	2b40      	cmp	r3, #64	; 0x40
 800add6:	d014      	beq.n	800ae02 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800add8:	e079      	b.n	800aece <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800adda:	4b3f      	ldr	r3, [pc, #252]	; (800aed8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ade2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ade6:	d108      	bne.n	800adfa <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ade8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800adec:	4618      	mov	r0, r3
 800adee:	f000 ff67 	bl	800bcc0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800adf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adf4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800adf6:	f000 bc9c 	b.w	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800adfa:	2300      	movs	r3, #0
 800adfc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800adfe:	f000 bc98 	b.w	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ae02:	4b35      	ldr	r3, [pc, #212]	; (800aed8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ae0a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ae0e:	d108      	bne.n	800ae22 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ae10:	f107 0318 	add.w	r3, r7, #24
 800ae14:	4618      	mov	r0, r3
 800ae16:	f000 fcab 	bl	800b770 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ae1a:	69bb      	ldr	r3, [r7, #24]
 800ae1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae1e:	f000 bc88 	b.w	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ae22:	2300      	movs	r3, #0
 800ae24:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae26:	f000 bc84 	b.w	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ae2a:	4b2b      	ldr	r3, [pc, #172]	; (800aed8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ae32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ae36:	d108      	bne.n	800ae4a <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ae38:	f107 030c 	add.w	r3, r7, #12
 800ae3c:	4618      	mov	r0, r3
 800ae3e:	f000 fdeb 	bl	800ba18 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae46:	f000 bc74 	b.w	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ae4a:	2300      	movs	r3, #0
 800ae4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae4e:	f000 bc70 	b.w	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ae52:	4b21      	ldr	r3, [pc, #132]	; (800aed8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ae54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae56:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ae5a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ae5c:	4b1e      	ldr	r3, [pc, #120]	; (800aed8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	f003 0304 	and.w	r3, r3, #4
 800ae64:	2b04      	cmp	r3, #4
 800ae66:	d10c      	bne.n	800ae82 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800ae68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d109      	bne.n	800ae82 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ae6e:	4b1a      	ldr	r3, [pc, #104]	; (800aed8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	08db      	lsrs	r3, r3, #3
 800ae74:	f003 0303 	and.w	r3, r3, #3
 800ae78:	4a18      	ldr	r2, [pc, #96]	; (800aedc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800ae7a:	fa22 f303 	lsr.w	r3, r2, r3
 800ae7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ae80:	e01f      	b.n	800aec2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ae82:	4b15      	ldr	r3, [pc, #84]	; (800aed8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ae8e:	d106      	bne.n	800ae9e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800ae90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae92:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ae96:	d102      	bne.n	800ae9e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ae98:	4b11      	ldr	r3, [pc, #68]	; (800aee0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800ae9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ae9c:	e011      	b.n	800aec2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ae9e:	4b0e      	ldr	r3, [pc, #56]	; (800aed8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aea6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aeaa:	d106      	bne.n	800aeba <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800aeac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aeae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aeb2:	d102      	bne.n	800aeba <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800aeb4:	4b0b      	ldr	r3, [pc, #44]	; (800aee4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800aeb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aeb8:	e003      	b.n	800aec2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800aeba:	2300      	movs	r3, #0
 800aebc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800aebe:	f000 bc38 	b.w	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800aec2:	f000 bc36 	b.w	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800aec6:	4b08      	ldr	r3, [pc, #32]	; (800aee8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800aec8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aeca:	f000 bc32 	b.w	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800aece:	2300      	movs	r3, #0
 800aed0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aed2:	f000 bc2e 	b.w	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800aed6:	bf00      	nop
 800aed8:	58024400 	.word	0x58024400
 800aedc:	03d09000 	.word	0x03d09000
 800aee0:	003d0900 	.word	0x003d0900
 800aee4:	007a1200 	.word	0x007a1200
 800aee8:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800aeec:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aef0:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800aef4:	430b      	orrs	r3, r1
 800aef6:	f040 809c 	bne.w	800b032 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800aefa:	4b9e      	ldr	r3, [pc, #632]	; (800b174 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800aefc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aefe:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800af02:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800af04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af06:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800af0a:	d054      	beq.n	800afb6 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800af0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af0e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800af12:	f200 808b 	bhi.w	800b02c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800af16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af18:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800af1c:	f000 8083 	beq.w	800b026 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800af20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af22:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800af26:	f200 8081 	bhi.w	800b02c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800af2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af2c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800af30:	d02f      	beq.n	800af92 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800af32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af34:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800af38:	d878      	bhi.n	800b02c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800af3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d004      	beq.n	800af4a <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800af40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af42:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800af46:	d012      	beq.n	800af6e <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800af48:	e070      	b.n	800b02c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800af4a:	4b8a      	ldr	r3, [pc, #552]	; (800b174 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800af52:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800af56:	d107      	bne.n	800af68 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800af58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800af5c:	4618      	mov	r0, r3
 800af5e:	f000 feaf 	bl	800bcc0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800af62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af64:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800af66:	e3e4      	b.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800af68:	2300      	movs	r3, #0
 800af6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800af6c:	e3e1      	b.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800af6e:	4b81      	ldr	r3, [pc, #516]	; (800b174 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800af76:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800af7a:	d107      	bne.n	800af8c <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800af7c:	f107 0318 	add.w	r3, r7, #24
 800af80:	4618      	mov	r0, r3
 800af82:	f000 fbf5 	bl	800b770 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800af86:	69bb      	ldr	r3, [r7, #24]
 800af88:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800af8a:	e3d2      	b.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800af8c:	2300      	movs	r3, #0
 800af8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800af90:	e3cf      	b.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800af92:	4b78      	ldr	r3, [pc, #480]	; (800b174 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800af9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800af9e:	d107      	bne.n	800afb0 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800afa0:	f107 030c 	add.w	r3, r7, #12
 800afa4:	4618      	mov	r0, r3
 800afa6:	f000 fd37 	bl	800ba18 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800afae:	e3c0      	b.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800afb0:	2300      	movs	r3, #0
 800afb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800afb4:	e3bd      	b.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800afb6:	4b6f      	ldr	r3, [pc, #444]	; (800b174 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800afb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800afba:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800afbe:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800afc0:	4b6c      	ldr	r3, [pc, #432]	; (800b174 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	f003 0304 	and.w	r3, r3, #4
 800afc8:	2b04      	cmp	r3, #4
 800afca:	d10c      	bne.n	800afe6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800afcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d109      	bne.n	800afe6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800afd2:	4b68      	ldr	r3, [pc, #416]	; (800b174 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	08db      	lsrs	r3, r3, #3
 800afd8:	f003 0303 	and.w	r3, r3, #3
 800afdc:	4a66      	ldr	r2, [pc, #408]	; (800b178 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800afde:	fa22 f303 	lsr.w	r3, r2, r3
 800afe2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800afe4:	e01e      	b.n	800b024 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800afe6:	4b63      	ldr	r3, [pc, #396]	; (800b174 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800afee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aff2:	d106      	bne.n	800b002 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800aff4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aff6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800affa:	d102      	bne.n	800b002 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800affc:	4b5f      	ldr	r3, [pc, #380]	; (800b17c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800affe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b000:	e010      	b.n	800b024 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b002:	4b5c      	ldr	r3, [pc, #368]	; (800b174 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b00a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b00e:	d106      	bne.n	800b01e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800b010:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b012:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b016:	d102      	bne.n	800b01e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b018:	4b59      	ldr	r3, [pc, #356]	; (800b180 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800b01a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b01c:	e002      	b.n	800b024 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b01e:	2300      	movs	r3, #0
 800b020:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b022:	e386      	b.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b024:	e385      	b.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b026:	4b57      	ldr	r3, [pc, #348]	; (800b184 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800b028:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b02a:	e382      	b.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800b02c:	2300      	movs	r3, #0
 800b02e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b030:	e37f      	b.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800b032:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b036:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800b03a:	430b      	orrs	r3, r1
 800b03c:	f040 80a7 	bne.w	800b18e <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800b040:	4b4c      	ldr	r3, [pc, #304]	; (800b174 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b042:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b044:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800b048:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800b04a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b04c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b050:	d055      	beq.n	800b0fe <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800b052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b054:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b058:	f200 8096 	bhi.w	800b188 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800b05c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b05e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b062:	f000 8084 	beq.w	800b16e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800b066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b068:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b06c:	f200 808c 	bhi.w	800b188 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800b070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b072:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b076:	d030      	beq.n	800b0da <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800b078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b07a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b07e:	f200 8083 	bhi.w	800b188 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800b082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b084:	2b00      	cmp	r3, #0
 800b086:	d004      	beq.n	800b092 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800b088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b08a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b08e:	d012      	beq.n	800b0b6 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800b090:	e07a      	b.n	800b188 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b092:	4b38      	ldr	r3, [pc, #224]	; (800b174 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b09a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b09e:	d107      	bne.n	800b0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b0a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b0a4:	4618      	mov	r0, r3
 800b0a6:	f000 fe0b 	bl	800bcc0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b0aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b0ae:	e340      	b.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b0b0:	2300      	movs	r3, #0
 800b0b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b0b4:	e33d      	b.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b0b6:	4b2f      	ldr	r3, [pc, #188]	; (800b174 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b0be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b0c2:	d107      	bne.n	800b0d4 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b0c4:	f107 0318 	add.w	r3, r7, #24
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	f000 fb51 	bl	800b770 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b0ce:	69bb      	ldr	r3, [r7, #24]
 800b0d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b0d2:	e32e      	b.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b0d4:	2300      	movs	r3, #0
 800b0d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b0d8:	e32b      	b.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b0da:	4b26      	ldr	r3, [pc, #152]	; (800b174 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b0e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b0e6:	d107      	bne.n	800b0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b0e8:	f107 030c 	add.w	r3, r7, #12
 800b0ec:	4618      	mov	r0, r3
 800b0ee:	f000 fc93 	bl	800ba18 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b0f6:	e31c      	b.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b0f8:	2300      	movs	r3, #0
 800b0fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b0fc:	e319      	b.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b0fe:	4b1d      	ldr	r3, [pc, #116]	; (800b174 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b100:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b102:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b106:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b108:	4b1a      	ldr	r3, [pc, #104]	; (800b174 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	f003 0304 	and.w	r3, r3, #4
 800b110:	2b04      	cmp	r3, #4
 800b112:	d10c      	bne.n	800b12e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800b114:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b116:	2b00      	cmp	r3, #0
 800b118:	d109      	bne.n	800b12e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b11a:	4b16      	ldr	r3, [pc, #88]	; (800b174 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	08db      	lsrs	r3, r3, #3
 800b120:	f003 0303 	and.w	r3, r3, #3
 800b124:	4a14      	ldr	r2, [pc, #80]	; (800b178 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800b126:	fa22 f303 	lsr.w	r3, r2, r3
 800b12a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b12c:	e01e      	b.n	800b16c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b12e:	4b11      	ldr	r3, [pc, #68]	; (800b174 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b136:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b13a:	d106      	bne.n	800b14a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800b13c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b13e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b142:	d102      	bne.n	800b14a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b144:	4b0d      	ldr	r3, [pc, #52]	; (800b17c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800b146:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b148:	e010      	b.n	800b16c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b14a:	4b0a      	ldr	r3, [pc, #40]	; (800b174 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b152:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b156:	d106      	bne.n	800b166 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800b158:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b15a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b15e:	d102      	bne.n	800b166 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b160:	4b07      	ldr	r3, [pc, #28]	; (800b180 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800b162:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b164:	e002      	b.n	800b16c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b166:	2300      	movs	r3, #0
 800b168:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b16a:	e2e2      	b.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b16c:	e2e1      	b.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b16e:	4b05      	ldr	r3, [pc, #20]	; (800b184 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800b170:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b172:	e2de      	b.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b174:	58024400 	.word	0x58024400
 800b178:	03d09000 	.word	0x03d09000
 800b17c:	003d0900 	.word	0x003d0900
 800b180:	007a1200 	.word	0x007a1200
 800b184:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800b188:	2300      	movs	r3, #0
 800b18a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b18c:	e2d1      	b.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800b18e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b192:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800b196:	430b      	orrs	r3, r1
 800b198:	f040 809c 	bne.w	800b2d4 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800b19c:	4b93      	ldr	r3, [pc, #588]	; (800b3ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b19e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b1a0:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800b1a4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b1a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b1ac:	d054      	beq.n	800b258 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800b1ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b1b4:	f200 808b 	bhi.w	800b2ce <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800b1b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1ba:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b1be:	f000 8083 	beq.w	800b2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800b1c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1c4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b1c8:	f200 8081 	bhi.w	800b2ce <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800b1cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b1d2:	d02f      	beq.n	800b234 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800b1d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b1da:	d878      	bhi.n	800b2ce <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800b1dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d004      	beq.n	800b1ec <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800b1e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b1e8:	d012      	beq.n	800b210 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800b1ea:	e070      	b.n	800b2ce <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b1ec:	4b7f      	ldr	r3, [pc, #508]	; (800b3ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b1f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b1f8:	d107      	bne.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b1fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b1fe:	4618      	mov	r0, r3
 800b200:	f000 fd5e 	bl	800bcc0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b206:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b208:	e293      	b.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b20a:	2300      	movs	r3, #0
 800b20c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b20e:	e290      	b.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b210:	4b76      	ldr	r3, [pc, #472]	; (800b3ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b218:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b21c:	d107      	bne.n	800b22e <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b21e:	f107 0318 	add.w	r3, r7, #24
 800b222:	4618      	mov	r0, r3
 800b224:	f000 faa4 	bl	800b770 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b228:	69bb      	ldr	r3, [r7, #24]
 800b22a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b22c:	e281      	b.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b22e:	2300      	movs	r3, #0
 800b230:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b232:	e27e      	b.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b234:	4b6d      	ldr	r3, [pc, #436]	; (800b3ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b23c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b240:	d107      	bne.n	800b252 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b242:	f107 030c 	add.w	r3, r7, #12
 800b246:	4618      	mov	r0, r3
 800b248:	f000 fbe6 	bl	800ba18 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b250:	e26f      	b.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b252:	2300      	movs	r3, #0
 800b254:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b256:	e26c      	b.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b258:	4b64      	ldr	r3, [pc, #400]	; (800b3ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b25a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b25c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b260:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b262:	4b62      	ldr	r3, [pc, #392]	; (800b3ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	f003 0304 	and.w	r3, r3, #4
 800b26a:	2b04      	cmp	r3, #4
 800b26c:	d10c      	bne.n	800b288 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800b26e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b270:	2b00      	cmp	r3, #0
 800b272:	d109      	bne.n	800b288 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b274:	4b5d      	ldr	r3, [pc, #372]	; (800b3ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	08db      	lsrs	r3, r3, #3
 800b27a:	f003 0303 	and.w	r3, r3, #3
 800b27e:	4a5c      	ldr	r2, [pc, #368]	; (800b3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800b280:	fa22 f303 	lsr.w	r3, r2, r3
 800b284:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b286:	e01e      	b.n	800b2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b288:	4b58      	ldr	r3, [pc, #352]	; (800b3ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b290:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b294:	d106      	bne.n	800b2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800b296:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b298:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b29c:	d102      	bne.n	800b2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b29e:	4b55      	ldr	r3, [pc, #340]	; (800b3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800b2a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b2a2:	e010      	b.n	800b2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b2a4:	4b51      	ldr	r3, [pc, #324]	; (800b3ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b2ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b2b0:	d106      	bne.n	800b2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800b2b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b2b8:	d102      	bne.n	800b2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b2ba:	4b4f      	ldr	r3, [pc, #316]	; (800b3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800b2bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b2be:	e002      	b.n	800b2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b2c0:	2300      	movs	r3, #0
 800b2c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b2c4:	e235      	b.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b2c6:	e234      	b.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b2c8:	4b4c      	ldr	r3, [pc, #304]	; (800b3fc <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800b2ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b2cc:	e231      	b.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b2ce:	2300      	movs	r3, #0
 800b2d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b2d2:	e22e      	b.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800b2d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b2d8:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800b2dc:	430b      	orrs	r3, r1
 800b2de:	f040 808f 	bne.w	800b400 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800b2e2:	4b42      	ldr	r3, [pc, #264]	; (800b3ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b2e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b2e6:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800b2ea:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800b2ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2ee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b2f2:	d06b      	beq.n	800b3cc <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800b2f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2f6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b2fa:	d874      	bhi.n	800b3e6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b2fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2fe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b302:	d056      	beq.n	800b3b2 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800b304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b306:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b30a:	d86c      	bhi.n	800b3e6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b30c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b30e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b312:	d03b      	beq.n	800b38c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800b314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b316:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b31a:	d864      	bhi.n	800b3e6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b31c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b31e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b322:	d021      	beq.n	800b368 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800b324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b326:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b32a:	d85c      	bhi.n	800b3e6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b32c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d004      	beq.n	800b33c <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800b332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b334:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b338:	d004      	beq.n	800b344 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800b33a:	e054      	b.n	800b3e6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800b33c:	f7fe fa0a 	bl	8009754 <HAL_RCC_GetPCLK1Freq>
 800b340:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b342:	e1f6      	b.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b344:	4b29      	ldr	r3, [pc, #164]	; (800b3ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b34c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b350:	d107      	bne.n	800b362 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b352:	f107 0318 	add.w	r3, r7, #24
 800b356:	4618      	mov	r0, r3
 800b358:	f000 fa0a 	bl	800b770 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b35c:	69fb      	ldr	r3, [r7, #28]
 800b35e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b360:	e1e7      	b.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b362:	2300      	movs	r3, #0
 800b364:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b366:	e1e4      	b.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b368:	4b20      	ldr	r3, [pc, #128]	; (800b3ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b370:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b374:	d107      	bne.n	800b386 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b376:	f107 030c 	add.w	r3, r7, #12
 800b37a:	4618      	mov	r0, r3
 800b37c:	f000 fb4c 	bl	800ba18 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b380:	693b      	ldr	r3, [r7, #16]
 800b382:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b384:	e1d5      	b.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b386:	2300      	movs	r3, #0
 800b388:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b38a:	e1d2      	b.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b38c:	4b17      	ldr	r3, [pc, #92]	; (800b3ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	f003 0304 	and.w	r3, r3, #4
 800b394:	2b04      	cmp	r3, #4
 800b396:	d109      	bne.n	800b3ac <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b398:	4b14      	ldr	r3, [pc, #80]	; (800b3ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	08db      	lsrs	r3, r3, #3
 800b39e:	f003 0303 	and.w	r3, r3, #3
 800b3a2:	4a13      	ldr	r2, [pc, #76]	; (800b3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800b3a4:	fa22 f303 	lsr.w	r3, r2, r3
 800b3a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b3aa:	e1c2      	b.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b3ac:	2300      	movs	r3, #0
 800b3ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b3b0:	e1bf      	b.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b3b2:	4b0e      	ldr	r3, [pc, #56]	; (800b3ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b3ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b3be:	d102      	bne.n	800b3c6 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800b3c0:	4b0c      	ldr	r3, [pc, #48]	; (800b3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800b3c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b3c4:	e1b5      	b.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b3c6:	2300      	movs	r3, #0
 800b3c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b3ca:	e1b2      	b.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b3cc:	4b07      	ldr	r3, [pc, #28]	; (800b3ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b3d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b3d8:	d102      	bne.n	800b3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800b3da:	4b07      	ldr	r3, [pc, #28]	; (800b3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800b3dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b3de:	e1a8      	b.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b3e0:	2300      	movs	r3, #0
 800b3e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b3e4:	e1a5      	b.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b3ea:	e1a2      	b.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b3ec:	58024400 	.word	0x58024400
 800b3f0:	03d09000 	.word	0x03d09000
 800b3f4:	003d0900 	.word	0x003d0900
 800b3f8:	007a1200 	.word	0x007a1200
 800b3fc:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800b400:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b404:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800b408:	430b      	orrs	r3, r1
 800b40a:	d173      	bne.n	800b4f4 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800b40c:	4b9c      	ldr	r3, [pc, #624]	; (800b680 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b40e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b410:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b414:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b418:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b41c:	d02f      	beq.n	800b47e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800b41e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b420:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b424:	d863      	bhi.n	800b4ee <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800b426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d004      	beq.n	800b436 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800b42c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b42e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b432:	d012      	beq.n	800b45a <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800b434:	e05b      	b.n	800b4ee <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b436:	4b92      	ldr	r3, [pc, #584]	; (800b680 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b43e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b442:	d107      	bne.n	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b444:	f107 0318 	add.w	r3, r7, #24
 800b448:	4618      	mov	r0, r3
 800b44a:	f000 f991 	bl	800b770 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b44e:	69bb      	ldr	r3, [r7, #24]
 800b450:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b452:	e16e      	b.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b454:	2300      	movs	r3, #0
 800b456:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b458:	e16b      	b.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b45a:	4b89      	ldr	r3, [pc, #548]	; (800b680 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b462:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b466:	d107      	bne.n	800b478 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b468:	f107 030c 	add.w	r3, r7, #12
 800b46c:	4618      	mov	r0, r3
 800b46e:	f000 fad3 	bl	800ba18 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800b472:	697b      	ldr	r3, [r7, #20]
 800b474:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b476:	e15c      	b.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b478:	2300      	movs	r3, #0
 800b47a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b47c:	e159      	b.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b47e:	4b80      	ldr	r3, [pc, #512]	; (800b680 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b480:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b482:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b486:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b488:	4b7d      	ldr	r3, [pc, #500]	; (800b680 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	f003 0304 	and.w	r3, r3, #4
 800b490:	2b04      	cmp	r3, #4
 800b492:	d10c      	bne.n	800b4ae <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800b494:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b496:	2b00      	cmp	r3, #0
 800b498:	d109      	bne.n	800b4ae <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b49a:	4b79      	ldr	r3, [pc, #484]	; (800b680 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	08db      	lsrs	r3, r3, #3
 800b4a0:	f003 0303 	and.w	r3, r3, #3
 800b4a4:	4a77      	ldr	r2, [pc, #476]	; (800b684 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800b4a6:	fa22 f303 	lsr.w	r3, r2, r3
 800b4aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b4ac:	e01e      	b.n	800b4ec <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b4ae:	4b74      	ldr	r3, [pc, #464]	; (800b680 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b4b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b4ba:	d106      	bne.n	800b4ca <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800b4bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b4c2:	d102      	bne.n	800b4ca <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b4c4:	4b70      	ldr	r3, [pc, #448]	; (800b688 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800b4c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b4c8:	e010      	b.n	800b4ec <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b4ca:	4b6d      	ldr	r3, [pc, #436]	; (800b680 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b4d2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b4d6:	d106      	bne.n	800b4e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800b4d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b4de:	d102      	bne.n	800b4e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b4e0:	4b6a      	ldr	r3, [pc, #424]	; (800b68c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800b4e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b4e4:	e002      	b.n	800b4ec <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b4e6:	2300      	movs	r3, #0
 800b4e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b4ea:	e122      	b.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b4ec:	e121      	b.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800b4ee:	2300      	movs	r3, #0
 800b4f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b4f2:	e11e      	b.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800b4f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b4f8:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800b4fc:	430b      	orrs	r3, r1
 800b4fe:	d133      	bne.n	800b568 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800b500:	4b5f      	ldr	r3, [pc, #380]	; (800b680 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b502:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b504:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b508:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b50a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d004      	beq.n	800b51a <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800b510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b512:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b516:	d012      	beq.n	800b53e <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800b518:	e023      	b.n	800b562 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b51a:	4b59      	ldr	r3, [pc, #356]	; (800b680 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b522:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b526:	d107      	bne.n	800b538 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b528:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b52c:	4618      	mov	r0, r3
 800b52e:	f000 fbc7 	bl	800bcc0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b534:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b536:	e0fc      	b.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b538:	2300      	movs	r3, #0
 800b53a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b53c:	e0f9      	b.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b53e:	4b50      	ldr	r3, [pc, #320]	; (800b680 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b546:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b54a:	d107      	bne.n	800b55c <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b54c:	f107 0318 	add.w	r3, r7, #24
 800b550:	4618      	mov	r0, r3
 800b552:	f000 f90d 	bl	800b770 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800b556:	6a3b      	ldr	r3, [r7, #32]
 800b558:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b55a:	e0ea      	b.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b55c:	2300      	movs	r3, #0
 800b55e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b560:	e0e7      	b.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800b562:	2300      	movs	r3, #0
 800b564:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b566:	e0e4      	b.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800b568:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b56c:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800b570:	430b      	orrs	r3, r1
 800b572:	f040 808d 	bne.w	800b690 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800b576:	4b42      	ldr	r3, [pc, #264]	; (800b680 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b578:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b57a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800b57e:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b582:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b586:	d06b      	beq.n	800b660 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800b588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b58a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b58e:	d874      	bhi.n	800b67a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b592:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b596:	d056      	beq.n	800b646 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800b598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b59a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b59e:	d86c      	bhi.n	800b67a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b5a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5a2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b5a6:	d03b      	beq.n	800b620 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800b5a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5aa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b5ae:	d864      	bhi.n	800b67a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b5b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b5b6:	d021      	beq.n	800b5fc <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800b5b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b5be:	d85c      	bhi.n	800b67a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b5c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d004      	beq.n	800b5d0 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800b5c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b5cc:	d004      	beq.n	800b5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800b5ce:	e054      	b.n	800b67a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800b5d0:	f000 f8b8 	bl	800b744 <HAL_RCCEx_GetD3PCLK1Freq>
 800b5d4:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b5d6:	e0ac      	b.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b5d8:	4b29      	ldr	r3, [pc, #164]	; (800b680 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b5e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b5e4:	d107      	bne.n	800b5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b5e6:	f107 0318 	add.w	r3, r7, #24
 800b5ea:	4618      	mov	r0, r3
 800b5ec:	f000 f8c0 	bl	800b770 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b5f0:	69fb      	ldr	r3, [r7, #28]
 800b5f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b5f4:	e09d      	b.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b5f6:	2300      	movs	r3, #0
 800b5f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b5fa:	e09a      	b.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b5fc:	4b20      	ldr	r3, [pc, #128]	; (800b680 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b604:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b608:	d107      	bne.n	800b61a <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b60a:	f107 030c 	add.w	r3, r7, #12
 800b60e:	4618      	mov	r0, r3
 800b610:	f000 fa02 	bl	800ba18 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b614:	693b      	ldr	r3, [r7, #16]
 800b616:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b618:	e08b      	b.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b61a:	2300      	movs	r3, #0
 800b61c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b61e:	e088      	b.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b620:	4b17      	ldr	r3, [pc, #92]	; (800b680 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	f003 0304 	and.w	r3, r3, #4
 800b628:	2b04      	cmp	r3, #4
 800b62a:	d109      	bne.n	800b640 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b62c:	4b14      	ldr	r3, [pc, #80]	; (800b680 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	08db      	lsrs	r3, r3, #3
 800b632:	f003 0303 	and.w	r3, r3, #3
 800b636:	4a13      	ldr	r2, [pc, #76]	; (800b684 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800b638:	fa22 f303 	lsr.w	r3, r2, r3
 800b63c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b63e:	e078      	b.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b640:	2300      	movs	r3, #0
 800b642:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b644:	e075      	b.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b646:	4b0e      	ldr	r3, [pc, #56]	; (800b680 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b64e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b652:	d102      	bne.n	800b65a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800b654:	4b0c      	ldr	r3, [pc, #48]	; (800b688 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800b656:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b658:	e06b      	b.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b65a:	2300      	movs	r3, #0
 800b65c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b65e:	e068      	b.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b660:	4b07      	ldr	r3, [pc, #28]	; (800b680 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b668:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b66c:	d102      	bne.n	800b674 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800b66e:	4b07      	ldr	r3, [pc, #28]	; (800b68c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800b670:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b672:	e05e      	b.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b674:	2300      	movs	r3, #0
 800b676:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b678:	e05b      	b.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800b67a:	2300      	movs	r3, #0
 800b67c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b67e:	e058      	b.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b680:	58024400 	.word	0x58024400
 800b684:	03d09000 	.word	0x03d09000
 800b688:	003d0900 	.word	0x003d0900
 800b68c:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800b690:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b694:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800b698:	430b      	orrs	r3, r1
 800b69a:	d148      	bne.n	800b72e <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800b69c:	4b27      	ldr	r3, [pc, #156]	; (800b73c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b69e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b6a0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b6a4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b6a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b6ac:	d02a      	beq.n	800b704 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800b6ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b6b4:	d838      	bhi.n	800b728 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800b6b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d004      	beq.n	800b6c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800b6bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b6c2:	d00d      	beq.n	800b6e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800b6c4:	e030      	b.n	800b728 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b6c6:	4b1d      	ldr	r3, [pc, #116]	; (800b73c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b6ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b6d2:	d102      	bne.n	800b6da <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800b6d4:	4b1a      	ldr	r3, [pc, #104]	; (800b740 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800b6d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b6d8:	e02b      	b.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b6da:	2300      	movs	r3, #0
 800b6dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b6de:	e028      	b.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b6e0:	4b16      	ldr	r3, [pc, #88]	; (800b73c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b6e8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b6ec:	d107      	bne.n	800b6fe <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b6ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b6f2:	4618      	mov	r0, r3
 800b6f4:	f000 fae4 	bl	800bcc0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b6f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b6fc:	e019      	b.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b6fe:	2300      	movs	r3, #0
 800b700:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b702:	e016      	b.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b704:	4b0d      	ldr	r3, [pc, #52]	; (800b73c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b70c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b710:	d107      	bne.n	800b722 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b712:	f107 0318 	add.w	r3, r7, #24
 800b716:	4618      	mov	r0, r3
 800b718:	f000 f82a 	bl	800b770 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b71c:	69fb      	ldr	r3, [r7, #28]
 800b71e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b720:	e007      	b.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b722:	2300      	movs	r3, #0
 800b724:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b726:	e004      	b.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b728:	2300      	movs	r3, #0
 800b72a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b72c:	e001      	b.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800b72e:	2300      	movs	r3, #0
 800b730:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800b732:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b734:	4618      	mov	r0, r3
 800b736:	3740      	adds	r7, #64	; 0x40
 800b738:	46bd      	mov	sp, r7
 800b73a:	bd80      	pop	{r7, pc}
 800b73c:	58024400 	.word	0x58024400
 800b740:	007a1200 	.word	0x007a1200

0800b744 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800b744:	b580      	push	{r7, lr}
 800b746:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800b748:	f7fd ffd4 	bl	80096f4 <HAL_RCC_GetHCLKFreq>
 800b74c:	4602      	mov	r2, r0
 800b74e:	4b06      	ldr	r3, [pc, #24]	; (800b768 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800b750:	6a1b      	ldr	r3, [r3, #32]
 800b752:	091b      	lsrs	r3, r3, #4
 800b754:	f003 0307 	and.w	r3, r3, #7
 800b758:	4904      	ldr	r1, [pc, #16]	; (800b76c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800b75a:	5ccb      	ldrb	r3, [r1, r3]
 800b75c:	f003 031f 	and.w	r3, r3, #31
 800b760:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800b764:	4618      	mov	r0, r3
 800b766:	bd80      	pop	{r7, pc}
 800b768:	58024400 	.word	0x58024400
 800b76c:	08017b30 	.word	0x08017b30

0800b770 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800b770:	b480      	push	{r7}
 800b772:	b089      	sub	sp, #36	; 0x24
 800b774:	af00      	add	r7, sp, #0
 800b776:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b778:	4ba1      	ldr	r3, [pc, #644]	; (800ba00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b77a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b77c:	f003 0303 	and.w	r3, r3, #3
 800b780:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800b782:	4b9f      	ldr	r3, [pc, #636]	; (800ba00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b786:	0b1b      	lsrs	r3, r3, #12
 800b788:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b78c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800b78e:	4b9c      	ldr	r3, [pc, #624]	; (800ba00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b792:	091b      	lsrs	r3, r3, #4
 800b794:	f003 0301 	and.w	r3, r3, #1
 800b798:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800b79a:	4b99      	ldr	r3, [pc, #612]	; (800ba00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b79c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b79e:	08db      	lsrs	r3, r3, #3
 800b7a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b7a4:	693a      	ldr	r2, [r7, #16]
 800b7a6:	fb02 f303 	mul.w	r3, r2, r3
 800b7aa:	ee07 3a90 	vmov	s15, r3
 800b7ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7b2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800b7b6:	697b      	ldr	r3, [r7, #20]
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	f000 8111 	beq.w	800b9e0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800b7be:	69bb      	ldr	r3, [r7, #24]
 800b7c0:	2b02      	cmp	r3, #2
 800b7c2:	f000 8083 	beq.w	800b8cc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800b7c6:	69bb      	ldr	r3, [r7, #24]
 800b7c8:	2b02      	cmp	r3, #2
 800b7ca:	f200 80a1 	bhi.w	800b910 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800b7ce:	69bb      	ldr	r3, [r7, #24]
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d003      	beq.n	800b7dc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800b7d4:	69bb      	ldr	r3, [r7, #24]
 800b7d6:	2b01      	cmp	r3, #1
 800b7d8:	d056      	beq.n	800b888 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800b7da:	e099      	b.n	800b910 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b7dc:	4b88      	ldr	r3, [pc, #544]	; (800ba00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	f003 0320 	and.w	r3, r3, #32
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d02d      	beq.n	800b844 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b7e8:	4b85      	ldr	r3, [pc, #532]	; (800ba00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	08db      	lsrs	r3, r3, #3
 800b7ee:	f003 0303 	and.w	r3, r3, #3
 800b7f2:	4a84      	ldr	r2, [pc, #528]	; (800ba04 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800b7f4:	fa22 f303 	lsr.w	r3, r2, r3
 800b7f8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b7fa:	68bb      	ldr	r3, [r7, #8]
 800b7fc:	ee07 3a90 	vmov	s15, r3
 800b800:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b804:	697b      	ldr	r3, [r7, #20]
 800b806:	ee07 3a90 	vmov	s15, r3
 800b80a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b80e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b812:	4b7b      	ldr	r3, [pc, #492]	; (800ba00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b816:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b81a:	ee07 3a90 	vmov	s15, r3
 800b81e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b822:	ed97 6a03 	vldr	s12, [r7, #12]
 800b826:	eddf 5a78 	vldr	s11, [pc, #480]	; 800ba08 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b82a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b82e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b832:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b836:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b83a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b83e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b842:	e087      	b.n	800b954 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b844:	697b      	ldr	r3, [r7, #20]
 800b846:	ee07 3a90 	vmov	s15, r3
 800b84a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b84e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800ba0c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800b852:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b856:	4b6a      	ldr	r3, [pc, #424]	; (800ba00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b85a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b85e:	ee07 3a90 	vmov	s15, r3
 800b862:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b866:	ed97 6a03 	vldr	s12, [r7, #12]
 800b86a:	eddf 5a67 	vldr	s11, [pc, #412]	; 800ba08 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b86e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b872:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b876:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b87a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b87e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b882:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b886:	e065      	b.n	800b954 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b888:	697b      	ldr	r3, [r7, #20]
 800b88a:	ee07 3a90 	vmov	s15, r3
 800b88e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b892:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800ba10 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b896:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b89a:	4b59      	ldr	r3, [pc, #356]	; (800ba00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b89c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b89e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b8a2:	ee07 3a90 	vmov	s15, r3
 800b8a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b8aa:	ed97 6a03 	vldr	s12, [r7, #12]
 800b8ae:	eddf 5a56 	vldr	s11, [pc, #344]	; 800ba08 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b8b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b8b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b8ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b8be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b8c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b8c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b8ca:	e043      	b.n	800b954 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b8cc:	697b      	ldr	r3, [r7, #20]
 800b8ce:	ee07 3a90 	vmov	s15, r3
 800b8d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8d6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800ba14 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800b8da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b8de:	4b48      	ldr	r3, [pc, #288]	; (800ba00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b8e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b8e6:	ee07 3a90 	vmov	s15, r3
 800b8ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b8ee:	ed97 6a03 	vldr	s12, [r7, #12]
 800b8f2:	eddf 5a45 	vldr	s11, [pc, #276]	; 800ba08 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b8f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b8fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b8fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b902:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b906:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b90a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b90e:	e021      	b.n	800b954 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b910:	697b      	ldr	r3, [r7, #20]
 800b912:	ee07 3a90 	vmov	s15, r3
 800b916:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b91a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800ba10 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b91e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b922:	4b37      	ldr	r3, [pc, #220]	; (800ba00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b926:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b92a:	ee07 3a90 	vmov	s15, r3
 800b92e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b932:	ed97 6a03 	vldr	s12, [r7, #12]
 800b936:	eddf 5a34 	vldr	s11, [pc, #208]	; 800ba08 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b93a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b93e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b942:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b946:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b94a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b94e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b952:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800b954:	4b2a      	ldr	r3, [pc, #168]	; (800ba00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b958:	0a5b      	lsrs	r3, r3, #9
 800b95a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b95e:	ee07 3a90 	vmov	s15, r3
 800b962:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b966:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b96a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b96e:	edd7 6a07 	vldr	s13, [r7, #28]
 800b972:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b976:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b97a:	ee17 2a90 	vmov	r2, s15
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800b982:	4b1f      	ldr	r3, [pc, #124]	; (800ba00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b986:	0c1b      	lsrs	r3, r3, #16
 800b988:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b98c:	ee07 3a90 	vmov	s15, r3
 800b990:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b994:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b998:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b99c:	edd7 6a07 	vldr	s13, [r7, #28]
 800b9a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b9a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b9a8:	ee17 2a90 	vmov	r2, s15
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800b9b0:	4b13      	ldr	r3, [pc, #76]	; (800ba00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b9b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9b4:	0e1b      	lsrs	r3, r3, #24
 800b9b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b9ba:	ee07 3a90 	vmov	s15, r3
 800b9be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b9c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b9c6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b9ca:	edd7 6a07 	vldr	s13, [r7, #28]
 800b9ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b9d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b9d6:	ee17 2a90 	vmov	r2, s15
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800b9de:	e008      	b.n	800b9f2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	2200      	movs	r2, #0
 800b9e4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	2200      	movs	r2, #0
 800b9ea:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	2200      	movs	r2, #0
 800b9f0:	609a      	str	r2, [r3, #8]
}
 800b9f2:	bf00      	nop
 800b9f4:	3724      	adds	r7, #36	; 0x24
 800b9f6:	46bd      	mov	sp, r7
 800b9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9fc:	4770      	bx	lr
 800b9fe:	bf00      	nop
 800ba00:	58024400 	.word	0x58024400
 800ba04:	03d09000 	.word	0x03d09000
 800ba08:	46000000 	.word	0x46000000
 800ba0c:	4c742400 	.word	0x4c742400
 800ba10:	4a742400 	.word	0x4a742400
 800ba14:	4af42400 	.word	0x4af42400

0800ba18 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800ba18:	b480      	push	{r7}
 800ba1a:	b089      	sub	sp, #36	; 0x24
 800ba1c:	af00      	add	r7, sp, #0
 800ba1e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ba20:	4ba1      	ldr	r3, [pc, #644]	; (800bca8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ba22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba24:	f003 0303 	and.w	r3, r3, #3
 800ba28:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800ba2a:	4b9f      	ldr	r3, [pc, #636]	; (800bca8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ba2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba2e:	0d1b      	lsrs	r3, r3, #20
 800ba30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ba34:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800ba36:	4b9c      	ldr	r3, [pc, #624]	; (800bca8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ba38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba3a:	0a1b      	lsrs	r3, r3, #8
 800ba3c:	f003 0301 	and.w	r3, r3, #1
 800ba40:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800ba42:	4b99      	ldr	r3, [pc, #612]	; (800bca8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ba44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba46:	08db      	lsrs	r3, r3, #3
 800ba48:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ba4c:	693a      	ldr	r2, [r7, #16]
 800ba4e:	fb02 f303 	mul.w	r3, r2, r3
 800ba52:	ee07 3a90 	vmov	s15, r3
 800ba56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba5a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800ba5e:	697b      	ldr	r3, [r7, #20]
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	f000 8111 	beq.w	800bc88 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800ba66:	69bb      	ldr	r3, [r7, #24]
 800ba68:	2b02      	cmp	r3, #2
 800ba6a:	f000 8083 	beq.w	800bb74 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800ba6e:	69bb      	ldr	r3, [r7, #24]
 800ba70:	2b02      	cmp	r3, #2
 800ba72:	f200 80a1 	bhi.w	800bbb8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800ba76:	69bb      	ldr	r3, [r7, #24]
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d003      	beq.n	800ba84 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800ba7c:	69bb      	ldr	r3, [r7, #24]
 800ba7e:	2b01      	cmp	r3, #1
 800ba80:	d056      	beq.n	800bb30 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800ba82:	e099      	b.n	800bbb8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ba84:	4b88      	ldr	r3, [pc, #544]	; (800bca8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	f003 0320 	and.w	r3, r3, #32
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d02d      	beq.n	800baec <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ba90:	4b85      	ldr	r3, [pc, #532]	; (800bca8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	08db      	lsrs	r3, r3, #3
 800ba96:	f003 0303 	and.w	r3, r3, #3
 800ba9a:	4a84      	ldr	r2, [pc, #528]	; (800bcac <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800ba9c:	fa22 f303 	lsr.w	r3, r2, r3
 800baa0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800baa2:	68bb      	ldr	r3, [r7, #8]
 800baa4:	ee07 3a90 	vmov	s15, r3
 800baa8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800baac:	697b      	ldr	r3, [r7, #20]
 800baae:	ee07 3a90 	vmov	s15, r3
 800bab2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bab6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800baba:	4b7b      	ldr	r3, [pc, #492]	; (800bca8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800babc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800babe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bac2:	ee07 3a90 	vmov	s15, r3
 800bac6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800baca:	ed97 6a03 	vldr	s12, [r7, #12]
 800bace:	eddf 5a78 	vldr	s11, [pc, #480]	; 800bcb0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bad2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bad6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bada:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bade:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bae2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bae6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800baea:	e087      	b.n	800bbfc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800baec:	697b      	ldr	r3, [r7, #20]
 800baee:	ee07 3a90 	vmov	s15, r3
 800baf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800baf6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800bcb4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800bafa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bafe:	4b6a      	ldr	r3, [pc, #424]	; (800bca8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bb00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb06:	ee07 3a90 	vmov	s15, r3
 800bb0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb0e:	ed97 6a03 	vldr	s12, [r7, #12]
 800bb12:	eddf 5a67 	vldr	s11, [pc, #412]	; 800bcb0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bb16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bb1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bb1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bb22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb26:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bb2e:	e065      	b.n	800bbfc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bb30:	697b      	ldr	r3, [r7, #20]
 800bb32:	ee07 3a90 	vmov	s15, r3
 800bb36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb3a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800bcb8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800bb3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bb42:	4b59      	ldr	r3, [pc, #356]	; (800bca8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bb44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb4a:	ee07 3a90 	vmov	s15, r3
 800bb4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb52:	ed97 6a03 	vldr	s12, [r7, #12]
 800bb56:	eddf 5a56 	vldr	s11, [pc, #344]	; 800bcb0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bb5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bb5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bb62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bb66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bb72:	e043      	b.n	800bbfc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bb74:	697b      	ldr	r3, [r7, #20]
 800bb76:	ee07 3a90 	vmov	s15, r3
 800bb7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb7e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800bcbc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800bb82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bb86:	4b48      	ldr	r3, [pc, #288]	; (800bca8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bb88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb8e:	ee07 3a90 	vmov	s15, r3
 800bb92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb96:	ed97 6a03 	vldr	s12, [r7, #12]
 800bb9a:	eddf 5a45 	vldr	s11, [pc, #276]	; 800bcb0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bb9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bba2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bba6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bbaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bbae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bbb2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bbb6:	e021      	b.n	800bbfc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bbb8:	697b      	ldr	r3, [r7, #20]
 800bbba:	ee07 3a90 	vmov	s15, r3
 800bbbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bbc2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800bcb8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800bbc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bbca:	4b37      	ldr	r3, [pc, #220]	; (800bca8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bbcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bbd2:	ee07 3a90 	vmov	s15, r3
 800bbd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bbda:	ed97 6a03 	vldr	s12, [r7, #12]
 800bbde:	eddf 5a34 	vldr	s11, [pc, #208]	; 800bcb0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bbe2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bbe6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bbea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bbee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bbf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bbf6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bbfa:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800bbfc:	4b2a      	ldr	r3, [pc, #168]	; (800bca8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bbfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc00:	0a5b      	lsrs	r3, r3, #9
 800bc02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bc06:	ee07 3a90 	vmov	s15, r3
 800bc0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc0e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bc12:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bc16:	edd7 6a07 	vldr	s13, [r7, #28]
 800bc1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bc1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bc22:	ee17 2a90 	vmov	r2, s15
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800bc2a:	4b1f      	ldr	r3, [pc, #124]	; (800bca8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bc2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc2e:	0c1b      	lsrs	r3, r3, #16
 800bc30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bc34:	ee07 3a90 	vmov	s15, r3
 800bc38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc3c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bc40:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bc44:	edd7 6a07 	vldr	s13, [r7, #28]
 800bc48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bc4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bc50:	ee17 2a90 	vmov	r2, s15
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800bc58:	4b13      	ldr	r3, [pc, #76]	; (800bca8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bc5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc5c:	0e1b      	lsrs	r3, r3, #24
 800bc5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bc62:	ee07 3a90 	vmov	s15, r3
 800bc66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc6a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bc6e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bc72:	edd7 6a07 	vldr	s13, [r7, #28]
 800bc76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bc7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bc7e:	ee17 2a90 	vmov	r2, s15
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800bc86:	e008      	b.n	800bc9a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	2200      	movs	r2, #0
 800bc8c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	2200      	movs	r2, #0
 800bc92:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	2200      	movs	r2, #0
 800bc98:	609a      	str	r2, [r3, #8]
}
 800bc9a:	bf00      	nop
 800bc9c:	3724      	adds	r7, #36	; 0x24
 800bc9e:	46bd      	mov	sp, r7
 800bca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca4:	4770      	bx	lr
 800bca6:	bf00      	nop
 800bca8:	58024400 	.word	0x58024400
 800bcac:	03d09000 	.word	0x03d09000
 800bcb0:	46000000 	.word	0x46000000
 800bcb4:	4c742400 	.word	0x4c742400
 800bcb8:	4a742400 	.word	0x4a742400
 800bcbc:	4af42400 	.word	0x4af42400

0800bcc0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800bcc0:	b480      	push	{r7}
 800bcc2:	b089      	sub	sp, #36	; 0x24
 800bcc4:	af00      	add	r7, sp, #0
 800bcc6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bcc8:	4ba0      	ldr	r3, [pc, #640]	; (800bf4c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bcca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bccc:	f003 0303 	and.w	r3, r3, #3
 800bcd0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800bcd2:	4b9e      	ldr	r3, [pc, #632]	; (800bf4c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bcd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bcd6:	091b      	lsrs	r3, r3, #4
 800bcd8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bcdc:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800bcde:	4b9b      	ldr	r3, [pc, #620]	; (800bf4c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bce2:	f003 0301 	and.w	r3, r3, #1
 800bce6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800bce8:	4b98      	ldr	r3, [pc, #608]	; (800bf4c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bcea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bcec:	08db      	lsrs	r3, r3, #3
 800bcee:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bcf2:	693a      	ldr	r2, [r7, #16]
 800bcf4:	fb02 f303 	mul.w	r3, r2, r3
 800bcf8:	ee07 3a90 	vmov	s15, r3
 800bcfc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd00:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800bd04:	697b      	ldr	r3, [r7, #20]
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	f000 8111 	beq.w	800bf2e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800bd0c:	69bb      	ldr	r3, [r7, #24]
 800bd0e:	2b02      	cmp	r3, #2
 800bd10:	f000 8083 	beq.w	800be1a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800bd14:	69bb      	ldr	r3, [r7, #24]
 800bd16:	2b02      	cmp	r3, #2
 800bd18:	f200 80a1 	bhi.w	800be5e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800bd1c:	69bb      	ldr	r3, [r7, #24]
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d003      	beq.n	800bd2a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800bd22:	69bb      	ldr	r3, [r7, #24]
 800bd24:	2b01      	cmp	r3, #1
 800bd26:	d056      	beq.n	800bdd6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800bd28:	e099      	b.n	800be5e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bd2a:	4b88      	ldr	r3, [pc, #544]	; (800bf4c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	f003 0320 	and.w	r3, r3, #32
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d02d      	beq.n	800bd92 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bd36:	4b85      	ldr	r3, [pc, #532]	; (800bf4c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	08db      	lsrs	r3, r3, #3
 800bd3c:	f003 0303 	and.w	r3, r3, #3
 800bd40:	4a83      	ldr	r2, [pc, #524]	; (800bf50 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800bd42:	fa22 f303 	lsr.w	r3, r2, r3
 800bd46:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bd48:	68bb      	ldr	r3, [r7, #8]
 800bd4a:	ee07 3a90 	vmov	s15, r3
 800bd4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd52:	697b      	ldr	r3, [r7, #20]
 800bd54:	ee07 3a90 	vmov	s15, r3
 800bd58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd5c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bd60:	4b7a      	ldr	r3, [pc, #488]	; (800bf4c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bd62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd68:	ee07 3a90 	vmov	s15, r3
 800bd6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd70:	ed97 6a03 	vldr	s12, [r7, #12]
 800bd74:	eddf 5a77 	vldr	s11, [pc, #476]	; 800bf54 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bd78:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bd7c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd80:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bd84:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bd88:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd8c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800bd90:	e087      	b.n	800bea2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bd92:	697b      	ldr	r3, [r7, #20]
 800bd94:	ee07 3a90 	vmov	s15, r3
 800bd98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd9c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800bf58 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800bda0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bda4:	4b69      	ldr	r3, [pc, #420]	; (800bf4c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bda6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bda8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bdac:	ee07 3a90 	vmov	s15, r3
 800bdb0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bdb4:	ed97 6a03 	vldr	s12, [r7, #12]
 800bdb8:	eddf 5a66 	vldr	s11, [pc, #408]	; 800bf54 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bdbc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bdc0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bdc4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bdc8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bdcc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bdd0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bdd4:	e065      	b.n	800bea2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bdd6:	697b      	ldr	r3, [r7, #20]
 800bdd8:	ee07 3a90 	vmov	s15, r3
 800bddc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bde0:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800bf5c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800bde4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bde8:	4b58      	ldr	r3, [pc, #352]	; (800bf4c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bdea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bdec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bdf0:	ee07 3a90 	vmov	s15, r3
 800bdf4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bdf8:	ed97 6a03 	vldr	s12, [r7, #12]
 800bdfc:	eddf 5a55 	vldr	s11, [pc, #340]	; 800bf54 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800be00:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800be04:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800be08:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800be0c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800be10:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be14:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800be18:	e043      	b.n	800bea2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800be1a:	697b      	ldr	r3, [r7, #20]
 800be1c:	ee07 3a90 	vmov	s15, r3
 800be20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be24:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800bf60 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800be28:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800be2c:	4b47      	ldr	r3, [pc, #284]	; (800bf4c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800be2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be34:	ee07 3a90 	vmov	s15, r3
 800be38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800be3c:	ed97 6a03 	vldr	s12, [r7, #12]
 800be40:	eddf 5a44 	vldr	s11, [pc, #272]	; 800bf54 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800be44:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800be48:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800be4c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800be50:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800be54:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be58:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800be5c:	e021      	b.n	800bea2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800be5e:	697b      	ldr	r3, [r7, #20]
 800be60:	ee07 3a90 	vmov	s15, r3
 800be64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be68:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800bf58 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800be6c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800be70:	4b36      	ldr	r3, [pc, #216]	; (800bf4c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800be72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be78:	ee07 3a90 	vmov	s15, r3
 800be7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800be80:	ed97 6a03 	vldr	s12, [r7, #12]
 800be84:	eddf 5a33 	vldr	s11, [pc, #204]	; 800bf54 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800be88:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800be8c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800be90:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800be94:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800be98:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be9c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bea0:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800bea2:	4b2a      	ldr	r3, [pc, #168]	; (800bf4c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bea6:	0a5b      	lsrs	r3, r3, #9
 800bea8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800beac:	ee07 3a90 	vmov	s15, r3
 800beb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800beb4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800beb8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bebc:	edd7 6a07 	vldr	s13, [r7, #28]
 800bec0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bec4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bec8:	ee17 2a90 	vmov	r2, s15
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800bed0:	4b1e      	ldr	r3, [pc, #120]	; (800bf4c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bed4:	0c1b      	lsrs	r3, r3, #16
 800bed6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800beda:	ee07 3a90 	vmov	s15, r3
 800bede:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bee2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bee6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800beea:	edd7 6a07 	vldr	s13, [r7, #28]
 800beee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bef2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bef6:	ee17 2a90 	vmov	r2, s15
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800befe:	4b13      	ldr	r3, [pc, #76]	; (800bf4c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bf00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf02:	0e1b      	lsrs	r3, r3, #24
 800bf04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bf08:	ee07 3a90 	vmov	s15, r3
 800bf0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf10:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bf14:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bf18:	edd7 6a07 	vldr	s13, [r7, #28]
 800bf1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bf20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bf24:	ee17 2a90 	vmov	r2, s15
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800bf2c:	e008      	b.n	800bf40 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	2200      	movs	r2, #0
 800bf32:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	2200      	movs	r2, #0
 800bf38:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	2200      	movs	r2, #0
 800bf3e:	609a      	str	r2, [r3, #8]
}
 800bf40:	bf00      	nop
 800bf42:	3724      	adds	r7, #36	; 0x24
 800bf44:	46bd      	mov	sp, r7
 800bf46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf4a:	4770      	bx	lr
 800bf4c:	58024400 	.word	0x58024400
 800bf50:	03d09000 	.word	0x03d09000
 800bf54:	46000000 	.word	0x46000000
 800bf58:	4c742400 	.word	0x4c742400
 800bf5c:	4a742400 	.word	0x4a742400
 800bf60:	4af42400 	.word	0x4af42400

0800bf64 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800bf64:	b580      	push	{r7, lr}
 800bf66:	b084      	sub	sp, #16
 800bf68:	af00      	add	r7, sp, #0
 800bf6a:	6078      	str	r0, [r7, #4]
 800bf6c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800bf6e:	2300      	movs	r3, #0
 800bf70:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bf72:	4b53      	ldr	r3, [pc, #332]	; (800c0c0 <RCCEx_PLL2_Config+0x15c>)
 800bf74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf76:	f003 0303 	and.w	r3, r3, #3
 800bf7a:	2b03      	cmp	r3, #3
 800bf7c:	d101      	bne.n	800bf82 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800bf7e:	2301      	movs	r3, #1
 800bf80:	e099      	b.n	800c0b6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800bf82:	4b4f      	ldr	r3, [pc, #316]	; (800c0c0 <RCCEx_PLL2_Config+0x15c>)
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	4a4e      	ldr	r2, [pc, #312]	; (800c0c0 <RCCEx_PLL2_Config+0x15c>)
 800bf88:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800bf8c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bf8e:	f7f7 fdbd 	bl	8003b0c <HAL_GetTick>
 800bf92:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800bf94:	e008      	b.n	800bfa8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800bf96:	f7f7 fdb9 	bl	8003b0c <HAL_GetTick>
 800bf9a:	4602      	mov	r2, r0
 800bf9c:	68bb      	ldr	r3, [r7, #8]
 800bf9e:	1ad3      	subs	r3, r2, r3
 800bfa0:	2b02      	cmp	r3, #2
 800bfa2:	d901      	bls.n	800bfa8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800bfa4:	2303      	movs	r3, #3
 800bfa6:	e086      	b.n	800c0b6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800bfa8:	4b45      	ldr	r3, [pc, #276]	; (800c0c0 <RCCEx_PLL2_Config+0x15c>)
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d1f0      	bne.n	800bf96 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800bfb4:	4b42      	ldr	r3, [pc, #264]	; (800c0c0 <RCCEx_PLL2_Config+0x15c>)
 800bfb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bfb8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	031b      	lsls	r3, r3, #12
 800bfc2:	493f      	ldr	r1, [pc, #252]	; (800c0c0 <RCCEx_PLL2_Config+0x15c>)
 800bfc4:	4313      	orrs	r3, r2
 800bfc6:	628b      	str	r3, [r1, #40]	; 0x28
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	685b      	ldr	r3, [r3, #4]
 800bfcc:	3b01      	subs	r3, #1
 800bfce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	689b      	ldr	r3, [r3, #8]
 800bfd6:	3b01      	subs	r3, #1
 800bfd8:	025b      	lsls	r3, r3, #9
 800bfda:	b29b      	uxth	r3, r3
 800bfdc:	431a      	orrs	r2, r3
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	68db      	ldr	r3, [r3, #12]
 800bfe2:	3b01      	subs	r3, #1
 800bfe4:	041b      	lsls	r3, r3, #16
 800bfe6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800bfea:	431a      	orrs	r2, r3
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	691b      	ldr	r3, [r3, #16]
 800bff0:	3b01      	subs	r3, #1
 800bff2:	061b      	lsls	r3, r3, #24
 800bff4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800bff8:	4931      	ldr	r1, [pc, #196]	; (800c0c0 <RCCEx_PLL2_Config+0x15c>)
 800bffa:	4313      	orrs	r3, r2
 800bffc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800bffe:	4b30      	ldr	r3, [pc, #192]	; (800c0c0 <RCCEx_PLL2_Config+0x15c>)
 800c000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c002:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	695b      	ldr	r3, [r3, #20]
 800c00a:	492d      	ldr	r1, [pc, #180]	; (800c0c0 <RCCEx_PLL2_Config+0x15c>)
 800c00c:	4313      	orrs	r3, r2
 800c00e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800c010:	4b2b      	ldr	r3, [pc, #172]	; (800c0c0 <RCCEx_PLL2_Config+0x15c>)
 800c012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c014:	f023 0220 	bic.w	r2, r3, #32
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	699b      	ldr	r3, [r3, #24]
 800c01c:	4928      	ldr	r1, [pc, #160]	; (800c0c0 <RCCEx_PLL2_Config+0x15c>)
 800c01e:	4313      	orrs	r3, r2
 800c020:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800c022:	4b27      	ldr	r3, [pc, #156]	; (800c0c0 <RCCEx_PLL2_Config+0x15c>)
 800c024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c026:	4a26      	ldr	r2, [pc, #152]	; (800c0c0 <RCCEx_PLL2_Config+0x15c>)
 800c028:	f023 0310 	bic.w	r3, r3, #16
 800c02c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800c02e:	4b24      	ldr	r3, [pc, #144]	; (800c0c0 <RCCEx_PLL2_Config+0x15c>)
 800c030:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c032:	4b24      	ldr	r3, [pc, #144]	; (800c0c4 <RCCEx_PLL2_Config+0x160>)
 800c034:	4013      	ands	r3, r2
 800c036:	687a      	ldr	r2, [r7, #4]
 800c038:	69d2      	ldr	r2, [r2, #28]
 800c03a:	00d2      	lsls	r2, r2, #3
 800c03c:	4920      	ldr	r1, [pc, #128]	; (800c0c0 <RCCEx_PLL2_Config+0x15c>)
 800c03e:	4313      	orrs	r3, r2
 800c040:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800c042:	4b1f      	ldr	r3, [pc, #124]	; (800c0c0 <RCCEx_PLL2_Config+0x15c>)
 800c044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c046:	4a1e      	ldr	r2, [pc, #120]	; (800c0c0 <RCCEx_PLL2_Config+0x15c>)
 800c048:	f043 0310 	orr.w	r3, r3, #16
 800c04c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800c04e:	683b      	ldr	r3, [r7, #0]
 800c050:	2b00      	cmp	r3, #0
 800c052:	d106      	bne.n	800c062 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800c054:	4b1a      	ldr	r3, [pc, #104]	; (800c0c0 <RCCEx_PLL2_Config+0x15c>)
 800c056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c058:	4a19      	ldr	r2, [pc, #100]	; (800c0c0 <RCCEx_PLL2_Config+0x15c>)
 800c05a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c05e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c060:	e00f      	b.n	800c082 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800c062:	683b      	ldr	r3, [r7, #0]
 800c064:	2b01      	cmp	r3, #1
 800c066:	d106      	bne.n	800c076 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800c068:	4b15      	ldr	r3, [pc, #84]	; (800c0c0 <RCCEx_PLL2_Config+0x15c>)
 800c06a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c06c:	4a14      	ldr	r2, [pc, #80]	; (800c0c0 <RCCEx_PLL2_Config+0x15c>)
 800c06e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c072:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c074:	e005      	b.n	800c082 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800c076:	4b12      	ldr	r3, [pc, #72]	; (800c0c0 <RCCEx_PLL2_Config+0x15c>)
 800c078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c07a:	4a11      	ldr	r2, [pc, #68]	; (800c0c0 <RCCEx_PLL2_Config+0x15c>)
 800c07c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c080:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800c082:	4b0f      	ldr	r3, [pc, #60]	; (800c0c0 <RCCEx_PLL2_Config+0x15c>)
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	4a0e      	ldr	r2, [pc, #56]	; (800c0c0 <RCCEx_PLL2_Config+0x15c>)
 800c088:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c08c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c08e:	f7f7 fd3d 	bl	8003b0c <HAL_GetTick>
 800c092:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c094:	e008      	b.n	800c0a8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c096:	f7f7 fd39 	bl	8003b0c <HAL_GetTick>
 800c09a:	4602      	mov	r2, r0
 800c09c:	68bb      	ldr	r3, [r7, #8]
 800c09e:	1ad3      	subs	r3, r2, r3
 800c0a0:	2b02      	cmp	r3, #2
 800c0a2:	d901      	bls.n	800c0a8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c0a4:	2303      	movs	r3, #3
 800c0a6:	e006      	b.n	800c0b6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c0a8:	4b05      	ldr	r3, [pc, #20]	; (800c0c0 <RCCEx_PLL2_Config+0x15c>)
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d0f0      	beq.n	800c096 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800c0b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0b6:	4618      	mov	r0, r3
 800c0b8:	3710      	adds	r7, #16
 800c0ba:	46bd      	mov	sp, r7
 800c0bc:	bd80      	pop	{r7, pc}
 800c0be:	bf00      	nop
 800c0c0:	58024400 	.word	0x58024400
 800c0c4:	ffff0007 	.word	0xffff0007

0800c0c8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800c0c8:	b580      	push	{r7, lr}
 800c0ca:	b084      	sub	sp, #16
 800c0cc:	af00      	add	r7, sp, #0
 800c0ce:	6078      	str	r0, [r7, #4]
 800c0d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c0d2:	2300      	movs	r3, #0
 800c0d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c0d6:	4b53      	ldr	r3, [pc, #332]	; (800c224 <RCCEx_PLL3_Config+0x15c>)
 800c0d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0da:	f003 0303 	and.w	r3, r3, #3
 800c0de:	2b03      	cmp	r3, #3
 800c0e0:	d101      	bne.n	800c0e6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800c0e2:	2301      	movs	r3, #1
 800c0e4:	e099      	b.n	800c21a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800c0e6:	4b4f      	ldr	r3, [pc, #316]	; (800c224 <RCCEx_PLL3_Config+0x15c>)
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	4a4e      	ldr	r2, [pc, #312]	; (800c224 <RCCEx_PLL3_Config+0x15c>)
 800c0ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c0f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c0f2:	f7f7 fd0b 	bl	8003b0c <HAL_GetTick>
 800c0f6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c0f8:	e008      	b.n	800c10c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c0fa:	f7f7 fd07 	bl	8003b0c <HAL_GetTick>
 800c0fe:	4602      	mov	r2, r0
 800c100:	68bb      	ldr	r3, [r7, #8]
 800c102:	1ad3      	subs	r3, r2, r3
 800c104:	2b02      	cmp	r3, #2
 800c106:	d901      	bls.n	800c10c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c108:	2303      	movs	r3, #3
 800c10a:	e086      	b.n	800c21a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c10c:	4b45      	ldr	r3, [pc, #276]	; (800c224 <RCCEx_PLL3_Config+0x15c>)
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c114:	2b00      	cmp	r3, #0
 800c116:	d1f0      	bne.n	800c0fa <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800c118:	4b42      	ldr	r3, [pc, #264]	; (800c224 <RCCEx_PLL3_Config+0x15c>)
 800c11a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c11c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	051b      	lsls	r3, r3, #20
 800c126:	493f      	ldr	r1, [pc, #252]	; (800c224 <RCCEx_PLL3_Config+0x15c>)
 800c128:	4313      	orrs	r3, r2
 800c12a:	628b      	str	r3, [r1, #40]	; 0x28
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	685b      	ldr	r3, [r3, #4]
 800c130:	3b01      	subs	r3, #1
 800c132:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	689b      	ldr	r3, [r3, #8]
 800c13a:	3b01      	subs	r3, #1
 800c13c:	025b      	lsls	r3, r3, #9
 800c13e:	b29b      	uxth	r3, r3
 800c140:	431a      	orrs	r2, r3
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	68db      	ldr	r3, [r3, #12]
 800c146:	3b01      	subs	r3, #1
 800c148:	041b      	lsls	r3, r3, #16
 800c14a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c14e:	431a      	orrs	r2, r3
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	691b      	ldr	r3, [r3, #16]
 800c154:	3b01      	subs	r3, #1
 800c156:	061b      	lsls	r3, r3, #24
 800c158:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c15c:	4931      	ldr	r1, [pc, #196]	; (800c224 <RCCEx_PLL3_Config+0x15c>)
 800c15e:	4313      	orrs	r3, r2
 800c160:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800c162:	4b30      	ldr	r3, [pc, #192]	; (800c224 <RCCEx_PLL3_Config+0x15c>)
 800c164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c166:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	695b      	ldr	r3, [r3, #20]
 800c16e:	492d      	ldr	r1, [pc, #180]	; (800c224 <RCCEx_PLL3_Config+0x15c>)
 800c170:	4313      	orrs	r3, r2
 800c172:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800c174:	4b2b      	ldr	r3, [pc, #172]	; (800c224 <RCCEx_PLL3_Config+0x15c>)
 800c176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c178:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	699b      	ldr	r3, [r3, #24]
 800c180:	4928      	ldr	r1, [pc, #160]	; (800c224 <RCCEx_PLL3_Config+0x15c>)
 800c182:	4313      	orrs	r3, r2
 800c184:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800c186:	4b27      	ldr	r3, [pc, #156]	; (800c224 <RCCEx_PLL3_Config+0x15c>)
 800c188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c18a:	4a26      	ldr	r2, [pc, #152]	; (800c224 <RCCEx_PLL3_Config+0x15c>)
 800c18c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c190:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800c192:	4b24      	ldr	r3, [pc, #144]	; (800c224 <RCCEx_PLL3_Config+0x15c>)
 800c194:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c196:	4b24      	ldr	r3, [pc, #144]	; (800c228 <RCCEx_PLL3_Config+0x160>)
 800c198:	4013      	ands	r3, r2
 800c19a:	687a      	ldr	r2, [r7, #4]
 800c19c:	69d2      	ldr	r2, [r2, #28]
 800c19e:	00d2      	lsls	r2, r2, #3
 800c1a0:	4920      	ldr	r1, [pc, #128]	; (800c224 <RCCEx_PLL3_Config+0x15c>)
 800c1a2:	4313      	orrs	r3, r2
 800c1a4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800c1a6:	4b1f      	ldr	r3, [pc, #124]	; (800c224 <RCCEx_PLL3_Config+0x15c>)
 800c1a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1aa:	4a1e      	ldr	r2, [pc, #120]	; (800c224 <RCCEx_PLL3_Config+0x15c>)
 800c1ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c1b0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800c1b2:	683b      	ldr	r3, [r7, #0]
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d106      	bne.n	800c1c6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800c1b8:	4b1a      	ldr	r3, [pc, #104]	; (800c224 <RCCEx_PLL3_Config+0x15c>)
 800c1ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1bc:	4a19      	ldr	r2, [pc, #100]	; (800c224 <RCCEx_PLL3_Config+0x15c>)
 800c1be:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800c1c2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c1c4:	e00f      	b.n	800c1e6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800c1c6:	683b      	ldr	r3, [r7, #0]
 800c1c8:	2b01      	cmp	r3, #1
 800c1ca:	d106      	bne.n	800c1da <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800c1cc:	4b15      	ldr	r3, [pc, #84]	; (800c224 <RCCEx_PLL3_Config+0x15c>)
 800c1ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1d0:	4a14      	ldr	r2, [pc, #80]	; (800c224 <RCCEx_PLL3_Config+0x15c>)
 800c1d2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c1d6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c1d8:	e005      	b.n	800c1e6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800c1da:	4b12      	ldr	r3, [pc, #72]	; (800c224 <RCCEx_PLL3_Config+0x15c>)
 800c1dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1de:	4a11      	ldr	r2, [pc, #68]	; (800c224 <RCCEx_PLL3_Config+0x15c>)
 800c1e0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c1e4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800c1e6:	4b0f      	ldr	r3, [pc, #60]	; (800c224 <RCCEx_PLL3_Config+0x15c>)
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	4a0e      	ldr	r2, [pc, #56]	; (800c224 <RCCEx_PLL3_Config+0x15c>)
 800c1ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c1f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c1f2:	f7f7 fc8b 	bl	8003b0c <HAL_GetTick>
 800c1f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c1f8:	e008      	b.n	800c20c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c1fa:	f7f7 fc87 	bl	8003b0c <HAL_GetTick>
 800c1fe:	4602      	mov	r2, r0
 800c200:	68bb      	ldr	r3, [r7, #8]
 800c202:	1ad3      	subs	r3, r2, r3
 800c204:	2b02      	cmp	r3, #2
 800c206:	d901      	bls.n	800c20c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c208:	2303      	movs	r3, #3
 800c20a:	e006      	b.n	800c21a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c20c:	4b05      	ldr	r3, [pc, #20]	; (800c224 <RCCEx_PLL3_Config+0x15c>)
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c214:	2b00      	cmp	r3, #0
 800c216:	d0f0      	beq.n	800c1fa <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800c218:	7bfb      	ldrb	r3, [r7, #15]
}
 800c21a:	4618      	mov	r0, r3
 800c21c:	3710      	adds	r7, #16
 800c21e:	46bd      	mov	sp, r7
 800c220:	bd80      	pop	{r7, pc}
 800c222:	bf00      	nop
 800c224:	58024400 	.word	0x58024400
 800c228:	ffff0007 	.word	0xffff0007

0800c22c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c22c:	b580      	push	{r7, lr}
 800c22e:	b082      	sub	sp, #8
 800c230:	af00      	add	r7, sp, #0
 800c232:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	2b00      	cmp	r3, #0
 800c238:	d101      	bne.n	800c23e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c23a:	2301      	movs	r3, #1
 800c23c:	e049      	b.n	800c2d2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c244:	b2db      	uxtb	r3, r3
 800c246:	2b00      	cmp	r3, #0
 800c248:	d106      	bne.n	800c258 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	2200      	movs	r2, #0
 800c24e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c252:	6878      	ldr	r0, [r7, #4]
 800c254:	f7f6 ff9a 	bl	800318c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	2202      	movs	r2, #2
 800c25c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	681a      	ldr	r2, [r3, #0]
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	3304      	adds	r3, #4
 800c268:	4619      	mov	r1, r3
 800c26a:	4610      	mov	r0, r2
 800c26c:	f000 fec6 	bl	800cffc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	2201      	movs	r2, #1
 800c274:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	2201      	movs	r2, #1
 800c27c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	2201      	movs	r2, #1
 800c284:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	2201      	movs	r2, #1
 800c28c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	2201      	movs	r2, #1
 800c294:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	2201      	movs	r2, #1
 800c29c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	2201      	movs	r2, #1
 800c2a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	2201      	movs	r2, #1
 800c2ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	2201      	movs	r2, #1
 800c2b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	2201      	movs	r2, #1
 800c2bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	2201      	movs	r2, #1
 800c2c4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	2201      	movs	r2, #1
 800c2cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c2d0:	2300      	movs	r3, #0
}
 800c2d2:	4618      	mov	r0, r3
 800c2d4:	3708      	adds	r7, #8
 800c2d6:	46bd      	mov	sp, r7
 800c2d8:	bd80      	pop	{r7, pc}
	...

0800c2dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c2dc:	b480      	push	{r7}
 800c2de:	b085      	sub	sp, #20
 800c2e0:	af00      	add	r7, sp, #0
 800c2e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c2ea:	b2db      	uxtb	r3, r3
 800c2ec:	2b01      	cmp	r3, #1
 800c2ee:	d001      	beq.n	800c2f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c2f0:	2301      	movs	r3, #1
 800c2f2:	e054      	b.n	800c39e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	2202      	movs	r2, #2
 800c2f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	68da      	ldr	r2, [r3, #12]
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	f042 0201 	orr.w	r2, r2, #1
 800c30a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	4a26      	ldr	r2, [pc, #152]	; (800c3ac <HAL_TIM_Base_Start_IT+0xd0>)
 800c312:	4293      	cmp	r3, r2
 800c314:	d022      	beq.n	800c35c <HAL_TIM_Base_Start_IT+0x80>
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c31e:	d01d      	beq.n	800c35c <HAL_TIM_Base_Start_IT+0x80>
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	4a22      	ldr	r2, [pc, #136]	; (800c3b0 <HAL_TIM_Base_Start_IT+0xd4>)
 800c326:	4293      	cmp	r3, r2
 800c328:	d018      	beq.n	800c35c <HAL_TIM_Base_Start_IT+0x80>
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	4a21      	ldr	r2, [pc, #132]	; (800c3b4 <HAL_TIM_Base_Start_IT+0xd8>)
 800c330:	4293      	cmp	r3, r2
 800c332:	d013      	beq.n	800c35c <HAL_TIM_Base_Start_IT+0x80>
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	4a1f      	ldr	r2, [pc, #124]	; (800c3b8 <HAL_TIM_Base_Start_IT+0xdc>)
 800c33a:	4293      	cmp	r3, r2
 800c33c:	d00e      	beq.n	800c35c <HAL_TIM_Base_Start_IT+0x80>
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	4a1e      	ldr	r2, [pc, #120]	; (800c3bc <HAL_TIM_Base_Start_IT+0xe0>)
 800c344:	4293      	cmp	r3, r2
 800c346:	d009      	beq.n	800c35c <HAL_TIM_Base_Start_IT+0x80>
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	4a1c      	ldr	r2, [pc, #112]	; (800c3c0 <HAL_TIM_Base_Start_IT+0xe4>)
 800c34e:	4293      	cmp	r3, r2
 800c350:	d004      	beq.n	800c35c <HAL_TIM_Base_Start_IT+0x80>
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	4a1b      	ldr	r2, [pc, #108]	; (800c3c4 <HAL_TIM_Base_Start_IT+0xe8>)
 800c358:	4293      	cmp	r3, r2
 800c35a:	d115      	bne.n	800c388 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	689a      	ldr	r2, [r3, #8]
 800c362:	4b19      	ldr	r3, [pc, #100]	; (800c3c8 <HAL_TIM_Base_Start_IT+0xec>)
 800c364:	4013      	ands	r3, r2
 800c366:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	2b06      	cmp	r3, #6
 800c36c:	d015      	beq.n	800c39a <HAL_TIM_Base_Start_IT+0xbe>
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c374:	d011      	beq.n	800c39a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	681a      	ldr	r2, [r3, #0]
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	f042 0201 	orr.w	r2, r2, #1
 800c384:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c386:	e008      	b.n	800c39a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	681a      	ldr	r2, [r3, #0]
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	f042 0201 	orr.w	r2, r2, #1
 800c396:	601a      	str	r2, [r3, #0]
 800c398:	e000      	b.n	800c39c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c39a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c39c:	2300      	movs	r3, #0
}
 800c39e:	4618      	mov	r0, r3
 800c3a0:	3714      	adds	r7, #20
 800c3a2:	46bd      	mov	sp, r7
 800c3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a8:	4770      	bx	lr
 800c3aa:	bf00      	nop
 800c3ac:	40010000 	.word	0x40010000
 800c3b0:	40000400 	.word	0x40000400
 800c3b4:	40000800 	.word	0x40000800
 800c3b8:	40000c00 	.word	0x40000c00
 800c3bc:	40010400 	.word	0x40010400
 800c3c0:	40001800 	.word	0x40001800
 800c3c4:	40014000 	.word	0x40014000
 800c3c8:	00010007 	.word	0x00010007

0800c3cc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c3cc:	b580      	push	{r7, lr}
 800c3ce:	b082      	sub	sp, #8
 800c3d0:	af00      	add	r7, sp, #0
 800c3d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d101      	bne.n	800c3de <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c3da:	2301      	movs	r3, #1
 800c3dc:	e049      	b.n	800c472 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c3e4:	b2db      	uxtb	r3, r3
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d106      	bne.n	800c3f8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	2200      	movs	r2, #0
 800c3ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c3f2:	6878      	ldr	r0, [r7, #4]
 800c3f4:	f000 f841 	bl	800c47a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	2202      	movs	r2, #2
 800c3fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	681a      	ldr	r2, [r3, #0]
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	3304      	adds	r3, #4
 800c408:	4619      	mov	r1, r3
 800c40a:	4610      	mov	r0, r2
 800c40c:	f000 fdf6 	bl	800cffc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	2201      	movs	r2, #1
 800c414:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	2201      	movs	r2, #1
 800c41c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	2201      	movs	r2, #1
 800c424:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	2201      	movs	r2, #1
 800c42c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	2201      	movs	r2, #1
 800c434:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	2201      	movs	r2, #1
 800c43c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	2201      	movs	r2, #1
 800c444:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	2201      	movs	r2, #1
 800c44c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	2201      	movs	r2, #1
 800c454:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	2201      	movs	r2, #1
 800c45c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	2201      	movs	r2, #1
 800c464:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	2201      	movs	r2, #1
 800c46c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c470:	2300      	movs	r3, #0
}
 800c472:	4618      	mov	r0, r3
 800c474:	3708      	adds	r7, #8
 800c476:	46bd      	mov	sp, r7
 800c478:	bd80      	pop	{r7, pc}

0800c47a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800c47a:	b480      	push	{r7}
 800c47c:	b083      	sub	sp, #12
 800c47e:	af00      	add	r7, sp, #0
 800c480:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800c482:	bf00      	nop
 800c484:	370c      	adds	r7, #12
 800c486:	46bd      	mov	sp, r7
 800c488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c48c:	4770      	bx	lr
	...

0800c490 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c490:	b580      	push	{r7, lr}
 800c492:	b084      	sub	sp, #16
 800c494:	af00      	add	r7, sp, #0
 800c496:	6078      	str	r0, [r7, #4]
 800c498:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c49a:	683b      	ldr	r3, [r7, #0]
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d109      	bne.n	800c4b4 <HAL_TIM_PWM_Start+0x24>
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c4a6:	b2db      	uxtb	r3, r3
 800c4a8:	2b01      	cmp	r3, #1
 800c4aa:	bf14      	ite	ne
 800c4ac:	2301      	movne	r3, #1
 800c4ae:	2300      	moveq	r3, #0
 800c4b0:	b2db      	uxtb	r3, r3
 800c4b2:	e03c      	b.n	800c52e <HAL_TIM_PWM_Start+0x9e>
 800c4b4:	683b      	ldr	r3, [r7, #0]
 800c4b6:	2b04      	cmp	r3, #4
 800c4b8:	d109      	bne.n	800c4ce <HAL_TIM_PWM_Start+0x3e>
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800c4c0:	b2db      	uxtb	r3, r3
 800c4c2:	2b01      	cmp	r3, #1
 800c4c4:	bf14      	ite	ne
 800c4c6:	2301      	movne	r3, #1
 800c4c8:	2300      	moveq	r3, #0
 800c4ca:	b2db      	uxtb	r3, r3
 800c4cc:	e02f      	b.n	800c52e <HAL_TIM_PWM_Start+0x9e>
 800c4ce:	683b      	ldr	r3, [r7, #0]
 800c4d0:	2b08      	cmp	r3, #8
 800c4d2:	d109      	bne.n	800c4e8 <HAL_TIM_PWM_Start+0x58>
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c4da:	b2db      	uxtb	r3, r3
 800c4dc:	2b01      	cmp	r3, #1
 800c4de:	bf14      	ite	ne
 800c4e0:	2301      	movne	r3, #1
 800c4e2:	2300      	moveq	r3, #0
 800c4e4:	b2db      	uxtb	r3, r3
 800c4e6:	e022      	b.n	800c52e <HAL_TIM_PWM_Start+0x9e>
 800c4e8:	683b      	ldr	r3, [r7, #0]
 800c4ea:	2b0c      	cmp	r3, #12
 800c4ec:	d109      	bne.n	800c502 <HAL_TIM_PWM_Start+0x72>
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c4f4:	b2db      	uxtb	r3, r3
 800c4f6:	2b01      	cmp	r3, #1
 800c4f8:	bf14      	ite	ne
 800c4fa:	2301      	movne	r3, #1
 800c4fc:	2300      	moveq	r3, #0
 800c4fe:	b2db      	uxtb	r3, r3
 800c500:	e015      	b.n	800c52e <HAL_TIM_PWM_Start+0x9e>
 800c502:	683b      	ldr	r3, [r7, #0]
 800c504:	2b10      	cmp	r3, #16
 800c506:	d109      	bne.n	800c51c <HAL_TIM_PWM_Start+0x8c>
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c50e:	b2db      	uxtb	r3, r3
 800c510:	2b01      	cmp	r3, #1
 800c512:	bf14      	ite	ne
 800c514:	2301      	movne	r3, #1
 800c516:	2300      	moveq	r3, #0
 800c518:	b2db      	uxtb	r3, r3
 800c51a:	e008      	b.n	800c52e <HAL_TIM_PWM_Start+0x9e>
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c522:	b2db      	uxtb	r3, r3
 800c524:	2b01      	cmp	r3, #1
 800c526:	bf14      	ite	ne
 800c528:	2301      	movne	r3, #1
 800c52a:	2300      	moveq	r3, #0
 800c52c:	b2db      	uxtb	r3, r3
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d001      	beq.n	800c536 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800c532:	2301      	movs	r3, #1
 800c534:	e0a1      	b.n	800c67a <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c536:	683b      	ldr	r3, [r7, #0]
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d104      	bne.n	800c546 <HAL_TIM_PWM_Start+0xb6>
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	2202      	movs	r2, #2
 800c540:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c544:	e023      	b.n	800c58e <HAL_TIM_PWM_Start+0xfe>
 800c546:	683b      	ldr	r3, [r7, #0]
 800c548:	2b04      	cmp	r3, #4
 800c54a:	d104      	bne.n	800c556 <HAL_TIM_PWM_Start+0xc6>
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	2202      	movs	r2, #2
 800c550:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c554:	e01b      	b.n	800c58e <HAL_TIM_PWM_Start+0xfe>
 800c556:	683b      	ldr	r3, [r7, #0]
 800c558:	2b08      	cmp	r3, #8
 800c55a:	d104      	bne.n	800c566 <HAL_TIM_PWM_Start+0xd6>
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	2202      	movs	r2, #2
 800c560:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c564:	e013      	b.n	800c58e <HAL_TIM_PWM_Start+0xfe>
 800c566:	683b      	ldr	r3, [r7, #0]
 800c568:	2b0c      	cmp	r3, #12
 800c56a:	d104      	bne.n	800c576 <HAL_TIM_PWM_Start+0xe6>
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	2202      	movs	r2, #2
 800c570:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c574:	e00b      	b.n	800c58e <HAL_TIM_PWM_Start+0xfe>
 800c576:	683b      	ldr	r3, [r7, #0]
 800c578:	2b10      	cmp	r3, #16
 800c57a:	d104      	bne.n	800c586 <HAL_TIM_PWM_Start+0xf6>
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	2202      	movs	r2, #2
 800c580:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c584:	e003      	b.n	800c58e <HAL_TIM_PWM_Start+0xfe>
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	2202      	movs	r2, #2
 800c58a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	2201      	movs	r2, #1
 800c594:	6839      	ldr	r1, [r7, #0]
 800c596:	4618      	mov	r0, r3
 800c598:	f001 f93e 	bl	800d818 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	4a38      	ldr	r2, [pc, #224]	; (800c684 <HAL_TIM_PWM_Start+0x1f4>)
 800c5a2:	4293      	cmp	r3, r2
 800c5a4:	d013      	beq.n	800c5ce <HAL_TIM_PWM_Start+0x13e>
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	4a37      	ldr	r2, [pc, #220]	; (800c688 <HAL_TIM_PWM_Start+0x1f8>)
 800c5ac:	4293      	cmp	r3, r2
 800c5ae:	d00e      	beq.n	800c5ce <HAL_TIM_PWM_Start+0x13e>
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	4a35      	ldr	r2, [pc, #212]	; (800c68c <HAL_TIM_PWM_Start+0x1fc>)
 800c5b6:	4293      	cmp	r3, r2
 800c5b8:	d009      	beq.n	800c5ce <HAL_TIM_PWM_Start+0x13e>
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	4a34      	ldr	r2, [pc, #208]	; (800c690 <HAL_TIM_PWM_Start+0x200>)
 800c5c0:	4293      	cmp	r3, r2
 800c5c2:	d004      	beq.n	800c5ce <HAL_TIM_PWM_Start+0x13e>
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	4a32      	ldr	r2, [pc, #200]	; (800c694 <HAL_TIM_PWM_Start+0x204>)
 800c5ca:	4293      	cmp	r3, r2
 800c5cc:	d101      	bne.n	800c5d2 <HAL_TIM_PWM_Start+0x142>
 800c5ce:	2301      	movs	r3, #1
 800c5d0:	e000      	b.n	800c5d4 <HAL_TIM_PWM_Start+0x144>
 800c5d2:	2300      	movs	r3, #0
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d007      	beq.n	800c5e8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c5e6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	4a25      	ldr	r2, [pc, #148]	; (800c684 <HAL_TIM_PWM_Start+0x1f4>)
 800c5ee:	4293      	cmp	r3, r2
 800c5f0:	d022      	beq.n	800c638 <HAL_TIM_PWM_Start+0x1a8>
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c5fa:	d01d      	beq.n	800c638 <HAL_TIM_PWM_Start+0x1a8>
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	4a25      	ldr	r2, [pc, #148]	; (800c698 <HAL_TIM_PWM_Start+0x208>)
 800c602:	4293      	cmp	r3, r2
 800c604:	d018      	beq.n	800c638 <HAL_TIM_PWM_Start+0x1a8>
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	4a24      	ldr	r2, [pc, #144]	; (800c69c <HAL_TIM_PWM_Start+0x20c>)
 800c60c:	4293      	cmp	r3, r2
 800c60e:	d013      	beq.n	800c638 <HAL_TIM_PWM_Start+0x1a8>
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	4a22      	ldr	r2, [pc, #136]	; (800c6a0 <HAL_TIM_PWM_Start+0x210>)
 800c616:	4293      	cmp	r3, r2
 800c618:	d00e      	beq.n	800c638 <HAL_TIM_PWM_Start+0x1a8>
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	4a1a      	ldr	r2, [pc, #104]	; (800c688 <HAL_TIM_PWM_Start+0x1f8>)
 800c620:	4293      	cmp	r3, r2
 800c622:	d009      	beq.n	800c638 <HAL_TIM_PWM_Start+0x1a8>
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	4a1e      	ldr	r2, [pc, #120]	; (800c6a4 <HAL_TIM_PWM_Start+0x214>)
 800c62a:	4293      	cmp	r3, r2
 800c62c:	d004      	beq.n	800c638 <HAL_TIM_PWM_Start+0x1a8>
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	4a16      	ldr	r2, [pc, #88]	; (800c68c <HAL_TIM_PWM_Start+0x1fc>)
 800c634:	4293      	cmp	r3, r2
 800c636:	d115      	bne.n	800c664 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	689a      	ldr	r2, [r3, #8]
 800c63e:	4b1a      	ldr	r3, [pc, #104]	; (800c6a8 <HAL_TIM_PWM_Start+0x218>)
 800c640:	4013      	ands	r3, r2
 800c642:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	2b06      	cmp	r3, #6
 800c648:	d015      	beq.n	800c676 <HAL_TIM_PWM_Start+0x1e6>
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c650:	d011      	beq.n	800c676 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	681a      	ldr	r2, [r3, #0]
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	f042 0201 	orr.w	r2, r2, #1
 800c660:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c662:	e008      	b.n	800c676 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	681a      	ldr	r2, [r3, #0]
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	f042 0201 	orr.w	r2, r2, #1
 800c672:	601a      	str	r2, [r3, #0]
 800c674:	e000      	b.n	800c678 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c676:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c678:	2300      	movs	r3, #0
}
 800c67a:	4618      	mov	r0, r3
 800c67c:	3710      	adds	r7, #16
 800c67e:	46bd      	mov	sp, r7
 800c680:	bd80      	pop	{r7, pc}
 800c682:	bf00      	nop
 800c684:	40010000 	.word	0x40010000
 800c688:	40010400 	.word	0x40010400
 800c68c:	40014000 	.word	0x40014000
 800c690:	40014400 	.word	0x40014400
 800c694:	40014800 	.word	0x40014800
 800c698:	40000400 	.word	0x40000400
 800c69c:	40000800 	.word	0x40000800
 800c6a0:	40000c00 	.word	0x40000c00
 800c6a4:	40001800 	.word	0x40001800
 800c6a8:	00010007 	.word	0x00010007

0800c6ac <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800c6ac:	b580      	push	{r7, lr}
 800c6ae:	b086      	sub	sp, #24
 800c6b0:	af00      	add	r7, sp, #0
 800c6b2:	6078      	str	r0, [r7, #4]
 800c6b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d101      	bne.n	800c6c0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800c6bc:	2301      	movs	r3, #1
 800c6be:	e08f      	b.n	800c7e0 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c6c6:	b2db      	uxtb	r3, r3
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d106      	bne.n	800c6da <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	2200      	movs	r2, #0
 800c6d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800c6d4:	6878      	ldr	r0, [r7, #4]
 800c6d6:	f7f6 fdc5 	bl	8003264 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	2202      	movs	r2, #2
 800c6de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	6899      	ldr	r1, [r3, #8]
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	681a      	ldr	r2, [r3, #0]
 800c6ec:	4b3e      	ldr	r3, [pc, #248]	; (800c7e8 <HAL_TIM_Encoder_Init+0x13c>)
 800c6ee:	400b      	ands	r3, r1
 800c6f0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	681a      	ldr	r2, [r3, #0]
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	3304      	adds	r3, #4
 800c6fa:	4619      	mov	r1, r3
 800c6fc:	4610      	mov	r0, r2
 800c6fe:	f000 fc7d 	bl	800cffc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	689b      	ldr	r3, [r3, #8]
 800c708:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	699b      	ldr	r3, [r3, #24]
 800c710:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	6a1b      	ldr	r3, [r3, #32]
 800c718:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800c71a:	683b      	ldr	r3, [r7, #0]
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	697a      	ldr	r2, [r7, #20]
 800c720:	4313      	orrs	r3, r2
 800c722:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800c724:	693a      	ldr	r2, [r7, #16]
 800c726:	4b31      	ldr	r3, [pc, #196]	; (800c7ec <HAL_TIM_Encoder_Init+0x140>)
 800c728:	4013      	ands	r3, r2
 800c72a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800c72c:	683b      	ldr	r3, [r7, #0]
 800c72e:	689a      	ldr	r2, [r3, #8]
 800c730:	683b      	ldr	r3, [r7, #0]
 800c732:	699b      	ldr	r3, [r3, #24]
 800c734:	021b      	lsls	r3, r3, #8
 800c736:	4313      	orrs	r3, r2
 800c738:	693a      	ldr	r2, [r7, #16]
 800c73a:	4313      	orrs	r3, r2
 800c73c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800c73e:	693a      	ldr	r2, [r7, #16]
 800c740:	4b2b      	ldr	r3, [pc, #172]	; (800c7f0 <HAL_TIM_Encoder_Init+0x144>)
 800c742:	4013      	ands	r3, r2
 800c744:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800c746:	693a      	ldr	r2, [r7, #16]
 800c748:	4b2a      	ldr	r3, [pc, #168]	; (800c7f4 <HAL_TIM_Encoder_Init+0x148>)
 800c74a:	4013      	ands	r3, r2
 800c74c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800c74e:	683b      	ldr	r3, [r7, #0]
 800c750:	68da      	ldr	r2, [r3, #12]
 800c752:	683b      	ldr	r3, [r7, #0]
 800c754:	69db      	ldr	r3, [r3, #28]
 800c756:	021b      	lsls	r3, r3, #8
 800c758:	4313      	orrs	r3, r2
 800c75a:	693a      	ldr	r2, [r7, #16]
 800c75c:	4313      	orrs	r3, r2
 800c75e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800c760:	683b      	ldr	r3, [r7, #0]
 800c762:	691b      	ldr	r3, [r3, #16]
 800c764:	011a      	lsls	r2, r3, #4
 800c766:	683b      	ldr	r3, [r7, #0]
 800c768:	6a1b      	ldr	r3, [r3, #32]
 800c76a:	031b      	lsls	r3, r3, #12
 800c76c:	4313      	orrs	r3, r2
 800c76e:	693a      	ldr	r2, [r7, #16]
 800c770:	4313      	orrs	r3, r2
 800c772:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800c77a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800c782:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800c784:	683b      	ldr	r3, [r7, #0]
 800c786:	685a      	ldr	r2, [r3, #4]
 800c788:	683b      	ldr	r3, [r7, #0]
 800c78a:	695b      	ldr	r3, [r3, #20]
 800c78c:	011b      	lsls	r3, r3, #4
 800c78e:	4313      	orrs	r3, r2
 800c790:	68fa      	ldr	r2, [r7, #12]
 800c792:	4313      	orrs	r3, r2
 800c794:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	697a      	ldr	r2, [r7, #20]
 800c79c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	693a      	ldr	r2, [r7, #16]
 800c7a4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	68fa      	ldr	r2, [r7, #12]
 800c7ac:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	2201      	movs	r2, #1
 800c7b2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	2201      	movs	r2, #1
 800c7ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	2201      	movs	r2, #1
 800c7c2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	2201      	movs	r2, #1
 800c7ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	2201      	movs	r2, #1
 800c7d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	2201      	movs	r2, #1
 800c7da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c7de:	2300      	movs	r3, #0
}
 800c7e0:	4618      	mov	r0, r3
 800c7e2:	3718      	adds	r7, #24
 800c7e4:	46bd      	mov	sp, r7
 800c7e6:	bd80      	pop	{r7, pc}
 800c7e8:	fffebff8 	.word	0xfffebff8
 800c7ec:	fffffcfc 	.word	0xfffffcfc
 800c7f0:	fffff3f3 	.word	0xfffff3f3
 800c7f4:	ffff0f0f 	.word	0xffff0f0f

0800c7f8 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c7f8:	b580      	push	{r7, lr}
 800c7fa:	b084      	sub	sp, #16
 800c7fc:	af00      	add	r7, sp, #0
 800c7fe:	6078      	str	r0, [r7, #4]
 800c800:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c808:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800c810:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c818:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c820:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800c822:	683b      	ldr	r3, [r7, #0]
 800c824:	2b00      	cmp	r3, #0
 800c826:	d110      	bne.n	800c84a <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800c828:	7bfb      	ldrb	r3, [r7, #15]
 800c82a:	2b01      	cmp	r3, #1
 800c82c:	d102      	bne.n	800c834 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800c82e:	7b7b      	ldrb	r3, [r7, #13]
 800c830:	2b01      	cmp	r3, #1
 800c832:	d001      	beq.n	800c838 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 800c834:	2301      	movs	r3, #1
 800c836:	e089      	b.n	800c94c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	2202      	movs	r2, #2
 800c83c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	2202      	movs	r2, #2
 800c844:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c848:	e031      	b.n	800c8ae <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800c84a:	683b      	ldr	r3, [r7, #0]
 800c84c:	2b04      	cmp	r3, #4
 800c84e:	d110      	bne.n	800c872 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800c850:	7bbb      	ldrb	r3, [r7, #14]
 800c852:	2b01      	cmp	r3, #1
 800c854:	d102      	bne.n	800c85c <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800c856:	7b3b      	ldrb	r3, [r7, #12]
 800c858:	2b01      	cmp	r3, #1
 800c85a:	d001      	beq.n	800c860 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 800c85c:	2301      	movs	r3, #1
 800c85e:	e075      	b.n	800c94c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	2202      	movs	r2, #2
 800c864:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	2202      	movs	r2, #2
 800c86c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c870:	e01d      	b.n	800c8ae <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800c872:	7bfb      	ldrb	r3, [r7, #15]
 800c874:	2b01      	cmp	r3, #1
 800c876:	d108      	bne.n	800c88a <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800c878:	7bbb      	ldrb	r3, [r7, #14]
 800c87a:	2b01      	cmp	r3, #1
 800c87c:	d105      	bne.n	800c88a <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800c87e:	7b7b      	ldrb	r3, [r7, #13]
 800c880:	2b01      	cmp	r3, #1
 800c882:	d102      	bne.n	800c88a <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800c884:	7b3b      	ldrb	r3, [r7, #12]
 800c886:	2b01      	cmp	r3, #1
 800c888:	d001      	beq.n	800c88e <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 800c88a:	2301      	movs	r3, #1
 800c88c:	e05e      	b.n	800c94c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	2202      	movs	r2, #2
 800c892:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	2202      	movs	r2, #2
 800c89a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	2202      	movs	r2, #2
 800c8a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	2202      	movs	r2, #2
 800c8aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 800c8ae:	683b      	ldr	r3, [r7, #0]
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d003      	beq.n	800c8bc <HAL_TIM_Encoder_Start_IT+0xc4>
 800c8b4:	683b      	ldr	r3, [r7, #0]
 800c8b6:	2b04      	cmp	r3, #4
 800c8b8:	d010      	beq.n	800c8dc <HAL_TIM_Encoder_Start_IT+0xe4>
 800c8ba:	e01f      	b.n	800c8fc <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	2201      	movs	r2, #1
 800c8c2:	2100      	movs	r1, #0
 800c8c4:	4618      	mov	r0, r3
 800c8c6:	f000 ffa7 	bl	800d818 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	68da      	ldr	r2, [r3, #12]
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	f042 0202 	orr.w	r2, r2, #2
 800c8d8:	60da      	str	r2, [r3, #12]
      break;
 800c8da:	e02e      	b.n	800c93a <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	2201      	movs	r2, #1
 800c8e2:	2104      	movs	r1, #4
 800c8e4:	4618      	mov	r0, r3
 800c8e6:	f000 ff97 	bl	800d818 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	68da      	ldr	r2, [r3, #12]
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	f042 0204 	orr.w	r2, r2, #4
 800c8f8:	60da      	str	r2, [r3, #12]
      break;
 800c8fa:	e01e      	b.n	800c93a <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	2201      	movs	r2, #1
 800c902:	2100      	movs	r1, #0
 800c904:	4618      	mov	r0, r3
 800c906:	f000 ff87 	bl	800d818 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	2201      	movs	r2, #1
 800c910:	2104      	movs	r1, #4
 800c912:	4618      	mov	r0, r3
 800c914:	f000 ff80 	bl	800d818 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	68da      	ldr	r2, [r3, #12]
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	f042 0202 	orr.w	r2, r2, #2
 800c926:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	68da      	ldr	r2, [r3, #12]
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	f042 0204 	orr.w	r2, r2, #4
 800c936:	60da      	str	r2, [r3, #12]
      break;
 800c938:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	681a      	ldr	r2, [r3, #0]
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	f042 0201 	orr.w	r2, r2, #1
 800c948:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800c94a:	2300      	movs	r3, #0
}
 800c94c:	4618      	mov	r0, r3
 800c94e:	3710      	adds	r7, #16
 800c950:	46bd      	mov	sp, r7
 800c952:	bd80      	pop	{r7, pc}

0800c954 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c954:	b580      	push	{r7, lr}
 800c956:	b082      	sub	sp, #8
 800c958:	af00      	add	r7, sp, #0
 800c95a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	691b      	ldr	r3, [r3, #16]
 800c962:	f003 0302 	and.w	r3, r3, #2
 800c966:	2b02      	cmp	r3, #2
 800c968:	d122      	bne.n	800c9b0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	68db      	ldr	r3, [r3, #12]
 800c970:	f003 0302 	and.w	r3, r3, #2
 800c974:	2b02      	cmp	r3, #2
 800c976:	d11b      	bne.n	800c9b0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	f06f 0202 	mvn.w	r2, #2
 800c980:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	2201      	movs	r2, #1
 800c986:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	699b      	ldr	r3, [r3, #24]
 800c98e:	f003 0303 	and.w	r3, r3, #3
 800c992:	2b00      	cmp	r3, #0
 800c994:	d003      	beq.n	800c99e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c996:	6878      	ldr	r0, [r7, #4]
 800c998:	f000 fb12 	bl	800cfc0 <HAL_TIM_IC_CaptureCallback>
 800c99c:	e005      	b.n	800c9aa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c99e:	6878      	ldr	r0, [r7, #4]
 800c9a0:	f000 fb04 	bl	800cfac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c9a4:	6878      	ldr	r0, [r7, #4]
 800c9a6:	f000 fb15 	bl	800cfd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	2200      	movs	r2, #0
 800c9ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	691b      	ldr	r3, [r3, #16]
 800c9b6:	f003 0304 	and.w	r3, r3, #4
 800c9ba:	2b04      	cmp	r3, #4
 800c9bc:	d122      	bne.n	800ca04 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	68db      	ldr	r3, [r3, #12]
 800c9c4:	f003 0304 	and.w	r3, r3, #4
 800c9c8:	2b04      	cmp	r3, #4
 800c9ca:	d11b      	bne.n	800ca04 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	f06f 0204 	mvn.w	r2, #4
 800c9d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	2202      	movs	r2, #2
 800c9da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	699b      	ldr	r3, [r3, #24]
 800c9e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d003      	beq.n	800c9f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c9ea:	6878      	ldr	r0, [r7, #4]
 800c9ec:	f000 fae8 	bl	800cfc0 <HAL_TIM_IC_CaptureCallback>
 800c9f0:	e005      	b.n	800c9fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c9f2:	6878      	ldr	r0, [r7, #4]
 800c9f4:	f000 fada 	bl	800cfac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c9f8:	6878      	ldr	r0, [r7, #4]
 800c9fa:	f000 faeb 	bl	800cfd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	2200      	movs	r2, #0
 800ca02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	691b      	ldr	r3, [r3, #16]
 800ca0a:	f003 0308 	and.w	r3, r3, #8
 800ca0e:	2b08      	cmp	r3, #8
 800ca10:	d122      	bne.n	800ca58 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	68db      	ldr	r3, [r3, #12]
 800ca18:	f003 0308 	and.w	r3, r3, #8
 800ca1c:	2b08      	cmp	r3, #8
 800ca1e:	d11b      	bne.n	800ca58 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	f06f 0208 	mvn.w	r2, #8
 800ca28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	2204      	movs	r2, #4
 800ca2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	69db      	ldr	r3, [r3, #28]
 800ca36:	f003 0303 	and.w	r3, r3, #3
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d003      	beq.n	800ca46 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ca3e:	6878      	ldr	r0, [r7, #4]
 800ca40:	f000 fabe 	bl	800cfc0 <HAL_TIM_IC_CaptureCallback>
 800ca44:	e005      	b.n	800ca52 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ca46:	6878      	ldr	r0, [r7, #4]
 800ca48:	f000 fab0 	bl	800cfac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ca4c:	6878      	ldr	r0, [r7, #4]
 800ca4e:	f000 fac1 	bl	800cfd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	2200      	movs	r2, #0
 800ca56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	691b      	ldr	r3, [r3, #16]
 800ca5e:	f003 0310 	and.w	r3, r3, #16
 800ca62:	2b10      	cmp	r3, #16
 800ca64:	d122      	bne.n	800caac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	68db      	ldr	r3, [r3, #12]
 800ca6c:	f003 0310 	and.w	r3, r3, #16
 800ca70:	2b10      	cmp	r3, #16
 800ca72:	d11b      	bne.n	800caac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	f06f 0210 	mvn.w	r2, #16
 800ca7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	2208      	movs	r2, #8
 800ca82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	69db      	ldr	r3, [r3, #28]
 800ca8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d003      	beq.n	800ca9a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ca92:	6878      	ldr	r0, [r7, #4]
 800ca94:	f000 fa94 	bl	800cfc0 <HAL_TIM_IC_CaptureCallback>
 800ca98:	e005      	b.n	800caa6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ca9a:	6878      	ldr	r0, [r7, #4]
 800ca9c:	f000 fa86 	bl	800cfac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800caa0:	6878      	ldr	r0, [r7, #4]
 800caa2:	f000 fa97 	bl	800cfd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	2200      	movs	r2, #0
 800caaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	691b      	ldr	r3, [r3, #16]
 800cab2:	f003 0301 	and.w	r3, r3, #1
 800cab6:	2b01      	cmp	r3, #1
 800cab8:	d10e      	bne.n	800cad8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	68db      	ldr	r3, [r3, #12]
 800cac0:	f003 0301 	and.w	r3, r3, #1
 800cac4:	2b01      	cmp	r3, #1
 800cac6:	d107      	bne.n	800cad8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	f06f 0201 	mvn.w	r2, #1
 800cad0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800cad2:	6878      	ldr	r0, [r7, #4]
 800cad4:	f7f6 fa2e 	bl	8002f34 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	691b      	ldr	r3, [r3, #16]
 800cade:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cae2:	2b80      	cmp	r3, #128	; 0x80
 800cae4:	d10e      	bne.n	800cb04 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	68db      	ldr	r3, [r3, #12]
 800caec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800caf0:	2b80      	cmp	r3, #128	; 0x80
 800caf2:	d107      	bne.n	800cb04 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800cafc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800cafe:	6878      	ldr	r0, [r7, #4]
 800cb00:	f000 ff48 	bl	800d994 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	691b      	ldr	r3, [r3, #16]
 800cb0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cb0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cb12:	d10e      	bne.n	800cb32 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	68db      	ldr	r3, [r3, #12]
 800cb1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cb1e:	2b80      	cmp	r3, #128	; 0x80
 800cb20:	d107      	bne.n	800cb32 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800cb2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800cb2c:	6878      	ldr	r0, [r7, #4]
 800cb2e:	f000 ff3b 	bl	800d9a8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	691b      	ldr	r3, [r3, #16]
 800cb38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cb3c:	2b40      	cmp	r3, #64	; 0x40
 800cb3e:	d10e      	bne.n	800cb5e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	68db      	ldr	r3, [r3, #12]
 800cb46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cb4a:	2b40      	cmp	r3, #64	; 0x40
 800cb4c:	d107      	bne.n	800cb5e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800cb56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800cb58:	6878      	ldr	r0, [r7, #4]
 800cb5a:	f000 fa45 	bl	800cfe8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	691b      	ldr	r3, [r3, #16]
 800cb64:	f003 0320 	and.w	r3, r3, #32
 800cb68:	2b20      	cmp	r3, #32
 800cb6a:	d10e      	bne.n	800cb8a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	68db      	ldr	r3, [r3, #12]
 800cb72:	f003 0320 	and.w	r3, r3, #32
 800cb76:	2b20      	cmp	r3, #32
 800cb78:	d107      	bne.n	800cb8a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	f06f 0220 	mvn.w	r2, #32
 800cb82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800cb84:	6878      	ldr	r0, [r7, #4]
 800cb86:	f000 fefb 	bl	800d980 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800cb8a:	bf00      	nop
 800cb8c:	3708      	adds	r7, #8
 800cb8e:	46bd      	mov	sp, r7
 800cb90:	bd80      	pop	{r7, pc}
	...

0800cb94 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800cb94:	b580      	push	{r7, lr}
 800cb96:	b086      	sub	sp, #24
 800cb98:	af00      	add	r7, sp, #0
 800cb9a:	60f8      	str	r0, [r7, #12]
 800cb9c:	60b9      	str	r1, [r7, #8]
 800cb9e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800cba0:	2300      	movs	r3, #0
 800cba2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cbaa:	2b01      	cmp	r3, #1
 800cbac:	d101      	bne.n	800cbb2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800cbae:	2302      	movs	r3, #2
 800cbb0:	e0ff      	b.n	800cdb2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	2201      	movs	r2, #1
 800cbb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	2b14      	cmp	r3, #20
 800cbbe:	f200 80f0 	bhi.w	800cda2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800cbc2:	a201      	add	r2, pc, #4	; (adr r2, 800cbc8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800cbc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbc8:	0800cc1d 	.word	0x0800cc1d
 800cbcc:	0800cda3 	.word	0x0800cda3
 800cbd0:	0800cda3 	.word	0x0800cda3
 800cbd4:	0800cda3 	.word	0x0800cda3
 800cbd8:	0800cc5d 	.word	0x0800cc5d
 800cbdc:	0800cda3 	.word	0x0800cda3
 800cbe0:	0800cda3 	.word	0x0800cda3
 800cbe4:	0800cda3 	.word	0x0800cda3
 800cbe8:	0800cc9f 	.word	0x0800cc9f
 800cbec:	0800cda3 	.word	0x0800cda3
 800cbf0:	0800cda3 	.word	0x0800cda3
 800cbf4:	0800cda3 	.word	0x0800cda3
 800cbf8:	0800ccdf 	.word	0x0800ccdf
 800cbfc:	0800cda3 	.word	0x0800cda3
 800cc00:	0800cda3 	.word	0x0800cda3
 800cc04:	0800cda3 	.word	0x0800cda3
 800cc08:	0800cd21 	.word	0x0800cd21
 800cc0c:	0800cda3 	.word	0x0800cda3
 800cc10:	0800cda3 	.word	0x0800cda3
 800cc14:	0800cda3 	.word	0x0800cda3
 800cc18:	0800cd61 	.word	0x0800cd61
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	68b9      	ldr	r1, [r7, #8]
 800cc22:	4618      	mov	r0, r3
 800cc24:	f000 fa84 	bl	800d130 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	699a      	ldr	r2, [r3, #24]
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	f042 0208 	orr.w	r2, r2, #8
 800cc36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	699a      	ldr	r2, [r3, #24]
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	f022 0204 	bic.w	r2, r2, #4
 800cc46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	6999      	ldr	r1, [r3, #24]
 800cc4e:	68bb      	ldr	r3, [r7, #8]
 800cc50:	691a      	ldr	r2, [r3, #16]
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	430a      	orrs	r2, r1
 800cc58:	619a      	str	r2, [r3, #24]
      break;
 800cc5a:	e0a5      	b.n	800cda8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	68b9      	ldr	r1, [r7, #8]
 800cc62:	4618      	mov	r0, r3
 800cc64:	f000 faf4 	bl	800d250 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	699a      	ldr	r2, [r3, #24]
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cc76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	699a      	ldr	r2, [r3, #24]
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cc86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	6999      	ldr	r1, [r3, #24]
 800cc8e:	68bb      	ldr	r3, [r7, #8]
 800cc90:	691b      	ldr	r3, [r3, #16]
 800cc92:	021a      	lsls	r2, r3, #8
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	430a      	orrs	r2, r1
 800cc9a:	619a      	str	r2, [r3, #24]
      break;
 800cc9c:	e084      	b.n	800cda8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	68b9      	ldr	r1, [r7, #8]
 800cca4:	4618      	mov	r0, r3
 800cca6:	f000 fb5d 	bl	800d364 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ccaa:	68fb      	ldr	r3, [r7, #12]
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	69da      	ldr	r2, [r3, #28]
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	f042 0208 	orr.w	r2, r2, #8
 800ccb8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	69da      	ldr	r2, [r3, #28]
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	f022 0204 	bic.w	r2, r2, #4
 800ccc8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	69d9      	ldr	r1, [r3, #28]
 800ccd0:	68bb      	ldr	r3, [r7, #8]
 800ccd2:	691a      	ldr	r2, [r3, #16]
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	430a      	orrs	r2, r1
 800ccda:	61da      	str	r2, [r3, #28]
      break;
 800ccdc:	e064      	b.n	800cda8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	68b9      	ldr	r1, [r7, #8]
 800cce4:	4618      	mov	r0, r3
 800cce6:	f000 fbc5 	bl	800d474 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	69da      	ldr	r2, [r3, #28]
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ccf8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	69da      	ldr	r2, [r3, #28]
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cd08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	69d9      	ldr	r1, [r3, #28]
 800cd10:	68bb      	ldr	r3, [r7, #8]
 800cd12:	691b      	ldr	r3, [r3, #16]
 800cd14:	021a      	lsls	r2, r3, #8
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	430a      	orrs	r2, r1
 800cd1c:	61da      	str	r2, [r3, #28]
      break;
 800cd1e:	e043      	b.n	800cda8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	68b9      	ldr	r1, [r7, #8]
 800cd26:	4618      	mov	r0, r3
 800cd28:	f000 fc0e 	bl	800d548 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	f042 0208 	orr.w	r2, r2, #8
 800cd3a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	f022 0204 	bic.w	r2, r2, #4
 800cd4a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800cd52:	68bb      	ldr	r3, [r7, #8]
 800cd54:	691a      	ldr	r2, [r3, #16]
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	430a      	orrs	r2, r1
 800cd5c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800cd5e:	e023      	b.n	800cda8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	68b9      	ldr	r1, [r7, #8]
 800cd66:	4618      	mov	r0, r3
 800cd68:	f000 fc52 	bl	800d610 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cd7a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cd8a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800cd92:	68bb      	ldr	r3, [r7, #8]
 800cd94:	691b      	ldr	r3, [r3, #16]
 800cd96:	021a      	lsls	r2, r3, #8
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	430a      	orrs	r2, r1
 800cd9e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800cda0:	e002      	b.n	800cda8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800cda2:	2301      	movs	r3, #1
 800cda4:	75fb      	strb	r3, [r7, #23]
      break;
 800cda6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	2200      	movs	r2, #0
 800cdac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800cdb0:	7dfb      	ldrb	r3, [r7, #23]
}
 800cdb2:	4618      	mov	r0, r3
 800cdb4:	3718      	adds	r7, #24
 800cdb6:	46bd      	mov	sp, r7
 800cdb8:	bd80      	pop	{r7, pc}
 800cdba:	bf00      	nop

0800cdbc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800cdbc:	b580      	push	{r7, lr}
 800cdbe:	b084      	sub	sp, #16
 800cdc0:	af00      	add	r7, sp, #0
 800cdc2:	6078      	str	r0, [r7, #4]
 800cdc4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800cdc6:	2300      	movs	r3, #0
 800cdc8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cdd0:	2b01      	cmp	r3, #1
 800cdd2:	d101      	bne.n	800cdd8 <HAL_TIM_ConfigClockSource+0x1c>
 800cdd4:	2302      	movs	r3, #2
 800cdd6:	e0dc      	b.n	800cf92 <HAL_TIM_ConfigClockSource+0x1d6>
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	2201      	movs	r2, #1
 800cddc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	2202      	movs	r2, #2
 800cde4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	689b      	ldr	r3, [r3, #8]
 800cdee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800cdf0:	68ba      	ldr	r2, [r7, #8]
 800cdf2:	4b6a      	ldr	r3, [pc, #424]	; (800cf9c <HAL_TIM_ConfigClockSource+0x1e0>)
 800cdf4:	4013      	ands	r3, r2
 800cdf6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cdf8:	68bb      	ldr	r3, [r7, #8]
 800cdfa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800cdfe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	68ba      	ldr	r2, [r7, #8]
 800ce06:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ce08:	683b      	ldr	r3, [r7, #0]
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	4a64      	ldr	r2, [pc, #400]	; (800cfa0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800ce0e:	4293      	cmp	r3, r2
 800ce10:	f000 80a9 	beq.w	800cf66 <HAL_TIM_ConfigClockSource+0x1aa>
 800ce14:	4a62      	ldr	r2, [pc, #392]	; (800cfa0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800ce16:	4293      	cmp	r3, r2
 800ce18:	f200 80ae 	bhi.w	800cf78 <HAL_TIM_ConfigClockSource+0x1bc>
 800ce1c:	4a61      	ldr	r2, [pc, #388]	; (800cfa4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800ce1e:	4293      	cmp	r3, r2
 800ce20:	f000 80a1 	beq.w	800cf66 <HAL_TIM_ConfigClockSource+0x1aa>
 800ce24:	4a5f      	ldr	r2, [pc, #380]	; (800cfa4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800ce26:	4293      	cmp	r3, r2
 800ce28:	f200 80a6 	bhi.w	800cf78 <HAL_TIM_ConfigClockSource+0x1bc>
 800ce2c:	4a5e      	ldr	r2, [pc, #376]	; (800cfa8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800ce2e:	4293      	cmp	r3, r2
 800ce30:	f000 8099 	beq.w	800cf66 <HAL_TIM_ConfigClockSource+0x1aa>
 800ce34:	4a5c      	ldr	r2, [pc, #368]	; (800cfa8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800ce36:	4293      	cmp	r3, r2
 800ce38:	f200 809e 	bhi.w	800cf78 <HAL_TIM_ConfigClockSource+0x1bc>
 800ce3c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800ce40:	f000 8091 	beq.w	800cf66 <HAL_TIM_ConfigClockSource+0x1aa>
 800ce44:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800ce48:	f200 8096 	bhi.w	800cf78 <HAL_TIM_ConfigClockSource+0x1bc>
 800ce4c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ce50:	f000 8089 	beq.w	800cf66 <HAL_TIM_ConfigClockSource+0x1aa>
 800ce54:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ce58:	f200 808e 	bhi.w	800cf78 <HAL_TIM_ConfigClockSource+0x1bc>
 800ce5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ce60:	d03e      	beq.n	800cee0 <HAL_TIM_ConfigClockSource+0x124>
 800ce62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ce66:	f200 8087 	bhi.w	800cf78 <HAL_TIM_ConfigClockSource+0x1bc>
 800ce6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ce6e:	f000 8086 	beq.w	800cf7e <HAL_TIM_ConfigClockSource+0x1c2>
 800ce72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ce76:	d87f      	bhi.n	800cf78 <HAL_TIM_ConfigClockSource+0x1bc>
 800ce78:	2b70      	cmp	r3, #112	; 0x70
 800ce7a:	d01a      	beq.n	800ceb2 <HAL_TIM_ConfigClockSource+0xf6>
 800ce7c:	2b70      	cmp	r3, #112	; 0x70
 800ce7e:	d87b      	bhi.n	800cf78 <HAL_TIM_ConfigClockSource+0x1bc>
 800ce80:	2b60      	cmp	r3, #96	; 0x60
 800ce82:	d050      	beq.n	800cf26 <HAL_TIM_ConfigClockSource+0x16a>
 800ce84:	2b60      	cmp	r3, #96	; 0x60
 800ce86:	d877      	bhi.n	800cf78 <HAL_TIM_ConfigClockSource+0x1bc>
 800ce88:	2b50      	cmp	r3, #80	; 0x50
 800ce8a:	d03c      	beq.n	800cf06 <HAL_TIM_ConfigClockSource+0x14a>
 800ce8c:	2b50      	cmp	r3, #80	; 0x50
 800ce8e:	d873      	bhi.n	800cf78 <HAL_TIM_ConfigClockSource+0x1bc>
 800ce90:	2b40      	cmp	r3, #64	; 0x40
 800ce92:	d058      	beq.n	800cf46 <HAL_TIM_ConfigClockSource+0x18a>
 800ce94:	2b40      	cmp	r3, #64	; 0x40
 800ce96:	d86f      	bhi.n	800cf78 <HAL_TIM_ConfigClockSource+0x1bc>
 800ce98:	2b30      	cmp	r3, #48	; 0x30
 800ce9a:	d064      	beq.n	800cf66 <HAL_TIM_ConfigClockSource+0x1aa>
 800ce9c:	2b30      	cmp	r3, #48	; 0x30
 800ce9e:	d86b      	bhi.n	800cf78 <HAL_TIM_ConfigClockSource+0x1bc>
 800cea0:	2b20      	cmp	r3, #32
 800cea2:	d060      	beq.n	800cf66 <HAL_TIM_ConfigClockSource+0x1aa>
 800cea4:	2b20      	cmp	r3, #32
 800cea6:	d867      	bhi.n	800cf78 <HAL_TIM_ConfigClockSource+0x1bc>
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d05c      	beq.n	800cf66 <HAL_TIM_ConfigClockSource+0x1aa>
 800ceac:	2b10      	cmp	r3, #16
 800ceae:	d05a      	beq.n	800cf66 <HAL_TIM_ConfigClockSource+0x1aa>
 800ceb0:	e062      	b.n	800cf78 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800ceb6:	683b      	ldr	r3, [r7, #0]
 800ceb8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800ceba:	683b      	ldr	r3, [r7, #0]
 800cebc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800cebe:	683b      	ldr	r3, [r7, #0]
 800cec0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800cec2:	f000 fc89 	bl	800d7d8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	689b      	ldr	r3, [r3, #8]
 800cecc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800cece:	68bb      	ldr	r3, [r7, #8]
 800ced0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800ced4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	68ba      	ldr	r2, [r7, #8]
 800cedc:	609a      	str	r2, [r3, #8]
      break;
 800cede:	e04f      	b.n	800cf80 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800cee4:	683b      	ldr	r3, [r7, #0]
 800cee6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800cee8:	683b      	ldr	r3, [r7, #0]
 800ceea:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800ceec:	683b      	ldr	r3, [r7, #0]
 800ceee:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800cef0:	f000 fc72 	bl	800d7d8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	689a      	ldr	r2, [r3, #8]
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800cf02:	609a      	str	r2, [r3, #8]
      break;
 800cf04:	e03c      	b.n	800cf80 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800cf0a:	683b      	ldr	r3, [r7, #0]
 800cf0c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800cf0e:	683b      	ldr	r3, [r7, #0]
 800cf10:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800cf12:	461a      	mov	r2, r3
 800cf14:	f000 fbe2 	bl	800d6dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	2150      	movs	r1, #80	; 0x50
 800cf1e:	4618      	mov	r0, r3
 800cf20:	f000 fc3c 	bl	800d79c <TIM_ITRx_SetConfig>
      break;
 800cf24:	e02c      	b.n	800cf80 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800cf2a:	683b      	ldr	r3, [r7, #0]
 800cf2c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800cf2e:	683b      	ldr	r3, [r7, #0]
 800cf30:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800cf32:	461a      	mov	r2, r3
 800cf34:	f000 fc01 	bl	800d73a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	2160      	movs	r1, #96	; 0x60
 800cf3e:	4618      	mov	r0, r3
 800cf40:	f000 fc2c 	bl	800d79c <TIM_ITRx_SetConfig>
      break;
 800cf44:	e01c      	b.n	800cf80 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800cf4a:	683b      	ldr	r3, [r7, #0]
 800cf4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800cf4e:	683b      	ldr	r3, [r7, #0]
 800cf50:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800cf52:	461a      	mov	r2, r3
 800cf54:	f000 fbc2 	bl	800d6dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	2140      	movs	r1, #64	; 0x40
 800cf5e:	4618      	mov	r0, r3
 800cf60:	f000 fc1c 	bl	800d79c <TIM_ITRx_SetConfig>
      break;
 800cf64:	e00c      	b.n	800cf80 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	681a      	ldr	r2, [r3, #0]
 800cf6a:	683b      	ldr	r3, [r7, #0]
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	4619      	mov	r1, r3
 800cf70:	4610      	mov	r0, r2
 800cf72:	f000 fc13 	bl	800d79c <TIM_ITRx_SetConfig>
      break;
 800cf76:	e003      	b.n	800cf80 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800cf78:	2301      	movs	r3, #1
 800cf7a:	73fb      	strb	r3, [r7, #15]
      break;
 800cf7c:	e000      	b.n	800cf80 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800cf7e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	2201      	movs	r2, #1
 800cf84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	2200      	movs	r2, #0
 800cf8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800cf90:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf92:	4618      	mov	r0, r3
 800cf94:	3710      	adds	r7, #16
 800cf96:	46bd      	mov	sp, r7
 800cf98:	bd80      	pop	{r7, pc}
 800cf9a:	bf00      	nop
 800cf9c:	ffceff88 	.word	0xffceff88
 800cfa0:	00100040 	.word	0x00100040
 800cfa4:	00100030 	.word	0x00100030
 800cfa8:	00100020 	.word	0x00100020

0800cfac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800cfac:	b480      	push	{r7}
 800cfae:	b083      	sub	sp, #12
 800cfb0:	af00      	add	r7, sp, #0
 800cfb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800cfb4:	bf00      	nop
 800cfb6:	370c      	adds	r7, #12
 800cfb8:	46bd      	mov	sp, r7
 800cfba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfbe:	4770      	bx	lr

0800cfc0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800cfc0:	b480      	push	{r7}
 800cfc2:	b083      	sub	sp, #12
 800cfc4:	af00      	add	r7, sp, #0
 800cfc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800cfc8:	bf00      	nop
 800cfca:	370c      	adds	r7, #12
 800cfcc:	46bd      	mov	sp, r7
 800cfce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfd2:	4770      	bx	lr

0800cfd4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800cfd4:	b480      	push	{r7}
 800cfd6:	b083      	sub	sp, #12
 800cfd8:	af00      	add	r7, sp, #0
 800cfda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800cfdc:	bf00      	nop
 800cfde:	370c      	adds	r7, #12
 800cfe0:	46bd      	mov	sp, r7
 800cfe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfe6:	4770      	bx	lr

0800cfe8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800cfe8:	b480      	push	{r7}
 800cfea:	b083      	sub	sp, #12
 800cfec:	af00      	add	r7, sp, #0
 800cfee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800cff0:	bf00      	nop
 800cff2:	370c      	adds	r7, #12
 800cff4:	46bd      	mov	sp, r7
 800cff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cffa:	4770      	bx	lr

0800cffc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800cffc:	b480      	push	{r7}
 800cffe:	b085      	sub	sp, #20
 800d000:	af00      	add	r7, sp, #0
 800d002:	6078      	str	r0, [r7, #4]
 800d004:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	4a40      	ldr	r2, [pc, #256]	; (800d110 <TIM_Base_SetConfig+0x114>)
 800d010:	4293      	cmp	r3, r2
 800d012:	d013      	beq.n	800d03c <TIM_Base_SetConfig+0x40>
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d01a:	d00f      	beq.n	800d03c <TIM_Base_SetConfig+0x40>
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	4a3d      	ldr	r2, [pc, #244]	; (800d114 <TIM_Base_SetConfig+0x118>)
 800d020:	4293      	cmp	r3, r2
 800d022:	d00b      	beq.n	800d03c <TIM_Base_SetConfig+0x40>
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	4a3c      	ldr	r2, [pc, #240]	; (800d118 <TIM_Base_SetConfig+0x11c>)
 800d028:	4293      	cmp	r3, r2
 800d02a:	d007      	beq.n	800d03c <TIM_Base_SetConfig+0x40>
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	4a3b      	ldr	r2, [pc, #236]	; (800d11c <TIM_Base_SetConfig+0x120>)
 800d030:	4293      	cmp	r3, r2
 800d032:	d003      	beq.n	800d03c <TIM_Base_SetConfig+0x40>
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	4a3a      	ldr	r2, [pc, #232]	; (800d120 <TIM_Base_SetConfig+0x124>)
 800d038:	4293      	cmp	r3, r2
 800d03a:	d108      	bne.n	800d04e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d042:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d044:	683b      	ldr	r3, [r7, #0]
 800d046:	685b      	ldr	r3, [r3, #4]
 800d048:	68fa      	ldr	r2, [r7, #12]
 800d04a:	4313      	orrs	r3, r2
 800d04c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	4a2f      	ldr	r2, [pc, #188]	; (800d110 <TIM_Base_SetConfig+0x114>)
 800d052:	4293      	cmp	r3, r2
 800d054:	d01f      	beq.n	800d096 <TIM_Base_SetConfig+0x9a>
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d05c:	d01b      	beq.n	800d096 <TIM_Base_SetConfig+0x9a>
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	4a2c      	ldr	r2, [pc, #176]	; (800d114 <TIM_Base_SetConfig+0x118>)
 800d062:	4293      	cmp	r3, r2
 800d064:	d017      	beq.n	800d096 <TIM_Base_SetConfig+0x9a>
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	4a2b      	ldr	r2, [pc, #172]	; (800d118 <TIM_Base_SetConfig+0x11c>)
 800d06a:	4293      	cmp	r3, r2
 800d06c:	d013      	beq.n	800d096 <TIM_Base_SetConfig+0x9a>
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	4a2a      	ldr	r2, [pc, #168]	; (800d11c <TIM_Base_SetConfig+0x120>)
 800d072:	4293      	cmp	r3, r2
 800d074:	d00f      	beq.n	800d096 <TIM_Base_SetConfig+0x9a>
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	4a29      	ldr	r2, [pc, #164]	; (800d120 <TIM_Base_SetConfig+0x124>)
 800d07a:	4293      	cmp	r3, r2
 800d07c:	d00b      	beq.n	800d096 <TIM_Base_SetConfig+0x9a>
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	4a28      	ldr	r2, [pc, #160]	; (800d124 <TIM_Base_SetConfig+0x128>)
 800d082:	4293      	cmp	r3, r2
 800d084:	d007      	beq.n	800d096 <TIM_Base_SetConfig+0x9a>
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	4a27      	ldr	r2, [pc, #156]	; (800d128 <TIM_Base_SetConfig+0x12c>)
 800d08a:	4293      	cmp	r3, r2
 800d08c:	d003      	beq.n	800d096 <TIM_Base_SetConfig+0x9a>
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	4a26      	ldr	r2, [pc, #152]	; (800d12c <TIM_Base_SetConfig+0x130>)
 800d092:	4293      	cmp	r3, r2
 800d094:	d108      	bne.n	800d0a8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d09c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d09e:	683b      	ldr	r3, [r7, #0]
 800d0a0:	68db      	ldr	r3, [r3, #12]
 800d0a2:	68fa      	ldr	r2, [r7, #12]
 800d0a4:	4313      	orrs	r3, r2
 800d0a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d0ae:	683b      	ldr	r3, [r7, #0]
 800d0b0:	695b      	ldr	r3, [r3, #20]
 800d0b2:	4313      	orrs	r3, r2
 800d0b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	68fa      	ldr	r2, [r7, #12]
 800d0ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d0bc:	683b      	ldr	r3, [r7, #0]
 800d0be:	689a      	ldr	r2, [r3, #8]
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d0c4:	683b      	ldr	r3, [r7, #0]
 800d0c6:	681a      	ldr	r2, [r3, #0]
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	4a10      	ldr	r2, [pc, #64]	; (800d110 <TIM_Base_SetConfig+0x114>)
 800d0d0:	4293      	cmp	r3, r2
 800d0d2:	d00f      	beq.n	800d0f4 <TIM_Base_SetConfig+0xf8>
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	4a12      	ldr	r2, [pc, #72]	; (800d120 <TIM_Base_SetConfig+0x124>)
 800d0d8:	4293      	cmp	r3, r2
 800d0da:	d00b      	beq.n	800d0f4 <TIM_Base_SetConfig+0xf8>
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	4a11      	ldr	r2, [pc, #68]	; (800d124 <TIM_Base_SetConfig+0x128>)
 800d0e0:	4293      	cmp	r3, r2
 800d0e2:	d007      	beq.n	800d0f4 <TIM_Base_SetConfig+0xf8>
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	4a10      	ldr	r2, [pc, #64]	; (800d128 <TIM_Base_SetConfig+0x12c>)
 800d0e8:	4293      	cmp	r3, r2
 800d0ea:	d003      	beq.n	800d0f4 <TIM_Base_SetConfig+0xf8>
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	4a0f      	ldr	r2, [pc, #60]	; (800d12c <TIM_Base_SetConfig+0x130>)
 800d0f0:	4293      	cmp	r3, r2
 800d0f2:	d103      	bne.n	800d0fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d0f4:	683b      	ldr	r3, [r7, #0]
 800d0f6:	691a      	ldr	r2, [r3, #16]
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	2201      	movs	r2, #1
 800d100:	615a      	str	r2, [r3, #20]
}
 800d102:	bf00      	nop
 800d104:	3714      	adds	r7, #20
 800d106:	46bd      	mov	sp, r7
 800d108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d10c:	4770      	bx	lr
 800d10e:	bf00      	nop
 800d110:	40010000 	.word	0x40010000
 800d114:	40000400 	.word	0x40000400
 800d118:	40000800 	.word	0x40000800
 800d11c:	40000c00 	.word	0x40000c00
 800d120:	40010400 	.word	0x40010400
 800d124:	40014000 	.word	0x40014000
 800d128:	40014400 	.word	0x40014400
 800d12c:	40014800 	.word	0x40014800

0800d130 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d130:	b480      	push	{r7}
 800d132:	b087      	sub	sp, #28
 800d134:	af00      	add	r7, sp, #0
 800d136:	6078      	str	r0, [r7, #4]
 800d138:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	6a1b      	ldr	r3, [r3, #32]
 800d13e:	f023 0201 	bic.w	r2, r3, #1
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	6a1b      	ldr	r3, [r3, #32]
 800d14a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	685b      	ldr	r3, [r3, #4]
 800d150:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	699b      	ldr	r3, [r3, #24]
 800d156:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d158:	68fa      	ldr	r2, [r7, #12]
 800d15a:	4b37      	ldr	r3, [pc, #220]	; (800d238 <TIM_OC1_SetConfig+0x108>)
 800d15c:	4013      	ands	r3, r2
 800d15e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	f023 0303 	bic.w	r3, r3, #3
 800d166:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d168:	683b      	ldr	r3, [r7, #0]
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	68fa      	ldr	r2, [r7, #12]
 800d16e:	4313      	orrs	r3, r2
 800d170:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d172:	697b      	ldr	r3, [r7, #20]
 800d174:	f023 0302 	bic.w	r3, r3, #2
 800d178:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d17a:	683b      	ldr	r3, [r7, #0]
 800d17c:	689b      	ldr	r3, [r3, #8]
 800d17e:	697a      	ldr	r2, [r7, #20]
 800d180:	4313      	orrs	r3, r2
 800d182:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	4a2d      	ldr	r2, [pc, #180]	; (800d23c <TIM_OC1_SetConfig+0x10c>)
 800d188:	4293      	cmp	r3, r2
 800d18a:	d00f      	beq.n	800d1ac <TIM_OC1_SetConfig+0x7c>
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	4a2c      	ldr	r2, [pc, #176]	; (800d240 <TIM_OC1_SetConfig+0x110>)
 800d190:	4293      	cmp	r3, r2
 800d192:	d00b      	beq.n	800d1ac <TIM_OC1_SetConfig+0x7c>
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	4a2b      	ldr	r2, [pc, #172]	; (800d244 <TIM_OC1_SetConfig+0x114>)
 800d198:	4293      	cmp	r3, r2
 800d19a:	d007      	beq.n	800d1ac <TIM_OC1_SetConfig+0x7c>
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	4a2a      	ldr	r2, [pc, #168]	; (800d248 <TIM_OC1_SetConfig+0x118>)
 800d1a0:	4293      	cmp	r3, r2
 800d1a2:	d003      	beq.n	800d1ac <TIM_OC1_SetConfig+0x7c>
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	4a29      	ldr	r2, [pc, #164]	; (800d24c <TIM_OC1_SetConfig+0x11c>)
 800d1a8:	4293      	cmp	r3, r2
 800d1aa:	d10c      	bne.n	800d1c6 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d1ac:	697b      	ldr	r3, [r7, #20]
 800d1ae:	f023 0308 	bic.w	r3, r3, #8
 800d1b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d1b4:	683b      	ldr	r3, [r7, #0]
 800d1b6:	68db      	ldr	r3, [r3, #12]
 800d1b8:	697a      	ldr	r2, [r7, #20]
 800d1ba:	4313      	orrs	r3, r2
 800d1bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d1be:	697b      	ldr	r3, [r7, #20]
 800d1c0:	f023 0304 	bic.w	r3, r3, #4
 800d1c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	4a1c      	ldr	r2, [pc, #112]	; (800d23c <TIM_OC1_SetConfig+0x10c>)
 800d1ca:	4293      	cmp	r3, r2
 800d1cc:	d00f      	beq.n	800d1ee <TIM_OC1_SetConfig+0xbe>
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	4a1b      	ldr	r2, [pc, #108]	; (800d240 <TIM_OC1_SetConfig+0x110>)
 800d1d2:	4293      	cmp	r3, r2
 800d1d4:	d00b      	beq.n	800d1ee <TIM_OC1_SetConfig+0xbe>
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	4a1a      	ldr	r2, [pc, #104]	; (800d244 <TIM_OC1_SetConfig+0x114>)
 800d1da:	4293      	cmp	r3, r2
 800d1dc:	d007      	beq.n	800d1ee <TIM_OC1_SetConfig+0xbe>
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	4a19      	ldr	r2, [pc, #100]	; (800d248 <TIM_OC1_SetConfig+0x118>)
 800d1e2:	4293      	cmp	r3, r2
 800d1e4:	d003      	beq.n	800d1ee <TIM_OC1_SetConfig+0xbe>
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	4a18      	ldr	r2, [pc, #96]	; (800d24c <TIM_OC1_SetConfig+0x11c>)
 800d1ea:	4293      	cmp	r3, r2
 800d1ec:	d111      	bne.n	800d212 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d1ee:	693b      	ldr	r3, [r7, #16]
 800d1f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d1f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d1f6:	693b      	ldr	r3, [r7, #16]
 800d1f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d1fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d1fe:	683b      	ldr	r3, [r7, #0]
 800d200:	695b      	ldr	r3, [r3, #20]
 800d202:	693a      	ldr	r2, [r7, #16]
 800d204:	4313      	orrs	r3, r2
 800d206:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d208:	683b      	ldr	r3, [r7, #0]
 800d20a:	699b      	ldr	r3, [r3, #24]
 800d20c:	693a      	ldr	r2, [r7, #16]
 800d20e:	4313      	orrs	r3, r2
 800d210:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	693a      	ldr	r2, [r7, #16]
 800d216:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	68fa      	ldr	r2, [r7, #12]
 800d21c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d21e:	683b      	ldr	r3, [r7, #0]
 800d220:	685a      	ldr	r2, [r3, #4]
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	697a      	ldr	r2, [r7, #20]
 800d22a:	621a      	str	r2, [r3, #32]
}
 800d22c:	bf00      	nop
 800d22e:	371c      	adds	r7, #28
 800d230:	46bd      	mov	sp, r7
 800d232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d236:	4770      	bx	lr
 800d238:	fffeff8f 	.word	0xfffeff8f
 800d23c:	40010000 	.word	0x40010000
 800d240:	40010400 	.word	0x40010400
 800d244:	40014000 	.word	0x40014000
 800d248:	40014400 	.word	0x40014400
 800d24c:	40014800 	.word	0x40014800

0800d250 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d250:	b480      	push	{r7}
 800d252:	b087      	sub	sp, #28
 800d254:	af00      	add	r7, sp, #0
 800d256:	6078      	str	r0, [r7, #4]
 800d258:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	6a1b      	ldr	r3, [r3, #32]
 800d25e:	f023 0210 	bic.w	r2, r3, #16
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	6a1b      	ldr	r3, [r3, #32]
 800d26a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	685b      	ldr	r3, [r3, #4]
 800d270:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	699b      	ldr	r3, [r3, #24]
 800d276:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d278:	68fa      	ldr	r2, [r7, #12]
 800d27a:	4b34      	ldr	r3, [pc, #208]	; (800d34c <TIM_OC2_SetConfig+0xfc>)
 800d27c:	4013      	ands	r3, r2
 800d27e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d286:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d288:	683b      	ldr	r3, [r7, #0]
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	021b      	lsls	r3, r3, #8
 800d28e:	68fa      	ldr	r2, [r7, #12]
 800d290:	4313      	orrs	r3, r2
 800d292:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d294:	697b      	ldr	r3, [r7, #20]
 800d296:	f023 0320 	bic.w	r3, r3, #32
 800d29a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d29c:	683b      	ldr	r3, [r7, #0]
 800d29e:	689b      	ldr	r3, [r3, #8]
 800d2a0:	011b      	lsls	r3, r3, #4
 800d2a2:	697a      	ldr	r2, [r7, #20]
 800d2a4:	4313      	orrs	r3, r2
 800d2a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	4a29      	ldr	r2, [pc, #164]	; (800d350 <TIM_OC2_SetConfig+0x100>)
 800d2ac:	4293      	cmp	r3, r2
 800d2ae:	d003      	beq.n	800d2b8 <TIM_OC2_SetConfig+0x68>
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	4a28      	ldr	r2, [pc, #160]	; (800d354 <TIM_OC2_SetConfig+0x104>)
 800d2b4:	4293      	cmp	r3, r2
 800d2b6:	d10d      	bne.n	800d2d4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d2b8:	697b      	ldr	r3, [r7, #20]
 800d2ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d2be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d2c0:	683b      	ldr	r3, [r7, #0]
 800d2c2:	68db      	ldr	r3, [r3, #12]
 800d2c4:	011b      	lsls	r3, r3, #4
 800d2c6:	697a      	ldr	r2, [r7, #20]
 800d2c8:	4313      	orrs	r3, r2
 800d2ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d2cc:	697b      	ldr	r3, [r7, #20]
 800d2ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d2d2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	4a1e      	ldr	r2, [pc, #120]	; (800d350 <TIM_OC2_SetConfig+0x100>)
 800d2d8:	4293      	cmp	r3, r2
 800d2da:	d00f      	beq.n	800d2fc <TIM_OC2_SetConfig+0xac>
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	4a1d      	ldr	r2, [pc, #116]	; (800d354 <TIM_OC2_SetConfig+0x104>)
 800d2e0:	4293      	cmp	r3, r2
 800d2e2:	d00b      	beq.n	800d2fc <TIM_OC2_SetConfig+0xac>
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	4a1c      	ldr	r2, [pc, #112]	; (800d358 <TIM_OC2_SetConfig+0x108>)
 800d2e8:	4293      	cmp	r3, r2
 800d2ea:	d007      	beq.n	800d2fc <TIM_OC2_SetConfig+0xac>
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	4a1b      	ldr	r2, [pc, #108]	; (800d35c <TIM_OC2_SetConfig+0x10c>)
 800d2f0:	4293      	cmp	r3, r2
 800d2f2:	d003      	beq.n	800d2fc <TIM_OC2_SetConfig+0xac>
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	4a1a      	ldr	r2, [pc, #104]	; (800d360 <TIM_OC2_SetConfig+0x110>)
 800d2f8:	4293      	cmp	r3, r2
 800d2fa:	d113      	bne.n	800d324 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d2fc:	693b      	ldr	r3, [r7, #16]
 800d2fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d302:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d304:	693b      	ldr	r3, [r7, #16]
 800d306:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d30a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d30c:	683b      	ldr	r3, [r7, #0]
 800d30e:	695b      	ldr	r3, [r3, #20]
 800d310:	009b      	lsls	r3, r3, #2
 800d312:	693a      	ldr	r2, [r7, #16]
 800d314:	4313      	orrs	r3, r2
 800d316:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d318:	683b      	ldr	r3, [r7, #0]
 800d31a:	699b      	ldr	r3, [r3, #24]
 800d31c:	009b      	lsls	r3, r3, #2
 800d31e:	693a      	ldr	r2, [r7, #16]
 800d320:	4313      	orrs	r3, r2
 800d322:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	693a      	ldr	r2, [r7, #16]
 800d328:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	68fa      	ldr	r2, [r7, #12]
 800d32e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d330:	683b      	ldr	r3, [r7, #0]
 800d332:	685a      	ldr	r2, [r3, #4]
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	697a      	ldr	r2, [r7, #20]
 800d33c:	621a      	str	r2, [r3, #32]
}
 800d33e:	bf00      	nop
 800d340:	371c      	adds	r7, #28
 800d342:	46bd      	mov	sp, r7
 800d344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d348:	4770      	bx	lr
 800d34a:	bf00      	nop
 800d34c:	feff8fff 	.word	0xfeff8fff
 800d350:	40010000 	.word	0x40010000
 800d354:	40010400 	.word	0x40010400
 800d358:	40014000 	.word	0x40014000
 800d35c:	40014400 	.word	0x40014400
 800d360:	40014800 	.word	0x40014800

0800d364 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d364:	b480      	push	{r7}
 800d366:	b087      	sub	sp, #28
 800d368:	af00      	add	r7, sp, #0
 800d36a:	6078      	str	r0, [r7, #4]
 800d36c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	6a1b      	ldr	r3, [r3, #32]
 800d372:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	6a1b      	ldr	r3, [r3, #32]
 800d37e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	685b      	ldr	r3, [r3, #4]
 800d384:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	69db      	ldr	r3, [r3, #28]
 800d38a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d38c:	68fa      	ldr	r2, [r7, #12]
 800d38e:	4b33      	ldr	r3, [pc, #204]	; (800d45c <TIM_OC3_SetConfig+0xf8>)
 800d390:	4013      	ands	r3, r2
 800d392:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	f023 0303 	bic.w	r3, r3, #3
 800d39a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d39c:	683b      	ldr	r3, [r7, #0]
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	68fa      	ldr	r2, [r7, #12]
 800d3a2:	4313      	orrs	r3, r2
 800d3a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d3a6:	697b      	ldr	r3, [r7, #20]
 800d3a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d3ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d3ae:	683b      	ldr	r3, [r7, #0]
 800d3b0:	689b      	ldr	r3, [r3, #8]
 800d3b2:	021b      	lsls	r3, r3, #8
 800d3b4:	697a      	ldr	r2, [r7, #20]
 800d3b6:	4313      	orrs	r3, r2
 800d3b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	4a28      	ldr	r2, [pc, #160]	; (800d460 <TIM_OC3_SetConfig+0xfc>)
 800d3be:	4293      	cmp	r3, r2
 800d3c0:	d003      	beq.n	800d3ca <TIM_OC3_SetConfig+0x66>
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	4a27      	ldr	r2, [pc, #156]	; (800d464 <TIM_OC3_SetConfig+0x100>)
 800d3c6:	4293      	cmp	r3, r2
 800d3c8:	d10d      	bne.n	800d3e6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d3ca:	697b      	ldr	r3, [r7, #20]
 800d3cc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d3d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d3d2:	683b      	ldr	r3, [r7, #0]
 800d3d4:	68db      	ldr	r3, [r3, #12]
 800d3d6:	021b      	lsls	r3, r3, #8
 800d3d8:	697a      	ldr	r2, [r7, #20]
 800d3da:	4313      	orrs	r3, r2
 800d3dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d3de:	697b      	ldr	r3, [r7, #20]
 800d3e0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d3e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	4a1d      	ldr	r2, [pc, #116]	; (800d460 <TIM_OC3_SetConfig+0xfc>)
 800d3ea:	4293      	cmp	r3, r2
 800d3ec:	d00f      	beq.n	800d40e <TIM_OC3_SetConfig+0xaa>
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	4a1c      	ldr	r2, [pc, #112]	; (800d464 <TIM_OC3_SetConfig+0x100>)
 800d3f2:	4293      	cmp	r3, r2
 800d3f4:	d00b      	beq.n	800d40e <TIM_OC3_SetConfig+0xaa>
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	4a1b      	ldr	r2, [pc, #108]	; (800d468 <TIM_OC3_SetConfig+0x104>)
 800d3fa:	4293      	cmp	r3, r2
 800d3fc:	d007      	beq.n	800d40e <TIM_OC3_SetConfig+0xaa>
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	4a1a      	ldr	r2, [pc, #104]	; (800d46c <TIM_OC3_SetConfig+0x108>)
 800d402:	4293      	cmp	r3, r2
 800d404:	d003      	beq.n	800d40e <TIM_OC3_SetConfig+0xaa>
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	4a19      	ldr	r2, [pc, #100]	; (800d470 <TIM_OC3_SetConfig+0x10c>)
 800d40a:	4293      	cmp	r3, r2
 800d40c:	d113      	bne.n	800d436 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d40e:	693b      	ldr	r3, [r7, #16]
 800d410:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d414:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d416:	693b      	ldr	r3, [r7, #16]
 800d418:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d41c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d41e:	683b      	ldr	r3, [r7, #0]
 800d420:	695b      	ldr	r3, [r3, #20]
 800d422:	011b      	lsls	r3, r3, #4
 800d424:	693a      	ldr	r2, [r7, #16]
 800d426:	4313      	orrs	r3, r2
 800d428:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d42a:	683b      	ldr	r3, [r7, #0]
 800d42c:	699b      	ldr	r3, [r3, #24]
 800d42e:	011b      	lsls	r3, r3, #4
 800d430:	693a      	ldr	r2, [r7, #16]
 800d432:	4313      	orrs	r3, r2
 800d434:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	693a      	ldr	r2, [r7, #16]
 800d43a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	68fa      	ldr	r2, [r7, #12]
 800d440:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d442:	683b      	ldr	r3, [r7, #0]
 800d444:	685a      	ldr	r2, [r3, #4]
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	697a      	ldr	r2, [r7, #20]
 800d44e:	621a      	str	r2, [r3, #32]
}
 800d450:	bf00      	nop
 800d452:	371c      	adds	r7, #28
 800d454:	46bd      	mov	sp, r7
 800d456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d45a:	4770      	bx	lr
 800d45c:	fffeff8f 	.word	0xfffeff8f
 800d460:	40010000 	.word	0x40010000
 800d464:	40010400 	.word	0x40010400
 800d468:	40014000 	.word	0x40014000
 800d46c:	40014400 	.word	0x40014400
 800d470:	40014800 	.word	0x40014800

0800d474 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d474:	b480      	push	{r7}
 800d476:	b087      	sub	sp, #28
 800d478:	af00      	add	r7, sp, #0
 800d47a:	6078      	str	r0, [r7, #4]
 800d47c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	6a1b      	ldr	r3, [r3, #32]
 800d482:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	6a1b      	ldr	r3, [r3, #32]
 800d48e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	685b      	ldr	r3, [r3, #4]
 800d494:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	69db      	ldr	r3, [r3, #28]
 800d49a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d49c:	68fa      	ldr	r2, [r7, #12]
 800d49e:	4b24      	ldr	r3, [pc, #144]	; (800d530 <TIM_OC4_SetConfig+0xbc>)
 800d4a0:	4013      	ands	r3, r2
 800d4a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d4aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d4ac:	683b      	ldr	r3, [r7, #0]
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	021b      	lsls	r3, r3, #8
 800d4b2:	68fa      	ldr	r2, [r7, #12]
 800d4b4:	4313      	orrs	r3, r2
 800d4b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d4b8:	693b      	ldr	r3, [r7, #16]
 800d4ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d4be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d4c0:	683b      	ldr	r3, [r7, #0]
 800d4c2:	689b      	ldr	r3, [r3, #8]
 800d4c4:	031b      	lsls	r3, r3, #12
 800d4c6:	693a      	ldr	r2, [r7, #16]
 800d4c8:	4313      	orrs	r3, r2
 800d4ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	4a19      	ldr	r2, [pc, #100]	; (800d534 <TIM_OC4_SetConfig+0xc0>)
 800d4d0:	4293      	cmp	r3, r2
 800d4d2:	d00f      	beq.n	800d4f4 <TIM_OC4_SetConfig+0x80>
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	4a18      	ldr	r2, [pc, #96]	; (800d538 <TIM_OC4_SetConfig+0xc4>)
 800d4d8:	4293      	cmp	r3, r2
 800d4da:	d00b      	beq.n	800d4f4 <TIM_OC4_SetConfig+0x80>
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	4a17      	ldr	r2, [pc, #92]	; (800d53c <TIM_OC4_SetConfig+0xc8>)
 800d4e0:	4293      	cmp	r3, r2
 800d4e2:	d007      	beq.n	800d4f4 <TIM_OC4_SetConfig+0x80>
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	4a16      	ldr	r2, [pc, #88]	; (800d540 <TIM_OC4_SetConfig+0xcc>)
 800d4e8:	4293      	cmp	r3, r2
 800d4ea:	d003      	beq.n	800d4f4 <TIM_OC4_SetConfig+0x80>
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	4a15      	ldr	r2, [pc, #84]	; (800d544 <TIM_OC4_SetConfig+0xd0>)
 800d4f0:	4293      	cmp	r3, r2
 800d4f2:	d109      	bne.n	800d508 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d4f4:	697b      	ldr	r3, [r7, #20]
 800d4f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d4fa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d4fc:	683b      	ldr	r3, [r7, #0]
 800d4fe:	695b      	ldr	r3, [r3, #20]
 800d500:	019b      	lsls	r3, r3, #6
 800d502:	697a      	ldr	r2, [r7, #20]
 800d504:	4313      	orrs	r3, r2
 800d506:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	697a      	ldr	r2, [r7, #20]
 800d50c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	68fa      	ldr	r2, [r7, #12]
 800d512:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d514:	683b      	ldr	r3, [r7, #0]
 800d516:	685a      	ldr	r2, [r3, #4]
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	693a      	ldr	r2, [r7, #16]
 800d520:	621a      	str	r2, [r3, #32]
}
 800d522:	bf00      	nop
 800d524:	371c      	adds	r7, #28
 800d526:	46bd      	mov	sp, r7
 800d528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d52c:	4770      	bx	lr
 800d52e:	bf00      	nop
 800d530:	feff8fff 	.word	0xfeff8fff
 800d534:	40010000 	.word	0x40010000
 800d538:	40010400 	.word	0x40010400
 800d53c:	40014000 	.word	0x40014000
 800d540:	40014400 	.word	0x40014400
 800d544:	40014800 	.word	0x40014800

0800d548 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800d548:	b480      	push	{r7}
 800d54a:	b087      	sub	sp, #28
 800d54c:	af00      	add	r7, sp, #0
 800d54e:	6078      	str	r0, [r7, #4]
 800d550:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	6a1b      	ldr	r3, [r3, #32]
 800d556:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	6a1b      	ldr	r3, [r3, #32]
 800d562:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	685b      	ldr	r3, [r3, #4]
 800d568:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d56e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800d570:	68fa      	ldr	r2, [r7, #12]
 800d572:	4b21      	ldr	r3, [pc, #132]	; (800d5f8 <TIM_OC5_SetConfig+0xb0>)
 800d574:	4013      	ands	r3, r2
 800d576:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d578:	683b      	ldr	r3, [r7, #0]
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	68fa      	ldr	r2, [r7, #12]
 800d57e:	4313      	orrs	r3, r2
 800d580:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800d582:	693b      	ldr	r3, [r7, #16]
 800d584:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800d588:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800d58a:	683b      	ldr	r3, [r7, #0]
 800d58c:	689b      	ldr	r3, [r3, #8]
 800d58e:	041b      	lsls	r3, r3, #16
 800d590:	693a      	ldr	r2, [r7, #16]
 800d592:	4313      	orrs	r3, r2
 800d594:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	4a18      	ldr	r2, [pc, #96]	; (800d5fc <TIM_OC5_SetConfig+0xb4>)
 800d59a:	4293      	cmp	r3, r2
 800d59c:	d00f      	beq.n	800d5be <TIM_OC5_SetConfig+0x76>
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	4a17      	ldr	r2, [pc, #92]	; (800d600 <TIM_OC5_SetConfig+0xb8>)
 800d5a2:	4293      	cmp	r3, r2
 800d5a4:	d00b      	beq.n	800d5be <TIM_OC5_SetConfig+0x76>
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	4a16      	ldr	r2, [pc, #88]	; (800d604 <TIM_OC5_SetConfig+0xbc>)
 800d5aa:	4293      	cmp	r3, r2
 800d5ac:	d007      	beq.n	800d5be <TIM_OC5_SetConfig+0x76>
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	4a15      	ldr	r2, [pc, #84]	; (800d608 <TIM_OC5_SetConfig+0xc0>)
 800d5b2:	4293      	cmp	r3, r2
 800d5b4:	d003      	beq.n	800d5be <TIM_OC5_SetConfig+0x76>
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	4a14      	ldr	r2, [pc, #80]	; (800d60c <TIM_OC5_SetConfig+0xc4>)
 800d5ba:	4293      	cmp	r3, r2
 800d5bc:	d109      	bne.n	800d5d2 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800d5be:	697b      	ldr	r3, [r7, #20]
 800d5c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d5c4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800d5c6:	683b      	ldr	r3, [r7, #0]
 800d5c8:	695b      	ldr	r3, [r3, #20]
 800d5ca:	021b      	lsls	r3, r3, #8
 800d5cc:	697a      	ldr	r2, [r7, #20]
 800d5ce:	4313      	orrs	r3, r2
 800d5d0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	697a      	ldr	r2, [r7, #20]
 800d5d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	68fa      	ldr	r2, [r7, #12]
 800d5dc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800d5de:	683b      	ldr	r3, [r7, #0]
 800d5e0:	685a      	ldr	r2, [r3, #4]
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	693a      	ldr	r2, [r7, #16]
 800d5ea:	621a      	str	r2, [r3, #32]
}
 800d5ec:	bf00      	nop
 800d5ee:	371c      	adds	r7, #28
 800d5f0:	46bd      	mov	sp, r7
 800d5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5f6:	4770      	bx	lr
 800d5f8:	fffeff8f 	.word	0xfffeff8f
 800d5fc:	40010000 	.word	0x40010000
 800d600:	40010400 	.word	0x40010400
 800d604:	40014000 	.word	0x40014000
 800d608:	40014400 	.word	0x40014400
 800d60c:	40014800 	.word	0x40014800

0800d610 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800d610:	b480      	push	{r7}
 800d612:	b087      	sub	sp, #28
 800d614:	af00      	add	r7, sp, #0
 800d616:	6078      	str	r0, [r7, #4]
 800d618:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	6a1b      	ldr	r3, [r3, #32]
 800d61e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	6a1b      	ldr	r3, [r3, #32]
 800d62a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	685b      	ldr	r3, [r3, #4]
 800d630:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d636:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800d638:	68fa      	ldr	r2, [r7, #12]
 800d63a:	4b22      	ldr	r3, [pc, #136]	; (800d6c4 <TIM_OC6_SetConfig+0xb4>)
 800d63c:	4013      	ands	r3, r2
 800d63e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d640:	683b      	ldr	r3, [r7, #0]
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	021b      	lsls	r3, r3, #8
 800d646:	68fa      	ldr	r2, [r7, #12]
 800d648:	4313      	orrs	r3, r2
 800d64a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800d64c:	693b      	ldr	r3, [r7, #16]
 800d64e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d652:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800d654:	683b      	ldr	r3, [r7, #0]
 800d656:	689b      	ldr	r3, [r3, #8]
 800d658:	051b      	lsls	r3, r3, #20
 800d65a:	693a      	ldr	r2, [r7, #16]
 800d65c:	4313      	orrs	r3, r2
 800d65e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	4a19      	ldr	r2, [pc, #100]	; (800d6c8 <TIM_OC6_SetConfig+0xb8>)
 800d664:	4293      	cmp	r3, r2
 800d666:	d00f      	beq.n	800d688 <TIM_OC6_SetConfig+0x78>
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	4a18      	ldr	r2, [pc, #96]	; (800d6cc <TIM_OC6_SetConfig+0xbc>)
 800d66c:	4293      	cmp	r3, r2
 800d66e:	d00b      	beq.n	800d688 <TIM_OC6_SetConfig+0x78>
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	4a17      	ldr	r2, [pc, #92]	; (800d6d0 <TIM_OC6_SetConfig+0xc0>)
 800d674:	4293      	cmp	r3, r2
 800d676:	d007      	beq.n	800d688 <TIM_OC6_SetConfig+0x78>
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	4a16      	ldr	r2, [pc, #88]	; (800d6d4 <TIM_OC6_SetConfig+0xc4>)
 800d67c:	4293      	cmp	r3, r2
 800d67e:	d003      	beq.n	800d688 <TIM_OC6_SetConfig+0x78>
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	4a15      	ldr	r2, [pc, #84]	; (800d6d8 <TIM_OC6_SetConfig+0xc8>)
 800d684:	4293      	cmp	r3, r2
 800d686:	d109      	bne.n	800d69c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800d688:	697b      	ldr	r3, [r7, #20]
 800d68a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d68e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800d690:	683b      	ldr	r3, [r7, #0]
 800d692:	695b      	ldr	r3, [r3, #20]
 800d694:	029b      	lsls	r3, r3, #10
 800d696:	697a      	ldr	r2, [r7, #20]
 800d698:	4313      	orrs	r3, r2
 800d69a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	697a      	ldr	r2, [r7, #20]
 800d6a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	68fa      	ldr	r2, [r7, #12]
 800d6a6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800d6a8:	683b      	ldr	r3, [r7, #0]
 800d6aa:	685a      	ldr	r2, [r3, #4]
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	693a      	ldr	r2, [r7, #16]
 800d6b4:	621a      	str	r2, [r3, #32]
}
 800d6b6:	bf00      	nop
 800d6b8:	371c      	adds	r7, #28
 800d6ba:	46bd      	mov	sp, r7
 800d6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6c0:	4770      	bx	lr
 800d6c2:	bf00      	nop
 800d6c4:	feff8fff 	.word	0xfeff8fff
 800d6c8:	40010000 	.word	0x40010000
 800d6cc:	40010400 	.word	0x40010400
 800d6d0:	40014000 	.word	0x40014000
 800d6d4:	40014400 	.word	0x40014400
 800d6d8:	40014800 	.word	0x40014800

0800d6dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d6dc:	b480      	push	{r7}
 800d6de:	b087      	sub	sp, #28
 800d6e0:	af00      	add	r7, sp, #0
 800d6e2:	60f8      	str	r0, [r7, #12]
 800d6e4:	60b9      	str	r1, [r7, #8]
 800d6e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d6e8:	68fb      	ldr	r3, [r7, #12]
 800d6ea:	6a1b      	ldr	r3, [r3, #32]
 800d6ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d6ee:	68fb      	ldr	r3, [r7, #12]
 800d6f0:	6a1b      	ldr	r3, [r3, #32]
 800d6f2:	f023 0201 	bic.w	r2, r3, #1
 800d6f6:	68fb      	ldr	r3, [r7, #12]
 800d6f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	699b      	ldr	r3, [r3, #24]
 800d6fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d700:	693b      	ldr	r3, [r7, #16]
 800d702:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d706:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	011b      	lsls	r3, r3, #4
 800d70c:	693a      	ldr	r2, [r7, #16]
 800d70e:	4313      	orrs	r3, r2
 800d710:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d712:	697b      	ldr	r3, [r7, #20]
 800d714:	f023 030a 	bic.w	r3, r3, #10
 800d718:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d71a:	697a      	ldr	r2, [r7, #20]
 800d71c:	68bb      	ldr	r3, [r7, #8]
 800d71e:	4313      	orrs	r3, r2
 800d720:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	693a      	ldr	r2, [r7, #16]
 800d726:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d728:	68fb      	ldr	r3, [r7, #12]
 800d72a:	697a      	ldr	r2, [r7, #20]
 800d72c:	621a      	str	r2, [r3, #32]
}
 800d72e:	bf00      	nop
 800d730:	371c      	adds	r7, #28
 800d732:	46bd      	mov	sp, r7
 800d734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d738:	4770      	bx	lr

0800d73a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d73a:	b480      	push	{r7}
 800d73c:	b087      	sub	sp, #28
 800d73e:	af00      	add	r7, sp, #0
 800d740:	60f8      	str	r0, [r7, #12]
 800d742:	60b9      	str	r1, [r7, #8]
 800d744:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d746:	68fb      	ldr	r3, [r7, #12]
 800d748:	6a1b      	ldr	r3, [r3, #32]
 800d74a:	f023 0210 	bic.w	r2, r3, #16
 800d74e:	68fb      	ldr	r3, [r7, #12]
 800d750:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	699b      	ldr	r3, [r3, #24]
 800d756:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d758:	68fb      	ldr	r3, [r7, #12]
 800d75a:	6a1b      	ldr	r3, [r3, #32]
 800d75c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d75e:	697b      	ldr	r3, [r7, #20]
 800d760:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d764:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	031b      	lsls	r3, r3, #12
 800d76a:	697a      	ldr	r2, [r7, #20]
 800d76c:	4313      	orrs	r3, r2
 800d76e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d770:	693b      	ldr	r3, [r7, #16]
 800d772:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800d776:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d778:	68bb      	ldr	r3, [r7, #8]
 800d77a:	011b      	lsls	r3, r3, #4
 800d77c:	693a      	ldr	r2, [r7, #16]
 800d77e:	4313      	orrs	r3, r2
 800d780:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d782:	68fb      	ldr	r3, [r7, #12]
 800d784:	697a      	ldr	r2, [r7, #20]
 800d786:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	693a      	ldr	r2, [r7, #16]
 800d78c:	621a      	str	r2, [r3, #32]
}
 800d78e:	bf00      	nop
 800d790:	371c      	adds	r7, #28
 800d792:	46bd      	mov	sp, r7
 800d794:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d798:	4770      	bx	lr
	...

0800d79c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d79c:	b480      	push	{r7}
 800d79e:	b085      	sub	sp, #20
 800d7a0:	af00      	add	r7, sp, #0
 800d7a2:	6078      	str	r0, [r7, #4]
 800d7a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	689b      	ldr	r3, [r3, #8]
 800d7aa:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d7ac:	68fa      	ldr	r2, [r7, #12]
 800d7ae:	4b09      	ldr	r3, [pc, #36]	; (800d7d4 <TIM_ITRx_SetConfig+0x38>)
 800d7b0:	4013      	ands	r3, r2
 800d7b2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d7b4:	683a      	ldr	r2, [r7, #0]
 800d7b6:	68fb      	ldr	r3, [r7, #12]
 800d7b8:	4313      	orrs	r3, r2
 800d7ba:	f043 0307 	orr.w	r3, r3, #7
 800d7be:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	68fa      	ldr	r2, [r7, #12]
 800d7c4:	609a      	str	r2, [r3, #8]
}
 800d7c6:	bf00      	nop
 800d7c8:	3714      	adds	r7, #20
 800d7ca:	46bd      	mov	sp, r7
 800d7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7d0:	4770      	bx	lr
 800d7d2:	bf00      	nop
 800d7d4:	ffcfff8f 	.word	0xffcfff8f

0800d7d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d7d8:	b480      	push	{r7}
 800d7da:	b087      	sub	sp, #28
 800d7dc:	af00      	add	r7, sp, #0
 800d7de:	60f8      	str	r0, [r7, #12]
 800d7e0:	60b9      	str	r1, [r7, #8]
 800d7e2:	607a      	str	r2, [r7, #4]
 800d7e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	689b      	ldr	r3, [r3, #8]
 800d7ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d7ec:	697b      	ldr	r3, [r7, #20]
 800d7ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d7f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d7f4:	683b      	ldr	r3, [r7, #0]
 800d7f6:	021a      	lsls	r2, r3, #8
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	431a      	orrs	r2, r3
 800d7fc:	68bb      	ldr	r3, [r7, #8]
 800d7fe:	4313      	orrs	r3, r2
 800d800:	697a      	ldr	r2, [r7, #20]
 800d802:	4313      	orrs	r3, r2
 800d804:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	697a      	ldr	r2, [r7, #20]
 800d80a:	609a      	str	r2, [r3, #8]
}
 800d80c:	bf00      	nop
 800d80e:	371c      	adds	r7, #28
 800d810:	46bd      	mov	sp, r7
 800d812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d816:	4770      	bx	lr

0800d818 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800d818:	b480      	push	{r7}
 800d81a:	b087      	sub	sp, #28
 800d81c:	af00      	add	r7, sp, #0
 800d81e:	60f8      	str	r0, [r7, #12]
 800d820:	60b9      	str	r1, [r7, #8]
 800d822:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d824:	68bb      	ldr	r3, [r7, #8]
 800d826:	f003 031f 	and.w	r3, r3, #31
 800d82a:	2201      	movs	r2, #1
 800d82c:	fa02 f303 	lsl.w	r3, r2, r3
 800d830:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d832:	68fb      	ldr	r3, [r7, #12]
 800d834:	6a1a      	ldr	r2, [r3, #32]
 800d836:	697b      	ldr	r3, [r7, #20]
 800d838:	43db      	mvns	r3, r3
 800d83a:	401a      	ands	r2, r3
 800d83c:	68fb      	ldr	r3, [r7, #12]
 800d83e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d840:	68fb      	ldr	r3, [r7, #12]
 800d842:	6a1a      	ldr	r2, [r3, #32]
 800d844:	68bb      	ldr	r3, [r7, #8]
 800d846:	f003 031f 	and.w	r3, r3, #31
 800d84a:	6879      	ldr	r1, [r7, #4]
 800d84c:	fa01 f303 	lsl.w	r3, r1, r3
 800d850:	431a      	orrs	r2, r3
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	621a      	str	r2, [r3, #32]
}
 800d856:	bf00      	nop
 800d858:	371c      	adds	r7, #28
 800d85a:	46bd      	mov	sp, r7
 800d85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d860:	4770      	bx	lr
	...

0800d864 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d864:	b480      	push	{r7}
 800d866:	b085      	sub	sp, #20
 800d868:	af00      	add	r7, sp, #0
 800d86a:	6078      	str	r0, [r7, #4]
 800d86c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d874:	2b01      	cmp	r3, #1
 800d876:	d101      	bne.n	800d87c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d878:	2302      	movs	r3, #2
 800d87a:	e06d      	b.n	800d958 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	2201      	movs	r2, #1
 800d880:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	2202      	movs	r2, #2
 800d888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	685b      	ldr	r3, [r3, #4]
 800d892:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	689b      	ldr	r3, [r3, #8]
 800d89a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	4a30      	ldr	r2, [pc, #192]	; (800d964 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d8a2:	4293      	cmp	r3, r2
 800d8a4:	d004      	beq.n	800d8b0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	4a2f      	ldr	r2, [pc, #188]	; (800d968 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d8ac:	4293      	cmp	r3, r2
 800d8ae:	d108      	bne.n	800d8c2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d8b0:	68fb      	ldr	r3, [r7, #12]
 800d8b2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800d8b6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d8b8:	683b      	ldr	r3, [r7, #0]
 800d8ba:	685b      	ldr	r3, [r3, #4]
 800d8bc:	68fa      	ldr	r2, [r7, #12]
 800d8be:	4313      	orrs	r3, r2
 800d8c0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d8c8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d8ca:	683b      	ldr	r3, [r7, #0]
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	68fa      	ldr	r2, [r7, #12]
 800d8d0:	4313      	orrs	r3, r2
 800d8d2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	68fa      	ldr	r2, [r7, #12]
 800d8da:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	4a20      	ldr	r2, [pc, #128]	; (800d964 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d8e2:	4293      	cmp	r3, r2
 800d8e4:	d022      	beq.n	800d92c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d8ee:	d01d      	beq.n	800d92c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	4a1d      	ldr	r2, [pc, #116]	; (800d96c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800d8f6:	4293      	cmp	r3, r2
 800d8f8:	d018      	beq.n	800d92c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	4a1c      	ldr	r2, [pc, #112]	; (800d970 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800d900:	4293      	cmp	r3, r2
 800d902:	d013      	beq.n	800d92c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	4a1a      	ldr	r2, [pc, #104]	; (800d974 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800d90a:	4293      	cmp	r3, r2
 800d90c:	d00e      	beq.n	800d92c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	4a15      	ldr	r2, [pc, #84]	; (800d968 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d914:	4293      	cmp	r3, r2
 800d916:	d009      	beq.n	800d92c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	4a16      	ldr	r2, [pc, #88]	; (800d978 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800d91e:	4293      	cmp	r3, r2
 800d920:	d004      	beq.n	800d92c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	4a15      	ldr	r2, [pc, #84]	; (800d97c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800d928:	4293      	cmp	r3, r2
 800d92a:	d10c      	bne.n	800d946 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d92c:	68bb      	ldr	r3, [r7, #8]
 800d92e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d932:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d934:	683b      	ldr	r3, [r7, #0]
 800d936:	689b      	ldr	r3, [r3, #8]
 800d938:	68ba      	ldr	r2, [r7, #8]
 800d93a:	4313      	orrs	r3, r2
 800d93c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	68ba      	ldr	r2, [r7, #8]
 800d944:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	2201      	movs	r2, #1
 800d94a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	2200      	movs	r2, #0
 800d952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d956:	2300      	movs	r3, #0
}
 800d958:	4618      	mov	r0, r3
 800d95a:	3714      	adds	r7, #20
 800d95c:	46bd      	mov	sp, r7
 800d95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d962:	4770      	bx	lr
 800d964:	40010000 	.word	0x40010000
 800d968:	40010400 	.word	0x40010400
 800d96c:	40000400 	.word	0x40000400
 800d970:	40000800 	.word	0x40000800
 800d974:	40000c00 	.word	0x40000c00
 800d978:	40001800 	.word	0x40001800
 800d97c:	40014000 	.word	0x40014000

0800d980 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d980:	b480      	push	{r7}
 800d982:	b083      	sub	sp, #12
 800d984:	af00      	add	r7, sp, #0
 800d986:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d988:	bf00      	nop
 800d98a:	370c      	adds	r7, #12
 800d98c:	46bd      	mov	sp, r7
 800d98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d992:	4770      	bx	lr

0800d994 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d994:	b480      	push	{r7}
 800d996:	b083      	sub	sp, #12
 800d998:	af00      	add	r7, sp, #0
 800d99a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d99c:	bf00      	nop
 800d99e:	370c      	adds	r7, #12
 800d9a0:	46bd      	mov	sp, r7
 800d9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9a6:	4770      	bx	lr

0800d9a8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d9a8:	b480      	push	{r7}
 800d9aa:	b083      	sub	sp, #12
 800d9ac:	af00      	add	r7, sp, #0
 800d9ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d9b0:	bf00      	nop
 800d9b2:	370c      	adds	r7, #12
 800d9b4:	46bd      	mov	sp, r7
 800d9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ba:	4770      	bx	lr

0800d9bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d9bc:	b580      	push	{r7, lr}
 800d9be:	b082      	sub	sp, #8
 800d9c0:	af00      	add	r7, sp, #0
 800d9c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d101      	bne.n	800d9ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d9ca:	2301      	movs	r3, #1
 800d9cc:	e042      	b.n	800da54 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d106      	bne.n	800d9e6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	2200      	movs	r2, #0
 800d9dc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d9e0:	6878      	ldr	r0, [r7, #4]
 800d9e2:	f7f5 fd47 	bl	8003474 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	2224      	movs	r2, #36	; 0x24
 800d9ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	681a      	ldr	r2, [r3, #0]
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	f022 0201 	bic.w	r2, r2, #1
 800d9fc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d9fe:	6878      	ldr	r0, [r7, #4]
 800da00:	f000 fc94 	bl	800e32c <UART_SetConfig>
 800da04:	4603      	mov	r3, r0
 800da06:	2b01      	cmp	r3, #1
 800da08:	d101      	bne.n	800da0e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800da0a:	2301      	movs	r3, #1
 800da0c:	e022      	b.n	800da54 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da12:	2b00      	cmp	r3, #0
 800da14:	d002      	beq.n	800da1c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800da16:	6878      	ldr	r0, [r7, #4]
 800da18:	f001 f9f0 	bl	800edfc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	681b      	ldr	r3, [r3, #0]
 800da20:	685a      	ldr	r2, [r3, #4]
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800da2a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	689a      	ldr	r2, [r3, #8]
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	681b      	ldr	r3, [r3, #0]
 800da36:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800da3a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	681a      	ldr	r2, [r3, #0]
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	f042 0201 	orr.w	r2, r2, #1
 800da4a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800da4c:	6878      	ldr	r0, [r7, #4]
 800da4e:	f001 fa77 	bl	800ef40 <UART_CheckIdleState>
 800da52:	4603      	mov	r3, r0
}
 800da54:	4618      	mov	r0, r3
 800da56:	3708      	adds	r7, #8
 800da58:	46bd      	mov	sp, r7
 800da5a:	bd80      	pop	{r7, pc}

0800da5c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800da5c:	b580      	push	{r7, lr}
 800da5e:	b08a      	sub	sp, #40	; 0x28
 800da60:	af02      	add	r7, sp, #8
 800da62:	60f8      	str	r0, [r7, #12]
 800da64:	60b9      	str	r1, [r7, #8]
 800da66:	603b      	str	r3, [r7, #0]
 800da68:	4613      	mov	r3, r2
 800da6a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800da6c:	68fb      	ldr	r3, [r7, #12]
 800da6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800da72:	2b20      	cmp	r3, #32
 800da74:	d17b      	bne.n	800db6e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800da76:	68bb      	ldr	r3, [r7, #8]
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d002      	beq.n	800da82 <HAL_UART_Transmit+0x26>
 800da7c:	88fb      	ldrh	r3, [r7, #6]
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d101      	bne.n	800da86 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800da82:	2301      	movs	r3, #1
 800da84:	e074      	b.n	800db70 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	2200      	movs	r2, #0
 800da8a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800da8e:	68fb      	ldr	r3, [r7, #12]
 800da90:	2221      	movs	r2, #33	; 0x21
 800da92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800da96:	f7f6 f839 	bl	8003b0c <HAL_GetTick>
 800da9a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800da9c:	68fb      	ldr	r3, [r7, #12]
 800da9e:	88fa      	ldrh	r2, [r7, #6]
 800daa0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800daa4:	68fb      	ldr	r3, [r7, #12]
 800daa6:	88fa      	ldrh	r2, [r7, #6]
 800daa8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800daac:	68fb      	ldr	r3, [r7, #12]
 800daae:	689b      	ldr	r3, [r3, #8]
 800dab0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dab4:	d108      	bne.n	800dac8 <HAL_UART_Transmit+0x6c>
 800dab6:	68fb      	ldr	r3, [r7, #12]
 800dab8:	691b      	ldr	r3, [r3, #16]
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d104      	bne.n	800dac8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800dabe:	2300      	movs	r3, #0
 800dac0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800dac2:	68bb      	ldr	r3, [r7, #8]
 800dac4:	61bb      	str	r3, [r7, #24]
 800dac6:	e003      	b.n	800dad0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800dac8:	68bb      	ldr	r3, [r7, #8]
 800daca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800dacc:	2300      	movs	r3, #0
 800dace:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800dad0:	e030      	b.n	800db34 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800dad2:	683b      	ldr	r3, [r7, #0]
 800dad4:	9300      	str	r3, [sp, #0]
 800dad6:	697b      	ldr	r3, [r7, #20]
 800dad8:	2200      	movs	r2, #0
 800dada:	2180      	movs	r1, #128	; 0x80
 800dadc:	68f8      	ldr	r0, [r7, #12]
 800dade:	f001 fad9 	bl	800f094 <UART_WaitOnFlagUntilTimeout>
 800dae2:	4603      	mov	r3, r0
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d005      	beq.n	800daf4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800dae8:	68fb      	ldr	r3, [r7, #12]
 800daea:	2220      	movs	r2, #32
 800daec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800daf0:	2303      	movs	r3, #3
 800daf2:	e03d      	b.n	800db70 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800daf4:	69fb      	ldr	r3, [r7, #28]
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d10b      	bne.n	800db12 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800dafa:	69bb      	ldr	r3, [r7, #24]
 800dafc:	881b      	ldrh	r3, [r3, #0]
 800dafe:	461a      	mov	r2, r3
 800db00:	68fb      	ldr	r3, [r7, #12]
 800db02:	681b      	ldr	r3, [r3, #0]
 800db04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800db08:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800db0a:	69bb      	ldr	r3, [r7, #24]
 800db0c:	3302      	adds	r3, #2
 800db0e:	61bb      	str	r3, [r7, #24]
 800db10:	e007      	b.n	800db22 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800db12:	69fb      	ldr	r3, [r7, #28]
 800db14:	781a      	ldrb	r2, [r3, #0]
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800db1c:	69fb      	ldr	r3, [r7, #28]
 800db1e:	3301      	adds	r3, #1
 800db20:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800db22:	68fb      	ldr	r3, [r7, #12]
 800db24:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800db28:	b29b      	uxth	r3, r3
 800db2a:	3b01      	subs	r3, #1
 800db2c:	b29a      	uxth	r2, r3
 800db2e:	68fb      	ldr	r3, [r7, #12]
 800db30:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800db34:	68fb      	ldr	r3, [r7, #12]
 800db36:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800db3a:	b29b      	uxth	r3, r3
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d1c8      	bne.n	800dad2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800db40:	683b      	ldr	r3, [r7, #0]
 800db42:	9300      	str	r3, [sp, #0]
 800db44:	697b      	ldr	r3, [r7, #20]
 800db46:	2200      	movs	r2, #0
 800db48:	2140      	movs	r1, #64	; 0x40
 800db4a:	68f8      	ldr	r0, [r7, #12]
 800db4c:	f001 faa2 	bl	800f094 <UART_WaitOnFlagUntilTimeout>
 800db50:	4603      	mov	r3, r0
 800db52:	2b00      	cmp	r3, #0
 800db54:	d005      	beq.n	800db62 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	2220      	movs	r2, #32
 800db5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800db5e:	2303      	movs	r3, #3
 800db60:	e006      	b.n	800db70 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800db62:	68fb      	ldr	r3, [r7, #12]
 800db64:	2220      	movs	r2, #32
 800db66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800db6a:	2300      	movs	r3, #0
 800db6c:	e000      	b.n	800db70 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800db6e:	2302      	movs	r3, #2
  }
}
 800db70:	4618      	mov	r0, r3
 800db72:	3720      	adds	r7, #32
 800db74:	46bd      	mov	sp, r7
 800db76:	bd80      	pop	{r7, pc}

0800db78 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800db78:	b580      	push	{r7, lr}
 800db7a:	b0ba      	sub	sp, #232	; 0xe8
 800db7c:	af00      	add	r7, sp, #0
 800db7e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	69db      	ldr	r3, [r3, #28]
 800db86:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	681b      	ldr	r3, [r3, #0]
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	689b      	ldr	r3, [r3, #8]
 800db9a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800db9e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800dba2:	f640 030f 	movw	r3, #2063	; 0x80f
 800dba6:	4013      	ands	r3, r2
 800dba8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800dbac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d11b      	bne.n	800dbec <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800dbb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dbb8:	f003 0320 	and.w	r3, r3, #32
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d015      	beq.n	800dbec <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800dbc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dbc4:	f003 0320 	and.w	r3, r3, #32
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d105      	bne.n	800dbd8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800dbcc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800dbd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d009      	beq.n	800dbec <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	f000 8377 	beq.w	800e2d0 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dbe6:	6878      	ldr	r0, [r7, #4]
 800dbe8:	4798      	blx	r3
      }
      return;
 800dbea:	e371      	b.n	800e2d0 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800dbec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	f000 8123 	beq.w	800de3c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800dbf6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800dbfa:	4b8d      	ldr	r3, [pc, #564]	; (800de30 <HAL_UART_IRQHandler+0x2b8>)
 800dbfc:	4013      	ands	r3, r2
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d106      	bne.n	800dc10 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800dc02:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800dc06:	4b8b      	ldr	r3, [pc, #556]	; (800de34 <HAL_UART_IRQHandler+0x2bc>)
 800dc08:	4013      	ands	r3, r2
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	f000 8116 	beq.w	800de3c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800dc10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dc14:	f003 0301 	and.w	r3, r3, #1
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d011      	beq.n	800dc40 <HAL_UART_IRQHandler+0xc8>
 800dc1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dc20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d00b      	beq.n	800dc40 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	2201      	movs	r2, #1
 800dc2e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dc36:	f043 0201 	orr.w	r2, r3, #1
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800dc40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dc44:	f003 0302 	and.w	r3, r3, #2
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d011      	beq.n	800dc70 <HAL_UART_IRQHandler+0xf8>
 800dc4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800dc50:	f003 0301 	and.w	r3, r3, #1
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d00b      	beq.n	800dc70 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	2202      	movs	r2, #2
 800dc5e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dc66:	f043 0204 	orr.w	r2, r3, #4
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800dc70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dc74:	f003 0304 	and.w	r3, r3, #4
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d011      	beq.n	800dca0 <HAL_UART_IRQHandler+0x128>
 800dc7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800dc80:	f003 0301 	and.w	r3, r3, #1
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d00b      	beq.n	800dca0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	681b      	ldr	r3, [r3, #0]
 800dc8c:	2204      	movs	r2, #4
 800dc8e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dc96:	f043 0202 	orr.w	r2, r3, #2
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800dca0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dca4:	f003 0308 	and.w	r3, r3, #8
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d017      	beq.n	800dcdc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800dcac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dcb0:	f003 0320 	and.w	r3, r3, #32
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d105      	bne.n	800dcc4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800dcb8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800dcbc:	4b5c      	ldr	r3, [pc, #368]	; (800de30 <HAL_UART_IRQHandler+0x2b8>)
 800dcbe:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	d00b      	beq.n	800dcdc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	681b      	ldr	r3, [r3, #0]
 800dcc8:	2208      	movs	r2, #8
 800dcca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dcd2:	f043 0208 	orr.w	r2, r3, #8
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800dcdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dce0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d012      	beq.n	800dd0e <HAL_UART_IRQHandler+0x196>
 800dce8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dcec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d00c      	beq.n	800dd0e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800dcfc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dd04:	f043 0220 	orr.w	r2, r3, #32
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	f000 82dd 	beq.w	800e2d4 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800dd1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dd1e:	f003 0320 	and.w	r3, r3, #32
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d013      	beq.n	800dd4e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800dd26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dd2a:	f003 0320 	and.w	r3, r3, #32
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d105      	bne.n	800dd3e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800dd32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800dd36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d007      	beq.n	800dd4e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d003      	beq.n	800dd4e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dd4a:	6878      	ldr	r0, [r7, #4]
 800dd4c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dd54:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	689b      	ldr	r3, [r3, #8]
 800dd5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dd62:	2b40      	cmp	r3, #64	; 0x40
 800dd64:	d005      	beq.n	800dd72 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800dd66:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800dd6a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d054      	beq.n	800de1c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800dd72:	6878      	ldr	r0, [r7, #4]
 800dd74:	f001 f9f6 	bl	800f164 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	689b      	ldr	r3, [r3, #8]
 800dd7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dd82:	2b40      	cmp	r3, #64	; 0x40
 800dd84:	d146      	bne.n	800de14 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	3308      	adds	r3, #8
 800dd8c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd90:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800dd94:	e853 3f00 	ldrex	r3, [r3]
 800dd98:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800dd9c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800dda0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dda4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	681b      	ldr	r3, [r3, #0]
 800ddac:	3308      	adds	r3, #8
 800ddae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800ddb2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800ddb6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ddba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800ddbe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800ddc2:	e841 2300 	strex	r3, r2, [r1]
 800ddc6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800ddca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d1d9      	bne.n	800dd86 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d017      	beq.n	800de0c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dde2:	4a15      	ldr	r2, [pc, #84]	; (800de38 <HAL_UART_IRQHandler+0x2c0>)
 800dde4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ddec:	4618      	mov	r0, r3
 800ddee:	f7f8 f95d 	bl	80060ac <HAL_DMA_Abort_IT>
 800ddf2:	4603      	mov	r3, r0
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d019      	beq.n	800de2c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ddfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800de00:	687a      	ldr	r2, [r7, #4]
 800de02:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800de06:	4610      	mov	r0, r2
 800de08:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800de0a:	e00f      	b.n	800de2c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800de0c:	6878      	ldr	r0, [r7, #4]
 800de0e:	f000 fa77 	bl	800e300 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800de12:	e00b      	b.n	800de2c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800de14:	6878      	ldr	r0, [r7, #4]
 800de16:	f000 fa73 	bl	800e300 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800de1a:	e007      	b.n	800de2c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800de1c:	6878      	ldr	r0, [r7, #4]
 800de1e:	f000 fa6f 	bl	800e300 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	2200      	movs	r2, #0
 800de26:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800de2a:	e253      	b.n	800e2d4 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800de2c:	bf00      	nop
    return;
 800de2e:	e251      	b.n	800e2d4 <HAL_UART_IRQHandler+0x75c>
 800de30:	10000001 	.word	0x10000001
 800de34:	04000120 	.word	0x04000120
 800de38:	0800f231 	.word	0x0800f231

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800de40:	2b01      	cmp	r3, #1
 800de42:	f040 81e7 	bne.w	800e214 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800de46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800de4a:	f003 0310 	and.w	r3, r3, #16
 800de4e:	2b00      	cmp	r3, #0
 800de50:	f000 81e0 	beq.w	800e214 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800de54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800de58:	f003 0310 	and.w	r3, r3, #16
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	f000 81d9 	beq.w	800e214 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	681b      	ldr	r3, [r3, #0]
 800de66:	2210      	movs	r2, #16
 800de68:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	681b      	ldr	r3, [r3, #0]
 800de6e:	689b      	ldr	r3, [r3, #8]
 800de70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800de74:	2b40      	cmp	r3, #64	; 0x40
 800de76:	f040 8151 	bne.w	800e11c <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	4a96      	ldr	r2, [pc, #600]	; (800e0dc <HAL_UART_IRQHandler+0x564>)
 800de84:	4293      	cmp	r3, r2
 800de86:	d068      	beq.n	800df5a <HAL_UART_IRQHandler+0x3e2>
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800de8e:	681b      	ldr	r3, [r3, #0]
 800de90:	4a93      	ldr	r2, [pc, #588]	; (800e0e0 <HAL_UART_IRQHandler+0x568>)
 800de92:	4293      	cmp	r3, r2
 800de94:	d061      	beq.n	800df5a <HAL_UART_IRQHandler+0x3e2>
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800de9c:	681b      	ldr	r3, [r3, #0]
 800de9e:	4a91      	ldr	r2, [pc, #580]	; (800e0e4 <HAL_UART_IRQHandler+0x56c>)
 800dea0:	4293      	cmp	r3, r2
 800dea2:	d05a      	beq.n	800df5a <HAL_UART_IRQHandler+0x3e2>
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800deaa:	681b      	ldr	r3, [r3, #0]
 800deac:	4a8e      	ldr	r2, [pc, #568]	; (800e0e8 <HAL_UART_IRQHandler+0x570>)
 800deae:	4293      	cmp	r3, r2
 800deb0:	d053      	beq.n	800df5a <HAL_UART_IRQHandler+0x3e2>
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800deb8:	681b      	ldr	r3, [r3, #0]
 800deba:	4a8c      	ldr	r2, [pc, #560]	; (800e0ec <HAL_UART_IRQHandler+0x574>)
 800debc:	4293      	cmp	r3, r2
 800debe:	d04c      	beq.n	800df5a <HAL_UART_IRQHandler+0x3e2>
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	4a89      	ldr	r2, [pc, #548]	; (800e0f0 <HAL_UART_IRQHandler+0x578>)
 800deca:	4293      	cmp	r3, r2
 800decc:	d045      	beq.n	800df5a <HAL_UART_IRQHandler+0x3e2>
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ded4:	681b      	ldr	r3, [r3, #0]
 800ded6:	4a87      	ldr	r2, [pc, #540]	; (800e0f4 <HAL_UART_IRQHandler+0x57c>)
 800ded8:	4293      	cmp	r3, r2
 800deda:	d03e      	beq.n	800df5a <HAL_UART_IRQHandler+0x3e2>
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dee2:	681b      	ldr	r3, [r3, #0]
 800dee4:	4a84      	ldr	r2, [pc, #528]	; (800e0f8 <HAL_UART_IRQHandler+0x580>)
 800dee6:	4293      	cmp	r3, r2
 800dee8:	d037      	beq.n	800df5a <HAL_UART_IRQHandler+0x3e2>
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	4a82      	ldr	r2, [pc, #520]	; (800e0fc <HAL_UART_IRQHandler+0x584>)
 800def4:	4293      	cmp	r3, r2
 800def6:	d030      	beq.n	800df5a <HAL_UART_IRQHandler+0x3e2>
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800defe:	681b      	ldr	r3, [r3, #0]
 800df00:	4a7f      	ldr	r2, [pc, #508]	; (800e100 <HAL_UART_IRQHandler+0x588>)
 800df02:	4293      	cmp	r3, r2
 800df04:	d029      	beq.n	800df5a <HAL_UART_IRQHandler+0x3e2>
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800df0c:	681b      	ldr	r3, [r3, #0]
 800df0e:	4a7d      	ldr	r2, [pc, #500]	; (800e104 <HAL_UART_IRQHandler+0x58c>)
 800df10:	4293      	cmp	r3, r2
 800df12:	d022      	beq.n	800df5a <HAL_UART_IRQHandler+0x3e2>
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800df1a:	681b      	ldr	r3, [r3, #0]
 800df1c:	4a7a      	ldr	r2, [pc, #488]	; (800e108 <HAL_UART_IRQHandler+0x590>)
 800df1e:	4293      	cmp	r3, r2
 800df20:	d01b      	beq.n	800df5a <HAL_UART_IRQHandler+0x3e2>
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800df28:	681b      	ldr	r3, [r3, #0]
 800df2a:	4a78      	ldr	r2, [pc, #480]	; (800e10c <HAL_UART_IRQHandler+0x594>)
 800df2c:	4293      	cmp	r3, r2
 800df2e:	d014      	beq.n	800df5a <HAL_UART_IRQHandler+0x3e2>
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800df36:	681b      	ldr	r3, [r3, #0]
 800df38:	4a75      	ldr	r2, [pc, #468]	; (800e110 <HAL_UART_IRQHandler+0x598>)
 800df3a:	4293      	cmp	r3, r2
 800df3c:	d00d      	beq.n	800df5a <HAL_UART_IRQHandler+0x3e2>
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800df44:	681b      	ldr	r3, [r3, #0]
 800df46:	4a73      	ldr	r2, [pc, #460]	; (800e114 <HAL_UART_IRQHandler+0x59c>)
 800df48:	4293      	cmp	r3, r2
 800df4a:	d006      	beq.n	800df5a <HAL_UART_IRQHandler+0x3e2>
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	4a70      	ldr	r2, [pc, #448]	; (800e118 <HAL_UART_IRQHandler+0x5a0>)
 800df56:	4293      	cmp	r3, r2
 800df58:	d106      	bne.n	800df68 <HAL_UART_IRQHandler+0x3f0>
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	685b      	ldr	r3, [r3, #4]
 800df64:	b29b      	uxth	r3, r3
 800df66:	e005      	b.n	800df74 <HAL_UART_IRQHandler+0x3fc>
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	685b      	ldr	r3, [r3, #4]
 800df72:	b29b      	uxth	r3, r3
 800df74:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800df78:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	f000 81ab 	beq.w	800e2d8 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800df88:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800df8c:	429a      	cmp	r2, r3
 800df8e:	f080 81a3 	bcs.w	800e2d8 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800df98:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dfa2:	69db      	ldr	r3, [r3, #28]
 800dfa4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dfa8:	f000 8087 	beq.w	800e0ba <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	681b      	ldr	r3, [r3, #0]
 800dfb0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dfb4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800dfb8:	e853 3f00 	ldrex	r3, [r3]
 800dfbc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800dfc0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800dfc4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800dfc8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	681b      	ldr	r3, [r3, #0]
 800dfd0:	461a      	mov	r2, r3
 800dfd2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800dfd6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800dfda:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dfde:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800dfe2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800dfe6:	e841 2300 	strex	r3, r2, [r1]
 800dfea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800dfee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d1da      	bne.n	800dfac <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	681b      	ldr	r3, [r3, #0]
 800dffa:	3308      	adds	r3, #8
 800dffc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dffe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e000:	e853 3f00 	ldrex	r3, [r3]
 800e004:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800e006:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e008:	f023 0301 	bic.w	r3, r3, #1
 800e00c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	3308      	adds	r3, #8
 800e016:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800e01a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e01e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e020:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800e022:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e026:	e841 2300 	strex	r3, r2, [r1]
 800e02a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800e02c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e02e:	2b00      	cmp	r3, #0
 800e030:	d1e1      	bne.n	800dff6 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	681b      	ldr	r3, [r3, #0]
 800e036:	3308      	adds	r3, #8
 800e038:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e03a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e03c:	e853 3f00 	ldrex	r3, [r3]
 800e040:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800e042:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e044:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e048:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	3308      	adds	r3, #8
 800e052:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800e056:	66fa      	str	r2, [r7, #108]	; 0x6c
 800e058:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e05a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800e05c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e05e:	e841 2300 	strex	r3, r2, [r1]
 800e062:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800e064:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e066:	2b00      	cmp	r3, #0
 800e068:	d1e3      	bne.n	800e032 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	2220      	movs	r2, #32
 800e06e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	2200      	movs	r2, #0
 800e076:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	681b      	ldr	r3, [r3, #0]
 800e07c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e07e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e080:	e853 3f00 	ldrex	r3, [r3]
 800e084:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e086:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e088:	f023 0310 	bic.w	r3, r3, #16
 800e08c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	461a      	mov	r2, r3
 800e096:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e09a:	65bb      	str	r3, [r7, #88]	; 0x58
 800e09c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e09e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e0a0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e0a2:	e841 2300 	strex	r3, r2, [r1]
 800e0a6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e0a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d1e4      	bne.n	800e078 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e0b4:	4618      	mov	r0, r3
 800e0b6:	f7f7 fcdb 	bl	8005a70 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	2202      	movs	r2, #2
 800e0be:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e0cc:	b29b      	uxth	r3, r3
 800e0ce:	1ad3      	subs	r3, r2, r3
 800e0d0:	b29b      	uxth	r3, r3
 800e0d2:	4619      	mov	r1, r3
 800e0d4:	6878      	ldr	r0, [r7, #4]
 800e0d6:	f000 f91d 	bl	800e314 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e0da:	e0fd      	b.n	800e2d8 <HAL_UART_IRQHandler+0x760>
 800e0dc:	40020010 	.word	0x40020010
 800e0e0:	40020028 	.word	0x40020028
 800e0e4:	40020040 	.word	0x40020040
 800e0e8:	40020058 	.word	0x40020058
 800e0ec:	40020070 	.word	0x40020070
 800e0f0:	40020088 	.word	0x40020088
 800e0f4:	400200a0 	.word	0x400200a0
 800e0f8:	400200b8 	.word	0x400200b8
 800e0fc:	40020410 	.word	0x40020410
 800e100:	40020428 	.word	0x40020428
 800e104:	40020440 	.word	0x40020440
 800e108:	40020458 	.word	0x40020458
 800e10c:	40020470 	.word	0x40020470
 800e110:	40020488 	.word	0x40020488
 800e114:	400204a0 	.word	0x400204a0
 800e118:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e128:	b29b      	uxth	r3, r3
 800e12a:	1ad3      	subs	r3, r2, r3
 800e12c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e136:	b29b      	uxth	r3, r3
 800e138:	2b00      	cmp	r3, #0
 800e13a:	f000 80cf 	beq.w	800e2dc <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800e13e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e142:	2b00      	cmp	r3, #0
 800e144:	f000 80ca 	beq.w	800e2dc <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e14e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e150:	e853 3f00 	ldrex	r3, [r3]
 800e154:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e156:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e158:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e15c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	681b      	ldr	r3, [r3, #0]
 800e164:	461a      	mov	r2, r3
 800e166:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e16a:	647b      	str	r3, [r7, #68]	; 0x44
 800e16c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e16e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e170:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e172:	e841 2300 	strex	r3, r2, [r1]
 800e176:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e178:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	d1e4      	bne.n	800e148 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	681b      	ldr	r3, [r3, #0]
 800e182:	3308      	adds	r3, #8
 800e184:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e188:	e853 3f00 	ldrex	r3, [r3]
 800e18c:	623b      	str	r3, [r7, #32]
   return(result);
 800e18e:	6a3a      	ldr	r2, [r7, #32]
 800e190:	4b55      	ldr	r3, [pc, #340]	; (800e2e8 <HAL_UART_IRQHandler+0x770>)
 800e192:	4013      	ands	r3, r2
 800e194:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	681b      	ldr	r3, [r3, #0]
 800e19c:	3308      	adds	r3, #8
 800e19e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800e1a2:	633a      	str	r2, [r7, #48]	; 0x30
 800e1a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e1a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e1aa:	e841 2300 	strex	r3, r2, [r1]
 800e1ae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e1b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	d1e3      	bne.n	800e17e <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	2220      	movs	r2, #32
 800e1ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	2200      	movs	r2, #0
 800e1c2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	2200      	movs	r2, #0
 800e1c8:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1d0:	693b      	ldr	r3, [r7, #16]
 800e1d2:	e853 3f00 	ldrex	r3, [r3]
 800e1d6:	60fb      	str	r3, [r7, #12]
   return(result);
 800e1d8:	68fb      	ldr	r3, [r7, #12]
 800e1da:	f023 0310 	bic.w	r3, r3, #16
 800e1de:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	461a      	mov	r2, r3
 800e1e8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800e1ec:	61fb      	str	r3, [r7, #28]
 800e1ee:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1f0:	69b9      	ldr	r1, [r7, #24]
 800e1f2:	69fa      	ldr	r2, [r7, #28]
 800e1f4:	e841 2300 	strex	r3, r2, [r1]
 800e1f8:	617b      	str	r3, [r7, #20]
   return(result);
 800e1fa:	697b      	ldr	r3, [r7, #20]
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	d1e4      	bne.n	800e1ca <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	2202      	movs	r2, #2
 800e204:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800e206:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e20a:	4619      	mov	r1, r3
 800e20c:	6878      	ldr	r0, [r7, #4]
 800e20e:	f000 f881 	bl	800e314 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e212:	e063      	b.n	800e2dc <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800e214:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e218:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d00e      	beq.n	800e23e <HAL_UART_IRQHandler+0x6c6>
 800e220:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e224:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e228:	2b00      	cmp	r3, #0
 800e22a:	d008      	beq.n	800e23e <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	681b      	ldr	r3, [r3, #0]
 800e230:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800e234:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800e236:	6878      	ldr	r0, [r7, #4]
 800e238:	f001 f83b 	bl	800f2b2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e23c:	e051      	b.n	800e2e2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800e23e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e242:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e246:	2b00      	cmp	r3, #0
 800e248:	d014      	beq.n	800e274 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800e24a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e24e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e252:	2b00      	cmp	r3, #0
 800e254:	d105      	bne.n	800e262 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800e256:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e25a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e25e:	2b00      	cmp	r3, #0
 800e260:	d008      	beq.n	800e274 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e266:	2b00      	cmp	r3, #0
 800e268:	d03a      	beq.n	800e2e0 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e26e:	6878      	ldr	r0, [r7, #4]
 800e270:	4798      	blx	r3
    }
    return;
 800e272:	e035      	b.n	800e2e0 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800e274:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e278:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d009      	beq.n	800e294 <HAL_UART_IRQHandler+0x71c>
 800e280:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e284:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d003      	beq.n	800e294 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800e28c:	6878      	ldr	r0, [r7, #4]
 800e28e:	f000 ffe5 	bl	800f25c <UART_EndTransmit_IT>
    return;
 800e292:	e026      	b.n	800e2e2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800e294:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e298:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d009      	beq.n	800e2b4 <HAL_UART_IRQHandler+0x73c>
 800e2a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e2a4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	d003      	beq.n	800e2b4 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800e2ac:	6878      	ldr	r0, [r7, #4]
 800e2ae:	f001 f814 	bl	800f2da <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e2b2:	e016      	b.n	800e2e2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800e2b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e2b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d010      	beq.n	800e2e2 <HAL_UART_IRQHandler+0x76a>
 800e2c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	da0c      	bge.n	800e2e2 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800e2c8:	6878      	ldr	r0, [r7, #4]
 800e2ca:	f000 fffc 	bl	800f2c6 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e2ce:	e008      	b.n	800e2e2 <HAL_UART_IRQHandler+0x76a>
      return;
 800e2d0:	bf00      	nop
 800e2d2:	e006      	b.n	800e2e2 <HAL_UART_IRQHandler+0x76a>
    return;
 800e2d4:	bf00      	nop
 800e2d6:	e004      	b.n	800e2e2 <HAL_UART_IRQHandler+0x76a>
      return;
 800e2d8:	bf00      	nop
 800e2da:	e002      	b.n	800e2e2 <HAL_UART_IRQHandler+0x76a>
      return;
 800e2dc:	bf00      	nop
 800e2de:	e000      	b.n	800e2e2 <HAL_UART_IRQHandler+0x76a>
    return;
 800e2e0:	bf00      	nop
  }
}
 800e2e2:	37e8      	adds	r7, #232	; 0xe8
 800e2e4:	46bd      	mov	sp, r7
 800e2e6:	bd80      	pop	{r7, pc}
 800e2e8:	effffffe 	.word	0xeffffffe

0800e2ec <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800e2ec:	b480      	push	{r7}
 800e2ee:	b083      	sub	sp, #12
 800e2f0:	af00      	add	r7, sp, #0
 800e2f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800e2f4:	bf00      	nop
 800e2f6:	370c      	adds	r7, #12
 800e2f8:	46bd      	mov	sp, r7
 800e2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2fe:	4770      	bx	lr

0800e300 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e300:	b480      	push	{r7}
 800e302:	b083      	sub	sp, #12
 800e304:	af00      	add	r7, sp, #0
 800e306:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800e308:	bf00      	nop
 800e30a:	370c      	adds	r7, #12
 800e30c:	46bd      	mov	sp, r7
 800e30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e312:	4770      	bx	lr

0800e314 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800e314:	b480      	push	{r7}
 800e316:	b083      	sub	sp, #12
 800e318:	af00      	add	r7, sp, #0
 800e31a:	6078      	str	r0, [r7, #4]
 800e31c:	460b      	mov	r3, r1
 800e31e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800e320:	bf00      	nop
 800e322:	370c      	adds	r7, #12
 800e324:	46bd      	mov	sp, r7
 800e326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e32a:	4770      	bx	lr

0800e32c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e32c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e330:	b092      	sub	sp, #72	; 0x48
 800e332:	af00      	add	r7, sp, #0
 800e334:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e336:	2300      	movs	r3, #0
 800e338:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e33c:	697b      	ldr	r3, [r7, #20]
 800e33e:	689a      	ldr	r2, [r3, #8]
 800e340:	697b      	ldr	r3, [r7, #20]
 800e342:	691b      	ldr	r3, [r3, #16]
 800e344:	431a      	orrs	r2, r3
 800e346:	697b      	ldr	r3, [r7, #20]
 800e348:	695b      	ldr	r3, [r3, #20]
 800e34a:	431a      	orrs	r2, r3
 800e34c:	697b      	ldr	r3, [r7, #20]
 800e34e:	69db      	ldr	r3, [r3, #28]
 800e350:	4313      	orrs	r3, r2
 800e352:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e354:	697b      	ldr	r3, [r7, #20]
 800e356:	681b      	ldr	r3, [r3, #0]
 800e358:	681a      	ldr	r2, [r3, #0]
 800e35a:	4bbe      	ldr	r3, [pc, #760]	; (800e654 <UART_SetConfig+0x328>)
 800e35c:	4013      	ands	r3, r2
 800e35e:	697a      	ldr	r2, [r7, #20]
 800e360:	6812      	ldr	r2, [r2, #0]
 800e362:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e364:	430b      	orrs	r3, r1
 800e366:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e368:	697b      	ldr	r3, [r7, #20]
 800e36a:	681b      	ldr	r3, [r3, #0]
 800e36c:	685b      	ldr	r3, [r3, #4]
 800e36e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e372:	697b      	ldr	r3, [r7, #20]
 800e374:	68da      	ldr	r2, [r3, #12]
 800e376:	697b      	ldr	r3, [r7, #20]
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	430a      	orrs	r2, r1
 800e37c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e37e:	697b      	ldr	r3, [r7, #20]
 800e380:	699b      	ldr	r3, [r3, #24]
 800e382:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e384:	697b      	ldr	r3, [r7, #20]
 800e386:	681b      	ldr	r3, [r3, #0]
 800e388:	4ab3      	ldr	r2, [pc, #716]	; (800e658 <UART_SetConfig+0x32c>)
 800e38a:	4293      	cmp	r3, r2
 800e38c:	d004      	beq.n	800e398 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e38e:	697b      	ldr	r3, [r7, #20]
 800e390:	6a1b      	ldr	r3, [r3, #32]
 800e392:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e394:	4313      	orrs	r3, r2
 800e396:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e398:	697b      	ldr	r3, [r7, #20]
 800e39a:	681b      	ldr	r3, [r3, #0]
 800e39c:	689a      	ldr	r2, [r3, #8]
 800e39e:	4baf      	ldr	r3, [pc, #700]	; (800e65c <UART_SetConfig+0x330>)
 800e3a0:	4013      	ands	r3, r2
 800e3a2:	697a      	ldr	r2, [r7, #20]
 800e3a4:	6812      	ldr	r2, [r2, #0]
 800e3a6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e3a8:	430b      	orrs	r3, r1
 800e3aa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800e3ac:	697b      	ldr	r3, [r7, #20]
 800e3ae:	681b      	ldr	r3, [r3, #0]
 800e3b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3b2:	f023 010f 	bic.w	r1, r3, #15
 800e3b6:	697b      	ldr	r3, [r7, #20]
 800e3b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e3ba:	697b      	ldr	r3, [r7, #20]
 800e3bc:	681b      	ldr	r3, [r3, #0]
 800e3be:	430a      	orrs	r2, r1
 800e3c0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e3c2:	697b      	ldr	r3, [r7, #20]
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	4aa6      	ldr	r2, [pc, #664]	; (800e660 <UART_SetConfig+0x334>)
 800e3c8:	4293      	cmp	r3, r2
 800e3ca:	d177      	bne.n	800e4bc <UART_SetConfig+0x190>
 800e3cc:	4ba5      	ldr	r3, [pc, #660]	; (800e664 <UART_SetConfig+0x338>)
 800e3ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e3d0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e3d4:	2b28      	cmp	r3, #40	; 0x28
 800e3d6:	d86d      	bhi.n	800e4b4 <UART_SetConfig+0x188>
 800e3d8:	a201      	add	r2, pc, #4	; (adr r2, 800e3e0 <UART_SetConfig+0xb4>)
 800e3da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3de:	bf00      	nop
 800e3e0:	0800e485 	.word	0x0800e485
 800e3e4:	0800e4b5 	.word	0x0800e4b5
 800e3e8:	0800e4b5 	.word	0x0800e4b5
 800e3ec:	0800e4b5 	.word	0x0800e4b5
 800e3f0:	0800e4b5 	.word	0x0800e4b5
 800e3f4:	0800e4b5 	.word	0x0800e4b5
 800e3f8:	0800e4b5 	.word	0x0800e4b5
 800e3fc:	0800e4b5 	.word	0x0800e4b5
 800e400:	0800e48d 	.word	0x0800e48d
 800e404:	0800e4b5 	.word	0x0800e4b5
 800e408:	0800e4b5 	.word	0x0800e4b5
 800e40c:	0800e4b5 	.word	0x0800e4b5
 800e410:	0800e4b5 	.word	0x0800e4b5
 800e414:	0800e4b5 	.word	0x0800e4b5
 800e418:	0800e4b5 	.word	0x0800e4b5
 800e41c:	0800e4b5 	.word	0x0800e4b5
 800e420:	0800e495 	.word	0x0800e495
 800e424:	0800e4b5 	.word	0x0800e4b5
 800e428:	0800e4b5 	.word	0x0800e4b5
 800e42c:	0800e4b5 	.word	0x0800e4b5
 800e430:	0800e4b5 	.word	0x0800e4b5
 800e434:	0800e4b5 	.word	0x0800e4b5
 800e438:	0800e4b5 	.word	0x0800e4b5
 800e43c:	0800e4b5 	.word	0x0800e4b5
 800e440:	0800e49d 	.word	0x0800e49d
 800e444:	0800e4b5 	.word	0x0800e4b5
 800e448:	0800e4b5 	.word	0x0800e4b5
 800e44c:	0800e4b5 	.word	0x0800e4b5
 800e450:	0800e4b5 	.word	0x0800e4b5
 800e454:	0800e4b5 	.word	0x0800e4b5
 800e458:	0800e4b5 	.word	0x0800e4b5
 800e45c:	0800e4b5 	.word	0x0800e4b5
 800e460:	0800e4a5 	.word	0x0800e4a5
 800e464:	0800e4b5 	.word	0x0800e4b5
 800e468:	0800e4b5 	.word	0x0800e4b5
 800e46c:	0800e4b5 	.word	0x0800e4b5
 800e470:	0800e4b5 	.word	0x0800e4b5
 800e474:	0800e4b5 	.word	0x0800e4b5
 800e478:	0800e4b5 	.word	0x0800e4b5
 800e47c:	0800e4b5 	.word	0x0800e4b5
 800e480:	0800e4ad 	.word	0x0800e4ad
 800e484:	2301      	movs	r3, #1
 800e486:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e48a:	e222      	b.n	800e8d2 <UART_SetConfig+0x5a6>
 800e48c:	2304      	movs	r3, #4
 800e48e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e492:	e21e      	b.n	800e8d2 <UART_SetConfig+0x5a6>
 800e494:	2308      	movs	r3, #8
 800e496:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e49a:	e21a      	b.n	800e8d2 <UART_SetConfig+0x5a6>
 800e49c:	2310      	movs	r3, #16
 800e49e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4a2:	e216      	b.n	800e8d2 <UART_SetConfig+0x5a6>
 800e4a4:	2320      	movs	r3, #32
 800e4a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4aa:	e212      	b.n	800e8d2 <UART_SetConfig+0x5a6>
 800e4ac:	2340      	movs	r3, #64	; 0x40
 800e4ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4b2:	e20e      	b.n	800e8d2 <UART_SetConfig+0x5a6>
 800e4b4:	2380      	movs	r3, #128	; 0x80
 800e4b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4ba:	e20a      	b.n	800e8d2 <UART_SetConfig+0x5a6>
 800e4bc:	697b      	ldr	r3, [r7, #20]
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	4a69      	ldr	r2, [pc, #420]	; (800e668 <UART_SetConfig+0x33c>)
 800e4c2:	4293      	cmp	r3, r2
 800e4c4:	d130      	bne.n	800e528 <UART_SetConfig+0x1fc>
 800e4c6:	4b67      	ldr	r3, [pc, #412]	; (800e664 <UART_SetConfig+0x338>)
 800e4c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e4ca:	f003 0307 	and.w	r3, r3, #7
 800e4ce:	2b05      	cmp	r3, #5
 800e4d0:	d826      	bhi.n	800e520 <UART_SetConfig+0x1f4>
 800e4d2:	a201      	add	r2, pc, #4	; (adr r2, 800e4d8 <UART_SetConfig+0x1ac>)
 800e4d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e4d8:	0800e4f1 	.word	0x0800e4f1
 800e4dc:	0800e4f9 	.word	0x0800e4f9
 800e4e0:	0800e501 	.word	0x0800e501
 800e4e4:	0800e509 	.word	0x0800e509
 800e4e8:	0800e511 	.word	0x0800e511
 800e4ec:	0800e519 	.word	0x0800e519
 800e4f0:	2300      	movs	r3, #0
 800e4f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4f6:	e1ec      	b.n	800e8d2 <UART_SetConfig+0x5a6>
 800e4f8:	2304      	movs	r3, #4
 800e4fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4fe:	e1e8      	b.n	800e8d2 <UART_SetConfig+0x5a6>
 800e500:	2308      	movs	r3, #8
 800e502:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e506:	e1e4      	b.n	800e8d2 <UART_SetConfig+0x5a6>
 800e508:	2310      	movs	r3, #16
 800e50a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e50e:	e1e0      	b.n	800e8d2 <UART_SetConfig+0x5a6>
 800e510:	2320      	movs	r3, #32
 800e512:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e516:	e1dc      	b.n	800e8d2 <UART_SetConfig+0x5a6>
 800e518:	2340      	movs	r3, #64	; 0x40
 800e51a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e51e:	e1d8      	b.n	800e8d2 <UART_SetConfig+0x5a6>
 800e520:	2380      	movs	r3, #128	; 0x80
 800e522:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e526:	e1d4      	b.n	800e8d2 <UART_SetConfig+0x5a6>
 800e528:	697b      	ldr	r3, [r7, #20]
 800e52a:	681b      	ldr	r3, [r3, #0]
 800e52c:	4a4f      	ldr	r2, [pc, #316]	; (800e66c <UART_SetConfig+0x340>)
 800e52e:	4293      	cmp	r3, r2
 800e530:	d130      	bne.n	800e594 <UART_SetConfig+0x268>
 800e532:	4b4c      	ldr	r3, [pc, #304]	; (800e664 <UART_SetConfig+0x338>)
 800e534:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e536:	f003 0307 	and.w	r3, r3, #7
 800e53a:	2b05      	cmp	r3, #5
 800e53c:	d826      	bhi.n	800e58c <UART_SetConfig+0x260>
 800e53e:	a201      	add	r2, pc, #4	; (adr r2, 800e544 <UART_SetConfig+0x218>)
 800e540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e544:	0800e55d 	.word	0x0800e55d
 800e548:	0800e565 	.word	0x0800e565
 800e54c:	0800e56d 	.word	0x0800e56d
 800e550:	0800e575 	.word	0x0800e575
 800e554:	0800e57d 	.word	0x0800e57d
 800e558:	0800e585 	.word	0x0800e585
 800e55c:	2300      	movs	r3, #0
 800e55e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e562:	e1b6      	b.n	800e8d2 <UART_SetConfig+0x5a6>
 800e564:	2304      	movs	r3, #4
 800e566:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e56a:	e1b2      	b.n	800e8d2 <UART_SetConfig+0x5a6>
 800e56c:	2308      	movs	r3, #8
 800e56e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e572:	e1ae      	b.n	800e8d2 <UART_SetConfig+0x5a6>
 800e574:	2310      	movs	r3, #16
 800e576:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e57a:	e1aa      	b.n	800e8d2 <UART_SetConfig+0x5a6>
 800e57c:	2320      	movs	r3, #32
 800e57e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e582:	e1a6      	b.n	800e8d2 <UART_SetConfig+0x5a6>
 800e584:	2340      	movs	r3, #64	; 0x40
 800e586:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e58a:	e1a2      	b.n	800e8d2 <UART_SetConfig+0x5a6>
 800e58c:	2380      	movs	r3, #128	; 0x80
 800e58e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e592:	e19e      	b.n	800e8d2 <UART_SetConfig+0x5a6>
 800e594:	697b      	ldr	r3, [r7, #20]
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	4a35      	ldr	r2, [pc, #212]	; (800e670 <UART_SetConfig+0x344>)
 800e59a:	4293      	cmp	r3, r2
 800e59c:	d130      	bne.n	800e600 <UART_SetConfig+0x2d4>
 800e59e:	4b31      	ldr	r3, [pc, #196]	; (800e664 <UART_SetConfig+0x338>)
 800e5a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e5a2:	f003 0307 	and.w	r3, r3, #7
 800e5a6:	2b05      	cmp	r3, #5
 800e5a8:	d826      	bhi.n	800e5f8 <UART_SetConfig+0x2cc>
 800e5aa:	a201      	add	r2, pc, #4	; (adr r2, 800e5b0 <UART_SetConfig+0x284>)
 800e5ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5b0:	0800e5c9 	.word	0x0800e5c9
 800e5b4:	0800e5d1 	.word	0x0800e5d1
 800e5b8:	0800e5d9 	.word	0x0800e5d9
 800e5bc:	0800e5e1 	.word	0x0800e5e1
 800e5c0:	0800e5e9 	.word	0x0800e5e9
 800e5c4:	0800e5f1 	.word	0x0800e5f1
 800e5c8:	2300      	movs	r3, #0
 800e5ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e5ce:	e180      	b.n	800e8d2 <UART_SetConfig+0x5a6>
 800e5d0:	2304      	movs	r3, #4
 800e5d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e5d6:	e17c      	b.n	800e8d2 <UART_SetConfig+0x5a6>
 800e5d8:	2308      	movs	r3, #8
 800e5da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e5de:	e178      	b.n	800e8d2 <UART_SetConfig+0x5a6>
 800e5e0:	2310      	movs	r3, #16
 800e5e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e5e6:	e174      	b.n	800e8d2 <UART_SetConfig+0x5a6>
 800e5e8:	2320      	movs	r3, #32
 800e5ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e5ee:	e170      	b.n	800e8d2 <UART_SetConfig+0x5a6>
 800e5f0:	2340      	movs	r3, #64	; 0x40
 800e5f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e5f6:	e16c      	b.n	800e8d2 <UART_SetConfig+0x5a6>
 800e5f8:	2380      	movs	r3, #128	; 0x80
 800e5fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e5fe:	e168      	b.n	800e8d2 <UART_SetConfig+0x5a6>
 800e600:	697b      	ldr	r3, [r7, #20]
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	4a1b      	ldr	r2, [pc, #108]	; (800e674 <UART_SetConfig+0x348>)
 800e606:	4293      	cmp	r3, r2
 800e608:	d142      	bne.n	800e690 <UART_SetConfig+0x364>
 800e60a:	4b16      	ldr	r3, [pc, #88]	; (800e664 <UART_SetConfig+0x338>)
 800e60c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e60e:	f003 0307 	and.w	r3, r3, #7
 800e612:	2b05      	cmp	r3, #5
 800e614:	d838      	bhi.n	800e688 <UART_SetConfig+0x35c>
 800e616:	a201      	add	r2, pc, #4	; (adr r2, 800e61c <UART_SetConfig+0x2f0>)
 800e618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e61c:	0800e635 	.word	0x0800e635
 800e620:	0800e63d 	.word	0x0800e63d
 800e624:	0800e645 	.word	0x0800e645
 800e628:	0800e64d 	.word	0x0800e64d
 800e62c:	0800e679 	.word	0x0800e679
 800e630:	0800e681 	.word	0x0800e681
 800e634:	2300      	movs	r3, #0
 800e636:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e63a:	e14a      	b.n	800e8d2 <UART_SetConfig+0x5a6>
 800e63c:	2304      	movs	r3, #4
 800e63e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e642:	e146      	b.n	800e8d2 <UART_SetConfig+0x5a6>
 800e644:	2308      	movs	r3, #8
 800e646:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e64a:	e142      	b.n	800e8d2 <UART_SetConfig+0x5a6>
 800e64c:	2310      	movs	r3, #16
 800e64e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e652:	e13e      	b.n	800e8d2 <UART_SetConfig+0x5a6>
 800e654:	cfff69f3 	.word	0xcfff69f3
 800e658:	58000c00 	.word	0x58000c00
 800e65c:	11fff4ff 	.word	0x11fff4ff
 800e660:	40011000 	.word	0x40011000
 800e664:	58024400 	.word	0x58024400
 800e668:	40004400 	.word	0x40004400
 800e66c:	40004800 	.word	0x40004800
 800e670:	40004c00 	.word	0x40004c00
 800e674:	40005000 	.word	0x40005000
 800e678:	2320      	movs	r3, #32
 800e67a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e67e:	e128      	b.n	800e8d2 <UART_SetConfig+0x5a6>
 800e680:	2340      	movs	r3, #64	; 0x40
 800e682:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e686:	e124      	b.n	800e8d2 <UART_SetConfig+0x5a6>
 800e688:	2380      	movs	r3, #128	; 0x80
 800e68a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e68e:	e120      	b.n	800e8d2 <UART_SetConfig+0x5a6>
 800e690:	697b      	ldr	r3, [r7, #20]
 800e692:	681b      	ldr	r3, [r3, #0]
 800e694:	4acb      	ldr	r2, [pc, #812]	; (800e9c4 <UART_SetConfig+0x698>)
 800e696:	4293      	cmp	r3, r2
 800e698:	d176      	bne.n	800e788 <UART_SetConfig+0x45c>
 800e69a:	4bcb      	ldr	r3, [pc, #812]	; (800e9c8 <UART_SetConfig+0x69c>)
 800e69c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e69e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e6a2:	2b28      	cmp	r3, #40	; 0x28
 800e6a4:	d86c      	bhi.n	800e780 <UART_SetConfig+0x454>
 800e6a6:	a201      	add	r2, pc, #4	; (adr r2, 800e6ac <UART_SetConfig+0x380>)
 800e6a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e6ac:	0800e751 	.word	0x0800e751
 800e6b0:	0800e781 	.word	0x0800e781
 800e6b4:	0800e781 	.word	0x0800e781
 800e6b8:	0800e781 	.word	0x0800e781
 800e6bc:	0800e781 	.word	0x0800e781
 800e6c0:	0800e781 	.word	0x0800e781
 800e6c4:	0800e781 	.word	0x0800e781
 800e6c8:	0800e781 	.word	0x0800e781
 800e6cc:	0800e759 	.word	0x0800e759
 800e6d0:	0800e781 	.word	0x0800e781
 800e6d4:	0800e781 	.word	0x0800e781
 800e6d8:	0800e781 	.word	0x0800e781
 800e6dc:	0800e781 	.word	0x0800e781
 800e6e0:	0800e781 	.word	0x0800e781
 800e6e4:	0800e781 	.word	0x0800e781
 800e6e8:	0800e781 	.word	0x0800e781
 800e6ec:	0800e761 	.word	0x0800e761
 800e6f0:	0800e781 	.word	0x0800e781
 800e6f4:	0800e781 	.word	0x0800e781
 800e6f8:	0800e781 	.word	0x0800e781
 800e6fc:	0800e781 	.word	0x0800e781
 800e700:	0800e781 	.word	0x0800e781
 800e704:	0800e781 	.word	0x0800e781
 800e708:	0800e781 	.word	0x0800e781
 800e70c:	0800e769 	.word	0x0800e769
 800e710:	0800e781 	.word	0x0800e781
 800e714:	0800e781 	.word	0x0800e781
 800e718:	0800e781 	.word	0x0800e781
 800e71c:	0800e781 	.word	0x0800e781
 800e720:	0800e781 	.word	0x0800e781
 800e724:	0800e781 	.word	0x0800e781
 800e728:	0800e781 	.word	0x0800e781
 800e72c:	0800e771 	.word	0x0800e771
 800e730:	0800e781 	.word	0x0800e781
 800e734:	0800e781 	.word	0x0800e781
 800e738:	0800e781 	.word	0x0800e781
 800e73c:	0800e781 	.word	0x0800e781
 800e740:	0800e781 	.word	0x0800e781
 800e744:	0800e781 	.word	0x0800e781
 800e748:	0800e781 	.word	0x0800e781
 800e74c:	0800e779 	.word	0x0800e779
 800e750:	2301      	movs	r3, #1
 800e752:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e756:	e0bc      	b.n	800e8d2 <UART_SetConfig+0x5a6>
 800e758:	2304      	movs	r3, #4
 800e75a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e75e:	e0b8      	b.n	800e8d2 <UART_SetConfig+0x5a6>
 800e760:	2308      	movs	r3, #8
 800e762:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e766:	e0b4      	b.n	800e8d2 <UART_SetConfig+0x5a6>
 800e768:	2310      	movs	r3, #16
 800e76a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e76e:	e0b0      	b.n	800e8d2 <UART_SetConfig+0x5a6>
 800e770:	2320      	movs	r3, #32
 800e772:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e776:	e0ac      	b.n	800e8d2 <UART_SetConfig+0x5a6>
 800e778:	2340      	movs	r3, #64	; 0x40
 800e77a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e77e:	e0a8      	b.n	800e8d2 <UART_SetConfig+0x5a6>
 800e780:	2380      	movs	r3, #128	; 0x80
 800e782:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e786:	e0a4      	b.n	800e8d2 <UART_SetConfig+0x5a6>
 800e788:	697b      	ldr	r3, [r7, #20]
 800e78a:	681b      	ldr	r3, [r3, #0]
 800e78c:	4a8f      	ldr	r2, [pc, #572]	; (800e9cc <UART_SetConfig+0x6a0>)
 800e78e:	4293      	cmp	r3, r2
 800e790:	d130      	bne.n	800e7f4 <UART_SetConfig+0x4c8>
 800e792:	4b8d      	ldr	r3, [pc, #564]	; (800e9c8 <UART_SetConfig+0x69c>)
 800e794:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e796:	f003 0307 	and.w	r3, r3, #7
 800e79a:	2b05      	cmp	r3, #5
 800e79c:	d826      	bhi.n	800e7ec <UART_SetConfig+0x4c0>
 800e79e:	a201      	add	r2, pc, #4	; (adr r2, 800e7a4 <UART_SetConfig+0x478>)
 800e7a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7a4:	0800e7bd 	.word	0x0800e7bd
 800e7a8:	0800e7c5 	.word	0x0800e7c5
 800e7ac:	0800e7cd 	.word	0x0800e7cd
 800e7b0:	0800e7d5 	.word	0x0800e7d5
 800e7b4:	0800e7dd 	.word	0x0800e7dd
 800e7b8:	0800e7e5 	.word	0x0800e7e5
 800e7bc:	2300      	movs	r3, #0
 800e7be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7c2:	e086      	b.n	800e8d2 <UART_SetConfig+0x5a6>
 800e7c4:	2304      	movs	r3, #4
 800e7c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7ca:	e082      	b.n	800e8d2 <UART_SetConfig+0x5a6>
 800e7cc:	2308      	movs	r3, #8
 800e7ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7d2:	e07e      	b.n	800e8d2 <UART_SetConfig+0x5a6>
 800e7d4:	2310      	movs	r3, #16
 800e7d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7da:	e07a      	b.n	800e8d2 <UART_SetConfig+0x5a6>
 800e7dc:	2320      	movs	r3, #32
 800e7de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7e2:	e076      	b.n	800e8d2 <UART_SetConfig+0x5a6>
 800e7e4:	2340      	movs	r3, #64	; 0x40
 800e7e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7ea:	e072      	b.n	800e8d2 <UART_SetConfig+0x5a6>
 800e7ec:	2380      	movs	r3, #128	; 0x80
 800e7ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7f2:	e06e      	b.n	800e8d2 <UART_SetConfig+0x5a6>
 800e7f4:	697b      	ldr	r3, [r7, #20]
 800e7f6:	681b      	ldr	r3, [r3, #0]
 800e7f8:	4a75      	ldr	r2, [pc, #468]	; (800e9d0 <UART_SetConfig+0x6a4>)
 800e7fa:	4293      	cmp	r3, r2
 800e7fc:	d130      	bne.n	800e860 <UART_SetConfig+0x534>
 800e7fe:	4b72      	ldr	r3, [pc, #456]	; (800e9c8 <UART_SetConfig+0x69c>)
 800e800:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e802:	f003 0307 	and.w	r3, r3, #7
 800e806:	2b05      	cmp	r3, #5
 800e808:	d826      	bhi.n	800e858 <UART_SetConfig+0x52c>
 800e80a:	a201      	add	r2, pc, #4	; (adr r2, 800e810 <UART_SetConfig+0x4e4>)
 800e80c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e810:	0800e829 	.word	0x0800e829
 800e814:	0800e831 	.word	0x0800e831
 800e818:	0800e839 	.word	0x0800e839
 800e81c:	0800e841 	.word	0x0800e841
 800e820:	0800e849 	.word	0x0800e849
 800e824:	0800e851 	.word	0x0800e851
 800e828:	2300      	movs	r3, #0
 800e82a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e82e:	e050      	b.n	800e8d2 <UART_SetConfig+0x5a6>
 800e830:	2304      	movs	r3, #4
 800e832:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e836:	e04c      	b.n	800e8d2 <UART_SetConfig+0x5a6>
 800e838:	2308      	movs	r3, #8
 800e83a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e83e:	e048      	b.n	800e8d2 <UART_SetConfig+0x5a6>
 800e840:	2310      	movs	r3, #16
 800e842:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e846:	e044      	b.n	800e8d2 <UART_SetConfig+0x5a6>
 800e848:	2320      	movs	r3, #32
 800e84a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e84e:	e040      	b.n	800e8d2 <UART_SetConfig+0x5a6>
 800e850:	2340      	movs	r3, #64	; 0x40
 800e852:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e856:	e03c      	b.n	800e8d2 <UART_SetConfig+0x5a6>
 800e858:	2380      	movs	r3, #128	; 0x80
 800e85a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e85e:	e038      	b.n	800e8d2 <UART_SetConfig+0x5a6>
 800e860:	697b      	ldr	r3, [r7, #20]
 800e862:	681b      	ldr	r3, [r3, #0]
 800e864:	4a5b      	ldr	r2, [pc, #364]	; (800e9d4 <UART_SetConfig+0x6a8>)
 800e866:	4293      	cmp	r3, r2
 800e868:	d130      	bne.n	800e8cc <UART_SetConfig+0x5a0>
 800e86a:	4b57      	ldr	r3, [pc, #348]	; (800e9c8 <UART_SetConfig+0x69c>)
 800e86c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e86e:	f003 0307 	and.w	r3, r3, #7
 800e872:	2b05      	cmp	r3, #5
 800e874:	d826      	bhi.n	800e8c4 <UART_SetConfig+0x598>
 800e876:	a201      	add	r2, pc, #4	; (adr r2, 800e87c <UART_SetConfig+0x550>)
 800e878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e87c:	0800e895 	.word	0x0800e895
 800e880:	0800e89d 	.word	0x0800e89d
 800e884:	0800e8a5 	.word	0x0800e8a5
 800e888:	0800e8ad 	.word	0x0800e8ad
 800e88c:	0800e8b5 	.word	0x0800e8b5
 800e890:	0800e8bd 	.word	0x0800e8bd
 800e894:	2302      	movs	r3, #2
 800e896:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e89a:	e01a      	b.n	800e8d2 <UART_SetConfig+0x5a6>
 800e89c:	2304      	movs	r3, #4
 800e89e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e8a2:	e016      	b.n	800e8d2 <UART_SetConfig+0x5a6>
 800e8a4:	2308      	movs	r3, #8
 800e8a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e8aa:	e012      	b.n	800e8d2 <UART_SetConfig+0x5a6>
 800e8ac:	2310      	movs	r3, #16
 800e8ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e8b2:	e00e      	b.n	800e8d2 <UART_SetConfig+0x5a6>
 800e8b4:	2320      	movs	r3, #32
 800e8b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e8ba:	e00a      	b.n	800e8d2 <UART_SetConfig+0x5a6>
 800e8bc:	2340      	movs	r3, #64	; 0x40
 800e8be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e8c2:	e006      	b.n	800e8d2 <UART_SetConfig+0x5a6>
 800e8c4:	2380      	movs	r3, #128	; 0x80
 800e8c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e8ca:	e002      	b.n	800e8d2 <UART_SetConfig+0x5a6>
 800e8cc:	2380      	movs	r3, #128	; 0x80
 800e8ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800e8d2:	697b      	ldr	r3, [r7, #20]
 800e8d4:	681b      	ldr	r3, [r3, #0]
 800e8d6:	4a3f      	ldr	r2, [pc, #252]	; (800e9d4 <UART_SetConfig+0x6a8>)
 800e8d8:	4293      	cmp	r3, r2
 800e8da:	f040 80f8 	bne.w	800eace <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800e8de:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e8e2:	2b20      	cmp	r3, #32
 800e8e4:	dc46      	bgt.n	800e974 <UART_SetConfig+0x648>
 800e8e6:	2b02      	cmp	r3, #2
 800e8e8:	f2c0 8082 	blt.w	800e9f0 <UART_SetConfig+0x6c4>
 800e8ec:	3b02      	subs	r3, #2
 800e8ee:	2b1e      	cmp	r3, #30
 800e8f0:	d87e      	bhi.n	800e9f0 <UART_SetConfig+0x6c4>
 800e8f2:	a201      	add	r2, pc, #4	; (adr r2, 800e8f8 <UART_SetConfig+0x5cc>)
 800e8f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e8f8:	0800e97b 	.word	0x0800e97b
 800e8fc:	0800e9f1 	.word	0x0800e9f1
 800e900:	0800e983 	.word	0x0800e983
 800e904:	0800e9f1 	.word	0x0800e9f1
 800e908:	0800e9f1 	.word	0x0800e9f1
 800e90c:	0800e9f1 	.word	0x0800e9f1
 800e910:	0800e993 	.word	0x0800e993
 800e914:	0800e9f1 	.word	0x0800e9f1
 800e918:	0800e9f1 	.word	0x0800e9f1
 800e91c:	0800e9f1 	.word	0x0800e9f1
 800e920:	0800e9f1 	.word	0x0800e9f1
 800e924:	0800e9f1 	.word	0x0800e9f1
 800e928:	0800e9f1 	.word	0x0800e9f1
 800e92c:	0800e9f1 	.word	0x0800e9f1
 800e930:	0800e9a3 	.word	0x0800e9a3
 800e934:	0800e9f1 	.word	0x0800e9f1
 800e938:	0800e9f1 	.word	0x0800e9f1
 800e93c:	0800e9f1 	.word	0x0800e9f1
 800e940:	0800e9f1 	.word	0x0800e9f1
 800e944:	0800e9f1 	.word	0x0800e9f1
 800e948:	0800e9f1 	.word	0x0800e9f1
 800e94c:	0800e9f1 	.word	0x0800e9f1
 800e950:	0800e9f1 	.word	0x0800e9f1
 800e954:	0800e9f1 	.word	0x0800e9f1
 800e958:	0800e9f1 	.word	0x0800e9f1
 800e95c:	0800e9f1 	.word	0x0800e9f1
 800e960:	0800e9f1 	.word	0x0800e9f1
 800e964:	0800e9f1 	.word	0x0800e9f1
 800e968:	0800e9f1 	.word	0x0800e9f1
 800e96c:	0800e9f1 	.word	0x0800e9f1
 800e970:	0800e9e3 	.word	0x0800e9e3
 800e974:	2b40      	cmp	r3, #64	; 0x40
 800e976:	d037      	beq.n	800e9e8 <UART_SetConfig+0x6bc>
 800e978:	e03a      	b.n	800e9f0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800e97a:	f7fc fee3 	bl	800b744 <HAL_RCCEx_GetD3PCLK1Freq>
 800e97e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e980:	e03c      	b.n	800e9fc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e982:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e986:	4618      	mov	r0, r3
 800e988:	f7fc fef2 	bl	800b770 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e98c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e98e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e990:	e034      	b.n	800e9fc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e992:	f107 0318 	add.w	r3, r7, #24
 800e996:	4618      	mov	r0, r3
 800e998:	f7fd f83e 	bl	800ba18 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e99c:	69fb      	ldr	r3, [r7, #28]
 800e99e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e9a0:	e02c      	b.n	800e9fc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e9a2:	4b09      	ldr	r3, [pc, #36]	; (800e9c8 <UART_SetConfig+0x69c>)
 800e9a4:	681b      	ldr	r3, [r3, #0]
 800e9a6:	f003 0320 	and.w	r3, r3, #32
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	d016      	beq.n	800e9dc <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e9ae:	4b06      	ldr	r3, [pc, #24]	; (800e9c8 <UART_SetConfig+0x69c>)
 800e9b0:	681b      	ldr	r3, [r3, #0]
 800e9b2:	08db      	lsrs	r3, r3, #3
 800e9b4:	f003 0303 	and.w	r3, r3, #3
 800e9b8:	4a07      	ldr	r2, [pc, #28]	; (800e9d8 <UART_SetConfig+0x6ac>)
 800e9ba:	fa22 f303 	lsr.w	r3, r2, r3
 800e9be:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e9c0:	e01c      	b.n	800e9fc <UART_SetConfig+0x6d0>
 800e9c2:	bf00      	nop
 800e9c4:	40011400 	.word	0x40011400
 800e9c8:	58024400 	.word	0x58024400
 800e9cc:	40007800 	.word	0x40007800
 800e9d0:	40007c00 	.word	0x40007c00
 800e9d4:	58000c00 	.word	0x58000c00
 800e9d8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800e9dc:	4b9d      	ldr	r3, [pc, #628]	; (800ec54 <UART_SetConfig+0x928>)
 800e9de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e9e0:	e00c      	b.n	800e9fc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e9e2:	4b9d      	ldr	r3, [pc, #628]	; (800ec58 <UART_SetConfig+0x92c>)
 800e9e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e9e6:	e009      	b.n	800e9fc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e9e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e9ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e9ee:	e005      	b.n	800e9fc <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800e9f0:	2300      	movs	r3, #0
 800e9f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e9f4:	2301      	movs	r3, #1
 800e9f6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e9fa:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800e9fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	f000 81de 	beq.w	800edc0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ea04:	697b      	ldr	r3, [r7, #20]
 800ea06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea08:	4a94      	ldr	r2, [pc, #592]	; (800ec5c <UART_SetConfig+0x930>)
 800ea0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ea0e:	461a      	mov	r2, r3
 800ea10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ea12:	fbb3 f3f2 	udiv	r3, r3, r2
 800ea16:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ea18:	697b      	ldr	r3, [r7, #20]
 800ea1a:	685a      	ldr	r2, [r3, #4]
 800ea1c:	4613      	mov	r3, r2
 800ea1e:	005b      	lsls	r3, r3, #1
 800ea20:	4413      	add	r3, r2
 800ea22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ea24:	429a      	cmp	r2, r3
 800ea26:	d305      	bcc.n	800ea34 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ea28:	697b      	ldr	r3, [r7, #20]
 800ea2a:	685b      	ldr	r3, [r3, #4]
 800ea2c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ea2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ea30:	429a      	cmp	r2, r3
 800ea32:	d903      	bls.n	800ea3c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800ea34:	2301      	movs	r3, #1
 800ea36:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800ea3a:	e1c1      	b.n	800edc0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ea3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ea3e:	2200      	movs	r2, #0
 800ea40:	60bb      	str	r3, [r7, #8]
 800ea42:	60fa      	str	r2, [r7, #12]
 800ea44:	697b      	ldr	r3, [r7, #20]
 800ea46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea48:	4a84      	ldr	r2, [pc, #528]	; (800ec5c <UART_SetConfig+0x930>)
 800ea4a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ea4e:	b29b      	uxth	r3, r3
 800ea50:	2200      	movs	r2, #0
 800ea52:	603b      	str	r3, [r7, #0]
 800ea54:	607a      	str	r2, [r7, #4]
 800ea56:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ea5a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ea5e:	f7f1 fe53 	bl	8000708 <__aeabi_uldivmod>
 800ea62:	4602      	mov	r2, r0
 800ea64:	460b      	mov	r3, r1
 800ea66:	4610      	mov	r0, r2
 800ea68:	4619      	mov	r1, r3
 800ea6a:	f04f 0200 	mov.w	r2, #0
 800ea6e:	f04f 0300 	mov.w	r3, #0
 800ea72:	020b      	lsls	r3, r1, #8
 800ea74:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ea78:	0202      	lsls	r2, r0, #8
 800ea7a:	6979      	ldr	r1, [r7, #20]
 800ea7c:	6849      	ldr	r1, [r1, #4]
 800ea7e:	0849      	lsrs	r1, r1, #1
 800ea80:	2000      	movs	r0, #0
 800ea82:	460c      	mov	r4, r1
 800ea84:	4605      	mov	r5, r0
 800ea86:	eb12 0804 	adds.w	r8, r2, r4
 800ea8a:	eb43 0905 	adc.w	r9, r3, r5
 800ea8e:	697b      	ldr	r3, [r7, #20]
 800ea90:	685b      	ldr	r3, [r3, #4]
 800ea92:	2200      	movs	r2, #0
 800ea94:	469a      	mov	sl, r3
 800ea96:	4693      	mov	fp, r2
 800ea98:	4652      	mov	r2, sl
 800ea9a:	465b      	mov	r3, fp
 800ea9c:	4640      	mov	r0, r8
 800ea9e:	4649      	mov	r1, r9
 800eaa0:	f7f1 fe32 	bl	8000708 <__aeabi_uldivmod>
 800eaa4:	4602      	mov	r2, r0
 800eaa6:	460b      	mov	r3, r1
 800eaa8:	4613      	mov	r3, r2
 800eaaa:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800eaac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eaae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800eab2:	d308      	bcc.n	800eac6 <UART_SetConfig+0x79a>
 800eab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eab6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800eaba:	d204      	bcs.n	800eac6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800eabc:	697b      	ldr	r3, [r7, #20]
 800eabe:	681b      	ldr	r3, [r3, #0]
 800eac0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800eac2:	60da      	str	r2, [r3, #12]
 800eac4:	e17c      	b.n	800edc0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800eac6:	2301      	movs	r3, #1
 800eac8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800eacc:	e178      	b.n	800edc0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800eace:	697b      	ldr	r3, [r7, #20]
 800ead0:	69db      	ldr	r3, [r3, #28]
 800ead2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ead6:	f040 80c5 	bne.w	800ec64 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800eada:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800eade:	2b20      	cmp	r3, #32
 800eae0:	dc48      	bgt.n	800eb74 <UART_SetConfig+0x848>
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	db7b      	blt.n	800ebde <UART_SetConfig+0x8b2>
 800eae6:	2b20      	cmp	r3, #32
 800eae8:	d879      	bhi.n	800ebde <UART_SetConfig+0x8b2>
 800eaea:	a201      	add	r2, pc, #4	; (adr r2, 800eaf0 <UART_SetConfig+0x7c4>)
 800eaec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eaf0:	0800eb7b 	.word	0x0800eb7b
 800eaf4:	0800eb83 	.word	0x0800eb83
 800eaf8:	0800ebdf 	.word	0x0800ebdf
 800eafc:	0800ebdf 	.word	0x0800ebdf
 800eb00:	0800eb8b 	.word	0x0800eb8b
 800eb04:	0800ebdf 	.word	0x0800ebdf
 800eb08:	0800ebdf 	.word	0x0800ebdf
 800eb0c:	0800ebdf 	.word	0x0800ebdf
 800eb10:	0800eb9b 	.word	0x0800eb9b
 800eb14:	0800ebdf 	.word	0x0800ebdf
 800eb18:	0800ebdf 	.word	0x0800ebdf
 800eb1c:	0800ebdf 	.word	0x0800ebdf
 800eb20:	0800ebdf 	.word	0x0800ebdf
 800eb24:	0800ebdf 	.word	0x0800ebdf
 800eb28:	0800ebdf 	.word	0x0800ebdf
 800eb2c:	0800ebdf 	.word	0x0800ebdf
 800eb30:	0800ebab 	.word	0x0800ebab
 800eb34:	0800ebdf 	.word	0x0800ebdf
 800eb38:	0800ebdf 	.word	0x0800ebdf
 800eb3c:	0800ebdf 	.word	0x0800ebdf
 800eb40:	0800ebdf 	.word	0x0800ebdf
 800eb44:	0800ebdf 	.word	0x0800ebdf
 800eb48:	0800ebdf 	.word	0x0800ebdf
 800eb4c:	0800ebdf 	.word	0x0800ebdf
 800eb50:	0800ebdf 	.word	0x0800ebdf
 800eb54:	0800ebdf 	.word	0x0800ebdf
 800eb58:	0800ebdf 	.word	0x0800ebdf
 800eb5c:	0800ebdf 	.word	0x0800ebdf
 800eb60:	0800ebdf 	.word	0x0800ebdf
 800eb64:	0800ebdf 	.word	0x0800ebdf
 800eb68:	0800ebdf 	.word	0x0800ebdf
 800eb6c:	0800ebdf 	.word	0x0800ebdf
 800eb70:	0800ebd1 	.word	0x0800ebd1
 800eb74:	2b40      	cmp	r3, #64	; 0x40
 800eb76:	d02e      	beq.n	800ebd6 <UART_SetConfig+0x8aa>
 800eb78:	e031      	b.n	800ebde <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800eb7a:	f7fa fdeb 	bl	8009754 <HAL_RCC_GetPCLK1Freq>
 800eb7e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800eb80:	e033      	b.n	800ebea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800eb82:	f7fa fdfd 	bl	8009780 <HAL_RCC_GetPCLK2Freq>
 800eb86:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800eb88:	e02f      	b.n	800ebea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800eb8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800eb8e:	4618      	mov	r0, r3
 800eb90:	f7fc fdee 	bl	800b770 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800eb94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eb98:	e027      	b.n	800ebea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800eb9a:	f107 0318 	add.w	r3, r7, #24
 800eb9e:	4618      	mov	r0, r3
 800eba0:	f7fc ff3a 	bl	800ba18 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800eba4:	69fb      	ldr	r3, [r7, #28]
 800eba6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eba8:	e01f      	b.n	800ebea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ebaa:	4b2d      	ldr	r3, [pc, #180]	; (800ec60 <UART_SetConfig+0x934>)
 800ebac:	681b      	ldr	r3, [r3, #0]
 800ebae:	f003 0320 	and.w	r3, r3, #32
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	d009      	beq.n	800ebca <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ebb6:	4b2a      	ldr	r3, [pc, #168]	; (800ec60 <UART_SetConfig+0x934>)
 800ebb8:	681b      	ldr	r3, [r3, #0]
 800ebba:	08db      	lsrs	r3, r3, #3
 800ebbc:	f003 0303 	and.w	r3, r3, #3
 800ebc0:	4a24      	ldr	r2, [pc, #144]	; (800ec54 <UART_SetConfig+0x928>)
 800ebc2:	fa22 f303 	lsr.w	r3, r2, r3
 800ebc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ebc8:	e00f      	b.n	800ebea <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800ebca:	4b22      	ldr	r3, [pc, #136]	; (800ec54 <UART_SetConfig+0x928>)
 800ebcc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ebce:	e00c      	b.n	800ebea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ebd0:	4b21      	ldr	r3, [pc, #132]	; (800ec58 <UART_SetConfig+0x92c>)
 800ebd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ebd4:	e009      	b.n	800ebea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ebd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ebda:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ebdc:	e005      	b.n	800ebea <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800ebde:	2300      	movs	r3, #0
 800ebe0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800ebe2:	2301      	movs	r3, #1
 800ebe4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800ebe8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ebea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	f000 80e7 	beq.w	800edc0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ebf2:	697b      	ldr	r3, [r7, #20]
 800ebf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebf6:	4a19      	ldr	r2, [pc, #100]	; (800ec5c <UART_SetConfig+0x930>)
 800ebf8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ebfc:	461a      	mov	r2, r3
 800ebfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec00:	fbb3 f3f2 	udiv	r3, r3, r2
 800ec04:	005a      	lsls	r2, r3, #1
 800ec06:	697b      	ldr	r3, [r7, #20]
 800ec08:	685b      	ldr	r3, [r3, #4]
 800ec0a:	085b      	lsrs	r3, r3, #1
 800ec0c:	441a      	add	r2, r3
 800ec0e:	697b      	ldr	r3, [r7, #20]
 800ec10:	685b      	ldr	r3, [r3, #4]
 800ec12:	fbb2 f3f3 	udiv	r3, r2, r3
 800ec16:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ec18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec1a:	2b0f      	cmp	r3, #15
 800ec1c:	d916      	bls.n	800ec4c <UART_SetConfig+0x920>
 800ec1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ec24:	d212      	bcs.n	800ec4c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ec26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec28:	b29b      	uxth	r3, r3
 800ec2a:	f023 030f 	bic.w	r3, r3, #15
 800ec2e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ec30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec32:	085b      	lsrs	r3, r3, #1
 800ec34:	b29b      	uxth	r3, r3
 800ec36:	f003 0307 	and.w	r3, r3, #7
 800ec3a:	b29a      	uxth	r2, r3
 800ec3c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ec3e:	4313      	orrs	r3, r2
 800ec40:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800ec42:	697b      	ldr	r3, [r7, #20]
 800ec44:	681b      	ldr	r3, [r3, #0]
 800ec46:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800ec48:	60da      	str	r2, [r3, #12]
 800ec4a:	e0b9      	b.n	800edc0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800ec4c:	2301      	movs	r3, #1
 800ec4e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800ec52:	e0b5      	b.n	800edc0 <UART_SetConfig+0xa94>
 800ec54:	03d09000 	.word	0x03d09000
 800ec58:	003d0900 	.word	0x003d0900
 800ec5c:	08017c54 	.word	0x08017c54
 800ec60:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800ec64:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ec68:	2b20      	cmp	r3, #32
 800ec6a:	dc49      	bgt.n	800ed00 <UART_SetConfig+0x9d4>
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	db7c      	blt.n	800ed6a <UART_SetConfig+0xa3e>
 800ec70:	2b20      	cmp	r3, #32
 800ec72:	d87a      	bhi.n	800ed6a <UART_SetConfig+0xa3e>
 800ec74:	a201      	add	r2, pc, #4	; (adr r2, 800ec7c <UART_SetConfig+0x950>)
 800ec76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec7a:	bf00      	nop
 800ec7c:	0800ed07 	.word	0x0800ed07
 800ec80:	0800ed0f 	.word	0x0800ed0f
 800ec84:	0800ed6b 	.word	0x0800ed6b
 800ec88:	0800ed6b 	.word	0x0800ed6b
 800ec8c:	0800ed17 	.word	0x0800ed17
 800ec90:	0800ed6b 	.word	0x0800ed6b
 800ec94:	0800ed6b 	.word	0x0800ed6b
 800ec98:	0800ed6b 	.word	0x0800ed6b
 800ec9c:	0800ed27 	.word	0x0800ed27
 800eca0:	0800ed6b 	.word	0x0800ed6b
 800eca4:	0800ed6b 	.word	0x0800ed6b
 800eca8:	0800ed6b 	.word	0x0800ed6b
 800ecac:	0800ed6b 	.word	0x0800ed6b
 800ecb0:	0800ed6b 	.word	0x0800ed6b
 800ecb4:	0800ed6b 	.word	0x0800ed6b
 800ecb8:	0800ed6b 	.word	0x0800ed6b
 800ecbc:	0800ed37 	.word	0x0800ed37
 800ecc0:	0800ed6b 	.word	0x0800ed6b
 800ecc4:	0800ed6b 	.word	0x0800ed6b
 800ecc8:	0800ed6b 	.word	0x0800ed6b
 800eccc:	0800ed6b 	.word	0x0800ed6b
 800ecd0:	0800ed6b 	.word	0x0800ed6b
 800ecd4:	0800ed6b 	.word	0x0800ed6b
 800ecd8:	0800ed6b 	.word	0x0800ed6b
 800ecdc:	0800ed6b 	.word	0x0800ed6b
 800ece0:	0800ed6b 	.word	0x0800ed6b
 800ece4:	0800ed6b 	.word	0x0800ed6b
 800ece8:	0800ed6b 	.word	0x0800ed6b
 800ecec:	0800ed6b 	.word	0x0800ed6b
 800ecf0:	0800ed6b 	.word	0x0800ed6b
 800ecf4:	0800ed6b 	.word	0x0800ed6b
 800ecf8:	0800ed6b 	.word	0x0800ed6b
 800ecfc:	0800ed5d 	.word	0x0800ed5d
 800ed00:	2b40      	cmp	r3, #64	; 0x40
 800ed02:	d02e      	beq.n	800ed62 <UART_SetConfig+0xa36>
 800ed04:	e031      	b.n	800ed6a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ed06:	f7fa fd25 	bl	8009754 <HAL_RCC_GetPCLK1Freq>
 800ed0a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ed0c:	e033      	b.n	800ed76 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ed0e:	f7fa fd37 	bl	8009780 <HAL_RCC_GetPCLK2Freq>
 800ed12:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ed14:	e02f      	b.n	800ed76 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ed16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ed1a:	4618      	mov	r0, r3
 800ed1c:	f7fc fd28 	bl	800b770 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ed20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed22:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ed24:	e027      	b.n	800ed76 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ed26:	f107 0318 	add.w	r3, r7, #24
 800ed2a:	4618      	mov	r0, r3
 800ed2c:	f7fc fe74 	bl	800ba18 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ed30:	69fb      	ldr	r3, [r7, #28]
 800ed32:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ed34:	e01f      	b.n	800ed76 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ed36:	4b2d      	ldr	r3, [pc, #180]	; (800edec <UART_SetConfig+0xac0>)
 800ed38:	681b      	ldr	r3, [r3, #0]
 800ed3a:	f003 0320 	and.w	r3, r3, #32
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	d009      	beq.n	800ed56 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ed42:	4b2a      	ldr	r3, [pc, #168]	; (800edec <UART_SetConfig+0xac0>)
 800ed44:	681b      	ldr	r3, [r3, #0]
 800ed46:	08db      	lsrs	r3, r3, #3
 800ed48:	f003 0303 	and.w	r3, r3, #3
 800ed4c:	4a28      	ldr	r2, [pc, #160]	; (800edf0 <UART_SetConfig+0xac4>)
 800ed4e:	fa22 f303 	lsr.w	r3, r2, r3
 800ed52:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ed54:	e00f      	b.n	800ed76 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800ed56:	4b26      	ldr	r3, [pc, #152]	; (800edf0 <UART_SetConfig+0xac4>)
 800ed58:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ed5a:	e00c      	b.n	800ed76 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ed5c:	4b25      	ldr	r3, [pc, #148]	; (800edf4 <UART_SetConfig+0xac8>)
 800ed5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ed60:	e009      	b.n	800ed76 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ed62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ed66:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ed68:	e005      	b.n	800ed76 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800ed6a:	2300      	movs	r3, #0
 800ed6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800ed6e:	2301      	movs	r3, #1
 800ed70:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800ed74:	bf00      	nop
    }

    if (pclk != 0U)
 800ed76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	d021      	beq.n	800edc0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ed7c:	697b      	ldr	r3, [r7, #20]
 800ed7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed80:	4a1d      	ldr	r2, [pc, #116]	; (800edf8 <UART_SetConfig+0xacc>)
 800ed82:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ed86:	461a      	mov	r2, r3
 800ed88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed8a:	fbb3 f2f2 	udiv	r2, r3, r2
 800ed8e:	697b      	ldr	r3, [r7, #20]
 800ed90:	685b      	ldr	r3, [r3, #4]
 800ed92:	085b      	lsrs	r3, r3, #1
 800ed94:	441a      	add	r2, r3
 800ed96:	697b      	ldr	r3, [r7, #20]
 800ed98:	685b      	ldr	r3, [r3, #4]
 800ed9a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ed9e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800eda0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eda2:	2b0f      	cmp	r3, #15
 800eda4:	d909      	bls.n	800edba <UART_SetConfig+0xa8e>
 800eda6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eda8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800edac:	d205      	bcs.n	800edba <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800edae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edb0:	b29a      	uxth	r2, r3
 800edb2:	697b      	ldr	r3, [r7, #20]
 800edb4:	681b      	ldr	r3, [r3, #0]
 800edb6:	60da      	str	r2, [r3, #12]
 800edb8:	e002      	b.n	800edc0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800edba:	2301      	movs	r3, #1
 800edbc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800edc0:	697b      	ldr	r3, [r7, #20]
 800edc2:	2201      	movs	r2, #1
 800edc4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800edc8:	697b      	ldr	r3, [r7, #20]
 800edca:	2201      	movs	r2, #1
 800edcc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800edd0:	697b      	ldr	r3, [r7, #20]
 800edd2:	2200      	movs	r2, #0
 800edd4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800edd6:	697b      	ldr	r3, [r7, #20]
 800edd8:	2200      	movs	r2, #0
 800edda:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800eddc:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800ede0:	4618      	mov	r0, r3
 800ede2:	3748      	adds	r7, #72	; 0x48
 800ede4:	46bd      	mov	sp, r7
 800ede6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800edea:	bf00      	nop
 800edec:	58024400 	.word	0x58024400
 800edf0:	03d09000 	.word	0x03d09000
 800edf4:	003d0900 	.word	0x003d0900
 800edf8:	08017c54 	.word	0x08017c54

0800edfc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800edfc:	b480      	push	{r7}
 800edfe:	b083      	sub	sp, #12
 800ee00:	af00      	add	r7, sp, #0
 800ee02:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee08:	f003 0301 	and.w	r3, r3, #1
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	d00a      	beq.n	800ee26 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	681b      	ldr	r3, [r3, #0]
 800ee14:	685b      	ldr	r3, [r3, #4]
 800ee16:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	681b      	ldr	r3, [r3, #0]
 800ee22:	430a      	orrs	r2, r1
 800ee24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee2a:	f003 0302 	and.w	r3, r3, #2
 800ee2e:	2b00      	cmp	r3, #0
 800ee30:	d00a      	beq.n	800ee48 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	681b      	ldr	r3, [r3, #0]
 800ee36:	685b      	ldr	r3, [r3, #4]
 800ee38:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	681b      	ldr	r3, [r3, #0]
 800ee44:	430a      	orrs	r2, r1
 800ee46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee4c:	f003 0304 	and.w	r3, r3, #4
 800ee50:	2b00      	cmp	r3, #0
 800ee52:	d00a      	beq.n	800ee6a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	681b      	ldr	r3, [r3, #0]
 800ee58:	685b      	ldr	r3, [r3, #4]
 800ee5a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	681b      	ldr	r3, [r3, #0]
 800ee66:	430a      	orrs	r2, r1
 800ee68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee6e:	f003 0308 	and.w	r3, r3, #8
 800ee72:	2b00      	cmp	r3, #0
 800ee74:	d00a      	beq.n	800ee8c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	681b      	ldr	r3, [r3, #0]
 800ee7a:	685b      	ldr	r3, [r3, #4]
 800ee7c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	681b      	ldr	r3, [r3, #0]
 800ee88:	430a      	orrs	r2, r1
 800ee8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee90:	f003 0310 	and.w	r3, r3, #16
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	d00a      	beq.n	800eeae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	681b      	ldr	r3, [r3, #0]
 800ee9c:	689b      	ldr	r3, [r3, #8]
 800ee9e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	681b      	ldr	r3, [r3, #0]
 800eeaa:	430a      	orrs	r2, r1
 800eeac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eeb2:	f003 0320 	and.w	r3, r3, #32
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	d00a      	beq.n	800eed0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	681b      	ldr	r3, [r3, #0]
 800eebe:	689b      	ldr	r3, [r3, #8]
 800eec0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	681b      	ldr	r3, [r3, #0]
 800eecc:	430a      	orrs	r2, r1
 800eece:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eed4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eed8:	2b00      	cmp	r3, #0
 800eeda:	d01a      	beq.n	800ef12 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	681b      	ldr	r3, [r3, #0]
 800eee0:	685b      	ldr	r3, [r3, #4]
 800eee2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	681b      	ldr	r3, [r3, #0]
 800eeee:	430a      	orrs	r2, r1
 800eef0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eef6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800eefa:	d10a      	bne.n	800ef12 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	681b      	ldr	r3, [r3, #0]
 800ef00:	685b      	ldr	r3, [r3, #4]
 800ef02:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	681b      	ldr	r3, [r3, #0]
 800ef0e:	430a      	orrs	r2, r1
 800ef10:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ef16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	d00a      	beq.n	800ef34 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	681b      	ldr	r3, [r3, #0]
 800ef22:	685b      	ldr	r3, [r3, #4]
 800ef24:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	681b      	ldr	r3, [r3, #0]
 800ef30:	430a      	orrs	r2, r1
 800ef32:	605a      	str	r2, [r3, #4]
  }
}
 800ef34:	bf00      	nop
 800ef36:	370c      	adds	r7, #12
 800ef38:	46bd      	mov	sp, r7
 800ef3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef3e:	4770      	bx	lr

0800ef40 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ef40:	b580      	push	{r7, lr}
 800ef42:	b098      	sub	sp, #96	; 0x60
 800ef44:	af02      	add	r7, sp, #8
 800ef46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	2200      	movs	r2, #0
 800ef4c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ef50:	f7f4 fddc 	bl	8003b0c <HAL_GetTick>
 800ef54:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	681b      	ldr	r3, [r3, #0]
 800ef5a:	681b      	ldr	r3, [r3, #0]
 800ef5c:	f003 0308 	and.w	r3, r3, #8
 800ef60:	2b08      	cmp	r3, #8
 800ef62:	d12f      	bne.n	800efc4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ef64:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ef68:	9300      	str	r3, [sp, #0]
 800ef6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ef6c:	2200      	movs	r2, #0
 800ef6e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ef72:	6878      	ldr	r0, [r7, #4]
 800ef74:	f000 f88e 	bl	800f094 <UART_WaitOnFlagUntilTimeout>
 800ef78:	4603      	mov	r3, r0
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	d022      	beq.n	800efc4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	681b      	ldr	r3, [r3, #0]
 800ef82:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef86:	e853 3f00 	ldrex	r3, [r3]
 800ef8a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ef8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ef8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ef92:	653b      	str	r3, [r7, #80]	; 0x50
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	681b      	ldr	r3, [r3, #0]
 800ef98:	461a      	mov	r2, r3
 800ef9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ef9c:	647b      	str	r3, [r7, #68]	; 0x44
 800ef9e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800efa0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800efa2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800efa4:	e841 2300 	strex	r3, r2, [r1]
 800efa8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800efaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800efac:	2b00      	cmp	r3, #0
 800efae:	d1e6      	bne.n	800ef7e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	2220      	movs	r2, #32
 800efb4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	2200      	movs	r2, #0
 800efbc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800efc0:	2303      	movs	r3, #3
 800efc2:	e063      	b.n	800f08c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	681b      	ldr	r3, [r3, #0]
 800efc8:	681b      	ldr	r3, [r3, #0]
 800efca:	f003 0304 	and.w	r3, r3, #4
 800efce:	2b04      	cmp	r3, #4
 800efd0:	d149      	bne.n	800f066 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800efd2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800efd6:	9300      	str	r3, [sp, #0]
 800efd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800efda:	2200      	movs	r2, #0
 800efdc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800efe0:	6878      	ldr	r0, [r7, #4]
 800efe2:	f000 f857 	bl	800f094 <UART_WaitOnFlagUntilTimeout>
 800efe6:	4603      	mov	r3, r0
 800efe8:	2b00      	cmp	r3, #0
 800efea:	d03c      	beq.n	800f066 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	681b      	ldr	r3, [r3, #0]
 800eff0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eff4:	e853 3f00 	ldrex	r3, [r3]
 800eff8:	623b      	str	r3, [r7, #32]
   return(result);
 800effa:	6a3b      	ldr	r3, [r7, #32]
 800effc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f000:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	681b      	ldr	r3, [r3, #0]
 800f006:	461a      	mov	r2, r3
 800f008:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f00a:	633b      	str	r3, [r7, #48]	; 0x30
 800f00c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f00e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f010:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f012:	e841 2300 	strex	r3, r2, [r1]
 800f016:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	d1e6      	bne.n	800efec <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	681b      	ldr	r3, [r3, #0]
 800f022:	3308      	adds	r3, #8
 800f024:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f026:	693b      	ldr	r3, [r7, #16]
 800f028:	e853 3f00 	ldrex	r3, [r3]
 800f02c:	60fb      	str	r3, [r7, #12]
   return(result);
 800f02e:	68fb      	ldr	r3, [r7, #12]
 800f030:	f023 0301 	bic.w	r3, r3, #1
 800f034:	64bb      	str	r3, [r7, #72]	; 0x48
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	681b      	ldr	r3, [r3, #0]
 800f03a:	3308      	adds	r3, #8
 800f03c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f03e:	61fa      	str	r2, [r7, #28]
 800f040:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f042:	69b9      	ldr	r1, [r7, #24]
 800f044:	69fa      	ldr	r2, [r7, #28]
 800f046:	e841 2300 	strex	r3, r2, [r1]
 800f04a:	617b      	str	r3, [r7, #20]
   return(result);
 800f04c:	697b      	ldr	r3, [r7, #20]
 800f04e:	2b00      	cmp	r3, #0
 800f050:	d1e5      	bne.n	800f01e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	2220      	movs	r2, #32
 800f056:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	2200      	movs	r2, #0
 800f05e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f062:	2303      	movs	r3, #3
 800f064:	e012      	b.n	800f08c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	2220      	movs	r2, #32
 800f06a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	2220      	movs	r2, #32
 800f072:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	2200      	movs	r2, #0
 800f07a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	2200      	movs	r2, #0
 800f080:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	2200      	movs	r2, #0
 800f086:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f08a:	2300      	movs	r3, #0
}
 800f08c:	4618      	mov	r0, r3
 800f08e:	3758      	adds	r7, #88	; 0x58
 800f090:	46bd      	mov	sp, r7
 800f092:	bd80      	pop	{r7, pc}

0800f094 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f094:	b580      	push	{r7, lr}
 800f096:	b084      	sub	sp, #16
 800f098:	af00      	add	r7, sp, #0
 800f09a:	60f8      	str	r0, [r7, #12]
 800f09c:	60b9      	str	r1, [r7, #8]
 800f09e:	603b      	str	r3, [r7, #0]
 800f0a0:	4613      	mov	r3, r2
 800f0a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f0a4:	e049      	b.n	800f13a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f0a6:	69bb      	ldr	r3, [r7, #24]
 800f0a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f0ac:	d045      	beq.n	800f13a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f0ae:	f7f4 fd2d 	bl	8003b0c <HAL_GetTick>
 800f0b2:	4602      	mov	r2, r0
 800f0b4:	683b      	ldr	r3, [r7, #0]
 800f0b6:	1ad3      	subs	r3, r2, r3
 800f0b8:	69ba      	ldr	r2, [r7, #24]
 800f0ba:	429a      	cmp	r2, r3
 800f0bc:	d302      	bcc.n	800f0c4 <UART_WaitOnFlagUntilTimeout+0x30>
 800f0be:	69bb      	ldr	r3, [r7, #24]
 800f0c0:	2b00      	cmp	r3, #0
 800f0c2:	d101      	bne.n	800f0c8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800f0c4:	2303      	movs	r3, #3
 800f0c6:	e048      	b.n	800f15a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800f0c8:	68fb      	ldr	r3, [r7, #12]
 800f0ca:	681b      	ldr	r3, [r3, #0]
 800f0cc:	681b      	ldr	r3, [r3, #0]
 800f0ce:	f003 0304 	and.w	r3, r3, #4
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	d031      	beq.n	800f13a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800f0d6:	68fb      	ldr	r3, [r7, #12]
 800f0d8:	681b      	ldr	r3, [r3, #0]
 800f0da:	69db      	ldr	r3, [r3, #28]
 800f0dc:	f003 0308 	and.w	r3, r3, #8
 800f0e0:	2b08      	cmp	r3, #8
 800f0e2:	d110      	bne.n	800f106 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f0e4:	68fb      	ldr	r3, [r7, #12]
 800f0e6:	681b      	ldr	r3, [r3, #0]
 800f0e8:	2208      	movs	r2, #8
 800f0ea:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800f0ec:	68f8      	ldr	r0, [r7, #12]
 800f0ee:	f000 f839 	bl	800f164 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800f0f2:	68fb      	ldr	r3, [r7, #12]
 800f0f4:	2208      	movs	r2, #8
 800f0f6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800f0fa:	68fb      	ldr	r3, [r7, #12]
 800f0fc:	2200      	movs	r2, #0
 800f0fe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800f102:	2301      	movs	r3, #1
 800f104:	e029      	b.n	800f15a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f106:	68fb      	ldr	r3, [r7, #12]
 800f108:	681b      	ldr	r3, [r3, #0]
 800f10a:	69db      	ldr	r3, [r3, #28]
 800f10c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f110:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f114:	d111      	bne.n	800f13a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f116:	68fb      	ldr	r3, [r7, #12]
 800f118:	681b      	ldr	r3, [r3, #0]
 800f11a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f11e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f120:	68f8      	ldr	r0, [r7, #12]
 800f122:	f000 f81f 	bl	800f164 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f126:	68fb      	ldr	r3, [r7, #12]
 800f128:	2220      	movs	r2, #32
 800f12a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f12e:	68fb      	ldr	r3, [r7, #12]
 800f130:	2200      	movs	r2, #0
 800f132:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800f136:	2303      	movs	r3, #3
 800f138:	e00f      	b.n	800f15a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f13a:	68fb      	ldr	r3, [r7, #12]
 800f13c:	681b      	ldr	r3, [r3, #0]
 800f13e:	69da      	ldr	r2, [r3, #28]
 800f140:	68bb      	ldr	r3, [r7, #8]
 800f142:	4013      	ands	r3, r2
 800f144:	68ba      	ldr	r2, [r7, #8]
 800f146:	429a      	cmp	r2, r3
 800f148:	bf0c      	ite	eq
 800f14a:	2301      	moveq	r3, #1
 800f14c:	2300      	movne	r3, #0
 800f14e:	b2db      	uxtb	r3, r3
 800f150:	461a      	mov	r2, r3
 800f152:	79fb      	ldrb	r3, [r7, #7]
 800f154:	429a      	cmp	r2, r3
 800f156:	d0a6      	beq.n	800f0a6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f158:	2300      	movs	r3, #0
}
 800f15a:	4618      	mov	r0, r3
 800f15c:	3710      	adds	r7, #16
 800f15e:	46bd      	mov	sp, r7
 800f160:	bd80      	pop	{r7, pc}
	...

0800f164 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f164:	b480      	push	{r7}
 800f166:	b095      	sub	sp, #84	; 0x54
 800f168:	af00      	add	r7, sp, #0
 800f16a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	681b      	ldr	r3, [r3, #0]
 800f170:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f172:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f174:	e853 3f00 	ldrex	r3, [r3]
 800f178:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f17a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f17c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f180:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	681b      	ldr	r3, [r3, #0]
 800f186:	461a      	mov	r2, r3
 800f188:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f18a:	643b      	str	r3, [r7, #64]	; 0x40
 800f18c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f18e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f190:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f192:	e841 2300 	strex	r3, r2, [r1]
 800f196:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f19a:	2b00      	cmp	r3, #0
 800f19c:	d1e6      	bne.n	800f16c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	681b      	ldr	r3, [r3, #0]
 800f1a2:	3308      	adds	r3, #8
 800f1a4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f1a6:	6a3b      	ldr	r3, [r7, #32]
 800f1a8:	e853 3f00 	ldrex	r3, [r3]
 800f1ac:	61fb      	str	r3, [r7, #28]
   return(result);
 800f1ae:	69fa      	ldr	r2, [r7, #28]
 800f1b0:	4b1e      	ldr	r3, [pc, #120]	; (800f22c <UART_EndRxTransfer+0xc8>)
 800f1b2:	4013      	ands	r3, r2
 800f1b4:	64bb      	str	r3, [r7, #72]	; 0x48
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	681b      	ldr	r3, [r3, #0]
 800f1ba:	3308      	adds	r3, #8
 800f1bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f1be:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f1c0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f1c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f1c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f1c6:	e841 2300 	strex	r3, r2, [r1]
 800f1ca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f1cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	d1e5      	bne.n	800f19e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f1d6:	2b01      	cmp	r3, #1
 800f1d8:	d118      	bne.n	800f20c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	681b      	ldr	r3, [r3, #0]
 800f1de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f1e0:	68fb      	ldr	r3, [r7, #12]
 800f1e2:	e853 3f00 	ldrex	r3, [r3]
 800f1e6:	60bb      	str	r3, [r7, #8]
   return(result);
 800f1e8:	68bb      	ldr	r3, [r7, #8]
 800f1ea:	f023 0310 	bic.w	r3, r3, #16
 800f1ee:	647b      	str	r3, [r7, #68]	; 0x44
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	681b      	ldr	r3, [r3, #0]
 800f1f4:	461a      	mov	r2, r3
 800f1f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f1f8:	61bb      	str	r3, [r7, #24]
 800f1fa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f1fc:	6979      	ldr	r1, [r7, #20]
 800f1fe:	69ba      	ldr	r2, [r7, #24]
 800f200:	e841 2300 	strex	r3, r2, [r1]
 800f204:	613b      	str	r3, [r7, #16]
   return(result);
 800f206:	693b      	ldr	r3, [r7, #16]
 800f208:	2b00      	cmp	r3, #0
 800f20a:	d1e6      	bne.n	800f1da <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	2220      	movs	r2, #32
 800f210:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	2200      	movs	r2, #0
 800f218:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	2200      	movs	r2, #0
 800f21e:	675a      	str	r2, [r3, #116]	; 0x74
}
 800f220:	bf00      	nop
 800f222:	3754      	adds	r7, #84	; 0x54
 800f224:	46bd      	mov	sp, r7
 800f226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f22a:	4770      	bx	lr
 800f22c:	effffffe 	.word	0xeffffffe

0800f230 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f230:	b580      	push	{r7, lr}
 800f232:	b084      	sub	sp, #16
 800f234:	af00      	add	r7, sp, #0
 800f236:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f23c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800f23e:	68fb      	ldr	r3, [r7, #12]
 800f240:	2200      	movs	r2, #0
 800f242:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800f246:	68fb      	ldr	r3, [r7, #12]
 800f248:	2200      	movs	r2, #0
 800f24a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f24e:	68f8      	ldr	r0, [r7, #12]
 800f250:	f7ff f856 	bl	800e300 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f254:	bf00      	nop
 800f256:	3710      	adds	r7, #16
 800f258:	46bd      	mov	sp, r7
 800f25a:	bd80      	pop	{r7, pc}

0800f25c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800f25c:	b580      	push	{r7, lr}
 800f25e:	b088      	sub	sp, #32
 800f260:	af00      	add	r7, sp, #0
 800f262:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	681b      	ldr	r3, [r3, #0]
 800f268:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f26a:	68fb      	ldr	r3, [r7, #12]
 800f26c:	e853 3f00 	ldrex	r3, [r3]
 800f270:	60bb      	str	r3, [r7, #8]
   return(result);
 800f272:	68bb      	ldr	r3, [r7, #8]
 800f274:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f278:	61fb      	str	r3, [r7, #28]
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	681b      	ldr	r3, [r3, #0]
 800f27e:	461a      	mov	r2, r3
 800f280:	69fb      	ldr	r3, [r7, #28]
 800f282:	61bb      	str	r3, [r7, #24]
 800f284:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f286:	6979      	ldr	r1, [r7, #20]
 800f288:	69ba      	ldr	r2, [r7, #24]
 800f28a:	e841 2300 	strex	r3, r2, [r1]
 800f28e:	613b      	str	r3, [r7, #16]
   return(result);
 800f290:	693b      	ldr	r3, [r7, #16]
 800f292:	2b00      	cmp	r3, #0
 800f294:	d1e6      	bne.n	800f264 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	2220      	movs	r2, #32
 800f29a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	2200      	movs	r2, #0
 800f2a2:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800f2a4:	6878      	ldr	r0, [r7, #4]
 800f2a6:	f7ff f821 	bl	800e2ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f2aa:	bf00      	nop
 800f2ac:	3720      	adds	r7, #32
 800f2ae:	46bd      	mov	sp, r7
 800f2b0:	bd80      	pop	{r7, pc}

0800f2b2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800f2b2:	b480      	push	{r7}
 800f2b4:	b083      	sub	sp, #12
 800f2b6:	af00      	add	r7, sp, #0
 800f2b8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800f2ba:	bf00      	nop
 800f2bc:	370c      	adds	r7, #12
 800f2be:	46bd      	mov	sp, r7
 800f2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2c4:	4770      	bx	lr

0800f2c6 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800f2c6:	b480      	push	{r7}
 800f2c8:	b083      	sub	sp, #12
 800f2ca:	af00      	add	r7, sp, #0
 800f2cc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800f2ce:	bf00      	nop
 800f2d0:	370c      	adds	r7, #12
 800f2d2:	46bd      	mov	sp, r7
 800f2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2d8:	4770      	bx	lr

0800f2da <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800f2da:	b480      	push	{r7}
 800f2dc:	b083      	sub	sp, #12
 800f2de:	af00      	add	r7, sp, #0
 800f2e0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800f2e2:	bf00      	nop
 800f2e4:	370c      	adds	r7, #12
 800f2e6:	46bd      	mov	sp, r7
 800f2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2ec:	4770      	bx	lr

0800f2ee <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800f2ee:	b480      	push	{r7}
 800f2f0:	b085      	sub	sp, #20
 800f2f2:	af00      	add	r7, sp, #0
 800f2f4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f2fc:	2b01      	cmp	r3, #1
 800f2fe:	d101      	bne.n	800f304 <HAL_UARTEx_DisableFifoMode+0x16>
 800f300:	2302      	movs	r3, #2
 800f302:	e027      	b.n	800f354 <HAL_UARTEx_DisableFifoMode+0x66>
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	2201      	movs	r2, #1
 800f308:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	2224      	movs	r2, #36	; 0x24
 800f310:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	681b      	ldr	r3, [r3, #0]
 800f318:	681b      	ldr	r3, [r3, #0]
 800f31a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	681b      	ldr	r3, [r3, #0]
 800f320:	681a      	ldr	r2, [r3, #0]
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	681b      	ldr	r3, [r3, #0]
 800f326:	f022 0201 	bic.w	r2, r2, #1
 800f32a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800f32c:	68fb      	ldr	r3, [r7, #12]
 800f32e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800f332:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	2200      	movs	r2, #0
 800f338:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	681b      	ldr	r3, [r3, #0]
 800f33e:	68fa      	ldr	r2, [r7, #12]
 800f340:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	2220      	movs	r2, #32
 800f346:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	2200      	movs	r2, #0
 800f34e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f352:	2300      	movs	r3, #0
}
 800f354:	4618      	mov	r0, r3
 800f356:	3714      	adds	r7, #20
 800f358:	46bd      	mov	sp, r7
 800f35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f35e:	4770      	bx	lr

0800f360 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f360:	b580      	push	{r7, lr}
 800f362:	b084      	sub	sp, #16
 800f364:	af00      	add	r7, sp, #0
 800f366:	6078      	str	r0, [r7, #4]
 800f368:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f370:	2b01      	cmp	r3, #1
 800f372:	d101      	bne.n	800f378 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800f374:	2302      	movs	r3, #2
 800f376:	e02d      	b.n	800f3d4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	2201      	movs	r2, #1
 800f37c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	2224      	movs	r2, #36	; 0x24
 800f384:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	681b      	ldr	r3, [r3, #0]
 800f38c:	681b      	ldr	r3, [r3, #0]
 800f38e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	681b      	ldr	r3, [r3, #0]
 800f394:	681a      	ldr	r2, [r3, #0]
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	681b      	ldr	r3, [r3, #0]
 800f39a:	f022 0201 	bic.w	r2, r2, #1
 800f39e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	681b      	ldr	r3, [r3, #0]
 800f3a4:	689b      	ldr	r3, [r3, #8]
 800f3a6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	681b      	ldr	r3, [r3, #0]
 800f3ae:	683a      	ldr	r2, [r7, #0]
 800f3b0:	430a      	orrs	r2, r1
 800f3b2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f3b4:	6878      	ldr	r0, [r7, #4]
 800f3b6:	f000 f84f 	bl	800f458 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	681b      	ldr	r3, [r3, #0]
 800f3be:	68fa      	ldr	r2, [r7, #12]
 800f3c0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	2220      	movs	r2, #32
 800f3c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	2200      	movs	r2, #0
 800f3ce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f3d2:	2300      	movs	r3, #0
}
 800f3d4:	4618      	mov	r0, r3
 800f3d6:	3710      	adds	r7, #16
 800f3d8:	46bd      	mov	sp, r7
 800f3da:	bd80      	pop	{r7, pc}

0800f3dc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f3dc:	b580      	push	{r7, lr}
 800f3de:	b084      	sub	sp, #16
 800f3e0:	af00      	add	r7, sp, #0
 800f3e2:	6078      	str	r0, [r7, #4]
 800f3e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f3ec:	2b01      	cmp	r3, #1
 800f3ee:	d101      	bne.n	800f3f4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800f3f0:	2302      	movs	r3, #2
 800f3f2:	e02d      	b.n	800f450 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	2201      	movs	r2, #1
 800f3f8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	2224      	movs	r2, #36	; 0x24
 800f400:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	681b      	ldr	r3, [r3, #0]
 800f408:	681b      	ldr	r3, [r3, #0]
 800f40a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	681b      	ldr	r3, [r3, #0]
 800f410:	681a      	ldr	r2, [r3, #0]
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	681b      	ldr	r3, [r3, #0]
 800f416:	f022 0201 	bic.w	r2, r2, #1
 800f41a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	681b      	ldr	r3, [r3, #0]
 800f420:	689b      	ldr	r3, [r3, #8]
 800f422:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	681b      	ldr	r3, [r3, #0]
 800f42a:	683a      	ldr	r2, [r7, #0]
 800f42c:	430a      	orrs	r2, r1
 800f42e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f430:	6878      	ldr	r0, [r7, #4]
 800f432:	f000 f811 	bl	800f458 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	681b      	ldr	r3, [r3, #0]
 800f43a:	68fa      	ldr	r2, [r7, #12]
 800f43c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	2220      	movs	r2, #32
 800f442:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	2200      	movs	r2, #0
 800f44a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f44e:	2300      	movs	r3, #0
}
 800f450:	4618      	mov	r0, r3
 800f452:	3710      	adds	r7, #16
 800f454:	46bd      	mov	sp, r7
 800f456:	bd80      	pop	{r7, pc}

0800f458 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800f458:	b480      	push	{r7}
 800f45a:	b085      	sub	sp, #20
 800f45c:	af00      	add	r7, sp, #0
 800f45e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f464:	2b00      	cmp	r3, #0
 800f466:	d108      	bne.n	800f47a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	2201      	movs	r2, #1
 800f46c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	2201      	movs	r2, #1
 800f474:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800f478:	e031      	b.n	800f4de <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800f47a:	2310      	movs	r3, #16
 800f47c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800f47e:	2310      	movs	r3, #16
 800f480:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	681b      	ldr	r3, [r3, #0]
 800f486:	689b      	ldr	r3, [r3, #8]
 800f488:	0e5b      	lsrs	r3, r3, #25
 800f48a:	b2db      	uxtb	r3, r3
 800f48c:	f003 0307 	and.w	r3, r3, #7
 800f490:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	681b      	ldr	r3, [r3, #0]
 800f496:	689b      	ldr	r3, [r3, #8]
 800f498:	0f5b      	lsrs	r3, r3, #29
 800f49a:	b2db      	uxtb	r3, r3
 800f49c:	f003 0307 	and.w	r3, r3, #7
 800f4a0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f4a2:	7bbb      	ldrb	r3, [r7, #14]
 800f4a4:	7b3a      	ldrb	r2, [r7, #12]
 800f4a6:	4911      	ldr	r1, [pc, #68]	; (800f4ec <UARTEx_SetNbDataToProcess+0x94>)
 800f4a8:	5c8a      	ldrb	r2, [r1, r2]
 800f4aa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800f4ae:	7b3a      	ldrb	r2, [r7, #12]
 800f4b0:	490f      	ldr	r1, [pc, #60]	; (800f4f0 <UARTEx_SetNbDataToProcess+0x98>)
 800f4b2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f4b4:	fb93 f3f2 	sdiv	r3, r3, r2
 800f4b8:	b29a      	uxth	r2, r3
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f4c0:	7bfb      	ldrb	r3, [r7, #15]
 800f4c2:	7b7a      	ldrb	r2, [r7, #13]
 800f4c4:	4909      	ldr	r1, [pc, #36]	; (800f4ec <UARTEx_SetNbDataToProcess+0x94>)
 800f4c6:	5c8a      	ldrb	r2, [r1, r2]
 800f4c8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800f4cc:	7b7a      	ldrb	r2, [r7, #13]
 800f4ce:	4908      	ldr	r1, [pc, #32]	; (800f4f0 <UARTEx_SetNbDataToProcess+0x98>)
 800f4d0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f4d2:	fb93 f3f2 	sdiv	r3, r3, r2
 800f4d6:	b29a      	uxth	r2, r3
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800f4de:	bf00      	nop
 800f4e0:	3714      	adds	r7, #20
 800f4e2:	46bd      	mov	sp, r7
 800f4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4e8:	4770      	bx	lr
 800f4ea:	bf00      	nop
 800f4ec:	08017c6c 	.word	0x08017c6c
 800f4f0:	08017c74 	.word	0x08017c74

0800f4f4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800f4f4:	b084      	sub	sp, #16
 800f4f6:	b580      	push	{r7, lr}
 800f4f8:	b084      	sub	sp, #16
 800f4fa:	af00      	add	r7, sp, #0
 800f4fc:	6078      	str	r0, [r7, #4]
 800f4fe:	f107 001c 	add.w	r0, r7, #28
 800f502:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800f506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f508:	2b01      	cmp	r3, #1
 800f50a:	d120      	bne.n	800f54e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f510:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	68da      	ldr	r2, [r3, #12]
 800f51c:	4b2a      	ldr	r3, [pc, #168]	; (800f5c8 <USB_CoreInit+0xd4>)
 800f51e:	4013      	ands	r3, r2
 800f520:	687a      	ldr	r2, [r7, #4]
 800f522:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	68db      	ldr	r3, [r3, #12]
 800f528:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800f530:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f532:	2b01      	cmp	r3, #1
 800f534:	d105      	bne.n	800f542 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	68db      	ldr	r3, [r3, #12]
 800f53a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800f542:	6878      	ldr	r0, [r7, #4]
 800f544:	f000 faac 	bl	800faa0 <USB_CoreReset>
 800f548:	4603      	mov	r3, r0
 800f54a:	73fb      	strb	r3, [r7, #15]
 800f54c:	e01a      	b.n	800f584 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	68db      	ldr	r3, [r3, #12]
 800f552:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800f55a:	6878      	ldr	r0, [r7, #4]
 800f55c:	f000 faa0 	bl	800faa0 <USB_CoreReset>
 800f560:	4603      	mov	r3, r0
 800f562:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800f564:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f566:	2b00      	cmp	r3, #0
 800f568:	d106      	bne.n	800f578 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f56e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	639a      	str	r2, [r3, #56]	; 0x38
 800f576:	e005      	b.n	800f584 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f57c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800f584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f586:	2b01      	cmp	r3, #1
 800f588:	d116      	bne.n	800f5b8 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f58e:	b29a      	uxth	r2, r3
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f598:	4b0c      	ldr	r3, [pc, #48]	; (800f5cc <USB_CoreInit+0xd8>)
 800f59a:	4313      	orrs	r3, r2
 800f59c:	687a      	ldr	r2, [r7, #4]
 800f59e:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	689b      	ldr	r3, [r3, #8]
 800f5a4:	f043 0206 	orr.w	r2, r3, #6
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	689b      	ldr	r3, [r3, #8]
 800f5b0:	f043 0220 	orr.w	r2, r3, #32
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800f5b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800f5ba:	4618      	mov	r0, r3
 800f5bc:	3710      	adds	r7, #16
 800f5be:	46bd      	mov	sp, r7
 800f5c0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f5c4:	b004      	add	sp, #16
 800f5c6:	4770      	bx	lr
 800f5c8:	ffbdffbf 	.word	0xffbdffbf
 800f5cc:	03ee0000 	.word	0x03ee0000

0800f5d0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800f5d0:	b480      	push	{r7}
 800f5d2:	b083      	sub	sp, #12
 800f5d4:	af00      	add	r7, sp, #0
 800f5d6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	689b      	ldr	r3, [r3, #8]
 800f5dc:	f023 0201 	bic.w	r2, r3, #1
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800f5e4:	2300      	movs	r3, #0
}
 800f5e6:	4618      	mov	r0, r3
 800f5e8:	370c      	adds	r7, #12
 800f5ea:	46bd      	mov	sp, r7
 800f5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5f0:	4770      	bx	lr

0800f5f2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800f5f2:	b580      	push	{r7, lr}
 800f5f4:	b084      	sub	sp, #16
 800f5f6:	af00      	add	r7, sp, #0
 800f5f8:	6078      	str	r0, [r7, #4]
 800f5fa:	460b      	mov	r3, r1
 800f5fc:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800f5fe:	2300      	movs	r3, #0
 800f600:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	68db      	ldr	r3, [r3, #12]
 800f606:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800f60e:	78fb      	ldrb	r3, [r7, #3]
 800f610:	2b01      	cmp	r3, #1
 800f612:	d115      	bne.n	800f640 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	68db      	ldr	r3, [r3, #12]
 800f618:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800f620:	2001      	movs	r0, #1
 800f622:	f7f4 fa7f 	bl	8003b24 <HAL_Delay>
      ms++;
 800f626:	68fb      	ldr	r3, [r7, #12]
 800f628:	3301      	adds	r3, #1
 800f62a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800f62c:	6878      	ldr	r0, [r7, #4]
 800f62e:	f000 fa29 	bl	800fa84 <USB_GetMode>
 800f632:	4603      	mov	r3, r0
 800f634:	2b01      	cmp	r3, #1
 800f636:	d01e      	beq.n	800f676 <USB_SetCurrentMode+0x84>
 800f638:	68fb      	ldr	r3, [r7, #12]
 800f63a:	2b31      	cmp	r3, #49	; 0x31
 800f63c:	d9f0      	bls.n	800f620 <USB_SetCurrentMode+0x2e>
 800f63e:	e01a      	b.n	800f676 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800f640:	78fb      	ldrb	r3, [r7, #3]
 800f642:	2b00      	cmp	r3, #0
 800f644:	d115      	bne.n	800f672 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	68db      	ldr	r3, [r3, #12]
 800f64a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800f652:	2001      	movs	r0, #1
 800f654:	f7f4 fa66 	bl	8003b24 <HAL_Delay>
      ms++;
 800f658:	68fb      	ldr	r3, [r7, #12]
 800f65a:	3301      	adds	r3, #1
 800f65c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800f65e:	6878      	ldr	r0, [r7, #4]
 800f660:	f000 fa10 	bl	800fa84 <USB_GetMode>
 800f664:	4603      	mov	r3, r0
 800f666:	2b00      	cmp	r3, #0
 800f668:	d005      	beq.n	800f676 <USB_SetCurrentMode+0x84>
 800f66a:	68fb      	ldr	r3, [r7, #12]
 800f66c:	2b31      	cmp	r3, #49	; 0x31
 800f66e:	d9f0      	bls.n	800f652 <USB_SetCurrentMode+0x60>
 800f670:	e001      	b.n	800f676 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800f672:	2301      	movs	r3, #1
 800f674:	e005      	b.n	800f682 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800f676:	68fb      	ldr	r3, [r7, #12]
 800f678:	2b32      	cmp	r3, #50	; 0x32
 800f67a:	d101      	bne.n	800f680 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800f67c:	2301      	movs	r3, #1
 800f67e:	e000      	b.n	800f682 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800f680:	2300      	movs	r3, #0
}
 800f682:	4618      	mov	r0, r3
 800f684:	3710      	adds	r7, #16
 800f686:	46bd      	mov	sp, r7
 800f688:	bd80      	pop	{r7, pc}
	...

0800f68c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800f68c:	b084      	sub	sp, #16
 800f68e:	b580      	push	{r7, lr}
 800f690:	b086      	sub	sp, #24
 800f692:	af00      	add	r7, sp, #0
 800f694:	6078      	str	r0, [r7, #4]
 800f696:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800f69a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800f69e:	2300      	movs	r3, #0
 800f6a0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800f6a6:	2300      	movs	r3, #0
 800f6a8:	613b      	str	r3, [r7, #16]
 800f6aa:	e009      	b.n	800f6c0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800f6ac:	687a      	ldr	r2, [r7, #4]
 800f6ae:	693b      	ldr	r3, [r7, #16]
 800f6b0:	3340      	adds	r3, #64	; 0x40
 800f6b2:	009b      	lsls	r3, r3, #2
 800f6b4:	4413      	add	r3, r2
 800f6b6:	2200      	movs	r2, #0
 800f6b8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800f6ba:	693b      	ldr	r3, [r7, #16]
 800f6bc:	3301      	adds	r3, #1
 800f6be:	613b      	str	r3, [r7, #16]
 800f6c0:	693b      	ldr	r3, [r7, #16]
 800f6c2:	2b0e      	cmp	r3, #14
 800f6c4:	d9f2      	bls.n	800f6ac <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800f6c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f6c8:	2b00      	cmp	r3, #0
 800f6ca:	d11c      	bne.n	800f706 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800f6cc:	68fb      	ldr	r3, [r7, #12]
 800f6ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f6d2:	685b      	ldr	r3, [r3, #4]
 800f6d4:	68fa      	ldr	r2, [r7, #12]
 800f6d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f6da:	f043 0302 	orr.w	r3, r3, #2
 800f6de:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f6e4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	681b      	ldr	r3, [r3, #0]
 800f6f0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	681b      	ldr	r3, [r3, #0]
 800f6fc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	601a      	str	r2, [r3, #0]
 800f704:	e005      	b.n	800f712 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f70a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800f712:	68fb      	ldr	r3, [r7, #12]
 800f714:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f718:	461a      	mov	r2, r3
 800f71a:	2300      	movs	r3, #0
 800f71c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800f71e:	68fb      	ldr	r3, [r7, #12]
 800f720:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f724:	4619      	mov	r1, r3
 800f726:	68fb      	ldr	r3, [r7, #12]
 800f728:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f72c:	461a      	mov	r2, r3
 800f72e:	680b      	ldr	r3, [r1, #0]
 800f730:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800f732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f734:	2b01      	cmp	r3, #1
 800f736:	d10c      	bne.n	800f752 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800f738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f73a:	2b00      	cmp	r3, #0
 800f73c:	d104      	bne.n	800f748 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800f73e:	2100      	movs	r1, #0
 800f740:	6878      	ldr	r0, [r7, #4]
 800f742:	f000 f965 	bl	800fa10 <USB_SetDevSpeed>
 800f746:	e008      	b.n	800f75a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800f748:	2101      	movs	r1, #1
 800f74a:	6878      	ldr	r0, [r7, #4]
 800f74c:	f000 f960 	bl	800fa10 <USB_SetDevSpeed>
 800f750:	e003      	b.n	800f75a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800f752:	2103      	movs	r1, #3
 800f754:	6878      	ldr	r0, [r7, #4]
 800f756:	f000 f95b 	bl	800fa10 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800f75a:	2110      	movs	r1, #16
 800f75c:	6878      	ldr	r0, [r7, #4]
 800f75e:	f000 f8f3 	bl	800f948 <USB_FlushTxFifo>
 800f762:	4603      	mov	r3, r0
 800f764:	2b00      	cmp	r3, #0
 800f766:	d001      	beq.n	800f76c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800f768:	2301      	movs	r3, #1
 800f76a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800f76c:	6878      	ldr	r0, [r7, #4]
 800f76e:	f000 f91f 	bl	800f9b0 <USB_FlushRxFifo>
 800f772:	4603      	mov	r3, r0
 800f774:	2b00      	cmp	r3, #0
 800f776:	d001      	beq.n	800f77c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800f778:	2301      	movs	r3, #1
 800f77a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800f77c:	68fb      	ldr	r3, [r7, #12]
 800f77e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f782:	461a      	mov	r2, r3
 800f784:	2300      	movs	r3, #0
 800f786:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800f788:	68fb      	ldr	r3, [r7, #12]
 800f78a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f78e:	461a      	mov	r2, r3
 800f790:	2300      	movs	r3, #0
 800f792:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800f794:	68fb      	ldr	r3, [r7, #12]
 800f796:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f79a:	461a      	mov	r2, r3
 800f79c:	2300      	movs	r3, #0
 800f79e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f7a0:	2300      	movs	r3, #0
 800f7a2:	613b      	str	r3, [r7, #16]
 800f7a4:	e043      	b.n	800f82e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800f7a6:	693b      	ldr	r3, [r7, #16]
 800f7a8:	015a      	lsls	r2, r3, #5
 800f7aa:	68fb      	ldr	r3, [r7, #12]
 800f7ac:	4413      	add	r3, r2
 800f7ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f7b2:	681b      	ldr	r3, [r3, #0]
 800f7b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f7b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f7bc:	d118      	bne.n	800f7f0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800f7be:	693b      	ldr	r3, [r7, #16]
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	d10a      	bne.n	800f7da <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800f7c4:	693b      	ldr	r3, [r7, #16]
 800f7c6:	015a      	lsls	r2, r3, #5
 800f7c8:	68fb      	ldr	r3, [r7, #12]
 800f7ca:	4413      	add	r3, r2
 800f7cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f7d0:	461a      	mov	r2, r3
 800f7d2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800f7d6:	6013      	str	r3, [r2, #0]
 800f7d8:	e013      	b.n	800f802 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800f7da:	693b      	ldr	r3, [r7, #16]
 800f7dc:	015a      	lsls	r2, r3, #5
 800f7de:	68fb      	ldr	r3, [r7, #12]
 800f7e0:	4413      	add	r3, r2
 800f7e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f7e6:	461a      	mov	r2, r3
 800f7e8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800f7ec:	6013      	str	r3, [r2, #0]
 800f7ee:	e008      	b.n	800f802 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800f7f0:	693b      	ldr	r3, [r7, #16]
 800f7f2:	015a      	lsls	r2, r3, #5
 800f7f4:	68fb      	ldr	r3, [r7, #12]
 800f7f6:	4413      	add	r3, r2
 800f7f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f7fc:	461a      	mov	r2, r3
 800f7fe:	2300      	movs	r3, #0
 800f800:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800f802:	693b      	ldr	r3, [r7, #16]
 800f804:	015a      	lsls	r2, r3, #5
 800f806:	68fb      	ldr	r3, [r7, #12]
 800f808:	4413      	add	r3, r2
 800f80a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f80e:	461a      	mov	r2, r3
 800f810:	2300      	movs	r3, #0
 800f812:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800f814:	693b      	ldr	r3, [r7, #16]
 800f816:	015a      	lsls	r2, r3, #5
 800f818:	68fb      	ldr	r3, [r7, #12]
 800f81a:	4413      	add	r3, r2
 800f81c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f820:	461a      	mov	r2, r3
 800f822:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800f826:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f828:	693b      	ldr	r3, [r7, #16]
 800f82a:	3301      	adds	r3, #1
 800f82c:	613b      	str	r3, [r7, #16]
 800f82e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f830:	693a      	ldr	r2, [r7, #16]
 800f832:	429a      	cmp	r2, r3
 800f834:	d3b7      	bcc.n	800f7a6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f836:	2300      	movs	r3, #0
 800f838:	613b      	str	r3, [r7, #16]
 800f83a:	e043      	b.n	800f8c4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f83c:	693b      	ldr	r3, [r7, #16]
 800f83e:	015a      	lsls	r2, r3, #5
 800f840:	68fb      	ldr	r3, [r7, #12]
 800f842:	4413      	add	r3, r2
 800f844:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f848:	681b      	ldr	r3, [r3, #0]
 800f84a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f84e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f852:	d118      	bne.n	800f886 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800f854:	693b      	ldr	r3, [r7, #16]
 800f856:	2b00      	cmp	r3, #0
 800f858:	d10a      	bne.n	800f870 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800f85a:	693b      	ldr	r3, [r7, #16]
 800f85c:	015a      	lsls	r2, r3, #5
 800f85e:	68fb      	ldr	r3, [r7, #12]
 800f860:	4413      	add	r3, r2
 800f862:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f866:	461a      	mov	r2, r3
 800f868:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800f86c:	6013      	str	r3, [r2, #0]
 800f86e:	e013      	b.n	800f898 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800f870:	693b      	ldr	r3, [r7, #16]
 800f872:	015a      	lsls	r2, r3, #5
 800f874:	68fb      	ldr	r3, [r7, #12]
 800f876:	4413      	add	r3, r2
 800f878:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f87c:	461a      	mov	r2, r3
 800f87e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800f882:	6013      	str	r3, [r2, #0]
 800f884:	e008      	b.n	800f898 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800f886:	693b      	ldr	r3, [r7, #16]
 800f888:	015a      	lsls	r2, r3, #5
 800f88a:	68fb      	ldr	r3, [r7, #12]
 800f88c:	4413      	add	r3, r2
 800f88e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f892:	461a      	mov	r2, r3
 800f894:	2300      	movs	r3, #0
 800f896:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800f898:	693b      	ldr	r3, [r7, #16]
 800f89a:	015a      	lsls	r2, r3, #5
 800f89c:	68fb      	ldr	r3, [r7, #12]
 800f89e:	4413      	add	r3, r2
 800f8a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f8a4:	461a      	mov	r2, r3
 800f8a6:	2300      	movs	r3, #0
 800f8a8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800f8aa:	693b      	ldr	r3, [r7, #16]
 800f8ac:	015a      	lsls	r2, r3, #5
 800f8ae:	68fb      	ldr	r3, [r7, #12]
 800f8b0:	4413      	add	r3, r2
 800f8b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f8b6:	461a      	mov	r2, r3
 800f8b8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800f8bc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f8be:	693b      	ldr	r3, [r7, #16]
 800f8c0:	3301      	adds	r3, #1
 800f8c2:	613b      	str	r3, [r7, #16]
 800f8c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8c6:	693a      	ldr	r2, [r7, #16]
 800f8c8:	429a      	cmp	r2, r3
 800f8ca:	d3b7      	bcc.n	800f83c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800f8cc:	68fb      	ldr	r3, [r7, #12]
 800f8ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f8d2:	691b      	ldr	r3, [r3, #16]
 800f8d4:	68fa      	ldr	r2, [r7, #12]
 800f8d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f8da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f8de:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	2200      	movs	r2, #0
 800f8e4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800f8ec:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800f8ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8f0:	2b00      	cmp	r3, #0
 800f8f2:	d105      	bne.n	800f900 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	699b      	ldr	r3, [r3, #24]
 800f8f8:	f043 0210 	orr.w	r2, r3, #16
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	699a      	ldr	r2, [r3, #24]
 800f904:	4b0e      	ldr	r3, [pc, #56]	; (800f940 <USB_DevInit+0x2b4>)
 800f906:	4313      	orrs	r3, r2
 800f908:	687a      	ldr	r2, [r7, #4]
 800f90a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800f90c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f90e:	2b00      	cmp	r3, #0
 800f910:	d005      	beq.n	800f91e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	699b      	ldr	r3, [r3, #24]
 800f916:	f043 0208 	orr.w	r2, r3, #8
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800f91e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f920:	2b01      	cmp	r3, #1
 800f922:	d105      	bne.n	800f930 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	699a      	ldr	r2, [r3, #24]
 800f928:	4b06      	ldr	r3, [pc, #24]	; (800f944 <USB_DevInit+0x2b8>)
 800f92a:	4313      	orrs	r3, r2
 800f92c:	687a      	ldr	r2, [r7, #4]
 800f92e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800f930:	7dfb      	ldrb	r3, [r7, #23]
}
 800f932:	4618      	mov	r0, r3
 800f934:	3718      	adds	r7, #24
 800f936:	46bd      	mov	sp, r7
 800f938:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f93c:	b004      	add	sp, #16
 800f93e:	4770      	bx	lr
 800f940:	803c3800 	.word	0x803c3800
 800f944:	40000004 	.word	0x40000004

0800f948 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800f948:	b480      	push	{r7}
 800f94a:	b085      	sub	sp, #20
 800f94c:	af00      	add	r7, sp, #0
 800f94e:	6078      	str	r0, [r7, #4]
 800f950:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800f952:	2300      	movs	r3, #0
 800f954:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800f956:	68fb      	ldr	r3, [r7, #12]
 800f958:	3301      	adds	r3, #1
 800f95a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800f95c:	68fb      	ldr	r3, [r7, #12]
 800f95e:	4a13      	ldr	r2, [pc, #76]	; (800f9ac <USB_FlushTxFifo+0x64>)
 800f960:	4293      	cmp	r3, r2
 800f962:	d901      	bls.n	800f968 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800f964:	2303      	movs	r3, #3
 800f966:	e01b      	b.n	800f9a0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	691b      	ldr	r3, [r3, #16]
 800f96c:	2b00      	cmp	r3, #0
 800f96e:	daf2      	bge.n	800f956 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800f970:	2300      	movs	r3, #0
 800f972:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800f974:	683b      	ldr	r3, [r7, #0]
 800f976:	019b      	lsls	r3, r3, #6
 800f978:	f043 0220 	orr.w	r2, r3, #32
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800f980:	68fb      	ldr	r3, [r7, #12]
 800f982:	3301      	adds	r3, #1
 800f984:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800f986:	68fb      	ldr	r3, [r7, #12]
 800f988:	4a08      	ldr	r2, [pc, #32]	; (800f9ac <USB_FlushTxFifo+0x64>)
 800f98a:	4293      	cmp	r3, r2
 800f98c:	d901      	bls.n	800f992 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800f98e:	2303      	movs	r3, #3
 800f990:	e006      	b.n	800f9a0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	691b      	ldr	r3, [r3, #16]
 800f996:	f003 0320 	and.w	r3, r3, #32
 800f99a:	2b20      	cmp	r3, #32
 800f99c:	d0f0      	beq.n	800f980 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800f99e:	2300      	movs	r3, #0
}
 800f9a0:	4618      	mov	r0, r3
 800f9a2:	3714      	adds	r7, #20
 800f9a4:	46bd      	mov	sp, r7
 800f9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9aa:	4770      	bx	lr
 800f9ac:	00030d40 	.word	0x00030d40

0800f9b0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800f9b0:	b480      	push	{r7}
 800f9b2:	b085      	sub	sp, #20
 800f9b4:	af00      	add	r7, sp, #0
 800f9b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800f9b8:	2300      	movs	r3, #0
 800f9ba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800f9bc:	68fb      	ldr	r3, [r7, #12]
 800f9be:	3301      	adds	r3, #1
 800f9c0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800f9c2:	68fb      	ldr	r3, [r7, #12]
 800f9c4:	4a11      	ldr	r2, [pc, #68]	; (800fa0c <USB_FlushRxFifo+0x5c>)
 800f9c6:	4293      	cmp	r3, r2
 800f9c8:	d901      	bls.n	800f9ce <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800f9ca:	2303      	movs	r3, #3
 800f9cc:	e018      	b.n	800fa00 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	691b      	ldr	r3, [r3, #16]
 800f9d2:	2b00      	cmp	r3, #0
 800f9d4:	daf2      	bge.n	800f9bc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800f9d6:	2300      	movs	r3, #0
 800f9d8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	2210      	movs	r2, #16
 800f9de:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800f9e0:	68fb      	ldr	r3, [r7, #12]
 800f9e2:	3301      	adds	r3, #1
 800f9e4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800f9e6:	68fb      	ldr	r3, [r7, #12]
 800f9e8:	4a08      	ldr	r2, [pc, #32]	; (800fa0c <USB_FlushRxFifo+0x5c>)
 800f9ea:	4293      	cmp	r3, r2
 800f9ec:	d901      	bls.n	800f9f2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800f9ee:	2303      	movs	r3, #3
 800f9f0:	e006      	b.n	800fa00 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	691b      	ldr	r3, [r3, #16]
 800f9f6:	f003 0310 	and.w	r3, r3, #16
 800f9fa:	2b10      	cmp	r3, #16
 800f9fc:	d0f0      	beq.n	800f9e0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800f9fe:	2300      	movs	r3, #0
}
 800fa00:	4618      	mov	r0, r3
 800fa02:	3714      	adds	r7, #20
 800fa04:	46bd      	mov	sp, r7
 800fa06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa0a:	4770      	bx	lr
 800fa0c:	00030d40 	.word	0x00030d40

0800fa10 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800fa10:	b480      	push	{r7}
 800fa12:	b085      	sub	sp, #20
 800fa14:	af00      	add	r7, sp, #0
 800fa16:	6078      	str	r0, [r7, #4]
 800fa18:	460b      	mov	r3, r1
 800fa1a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800fa20:	68fb      	ldr	r3, [r7, #12]
 800fa22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fa26:	681a      	ldr	r2, [r3, #0]
 800fa28:	78fb      	ldrb	r3, [r7, #3]
 800fa2a:	68f9      	ldr	r1, [r7, #12]
 800fa2c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fa30:	4313      	orrs	r3, r2
 800fa32:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800fa34:	2300      	movs	r3, #0
}
 800fa36:	4618      	mov	r0, r3
 800fa38:	3714      	adds	r7, #20
 800fa3a:	46bd      	mov	sp, r7
 800fa3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa40:	4770      	bx	lr

0800fa42 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800fa42:	b480      	push	{r7}
 800fa44:	b085      	sub	sp, #20
 800fa46:	af00      	add	r7, sp, #0
 800fa48:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800fa4e:	68fb      	ldr	r3, [r7, #12]
 800fa50:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800fa54:	681b      	ldr	r3, [r3, #0]
 800fa56:	68fa      	ldr	r2, [r7, #12]
 800fa58:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800fa5c:	f023 0303 	bic.w	r3, r3, #3
 800fa60:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800fa62:	68fb      	ldr	r3, [r7, #12]
 800fa64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fa68:	685b      	ldr	r3, [r3, #4]
 800fa6a:	68fa      	ldr	r2, [r7, #12]
 800fa6c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fa70:	f043 0302 	orr.w	r3, r3, #2
 800fa74:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800fa76:	2300      	movs	r3, #0
}
 800fa78:	4618      	mov	r0, r3
 800fa7a:	3714      	adds	r7, #20
 800fa7c:	46bd      	mov	sp, r7
 800fa7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa82:	4770      	bx	lr

0800fa84 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800fa84:	b480      	push	{r7}
 800fa86:	b083      	sub	sp, #12
 800fa88:	af00      	add	r7, sp, #0
 800fa8a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	695b      	ldr	r3, [r3, #20]
 800fa90:	f003 0301 	and.w	r3, r3, #1
}
 800fa94:	4618      	mov	r0, r3
 800fa96:	370c      	adds	r7, #12
 800fa98:	46bd      	mov	sp, r7
 800fa9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa9e:	4770      	bx	lr

0800faa0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800faa0:	b480      	push	{r7}
 800faa2:	b085      	sub	sp, #20
 800faa4:	af00      	add	r7, sp, #0
 800faa6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800faa8:	2300      	movs	r3, #0
 800faaa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800faac:	68fb      	ldr	r3, [r7, #12]
 800faae:	3301      	adds	r3, #1
 800fab0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800fab2:	68fb      	ldr	r3, [r7, #12]
 800fab4:	4a13      	ldr	r2, [pc, #76]	; (800fb04 <USB_CoreReset+0x64>)
 800fab6:	4293      	cmp	r3, r2
 800fab8:	d901      	bls.n	800fabe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800faba:	2303      	movs	r3, #3
 800fabc:	e01b      	b.n	800faf6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	691b      	ldr	r3, [r3, #16]
 800fac2:	2b00      	cmp	r3, #0
 800fac4:	daf2      	bge.n	800faac <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800fac6:	2300      	movs	r3, #0
 800fac8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	691b      	ldr	r3, [r3, #16]
 800face:	f043 0201 	orr.w	r2, r3, #1
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800fad6:	68fb      	ldr	r3, [r7, #12]
 800fad8:	3301      	adds	r3, #1
 800fada:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800fadc:	68fb      	ldr	r3, [r7, #12]
 800fade:	4a09      	ldr	r2, [pc, #36]	; (800fb04 <USB_CoreReset+0x64>)
 800fae0:	4293      	cmp	r3, r2
 800fae2:	d901      	bls.n	800fae8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800fae4:	2303      	movs	r3, #3
 800fae6:	e006      	b.n	800faf6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	691b      	ldr	r3, [r3, #16]
 800faec:	f003 0301 	and.w	r3, r3, #1
 800faf0:	2b01      	cmp	r3, #1
 800faf2:	d0f0      	beq.n	800fad6 <USB_CoreReset+0x36>

  return HAL_OK;
 800faf4:	2300      	movs	r3, #0
}
 800faf6:	4618      	mov	r0, r3
 800faf8:	3714      	adds	r7, #20
 800fafa:	46bd      	mov	sp, r7
 800fafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb00:	4770      	bx	lr
 800fb02:	bf00      	nop
 800fb04:	00030d40 	.word	0x00030d40

0800fb08 <__NVIC_SetPriority>:
{
 800fb08:	b480      	push	{r7}
 800fb0a:	b083      	sub	sp, #12
 800fb0c:	af00      	add	r7, sp, #0
 800fb0e:	4603      	mov	r3, r0
 800fb10:	6039      	str	r1, [r7, #0]
 800fb12:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800fb14:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800fb18:	2b00      	cmp	r3, #0
 800fb1a:	db0a      	blt.n	800fb32 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800fb1c:	683b      	ldr	r3, [r7, #0]
 800fb1e:	b2da      	uxtb	r2, r3
 800fb20:	490c      	ldr	r1, [pc, #48]	; (800fb54 <__NVIC_SetPriority+0x4c>)
 800fb22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800fb26:	0112      	lsls	r2, r2, #4
 800fb28:	b2d2      	uxtb	r2, r2
 800fb2a:	440b      	add	r3, r1
 800fb2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800fb30:	e00a      	b.n	800fb48 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800fb32:	683b      	ldr	r3, [r7, #0]
 800fb34:	b2da      	uxtb	r2, r3
 800fb36:	4908      	ldr	r1, [pc, #32]	; (800fb58 <__NVIC_SetPriority+0x50>)
 800fb38:	88fb      	ldrh	r3, [r7, #6]
 800fb3a:	f003 030f 	and.w	r3, r3, #15
 800fb3e:	3b04      	subs	r3, #4
 800fb40:	0112      	lsls	r2, r2, #4
 800fb42:	b2d2      	uxtb	r2, r2
 800fb44:	440b      	add	r3, r1
 800fb46:	761a      	strb	r2, [r3, #24]
}
 800fb48:	bf00      	nop
 800fb4a:	370c      	adds	r7, #12
 800fb4c:	46bd      	mov	sp, r7
 800fb4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb52:	4770      	bx	lr
 800fb54:	e000e100 	.word	0xe000e100
 800fb58:	e000ed00 	.word	0xe000ed00

0800fb5c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800fb5c:	b580      	push	{r7, lr}
 800fb5e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800fb60:	4b05      	ldr	r3, [pc, #20]	; (800fb78 <SysTick_Handler+0x1c>)
 800fb62:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800fb64:	f002 fed6 	bl	8012914 <xTaskGetSchedulerState>
 800fb68:	4603      	mov	r3, r0
 800fb6a:	2b01      	cmp	r3, #1
 800fb6c:	d001      	beq.n	800fb72 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800fb6e:	f000 ffeb 	bl	8010b48 <xPortSysTickHandler>
  }
}
 800fb72:	bf00      	nop
 800fb74:	bd80      	pop	{r7, pc}
 800fb76:	bf00      	nop
 800fb78:	e000e010 	.word	0xe000e010

0800fb7c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800fb7c:	b580      	push	{r7, lr}
 800fb7e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800fb80:	2100      	movs	r1, #0
 800fb82:	f06f 0004 	mvn.w	r0, #4
 800fb86:	f7ff ffbf 	bl	800fb08 <__NVIC_SetPriority>
#endif
}
 800fb8a:	bf00      	nop
 800fb8c:	bd80      	pop	{r7, pc}
	...

0800fb90 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800fb90:	b480      	push	{r7}
 800fb92:	b083      	sub	sp, #12
 800fb94:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fb96:	f3ef 8305 	mrs	r3, IPSR
 800fb9a:	603b      	str	r3, [r7, #0]
  return(result);
 800fb9c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800fb9e:	2b00      	cmp	r3, #0
 800fba0:	d003      	beq.n	800fbaa <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800fba2:	f06f 0305 	mvn.w	r3, #5
 800fba6:	607b      	str	r3, [r7, #4]
 800fba8:	e00c      	b.n	800fbc4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800fbaa:	4b0a      	ldr	r3, [pc, #40]	; (800fbd4 <osKernelInitialize+0x44>)
 800fbac:	681b      	ldr	r3, [r3, #0]
 800fbae:	2b00      	cmp	r3, #0
 800fbb0:	d105      	bne.n	800fbbe <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800fbb2:	4b08      	ldr	r3, [pc, #32]	; (800fbd4 <osKernelInitialize+0x44>)
 800fbb4:	2201      	movs	r2, #1
 800fbb6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800fbb8:	2300      	movs	r3, #0
 800fbba:	607b      	str	r3, [r7, #4]
 800fbbc:	e002      	b.n	800fbc4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800fbbe:	f04f 33ff 	mov.w	r3, #4294967295
 800fbc2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800fbc4:	687b      	ldr	r3, [r7, #4]
}
 800fbc6:	4618      	mov	r0, r3
 800fbc8:	370c      	adds	r7, #12
 800fbca:	46bd      	mov	sp, r7
 800fbcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbd0:	4770      	bx	lr
 800fbd2:	bf00      	nop
 800fbd4:	24000c1c 	.word	0x24000c1c

0800fbd8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800fbd8:	b580      	push	{r7, lr}
 800fbda:	b082      	sub	sp, #8
 800fbdc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fbde:	f3ef 8305 	mrs	r3, IPSR
 800fbe2:	603b      	str	r3, [r7, #0]
  return(result);
 800fbe4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800fbe6:	2b00      	cmp	r3, #0
 800fbe8:	d003      	beq.n	800fbf2 <osKernelStart+0x1a>
    stat = osErrorISR;
 800fbea:	f06f 0305 	mvn.w	r3, #5
 800fbee:	607b      	str	r3, [r7, #4]
 800fbf0:	e010      	b.n	800fc14 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800fbf2:	4b0b      	ldr	r3, [pc, #44]	; (800fc20 <osKernelStart+0x48>)
 800fbf4:	681b      	ldr	r3, [r3, #0]
 800fbf6:	2b01      	cmp	r3, #1
 800fbf8:	d109      	bne.n	800fc0e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800fbfa:	f7ff ffbf 	bl	800fb7c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800fbfe:	4b08      	ldr	r3, [pc, #32]	; (800fc20 <osKernelStart+0x48>)
 800fc00:	2202      	movs	r2, #2
 800fc02:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800fc04:	f002 fa2a 	bl	801205c <vTaskStartScheduler>
      stat = osOK;
 800fc08:	2300      	movs	r3, #0
 800fc0a:	607b      	str	r3, [r7, #4]
 800fc0c:	e002      	b.n	800fc14 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800fc0e:	f04f 33ff 	mov.w	r3, #4294967295
 800fc12:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800fc14:	687b      	ldr	r3, [r7, #4]
}
 800fc16:	4618      	mov	r0, r3
 800fc18:	3708      	adds	r7, #8
 800fc1a:	46bd      	mov	sp, r7
 800fc1c:	bd80      	pop	{r7, pc}
 800fc1e:	bf00      	nop
 800fc20:	24000c1c 	.word	0x24000c1c

0800fc24 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800fc24:	b580      	push	{r7, lr}
 800fc26:	b08e      	sub	sp, #56	; 0x38
 800fc28:	af04      	add	r7, sp, #16
 800fc2a:	60f8      	str	r0, [r7, #12]
 800fc2c:	60b9      	str	r1, [r7, #8]
 800fc2e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800fc30:	2300      	movs	r3, #0
 800fc32:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fc34:	f3ef 8305 	mrs	r3, IPSR
 800fc38:	617b      	str	r3, [r7, #20]
  return(result);
 800fc3a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800fc3c:	2b00      	cmp	r3, #0
 800fc3e:	d17e      	bne.n	800fd3e <osThreadNew+0x11a>
 800fc40:	68fb      	ldr	r3, [r7, #12]
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	d07b      	beq.n	800fd3e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800fc46:	2380      	movs	r3, #128	; 0x80
 800fc48:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800fc4a:	2318      	movs	r3, #24
 800fc4c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800fc4e:	2300      	movs	r3, #0
 800fc50:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800fc52:	f04f 33ff 	mov.w	r3, #4294967295
 800fc56:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	2b00      	cmp	r3, #0
 800fc5c:	d045      	beq.n	800fcea <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	681b      	ldr	r3, [r3, #0]
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	d002      	beq.n	800fc6c <osThreadNew+0x48>
        name = attr->name;
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	681b      	ldr	r3, [r3, #0]
 800fc6a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	699b      	ldr	r3, [r3, #24]
 800fc70:	2b00      	cmp	r3, #0
 800fc72:	d002      	beq.n	800fc7a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	699b      	ldr	r3, [r3, #24]
 800fc78:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800fc7a:	69fb      	ldr	r3, [r7, #28]
 800fc7c:	2b00      	cmp	r3, #0
 800fc7e:	d008      	beq.n	800fc92 <osThreadNew+0x6e>
 800fc80:	69fb      	ldr	r3, [r7, #28]
 800fc82:	2b38      	cmp	r3, #56	; 0x38
 800fc84:	d805      	bhi.n	800fc92 <osThreadNew+0x6e>
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	685b      	ldr	r3, [r3, #4]
 800fc8a:	f003 0301 	and.w	r3, r3, #1
 800fc8e:	2b00      	cmp	r3, #0
 800fc90:	d001      	beq.n	800fc96 <osThreadNew+0x72>
        return (NULL);
 800fc92:	2300      	movs	r3, #0
 800fc94:	e054      	b.n	800fd40 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	695b      	ldr	r3, [r3, #20]
 800fc9a:	2b00      	cmp	r3, #0
 800fc9c:	d003      	beq.n	800fca6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	695b      	ldr	r3, [r3, #20]
 800fca2:	089b      	lsrs	r3, r3, #2
 800fca4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	689b      	ldr	r3, [r3, #8]
 800fcaa:	2b00      	cmp	r3, #0
 800fcac:	d00e      	beq.n	800fccc <osThreadNew+0xa8>
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	68db      	ldr	r3, [r3, #12]
 800fcb2:	2ba7      	cmp	r3, #167	; 0xa7
 800fcb4:	d90a      	bls.n	800fccc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800fcba:	2b00      	cmp	r3, #0
 800fcbc:	d006      	beq.n	800fccc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	695b      	ldr	r3, [r3, #20]
 800fcc2:	2b00      	cmp	r3, #0
 800fcc4:	d002      	beq.n	800fccc <osThreadNew+0xa8>
        mem = 1;
 800fcc6:	2301      	movs	r3, #1
 800fcc8:	61bb      	str	r3, [r7, #24]
 800fcca:	e010      	b.n	800fcee <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	689b      	ldr	r3, [r3, #8]
 800fcd0:	2b00      	cmp	r3, #0
 800fcd2:	d10c      	bne.n	800fcee <osThreadNew+0xca>
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	68db      	ldr	r3, [r3, #12]
 800fcd8:	2b00      	cmp	r3, #0
 800fcda:	d108      	bne.n	800fcee <osThreadNew+0xca>
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	691b      	ldr	r3, [r3, #16]
 800fce0:	2b00      	cmp	r3, #0
 800fce2:	d104      	bne.n	800fcee <osThreadNew+0xca>
          mem = 0;
 800fce4:	2300      	movs	r3, #0
 800fce6:	61bb      	str	r3, [r7, #24]
 800fce8:	e001      	b.n	800fcee <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800fcea:	2300      	movs	r3, #0
 800fcec:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800fcee:	69bb      	ldr	r3, [r7, #24]
 800fcf0:	2b01      	cmp	r3, #1
 800fcf2:	d110      	bne.n	800fd16 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800fcf8:	687a      	ldr	r2, [r7, #4]
 800fcfa:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800fcfc:	9202      	str	r2, [sp, #8]
 800fcfe:	9301      	str	r3, [sp, #4]
 800fd00:	69fb      	ldr	r3, [r7, #28]
 800fd02:	9300      	str	r3, [sp, #0]
 800fd04:	68bb      	ldr	r3, [r7, #8]
 800fd06:	6a3a      	ldr	r2, [r7, #32]
 800fd08:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fd0a:	68f8      	ldr	r0, [r7, #12]
 800fd0c:	f001 ffba 	bl	8011c84 <xTaskCreateStatic>
 800fd10:	4603      	mov	r3, r0
 800fd12:	613b      	str	r3, [r7, #16]
 800fd14:	e013      	b.n	800fd3e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800fd16:	69bb      	ldr	r3, [r7, #24]
 800fd18:	2b00      	cmp	r3, #0
 800fd1a:	d110      	bne.n	800fd3e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800fd1c:	6a3b      	ldr	r3, [r7, #32]
 800fd1e:	b29a      	uxth	r2, r3
 800fd20:	f107 0310 	add.w	r3, r7, #16
 800fd24:	9301      	str	r3, [sp, #4]
 800fd26:	69fb      	ldr	r3, [r7, #28]
 800fd28:	9300      	str	r3, [sp, #0]
 800fd2a:	68bb      	ldr	r3, [r7, #8]
 800fd2c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fd2e:	68f8      	ldr	r0, [r7, #12]
 800fd30:	f002 f805 	bl	8011d3e <xTaskCreate>
 800fd34:	4603      	mov	r3, r0
 800fd36:	2b01      	cmp	r3, #1
 800fd38:	d001      	beq.n	800fd3e <osThreadNew+0x11a>
            hTask = NULL;
 800fd3a:	2300      	movs	r3, #0
 800fd3c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800fd3e:	693b      	ldr	r3, [r7, #16]
}
 800fd40:	4618      	mov	r0, r3
 800fd42:	3728      	adds	r7, #40	; 0x28
 800fd44:	46bd      	mov	sp, r7
 800fd46:	bd80      	pop	{r7, pc}

0800fd48 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800fd48:	b580      	push	{r7, lr}
 800fd4a:	b084      	sub	sp, #16
 800fd4c:	af00      	add	r7, sp, #0
 800fd4e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fd50:	f3ef 8305 	mrs	r3, IPSR
 800fd54:	60bb      	str	r3, [r7, #8]
  return(result);
 800fd56:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800fd58:	2b00      	cmp	r3, #0
 800fd5a:	d003      	beq.n	800fd64 <osDelay+0x1c>
    stat = osErrorISR;
 800fd5c:	f06f 0305 	mvn.w	r3, #5
 800fd60:	60fb      	str	r3, [r7, #12]
 800fd62:	e007      	b.n	800fd74 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800fd64:	2300      	movs	r3, #0
 800fd66:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	2b00      	cmp	r3, #0
 800fd6c:	d002      	beq.n	800fd74 <osDelay+0x2c>
      vTaskDelay(ticks);
 800fd6e:	6878      	ldr	r0, [r7, #4]
 800fd70:	f002 f940 	bl	8011ff4 <vTaskDelay>
    }
  }

  return (stat);
 800fd74:	68fb      	ldr	r3, [r7, #12]
}
 800fd76:	4618      	mov	r0, r3
 800fd78:	3710      	adds	r7, #16
 800fd7a:	46bd      	mov	sp, r7
 800fd7c:	bd80      	pop	{r7, pc}

0800fd7e <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800fd7e:	b580      	push	{r7, lr}
 800fd80:	b08a      	sub	sp, #40	; 0x28
 800fd82:	af02      	add	r7, sp, #8
 800fd84:	60f8      	str	r0, [r7, #12]
 800fd86:	60b9      	str	r1, [r7, #8]
 800fd88:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800fd8a:	2300      	movs	r3, #0
 800fd8c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fd8e:	f3ef 8305 	mrs	r3, IPSR
 800fd92:	613b      	str	r3, [r7, #16]
  return(result);
 800fd94:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800fd96:	2b00      	cmp	r3, #0
 800fd98:	d175      	bne.n	800fe86 <osSemaphoreNew+0x108>
 800fd9a:	68fb      	ldr	r3, [r7, #12]
 800fd9c:	2b00      	cmp	r3, #0
 800fd9e:	d072      	beq.n	800fe86 <osSemaphoreNew+0x108>
 800fda0:	68ba      	ldr	r2, [r7, #8]
 800fda2:	68fb      	ldr	r3, [r7, #12]
 800fda4:	429a      	cmp	r2, r3
 800fda6:	d86e      	bhi.n	800fe86 <osSemaphoreNew+0x108>
    mem = -1;
 800fda8:	f04f 33ff 	mov.w	r3, #4294967295
 800fdac:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	2b00      	cmp	r3, #0
 800fdb2:	d015      	beq.n	800fde0 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	689b      	ldr	r3, [r3, #8]
 800fdb8:	2b00      	cmp	r3, #0
 800fdba:	d006      	beq.n	800fdca <osSemaphoreNew+0x4c>
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	68db      	ldr	r3, [r3, #12]
 800fdc0:	2b4f      	cmp	r3, #79	; 0x4f
 800fdc2:	d902      	bls.n	800fdca <osSemaphoreNew+0x4c>
        mem = 1;
 800fdc4:	2301      	movs	r3, #1
 800fdc6:	61bb      	str	r3, [r7, #24]
 800fdc8:	e00c      	b.n	800fde4 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	689b      	ldr	r3, [r3, #8]
 800fdce:	2b00      	cmp	r3, #0
 800fdd0:	d108      	bne.n	800fde4 <osSemaphoreNew+0x66>
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	68db      	ldr	r3, [r3, #12]
 800fdd6:	2b00      	cmp	r3, #0
 800fdd8:	d104      	bne.n	800fde4 <osSemaphoreNew+0x66>
          mem = 0;
 800fdda:	2300      	movs	r3, #0
 800fddc:	61bb      	str	r3, [r7, #24]
 800fdde:	e001      	b.n	800fde4 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800fde0:	2300      	movs	r3, #0
 800fde2:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800fde4:	69bb      	ldr	r3, [r7, #24]
 800fde6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fdea:	d04c      	beq.n	800fe86 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800fdec:	68fb      	ldr	r3, [r7, #12]
 800fdee:	2b01      	cmp	r3, #1
 800fdf0:	d128      	bne.n	800fe44 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800fdf2:	69bb      	ldr	r3, [r7, #24]
 800fdf4:	2b01      	cmp	r3, #1
 800fdf6:	d10a      	bne.n	800fe0e <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	689b      	ldr	r3, [r3, #8]
 800fdfc:	2203      	movs	r2, #3
 800fdfe:	9200      	str	r2, [sp, #0]
 800fe00:	2200      	movs	r2, #0
 800fe02:	2100      	movs	r1, #0
 800fe04:	2001      	movs	r0, #1
 800fe06:	f000 ff97 	bl	8010d38 <xQueueGenericCreateStatic>
 800fe0a:	61f8      	str	r0, [r7, #28]
 800fe0c:	e005      	b.n	800fe1a <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800fe0e:	2203      	movs	r2, #3
 800fe10:	2100      	movs	r1, #0
 800fe12:	2001      	movs	r0, #1
 800fe14:	f001 f808 	bl	8010e28 <xQueueGenericCreate>
 800fe18:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800fe1a:	69fb      	ldr	r3, [r7, #28]
 800fe1c:	2b00      	cmp	r3, #0
 800fe1e:	d022      	beq.n	800fe66 <osSemaphoreNew+0xe8>
 800fe20:	68bb      	ldr	r3, [r7, #8]
 800fe22:	2b00      	cmp	r3, #0
 800fe24:	d01f      	beq.n	800fe66 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800fe26:	2300      	movs	r3, #0
 800fe28:	2200      	movs	r2, #0
 800fe2a:	2100      	movs	r1, #0
 800fe2c:	69f8      	ldr	r0, [r7, #28]
 800fe2e:	f001 f8c3 	bl	8010fb8 <xQueueGenericSend>
 800fe32:	4603      	mov	r3, r0
 800fe34:	2b01      	cmp	r3, #1
 800fe36:	d016      	beq.n	800fe66 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800fe38:	69f8      	ldr	r0, [r7, #28]
 800fe3a:	f001 fd4f 	bl	80118dc <vQueueDelete>
            hSemaphore = NULL;
 800fe3e:	2300      	movs	r3, #0
 800fe40:	61fb      	str	r3, [r7, #28]
 800fe42:	e010      	b.n	800fe66 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800fe44:	69bb      	ldr	r3, [r7, #24]
 800fe46:	2b01      	cmp	r3, #1
 800fe48:	d108      	bne.n	800fe5c <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	689b      	ldr	r3, [r3, #8]
 800fe4e:	461a      	mov	r2, r3
 800fe50:	68b9      	ldr	r1, [r7, #8]
 800fe52:	68f8      	ldr	r0, [r7, #12]
 800fe54:	f001 f845 	bl	8010ee2 <xQueueCreateCountingSemaphoreStatic>
 800fe58:	61f8      	str	r0, [r7, #28]
 800fe5a:	e004      	b.n	800fe66 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800fe5c:	68b9      	ldr	r1, [r7, #8]
 800fe5e:	68f8      	ldr	r0, [r7, #12]
 800fe60:	f001 f876 	bl	8010f50 <xQueueCreateCountingSemaphore>
 800fe64:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800fe66:	69fb      	ldr	r3, [r7, #28]
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	d00c      	beq.n	800fe86 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	2b00      	cmp	r3, #0
 800fe70:	d003      	beq.n	800fe7a <osSemaphoreNew+0xfc>
          name = attr->name;
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	681b      	ldr	r3, [r3, #0]
 800fe76:	617b      	str	r3, [r7, #20]
 800fe78:	e001      	b.n	800fe7e <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800fe7a:	2300      	movs	r3, #0
 800fe7c:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800fe7e:	6979      	ldr	r1, [r7, #20]
 800fe80:	69f8      	ldr	r0, [r7, #28]
 800fe82:	f001 fe77 	bl	8011b74 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800fe86:	69fb      	ldr	r3, [r7, #28]
}
 800fe88:	4618      	mov	r0, r3
 800fe8a:	3720      	adds	r7, #32
 800fe8c:	46bd      	mov	sp, r7
 800fe8e:	bd80      	pop	{r7, pc}

0800fe90 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800fe90:	b580      	push	{r7, lr}
 800fe92:	b086      	sub	sp, #24
 800fe94:	af00      	add	r7, sp, #0
 800fe96:	6078      	str	r0, [r7, #4]
 800fe98:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800fe9e:	2300      	movs	r3, #0
 800fea0:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800fea2:	693b      	ldr	r3, [r7, #16]
 800fea4:	2b00      	cmp	r3, #0
 800fea6:	d103      	bne.n	800feb0 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800fea8:	f06f 0303 	mvn.w	r3, #3
 800feac:	617b      	str	r3, [r7, #20]
 800feae:	e039      	b.n	800ff24 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800feb0:	f3ef 8305 	mrs	r3, IPSR
 800feb4:	60fb      	str	r3, [r7, #12]
  return(result);
 800feb6:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800feb8:	2b00      	cmp	r3, #0
 800feba:	d022      	beq.n	800ff02 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800febc:	683b      	ldr	r3, [r7, #0]
 800febe:	2b00      	cmp	r3, #0
 800fec0:	d003      	beq.n	800feca <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800fec2:	f06f 0303 	mvn.w	r3, #3
 800fec6:	617b      	str	r3, [r7, #20]
 800fec8:	e02c      	b.n	800ff24 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800feca:	2300      	movs	r3, #0
 800fecc:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800fece:	f107 0308 	add.w	r3, r7, #8
 800fed2:	461a      	mov	r2, r3
 800fed4:	2100      	movs	r1, #0
 800fed6:	6938      	ldr	r0, [r7, #16]
 800fed8:	f001 fc80 	bl	80117dc <xQueueReceiveFromISR>
 800fedc:	4603      	mov	r3, r0
 800fede:	2b01      	cmp	r3, #1
 800fee0:	d003      	beq.n	800feea <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800fee2:	f06f 0302 	mvn.w	r3, #2
 800fee6:	617b      	str	r3, [r7, #20]
 800fee8:	e01c      	b.n	800ff24 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800feea:	68bb      	ldr	r3, [r7, #8]
 800feec:	2b00      	cmp	r3, #0
 800feee:	d019      	beq.n	800ff24 <osSemaphoreAcquire+0x94>
 800fef0:	4b0f      	ldr	r3, [pc, #60]	; (800ff30 <osSemaphoreAcquire+0xa0>)
 800fef2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fef6:	601a      	str	r2, [r3, #0]
 800fef8:	f3bf 8f4f 	dsb	sy
 800fefc:	f3bf 8f6f 	isb	sy
 800ff00:	e010      	b.n	800ff24 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800ff02:	6839      	ldr	r1, [r7, #0]
 800ff04:	6938      	ldr	r0, [r7, #16]
 800ff06:	f001 fb5d 	bl	80115c4 <xQueueSemaphoreTake>
 800ff0a:	4603      	mov	r3, r0
 800ff0c:	2b01      	cmp	r3, #1
 800ff0e:	d009      	beq.n	800ff24 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800ff10:	683b      	ldr	r3, [r7, #0]
 800ff12:	2b00      	cmp	r3, #0
 800ff14:	d003      	beq.n	800ff1e <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800ff16:	f06f 0301 	mvn.w	r3, #1
 800ff1a:	617b      	str	r3, [r7, #20]
 800ff1c:	e002      	b.n	800ff24 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800ff1e:	f06f 0302 	mvn.w	r3, #2
 800ff22:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800ff24:	697b      	ldr	r3, [r7, #20]
}
 800ff26:	4618      	mov	r0, r3
 800ff28:	3718      	adds	r7, #24
 800ff2a:	46bd      	mov	sp, r7
 800ff2c:	bd80      	pop	{r7, pc}
 800ff2e:	bf00      	nop
 800ff30:	e000ed04 	.word	0xe000ed04

0800ff34 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800ff34:	b580      	push	{r7, lr}
 800ff36:	b086      	sub	sp, #24
 800ff38:	af00      	add	r7, sp, #0
 800ff3a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800ff40:	2300      	movs	r3, #0
 800ff42:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800ff44:	693b      	ldr	r3, [r7, #16]
 800ff46:	2b00      	cmp	r3, #0
 800ff48:	d103      	bne.n	800ff52 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800ff4a:	f06f 0303 	mvn.w	r3, #3
 800ff4e:	617b      	str	r3, [r7, #20]
 800ff50:	e02c      	b.n	800ffac <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ff52:	f3ef 8305 	mrs	r3, IPSR
 800ff56:	60fb      	str	r3, [r7, #12]
  return(result);
 800ff58:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800ff5a:	2b00      	cmp	r3, #0
 800ff5c:	d01a      	beq.n	800ff94 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800ff5e:	2300      	movs	r3, #0
 800ff60:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800ff62:	f107 0308 	add.w	r3, r7, #8
 800ff66:	4619      	mov	r1, r3
 800ff68:	6938      	ldr	r0, [r7, #16]
 800ff6a:	f001 f9be 	bl	80112ea <xQueueGiveFromISR>
 800ff6e:	4603      	mov	r3, r0
 800ff70:	2b01      	cmp	r3, #1
 800ff72:	d003      	beq.n	800ff7c <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800ff74:	f06f 0302 	mvn.w	r3, #2
 800ff78:	617b      	str	r3, [r7, #20]
 800ff7a:	e017      	b.n	800ffac <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800ff7c:	68bb      	ldr	r3, [r7, #8]
 800ff7e:	2b00      	cmp	r3, #0
 800ff80:	d014      	beq.n	800ffac <osSemaphoreRelease+0x78>
 800ff82:	4b0d      	ldr	r3, [pc, #52]	; (800ffb8 <osSemaphoreRelease+0x84>)
 800ff84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ff88:	601a      	str	r2, [r3, #0]
 800ff8a:	f3bf 8f4f 	dsb	sy
 800ff8e:	f3bf 8f6f 	isb	sy
 800ff92:	e00b      	b.n	800ffac <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800ff94:	2300      	movs	r3, #0
 800ff96:	2200      	movs	r2, #0
 800ff98:	2100      	movs	r1, #0
 800ff9a:	6938      	ldr	r0, [r7, #16]
 800ff9c:	f001 f80c 	bl	8010fb8 <xQueueGenericSend>
 800ffa0:	4603      	mov	r3, r0
 800ffa2:	2b01      	cmp	r3, #1
 800ffa4:	d002      	beq.n	800ffac <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800ffa6:	f06f 0302 	mvn.w	r3, #2
 800ffaa:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800ffac:	697b      	ldr	r3, [r7, #20]
}
 800ffae:	4618      	mov	r0, r3
 800ffb0:	3718      	adds	r7, #24
 800ffb2:	46bd      	mov	sp, r7
 800ffb4:	bd80      	pop	{r7, pc}
 800ffb6:	bf00      	nop
 800ffb8:	e000ed04 	.word	0xe000ed04

0800ffbc <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800ffbc:	b580      	push	{r7, lr}
 800ffbe:	b08a      	sub	sp, #40	; 0x28
 800ffc0:	af02      	add	r7, sp, #8
 800ffc2:	60f8      	str	r0, [r7, #12]
 800ffc4:	60b9      	str	r1, [r7, #8]
 800ffc6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800ffc8:	2300      	movs	r3, #0
 800ffca:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ffcc:	f3ef 8305 	mrs	r3, IPSR
 800ffd0:	613b      	str	r3, [r7, #16]
  return(result);
 800ffd2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800ffd4:	2b00      	cmp	r3, #0
 800ffd6:	d15f      	bne.n	8010098 <osMessageQueueNew+0xdc>
 800ffd8:	68fb      	ldr	r3, [r7, #12]
 800ffda:	2b00      	cmp	r3, #0
 800ffdc:	d05c      	beq.n	8010098 <osMessageQueueNew+0xdc>
 800ffde:	68bb      	ldr	r3, [r7, #8]
 800ffe0:	2b00      	cmp	r3, #0
 800ffe2:	d059      	beq.n	8010098 <osMessageQueueNew+0xdc>
    mem = -1;
 800ffe4:	f04f 33ff 	mov.w	r3, #4294967295
 800ffe8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	2b00      	cmp	r3, #0
 800ffee:	d029      	beq.n	8010044 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	689b      	ldr	r3, [r3, #8]
 800fff4:	2b00      	cmp	r3, #0
 800fff6:	d012      	beq.n	801001e <osMessageQueueNew+0x62>
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	68db      	ldr	r3, [r3, #12]
 800fffc:	2b4f      	cmp	r3, #79	; 0x4f
 800fffe:	d90e      	bls.n	801001e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8010004:	2b00      	cmp	r3, #0
 8010006:	d00a      	beq.n	801001e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	695a      	ldr	r2, [r3, #20]
 801000c:	68fb      	ldr	r3, [r7, #12]
 801000e:	68b9      	ldr	r1, [r7, #8]
 8010010:	fb01 f303 	mul.w	r3, r1, r3
 8010014:	429a      	cmp	r2, r3
 8010016:	d302      	bcc.n	801001e <osMessageQueueNew+0x62>
        mem = 1;
 8010018:	2301      	movs	r3, #1
 801001a:	61bb      	str	r3, [r7, #24]
 801001c:	e014      	b.n	8010048 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	689b      	ldr	r3, [r3, #8]
 8010022:	2b00      	cmp	r3, #0
 8010024:	d110      	bne.n	8010048 <osMessageQueueNew+0x8c>
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	68db      	ldr	r3, [r3, #12]
 801002a:	2b00      	cmp	r3, #0
 801002c:	d10c      	bne.n	8010048 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8010032:	2b00      	cmp	r3, #0
 8010034:	d108      	bne.n	8010048 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	695b      	ldr	r3, [r3, #20]
 801003a:	2b00      	cmp	r3, #0
 801003c:	d104      	bne.n	8010048 <osMessageQueueNew+0x8c>
          mem = 0;
 801003e:	2300      	movs	r3, #0
 8010040:	61bb      	str	r3, [r7, #24]
 8010042:	e001      	b.n	8010048 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8010044:	2300      	movs	r3, #0
 8010046:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8010048:	69bb      	ldr	r3, [r7, #24]
 801004a:	2b01      	cmp	r3, #1
 801004c:	d10b      	bne.n	8010066 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	691a      	ldr	r2, [r3, #16]
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	689b      	ldr	r3, [r3, #8]
 8010056:	2100      	movs	r1, #0
 8010058:	9100      	str	r1, [sp, #0]
 801005a:	68b9      	ldr	r1, [r7, #8]
 801005c:	68f8      	ldr	r0, [r7, #12]
 801005e:	f000 fe6b 	bl	8010d38 <xQueueGenericCreateStatic>
 8010062:	61f8      	str	r0, [r7, #28]
 8010064:	e008      	b.n	8010078 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8010066:	69bb      	ldr	r3, [r7, #24]
 8010068:	2b00      	cmp	r3, #0
 801006a:	d105      	bne.n	8010078 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 801006c:	2200      	movs	r2, #0
 801006e:	68b9      	ldr	r1, [r7, #8]
 8010070:	68f8      	ldr	r0, [r7, #12]
 8010072:	f000 fed9 	bl	8010e28 <xQueueGenericCreate>
 8010076:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8010078:	69fb      	ldr	r3, [r7, #28]
 801007a:	2b00      	cmp	r3, #0
 801007c:	d00c      	beq.n	8010098 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	2b00      	cmp	r3, #0
 8010082:	d003      	beq.n	801008c <osMessageQueueNew+0xd0>
        name = attr->name;
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	681b      	ldr	r3, [r3, #0]
 8010088:	617b      	str	r3, [r7, #20]
 801008a:	e001      	b.n	8010090 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 801008c:	2300      	movs	r3, #0
 801008e:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8010090:	6979      	ldr	r1, [r7, #20]
 8010092:	69f8      	ldr	r0, [r7, #28]
 8010094:	f001 fd6e 	bl	8011b74 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8010098:	69fb      	ldr	r3, [r7, #28]
}
 801009a:	4618      	mov	r0, r3
 801009c:	3720      	adds	r7, #32
 801009e:	46bd      	mov	sp, r7
 80100a0:	bd80      	pop	{r7, pc}
	...

080100a4 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80100a4:	b580      	push	{r7, lr}
 80100a6:	b088      	sub	sp, #32
 80100a8:	af00      	add	r7, sp, #0
 80100aa:	60f8      	str	r0, [r7, #12]
 80100ac:	60b9      	str	r1, [r7, #8]
 80100ae:	603b      	str	r3, [r7, #0]
 80100b0:	4613      	mov	r3, r2
 80100b2:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80100b4:	68fb      	ldr	r3, [r7, #12]
 80100b6:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80100b8:	2300      	movs	r3, #0
 80100ba:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80100bc:	f3ef 8305 	mrs	r3, IPSR
 80100c0:	617b      	str	r3, [r7, #20]
  return(result);
 80100c2:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80100c4:	2b00      	cmp	r3, #0
 80100c6:	d028      	beq.n	801011a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80100c8:	69bb      	ldr	r3, [r7, #24]
 80100ca:	2b00      	cmp	r3, #0
 80100cc:	d005      	beq.n	80100da <osMessageQueuePut+0x36>
 80100ce:	68bb      	ldr	r3, [r7, #8]
 80100d0:	2b00      	cmp	r3, #0
 80100d2:	d002      	beq.n	80100da <osMessageQueuePut+0x36>
 80100d4:	683b      	ldr	r3, [r7, #0]
 80100d6:	2b00      	cmp	r3, #0
 80100d8:	d003      	beq.n	80100e2 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80100da:	f06f 0303 	mvn.w	r3, #3
 80100de:	61fb      	str	r3, [r7, #28]
 80100e0:	e038      	b.n	8010154 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80100e2:	2300      	movs	r3, #0
 80100e4:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80100e6:	f107 0210 	add.w	r2, r7, #16
 80100ea:	2300      	movs	r3, #0
 80100ec:	68b9      	ldr	r1, [r7, #8]
 80100ee:	69b8      	ldr	r0, [r7, #24]
 80100f0:	f001 f860 	bl	80111b4 <xQueueGenericSendFromISR>
 80100f4:	4603      	mov	r3, r0
 80100f6:	2b01      	cmp	r3, #1
 80100f8:	d003      	beq.n	8010102 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80100fa:	f06f 0302 	mvn.w	r3, #2
 80100fe:	61fb      	str	r3, [r7, #28]
 8010100:	e028      	b.n	8010154 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8010102:	693b      	ldr	r3, [r7, #16]
 8010104:	2b00      	cmp	r3, #0
 8010106:	d025      	beq.n	8010154 <osMessageQueuePut+0xb0>
 8010108:	4b15      	ldr	r3, [pc, #84]	; (8010160 <osMessageQueuePut+0xbc>)
 801010a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801010e:	601a      	str	r2, [r3, #0]
 8010110:	f3bf 8f4f 	dsb	sy
 8010114:	f3bf 8f6f 	isb	sy
 8010118:	e01c      	b.n	8010154 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 801011a:	69bb      	ldr	r3, [r7, #24]
 801011c:	2b00      	cmp	r3, #0
 801011e:	d002      	beq.n	8010126 <osMessageQueuePut+0x82>
 8010120:	68bb      	ldr	r3, [r7, #8]
 8010122:	2b00      	cmp	r3, #0
 8010124:	d103      	bne.n	801012e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8010126:	f06f 0303 	mvn.w	r3, #3
 801012a:	61fb      	str	r3, [r7, #28]
 801012c:	e012      	b.n	8010154 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 801012e:	2300      	movs	r3, #0
 8010130:	683a      	ldr	r2, [r7, #0]
 8010132:	68b9      	ldr	r1, [r7, #8]
 8010134:	69b8      	ldr	r0, [r7, #24]
 8010136:	f000 ff3f 	bl	8010fb8 <xQueueGenericSend>
 801013a:	4603      	mov	r3, r0
 801013c:	2b01      	cmp	r3, #1
 801013e:	d009      	beq.n	8010154 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8010140:	683b      	ldr	r3, [r7, #0]
 8010142:	2b00      	cmp	r3, #0
 8010144:	d003      	beq.n	801014e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8010146:	f06f 0301 	mvn.w	r3, #1
 801014a:	61fb      	str	r3, [r7, #28]
 801014c:	e002      	b.n	8010154 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 801014e:	f06f 0302 	mvn.w	r3, #2
 8010152:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8010154:	69fb      	ldr	r3, [r7, #28]
}
 8010156:	4618      	mov	r0, r3
 8010158:	3720      	adds	r7, #32
 801015a:	46bd      	mov	sp, r7
 801015c:	bd80      	pop	{r7, pc}
 801015e:	bf00      	nop
 8010160:	e000ed04 	.word	0xe000ed04

08010164 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8010164:	b580      	push	{r7, lr}
 8010166:	b088      	sub	sp, #32
 8010168:	af00      	add	r7, sp, #0
 801016a:	60f8      	str	r0, [r7, #12]
 801016c:	60b9      	str	r1, [r7, #8]
 801016e:	607a      	str	r2, [r7, #4]
 8010170:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8010172:	68fb      	ldr	r3, [r7, #12]
 8010174:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8010176:	2300      	movs	r3, #0
 8010178:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801017a:	f3ef 8305 	mrs	r3, IPSR
 801017e:	617b      	str	r3, [r7, #20]
  return(result);
 8010180:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8010182:	2b00      	cmp	r3, #0
 8010184:	d028      	beq.n	80101d8 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8010186:	69bb      	ldr	r3, [r7, #24]
 8010188:	2b00      	cmp	r3, #0
 801018a:	d005      	beq.n	8010198 <osMessageQueueGet+0x34>
 801018c:	68bb      	ldr	r3, [r7, #8]
 801018e:	2b00      	cmp	r3, #0
 8010190:	d002      	beq.n	8010198 <osMessageQueueGet+0x34>
 8010192:	683b      	ldr	r3, [r7, #0]
 8010194:	2b00      	cmp	r3, #0
 8010196:	d003      	beq.n	80101a0 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8010198:	f06f 0303 	mvn.w	r3, #3
 801019c:	61fb      	str	r3, [r7, #28]
 801019e:	e037      	b.n	8010210 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80101a0:	2300      	movs	r3, #0
 80101a2:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80101a4:	f107 0310 	add.w	r3, r7, #16
 80101a8:	461a      	mov	r2, r3
 80101aa:	68b9      	ldr	r1, [r7, #8]
 80101ac:	69b8      	ldr	r0, [r7, #24]
 80101ae:	f001 fb15 	bl	80117dc <xQueueReceiveFromISR>
 80101b2:	4603      	mov	r3, r0
 80101b4:	2b01      	cmp	r3, #1
 80101b6:	d003      	beq.n	80101c0 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80101b8:	f06f 0302 	mvn.w	r3, #2
 80101bc:	61fb      	str	r3, [r7, #28]
 80101be:	e027      	b.n	8010210 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80101c0:	693b      	ldr	r3, [r7, #16]
 80101c2:	2b00      	cmp	r3, #0
 80101c4:	d024      	beq.n	8010210 <osMessageQueueGet+0xac>
 80101c6:	4b15      	ldr	r3, [pc, #84]	; (801021c <osMessageQueueGet+0xb8>)
 80101c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80101cc:	601a      	str	r2, [r3, #0]
 80101ce:	f3bf 8f4f 	dsb	sy
 80101d2:	f3bf 8f6f 	isb	sy
 80101d6:	e01b      	b.n	8010210 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80101d8:	69bb      	ldr	r3, [r7, #24]
 80101da:	2b00      	cmp	r3, #0
 80101dc:	d002      	beq.n	80101e4 <osMessageQueueGet+0x80>
 80101de:	68bb      	ldr	r3, [r7, #8]
 80101e0:	2b00      	cmp	r3, #0
 80101e2:	d103      	bne.n	80101ec <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 80101e4:	f06f 0303 	mvn.w	r3, #3
 80101e8:	61fb      	str	r3, [r7, #28]
 80101ea:	e011      	b.n	8010210 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80101ec:	683a      	ldr	r2, [r7, #0]
 80101ee:	68b9      	ldr	r1, [r7, #8]
 80101f0:	69b8      	ldr	r0, [r7, #24]
 80101f2:	f001 f907 	bl	8011404 <xQueueReceive>
 80101f6:	4603      	mov	r3, r0
 80101f8:	2b01      	cmp	r3, #1
 80101fa:	d009      	beq.n	8010210 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 80101fc:	683b      	ldr	r3, [r7, #0]
 80101fe:	2b00      	cmp	r3, #0
 8010200:	d003      	beq.n	801020a <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8010202:	f06f 0301 	mvn.w	r3, #1
 8010206:	61fb      	str	r3, [r7, #28]
 8010208:	e002      	b.n	8010210 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 801020a:	f06f 0302 	mvn.w	r3, #2
 801020e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8010210:	69fb      	ldr	r3, [r7, #28]
}
 8010212:	4618      	mov	r0, r3
 8010214:	3720      	adds	r7, #32
 8010216:	46bd      	mov	sp, r7
 8010218:	bd80      	pop	{r7, pc}
 801021a:	bf00      	nop
 801021c:	e000ed04 	.word	0xe000ed04

08010220 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8010220:	b480      	push	{r7}
 8010222:	b085      	sub	sp, #20
 8010224:	af00      	add	r7, sp, #0
 8010226:	60f8      	str	r0, [r7, #12]
 8010228:	60b9      	str	r1, [r7, #8]
 801022a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 801022c:	68fb      	ldr	r3, [r7, #12]
 801022e:	4a07      	ldr	r2, [pc, #28]	; (801024c <vApplicationGetIdleTaskMemory+0x2c>)
 8010230:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8010232:	68bb      	ldr	r3, [r7, #8]
 8010234:	4a06      	ldr	r2, [pc, #24]	; (8010250 <vApplicationGetIdleTaskMemory+0x30>)
 8010236:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	2280      	movs	r2, #128	; 0x80
 801023c:	601a      	str	r2, [r3, #0]
}
 801023e:	bf00      	nop
 8010240:	3714      	adds	r7, #20
 8010242:	46bd      	mov	sp, r7
 8010244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010248:	4770      	bx	lr
 801024a:	bf00      	nop
 801024c:	24000c20 	.word	0x24000c20
 8010250:	24000cc8 	.word	0x24000cc8

08010254 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8010254:	b480      	push	{r7}
 8010256:	b085      	sub	sp, #20
 8010258:	af00      	add	r7, sp, #0
 801025a:	60f8      	str	r0, [r7, #12]
 801025c:	60b9      	str	r1, [r7, #8]
 801025e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8010260:	68fb      	ldr	r3, [r7, #12]
 8010262:	4a07      	ldr	r2, [pc, #28]	; (8010280 <vApplicationGetTimerTaskMemory+0x2c>)
 8010264:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8010266:	68bb      	ldr	r3, [r7, #8]
 8010268:	4a06      	ldr	r2, [pc, #24]	; (8010284 <vApplicationGetTimerTaskMemory+0x30>)
 801026a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010272:	601a      	str	r2, [r3, #0]
}
 8010274:	bf00      	nop
 8010276:	3714      	adds	r7, #20
 8010278:	46bd      	mov	sp, r7
 801027a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801027e:	4770      	bx	lr
 8010280:	24000ec8 	.word	0x24000ec8
 8010284:	24000f70 	.word	0x24000f70

08010288 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8010288:	b580      	push	{r7, lr}
 801028a:	b08a      	sub	sp, #40	; 0x28
 801028c:	af00      	add	r7, sp, #0
 801028e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010290:	2300      	movs	r3, #0
 8010292:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8010294:	f001 ff52 	bl	801213c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8010298:	4b5b      	ldr	r3, [pc, #364]	; (8010408 <pvPortMalloc+0x180>)
 801029a:	681b      	ldr	r3, [r3, #0]
 801029c:	2b00      	cmp	r3, #0
 801029e:	d101      	bne.n	80102a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80102a0:	f000 f920 	bl	80104e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80102a4:	4b59      	ldr	r3, [pc, #356]	; (801040c <pvPortMalloc+0x184>)
 80102a6:	681a      	ldr	r2, [r3, #0]
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	4013      	ands	r3, r2
 80102ac:	2b00      	cmp	r3, #0
 80102ae:	f040 8093 	bne.w	80103d8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	2b00      	cmp	r3, #0
 80102b6:	d01d      	beq.n	80102f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80102b8:	2208      	movs	r2, #8
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	4413      	add	r3, r2
 80102be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	f003 0307 	and.w	r3, r3, #7
 80102c6:	2b00      	cmp	r3, #0
 80102c8:	d014      	beq.n	80102f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	f023 0307 	bic.w	r3, r3, #7
 80102d0:	3308      	adds	r3, #8
 80102d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	f003 0307 	and.w	r3, r3, #7
 80102da:	2b00      	cmp	r3, #0
 80102dc:	d00a      	beq.n	80102f4 <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80102de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102e2:	f383 8811 	msr	BASEPRI, r3
 80102e6:	f3bf 8f6f 	isb	sy
 80102ea:	f3bf 8f4f 	dsb	sy
 80102ee:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80102f0:	bf00      	nop
 80102f2:	e7fe      	b.n	80102f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	2b00      	cmp	r3, #0
 80102f8:	d06e      	beq.n	80103d8 <pvPortMalloc+0x150>
 80102fa:	4b45      	ldr	r3, [pc, #276]	; (8010410 <pvPortMalloc+0x188>)
 80102fc:	681b      	ldr	r3, [r3, #0]
 80102fe:	687a      	ldr	r2, [r7, #4]
 8010300:	429a      	cmp	r2, r3
 8010302:	d869      	bhi.n	80103d8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8010304:	4b43      	ldr	r3, [pc, #268]	; (8010414 <pvPortMalloc+0x18c>)
 8010306:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8010308:	4b42      	ldr	r3, [pc, #264]	; (8010414 <pvPortMalloc+0x18c>)
 801030a:	681b      	ldr	r3, [r3, #0]
 801030c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801030e:	e004      	b.n	801031a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8010310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010312:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8010314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010316:	681b      	ldr	r3, [r3, #0]
 8010318:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801031a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801031c:	685b      	ldr	r3, [r3, #4]
 801031e:	687a      	ldr	r2, [r7, #4]
 8010320:	429a      	cmp	r2, r3
 8010322:	d903      	bls.n	801032c <pvPortMalloc+0xa4>
 8010324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010326:	681b      	ldr	r3, [r3, #0]
 8010328:	2b00      	cmp	r3, #0
 801032a:	d1f1      	bne.n	8010310 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801032c:	4b36      	ldr	r3, [pc, #216]	; (8010408 <pvPortMalloc+0x180>)
 801032e:	681b      	ldr	r3, [r3, #0]
 8010330:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010332:	429a      	cmp	r2, r3
 8010334:	d050      	beq.n	80103d8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8010336:	6a3b      	ldr	r3, [r7, #32]
 8010338:	681b      	ldr	r3, [r3, #0]
 801033a:	2208      	movs	r2, #8
 801033c:	4413      	add	r3, r2
 801033e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010342:	681a      	ldr	r2, [r3, #0]
 8010344:	6a3b      	ldr	r3, [r7, #32]
 8010346:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8010348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801034a:	685a      	ldr	r2, [r3, #4]
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	1ad2      	subs	r2, r2, r3
 8010350:	2308      	movs	r3, #8
 8010352:	005b      	lsls	r3, r3, #1
 8010354:	429a      	cmp	r2, r3
 8010356:	d91f      	bls.n	8010398 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8010358:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	4413      	add	r3, r2
 801035e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010360:	69bb      	ldr	r3, [r7, #24]
 8010362:	f003 0307 	and.w	r3, r3, #7
 8010366:	2b00      	cmp	r3, #0
 8010368:	d00a      	beq.n	8010380 <pvPortMalloc+0xf8>
	__asm volatile
 801036a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801036e:	f383 8811 	msr	BASEPRI, r3
 8010372:	f3bf 8f6f 	isb	sy
 8010376:	f3bf 8f4f 	dsb	sy
 801037a:	613b      	str	r3, [r7, #16]
}
 801037c:	bf00      	nop
 801037e:	e7fe      	b.n	801037e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010382:	685a      	ldr	r2, [r3, #4]
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	1ad2      	subs	r2, r2, r3
 8010388:	69bb      	ldr	r3, [r7, #24]
 801038a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801038c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801038e:	687a      	ldr	r2, [r7, #4]
 8010390:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8010392:	69b8      	ldr	r0, [r7, #24]
 8010394:	f000 f908 	bl	80105a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010398:	4b1d      	ldr	r3, [pc, #116]	; (8010410 <pvPortMalloc+0x188>)
 801039a:	681a      	ldr	r2, [r3, #0]
 801039c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801039e:	685b      	ldr	r3, [r3, #4]
 80103a0:	1ad3      	subs	r3, r2, r3
 80103a2:	4a1b      	ldr	r2, [pc, #108]	; (8010410 <pvPortMalloc+0x188>)
 80103a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80103a6:	4b1a      	ldr	r3, [pc, #104]	; (8010410 <pvPortMalloc+0x188>)
 80103a8:	681a      	ldr	r2, [r3, #0]
 80103aa:	4b1b      	ldr	r3, [pc, #108]	; (8010418 <pvPortMalloc+0x190>)
 80103ac:	681b      	ldr	r3, [r3, #0]
 80103ae:	429a      	cmp	r2, r3
 80103b0:	d203      	bcs.n	80103ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80103b2:	4b17      	ldr	r3, [pc, #92]	; (8010410 <pvPortMalloc+0x188>)
 80103b4:	681b      	ldr	r3, [r3, #0]
 80103b6:	4a18      	ldr	r2, [pc, #96]	; (8010418 <pvPortMalloc+0x190>)
 80103b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80103ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103bc:	685a      	ldr	r2, [r3, #4]
 80103be:	4b13      	ldr	r3, [pc, #76]	; (801040c <pvPortMalloc+0x184>)
 80103c0:	681b      	ldr	r3, [r3, #0]
 80103c2:	431a      	orrs	r2, r3
 80103c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80103c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103ca:	2200      	movs	r2, #0
 80103cc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80103ce:	4b13      	ldr	r3, [pc, #76]	; (801041c <pvPortMalloc+0x194>)
 80103d0:	681b      	ldr	r3, [r3, #0]
 80103d2:	3301      	adds	r3, #1
 80103d4:	4a11      	ldr	r2, [pc, #68]	; (801041c <pvPortMalloc+0x194>)
 80103d6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80103d8:	f001 febe 	bl	8012158 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80103dc:	69fb      	ldr	r3, [r7, #28]
 80103de:	f003 0307 	and.w	r3, r3, #7
 80103e2:	2b00      	cmp	r3, #0
 80103e4:	d00a      	beq.n	80103fc <pvPortMalloc+0x174>
	__asm volatile
 80103e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103ea:	f383 8811 	msr	BASEPRI, r3
 80103ee:	f3bf 8f6f 	isb	sy
 80103f2:	f3bf 8f4f 	dsb	sy
 80103f6:	60fb      	str	r3, [r7, #12]
}
 80103f8:	bf00      	nop
 80103fa:	e7fe      	b.n	80103fa <pvPortMalloc+0x172>
	return pvReturn;
 80103fc:	69fb      	ldr	r3, [r7, #28]
}
 80103fe:	4618      	mov	r0, r3
 8010400:	3728      	adds	r7, #40	; 0x28
 8010402:	46bd      	mov	sp, r7
 8010404:	bd80      	pop	{r7, pc}
 8010406:	bf00      	nop
 8010408:	24004f78 	.word	0x24004f78
 801040c:	24004f8c 	.word	0x24004f8c
 8010410:	24004f7c 	.word	0x24004f7c
 8010414:	24004f70 	.word	0x24004f70
 8010418:	24004f80 	.word	0x24004f80
 801041c:	24004f84 	.word	0x24004f84

08010420 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010420:	b580      	push	{r7, lr}
 8010422:	b086      	sub	sp, #24
 8010424:	af00      	add	r7, sp, #0
 8010426:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	2b00      	cmp	r3, #0
 8010430:	d04d      	beq.n	80104ce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8010432:	2308      	movs	r3, #8
 8010434:	425b      	negs	r3, r3
 8010436:	697a      	ldr	r2, [r7, #20]
 8010438:	4413      	add	r3, r2
 801043a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801043c:	697b      	ldr	r3, [r7, #20]
 801043e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010440:	693b      	ldr	r3, [r7, #16]
 8010442:	685a      	ldr	r2, [r3, #4]
 8010444:	4b24      	ldr	r3, [pc, #144]	; (80104d8 <vPortFree+0xb8>)
 8010446:	681b      	ldr	r3, [r3, #0]
 8010448:	4013      	ands	r3, r2
 801044a:	2b00      	cmp	r3, #0
 801044c:	d10a      	bne.n	8010464 <vPortFree+0x44>
	__asm volatile
 801044e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010452:	f383 8811 	msr	BASEPRI, r3
 8010456:	f3bf 8f6f 	isb	sy
 801045a:	f3bf 8f4f 	dsb	sy
 801045e:	60fb      	str	r3, [r7, #12]
}
 8010460:	bf00      	nop
 8010462:	e7fe      	b.n	8010462 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8010464:	693b      	ldr	r3, [r7, #16]
 8010466:	681b      	ldr	r3, [r3, #0]
 8010468:	2b00      	cmp	r3, #0
 801046a:	d00a      	beq.n	8010482 <vPortFree+0x62>
	__asm volatile
 801046c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010470:	f383 8811 	msr	BASEPRI, r3
 8010474:	f3bf 8f6f 	isb	sy
 8010478:	f3bf 8f4f 	dsb	sy
 801047c:	60bb      	str	r3, [r7, #8]
}
 801047e:	bf00      	nop
 8010480:	e7fe      	b.n	8010480 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8010482:	693b      	ldr	r3, [r7, #16]
 8010484:	685a      	ldr	r2, [r3, #4]
 8010486:	4b14      	ldr	r3, [pc, #80]	; (80104d8 <vPortFree+0xb8>)
 8010488:	681b      	ldr	r3, [r3, #0]
 801048a:	4013      	ands	r3, r2
 801048c:	2b00      	cmp	r3, #0
 801048e:	d01e      	beq.n	80104ce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8010490:	693b      	ldr	r3, [r7, #16]
 8010492:	681b      	ldr	r3, [r3, #0]
 8010494:	2b00      	cmp	r3, #0
 8010496:	d11a      	bne.n	80104ce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010498:	693b      	ldr	r3, [r7, #16]
 801049a:	685a      	ldr	r2, [r3, #4]
 801049c:	4b0e      	ldr	r3, [pc, #56]	; (80104d8 <vPortFree+0xb8>)
 801049e:	681b      	ldr	r3, [r3, #0]
 80104a0:	43db      	mvns	r3, r3
 80104a2:	401a      	ands	r2, r3
 80104a4:	693b      	ldr	r3, [r7, #16]
 80104a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80104a8:	f001 fe48 	bl	801213c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80104ac:	693b      	ldr	r3, [r7, #16]
 80104ae:	685a      	ldr	r2, [r3, #4]
 80104b0:	4b0a      	ldr	r3, [pc, #40]	; (80104dc <vPortFree+0xbc>)
 80104b2:	681b      	ldr	r3, [r3, #0]
 80104b4:	4413      	add	r3, r2
 80104b6:	4a09      	ldr	r2, [pc, #36]	; (80104dc <vPortFree+0xbc>)
 80104b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80104ba:	6938      	ldr	r0, [r7, #16]
 80104bc:	f000 f874 	bl	80105a8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80104c0:	4b07      	ldr	r3, [pc, #28]	; (80104e0 <vPortFree+0xc0>)
 80104c2:	681b      	ldr	r3, [r3, #0]
 80104c4:	3301      	adds	r3, #1
 80104c6:	4a06      	ldr	r2, [pc, #24]	; (80104e0 <vPortFree+0xc0>)
 80104c8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80104ca:	f001 fe45 	bl	8012158 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80104ce:	bf00      	nop
 80104d0:	3718      	adds	r7, #24
 80104d2:	46bd      	mov	sp, r7
 80104d4:	bd80      	pop	{r7, pc}
 80104d6:	bf00      	nop
 80104d8:	24004f8c 	.word	0x24004f8c
 80104dc:	24004f7c 	.word	0x24004f7c
 80104e0:	24004f88 	.word	0x24004f88

080104e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80104e4:	b480      	push	{r7}
 80104e6:	b085      	sub	sp, #20
 80104e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80104ea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80104ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80104f0:	4b27      	ldr	r3, [pc, #156]	; (8010590 <prvHeapInit+0xac>)
 80104f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80104f4:	68fb      	ldr	r3, [r7, #12]
 80104f6:	f003 0307 	and.w	r3, r3, #7
 80104fa:	2b00      	cmp	r3, #0
 80104fc:	d00c      	beq.n	8010518 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80104fe:	68fb      	ldr	r3, [r7, #12]
 8010500:	3307      	adds	r3, #7
 8010502:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010504:	68fb      	ldr	r3, [r7, #12]
 8010506:	f023 0307 	bic.w	r3, r3, #7
 801050a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801050c:	68ba      	ldr	r2, [r7, #8]
 801050e:	68fb      	ldr	r3, [r7, #12]
 8010510:	1ad3      	subs	r3, r2, r3
 8010512:	4a1f      	ldr	r2, [pc, #124]	; (8010590 <prvHeapInit+0xac>)
 8010514:	4413      	add	r3, r2
 8010516:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010518:	68fb      	ldr	r3, [r7, #12]
 801051a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801051c:	4a1d      	ldr	r2, [pc, #116]	; (8010594 <prvHeapInit+0xb0>)
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8010522:	4b1c      	ldr	r3, [pc, #112]	; (8010594 <prvHeapInit+0xb0>)
 8010524:	2200      	movs	r2, #0
 8010526:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	68ba      	ldr	r2, [r7, #8]
 801052c:	4413      	add	r3, r2
 801052e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8010530:	2208      	movs	r2, #8
 8010532:	68fb      	ldr	r3, [r7, #12]
 8010534:	1a9b      	subs	r3, r3, r2
 8010536:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010538:	68fb      	ldr	r3, [r7, #12]
 801053a:	f023 0307 	bic.w	r3, r3, #7
 801053e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8010540:	68fb      	ldr	r3, [r7, #12]
 8010542:	4a15      	ldr	r2, [pc, #84]	; (8010598 <prvHeapInit+0xb4>)
 8010544:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8010546:	4b14      	ldr	r3, [pc, #80]	; (8010598 <prvHeapInit+0xb4>)
 8010548:	681b      	ldr	r3, [r3, #0]
 801054a:	2200      	movs	r2, #0
 801054c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801054e:	4b12      	ldr	r3, [pc, #72]	; (8010598 <prvHeapInit+0xb4>)
 8010550:	681b      	ldr	r3, [r3, #0]
 8010552:	2200      	movs	r2, #0
 8010554:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801055a:	683b      	ldr	r3, [r7, #0]
 801055c:	68fa      	ldr	r2, [r7, #12]
 801055e:	1ad2      	subs	r2, r2, r3
 8010560:	683b      	ldr	r3, [r7, #0]
 8010562:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010564:	4b0c      	ldr	r3, [pc, #48]	; (8010598 <prvHeapInit+0xb4>)
 8010566:	681a      	ldr	r2, [r3, #0]
 8010568:	683b      	ldr	r3, [r7, #0]
 801056a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801056c:	683b      	ldr	r3, [r7, #0]
 801056e:	685b      	ldr	r3, [r3, #4]
 8010570:	4a0a      	ldr	r2, [pc, #40]	; (801059c <prvHeapInit+0xb8>)
 8010572:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010574:	683b      	ldr	r3, [r7, #0]
 8010576:	685b      	ldr	r3, [r3, #4]
 8010578:	4a09      	ldr	r2, [pc, #36]	; (80105a0 <prvHeapInit+0xbc>)
 801057a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801057c:	4b09      	ldr	r3, [pc, #36]	; (80105a4 <prvHeapInit+0xc0>)
 801057e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8010582:	601a      	str	r2, [r3, #0]
}
 8010584:	bf00      	nop
 8010586:	3714      	adds	r7, #20
 8010588:	46bd      	mov	sp, r7
 801058a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801058e:	4770      	bx	lr
 8010590:	24001370 	.word	0x24001370
 8010594:	24004f70 	.word	0x24004f70
 8010598:	24004f78 	.word	0x24004f78
 801059c:	24004f80 	.word	0x24004f80
 80105a0:	24004f7c 	.word	0x24004f7c
 80105a4:	24004f8c 	.word	0x24004f8c

080105a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80105a8:	b480      	push	{r7}
 80105aa:	b085      	sub	sp, #20
 80105ac:	af00      	add	r7, sp, #0
 80105ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80105b0:	4b28      	ldr	r3, [pc, #160]	; (8010654 <prvInsertBlockIntoFreeList+0xac>)
 80105b2:	60fb      	str	r3, [r7, #12]
 80105b4:	e002      	b.n	80105bc <prvInsertBlockIntoFreeList+0x14>
 80105b6:	68fb      	ldr	r3, [r7, #12]
 80105b8:	681b      	ldr	r3, [r3, #0]
 80105ba:	60fb      	str	r3, [r7, #12]
 80105bc:	68fb      	ldr	r3, [r7, #12]
 80105be:	681b      	ldr	r3, [r3, #0]
 80105c0:	687a      	ldr	r2, [r7, #4]
 80105c2:	429a      	cmp	r2, r3
 80105c4:	d8f7      	bhi.n	80105b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80105c6:	68fb      	ldr	r3, [r7, #12]
 80105c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80105ca:	68fb      	ldr	r3, [r7, #12]
 80105cc:	685b      	ldr	r3, [r3, #4]
 80105ce:	68ba      	ldr	r2, [r7, #8]
 80105d0:	4413      	add	r3, r2
 80105d2:	687a      	ldr	r2, [r7, #4]
 80105d4:	429a      	cmp	r2, r3
 80105d6:	d108      	bne.n	80105ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80105d8:	68fb      	ldr	r3, [r7, #12]
 80105da:	685a      	ldr	r2, [r3, #4]
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	685b      	ldr	r3, [r3, #4]
 80105e0:	441a      	add	r2, r3
 80105e2:	68fb      	ldr	r3, [r7, #12]
 80105e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80105e6:	68fb      	ldr	r3, [r7, #12]
 80105e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	685b      	ldr	r3, [r3, #4]
 80105f2:	68ba      	ldr	r2, [r7, #8]
 80105f4:	441a      	add	r2, r3
 80105f6:	68fb      	ldr	r3, [r7, #12]
 80105f8:	681b      	ldr	r3, [r3, #0]
 80105fa:	429a      	cmp	r2, r3
 80105fc:	d118      	bne.n	8010630 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80105fe:	68fb      	ldr	r3, [r7, #12]
 8010600:	681a      	ldr	r2, [r3, #0]
 8010602:	4b15      	ldr	r3, [pc, #84]	; (8010658 <prvInsertBlockIntoFreeList+0xb0>)
 8010604:	681b      	ldr	r3, [r3, #0]
 8010606:	429a      	cmp	r2, r3
 8010608:	d00d      	beq.n	8010626 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	685a      	ldr	r2, [r3, #4]
 801060e:	68fb      	ldr	r3, [r7, #12]
 8010610:	681b      	ldr	r3, [r3, #0]
 8010612:	685b      	ldr	r3, [r3, #4]
 8010614:	441a      	add	r2, r3
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801061a:	68fb      	ldr	r3, [r7, #12]
 801061c:	681b      	ldr	r3, [r3, #0]
 801061e:	681a      	ldr	r2, [r3, #0]
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	601a      	str	r2, [r3, #0]
 8010624:	e008      	b.n	8010638 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010626:	4b0c      	ldr	r3, [pc, #48]	; (8010658 <prvInsertBlockIntoFreeList+0xb0>)
 8010628:	681a      	ldr	r2, [r3, #0]
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	601a      	str	r2, [r3, #0]
 801062e:	e003      	b.n	8010638 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010630:	68fb      	ldr	r3, [r7, #12]
 8010632:	681a      	ldr	r2, [r3, #0]
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010638:	68fa      	ldr	r2, [r7, #12]
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	429a      	cmp	r2, r3
 801063e:	d002      	beq.n	8010646 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8010640:	68fb      	ldr	r3, [r7, #12]
 8010642:	687a      	ldr	r2, [r7, #4]
 8010644:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010646:	bf00      	nop
 8010648:	3714      	adds	r7, #20
 801064a:	46bd      	mov	sp, r7
 801064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010650:	4770      	bx	lr
 8010652:	bf00      	nop
 8010654:	24004f70 	.word	0x24004f70
 8010658:	24004f78 	.word	0x24004f78

0801065c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 801065c:	b480      	push	{r7}
 801065e:	b083      	sub	sp, #12
 8010660:	af00      	add	r7, sp, #0
 8010662:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	f103 0208 	add.w	r2, r3, #8
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	f04f 32ff 	mov.w	r2, #4294967295
 8010674:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	f103 0208 	add.w	r2, r3, #8
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	f103 0208 	add.w	r2, r3, #8
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	2200      	movs	r2, #0
 801068e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8010690:	bf00      	nop
 8010692:	370c      	adds	r7, #12
 8010694:	46bd      	mov	sp, r7
 8010696:	f85d 7b04 	ldr.w	r7, [sp], #4
 801069a:	4770      	bx	lr

0801069c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 801069c:	b480      	push	{r7}
 801069e:	b083      	sub	sp, #12
 80106a0:	af00      	add	r7, sp, #0
 80106a2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	2200      	movs	r2, #0
 80106a8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80106aa:	bf00      	nop
 80106ac:	370c      	adds	r7, #12
 80106ae:	46bd      	mov	sp, r7
 80106b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106b4:	4770      	bx	lr

080106b6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80106b6:	b480      	push	{r7}
 80106b8:	b085      	sub	sp, #20
 80106ba:	af00      	add	r7, sp, #0
 80106bc:	6078      	str	r0, [r7, #4]
 80106be:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	685b      	ldr	r3, [r3, #4]
 80106c4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80106c6:	683b      	ldr	r3, [r7, #0]
 80106c8:	68fa      	ldr	r2, [r7, #12]
 80106ca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80106cc:	68fb      	ldr	r3, [r7, #12]
 80106ce:	689a      	ldr	r2, [r3, #8]
 80106d0:	683b      	ldr	r3, [r7, #0]
 80106d2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80106d4:	68fb      	ldr	r3, [r7, #12]
 80106d6:	689b      	ldr	r3, [r3, #8]
 80106d8:	683a      	ldr	r2, [r7, #0]
 80106da:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80106dc:	68fb      	ldr	r3, [r7, #12]
 80106de:	683a      	ldr	r2, [r7, #0]
 80106e0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80106e2:	683b      	ldr	r3, [r7, #0]
 80106e4:	687a      	ldr	r2, [r7, #4]
 80106e6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	681b      	ldr	r3, [r3, #0]
 80106ec:	1c5a      	adds	r2, r3, #1
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	601a      	str	r2, [r3, #0]
}
 80106f2:	bf00      	nop
 80106f4:	3714      	adds	r7, #20
 80106f6:	46bd      	mov	sp, r7
 80106f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106fc:	4770      	bx	lr

080106fe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80106fe:	b480      	push	{r7}
 8010700:	b085      	sub	sp, #20
 8010702:	af00      	add	r7, sp, #0
 8010704:	6078      	str	r0, [r7, #4]
 8010706:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8010708:	683b      	ldr	r3, [r7, #0]
 801070a:	681b      	ldr	r3, [r3, #0]
 801070c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801070e:	68bb      	ldr	r3, [r7, #8]
 8010710:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010714:	d103      	bne.n	801071e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	691b      	ldr	r3, [r3, #16]
 801071a:	60fb      	str	r3, [r7, #12]
 801071c:	e00c      	b.n	8010738 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	3308      	adds	r3, #8
 8010722:	60fb      	str	r3, [r7, #12]
 8010724:	e002      	b.n	801072c <vListInsert+0x2e>
 8010726:	68fb      	ldr	r3, [r7, #12]
 8010728:	685b      	ldr	r3, [r3, #4]
 801072a:	60fb      	str	r3, [r7, #12]
 801072c:	68fb      	ldr	r3, [r7, #12]
 801072e:	685b      	ldr	r3, [r3, #4]
 8010730:	681b      	ldr	r3, [r3, #0]
 8010732:	68ba      	ldr	r2, [r7, #8]
 8010734:	429a      	cmp	r2, r3
 8010736:	d2f6      	bcs.n	8010726 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8010738:	68fb      	ldr	r3, [r7, #12]
 801073a:	685a      	ldr	r2, [r3, #4]
 801073c:	683b      	ldr	r3, [r7, #0]
 801073e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8010740:	683b      	ldr	r3, [r7, #0]
 8010742:	685b      	ldr	r3, [r3, #4]
 8010744:	683a      	ldr	r2, [r7, #0]
 8010746:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8010748:	683b      	ldr	r3, [r7, #0]
 801074a:	68fa      	ldr	r2, [r7, #12]
 801074c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801074e:	68fb      	ldr	r3, [r7, #12]
 8010750:	683a      	ldr	r2, [r7, #0]
 8010752:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8010754:	683b      	ldr	r3, [r7, #0]
 8010756:	687a      	ldr	r2, [r7, #4]
 8010758:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801075a:	687b      	ldr	r3, [r7, #4]
 801075c:	681b      	ldr	r3, [r3, #0]
 801075e:	1c5a      	adds	r2, r3, #1
 8010760:	687b      	ldr	r3, [r7, #4]
 8010762:	601a      	str	r2, [r3, #0]
}
 8010764:	bf00      	nop
 8010766:	3714      	adds	r7, #20
 8010768:	46bd      	mov	sp, r7
 801076a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801076e:	4770      	bx	lr

08010770 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8010770:	b480      	push	{r7}
 8010772:	b085      	sub	sp, #20
 8010774:	af00      	add	r7, sp, #0
 8010776:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	691b      	ldr	r3, [r3, #16]
 801077c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	685b      	ldr	r3, [r3, #4]
 8010782:	687a      	ldr	r2, [r7, #4]
 8010784:	6892      	ldr	r2, [r2, #8]
 8010786:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	689b      	ldr	r3, [r3, #8]
 801078c:	687a      	ldr	r2, [r7, #4]
 801078e:	6852      	ldr	r2, [r2, #4]
 8010790:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8010792:	68fb      	ldr	r3, [r7, #12]
 8010794:	685b      	ldr	r3, [r3, #4]
 8010796:	687a      	ldr	r2, [r7, #4]
 8010798:	429a      	cmp	r2, r3
 801079a:	d103      	bne.n	80107a4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	689a      	ldr	r2, [r3, #8]
 80107a0:	68fb      	ldr	r3, [r7, #12]
 80107a2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	2200      	movs	r2, #0
 80107a8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80107aa:	68fb      	ldr	r3, [r7, #12]
 80107ac:	681b      	ldr	r3, [r3, #0]
 80107ae:	1e5a      	subs	r2, r3, #1
 80107b0:	68fb      	ldr	r3, [r7, #12]
 80107b2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80107b4:	68fb      	ldr	r3, [r7, #12]
 80107b6:	681b      	ldr	r3, [r3, #0]
}
 80107b8:	4618      	mov	r0, r3
 80107ba:	3714      	adds	r7, #20
 80107bc:	46bd      	mov	sp, r7
 80107be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107c2:	4770      	bx	lr

080107c4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80107c4:	b480      	push	{r7}
 80107c6:	b085      	sub	sp, #20
 80107c8:	af00      	add	r7, sp, #0
 80107ca:	60f8      	str	r0, [r7, #12]
 80107cc:	60b9      	str	r1, [r7, #8]
 80107ce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80107d0:	68fb      	ldr	r3, [r7, #12]
 80107d2:	3b04      	subs	r3, #4
 80107d4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80107d6:	68fb      	ldr	r3, [r7, #12]
 80107d8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80107dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80107de:	68fb      	ldr	r3, [r7, #12]
 80107e0:	3b04      	subs	r3, #4
 80107e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80107e4:	68bb      	ldr	r3, [r7, #8]
 80107e6:	f023 0201 	bic.w	r2, r3, #1
 80107ea:	68fb      	ldr	r3, [r7, #12]
 80107ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80107ee:	68fb      	ldr	r3, [r7, #12]
 80107f0:	3b04      	subs	r3, #4
 80107f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80107f4:	4a0c      	ldr	r2, [pc, #48]	; (8010828 <pxPortInitialiseStack+0x64>)
 80107f6:	68fb      	ldr	r3, [r7, #12]
 80107f8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80107fa:	68fb      	ldr	r3, [r7, #12]
 80107fc:	3b14      	subs	r3, #20
 80107fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010800:	687a      	ldr	r2, [r7, #4]
 8010802:	68fb      	ldr	r3, [r7, #12]
 8010804:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8010806:	68fb      	ldr	r3, [r7, #12]
 8010808:	3b04      	subs	r3, #4
 801080a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801080c:	68fb      	ldr	r3, [r7, #12]
 801080e:	f06f 0202 	mvn.w	r2, #2
 8010812:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8010814:	68fb      	ldr	r3, [r7, #12]
 8010816:	3b20      	subs	r3, #32
 8010818:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801081a:	68fb      	ldr	r3, [r7, #12]
}
 801081c:	4618      	mov	r0, r3
 801081e:	3714      	adds	r7, #20
 8010820:	46bd      	mov	sp, r7
 8010822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010826:	4770      	bx	lr
 8010828:	0801082d 	.word	0x0801082d

0801082c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801082c:	b480      	push	{r7}
 801082e:	b085      	sub	sp, #20
 8010830:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8010832:	2300      	movs	r3, #0
 8010834:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8010836:	4b12      	ldr	r3, [pc, #72]	; (8010880 <prvTaskExitError+0x54>)
 8010838:	681b      	ldr	r3, [r3, #0]
 801083a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801083e:	d00a      	beq.n	8010856 <prvTaskExitError+0x2a>
	__asm volatile
 8010840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010844:	f383 8811 	msr	BASEPRI, r3
 8010848:	f3bf 8f6f 	isb	sy
 801084c:	f3bf 8f4f 	dsb	sy
 8010850:	60fb      	str	r3, [r7, #12]
}
 8010852:	bf00      	nop
 8010854:	e7fe      	b.n	8010854 <prvTaskExitError+0x28>
	__asm volatile
 8010856:	f04f 0350 	mov.w	r3, #80	; 0x50
 801085a:	f383 8811 	msr	BASEPRI, r3
 801085e:	f3bf 8f6f 	isb	sy
 8010862:	f3bf 8f4f 	dsb	sy
 8010866:	60bb      	str	r3, [r7, #8]
}
 8010868:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801086a:	bf00      	nop
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	2b00      	cmp	r3, #0
 8010870:	d0fc      	beq.n	801086c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8010872:	bf00      	nop
 8010874:	bf00      	nop
 8010876:	3714      	adds	r7, #20
 8010878:	46bd      	mov	sp, r7
 801087a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801087e:	4770      	bx	lr
 8010880:	24000010 	.word	0x24000010
	...

08010890 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010890:	4b07      	ldr	r3, [pc, #28]	; (80108b0 <pxCurrentTCBConst2>)
 8010892:	6819      	ldr	r1, [r3, #0]
 8010894:	6808      	ldr	r0, [r1, #0]
 8010896:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801089a:	f380 8809 	msr	PSP, r0
 801089e:	f3bf 8f6f 	isb	sy
 80108a2:	f04f 0000 	mov.w	r0, #0
 80108a6:	f380 8811 	msr	BASEPRI, r0
 80108aa:	4770      	bx	lr
 80108ac:	f3af 8000 	nop.w

080108b0 <pxCurrentTCBConst2>:
 80108b0:	24004fd8 	.word	0x24004fd8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80108b4:	bf00      	nop
 80108b6:	bf00      	nop

080108b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80108b8:	4808      	ldr	r0, [pc, #32]	; (80108dc <prvPortStartFirstTask+0x24>)
 80108ba:	6800      	ldr	r0, [r0, #0]
 80108bc:	6800      	ldr	r0, [r0, #0]
 80108be:	f380 8808 	msr	MSP, r0
 80108c2:	f04f 0000 	mov.w	r0, #0
 80108c6:	f380 8814 	msr	CONTROL, r0
 80108ca:	b662      	cpsie	i
 80108cc:	b661      	cpsie	f
 80108ce:	f3bf 8f4f 	dsb	sy
 80108d2:	f3bf 8f6f 	isb	sy
 80108d6:	df00      	svc	0
 80108d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80108da:	bf00      	nop
 80108dc:	e000ed08 	.word	0xe000ed08

080108e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80108e0:	b580      	push	{r7, lr}
 80108e2:	b086      	sub	sp, #24
 80108e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80108e6:	4b46      	ldr	r3, [pc, #280]	; (8010a00 <xPortStartScheduler+0x120>)
 80108e8:	681b      	ldr	r3, [r3, #0]
 80108ea:	4a46      	ldr	r2, [pc, #280]	; (8010a04 <xPortStartScheduler+0x124>)
 80108ec:	4293      	cmp	r3, r2
 80108ee:	d10a      	bne.n	8010906 <xPortStartScheduler+0x26>
	__asm volatile
 80108f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108f4:	f383 8811 	msr	BASEPRI, r3
 80108f8:	f3bf 8f6f 	isb	sy
 80108fc:	f3bf 8f4f 	dsb	sy
 8010900:	613b      	str	r3, [r7, #16]
}
 8010902:	bf00      	nop
 8010904:	e7fe      	b.n	8010904 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8010906:	4b3e      	ldr	r3, [pc, #248]	; (8010a00 <xPortStartScheduler+0x120>)
 8010908:	681b      	ldr	r3, [r3, #0]
 801090a:	4a3f      	ldr	r2, [pc, #252]	; (8010a08 <xPortStartScheduler+0x128>)
 801090c:	4293      	cmp	r3, r2
 801090e:	d10a      	bne.n	8010926 <xPortStartScheduler+0x46>
	__asm volatile
 8010910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010914:	f383 8811 	msr	BASEPRI, r3
 8010918:	f3bf 8f6f 	isb	sy
 801091c:	f3bf 8f4f 	dsb	sy
 8010920:	60fb      	str	r3, [r7, #12]
}
 8010922:	bf00      	nop
 8010924:	e7fe      	b.n	8010924 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8010926:	4b39      	ldr	r3, [pc, #228]	; (8010a0c <xPortStartScheduler+0x12c>)
 8010928:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801092a:	697b      	ldr	r3, [r7, #20]
 801092c:	781b      	ldrb	r3, [r3, #0]
 801092e:	b2db      	uxtb	r3, r3
 8010930:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8010932:	697b      	ldr	r3, [r7, #20]
 8010934:	22ff      	movs	r2, #255	; 0xff
 8010936:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8010938:	697b      	ldr	r3, [r7, #20]
 801093a:	781b      	ldrb	r3, [r3, #0]
 801093c:	b2db      	uxtb	r3, r3
 801093e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010940:	78fb      	ldrb	r3, [r7, #3]
 8010942:	b2db      	uxtb	r3, r3
 8010944:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8010948:	b2da      	uxtb	r2, r3
 801094a:	4b31      	ldr	r3, [pc, #196]	; (8010a10 <xPortStartScheduler+0x130>)
 801094c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801094e:	4b31      	ldr	r3, [pc, #196]	; (8010a14 <xPortStartScheduler+0x134>)
 8010950:	2207      	movs	r2, #7
 8010952:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010954:	e009      	b.n	801096a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8010956:	4b2f      	ldr	r3, [pc, #188]	; (8010a14 <xPortStartScheduler+0x134>)
 8010958:	681b      	ldr	r3, [r3, #0]
 801095a:	3b01      	subs	r3, #1
 801095c:	4a2d      	ldr	r2, [pc, #180]	; (8010a14 <xPortStartScheduler+0x134>)
 801095e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010960:	78fb      	ldrb	r3, [r7, #3]
 8010962:	b2db      	uxtb	r3, r3
 8010964:	005b      	lsls	r3, r3, #1
 8010966:	b2db      	uxtb	r3, r3
 8010968:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801096a:	78fb      	ldrb	r3, [r7, #3]
 801096c:	b2db      	uxtb	r3, r3
 801096e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010972:	2b80      	cmp	r3, #128	; 0x80
 8010974:	d0ef      	beq.n	8010956 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8010976:	4b27      	ldr	r3, [pc, #156]	; (8010a14 <xPortStartScheduler+0x134>)
 8010978:	681b      	ldr	r3, [r3, #0]
 801097a:	f1c3 0307 	rsb	r3, r3, #7
 801097e:	2b04      	cmp	r3, #4
 8010980:	d00a      	beq.n	8010998 <xPortStartScheduler+0xb8>
	__asm volatile
 8010982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010986:	f383 8811 	msr	BASEPRI, r3
 801098a:	f3bf 8f6f 	isb	sy
 801098e:	f3bf 8f4f 	dsb	sy
 8010992:	60bb      	str	r3, [r7, #8]
}
 8010994:	bf00      	nop
 8010996:	e7fe      	b.n	8010996 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8010998:	4b1e      	ldr	r3, [pc, #120]	; (8010a14 <xPortStartScheduler+0x134>)
 801099a:	681b      	ldr	r3, [r3, #0]
 801099c:	021b      	lsls	r3, r3, #8
 801099e:	4a1d      	ldr	r2, [pc, #116]	; (8010a14 <xPortStartScheduler+0x134>)
 80109a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80109a2:	4b1c      	ldr	r3, [pc, #112]	; (8010a14 <xPortStartScheduler+0x134>)
 80109a4:	681b      	ldr	r3, [r3, #0]
 80109a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80109aa:	4a1a      	ldr	r2, [pc, #104]	; (8010a14 <xPortStartScheduler+0x134>)
 80109ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80109ae:	687b      	ldr	r3, [r7, #4]
 80109b0:	b2da      	uxtb	r2, r3
 80109b2:	697b      	ldr	r3, [r7, #20]
 80109b4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80109b6:	4b18      	ldr	r3, [pc, #96]	; (8010a18 <xPortStartScheduler+0x138>)
 80109b8:	681b      	ldr	r3, [r3, #0]
 80109ba:	4a17      	ldr	r2, [pc, #92]	; (8010a18 <xPortStartScheduler+0x138>)
 80109bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80109c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80109c2:	4b15      	ldr	r3, [pc, #84]	; (8010a18 <xPortStartScheduler+0x138>)
 80109c4:	681b      	ldr	r3, [r3, #0]
 80109c6:	4a14      	ldr	r2, [pc, #80]	; (8010a18 <xPortStartScheduler+0x138>)
 80109c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80109cc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80109ce:	f000 f8dd 	bl	8010b8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80109d2:	4b12      	ldr	r3, [pc, #72]	; (8010a1c <xPortStartScheduler+0x13c>)
 80109d4:	2200      	movs	r2, #0
 80109d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80109d8:	f000 f8fc 	bl	8010bd4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80109dc:	4b10      	ldr	r3, [pc, #64]	; (8010a20 <xPortStartScheduler+0x140>)
 80109de:	681b      	ldr	r3, [r3, #0]
 80109e0:	4a0f      	ldr	r2, [pc, #60]	; (8010a20 <xPortStartScheduler+0x140>)
 80109e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80109e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80109e8:	f7ff ff66 	bl	80108b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80109ec:	f001 fd1c 	bl	8012428 <vTaskSwitchContext>
	prvTaskExitError();
 80109f0:	f7ff ff1c 	bl	801082c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80109f4:	2300      	movs	r3, #0
}
 80109f6:	4618      	mov	r0, r3
 80109f8:	3718      	adds	r7, #24
 80109fa:	46bd      	mov	sp, r7
 80109fc:	bd80      	pop	{r7, pc}
 80109fe:	bf00      	nop
 8010a00:	e000ed00 	.word	0xe000ed00
 8010a04:	410fc271 	.word	0x410fc271
 8010a08:	410fc270 	.word	0x410fc270
 8010a0c:	e000e400 	.word	0xe000e400
 8010a10:	24004f90 	.word	0x24004f90
 8010a14:	24004f94 	.word	0x24004f94
 8010a18:	e000ed20 	.word	0xe000ed20
 8010a1c:	24000010 	.word	0x24000010
 8010a20:	e000ef34 	.word	0xe000ef34

08010a24 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8010a24:	b480      	push	{r7}
 8010a26:	b083      	sub	sp, #12
 8010a28:	af00      	add	r7, sp, #0
	__asm volatile
 8010a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a2e:	f383 8811 	msr	BASEPRI, r3
 8010a32:	f3bf 8f6f 	isb	sy
 8010a36:	f3bf 8f4f 	dsb	sy
 8010a3a:	607b      	str	r3, [r7, #4]
}
 8010a3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8010a3e:	4b0f      	ldr	r3, [pc, #60]	; (8010a7c <vPortEnterCritical+0x58>)
 8010a40:	681b      	ldr	r3, [r3, #0]
 8010a42:	3301      	adds	r3, #1
 8010a44:	4a0d      	ldr	r2, [pc, #52]	; (8010a7c <vPortEnterCritical+0x58>)
 8010a46:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8010a48:	4b0c      	ldr	r3, [pc, #48]	; (8010a7c <vPortEnterCritical+0x58>)
 8010a4a:	681b      	ldr	r3, [r3, #0]
 8010a4c:	2b01      	cmp	r3, #1
 8010a4e:	d10f      	bne.n	8010a70 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8010a50:	4b0b      	ldr	r3, [pc, #44]	; (8010a80 <vPortEnterCritical+0x5c>)
 8010a52:	681b      	ldr	r3, [r3, #0]
 8010a54:	b2db      	uxtb	r3, r3
 8010a56:	2b00      	cmp	r3, #0
 8010a58:	d00a      	beq.n	8010a70 <vPortEnterCritical+0x4c>
	__asm volatile
 8010a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a5e:	f383 8811 	msr	BASEPRI, r3
 8010a62:	f3bf 8f6f 	isb	sy
 8010a66:	f3bf 8f4f 	dsb	sy
 8010a6a:	603b      	str	r3, [r7, #0]
}
 8010a6c:	bf00      	nop
 8010a6e:	e7fe      	b.n	8010a6e <vPortEnterCritical+0x4a>
	}
}
 8010a70:	bf00      	nop
 8010a72:	370c      	adds	r7, #12
 8010a74:	46bd      	mov	sp, r7
 8010a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a7a:	4770      	bx	lr
 8010a7c:	24000010 	.word	0x24000010
 8010a80:	e000ed04 	.word	0xe000ed04

08010a84 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8010a84:	b480      	push	{r7}
 8010a86:	b083      	sub	sp, #12
 8010a88:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8010a8a:	4b12      	ldr	r3, [pc, #72]	; (8010ad4 <vPortExitCritical+0x50>)
 8010a8c:	681b      	ldr	r3, [r3, #0]
 8010a8e:	2b00      	cmp	r3, #0
 8010a90:	d10a      	bne.n	8010aa8 <vPortExitCritical+0x24>
	__asm volatile
 8010a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a96:	f383 8811 	msr	BASEPRI, r3
 8010a9a:	f3bf 8f6f 	isb	sy
 8010a9e:	f3bf 8f4f 	dsb	sy
 8010aa2:	607b      	str	r3, [r7, #4]
}
 8010aa4:	bf00      	nop
 8010aa6:	e7fe      	b.n	8010aa6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8010aa8:	4b0a      	ldr	r3, [pc, #40]	; (8010ad4 <vPortExitCritical+0x50>)
 8010aaa:	681b      	ldr	r3, [r3, #0]
 8010aac:	3b01      	subs	r3, #1
 8010aae:	4a09      	ldr	r2, [pc, #36]	; (8010ad4 <vPortExitCritical+0x50>)
 8010ab0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8010ab2:	4b08      	ldr	r3, [pc, #32]	; (8010ad4 <vPortExitCritical+0x50>)
 8010ab4:	681b      	ldr	r3, [r3, #0]
 8010ab6:	2b00      	cmp	r3, #0
 8010ab8:	d105      	bne.n	8010ac6 <vPortExitCritical+0x42>
 8010aba:	2300      	movs	r3, #0
 8010abc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8010abe:	683b      	ldr	r3, [r7, #0]
 8010ac0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8010ac4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8010ac6:	bf00      	nop
 8010ac8:	370c      	adds	r7, #12
 8010aca:	46bd      	mov	sp, r7
 8010acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ad0:	4770      	bx	lr
 8010ad2:	bf00      	nop
 8010ad4:	24000010 	.word	0x24000010
	...

08010ae0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010ae0:	f3ef 8009 	mrs	r0, PSP
 8010ae4:	f3bf 8f6f 	isb	sy
 8010ae8:	4b15      	ldr	r3, [pc, #84]	; (8010b40 <pxCurrentTCBConst>)
 8010aea:	681a      	ldr	r2, [r3, #0]
 8010aec:	f01e 0f10 	tst.w	lr, #16
 8010af0:	bf08      	it	eq
 8010af2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010af6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010afa:	6010      	str	r0, [r2, #0]
 8010afc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010b00:	f04f 0050 	mov.w	r0, #80	; 0x50
 8010b04:	f380 8811 	msr	BASEPRI, r0
 8010b08:	f3bf 8f4f 	dsb	sy
 8010b0c:	f3bf 8f6f 	isb	sy
 8010b10:	f001 fc8a 	bl	8012428 <vTaskSwitchContext>
 8010b14:	f04f 0000 	mov.w	r0, #0
 8010b18:	f380 8811 	msr	BASEPRI, r0
 8010b1c:	bc09      	pop	{r0, r3}
 8010b1e:	6819      	ldr	r1, [r3, #0]
 8010b20:	6808      	ldr	r0, [r1, #0]
 8010b22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b26:	f01e 0f10 	tst.w	lr, #16
 8010b2a:	bf08      	it	eq
 8010b2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010b30:	f380 8809 	msr	PSP, r0
 8010b34:	f3bf 8f6f 	isb	sy
 8010b38:	4770      	bx	lr
 8010b3a:	bf00      	nop
 8010b3c:	f3af 8000 	nop.w

08010b40 <pxCurrentTCBConst>:
 8010b40:	24004fd8 	.word	0x24004fd8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010b44:	bf00      	nop
 8010b46:	bf00      	nop

08010b48 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010b48:	b580      	push	{r7, lr}
 8010b4a:	b082      	sub	sp, #8
 8010b4c:	af00      	add	r7, sp, #0
	__asm volatile
 8010b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b52:	f383 8811 	msr	BASEPRI, r3
 8010b56:	f3bf 8f6f 	isb	sy
 8010b5a:	f3bf 8f4f 	dsb	sy
 8010b5e:	607b      	str	r3, [r7, #4]
}
 8010b60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010b62:	f001 fba7 	bl	80122b4 <xTaskIncrementTick>
 8010b66:	4603      	mov	r3, r0
 8010b68:	2b00      	cmp	r3, #0
 8010b6a:	d003      	beq.n	8010b74 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8010b6c:	4b06      	ldr	r3, [pc, #24]	; (8010b88 <xPortSysTickHandler+0x40>)
 8010b6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010b72:	601a      	str	r2, [r3, #0]
 8010b74:	2300      	movs	r3, #0
 8010b76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010b78:	683b      	ldr	r3, [r7, #0]
 8010b7a:	f383 8811 	msr	BASEPRI, r3
}
 8010b7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8010b80:	bf00      	nop
 8010b82:	3708      	adds	r7, #8
 8010b84:	46bd      	mov	sp, r7
 8010b86:	bd80      	pop	{r7, pc}
 8010b88:	e000ed04 	.word	0xe000ed04

08010b8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8010b8c:	b480      	push	{r7}
 8010b8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8010b90:	4b0b      	ldr	r3, [pc, #44]	; (8010bc0 <vPortSetupTimerInterrupt+0x34>)
 8010b92:	2200      	movs	r2, #0
 8010b94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8010b96:	4b0b      	ldr	r3, [pc, #44]	; (8010bc4 <vPortSetupTimerInterrupt+0x38>)
 8010b98:	2200      	movs	r2, #0
 8010b9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8010b9c:	4b0a      	ldr	r3, [pc, #40]	; (8010bc8 <vPortSetupTimerInterrupt+0x3c>)
 8010b9e:	681b      	ldr	r3, [r3, #0]
 8010ba0:	4a0a      	ldr	r2, [pc, #40]	; (8010bcc <vPortSetupTimerInterrupt+0x40>)
 8010ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8010ba6:	099b      	lsrs	r3, r3, #6
 8010ba8:	4a09      	ldr	r2, [pc, #36]	; (8010bd0 <vPortSetupTimerInterrupt+0x44>)
 8010baa:	3b01      	subs	r3, #1
 8010bac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8010bae:	4b04      	ldr	r3, [pc, #16]	; (8010bc0 <vPortSetupTimerInterrupt+0x34>)
 8010bb0:	2207      	movs	r2, #7
 8010bb2:	601a      	str	r2, [r3, #0]
}
 8010bb4:	bf00      	nop
 8010bb6:	46bd      	mov	sp, r7
 8010bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bbc:	4770      	bx	lr
 8010bbe:	bf00      	nop
 8010bc0:	e000e010 	.word	0xe000e010
 8010bc4:	e000e018 	.word	0xe000e018
 8010bc8:	24000000 	.word	0x24000000
 8010bcc:	10624dd3 	.word	0x10624dd3
 8010bd0:	e000e014 	.word	0xe000e014

08010bd4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8010bd4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8010be4 <vPortEnableVFP+0x10>
 8010bd8:	6801      	ldr	r1, [r0, #0]
 8010bda:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8010bde:	6001      	str	r1, [r0, #0]
 8010be0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8010be2:	bf00      	nop
 8010be4:	e000ed88 	.word	0xe000ed88

08010be8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8010be8:	b480      	push	{r7}
 8010bea:	b085      	sub	sp, #20
 8010bec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8010bee:	f3ef 8305 	mrs	r3, IPSR
 8010bf2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010bf4:	68fb      	ldr	r3, [r7, #12]
 8010bf6:	2b0f      	cmp	r3, #15
 8010bf8:	d914      	bls.n	8010c24 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8010bfa:	4a17      	ldr	r2, [pc, #92]	; (8010c58 <vPortValidateInterruptPriority+0x70>)
 8010bfc:	68fb      	ldr	r3, [r7, #12]
 8010bfe:	4413      	add	r3, r2
 8010c00:	781b      	ldrb	r3, [r3, #0]
 8010c02:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010c04:	4b15      	ldr	r3, [pc, #84]	; (8010c5c <vPortValidateInterruptPriority+0x74>)
 8010c06:	781b      	ldrb	r3, [r3, #0]
 8010c08:	7afa      	ldrb	r2, [r7, #11]
 8010c0a:	429a      	cmp	r2, r3
 8010c0c:	d20a      	bcs.n	8010c24 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8010c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c12:	f383 8811 	msr	BASEPRI, r3
 8010c16:	f3bf 8f6f 	isb	sy
 8010c1a:	f3bf 8f4f 	dsb	sy
 8010c1e:	607b      	str	r3, [r7, #4]
}
 8010c20:	bf00      	nop
 8010c22:	e7fe      	b.n	8010c22 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8010c24:	4b0e      	ldr	r3, [pc, #56]	; (8010c60 <vPortValidateInterruptPriority+0x78>)
 8010c26:	681b      	ldr	r3, [r3, #0]
 8010c28:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8010c2c:	4b0d      	ldr	r3, [pc, #52]	; (8010c64 <vPortValidateInterruptPriority+0x7c>)
 8010c2e:	681b      	ldr	r3, [r3, #0]
 8010c30:	429a      	cmp	r2, r3
 8010c32:	d90a      	bls.n	8010c4a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8010c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c38:	f383 8811 	msr	BASEPRI, r3
 8010c3c:	f3bf 8f6f 	isb	sy
 8010c40:	f3bf 8f4f 	dsb	sy
 8010c44:	603b      	str	r3, [r7, #0]
}
 8010c46:	bf00      	nop
 8010c48:	e7fe      	b.n	8010c48 <vPortValidateInterruptPriority+0x60>
	}
 8010c4a:	bf00      	nop
 8010c4c:	3714      	adds	r7, #20
 8010c4e:	46bd      	mov	sp, r7
 8010c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c54:	4770      	bx	lr
 8010c56:	bf00      	nop
 8010c58:	e000e3f0 	.word	0xe000e3f0
 8010c5c:	24004f90 	.word	0x24004f90
 8010c60:	e000ed0c 	.word	0xe000ed0c
 8010c64:	24004f94 	.word	0x24004f94

08010c68 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8010c68:	b580      	push	{r7, lr}
 8010c6a:	b084      	sub	sp, #16
 8010c6c:	af00      	add	r7, sp, #0
 8010c6e:	6078      	str	r0, [r7, #4]
 8010c70:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8010c76:	68fb      	ldr	r3, [r7, #12]
 8010c78:	2b00      	cmp	r3, #0
 8010c7a:	d10a      	bne.n	8010c92 <xQueueGenericReset+0x2a>
	__asm volatile
 8010c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c80:	f383 8811 	msr	BASEPRI, r3
 8010c84:	f3bf 8f6f 	isb	sy
 8010c88:	f3bf 8f4f 	dsb	sy
 8010c8c:	60bb      	str	r3, [r7, #8]
}
 8010c8e:	bf00      	nop
 8010c90:	e7fe      	b.n	8010c90 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8010c92:	f7ff fec7 	bl	8010a24 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010c96:	68fb      	ldr	r3, [r7, #12]
 8010c98:	681a      	ldr	r2, [r3, #0]
 8010c9a:	68fb      	ldr	r3, [r7, #12]
 8010c9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010c9e:	68f9      	ldr	r1, [r7, #12]
 8010ca0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8010ca2:	fb01 f303 	mul.w	r3, r1, r3
 8010ca6:	441a      	add	r2, r3
 8010ca8:	68fb      	ldr	r3, [r7, #12]
 8010caa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8010cac:	68fb      	ldr	r3, [r7, #12]
 8010cae:	2200      	movs	r2, #0
 8010cb0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8010cb2:	68fb      	ldr	r3, [r7, #12]
 8010cb4:	681a      	ldr	r2, [r3, #0]
 8010cb6:	68fb      	ldr	r3, [r7, #12]
 8010cb8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010cba:	68fb      	ldr	r3, [r7, #12]
 8010cbc:	681a      	ldr	r2, [r3, #0]
 8010cbe:	68fb      	ldr	r3, [r7, #12]
 8010cc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010cc2:	3b01      	subs	r3, #1
 8010cc4:	68f9      	ldr	r1, [r7, #12]
 8010cc6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8010cc8:	fb01 f303 	mul.w	r3, r1, r3
 8010ccc:	441a      	add	r2, r3
 8010cce:	68fb      	ldr	r3, [r7, #12]
 8010cd0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8010cd2:	68fb      	ldr	r3, [r7, #12]
 8010cd4:	22ff      	movs	r2, #255	; 0xff
 8010cd6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8010cda:	68fb      	ldr	r3, [r7, #12]
 8010cdc:	22ff      	movs	r2, #255	; 0xff
 8010cde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8010ce2:	683b      	ldr	r3, [r7, #0]
 8010ce4:	2b00      	cmp	r3, #0
 8010ce6:	d114      	bne.n	8010d12 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010ce8:	68fb      	ldr	r3, [r7, #12]
 8010cea:	691b      	ldr	r3, [r3, #16]
 8010cec:	2b00      	cmp	r3, #0
 8010cee:	d01a      	beq.n	8010d26 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010cf0:	68fb      	ldr	r3, [r7, #12]
 8010cf2:	3310      	adds	r3, #16
 8010cf4:	4618      	mov	r0, r3
 8010cf6:	f001 fc4b 	bl	8012590 <xTaskRemoveFromEventList>
 8010cfa:	4603      	mov	r3, r0
 8010cfc:	2b00      	cmp	r3, #0
 8010cfe:	d012      	beq.n	8010d26 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8010d00:	4b0c      	ldr	r3, [pc, #48]	; (8010d34 <xQueueGenericReset+0xcc>)
 8010d02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010d06:	601a      	str	r2, [r3, #0]
 8010d08:	f3bf 8f4f 	dsb	sy
 8010d0c:	f3bf 8f6f 	isb	sy
 8010d10:	e009      	b.n	8010d26 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8010d12:	68fb      	ldr	r3, [r7, #12]
 8010d14:	3310      	adds	r3, #16
 8010d16:	4618      	mov	r0, r3
 8010d18:	f7ff fca0 	bl	801065c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8010d1c:	68fb      	ldr	r3, [r7, #12]
 8010d1e:	3324      	adds	r3, #36	; 0x24
 8010d20:	4618      	mov	r0, r3
 8010d22:	f7ff fc9b 	bl	801065c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8010d26:	f7ff fead 	bl	8010a84 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8010d2a:	2301      	movs	r3, #1
}
 8010d2c:	4618      	mov	r0, r3
 8010d2e:	3710      	adds	r7, #16
 8010d30:	46bd      	mov	sp, r7
 8010d32:	bd80      	pop	{r7, pc}
 8010d34:	e000ed04 	.word	0xe000ed04

08010d38 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8010d38:	b580      	push	{r7, lr}
 8010d3a:	b08e      	sub	sp, #56	; 0x38
 8010d3c:	af02      	add	r7, sp, #8
 8010d3e:	60f8      	str	r0, [r7, #12]
 8010d40:	60b9      	str	r1, [r7, #8]
 8010d42:	607a      	str	r2, [r7, #4]
 8010d44:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8010d46:	68fb      	ldr	r3, [r7, #12]
 8010d48:	2b00      	cmp	r3, #0
 8010d4a:	d10a      	bne.n	8010d62 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8010d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d50:	f383 8811 	msr	BASEPRI, r3
 8010d54:	f3bf 8f6f 	isb	sy
 8010d58:	f3bf 8f4f 	dsb	sy
 8010d5c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8010d5e:	bf00      	nop
 8010d60:	e7fe      	b.n	8010d60 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8010d62:	683b      	ldr	r3, [r7, #0]
 8010d64:	2b00      	cmp	r3, #0
 8010d66:	d10a      	bne.n	8010d7e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8010d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d6c:	f383 8811 	msr	BASEPRI, r3
 8010d70:	f3bf 8f6f 	isb	sy
 8010d74:	f3bf 8f4f 	dsb	sy
 8010d78:	627b      	str	r3, [r7, #36]	; 0x24
}
 8010d7a:	bf00      	nop
 8010d7c:	e7fe      	b.n	8010d7c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	2b00      	cmp	r3, #0
 8010d82:	d002      	beq.n	8010d8a <xQueueGenericCreateStatic+0x52>
 8010d84:	68bb      	ldr	r3, [r7, #8]
 8010d86:	2b00      	cmp	r3, #0
 8010d88:	d001      	beq.n	8010d8e <xQueueGenericCreateStatic+0x56>
 8010d8a:	2301      	movs	r3, #1
 8010d8c:	e000      	b.n	8010d90 <xQueueGenericCreateStatic+0x58>
 8010d8e:	2300      	movs	r3, #0
 8010d90:	2b00      	cmp	r3, #0
 8010d92:	d10a      	bne.n	8010daa <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8010d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d98:	f383 8811 	msr	BASEPRI, r3
 8010d9c:	f3bf 8f6f 	isb	sy
 8010da0:	f3bf 8f4f 	dsb	sy
 8010da4:	623b      	str	r3, [r7, #32]
}
 8010da6:	bf00      	nop
 8010da8:	e7fe      	b.n	8010da8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	2b00      	cmp	r3, #0
 8010dae:	d102      	bne.n	8010db6 <xQueueGenericCreateStatic+0x7e>
 8010db0:	68bb      	ldr	r3, [r7, #8]
 8010db2:	2b00      	cmp	r3, #0
 8010db4:	d101      	bne.n	8010dba <xQueueGenericCreateStatic+0x82>
 8010db6:	2301      	movs	r3, #1
 8010db8:	e000      	b.n	8010dbc <xQueueGenericCreateStatic+0x84>
 8010dba:	2300      	movs	r3, #0
 8010dbc:	2b00      	cmp	r3, #0
 8010dbe:	d10a      	bne.n	8010dd6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8010dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010dc4:	f383 8811 	msr	BASEPRI, r3
 8010dc8:	f3bf 8f6f 	isb	sy
 8010dcc:	f3bf 8f4f 	dsb	sy
 8010dd0:	61fb      	str	r3, [r7, #28]
}
 8010dd2:	bf00      	nop
 8010dd4:	e7fe      	b.n	8010dd4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8010dd6:	2350      	movs	r3, #80	; 0x50
 8010dd8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8010dda:	697b      	ldr	r3, [r7, #20]
 8010ddc:	2b50      	cmp	r3, #80	; 0x50
 8010dde:	d00a      	beq.n	8010df6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8010de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010de4:	f383 8811 	msr	BASEPRI, r3
 8010de8:	f3bf 8f6f 	isb	sy
 8010dec:	f3bf 8f4f 	dsb	sy
 8010df0:	61bb      	str	r3, [r7, #24]
}
 8010df2:	bf00      	nop
 8010df4:	e7fe      	b.n	8010df4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8010df6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8010df8:	683b      	ldr	r3, [r7, #0]
 8010dfa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8010dfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010dfe:	2b00      	cmp	r3, #0
 8010e00:	d00d      	beq.n	8010e1e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8010e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e04:	2201      	movs	r2, #1
 8010e06:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010e0a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8010e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e10:	9300      	str	r3, [sp, #0]
 8010e12:	4613      	mov	r3, r2
 8010e14:	687a      	ldr	r2, [r7, #4]
 8010e16:	68b9      	ldr	r1, [r7, #8]
 8010e18:	68f8      	ldr	r0, [r7, #12]
 8010e1a:	f000 f83f 	bl	8010e9c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8010e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8010e20:	4618      	mov	r0, r3
 8010e22:	3730      	adds	r7, #48	; 0x30
 8010e24:	46bd      	mov	sp, r7
 8010e26:	bd80      	pop	{r7, pc}

08010e28 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8010e28:	b580      	push	{r7, lr}
 8010e2a:	b08a      	sub	sp, #40	; 0x28
 8010e2c:	af02      	add	r7, sp, #8
 8010e2e:	60f8      	str	r0, [r7, #12]
 8010e30:	60b9      	str	r1, [r7, #8]
 8010e32:	4613      	mov	r3, r2
 8010e34:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8010e36:	68fb      	ldr	r3, [r7, #12]
 8010e38:	2b00      	cmp	r3, #0
 8010e3a:	d10a      	bne.n	8010e52 <xQueueGenericCreate+0x2a>
	__asm volatile
 8010e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e40:	f383 8811 	msr	BASEPRI, r3
 8010e44:	f3bf 8f6f 	isb	sy
 8010e48:	f3bf 8f4f 	dsb	sy
 8010e4c:	613b      	str	r3, [r7, #16]
}
 8010e4e:	bf00      	nop
 8010e50:	e7fe      	b.n	8010e50 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010e52:	68fb      	ldr	r3, [r7, #12]
 8010e54:	68ba      	ldr	r2, [r7, #8]
 8010e56:	fb02 f303 	mul.w	r3, r2, r3
 8010e5a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8010e5c:	69fb      	ldr	r3, [r7, #28]
 8010e5e:	3350      	adds	r3, #80	; 0x50
 8010e60:	4618      	mov	r0, r3
 8010e62:	f7ff fa11 	bl	8010288 <pvPortMalloc>
 8010e66:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8010e68:	69bb      	ldr	r3, [r7, #24]
 8010e6a:	2b00      	cmp	r3, #0
 8010e6c:	d011      	beq.n	8010e92 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8010e6e:	69bb      	ldr	r3, [r7, #24]
 8010e70:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010e72:	697b      	ldr	r3, [r7, #20]
 8010e74:	3350      	adds	r3, #80	; 0x50
 8010e76:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8010e78:	69bb      	ldr	r3, [r7, #24]
 8010e7a:	2200      	movs	r2, #0
 8010e7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010e80:	79fa      	ldrb	r2, [r7, #7]
 8010e82:	69bb      	ldr	r3, [r7, #24]
 8010e84:	9300      	str	r3, [sp, #0]
 8010e86:	4613      	mov	r3, r2
 8010e88:	697a      	ldr	r2, [r7, #20]
 8010e8a:	68b9      	ldr	r1, [r7, #8]
 8010e8c:	68f8      	ldr	r0, [r7, #12]
 8010e8e:	f000 f805 	bl	8010e9c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8010e92:	69bb      	ldr	r3, [r7, #24]
	}
 8010e94:	4618      	mov	r0, r3
 8010e96:	3720      	adds	r7, #32
 8010e98:	46bd      	mov	sp, r7
 8010e9a:	bd80      	pop	{r7, pc}

08010e9c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8010e9c:	b580      	push	{r7, lr}
 8010e9e:	b084      	sub	sp, #16
 8010ea0:	af00      	add	r7, sp, #0
 8010ea2:	60f8      	str	r0, [r7, #12]
 8010ea4:	60b9      	str	r1, [r7, #8]
 8010ea6:	607a      	str	r2, [r7, #4]
 8010ea8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8010eaa:	68bb      	ldr	r3, [r7, #8]
 8010eac:	2b00      	cmp	r3, #0
 8010eae:	d103      	bne.n	8010eb8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8010eb0:	69bb      	ldr	r3, [r7, #24]
 8010eb2:	69ba      	ldr	r2, [r7, #24]
 8010eb4:	601a      	str	r2, [r3, #0]
 8010eb6:	e002      	b.n	8010ebe <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8010eb8:	69bb      	ldr	r3, [r7, #24]
 8010eba:	687a      	ldr	r2, [r7, #4]
 8010ebc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8010ebe:	69bb      	ldr	r3, [r7, #24]
 8010ec0:	68fa      	ldr	r2, [r7, #12]
 8010ec2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8010ec4:	69bb      	ldr	r3, [r7, #24]
 8010ec6:	68ba      	ldr	r2, [r7, #8]
 8010ec8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8010eca:	2101      	movs	r1, #1
 8010ecc:	69b8      	ldr	r0, [r7, #24]
 8010ece:	f7ff fecb 	bl	8010c68 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8010ed2:	69bb      	ldr	r3, [r7, #24]
 8010ed4:	78fa      	ldrb	r2, [r7, #3]
 8010ed6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8010eda:	bf00      	nop
 8010edc:	3710      	adds	r7, #16
 8010ede:	46bd      	mov	sp, r7
 8010ee0:	bd80      	pop	{r7, pc}

08010ee2 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8010ee2:	b580      	push	{r7, lr}
 8010ee4:	b08a      	sub	sp, #40	; 0x28
 8010ee6:	af02      	add	r7, sp, #8
 8010ee8:	60f8      	str	r0, [r7, #12]
 8010eea:	60b9      	str	r1, [r7, #8]
 8010eec:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8010eee:	68fb      	ldr	r3, [r7, #12]
 8010ef0:	2b00      	cmp	r3, #0
 8010ef2:	d10a      	bne.n	8010f0a <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8010ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ef8:	f383 8811 	msr	BASEPRI, r3
 8010efc:	f3bf 8f6f 	isb	sy
 8010f00:	f3bf 8f4f 	dsb	sy
 8010f04:	61bb      	str	r3, [r7, #24]
}
 8010f06:	bf00      	nop
 8010f08:	e7fe      	b.n	8010f08 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8010f0a:	68ba      	ldr	r2, [r7, #8]
 8010f0c:	68fb      	ldr	r3, [r7, #12]
 8010f0e:	429a      	cmp	r2, r3
 8010f10:	d90a      	bls.n	8010f28 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8010f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f16:	f383 8811 	msr	BASEPRI, r3
 8010f1a:	f3bf 8f6f 	isb	sy
 8010f1e:	f3bf 8f4f 	dsb	sy
 8010f22:	617b      	str	r3, [r7, #20]
}
 8010f24:	bf00      	nop
 8010f26:	e7fe      	b.n	8010f26 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8010f28:	2302      	movs	r3, #2
 8010f2a:	9300      	str	r3, [sp, #0]
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	2200      	movs	r2, #0
 8010f30:	2100      	movs	r1, #0
 8010f32:	68f8      	ldr	r0, [r7, #12]
 8010f34:	f7ff ff00 	bl	8010d38 <xQueueGenericCreateStatic>
 8010f38:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8010f3a:	69fb      	ldr	r3, [r7, #28]
 8010f3c:	2b00      	cmp	r3, #0
 8010f3e:	d002      	beq.n	8010f46 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8010f40:	69fb      	ldr	r3, [r7, #28]
 8010f42:	68ba      	ldr	r2, [r7, #8]
 8010f44:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8010f46:	69fb      	ldr	r3, [r7, #28]
	}
 8010f48:	4618      	mov	r0, r3
 8010f4a:	3720      	adds	r7, #32
 8010f4c:	46bd      	mov	sp, r7
 8010f4e:	bd80      	pop	{r7, pc}

08010f50 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8010f50:	b580      	push	{r7, lr}
 8010f52:	b086      	sub	sp, #24
 8010f54:	af00      	add	r7, sp, #0
 8010f56:	6078      	str	r0, [r7, #4]
 8010f58:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	2b00      	cmp	r3, #0
 8010f5e:	d10a      	bne.n	8010f76 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8010f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f64:	f383 8811 	msr	BASEPRI, r3
 8010f68:	f3bf 8f6f 	isb	sy
 8010f6c:	f3bf 8f4f 	dsb	sy
 8010f70:	613b      	str	r3, [r7, #16]
}
 8010f72:	bf00      	nop
 8010f74:	e7fe      	b.n	8010f74 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8010f76:	683a      	ldr	r2, [r7, #0]
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	429a      	cmp	r2, r3
 8010f7c:	d90a      	bls.n	8010f94 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8010f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f82:	f383 8811 	msr	BASEPRI, r3
 8010f86:	f3bf 8f6f 	isb	sy
 8010f8a:	f3bf 8f4f 	dsb	sy
 8010f8e:	60fb      	str	r3, [r7, #12]
}
 8010f90:	bf00      	nop
 8010f92:	e7fe      	b.n	8010f92 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8010f94:	2202      	movs	r2, #2
 8010f96:	2100      	movs	r1, #0
 8010f98:	6878      	ldr	r0, [r7, #4]
 8010f9a:	f7ff ff45 	bl	8010e28 <xQueueGenericCreate>
 8010f9e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8010fa0:	697b      	ldr	r3, [r7, #20]
 8010fa2:	2b00      	cmp	r3, #0
 8010fa4:	d002      	beq.n	8010fac <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8010fa6:	697b      	ldr	r3, [r7, #20]
 8010fa8:	683a      	ldr	r2, [r7, #0]
 8010faa:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8010fac:	697b      	ldr	r3, [r7, #20]
	}
 8010fae:	4618      	mov	r0, r3
 8010fb0:	3718      	adds	r7, #24
 8010fb2:	46bd      	mov	sp, r7
 8010fb4:	bd80      	pop	{r7, pc}
	...

08010fb8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8010fb8:	b580      	push	{r7, lr}
 8010fba:	b08e      	sub	sp, #56	; 0x38
 8010fbc:	af00      	add	r7, sp, #0
 8010fbe:	60f8      	str	r0, [r7, #12]
 8010fc0:	60b9      	str	r1, [r7, #8]
 8010fc2:	607a      	str	r2, [r7, #4]
 8010fc4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8010fc6:	2300      	movs	r3, #0
 8010fc8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010fca:	68fb      	ldr	r3, [r7, #12]
 8010fcc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8010fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fd0:	2b00      	cmp	r3, #0
 8010fd2:	d10a      	bne.n	8010fea <xQueueGenericSend+0x32>
	__asm volatile
 8010fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fd8:	f383 8811 	msr	BASEPRI, r3
 8010fdc:	f3bf 8f6f 	isb	sy
 8010fe0:	f3bf 8f4f 	dsb	sy
 8010fe4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8010fe6:	bf00      	nop
 8010fe8:	e7fe      	b.n	8010fe8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010fea:	68bb      	ldr	r3, [r7, #8]
 8010fec:	2b00      	cmp	r3, #0
 8010fee:	d103      	bne.n	8010ff8 <xQueueGenericSend+0x40>
 8010ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010ff4:	2b00      	cmp	r3, #0
 8010ff6:	d101      	bne.n	8010ffc <xQueueGenericSend+0x44>
 8010ff8:	2301      	movs	r3, #1
 8010ffa:	e000      	b.n	8010ffe <xQueueGenericSend+0x46>
 8010ffc:	2300      	movs	r3, #0
 8010ffe:	2b00      	cmp	r3, #0
 8011000:	d10a      	bne.n	8011018 <xQueueGenericSend+0x60>
	__asm volatile
 8011002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011006:	f383 8811 	msr	BASEPRI, r3
 801100a:	f3bf 8f6f 	isb	sy
 801100e:	f3bf 8f4f 	dsb	sy
 8011012:	627b      	str	r3, [r7, #36]	; 0x24
}
 8011014:	bf00      	nop
 8011016:	e7fe      	b.n	8011016 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011018:	683b      	ldr	r3, [r7, #0]
 801101a:	2b02      	cmp	r3, #2
 801101c:	d103      	bne.n	8011026 <xQueueGenericSend+0x6e>
 801101e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011020:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011022:	2b01      	cmp	r3, #1
 8011024:	d101      	bne.n	801102a <xQueueGenericSend+0x72>
 8011026:	2301      	movs	r3, #1
 8011028:	e000      	b.n	801102c <xQueueGenericSend+0x74>
 801102a:	2300      	movs	r3, #0
 801102c:	2b00      	cmp	r3, #0
 801102e:	d10a      	bne.n	8011046 <xQueueGenericSend+0x8e>
	__asm volatile
 8011030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011034:	f383 8811 	msr	BASEPRI, r3
 8011038:	f3bf 8f6f 	isb	sy
 801103c:	f3bf 8f4f 	dsb	sy
 8011040:	623b      	str	r3, [r7, #32]
}
 8011042:	bf00      	nop
 8011044:	e7fe      	b.n	8011044 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011046:	f001 fc65 	bl	8012914 <xTaskGetSchedulerState>
 801104a:	4603      	mov	r3, r0
 801104c:	2b00      	cmp	r3, #0
 801104e:	d102      	bne.n	8011056 <xQueueGenericSend+0x9e>
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	2b00      	cmp	r3, #0
 8011054:	d101      	bne.n	801105a <xQueueGenericSend+0xa2>
 8011056:	2301      	movs	r3, #1
 8011058:	e000      	b.n	801105c <xQueueGenericSend+0xa4>
 801105a:	2300      	movs	r3, #0
 801105c:	2b00      	cmp	r3, #0
 801105e:	d10a      	bne.n	8011076 <xQueueGenericSend+0xbe>
	__asm volatile
 8011060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011064:	f383 8811 	msr	BASEPRI, r3
 8011068:	f3bf 8f6f 	isb	sy
 801106c:	f3bf 8f4f 	dsb	sy
 8011070:	61fb      	str	r3, [r7, #28]
}
 8011072:	bf00      	nop
 8011074:	e7fe      	b.n	8011074 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8011076:	f7ff fcd5 	bl	8010a24 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801107a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801107c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801107e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011080:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011082:	429a      	cmp	r2, r3
 8011084:	d302      	bcc.n	801108c <xQueueGenericSend+0xd4>
 8011086:	683b      	ldr	r3, [r7, #0]
 8011088:	2b02      	cmp	r3, #2
 801108a:	d129      	bne.n	80110e0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801108c:	683a      	ldr	r2, [r7, #0]
 801108e:	68b9      	ldr	r1, [r7, #8]
 8011090:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011092:	f000 fc5e 	bl	8011952 <prvCopyDataToQueue>
 8011096:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801109a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801109c:	2b00      	cmp	r3, #0
 801109e:	d010      	beq.n	80110c2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80110a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110a2:	3324      	adds	r3, #36	; 0x24
 80110a4:	4618      	mov	r0, r3
 80110a6:	f001 fa73 	bl	8012590 <xTaskRemoveFromEventList>
 80110aa:	4603      	mov	r3, r0
 80110ac:	2b00      	cmp	r3, #0
 80110ae:	d013      	beq.n	80110d8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80110b0:	4b3f      	ldr	r3, [pc, #252]	; (80111b0 <xQueueGenericSend+0x1f8>)
 80110b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80110b6:	601a      	str	r2, [r3, #0]
 80110b8:	f3bf 8f4f 	dsb	sy
 80110bc:	f3bf 8f6f 	isb	sy
 80110c0:	e00a      	b.n	80110d8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80110c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110c4:	2b00      	cmp	r3, #0
 80110c6:	d007      	beq.n	80110d8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80110c8:	4b39      	ldr	r3, [pc, #228]	; (80111b0 <xQueueGenericSend+0x1f8>)
 80110ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80110ce:	601a      	str	r2, [r3, #0]
 80110d0:	f3bf 8f4f 	dsb	sy
 80110d4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80110d8:	f7ff fcd4 	bl	8010a84 <vPortExitCritical>
				return pdPASS;
 80110dc:	2301      	movs	r3, #1
 80110de:	e063      	b.n	80111a8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80110e0:	687b      	ldr	r3, [r7, #4]
 80110e2:	2b00      	cmp	r3, #0
 80110e4:	d103      	bne.n	80110ee <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80110e6:	f7ff fccd 	bl	8010a84 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80110ea:	2300      	movs	r3, #0
 80110ec:	e05c      	b.n	80111a8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80110ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80110f0:	2b00      	cmp	r3, #0
 80110f2:	d106      	bne.n	8011102 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80110f4:	f107 0314 	add.w	r3, r7, #20
 80110f8:	4618      	mov	r0, r3
 80110fa:	f001 faad 	bl	8012658 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80110fe:	2301      	movs	r3, #1
 8011100:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011102:	f7ff fcbf 	bl	8010a84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011106:	f001 f819 	bl	801213c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801110a:	f7ff fc8b 	bl	8010a24 <vPortEnterCritical>
 801110e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011110:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011114:	b25b      	sxtb	r3, r3
 8011116:	f1b3 3fff 	cmp.w	r3, #4294967295
 801111a:	d103      	bne.n	8011124 <xQueueGenericSend+0x16c>
 801111c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801111e:	2200      	movs	r2, #0
 8011120:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011126:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801112a:	b25b      	sxtb	r3, r3
 801112c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011130:	d103      	bne.n	801113a <xQueueGenericSend+0x182>
 8011132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011134:	2200      	movs	r2, #0
 8011136:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801113a:	f7ff fca3 	bl	8010a84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801113e:	1d3a      	adds	r2, r7, #4
 8011140:	f107 0314 	add.w	r3, r7, #20
 8011144:	4611      	mov	r1, r2
 8011146:	4618      	mov	r0, r3
 8011148:	f001 fa9c 	bl	8012684 <xTaskCheckForTimeOut>
 801114c:	4603      	mov	r3, r0
 801114e:	2b00      	cmp	r3, #0
 8011150:	d124      	bne.n	801119c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8011152:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011154:	f000 fcf5 	bl	8011b42 <prvIsQueueFull>
 8011158:	4603      	mov	r3, r0
 801115a:	2b00      	cmp	r3, #0
 801115c:	d018      	beq.n	8011190 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801115e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011160:	3310      	adds	r3, #16
 8011162:	687a      	ldr	r2, [r7, #4]
 8011164:	4611      	mov	r1, r2
 8011166:	4618      	mov	r0, r3
 8011168:	f001 f9c2 	bl	80124f0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 801116c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801116e:	f000 fc80 	bl	8011a72 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8011172:	f000 fff1 	bl	8012158 <xTaskResumeAll>
 8011176:	4603      	mov	r3, r0
 8011178:	2b00      	cmp	r3, #0
 801117a:	f47f af7c 	bne.w	8011076 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 801117e:	4b0c      	ldr	r3, [pc, #48]	; (80111b0 <xQueueGenericSend+0x1f8>)
 8011180:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011184:	601a      	str	r2, [r3, #0]
 8011186:	f3bf 8f4f 	dsb	sy
 801118a:	f3bf 8f6f 	isb	sy
 801118e:	e772      	b.n	8011076 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8011190:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011192:	f000 fc6e 	bl	8011a72 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011196:	f000 ffdf 	bl	8012158 <xTaskResumeAll>
 801119a:	e76c      	b.n	8011076 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 801119c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801119e:	f000 fc68 	bl	8011a72 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80111a2:	f000 ffd9 	bl	8012158 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80111a6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80111a8:	4618      	mov	r0, r3
 80111aa:	3738      	adds	r7, #56	; 0x38
 80111ac:	46bd      	mov	sp, r7
 80111ae:	bd80      	pop	{r7, pc}
 80111b0:	e000ed04 	.word	0xe000ed04

080111b4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80111b4:	b580      	push	{r7, lr}
 80111b6:	b090      	sub	sp, #64	; 0x40
 80111b8:	af00      	add	r7, sp, #0
 80111ba:	60f8      	str	r0, [r7, #12]
 80111bc:	60b9      	str	r1, [r7, #8]
 80111be:	607a      	str	r2, [r7, #4]
 80111c0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80111c2:	68fb      	ldr	r3, [r7, #12]
 80111c4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80111c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111c8:	2b00      	cmp	r3, #0
 80111ca:	d10a      	bne.n	80111e2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80111cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111d0:	f383 8811 	msr	BASEPRI, r3
 80111d4:	f3bf 8f6f 	isb	sy
 80111d8:	f3bf 8f4f 	dsb	sy
 80111dc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80111de:	bf00      	nop
 80111e0:	e7fe      	b.n	80111e0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80111e2:	68bb      	ldr	r3, [r7, #8]
 80111e4:	2b00      	cmp	r3, #0
 80111e6:	d103      	bne.n	80111f0 <xQueueGenericSendFromISR+0x3c>
 80111e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80111ec:	2b00      	cmp	r3, #0
 80111ee:	d101      	bne.n	80111f4 <xQueueGenericSendFromISR+0x40>
 80111f0:	2301      	movs	r3, #1
 80111f2:	e000      	b.n	80111f6 <xQueueGenericSendFromISR+0x42>
 80111f4:	2300      	movs	r3, #0
 80111f6:	2b00      	cmp	r3, #0
 80111f8:	d10a      	bne.n	8011210 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80111fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111fe:	f383 8811 	msr	BASEPRI, r3
 8011202:	f3bf 8f6f 	isb	sy
 8011206:	f3bf 8f4f 	dsb	sy
 801120a:	627b      	str	r3, [r7, #36]	; 0x24
}
 801120c:	bf00      	nop
 801120e:	e7fe      	b.n	801120e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011210:	683b      	ldr	r3, [r7, #0]
 8011212:	2b02      	cmp	r3, #2
 8011214:	d103      	bne.n	801121e <xQueueGenericSendFromISR+0x6a>
 8011216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011218:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801121a:	2b01      	cmp	r3, #1
 801121c:	d101      	bne.n	8011222 <xQueueGenericSendFromISR+0x6e>
 801121e:	2301      	movs	r3, #1
 8011220:	e000      	b.n	8011224 <xQueueGenericSendFromISR+0x70>
 8011222:	2300      	movs	r3, #0
 8011224:	2b00      	cmp	r3, #0
 8011226:	d10a      	bne.n	801123e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8011228:	f04f 0350 	mov.w	r3, #80	; 0x50
 801122c:	f383 8811 	msr	BASEPRI, r3
 8011230:	f3bf 8f6f 	isb	sy
 8011234:	f3bf 8f4f 	dsb	sy
 8011238:	623b      	str	r3, [r7, #32]
}
 801123a:	bf00      	nop
 801123c:	e7fe      	b.n	801123c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801123e:	f7ff fcd3 	bl	8010be8 <vPortValidateInterruptPriority>
	__asm volatile
 8011242:	f3ef 8211 	mrs	r2, BASEPRI
 8011246:	f04f 0350 	mov.w	r3, #80	; 0x50
 801124a:	f383 8811 	msr	BASEPRI, r3
 801124e:	f3bf 8f6f 	isb	sy
 8011252:	f3bf 8f4f 	dsb	sy
 8011256:	61fa      	str	r2, [r7, #28]
 8011258:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 801125a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801125c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801125e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011260:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011264:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011266:	429a      	cmp	r2, r3
 8011268:	d302      	bcc.n	8011270 <xQueueGenericSendFromISR+0xbc>
 801126a:	683b      	ldr	r3, [r7, #0]
 801126c:	2b02      	cmp	r3, #2
 801126e:	d12f      	bne.n	80112d0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8011270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011272:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011276:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 801127a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801127c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801127e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8011280:	683a      	ldr	r2, [r7, #0]
 8011282:	68b9      	ldr	r1, [r7, #8]
 8011284:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011286:	f000 fb64 	bl	8011952 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801128a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 801128e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011292:	d112      	bne.n	80112ba <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011298:	2b00      	cmp	r3, #0
 801129a:	d016      	beq.n	80112ca <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801129c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801129e:	3324      	adds	r3, #36	; 0x24
 80112a0:	4618      	mov	r0, r3
 80112a2:	f001 f975 	bl	8012590 <xTaskRemoveFromEventList>
 80112a6:	4603      	mov	r3, r0
 80112a8:	2b00      	cmp	r3, #0
 80112aa:	d00e      	beq.n	80112ca <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80112ac:	687b      	ldr	r3, [r7, #4]
 80112ae:	2b00      	cmp	r3, #0
 80112b0:	d00b      	beq.n	80112ca <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80112b2:	687b      	ldr	r3, [r7, #4]
 80112b4:	2201      	movs	r2, #1
 80112b6:	601a      	str	r2, [r3, #0]
 80112b8:	e007      	b.n	80112ca <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80112ba:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80112be:	3301      	adds	r3, #1
 80112c0:	b2db      	uxtb	r3, r3
 80112c2:	b25a      	sxtb	r2, r3
 80112c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80112ca:	2301      	movs	r3, #1
 80112cc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80112ce:	e001      	b.n	80112d4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80112d0:	2300      	movs	r3, #0
 80112d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80112d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80112d6:	617b      	str	r3, [r7, #20]
	__asm volatile
 80112d8:	697b      	ldr	r3, [r7, #20]
 80112da:	f383 8811 	msr	BASEPRI, r3
}
 80112de:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80112e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80112e2:	4618      	mov	r0, r3
 80112e4:	3740      	adds	r7, #64	; 0x40
 80112e6:	46bd      	mov	sp, r7
 80112e8:	bd80      	pop	{r7, pc}

080112ea <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80112ea:	b580      	push	{r7, lr}
 80112ec:	b08e      	sub	sp, #56	; 0x38
 80112ee:	af00      	add	r7, sp, #0
 80112f0:	6078      	str	r0, [r7, #4]
 80112f2:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80112f4:	687b      	ldr	r3, [r7, #4]
 80112f6:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80112f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112fa:	2b00      	cmp	r3, #0
 80112fc:	d10a      	bne.n	8011314 <xQueueGiveFromISR+0x2a>
	__asm volatile
 80112fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011302:	f383 8811 	msr	BASEPRI, r3
 8011306:	f3bf 8f6f 	isb	sy
 801130a:	f3bf 8f4f 	dsb	sy
 801130e:	623b      	str	r3, [r7, #32]
}
 8011310:	bf00      	nop
 8011312:	e7fe      	b.n	8011312 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8011314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011318:	2b00      	cmp	r3, #0
 801131a:	d00a      	beq.n	8011332 <xQueueGiveFromISR+0x48>
	__asm volatile
 801131c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011320:	f383 8811 	msr	BASEPRI, r3
 8011324:	f3bf 8f6f 	isb	sy
 8011328:	f3bf 8f4f 	dsb	sy
 801132c:	61fb      	str	r3, [r7, #28]
}
 801132e:	bf00      	nop
 8011330:	e7fe      	b.n	8011330 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8011332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011334:	681b      	ldr	r3, [r3, #0]
 8011336:	2b00      	cmp	r3, #0
 8011338:	d103      	bne.n	8011342 <xQueueGiveFromISR+0x58>
 801133a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801133c:	689b      	ldr	r3, [r3, #8]
 801133e:	2b00      	cmp	r3, #0
 8011340:	d101      	bne.n	8011346 <xQueueGiveFromISR+0x5c>
 8011342:	2301      	movs	r3, #1
 8011344:	e000      	b.n	8011348 <xQueueGiveFromISR+0x5e>
 8011346:	2300      	movs	r3, #0
 8011348:	2b00      	cmp	r3, #0
 801134a:	d10a      	bne.n	8011362 <xQueueGiveFromISR+0x78>
	__asm volatile
 801134c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011350:	f383 8811 	msr	BASEPRI, r3
 8011354:	f3bf 8f6f 	isb	sy
 8011358:	f3bf 8f4f 	dsb	sy
 801135c:	61bb      	str	r3, [r7, #24]
}
 801135e:	bf00      	nop
 8011360:	e7fe      	b.n	8011360 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011362:	f7ff fc41 	bl	8010be8 <vPortValidateInterruptPriority>
	__asm volatile
 8011366:	f3ef 8211 	mrs	r2, BASEPRI
 801136a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801136e:	f383 8811 	msr	BASEPRI, r3
 8011372:	f3bf 8f6f 	isb	sy
 8011376:	f3bf 8f4f 	dsb	sy
 801137a:	617a      	str	r2, [r7, #20]
 801137c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 801137e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011380:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011386:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8011388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801138a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801138c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801138e:	429a      	cmp	r2, r3
 8011390:	d22b      	bcs.n	80113ea <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8011392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011394:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011398:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801139c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801139e:	1c5a      	adds	r2, r3, #1
 80113a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113a2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80113a4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80113a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80113ac:	d112      	bne.n	80113d4 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80113ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80113b2:	2b00      	cmp	r3, #0
 80113b4:	d016      	beq.n	80113e4 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80113b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113b8:	3324      	adds	r3, #36	; 0x24
 80113ba:	4618      	mov	r0, r3
 80113bc:	f001 f8e8 	bl	8012590 <xTaskRemoveFromEventList>
 80113c0:	4603      	mov	r3, r0
 80113c2:	2b00      	cmp	r3, #0
 80113c4:	d00e      	beq.n	80113e4 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80113c6:	683b      	ldr	r3, [r7, #0]
 80113c8:	2b00      	cmp	r3, #0
 80113ca:	d00b      	beq.n	80113e4 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80113cc:	683b      	ldr	r3, [r7, #0]
 80113ce:	2201      	movs	r2, #1
 80113d0:	601a      	str	r2, [r3, #0]
 80113d2:	e007      	b.n	80113e4 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80113d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80113d8:	3301      	adds	r3, #1
 80113da:	b2db      	uxtb	r3, r3
 80113dc:	b25a      	sxtb	r2, r3
 80113de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80113e4:	2301      	movs	r3, #1
 80113e6:	637b      	str	r3, [r7, #52]	; 0x34
 80113e8:	e001      	b.n	80113ee <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80113ea:	2300      	movs	r3, #0
 80113ec:	637b      	str	r3, [r7, #52]	; 0x34
 80113ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113f0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80113f2:	68fb      	ldr	r3, [r7, #12]
 80113f4:	f383 8811 	msr	BASEPRI, r3
}
 80113f8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80113fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80113fc:	4618      	mov	r0, r3
 80113fe:	3738      	adds	r7, #56	; 0x38
 8011400:	46bd      	mov	sp, r7
 8011402:	bd80      	pop	{r7, pc}

08011404 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8011404:	b580      	push	{r7, lr}
 8011406:	b08c      	sub	sp, #48	; 0x30
 8011408:	af00      	add	r7, sp, #0
 801140a:	60f8      	str	r0, [r7, #12]
 801140c:	60b9      	str	r1, [r7, #8]
 801140e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8011410:	2300      	movs	r3, #0
 8011412:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8011414:	68fb      	ldr	r3, [r7, #12]
 8011416:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8011418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801141a:	2b00      	cmp	r3, #0
 801141c:	d10a      	bne.n	8011434 <xQueueReceive+0x30>
	__asm volatile
 801141e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011422:	f383 8811 	msr	BASEPRI, r3
 8011426:	f3bf 8f6f 	isb	sy
 801142a:	f3bf 8f4f 	dsb	sy
 801142e:	623b      	str	r3, [r7, #32]
}
 8011430:	bf00      	nop
 8011432:	e7fe      	b.n	8011432 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011434:	68bb      	ldr	r3, [r7, #8]
 8011436:	2b00      	cmp	r3, #0
 8011438:	d103      	bne.n	8011442 <xQueueReceive+0x3e>
 801143a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801143c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801143e:	2b00      	cmp	r3, #0
 8011440:	d101      	bne.n	8011446 <xQueueReceive+0x42>
 8011442:	2301      	movs	r3, #1
 8011444:	e000      	b.n	8011448 <xQueueReceive+0x44>
 8011446:	2300      	movs	r3, #0
 8011448:	2b00      	cmp	r3, #0
 801144a:	d10a      	bne.n	8011462 <xQueueReceive+0x5e>
	__asm volatile
 801144c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011450:	f383 8811 	msr	BASEPRI, r3
 8011454:	f3bf 8f6f 	isb	sy
 8011458:	f3bf 8f4f 	dsb	sy
 801145c:	61fb      	str	r3, [r7, #28]
}
 801145e:	bf00      	nop
 8011460:	e7fe      	b.n	8011460 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011462:	f001 fa57 	bl	8012914 <xTaskGetSchedulerState>
 8011466:	4603      	mov	r3, r0
 8011468:	2b00      	cmp	r3, #0
 801146a:	d102      	bne.n	8011472 <xQueueReceive+0x6e>
 801146c:	687b      	ldr	r3, [r7, #4]
 801146e:	2b00      	cmp	r3, #0
 8011470:	d101      	bne.n	8011476 <xQueueReceive+0x72>
 8011472:	2301      	movs	r3, #1
 8011474:	e000      	b.n	8011478 <xQueueReceive+0x74>
 8011476:	2300      	movs	r3, #0
 8011478:	2b00      	cmp	r3, #0
 801147a:	d10a      	bne.n	8011492 <xQueueReceive+0x8e>
	__asm volatile
 801147c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011480:	f383 8811 	msr	BASEPRI, r3
 8011484:	f3bf 8f6f 	isb	sy
 8011488:	f3bf 8f4f 	dsb	sy
 801148c:	61bb      	str	r3, [r7, #24]
}
 801148e:	bf00      	nop
 8011490:	e7fe      	b.n	8011490 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8011492:	f7ff fac7 	bl	8010a24 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801149a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801149c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801149e:	2b00      	cmp	r3, #0
 80114a0:	d01f      	beq.n	80114e2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80114a2:	68b9      	ldr	r1, [r7, #8]
 80114a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80114a6:	f000 fabe 	bl	8011a26 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80114aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114ac:	1e5a      	subs	r2, r3, #1
 80114ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114b0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80114b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114b4:	691b      	ldr	r3, [r3, #16]
 80114b6:	2b00      	cmp	r3, #0
 80114b8:	d00f      	beq.n	80114da <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80114ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114bc:	3310      	adds	r3, #16
 80114be:	4618      	mov	r0, r3
 80114c0:	f001 f866 	bl	8012590 <xTaskRemoveFromEventList>
 80114c4:	4603      	mov	r3, r0
 80114c6:	2b00      	cmp	r3, #0
 80114c8:	d007      	beq.n	80114da <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80114ca:	4b3d      	ldr	r3, [pc, #244]	; (80115c0 <xQueueReceive+0x1bc>)
 80114cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80114d0:	601a      	str	r2, [r3, #0]
 80114d2:	f3bf 8f4f 	dsb	sy
 80114d6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80114da:	f7ff fad3 	bl	8010a84 <vPortExitCritical>
				return pdPASS;
 80114de:	2301      	movs	r3, #1
 80114e0:	e069      	b.n	80115b6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	2b00      	cmp	r3, #0
 80114e6:	d103      	bne.n	80114f0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80114e8:	f7ff facc 	bl	8010a84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80114ec:	2300      	movs	r3, #0
 80114ee:	e062      	b.n	80115b6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80114f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114f2:	2b00      	cmp	r3, #0
 80114f4:	d106      	bne.n	8011504 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80114f6:	f107 0310 	add.w	r3, r7, #16
 80114fa:	4618      	mov	r0, r3
 80114fc:	f001 f8ac 	bl	8012658 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011500:	2301      	movs	r3, #1
 8011502:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011504:	f7ff fabe 	bl	8010a84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011508:	f000 fe18 	bl	801213c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801150c:	f7ff fa8a 	bl	8010a24 <vPortEnterCritical>
 8011510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011512:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011516:	b25b      	sxtb	r3, r3
 8011518:	f1b3 3fff 	cmp.w	r3, #4294967295
 801151c:	d103      	bne.n	8011526 <xQueueReceive+0x122>
 801151e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011520:	2200      	movs	r2, #0
 8011522:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011528:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801152c:	b25b      	sxtb	r3, r3
 801152e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011532:	d103      	bne.n	801153c <xQueueReceive+0x138>
 8011534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011536:	2200      	movs	r2, #0
 8011538:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801153c:	f7ff faa2 	bl	8010a84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011540:	1d3a      	adds	r2, r7, #4
 8011542:	f107 0310 	add.w	r3, r7, #16
 8011546:	4611      	mov	r1, r2
 8011548:	4618      	mov	r0, r3
 801154a:	f001 f89b 	bl	8012684 <xTaskCheckForTimeOut>
 801154e:	4603      	mov	r3, r0
 8011550:	2b00      	cmp	r3, #0
 8011552:	d123      	bne.n	801159c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011554:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011556:	f000 fade 	bl	8011b16 <prvIsQueueEmpty>
 801155a:	4603      	mov	r3, r0
 801155c:	2b00      	cmp	r3, #0
 801155e:	d017      	beq.n	8011590 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8011560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011562:	3324      	adds	r3, #36	; 0x24
 8011564:	687a      	ldr	r2, [r7, #4]
 8011566:	4611      	mov	r1, r2
 8011568:	4618      	mov	r0, r3
 801156a:	f000 ffc1 	bl	80124f0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801156e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011570:	f000 fa7f 	bl	8011a72 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8011574:	f000 fdf0 	bl	8012158 <xTaskResumeAll>
 8011578:	4603      	mov	r3, r0
 801157a:	2b00      	cmp	r3, #0
 801157c:	d189      	bne.n	8011492 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 801157e:	4b10      	ldr	r3, [pc, #64]	; (80115c0 <xQueueReceive+0x1bc>)
 8011580:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011584:	601a      	str	r2, [r3, #0]
 8011586:	f3bf 8f4f 	dsb	sy
 801158a:	f3bf 8f6f 	isb	sy
 801158e:	e780      	b.n	8011492 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8011590:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011592:	f000 fa6e 	bl	8011a72 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011596:	f000 fddf 	bl	8012158 <xTaskResumeAll>
 801159a:	e77a      	b.n	8011492 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 801159c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801159e:	f000 fa68 	bl	8011a72 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80115a2:	f000 fdd9 	bl	8012158 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80115a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80115a8:	f000 fab5 	bl	8011b16 <prvIsQueueEmpty>
 80115ac:	4603      	mov	r3, r0
 80115ae:	2b00      	cmp	r3, #0
 80115b0:	f43f af6f 	beq.w	8011492 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80115b4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80115b6:	4618      	mov	r0, r3
 80115b8:	3730      	adds	r7, #48	; 0x30
 80115ba:	46bd      	mov	sp, r7
 80115bc:	bd80      	pop	{r7, pc}
 80115be:	bf00      	nop
 80115c0:	e000ed04 	.word	0xe000ed04

080115c4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80115c4:	b580      	push	{r7, lr}
 80115c6:	b08e      	sub	sp, #56	; 0x38
 80115c8:	af00      	add	r7, sp, #0
 80115ca:	6078      	str	r0, [r7, #4]
 80115cc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80115ce:	2300      	movs	r3, #0
 80115d0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80115d2:	687b      	ldr	r3, [r7, #4]
 80115d4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80115d6:	2300      	movs	r3, #0
 80115d8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80115da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115dc:	2b00      	cmp	r3, #0
 80115de:	d10a      	bne.n	80115f6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 80115e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115e4:	f383 8811 	msr	BASEPRI, r3
 80115e8:	f3bf 8f6f 	isb	sy
 80115ec:	f3bf 8f4f 	dsb	sy
 80115f0:	623b      	str	r3, [r7, #32]
}
 80115f2:	bf00      	nop
 80115f4:	e7fe      	b.n	80115f4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80115f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80115fa:	2b00      	cmp	r3, #0
 80115fc:	d00a      	beq.n	8011614 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80115fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011602:	f383 8811 	msr	BASEPRI, r3
 8011606:	f3bf 8f6f 	isb	sy
 801160a:	f3bf 8f4f 	dsb	sy
 801160e:	61fb      	str	r3, [r7, #28]
}
 8011610:	bf00      	nop
 8011612:	e7fe      	b.n	8011612 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011614:	f001 f97e 	bl	8012914 <xTaskGetSchedulerState>
 8011618:	4603      	mov	r3, r0
 801161a:	2b00      	cmp	r3, #0
 801161c:	d102      	bne.n	8011624 <xQueueSemaphoreTake+0x60>
 801161e:	683b      	ldr	r3, [r7, #0]
 8011620:	2b00      	cmp	r3, #0
 8011622:	d101      	bne.n	8011628 <xQueueSemaphoreTake+0x64>
 8011624:	2301      	movs	r3, #1
 8011626:	e000      	b.n	801162a <xQueueSemaphoreTake+0x66>
 8011628:	2300      	movs	r3, #0
 801162a:	2b00      	cmp	r3, #0
 801162c:	d10a      	bne.n	8011644 <xQueueSemaphoreTake+0x80>
	__asm volatile
 801162e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011632:	f383 8811 	msr	BASEPRI, r3
 8011636:	f3bf 8f6f 	isb	sy
 801163a:	f3bf 8f4f 	dsb	sy
 801163e:	61bb      	str	r3, [r7, #24]
}
 8011640:	bf00      	nop
 8011642:	e7fe      	b.n	8011642 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8011644:	f7ff f9ee 	bl	8010a24 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8011648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801164a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801164c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 801164e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011650:	2b00      	cmp	r3, #0
 8011652:	d024      	beq.n	801169e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8011654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011656:	1e5a      	subs	r2, r3, #1
 8011658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801165a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801165c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801165e:	681b      	ldr	r3, [r3, #0]
 8011660:	2b00      	cmp	r3, #0
 8011662:	d104      	bne.n	801166e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8011664:	f001 facc 	bl	8012c00 <pvTaskIncrementMutexHeldCount>
 8011668:	4602      	mov	r2, r0
 801166a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801166c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801166e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011670:	691b      	ldr	r3, [r3, #16]
 8011672:	2b00      	cmp	r3, #0
 8011674:	d00f      	beq.n	8011696 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011678:	3310      	adds	r3, #16
 801167a:	4618      	mov	r0, r3
 801167c:	f000 ff88 	bl	8012590 <xTaskRemoveFromEventList>
 8011680:	4603      	mov	r3, r0
 8011682:	2b00      	cmp	r3, #0
 8011684:	d007      	beq.n	8011696 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8011686:	4b54      	ldr	r3, [pc, #336]	; (80117d8 <xQueueSemaphoreTake+0x214>)
 8011688:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801168c:	601a      	str	r2, [r3, #0]
 801168e:	f3bf 8f4f 	dsb	sy
 8011692:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8011696:	f7ff f9f5 	bl	8010a84 <vPortExitCritical>
				return pdPASS;
 801169a:	2301      	movs	r3, #1
 801169c:	e097      	b.n	80117ce <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801169e:	683b      	ldr	r3, [r7, #0]
 80116a0:	2b00      	cmp	r3, #0
 80116a2:	d111      	bne.n	80116c8 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80116a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116a6:	2b00      	cmp	r3, #0
 80116a8:	d00a      	beq.n	80116c0 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80116aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116ae:	f383 8811 	msr	BASEPRI, r3
 80116b2:	f3bf 8f6f 	isb	sy
 80116b6:	f3bf 8f4f 	dsb	sy
 80116ba:	617b      	str	r3, [r7, #20]
}
 80116bc:	bf00      	nop
 80116be:	e7fe      	b.n	80116be <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80116c0:	f7ff f9e0 	bl	8010a84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80116c4:	2300      	movs	r3, #0
 80116c6:	e082      	b.n	80117ce <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80116c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80116ca:	2b00      	cmp	r3, #0
 80116cc:	d106      	bne.n	80116dc <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80116ce:	f107 030c 	add.w	r3, r7, #12
 80116d2:	4618      	mov	r0, r3
 80116d4:	f000 ffc0 	bl	8012658 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80116d8:	2301      	movs	r3, #1
 80116da:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80116dc:	f7ff f9d2 	bl	8010a84 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80116e0:	f000 fd2c 	bl	801213c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80116e4:	f7ff f99e 	bl	8010a24 <vPortEnterCritical>
 80116e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116ea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80116ee:	b25b      	sxtb	r3, r3
 80116f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80116f4:	d103      	bne.n	80116fe <xQueueSemaphoreTake+0x13a>
 80116f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116f8:	2200      	movs	r2, #0
 80116fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80116fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011700:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011704:	b25b      	sxtb	r3, r3
 8011706:	f1b3 3fff 	cmp.w	r3, #4294967295
 801170a:	d103      	bne.n	8011714 <xQueueSemaphoreTake+0x150>
 801170c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801170e:	2200      	movs	r2, #0
 8011710:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011714:	f7ff f9b6 	bl	8010a84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011718:	463a      	mov	r2, r7
 801171a:	f107 030c 	add.w	r3, r7, #12
 801171e:	4611      	mov	r1, r2
 8011720:	4618      	mov	r0, r3
 8011722:	f000 ffaf 	bl	8012684 <xTaskCheckForTimeOut>
 8011726:	4603      	mov	r3, r0
 8011728:	2b00      	cmp	r3, #0
 801172a:	d132      	bne.n	8011792 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801172c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801172e:	f000 f9f2 	bl	8011b16 <prvIsQueueEmpty>
 8011732:	4603      	mov	r3, r0
 8011734:	2b00      	cmp	r3, #0
 8011736:	d026      	beq.n	8011786 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801173a:	681b      	ldr	r3, [r3, #0]
 801173c:	2b00      	cmp	r3, #0
 801173e:	d109      	bne.n	8011754 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8011740:	f7ff f970 	bl	8010a24 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8011744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011746:	689b      	ldr	r3, [r3, #8]
 8011748:	4618      	mov	r0, r3
 801174a:	f001 f901 	bl	8012950 <xTaskPriorityInherit>
 801174e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8011750:	f7ff f998 	bl	8010a84 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8011754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011756:	3324      	adds	r3, #36	; 0x24
 8011758:	683a      	ldr	r2, [r7, #0]
 801175a:	4611      	mov	r1, r2
 801175c:	4618      	mov	r0, r3
 801175e:	f000 fec7 	bl	80124f0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8011762:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011764:	f000 f985 	bl	8011a72 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8011768:	f000 fcf6 	bl	8012158 <xTaskResumeAll>
 801176c:	4603      	mov	r3, r0
 801176e:	2b00      	cmp	r3, #0
 8011770:	f47f af68 	bne.w	8011644 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8011774:	4b18      	ldr	r3, [pc, #96]	; (80117d8 <xQueueSemaphoreTake+0x214>)
 8011776:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801177a:	601a      	str	r2, [r3, #0]
 801177c:	f3bf 8f4f 	dsb	sy
 8011780:	f3bf 8f6f 	isb	sy
 8011784:	e75e      	b.n	8011644 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8011786:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011788:	f000 f973 	bl	8011a72 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801178c:	f000 fce4 	bl	8012158 <xTaskResumeAll>
 8011790:	e758      	b.n	8011644 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8011792:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011794:	f000 f96d 	bl	8011a72 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011798:	f000 fcde 	bl	8012158 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801179c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801179e:	f000 f9ba 	bl	8011b16 <prvIsQueueEmpty>
 80117a2:	4603      	mov	r3, r0
 80117a4:	2b00      	cmp	r3, #0
 80117a6:	f43f af4d 	beq.w	8011644 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80117aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117ac:	2b00      	cmp	r3, #0
 80117ae:	d00d      	beq.n	80117cc <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80117b0:	f7ff f938 	bl	8010a24 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80117b4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80117b6:	f000 f8b4 	bl	8011922 <prvGetDisinheritPriorityAfterTimeout>
 80117ba:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80117bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117be:	689b      	ldr	r3, [r3, #8]
 80117c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80117c2:	4618      	mov	r0, r3
 80117c4:	f001 f99a 	bl	8012afc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80117c8:	f7ff f95c 	bl	8010a84 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80117cc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80117ce:	4618      	mov	r0, r3
 80117d0:	3738      	adds	r7, #56	; 0x38
 80117d2:	46bd      	mov	sp, r7
 80117d4:	bd80      	pop	{r7, pc}
 80117d6:	bf00      	nop
 80117d8:	e000ed04 	.word	0xe000ed04

080117dc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80117dc:	b580      	push	{r7, lr}
 80117de:	b08e      	sub	sp, #56	; 0x38
 80117e0:	af00      	add	r7, sp, #0
 80117e2:	60f8      	str	r0, [r7, #12]
 80117e4:	60b9      	str	r1, [r7, #8]
 80117e6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80117e8:	68fb      	ldr	r3, [r7, #12]
 80117ea:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80117ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117ee:	2b00      	cmp	r3, #0
 80117f0:	d10a      	bne.n	8011808 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80117f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117f6:	f383 8811 	msr	BASEPRI, r3
 80117fa:	f3bf 8f6f 	isb	sy
 80117fe:	f3bf 8f4f 	dsb	sy
 8011802:	623b      	str	r3, [r7, #32]
}
 8011804:	bf00      	nop
 8011806:	e7fe      	b.n	8011806 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011808:	68bb      	ldr	r3, [r7, #8]
 801180a:	2b00      	cmp	r3, #0
 801180c:	d103      	bne.n	8011816 <xQueueReceiveFromISR+0x3a>
 801180e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011812:	2b00      	cmp	r3, #0
 8011814:	d101      	bne.n	801181a <xQueueReceiveFromISR+0x3e>
 8011816:	2301      	movs	r3, #1
 8011818:	e000      	b.n	801181c <xQueueReceiveFromISR+0x40>
 801181a:	2300      	movs	r3, #0
 801181c:	2b00      	cmp	r3, #0
 801181e:	d10a      	bne.n	8011836 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8011820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011824:	f383 8811 	msr	BASEPRI, r3
 8011828:	f3bf 8f6f 	isb	sy
 801182c:	f3bf 8f4f 	dsb	sy
 8011830:	61fb      	str	r3, [r7, #28]
}
 8011832:	bf00      	nop
 8011834:	e7fe      	b.n	8011834 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011836:	f7ff f9d7 	bl	8010be8 <vPortValidateInterruptPriority>
	__asm volatile
 801183a:	f3ef 8211 	mrs	r2, BASEPRI
 801183e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011842:	f383 8811 	msr	BASEPRI, r3
 8011846:	f3bf 8f6f 	isb	sy
 801184a:	f3bf 8f4f 	dsb	sy
 801184e:	61ba      	str	r2, [r7, #24]
 8011850:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8011852:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011854:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801185a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801185c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801185e:	2b00      	cmp	r3, #0
 8011860:	d02f      	beq.n	80118c2 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8011862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011864:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011868:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 801186c:	68b9      	ldr	r1, [r7, #8]
 801186e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011870:	f000 f8d9 	bl	8011a26 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8011874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011876:	1e5a      	subs	r2, r3, #1
 8011878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801187a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 801187c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8011880:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011884:	d112      	bne.n	80118ac <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011888:	691b      	ldr	r3, [r3, #16]
 801188a:	2b00      	cmp	r3, #0
 801188c:	d016      	beq.n	80118bc <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801188e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011890:	3310      	adds	r3, #16
 8011892:	4618      	mov	r0, r3
 8011894:	f000 fe7c 	bl	8012590 <xTaskRemoveFromEventList>
 8011898:	4603      	mov	r3, r0
 801189a:	2b00      	cmp	r3, #0
 801189c:	d00e      	beq.n	80118bc <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	2b00      	cmp	r3, #0
 80118a2:	d00b      	beq.n	80118bc <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	2201      	movs	r2, #1
 80118a8:	601a      	str	r2, [r3, #0]
 80118aa:	e007      	b.n	80118bc <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80118ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80118b0:	3301      	adds	r3, #1
 80118b2:	b2db      	uxtb	r3, r3
 80118b4:	b25a      	sxtb	r2, r3
 80118b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80118b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80118bc:	2301      	movs	r3, #1
 80118be:	637b      	str	r3, [r7, #52]	; 0x34
 80118c0:	e001      	b.n	80118c6 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80118c2:	2300      	movs	r3, #0
 80118c4:	637b      	str	r3, [r7, #52]	; 0x34
 80118c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118c8:	613b      	str	r3, [r7, #16]
	__asm volatile
 80118ca:	693b      	ldr	r3, [r7, #16]
 80118cc:	f383 8811 	msr	BASEPRI, r3
}
 80118d0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80118d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80118d4:	4618      	mov	r0, r3
 80118d6:	3738      	adds	r7, #56	; 0x38
 80118d8:	46bd      	mov	sp, r7
 80118da:	bd80      	pop	{r7, pc}

080118dc <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80118dc:	b580      	push	{r7, lr}
 80118de:	b084      	sub	sp, #16
 80118e0:	af00      	add	r7, sp, #0
 80118e2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80118e4:	687b      	ldr	r3, [r7, #4]
 80118e6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80118e8:	68fb      	ldr	r3, [r7, #12]
 80118ea:	2b00      	cmp	r3, #0
 80118ec:	d10a      	bne.n	8011904 <vQueueDelete+0x28>
	__asm volatile
 80118ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118f2:	f383 8811 	msr	BASEPRI, r3
 80118f6:	f3bf 8f6f 	isb	sy
 80118fa:	f3bf 8f4f 	dsb	sy
 80118fe:	60bb      	str	r3, [r7, #8]
}
 8011900:	bf00      	nop
 8011902:	e7fe      	b.n	8011902 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8011904:	68f8      	ldr	r0, [r7, #12]
 8011906:	f000 f95f 	bl	8011bc8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 801190a:	68fb      	ldr	r3, [r7, #12]
 801190c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8011910:	2b00      	cmp	r3, #0
 8011912:	d102      	bne.n	801191a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8011914:	68f8      	ldr	r0, [r7, #12]
 8011916:	f7fe fd83 	bl	8010420 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 801191a:	bf00      	nop
 801191c:	3710      	adds	r7, #16
 801191e:	46bd      	mov	sp, r7
 8011920:	bd80      	pop	{r7, pc}

08011922 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8011922:	b480      	push	{r7}
 8011924:	b085      	sub	sp, #20
 8011926:	af00      	add	r7, sp, #0
 8011928:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 801192a:	687b      	ldr	r3, [r7, #4]
 801192c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801192e:	2b00      	cmp	r3, #0
 8011930:	d006      	beq.n	8011940 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8011932:	687b      	ldr	r3, [r7, #4]
 8011934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011936:	681b      	ldr	r3, [r3, #0]
 8011938:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 801193c:	60fb      	str	r3, [r7, #12]
 801193e:	e001      	b.n	8011944 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8011940:	2300      	movs	r3, #0
 8011942:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8011944:	68fb      	ldr	r3, [r7, #12]
	}
 8011946:	4618      	mov	r0, r3
 8011948:	3714      	adds	r7, #20
 801194a:	46bd      	mov	sp, r7
 801194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011950:	4770      	bx	lr

08011952 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8011952:	b580      	push	{r7, lr}
 8011954:	b086      	sub	sp, #24
 8011956:	af00      	add	r7, sp, #0
 8011958:	60f8      	str	r0, [r7, #12]
 801195a:	60b9      	str	r1, [r7, #8]
 801195c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 801195e:	2300      	movs	r3, #0
 8011960:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011962:	68fb      	ldr	r3, [r7, #12]
 8011964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011966:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8011968:	68fb      	ldr	r3, [r7, #12]
 801196a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801196c:	2b00      	cmp	r3, #0
 801196e:	d10d      	bne.n	801198c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011970:	68fb      	ldr	r3, [r7, #12]
 8011972:	681b      	ldr	r3, [r3, #0]
 8011974:	2b00      	cmp	r3, #0
 8011976:	d14d      	bne.n	8011a14 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8011978:	68fb      	ldr	r3, [r7, #12]
 801197a:	689b      	ldr	r3, [r3, #8]
 801197c:	4618      	mov	r0, r3
 801197e:	f001 f84f 	bl	8012a20 <xTaskPriorityDisinherit>
 8011982:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8011984:	68fb      	ldr	r3, [r7, #12]
 8011986:	2200      	movs	r2, #0
 8011988:	609a      	str	r2, [r3, #8]
 801198a:	e043      	b.n	8011a14 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	2b00      	cmp	r3, #0
 8011990:	d119      	bne.n	80119c6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8011992:	68fb      	ldr	r3, [r7, #12]
 8011994:	6858      	ldr	r0, [r3, #4]
 8011996:	68fb      	ldr	r3, [r7, #12]
 8011998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801199a:	461a      	mov	r2, r3
 801199c:	68b9      	ldr	r1, [r7, #8]
 801199e:	f002 fe24 	bl	80145ea <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80119a2:	68fb      	ldr	r3, [r7, #12]
 80119a4:	685a      	ldr	r2, [r3, #4]
 80119a6:	68fb      	ldr	r3, [r7, #12]
 80119a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80119aa:	441a      	add	r2, r3
 80119ac:	68fb      	ldr	r3, [r7, #12]
 80119ae:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80119b0:	68fb      	ldr	r3, [r7, #12]
 80119b2:	685a      	ldr	r2, [r3, #4]
 80119b4:	68fb      	ldr	r3, [r7, #12]
 80119b6:	689b      	ldr	r3, [r3, #8]
 80119b8:	429a      	cmp	r2, r3
 80119ba:	d32b      	bcc.n	8011a14 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80119bc:	68fb      	ldr	r3, [r7, #12]
 80119be:	681a      	ldr	r2, [r3, #0]
 80119c0:	68fb      	ldr	r3, [r7, #12]
 80119c2:	605a      	str	r2, [r3, #4]
 80119c4:	e026      	b.n	8011a14 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80119c6:	68fb      	ldr	r3, [r7, #12]
 80119c8:	68d8      	ldr	r0, [r3, #12]
 80119ca:	68fb      	ldr	r3, [r7, #12]
 80119cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80119ce:	461a      	mov	r2, r3
 80119d0:	68b9      	ldr	r1, [r7, #8]
 80119d2:	f002 fe0a 	bl	80145ea <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80119d6:	68fb      	ldr	r3, [r7, #12]
 80119d8:	68da      	ldr	r2, [r3, #12]
 80119da:	68fb      	ldr	r3, [r7, #12]
 80119dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80119de:	425b      	negs	r3, r3
 80119e0:	441a      	add	r2, r3
 80119e2:	68fb      	ldr	r3, [r7, #12]
 80119e4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80119e6:	68fb      	ldr	r3, [r7, #12]
 80119e8:	68da      	ldr	r2, [r3, #12]
 80119ea:	68fb      	ldr	r3, [r7, #12]
 80119ec:	681b      	ldr	r3, [r3, #0]
 80119ee:	429a      	cmp	r2, r3
 80119f0:	d207      	bcs.n	8011a02 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80119f2:	68fb      	ldr	r3, [r7, #12]
 80119f4:	689a      	ldr	r2, [r3, #8]
 80119f6:	68fb      	ldr	r3, [r7, #12]
 80119f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80119fa:	425b      	negs	r3, r3
 80119fc:	441a      	add	r2, r3
 80119fe:	68fb      	ldr	r3, [r7, #12]
 8011a00:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8011a02:	687b      	ldr	r3, [r7, #4]
 8011a04:	2b02      	cmp	r3, #2
 8011a06:	d105      	bne.n	8011a14 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011a08:	693b      	ldr	r3, [r7, #16]
 8011a0a:	2b00      	cmp	r3, #0
 8011a0c:	d002      	beq.n	8011a14 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8011a0e:	693b      	ldr	r3, [r7, #16]
 8011a10:	3b01      	subs	r3, #1
 8011a12:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8011a14:	693b      	ldr	r3, [r7, #16]
 8011a16:	1c5a      	adds	r2, r3, #1
 8011a18:	68fb      	ldr	r3, [r7, #12]
 8011a1a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8011a1c:	697b      	ldr	r3, [r7, #20]
}
 8011a1e:	4618      	mov	r0, r3
 8011a20:	3718      	adds	r7, #24
 8011a22:	46bd      	mov	sp, r7
 8011a24:	bd80      	pop	{r7, pc}

08011a26 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8011a26:	b580      	push	{r7, lr}
 8011a28:	b082      	sub	sp, #8
 8011a2a:	af00      	add	r7, sp, #0
 8011a2c:	6078      	str	r0, [r7, #4]
 8011a2e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8011a30:	687b      	ldr	r3, [r7, #4]
 8011a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011a34:	2b00      	cmp	r3, #0
 8011a36:	d018      	beq.n	8011a6a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	68da      	ldr	r2, [r3, #12]
 8011a3c:	687b      	ldr	r3, [r7, #4]
 8011a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011a40:	441a      	add	r2, r3
 8011a42:	687b      	ldr	r3, [r7, #4]
 8011a44:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8011a46:	687b      	ldr	r3, [r7, #4]
 8011a48:	68da      	ldr	r2, [r3, #12]
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	689b      	ldr	r3, [r3, #8]
 8011a4e:	429a      	cmp	r2, r3
 8011a50:	d303      	bcc.n	8011a5a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	681a      	ldr	r2, [r3, #0]
 8011a56:	687b      	ldr	r3, [r7, #4]
 8011a58:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8011a5a:	687b      	ldr	r3, [r7, #4]
 8011a5c:	68d9      	ldr	r1, [r3, #12]
 8011a5e:	687b      	ldr	r3, [r7, #4]
 8011a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011a62:	461a      	mov	r2, r3
 8011a64:	6838      	ldr	r0, [r7, #0]
 8011a66:	f002 fdc0 	bl	80145ea <memcpy>
	}
}
 8011a6a:	bf00      	nop
 8011a6c:	3708      	adds	r7, #8
 8011a6e:	46bd      	mov	sp, r7
 8011a70:	bd80      	pop	{r7, pc}

08011a72 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8011a72:	b580      	push	{r7, lr}
 8011a74:	b084      	sub	sp, #16
 8011a76:	af00      	add	r7, sp, #0
 8011a78:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8011a7a:	f7fe ffd3 	bl	8010a24 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8011a7e:	687b      	ldr	r3, [r7, #4]
 8011a80:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011a84:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011a86:	e011      	b.n	8011aac <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a8c:	2b00      	cmp	r3, #0
 8011a8e:	d012      	beq.n	8011ab6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	3324      	adds	r3, #36	; 0x24
 8011a94:	4618      	mov	r0, r3
 8011a96:	f000 fd7b 	bl	8012590 <xTaskRemoveFromEventList>
 8011a9a:	4603      	mov	r3, r0
 8011a9c:	2b00      	cmp	r3, #0
 8011a9e:	d001      	beq.n	8011aa4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8011aa0:	f000 fe52 	bl	8012748 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8011aa4:	7bfb      	ldrb	r3, [r7, #15]
 8011aa6:	3b01      	subs	r3, #1
 8011aa8:	b2db      	uxtb	r3, r3
 8011aaa:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011aac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011ab0:	2b00      	cmp	r3, #0
 8011ab2:	dce9      	bgt.n	8011a88 <prvUnlockQueue+0x16>
 8011ab4:	e000      	b.n	8011ab8 <prvUnlockQueue+0x46>
					break;
 8011ab6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8011ab8:	687b      	ldr	r3, [r7, #4]
 8011aba:	22ff      	movs	r2, #255	; 0xff
 8011abc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8011ac0:	f7fe ffe0 	bl	8010a84 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8011ac4:	f7fe ffae 	bl	8010a24 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011ace:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011ad0:	e011      	b.n	8011af6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011ad2:	687b      	ldr	r3, [r7, #4]
 8011ad4:	691b      	ldr	r3, [r3, #16]
 8011ad6:	2b00      	cmp	r3, #0
 8011ad8:	d012      	beq.n	8011b00 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011ada:	687b      	ldr	r3, [r7, #4]
 8011adc:	3310      	adds	r3, #16
 8011ade:	4618      	mov	r0, r3
 8011ae0:	f000 fd56 	bl	8012590 <xTaskRemoveFromEventList>
 8011ae4:	4603      	mov	r3, r0
 8011ae6:	2b00      	cmp	r3, #0
 8011ae8:	d001      	beq.n	8011aee <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8011aea:	f000 fe2d 	bl	8012748 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8011aee:	7bbb      	ldrb	r3, [r7, #14]
 8011af0:	3b01      	subs	r3, #1
 8011af2:	b2db      	uxtb	r3, r3
 8011af4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011af6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011afa:	2b00      	cmp	r3, #0
 8011afc:	dce9      	bgt.n	8011ad2 <prvUnlockQueue+0x60>
 8011afe:	e000      	b.n	8011b02 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8011b00:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8011b02:	687b      	ldr	r3, [r7, #4]
 8011b04:	22ff      	movs	r2, #255	; 0xff
 8011b06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8011b0a:	f7fe ffbb 	bl	8010a84 <vPortExitCritical>
}
 8011b0e:	bf00      	nop
 8011b10:	3710      	adds	r7, #16
 8011b12:	46bd      	mov	sp, r7
 8011b14:	bd80      	pop	{r7, pc}

08011b16 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8011b16:	b580      	push	{r7, lr}
 8011b18:	b084      	sub	sp, #16
 8011b1a:	af00      	add	r7, sp, #0
 8011b1c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011b1e:	f7fe ff81 	bl	8010a24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8011b22:	687b      	ldr	r3, [r7, #4]
 8011b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011b26:	2b00      	cmp	r3, #0
 8011b28:	d102      	bne.n	8011b30 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8011b2a:	2301      	movs	r3, #1
 8011b2c:	60fb      	str	r3, [r7, #12]
 8011b2e:	e001      	b.n	8011b34 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8011b30:	2300      	movs	r3, #0
 8011b32:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8011b34:	f7fe ffa6 	bl	8010a84 <vPortExitCritical>

	return xReturn;
 8011b38:	68fb      	ldr	r3, [r7, #12]
}
 8011b3a:	4618      	mov	r0, r3
 8011b3c:	3710      	adds	r7, #16
 8011b3e:	46bd      	mov	sp, r7
 8011b40:	bd80      	pop	{r7, pc}

08011b42 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8011b42:	b580      	push	{r7, lr}
 8011b44:	b084      	sub	sp, #16
 8011b46:	af00      	add	r7, sp, #0
 8011b48:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011b4a:	f7fe ff6b 	bl	8010a24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8011b4e:	687b      	ldr	r3, [r7, #4]
 8011b50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011b52:	687b      	ldr	r3, [r7, #4]
 8011b54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011b56:	429a      	cmp	r2, r3
 8011b58:	d102      	bne.n	8011b60 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8011b5a:	2301      	movs	r3, #1
 8011b5c:	60fb      	str	r3, [r7, #12]
 8011b5e:	e001      	b.n	8011b64 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8011b60:	2300      	movs	r3, #0
 8011b62:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8011b64:	f7fe ff8e 	bl	8010a84 <vPortExitCritical>

	return xReturn;
 8011b68:	68fb      	ldr	r3, [r7, #12]
}
 8011b6a:	4618      	mov	r0, r3
 8011b6c:	3710      	adds	r7, #16
 8011b6e:	46bd      	mov	sp, r7
 8011b70:	bd80      	pop	{r7, pc}
	...

08011b74 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8011b74:	b480      	push	{r7}
 8011b76:	b085      	sub	sp, #20
 8011b78:	af00      	add	r7, sp, #0
 8011b7a:	6078      	str	r0, [r7, #4]
 8011b7c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011b7e:	2300      	movs	r3, #0
 8011b80:	60fb      	str	r3, [r7, #12]
 8011b82:	e014      	b.n	8011bae <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8011b84:	4a0f      	ldr	r2, [pc, #60]	; (8011bc4 <vQueueAddToRegistry+0x50>)
 8011b86:	68fb      	ldr	r3, [r7, #12]
 8011b88:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8011b8c:	2b00      	cmp	r3, #0
 8011b8e:	d10b      	bne.n	8011ba8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8011b90:	490c      	ldr	r1, [pc, #48]	; (8011bc4 <vQueueAddToRegistry+0x50>)
 8011b92:	68fb      	ldr	r3, [r7, #12]
 8011b94:	683a      	ldr	r2, [r7, #0]
 8011b96:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8011b9a:	4a0a      	ldr	r2, [pc, #40]	; (8011bc4 <vQueueAddToRegistry+0x50>)
 8011b9c:	68fb      	ldr	r3, [r7, #12]
 8011b9e:	00db      	lsls	r3, r3, #3
 8011ba0:	4413      	add	r3, r2
 8011ba2:	687a      	ldr	r2, [r7, #4]
 8011ba4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8011ba6:	e006      	b.n	8011bb6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011ba8:	68fb      	ldr	r3, [r7, #12]
 8011baa:	3301      	adds	r3, #1
 8011bac:	60fb      	str	r3, [r7, #12]
 8011bae:	68fb      	ldr	r3, [r7, #12]
 8011bb0:	2b07      	cmp	r3, #7
 8011bb2:	d9e7      	bls.n	8011b84 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8011bb4:	bf00      	nop
 8011bb6:	bf00      	nop
 8011bb8:	3714      	adds	r7, #20
 8011bba:	46bd      	mov	sp, r7
 8011bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bc0:	4770      	bx	lr
 8011bc2:	bf00      	nop
 8011bc4:	24004f98 	.word	0x24004f98

08011bc8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8011bc8:	b480      	push	{r7}
 8011bca:	b085      	sub	sp, #20
 8011bcc:	af00      	add	r7, sp, #0
 8011bce:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011bd0:	2300      	movs	r3, #0
 8011bd2:	60fb      	str	r3, [r7, #12]
 8011bd4:	e016      	b.n	8011c04 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8011bd6:	4a10      	ldr	r2, [pc, #64]	; (8011c18 <vQueueUnregisterQueue+0x50>)
 8011bd8:	68fb      	ldr	r3, [r7, #12]
 8011bda:	00db      	lsls	r3, r3, #3
 8011bdc:	4413      	add	r3, r2
 8011bde:	685b      	ldr	r3, [r3, #4]
 8011be0:	687a      	ldr	r2, [r7, #4]
 8011be2:	429a      	cmp	r2, r3
 8011be4:	d10b      	bne.n	8011bfe <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8011be6:	4a0c      	ldr	r2, [pc, #48]	; (8011c18 <vQueueUnregisterQueue+0x50>)
 8011be8:	68fb      	ldr	r3, [r7, #12]
 8011bea:	2100      	movs	r1, #0
 8011bec:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8011bf0:	4a09      	ldr	r2, [pc, #36]	; (8011c18 <vQueueUnregisterQueue+0x50>)
 8011bf2:	68fb      	ldr	r3, [r7, #12]
 8011bf4:	00db      	lsls	r3, r3, #3
 8011bf6:	4413      	add	r3, r2
 8011bf8:	2200      	movs	r2, #0
 8011bfa:	605a      	str	r2, [r3, #4]
				break;
 8011bfc:	e006      	b.n	8011c0c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011bfe:	68fb      	ldr	r3, [r7, #12]
 8011c00:	3301      	adds	r3, #1
 8011c02:	60fb      	str	r3, [r7, #12]
 8011c04:	68fb      	ldr	r3, [r7, #12]
 8011c06:	2b07      	cmp	r3, #7
 8011c08:	d9e5      	bls.n	8011bd6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8011c0a:	bf00      	nop
 8011c0c:	bf00      	nop
 8011c0e:	3714      	adds	r7, #20
 8011c10:	46bd      	mov	sp, r7
 8011c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c16:	4770      	bx	lr
 8011c18:	24004f98 	.word	0x24004f98

08011c1c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8011c1c:	b580      	push	{r7, lr}
 8011c1e:	b086      	sub	sp, #24
 8011c20:	af00      	add	r7, sp, #0
 8011c22:	60f8      	str	r0, [r7, #12]
 8011c24:	60b9      	str	r1, [r7, #8]
 8011c26:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8011c28:	68fb      	ldr	r3, [r7, #12]
 8011c2a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8011c2c:	f7fe fefa 	bl	8010a24 <vPortEnterCritical>
 8011c30:	697b      	ldr	r3, [r7, #20]
 8011c32:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011c36:	b25b      	sxtb	r3, r3
 8011c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011c3c:	d103      	bne.n	8011c46 <vQueueWaitForMessageRestricted+0x2a>
 8011c3e:	697b      	ldr	r3, [r7, #20]
 8011c40:	2200      	movs	r2, #0
 8011c42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011c46:	697b      	ldr	r3, [r7, #20]
 8011c48:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011c4c:	b25b      	sxtb	r3, r3
 8011c4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011c52:	d103      	bne.n	8011c5c <vQueueWaitForMessageRestricted+0x40>
 8011c54:	697b      	ldr	r3, [r7, #20]
 8011c56:	2200      	movs	r2, #0
 8011c58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011c5c:	f7fe ff12 	bl	8010a84 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8011c60:	697b      	ldr	r3, [r7, #20]
 8011c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011c64:	2b00      	cmp	r3, #0
 8011c66:	d106      	bne.n	8011c76 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8011c68:	697b      	ldr	r3, [r7, #20]
 8011c6a:	3324      	adds	r3, #36	; 0x24
 8011c6c:	687a      	ldr	r2, [r7, #4]
 8011c6e:	68b9      	ldr	r1, [r7, #8]
 8011c70:	4618      	mov	r0, r3
 8011c72:	f000 fc61 	bl	8012538 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8011c76:	6978      	ldr	r0, [r7, #20]
 8011c78:	f7ff fefb 	bl	8011a72 <prvUnlockQueue>
	}
 8011c7c:	bf00      	nop
 8011c7e:	3718      	adds	r7, #24
 8011c80:	46bd      	mov	sp, r7
 8011c82:	bd80      	pop	{r7, pc}

08011c84 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8011c84:	b580      	push	{r7, lr}
 8011c86:	b08e      	sub	sp, #56	; 0x38
 8011c88:	af04      	add	r7, sp, #16
 8011c8a:	60f8      	str	r0, [r7, #12]
 8011c8c:	60b9      	str	r1, [r7, #8]
 8011c8e:	607a      	str	r2, [r7, #4]
 8011c90:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8011c92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c94:	2b00      	cmp	r3, #0
 8011c96:	d10a      	bne.n	8011cae <xTaskCreateStatic+0x2a>
	__asm volatile
 8011c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c9c:	f383 8811 	msr	BASEPRI, r3
 8011ca0:	f3bf 8f6f 	isb	sy
 8011ca4:	f3bf 8f4f 	dsb	sy
 8011ca8:	623b      	str	r3, [r7, #32]
}
 8011caa:	bf00      	nop
 8011cac:	e7fe      	b.n	8011cac <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8011cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011cb0:	2b00      	cmp	r3, #0
 8011cb2:	d10a      	bne.n	8011cca <xTaskCreateStatic+0x46>
	__asm volatile
 8011cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011cb8:	f383 8811 	msr	BASEPRI, r3
 8011cbc:	f3bf 8f6f 	isb	sy
 8011cc0:	f3bf 8f4f 	dsb	sy
 8011cc4:	61fb      	str	r3, [r7, #28]
}
 8011cc6:	bf00      	nop
 8011cc8:	e7fe      	b.n	8011cc8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8011cca:	23a8      	movs	r3, #168	; 0xa8
 8011ccc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8011cce:	693b      	ldr	r3, [r7, #16]
 8011cd0:	2ba8      	cmp	r3, #168	; 0xa8
 8011cd2:	d00a      	beq.n	8011cea <xTaskCreateStatic+0x66>
	__asm volatile
 8011cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011cd8:	f383 8811 	msr	BASEPRI, r3
 8011cdc:	f3bf 8f6f 	isb	sy
 8011ce0:	f3bf 8f4f 	dsb	sy
 8011ce4:	61bb      	str	r3, [r7, #24]
}
 8011ce6:	bf00      	nop
 8011ce8:	e7fe      	b.n	8011ce8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8011cea:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8011cec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011cee:	2b00      	cmp	r3, #0
 8011cf0:	d01e      	beq.n	8011d30 <xTaskCreateStatic+0xac>
 8011cf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011cf4:	2b00      	cmp	r3, #0
 8011cf6:	d01b      	beq.n	8011d30 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8011cf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011cfa:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8011cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cfe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011d00:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8011d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d04:	2202      	movs	r2, #2
 8011d06:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8011d0a:	2300      	movs	r3, #0
 8011d0c:	9303      	str	r3, [sp, #12]
 8011d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d10:	9302      	str	r3, [sp, #8]
 8011d12:	f107 0314 	add.w	r3, r7, #20
 8011d16:	9301      	str	r3, [sp, #4]
 8011d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d1a:	9300      	str	r3, [sp, #0]
 8011d1c:	683b      	ldr	r3, [r7, #0]
 8011d1e:	687a      	ldr	r2, [r7, #4]
 8011d20:	68b9      	ldr	r1, [r7, #8]
 8011d22:	68f8      	ldr	r0, [r7, #12]
 8011d24:	f000 f850 	bl	8011dc8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011d28:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011d2a:	f000 f8f3 	bl	8011f14 <prvAddNewTaskToReadyList>
 8011d2e:	e001      	b.n	8011d34 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8011d30:	2300      	movs	r3, #0
 8011d32:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8011d34:	697b      	ldr	r3, [r7, #20]
	}
 8011d36:	4618      	mov	r0, r3
 8011d38:	3728      	adds	r7, #40	; 0x28
 8011d3a:	46bd      	mov	sp, r7
 8011d3c:	bd80      	pop	{r7, pc}

08011d3e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8011d3e:	b580      	push	{r7, lr}
 8011d40:	b08c      	sub	sp, #48	; 0x30
 8011d42:	af04      	add	r7, sp, #16
 8011d44:	60f8      	str	r0, [r7, #12]
 8011d46:	60b9      	str	r1, [r7, #8]
 8011d48:	603b      	str	r3, [r7, #0]
 8011d4a:	4613      	mov	r3, r2
 8011d4c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8011d4e:	88fb      	ldrh	r3, [r7, #6]
 8011d50:	009b      	lsls	r3, r3, #2
 8011d52:	4618      	mov	r0, r3
 8011d54:	f7fe fa98 	bl	8010288 <pvPortMalloc>
 8011d58:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8011d5a:	697b      	ldr	r3, [r7, #20]
 8011d5c:	2b00      	cmp	r3, #0
 8011d5e:	d00e      	beq.n	8011d7e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8011d60:	20a8      	movs	r0, #168	; 0xa8
 8011d62:	f7fe fa91 	bl	8010288 <pvPortMalloc>
 8011d66:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8011d68:	69fb      	ldr	r3, [r7, #28]
 8011d6a:	2b00      	cmp	r3, #0
 8011d6c:	d003      	beq.n	8011d76 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8011d6e:	69fb      	ldr	r3, [r7, #28]
 8011d70:	697a      	ldr	r2, [r7, #20]
 8011d72:	631a      	str	r2, [r3, #48]	; 0x30
 8011d74:	e005      	b.n	8011d82 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8011d76:	6978      	ldr	r0, [r7, #20]
 8011d78:	f7fe fb52 	bl	8010420 <vPortFree>
 8011d7c:	e001      	b.n	8011d82 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8011d7e:	2300      	movs	r3, #0
 8011d80:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8011d82:	69fb      	ldr	r3, [r7, #28]
 8011d84:	2b00      	cmp	r3, #0
 8011d86:	d017      	beq.n	8011db8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8011d88:	69fb      	ldr	r3, [r7, #28]
 8011d8a:	2200      	movs	r2, #0
 8011d8c:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8011d90:	88fa      	ldrh	r2, [r7, #6]
 8011d92:	2300      	movs	r3, #0
 8011d94:	9303      	str	r3, [sp, #12]
 8011d96:	69fb      	ldr	r3, [r7, #28]
 8011d98:	9302      	str	r3, [sp, #8]
 8011d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d9c:	9301      	str	r3, [sp, #4]
 8011d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011da0:	9300      	str	r3, [sp, #0]
 8011da2:	683b      	ldr	r3, [r7, #0]
 8011da4:	68b9      	ldr	r1, [r7, #8]
 8011da6:	68f8      	ldr	r0, [r7, #12]
 8011da8:	f000 f80e 	bl	8011dc8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011dac:	69f8      	ldr	r0, [r7, #28]
 8011dae:	f000 f8b1 	bl	8011f14 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8011db2:	2301      	movs	r3, #1
 8011db4:	61bb      	str	r3, [r7, #24]
 8011db6:	e002      	b.n	8011dbe <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8011db8:	f04f 33ff 	mov.w	r3, #4294967295
 8011dbc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8011dbe:	69bb      	ldr	r3, [r7, #24]
	}
 8011dc0:	4618      	mov	r0, r3
 8011dc2:	3720      	adds	r7, #32
 8011dc4:	46bd      	mov	sp, r7
 8011dc6:	bd80      	pop	{r7, pc}

08011dc8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8011dc8:	b580      	push	{r7, lr}
 8011dca:	b088      	sub	sp, #32
 8011dcc:	af00      	add	r7, sp, #0
 8011dce:	60f8      	str	r0, [r7, #12]
 8011dd0:	60b9      	str	r1, [r7, #8]
 8011dd2:	607a      	str	r2, [r7, #4]
 8011dd4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8011dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011dd8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8011dda:	687b      	ldr	r3, [r7, #4]
 8011ddc:	009b      	lsls	r3, r3, #2
 8011dde:	461a      	mov	r2, r3
 8011de0:	21a5      	movs	r1, #165	; 0xa5
 8011de2:	f002 fb1c 	bl	801441e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8011de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011de8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011dea:	6879      	ldr	r1, [r7, #4]
 8011dec:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8011df0:	440b      	add	r3, r1
 8011df2:	009b      	lsls	r3, r3, #2
 8011df4:	4413      	add	r3, r2
 8011df6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8011df8:	69bb      	ldr	r3, [r7, #24]
 8011dfa:	f023 0307 	bic.w	r3, r3, #7
 8011dfe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8011e00:	69bb      	ldr	r3, [r7, #24]
 8011e02:	f003 0307 	and.w	r3, r3, #7
 8011e06:	2b00      	cmp	r3, #0
 8011e08:	d00a      	beq.n	8011e20 <prvInitialiseNewTask+0x58>
	__asm volatile
 8011e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e0e:	f383 8811 	msr	BASEPRI, r3
 8011e12:	f3bf 8f6f 	isb	sy
 8011e16:	f3bf 8f4f 	dsb	sy
 8011e1a:	617b      	str	r3, [r7, #20]
}
 8011e1c:	bf00      	nop
 8011e1e:	e7fe      	b.n	8011e1e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8011e20:	68bb      	ldr	r3, [r7, #8]
 8011e22:	2b00      	cmp	r3, #0
 8011e24:	d01f      	beq.n	8011e66 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8011e26:	2300      	movs	r3, #0
 8011e28:	61fb      	str	r3, [r7, #28]
 8011e2a:	e012      	b.n	8011e52 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8011e2c:	68ba      	ldr	r2, [r7, #8]
 8011e2e:	69fb      	ldr	r3, [r7, #28]
 8011e30:	4413      	add	r3, r2
 8011e32:	7819      	ldrb	r1, [r3, #0]
 8011e34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011e36:	69fb      	ldr	r3, [r7, #28]
 8011e38:	4413      	add	r3, r2
 8011e3a:	3334      	adds	r3, #52	; 0x34
 8011e3c:	460a      	mov	r2, r1
 8011e3e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8011e40:	68ba      	ldr	r2, [r7, #8]
 8011e42:	69fb      	ldr	r3, [r7, #28]
 8011e44:	4413      	add	r3, r2
 8011e46:	781b      	ldrb	r3, [r3, #0]
 8011e48:	2b00      	cmp	r3, #0
 8011e4a:	d006      	beq.n	8011e5a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8011e4c:	69fb      	ldr	r3, [r7, #28]
 8011e4e:	3301      	adds	r3, #1
 8011e50:	61fb      	str	r3, [r7, #28]
 8011e52:	69fb      	ldr	r3, [r7, #28]
 8011e54:	2b0f      	cmp	r3, #15
 8011e56:	d9e9      	bls.n	8011e2c <prvInitialiseNewTask+0x64>
 8011e58:	e000      	b.n	8011e5c <prvInitialiseNewTask+0x94>
			{
				break;
 8011e5a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8011e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e5e:	2200      	movs	r2, #0
 8011e60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8011e64:	e003      	b.n	8011e6e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8011e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e68:	2200      	movs	r2, #0
 8011e6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8011e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e70:	2b37      	cmp	r3, #55	; 0x37
 8011e72:	d901      	bls.n	8011e78 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8011e74:	2337      	movs	r3, #55	; 0x37
 8011e76:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8011e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011e7c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8011e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011e82:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8011e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e86:	2200      	movs	r2, #0
 8011e88:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8011e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e8c:	3304      	adds	r3, #4
 8011e8e:	4618      	mov	r0, r3
 8011e90:	f7fe fc04 	bl	801069c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8011e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e96:	3318      	adds	r3, #24
 8011e98:	4618      	mov	r0, r3
 8011e9a:	f7fe fbff 	bl	801069c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8011e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ea0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011ea2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ea6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8011eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011eac:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8011eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011eb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011eb2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8011eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011eb6:	2200      	movs	r2, #0
 8011eb8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8011ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ebe:	2200      	movs	r2, #0
 8011ec0:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8011ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ec6:	3354      	adds	r3, #84	; 0x54
 8011ec8:	224c      	movs	r2, #76	; 0x4c
 8011eca:	2100      	movs	r1, #0
 8011ecc:	4618      	mov	r0, r3
 8011ece:	f002 faa6 	bl	801441e <memset>
 8011ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ed4:	4a0c      	ldr	r2, [pc, #48]	; (8011f08 <prvInitialiseNewTask+0x140>)
 8011ed6:	659a      	str	r2, [r3, #88]	; 0x58
 8011ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011eda:	4a0c      	ldr	r2, [pc, #48]	; (8011f0c <prvInitialiseNewTask+0x144>)
 8011edc:	65da      	str	r2, [r3, #92]	; 0x5c
 8011ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ee0:	4a0b      	ldr	r2, [pc, #44]	; (8011f10 <prvInitialiseNewTask+0x148>)
 8011ee2:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8011ee4:	683a      	ldr	r2, [r7, #0]
 8011ee6:	68f9      	ldr	r1, [r7, #12]
 8011ee8:	69b8      	ldr	r0, [r7, #24]
 8011eea:	f7fe fc6b 	bl	80107c4 <pxPortInitialiseStack>
 8011eee:	4602      	mov	r2, r0
 8011ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ef2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8011ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ef6:	2b00      	cmp	r3, #0
 8011ef8:	d002      	beq.n	8011f00 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8011efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011efc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011efe:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011f00:	bf00      	nop
 8011f02:	3720      	adds	r7, #32
 8011f04:	46bd      	mov	sp, r7
 8011f06:	bd80      	pop	{r7, pc}
 8011f08:	2400560c 	.word	0x2400560c
 8011f0c:	24005674 	.word	0x24005674
 8011f10:	240056dc 	.word	0x240056dc

08011f14 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8011f14:	b580      	push	{r7, lr}
 8011f16:	b082      	sub	sp, #8
 8011f18:	af00      	add	r7, sp, #0
 8011f1a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8011f1c:	f7fe fd82 	bl	8010a24 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8011f20:	4b2d      	ldr	r3, [pc, #180]	; (8011fd8 <prvAddNewTaskToReadyList+0xc4>)
 8011f22:	681b      	ldr	r3, [r3, #0]
 8011f24:	3301      	adds	r3, #1
 8011f26:	4a2c      	ldr	r2, [pc, #176]	; (8011fd8 <prvAddNewTaskToReadyList+0xc4>)
 8011f28:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8011f2a:	4b2c      	ldr	r3, [pc, #176]	; (8011fdc <prvAddNewTaskToReadyList+0xc8>)
 8011f2c:	681b      	ldr	r3, [r3, #0]
 8011f2e:	2b00      	cmp	r3, #0
 8011f30:	d109      	bne.n	8011f46 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8011f32:	4a2a      	ldr	r2, [pc, #168]	; (8011fdc <prvAddNewTaskToReadyList+0xc8>)
 8011f34:	687b      	ldr	r3, [r7, #4]
 8011f36:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8011f38:	4b27      	ldr	r3, [pc, #156]	; (8011fd8 <prvAddNewTaskToReadyList+0xc4>)
 8011f3a:	681b      	ldr	r3, [r3, #0]
 8011f3c:	2b01      	cmp	r3, #1
 8011f3e:	d110      	bne.n	8011f62 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8011f40:	f000 fc26 	bl	8012790 <prvInitialiseTaskLists>
 8011f44:	e00d      	b.n	8011f62 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8011f46:	4b26      	ldr	r3, [pc, #152]	; (8011fe0 <prvAddNewTaskToReadyList+0xcc>)
 8011f48:	681b      	ldr	r3, [r3, #0]
 8011f4a:	2b00      	cmp	r3, #0
 8011f4c:	d109      	bne.n	8011f62 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8011f4e:	4b23      	ldr	r3, [pc, #140]	; (8011fdc <prvAddNewTaskToReadyList+0xc8>)
 8011f50:	681b      	ldr	r3, [r3, #0]
 8011f52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011f54:	687b      	ldr	r3, [r7, #4]
 8011f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f58:	429a      	cmp	r2, r3
 8011f5a:	d802      	bhi.n	8011f62 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8011f5c:	4a1f      	ldr	r2, [pc, #124]	; (8011fdc <prvAddNewTaskToReadyList+0xc8>)
 8011f5e:	687b      	ldr	r3, [r7, #4]
 8011f60:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8011f62:	4b20      	ldr	r3, [pc, #128]	; (8011fe4 <prvAddNewTaskToReadyList+0xd0>)
 8011f64:	681b      	ldr	r3, [r3, #0]
 8011f66:	3301      	adds	r3, #1
 8011f68:	4a1e      	ldr	r2, [pc, #120]	; (8011fe4 <prvAddNewTaskToReadyList+0xd0>)
 8011f6a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8011f6c:	4b1d      	ldr	r3, [pc, #116]	; (8011fe4 <prvAddNewTaskToReadyList+0xd0>)
 8011f6e:	681a      	ldr	r2, [r3, #0]
 8011f70:	687b      	ldr	r3, [r7, #4]
 8011f72:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8011f74:	687b      	ldr	r3, [r7, #4]
 8011f76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011f78:	4b1b      	ldr	r3, [pc, #108]	; (8011fe8 <prvAddNewTaskToReadyList+0xd4>)
 8011f7a:	681b      	ldr	r3, [r3, #0]
 8011f7c:	429a      	cmp	r2, r3
 8011f7e:	d903      	bls.n	8011f88 <prvAddNewTaskToReadyList+0x74>
 8011f80:	687b      	ldr	r3, [r7, #4]
 8011f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f84:	4a18      	ldr	r2, [pc, #96]	; (8011fe8 <prvAddNewTaskToReadyList+0xd4>)
 8011f86:	6013      	str	r3, [r2, #0]
 8011f88:	687b      	ldr	r3, [r7, #4]
 8011f8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011f8c:	4613      	mov	r3, r2
 8011f8e:	009b      	lsls	r3, r3, #2
 8011f90:	4413      	add	r3, r2
 8011f92:	009b      	lsls	r3, r3, #2
 8011f94:	4a15      	ldr	r2, [pc, #84]	; (8011fec <prvAddNewTaskToReadyList+0xd8>)
 8011f96:	441a      	add	r2, r3
 8011f98:	687b      	ldr	r3, [r7, #4]
 8011f9a:	3304      	adds	r3, #4
 8011f9c:	4619      	mov	r1, r3
 8011f9e:	4610      	mov	r0, r2
 8011fa0:	f7fe fb89 	bl	80106b6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8011fa4:	f7fe fd6e 	bl	8010a84 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8011fa8:	4b0d      	ldr	r3, [pc, #52]	; (8011fe0 <prvAddNewTaskToReadyList+0xcc>)
 8011faa:	681b      	ldr	r3, [r3, #0]
 8011fac:	2b00      	cmp	r3, #0
 8011fae:	d00e      	beq.n	8011fce <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8011fb0:	4b0a      	ldr	r3, [pc, #40]	; (8011fdc <prvAddNewTaskToReadyList+0xc8>)
 8011fb2:	681b      	ldr	r3, [r3, #0]
 8011fb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011fb6:	687b      	ldr	r3, [r7, #4]
 8011fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011fba:	429a      	cmp	r2, r3
 8011fbc:	d207      	bcs.n	8011fce <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8011fbe:	4b0c      	ldr	r3, [pc, #48]	; (8011ff0 <prvAddNewTaskToReadyList+0xdc>)
 8011fc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011fc4:	601a      	str	r2, [r3, #0]
 8011fc6:	f3bf 8f4f 	dsb	sy
 8011fca:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011fce:	bf00      	nop
 8011fd0:	3708      	adds	r7, #8
 8011fd2:	46bd      	mov	sp, r7
 8011fd4:	bd80      	pop	{r7, pc}
 8011fd6:	bf00      	nop
 8011fd8:	240054ac 	.word	0x240054ac
 8011fdc:	24004fd8 	.word	0x24004fd8
 8011fe0:	240054b8 	.word	0x240054b8
 8011fe4:	240054c8 	.word	0x240054c8
 8011fe8:	240054b4 	.word	0x240054b4
 8011fec:	24004fdc 	.word	0x24004fdc
 8011ff0:	e000ed04 	.word	0xe000ed04

08011ff4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8011ff4:	b580      	push	{r7, lr}
 8011ff6:	b084      	sub	sp, #16
 8011ff8:	af00      	add	r7, sp, #0
 8011ffa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8011ffc:	2300      	movs	r3, #0
 8011ffe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8012000:	687b      	ldr	r3, [r7, #4]
 8012002:	2b00      	cmp	r3, #0
 8012004:	d017      	beq.n	8012036 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8012006:	4b13      	ldr	r3, [pc, #76]	; (8012054 <vTaskDelay+0x60>)
 8012008:	681b      	ldr	r3, [r3, #0]
 801200a:	2b00      	cmp	r3, #0
 801200c:	d00a      	beq.n	8012024 <vTaskDelay+0x30>
	__asm volatile
 801200e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012012:	f383 8811 	msr	BASEPRI, r3
 8012016:	f3bf 8f6f 	isb	sy
 801201a:	f3bf 8f4f 	dsb	sy
 801201e:	60bb      	str	r3, [r7, #8]
}
 8012020:	bf00      	nop
 8012022:	e7fe      	b.n	8012022 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8012024:	f000 f88a 	bl	801213c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8012028:	2100      	movs	r1, #0
 801202a:	6878      	ldr	r0, [r7, #4]
 801202c:	f000 fdfc 	bl	8012c28 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8012030:	f000 f892 	bl	8012158 <xTaskResumeAll>
 8012034:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8012036:	68fb      	ldr	r3, [r7, #12]
 8012038:	2b00      	cmp	r3, #0
 801203a:	d107      	bne.n	801204c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 801203c:	4b06      	ldr	r3, [pc, #24]	; (8012058 <vTaskDelay+0x64>)
 801203e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012042:	601a      	str	r2, [r3, #0]
 8012044:	f3bf 8f4f 	dsb	sy
 8012048:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801204c:	bf00      	nop
 801204e:	3710      	adds	r7, #16
 8012050:	46bd      	mov	sp, r7
 8012052:	bd80      	pop	{r7, pc}
 8012054:	240054d4 	.word	0x240054d4
 8012058:	e000ed04 	.word	0xe000ed04

0801205c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 801205c:	b580      	push	{r7, lr}
 801205e:	b08a      	sub	sp, #40	; 0x28
 8012060:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8012062:	2300      	movs	r3, #0
 8012064:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8012066:	2300      	movs	r3, #0
 8012068:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801206a:	463a      	mov	r2, r7
 801206c:	1d39      	adds	r1, r7, #4
 801206e:	f107 0308 	add.w	r3, r7, #8
 8012072:	4618      	mov	r0, r3
 8012074:	f7fe f8d4 	bl	8010220 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8012078:	6839      	ldr	r1, [r7, #0]
 801207a:	687b      	ldr	r3, [r7, #4]
 801207c:	68ba      	ldr	r2, [r7, #8]
 801207e:	9202      	str	r2, [sp, #8]
 8012080:	9301      	str	r3, [sp, #4]
 8012082:	2300      	movs	r3, #0
 8012084:	9300      	str	r3, [sp, #0]
 8012086:	2300      	movs	r3, #0
 8012088:	460a      	mov	r2, r1
 801208a:	4924      	ldr	r1, [pc, #144]	; (801211c <vTaskStartScheduler+0xc0>)
 801208c:	4824      	ldr	r0, [pc, #144]	; (8012120 <vTaskStartScheduler+0xc4>)
 801208e:	f7ff fdf9 	bl	8011c84 <xTaskCreateStatic>
 8012092:	4603      	mov	r3, r0
 8012094:	4a23      	ldr	r2, [pc, #140]	; (8012124 <vTaskStartScheduler+0xc8>)
 8012096:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8012098:	4b22      	ldr	r3, [pc, #136]	; (8012124 <vTaskStartScheduler+0xc8>)
 801209a:	681b      	ldr	r3, [r3, #0]
 801209c:	2b00      	cmp	r3, #0
 801209e:	d002      	beq.n	80120a6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80120a0:	2301      	movs	r3, #1
 80120a2:	617b      	str	r3, [r7, #20]
 80120a4:	e001      	b.n	80120aa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80120a6:	2300      	movs	r3, #0
 80120a8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80120aa:	697b      	ldr	r3, [r7, #20]
 80120ac:	2b01      	cmp	r3, #1
 80120ae:	d102      	bne.n	80120b6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80120b0:	f000 fe0e 	bl	8012cd0 <xTimerCreateTimerTask>
 80120b4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80120b6:	697b      	ldr	r3, [r7, #20]
 80120b8:	2b01      	cmp	r3, #1
 80120ba:	d11b      	bne.n	80120f4 <vTaskStartScheduler+0x98>
	__asm volatile
 80120bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120c0:	f383 8811 	msr	BASEPRI, r3
 80120c4:	f3bf 8f6f 	isb	sy
 80120c8:	f3bf 8f4f 	dsb	sy
 80120cc:	613b      	str	r3, [r7, #16]
}
 80120ce:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80120d0:	4b15      	ldr	r3, [pc, #84]	; (8012128 <vTaskStartScheduler+0xcc>)
 80120d2:	681b      	ldr	r3, [r3, #0]
 80120d4:	3354      	adds	r3, #84	; 0x54
 80120d6:	4a15      	ldr	r2, [pc, #84]	; (801212c <vTaskStartScheduler+0xd0>)
 80120d8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80120da:	4b15      	ldr	r3, [pc, #84]	; (8012130 <vTaskStartScheduler+0xd4>)
 80120dc:	f04f 32ff 	mov.w	r2, #4294967295
 80120e0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80120e2:	4b14      	ldr	r3, [pc, #80]	; (8012134 <vTaskStartScheduler+0xd8>)
 80120e4:	2201      	movs	r2, #1
 80120e6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80120e8:	4b13      	ldr	r3, [pc, #76]	; (8012138 <vTaskStartScheduler+0xdc>)
 80120ea:	2200      	movs	r2, #0
 80120ec:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80120ee:	f7fe fbf7 	bl	80108e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80120f2:	e00e      	b.n	8012112 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80120f4:	697b      	ldr	r3, [r7, #20]
 80120f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80120fa:	d10a      	bne.n	8012112 <vTaskStartScheduler+0xb6>
	__asm volatile
 80120fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012100:	f383 8811 	msr	BASEPRI, r3
 8012104:	f3bf 8f6f 	isb	sy
 8012108:	f3bf 8f4f 	dsb	sy
 801210c:	60fb      	str	r3, [r7, #12]
}
 801210e:	bf00      	nop
 8012110:	e7fe      	b.n	8012110 <vTaskStartScheduler+0xb4>
}
 8012112:	bf00      	nop
 8012114:	3718      	adds	r7, #24
 8012116:	46bd      	mov	sp, r7
 8012118:	bd80      	pop	{r7, pc}
 801211a:	bf00      	nop
 801211c:	08017b18 	.word	0x08017b18
 8012120:	08012761 	.word	0x08012761
 8012124:	240054d0 	.word	0x240054d0
 8012128:	24004fd8 	.word	0x24004fd8
 801212c:	2400006c 	.word	0x2400006c
 8012130:	240054cc 	.word	0x240054cc
 8012134:	240054b8 	.word	0x240054b8
 8012138:	240054b0 	.word	0x240054b0

0801213c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 801213c:	b480      	push	{r7}
 801213e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8012140:	4b04      	ldr	r3, [pc, #16]	; (8012154 <vTaskSuspendAll+0x18>)
 8012142:	681b      	ldr	r3, [r3, #0]
 8012144:	3301      	adds	r3, #1
 8012146:	4a03      	ldr	r2, [pc, #12]	; (8012154 <vTaskSuspendAll+0x18>)
 8012148:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801214a:	bf00      	nop
 801214c:	46bd      	mov	sp, r7
 801214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012152:	4770      	bx	lr
 8012154:	240054d4 	.word	0x240054d4

08012158 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8012158:	b580      	push	{r7, lr}
 801215a:	b084      	sub	sp, #16
 801215c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801215e:	2300      	movs	r3, #0
 8012160:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8012162:	2300      	movs	r3, #0
 8012164:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8012166:	4b42      	ldr	r3, [pc, #264]	; (8012270 <xTaskResumeAll+0x118>)
 8012168:	681b      	ldr	r3, [r3, #0]
 801216a:	2b00      	cmp	r3, #0
 801216c:	d10a      	bne.n	8012184 <xTaskResumeAll+0x2c>
	__asm volatile
 801216e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012172:	f383 8811 	msr	BASEPRI, r3
 8012176:	f3bf 8f6f 	isb	sy
 801217a:	f3bf 8f4f 	dsb	sy
 801217e:	603b      	str	r3, [r7, #0]
}
 8012180:	bf00      	nop
 8012182:	e7fe      	b.n	8012182 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8012184:	f7fe fc4e 	bl	8010a24 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8012188:	4b39      	ldr	r3, [pc, #228]	; (8012270 <xTaskResumeAll+0x118>)
 801218a:	681b      	ldr	r3, [r3, #0]
 801218c:	3b01      	subs	r3, #1
 801218e:	4a38      	ldr	r2, [pc, #224]	; (8012270 <xTaskResumeAll+0x118>)
 8012190:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012192:	4b37      	ldr	r3, [pc, #220]	; (8012270 <xTaskResumeAll+0x118>)
 8012194:	681b      	ldr	r3, [r3, #0]
 8012196:	2b00      	cmp	r3, #0
 8012198:	d162      	bne.n	8012260 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801219a:	4b36      	ldr	r3, [pc, #216]	; (8012274 <xTaskResumeAll+0x11c>)
 801219c:	681b      	ldr	r3, [r3, #0]
 801219e:	2b00      	cmp	r3, #0
 80121a0:	d05e      	beq.n	8012260 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80121a2:	e02f      	b.n	8012204 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80121a4:	4b34      	ldr	r3, [pc, #208]	; (8012278 <xTaskResumeAll+0x120>)
 80121a6:	68db      	ldr	r3, [r3, #12]
 80121a8:	68db      	ldr	r3, [r3, #12]
 80121aa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80121ac:	68fb      	ldr	r3, [r7, #12]
 80121ae:	3318      	adds	r3, #24
 80121b0:	4618      	mov	r0, r3
 80121b2:	f7fe fadd 	bl	8010770 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80121b6:	68fb      	ldr	r3, [r7, #12]
 80121b8:	3304      	adds	r3, #4
 80121ba:	4618      	mov	r0, r3
 80121bc:	f7fe fad8 	bl	8010770 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80121c0:	68fb      	ldr	r3, [r7, #12]
 80121c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80121c4:	4b2d      	ldr	r3, [pc, #180]	; (801227c <xTaskResumeAll+0x124>)
 80121c6:	681b      	ldr	r3, [r3, #0]
 80121c8:	429a      	cmp	r2, r3
 80121ca:	d903      	bls.n	80121d4 <xTaskResumeAll+0x7c>
 80121cc:	68fb      	ldr	r3, [r7, #12]
 80121ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80121d0:	4a2a      	ldr	r2, [pc, #168]	; (801227c <xTaskResumeAll+0x124>)
 80121d2:	6013      	str	r3, [r2, #0]
 80121d4:	68fb      	ldr	r3, [r7, #12]
 80121d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80121d8:	4613      	mov	r3, r2
 80121da:	009b      	lsls	r3, r3, #2
 80121dc:	4413      	add	r3, r2
 80121de:	009b      	lsls	r3, r3, #2
 80121e0:	4a27      	ldr	r2, [pc, #156]	; (8012280 <xTaskResumeAll+0x128>)
 80121e2:	441a      	add	r2, r3
 80121e4:	68fb      	ldr	r3, [r7, #12]
 80121e6:	3304      	adds	r3, #4
 80121e8:	4619      	mov	r1, r3
 80121ea:	4610      	mov	r0, r2
 80121ec:	f7fe fa63 	bl	80106b6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80121f0:	68fb      	ldr	r3, [r7, #12]
 80121f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80121f4:	4b23      	ldr	r3, [pc, #140]	; (8012284 <xTaskResumeAll+0x12c>)
 80121f6:	681b      	ldr	r3, [r3, #0]
 80121f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80121fa:	429a      	cmp	r2, r3
 80121fc:	d302      	bcc.n	8012204 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80121fe:	4b22      	ldr	r3, [pc, #136]	; (8012288 <xTaskResumeAll+0x130>)
 8012200:	2201      	movs	r2, #1
 8012202:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8012204:	4b1c      	ldr	r3, [pc, #112]	; (8012278 <xTaskResumeAll+0x120>)
 8012206:	681b      	ldr	r3, [r3, #0]
 8012208:	2b00      	cmp	r3, #0
 801220a:	d1cb      	bne.n	80121a4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801220c:	68fb      	ldr	r3, [r7, #12]
 801220e:	2b00      	cmp	r3, #0
 8012210:	d001      	beq.n	8012216 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8012212:	f000 fb5f 	bl	80128d4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8012216:	4b1d      	ldr	r3, [pc, #116]	; (801228c <xTaskResumeAll+0x134>)
 8012218:	681b      	ldr	r3, [r3, #0]
 801221a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 801221c:	687b      	ldr	r3, [r7, #4]
 801221e:	2b00      	cmp	r3, #0
 8012220:	d010      	beq.n	8012244 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8012222:	f000 f847 	bl	80122b4 <xTaskIncrementTick>
 8012226:	4603      	mov	r3, r0
 8012228:	2b00      	cmp	r3, #0
 801222a:	d002      	beq.n	8012232 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 801222c:	4b16      	ldr	r3, [pc, #88]	; (8012288 <xTaskResumeAll+0x130>)
 801222e:	2201      	movs	r2, #1
 8012230:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8012232:	687b      	ldr	r3, [r7, #4]
 8012234:	3b01      	subs	r3, #1
 8012236:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8012238:	687b      	ldr	r3, [r7, #4]
 801223a:	2b00      	cmp	r3, #0
 801223c:	d1f1      	bne.n	8012222 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 801223e:	4b13      	ldr	r3, [pc, #76]	; (801228c <xTaskResumeAll+0x134>)
 8012240:	2200      	movs	r2, #0
 8012242:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8012244:	4b10      	ldr	r3, [pc, #64]	; (8012288 <xTaskResumeAll+0x130>)
 8012246:	681b      	ldr	r3, [r3, #0]
 8012248:	2b00      	cmp	r3, #0
 801224a:	d009      	beq.n	8012260 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801224c:	2301      	movs	r3, #1
 801224e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8012250:	4b0f      	ldr	r3, [pc, #60]	; (8012290 <xTaskResumeAll+0x138>)
 8012252:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012256:	601a      	str	r2, [r3, #0]
 8012258:	f3bf 8f4f 	dsb	sy
 801225c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8012260:	f7fe fc10 	bl	8010a84 <vPortExitCritical>

	return xAlreadyYielded;
 8012264:	68bb      	ldr	r3, [r7, #8]
}
 8012266:	4618      	mov	r0, r3
 8012268:	3710      	adds	r7, #16
 801226a:	46bd      	mov	sp, r7
 801226c:	bd80      	pop	{r7, pc}
 801226e:	bf00      	nop
 8012270:	240054d4 	.word	0x240054d4
 8012274:	240054ac 	.word	0x240054ac
 8012278:	2400546c 	.word	0x2400546c
 801227c:	240054b4 	.word	0x240054b4
 8012280:	24004fdc 	.word	0x24004fdc
 8012284:	24004fd8 	.word	0x24004fd8
 8012288:	240054c0 	.word	0x240054c0
 801228c:	240054bc 	.word	0x240054bc
 8012290:	e000ed04 	.word	0xe000ed04

08012294 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8012294:	b480      	push	{r7}
 8012296:	b083      	sub	sp, #12
 8012298:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801229a:	4b05      	ldr	r3, [pc, #20]	; (80122b0 <xTaskGetTickCount+0x1c>)
 801229c:	681b      	ldr	r3, [r3, #0]
 801229e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80122a0:	687b      	ldr	r3, [r7, #4]
}
 80122a2:	4618      	mov	r0, r3
 80122a4:	370c      	adds	r7, #12
 80122a6:	46bd      	mov	sp, r7
 80122a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122ac:	4770      	bx	lr
 80122ae:	bf00      	nop
 80122b0:	240054b0 	.word	0x240054b0

080122b4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80122b4:	b580      	push	{r7, lr}
 80122b6:	b086      	sub	sp, #24
 80122b8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80122ba:	2300      	movs	r3, #0
 80122bc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80122be:	4b4f      	ldr	r3, [pc, #316]	; (80123fc <xTaskIncrementTick+0x148>)
 80122c0:	681b      	ldr	r3, [r3, #0]
 80122c2:	2b00      	cmp	r3, #0
 80122c4:	f040 808f 	bne.w	80123e6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80122c8:	4b4d      	ldr	r3, [pc, #308]	; (8012400 <xTaskIncrementTick+0x14c>)
 80122ca:	681b      	ldr	r3, [r3, #0]
 80122cc:	3301      	adds	r3, #1
 80122ce:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80122d0:	4a4b      	ldr	r2, [pc, #300]	; (8012400 <xTaskIncrementTick+0x14c>)
 80122d2:	693b      	ldr	r3, [r7, #16]
 80122d4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80122d6:	693b      	ldr	r3, [r7, #16]
 80122d8:	2b00      	cmp	r3, #0
 80122da:	d120      	bne.n	801231e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80122dc:	4b49      	ldr	r3, [pc, #292]	; (8012404 <xTaskIncrementTick+0x150>)
 80122de:	681b      	ldr	r3, [r3, #0]
 80122e0:	681b      	ldr	r3, [r3, #0]
 80122e2:	2b00      	cmp	r3, #0
 80122e4:	d00a      	beq.n	80122fc <xTaskIncrementTick+0x48>
	__asm volatile
 80122e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122ea:	f383 8811 	msr	BASEPRI, r3
 80122ee:	f3bf 8f6f 	isb	sy
 80122f2:	f3bf 8f4f 	dsb	sy
 80122f6:	603b      	str	r3, [r7, #0]
}
 80122f8:	bf00      	nop
 80122fa:	e7fe      	b.n	80122fa <xTaskIncrementTick+0x46>
 80122fc:	4b41      	ldr	r3, [pc, #260]	; (8012404 <xTaskIncrementTick+0x150>)
 80122fe:	681b      	ldr	r3, [r3, #0]
 8012300:	60fb      	str	r3, [r7, #12]
 8012302:	4b41      	ldr	r3, [pc, #260]	; (8012408 <xTaskIncrementTick+0x154>)
 8012304:	681b      	ldr	r3, [r3, #0]
 8012306:	4a3f      	ldr	r2, [pc, #252]	; (8012404 <xTaskIncrementTick+0x150>)
 8012308:	6013      	str	r3, [r2, #0]
 801230a:	4a3f      	ldr	r2, [pc, #252]	; (8012408 <xTaskIncrementTick+0x154>)
 801230c:	68fb      	ldr	r3, [r7, #12]
 801230e:	6013      	str	r3, [r2, #0]
 8012310:	4b3e      	ldr	r3, [pc, #248]	; (801240c <xTaskIncrementTick+0x158>)
 8012312:	681b      	ldr	r3, [r3, #0]
 8012314:	3301      	adds	r3, #1
 8012316:	4a3d      	ldr	r2, [pc, #244]	; (801240c <xTaskIncrementTick+0x158>)
 8012318:	6013      	str	r3, [r2, #0]
 801231a:	f000 fadb 	bl	80128d4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801231e:	4b3c      	ldr	r3, [pc, #240]	; (8012410 <xTaskIncrementTick+0x15c>)
 8012320:	681b      	ldr	r3, [r3, #0]
 8012322:	693a      	ldr	r2, [r7, #16]
 8012324:	429a      	cmp	r2, r3
 8012326:	d349      	bcc.n	80123bc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012328:	4b36      	ldr	r3, [pc, #216]	; (8012404 <xTaskIncrementTick+0x150>)
 801232a:	681b      	ldr	r3, [r3, #0]
 801232c:	681b      	ldr	r3, [r3, #0]
 801232e:	2b00      	cmp	r3, #0
 8012330:	d104      	bne.n	801233c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012332:	4b37      	ldr	r3, [pc, #220]	; (8012410 <xTaskIncrementTick+0x15c>)
 8012334:	f04f 32ff 	mov.w	r2, #4294967295
 8012338:	601a      	str	r2, [r3, #0]
					break;
 801233a:	e03f      	b.n	80123bc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801233c:	4b31      	ldr	r3, [pc, #196]	; (8012404 <xTaskIncrementTick+0x150>)
 801233e:	681b      	ldr	r3, [r3, #0]
 8012340:	68db      	ldr	r3, [r3, #12]
 8012342:	68db      	ldr	r3, [r3, #12]
 8012344:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8012346:	68bb      	ldr	r3, [r7, #8]
 8012348:	685b      	ldr	r3, [r3, #4]
 801234a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801234c:	693a      	ldr	r2, [r7, #16]
 801234e:	687b      	ldr	r3, [r7, #4]
 8012350:	429a      	cmp	r2, r3
 8012352:	d203      	bcs.n	801235c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8012354:	4a2e      	ldr	r2, [pc, #184]	; (8012410 <xTaskIncrementTick+0x15c>)
 8012356:	687b      	ldr	r3, [r7, #4]
 8012358:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801235a:	e02f      	b.n	80123bc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801235c:	68bb      	ldr	r3, [r7, #8]
 801235e:	3304      	adds	r3, #4
 8012360:	4618      	mov	r0, r3
 8012362:	f7fe fa05 	bl	8010770 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8012366:	68bb      	ldr	r3, [r7, #8]
 8012368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801236a:	2b00      	cmp	r3, #0
 801236c:	d004      	beq.n	8012378 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801236e:	68bb      	ldr	r3, [r7, #8]
 8012370:	3318      	adds	r3, #24
 8012372:	4618      	mov	r0, r3
 8012374:	f7fe f9fc 	bl	8010770 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8012378:	68bb      	ldr	r3, [r7, #8]
 801237a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801237c:	4b25      	ldr	r3, [pc, #148]	; (8012414 <xTaskIncrementTick+0x160>)
 801237e:	681b      	ldr	r3, [r3, #0]
 8012380:	429a      	cmp	r2, r3
 8012382:	d903      	bls.n	801238c <xTaskIncrementTick+0xd8>
 8012384:	68bb      	ldr	r3, [r7, #8]
 8012386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012388:	4a22      	ldr	r2, [pc, #136]	; (8012414 <xTaskIncrementTick+0x160>)
 801238a:	6013      	str	r3, [r2, #0]
 801238c:	68bb      	ldr	r3, [r7, #8]
 801238e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012390:	4613      	mov	r3, r2
 8012392:	009b      	lsls	r3, r3, #2
 8012394:	4413      	add	r3, r2
 8012396:	009b      	lsls	r3, r3, #2
 8012398:	4a1f      	ldr	r2, [pc, #124]	; (8012418 <xTaskIncrementTick+0x164>)
 801239a:	441a      	add	r2, r3
 801239c:	68bb      	ldr	r3, [r7, #8]
 801239e:	3304      	adds	r3, #4
 80123a0:	4619      	mov	r1, r3
 80123a2:	4610      	mov	r0, r2
 80123a4:	f7fe f987 	bl	80106b6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80123a8:	68bb      	ldr	r3, [r7, #8]
 80123aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80123ac:	4b1b      	ldr	r3, [pc, #108]	; (801241c <xTaskIncrementTick+0x168>)
 80123ae:	681b      	ldr	r3, [r3, #0]
 80123b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80123b2:	429a      	cmp	r2, r3
 80123b4:	d3b8      	bcc.n	8012328 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80123b6:	2301      	movs	r3, #1
 80123b8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80123ba:	e7b5      	b.n	8012328 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80123bc:	4b17      	ldr	r3, [pc, #92]	; (801241c <xTaskIncrementTick+0x168>)
 80123be:	681b      	ldr	r3, [r3, #0]
 80123c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80123c2:	4915      	ldr	r1, [pc, #84]	; (8012418 <xTaskIncrementTick+0x164>)
 80123c4:	4613      	mov	r3, r2
 80123c6:	009b      	lsls	r3, r3, #2
 80123c8:	4413      	add	r3, r2
 80123ca:	009b      	lsls	r3, r3, #2
 80123cc:	440b      	add	r3, r1
 80123ce:	681b      	ldr	r3, [r3, #0]
 80123d0:	2b01      	cmp	r3, #1
 80123d2:	d901      	bls.n	80123d8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80123d4:	2301      	movs	r3, #1
 80123d6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80123d8:	4b11      	ldr	r3, [pc, #68]	; (8012420 <xTaskIncrementTick+0x16c>)
 80123da:	681b      	ldr	r3, [r3, #0]
 80123dc:	2b00      	cmp	r3, #0
 80123de:	d007      	beq.n	80123f0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80123e0:	2301      	movs	r3, #1
 80123e2:	617b      	str	r3, [r7, #20]
 80123e4:	e004      	b.n	80123f0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80123e6:	4b0f      	ldr	r3, [pc, #60]	; (8012424 <xTaskIncrementTick+0x170>)
 80123e8:	681b      	ldr	r3, [r3, #0]
 80123ea:	3301      	adds	r3, #1
 80123ec:	4a0d      	ldr	r2, [pc, #52]	; (8012424 <xTaskIncrementTick+0x170>)
 80123ee:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80123f0:	697b      	ldr	r3, [r7, #20]
}
 80123f2:	4618      	mov	r0, r3
 80123f4:	3718      	adds	r7, #24
 80123f6:	46bd      	mov	sp, r7
 80123f8:	bd80      	pop	{r7, pc}
 80123fa:	bf00      	nop
 80123fc:	240054d4 	.word	0x240054d4
 8012400:	240054b0 	.word	0x240054b0
 8012404:	24005464 	.word	0x24005464
 8012408:	24005468 	.word	0x24005468
 801240c:	240054c4 	.word	0x240054c4
 8012410:	240054cc 	.word	0x240054cc
 8012414:	240054b4 	.word	0x240054b4
 8012418:	24004fdc 	.word	0x24004fdc
 801241c:	24004fd8 	.word	0x24004fd8
 8012420:	240054c0 	.word	0x240054c0
 8012424:	240054bc 	.word	0x240054bc

08012428 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8012428:	b480      	push	{r7}
 801242a:	b085      	sub	sp, #20
 801242c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801242e:	4b2a      	ldr	r3, [pc, #168]	; (80124d8 <vTaskSwitchContext+0xb0>)
 8012430:	681b      	ldr	r3, [r3, #0]
 8012432:	2b00      	cmp	r3, #0
 8012434:	d003      	beq.n	801243e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8012436:	4b29      	ldr	r3, [pc, #164]	; (80124dc <vTaskSwitchContext+0xb4>)
 8012438:	2201      	movs	r2, #1
 801243a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 801243c:	e046      	b.n	80124cc <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 801243e:	4b27      	ldr	r3, [pc, #156]	; (80124dc <vTaskSwitchContext+0xb4>)
 8012440:	2200      	movs	r2, #0
 8012442:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012444:	4b26      	ldr	r3, [pc, #152]	; (80124e0 <vTaskSwitchContext+0xb8>)
 8012446:	681b      	ldr	r3, [r3, #0]
 8012448:	60fb      	str	r3, [r7, #12]
 801244a:	e010      	b.n	801246e <vTaskSwitchContext+0x46>
 801244c:	68fb      	ldr	r3, [r7, #12]
 801244e:	2b00      	cmp	r3, #0
 8012450:	d10a      	bne.n	8012468 <vTaskSwitchContext+0x40>
	__asm volatile
 8012452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012456:	f383 8811 	msr	BASEPRI, r3
 801245a:	f3bf 8f6f 	isb	sy
 801245e:	f3bf 8f4f 	dsb	sy
 8012462:	607b      	str	r3, [r7, #4]
}
 8012464:	bf00      	nop
 8012466:	e7fe      	b.n	8012466 <vTaskSwitchContext+0x3e>
 8012468:	68fb      	ldr	r3, [r7, #12]
 801246a:	3b01      	subs	r3, #1
 801246c:	60fb      	str	r3, [r7, #12]
 801246e:	491d      	ldr	r1, [pc, #116]	; (80124e4 <vTaskSwitchContext+0xbc>)
 8012470:	68fa      	ldr	r2, [r7, #12]
 8012472:	4613      	mov	r3, r2
 8012474:	009b      	lsls	r3, r3, #2
 8012476:	4413      	add	r3, r2
 8012478:	009b      	lsls	r3, r3, #2
 801247a:	440b      	add	r3, r1
 801247c:	681b      	ldr	r3, [r3, #0]
 801247e:	2b00      	cmp	r3, #0
 8012480:	d0e4      	beq.n	801244c <vTaskSwitchContext+0x24>
 8012482:	68fa      	ldr	r2, [r7, #12]
 8012484:	4613      	mov	r3, r2
 8012486:	009b      	lsls	r3, r3, #2
 8012488:	4413      	add	r3, r2
 801248a:	009b      	lsls	r3, r3, #2
 801248c:	4a15      	ldr	r2, [pc, #84]	; (80124e4 <vTaskSwitchContext+0xbc>)
 801248e:	4413      	add	r3, r2
 8012490:	60bb      	str	r3, [r7, #8]
 8012492:	68bb      	ldr	r3, [r7, #8]
 8012494:	685b      	ldr	r3, [r3, #4]
 8012496:	685a      	ldr	r2, [r3, #4]
 8012498:	68bb      	ldr	r3, [r7, #8]
 801249a:	605a      	str	r2, [r3, #4]
 801249c:	68bb      	ldr	r3, [r7, #8]
 801249e:	685a      	ldr	r2, [r3, #4]
 80124a0:	68bb      	ldr	r3, [r7, #8]
 80124a2:	3308      	adds	r3, #8
 80124a4:	429a      	cmp	r2, r3
 80124a6:	d104      	bne.n	80124b2 <vTaskSwitchContext+0x8a>
 80124a8:	68bb      	ldr	r3, [r7, #8]
 80124aa:	685b      	ldr	r3, [r3, #4]
 80124ac:	685a      	ldr	r2, [r3, #4]
 80124ae:	68bb      	ldr	r3, [r7, #8]
 80124b0:	605a      	str	r2, [r3, #4]
 80124b2:	68bb      	ldr	r3, [r7, #8]
 80124b4:	685b      	ldr	r3, [r3, #4]
 80124b6:	68db      	ldr	r3, [r3, #12]
 80124b8:	4a0b      	ldr	r2, [pc, #44]	; (80124e8 <vTaskSwitchContext+0xc0>)
 80124ba:	6013      	str	r3, [r2, #0]
 80124bc:	4a08      	ldr	r2, [pc, #32]	; (80124e0 <vTaskSwitchContext+0xb8>)
 80124be:	68fb      	ldr	r3, [r7, #12]
 80124c0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80124c2:	4b09      	ldr	r3, [pc, #36]	; (80124e8 <vTaskSwitchContext+0xc0>)
 80124c4:	681b      	ldr	r3, [r3, #0]
 80124c6:	3354      	adds	r3, #84	; 0x54
 80124c8:	4a08      	ldr	r2, [pc, #32]	; (80124ec <vTaskSwitchContext+0xc4>)
 80124ca:	6013      	str	r3, [r2, #0]
}
 80124cc:	bf00      	nop
 80124ce:	3714      	adds	r7, #20
 80124d0:	46bd      	mov	sp, r7
 80124d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124d6:	4770      	bx	lr
 80124d8:	240054d4 	.word	0x240054d4
 80124dc:	240054c0 	.word	0x240054c0
 80124e0:	240054b4 	.word	0x240054b4
 80124e4:	24004fdc 	.word	0x24004fdc
 80124e8:	24004fd8 	.word	0x24004fd8
 80124ec:	2400006c 	.word	0x2400006c

080124f0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80124f0:	b580      	push	{r7, lr}
 80124f2:	b084      	sub	sp, #16
 80124f4:	af00      	add	r7, sp, #0
 80124f6:	6078      	str	r0, [r7, #4]
 80124f8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80124fa:	687b      	ldr	r3, [r7, #4]
 80124fc:	2b00      	cmp	r3, #0
 80124fe:	d10a      	bne.n	8012516 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8012500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012504:	f383 8811 	msr	BASEPRI, r3
 8012508:	f3bf 8f6f 	isb	sy
 801250c:	f3bf 8f4f 	dsb	sy
 8012510:	60fb      	str	r3, [r7, #12]
}
 8012512:	bf00      	nop
 8012514:	e7fe      	b.n	8012514 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8012516:	4b07      	ldr	r3, [pc, #28]	; (8012534 <vTaskPlaceOnEventList+0x44>)
 8012518:	681b      	ldr	r3, [r3, #0]
 801251a:	3318      	adds	r3, #24
 801251c:	4619      	mov	r1, r3
 801251e:	6878      	ldr	r0, [r7, #4]
 8012520:	f7fe f8ed 	bl	80106fe <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8012524:	2101      	movs	r1, #1
 8012526:	6838      	ldr	r0, [r7, #0]
 8012528:	f000 fb7e 	bl	8012c28 <prvAddCurrentTaskToDelayedList>
}
 801252c:	bf00      	nop
 801252e:	3710      	adds	r7, #16
 8012530:	46bd      	mov	sp, r7
 8012532:	bd80      	pop	{r7, pc}
 8012534:	24004fd8 	.word	0x24004fd8

08012538 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8012538:	b580      	push	{r7, lr}
 801253a:	b086      	sub	sp, #24
 801253c:	af00      	add	r7, sp, #0
 801253e:	60f8      	str	r0, [r7, #12]
 8012540:	60b9      	str	r1, [r7, #8]
 8012542:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8012544:	68fb      	ldr	r3, [r7, #12]
 8012546:	2b00      	cmp	r3, #0
 8012548:	d10a      	bne.n	8012560 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 801254a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801254e:	f383 8811 	msr	BASEPRI, r3
 8012552:	f3bf 8f6f 	isb	sy
 8012556:	f3bf 8f4f 	dsb	sy
 801255a:	617b      	str	r3, [r7, #20]
}
 801255c:	bf00      	nop
 801255e:	e7fe      	b.n	801255e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8012560:	4b0a      	ldr	r3, [pc, #40]	; (801258c <vTaskPlaceOnEventListRestricted+0x54>)
 8012562:	681b      	ldr	r3, [r3, #0]
 8012564:	3318      	adds	r3, #24
 8012566:	4619      	mov	r1, r3
 8012568:	68f8      	ldr	r0, [r7, #12]
 801256a:	f7fe f8a4 	bl	80106b6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 801256e:	687b      	ldr	r3, [r7, #4]
 8012570:	2b00      	cmp	r3, #0
 8012572:	d002      	beq.n	801257a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8012574:	f04f 33ff 	mov.w	r3, #4294967295
 8012578:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 801257a:	6879      	ldr	r1, [r7, #4]
 801257c:	68b8      	ldr	r0, [r7, #8]
 801257e:	f000 fb53 	bl	8012c28 <prvAddCurrentTaskToDelayedList>
	}
 8012582:	bf00      	nop
 8012584:	3718      	adds	r7, #24
 8012586:	46bd      	mov	sp, r7
 8012588:	bd80      	pop	{r7, pc}
 801258a:	bf00      	nop
 801258c:	24004fd8 	.word	0x24004fd8

08012590 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8012590:	b580      	push	{r7, lr}
 8012592:	b086      	sub	sp, #24
 8012594:	af00      	add	r7, sp, #0
 8012596:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012598:	687b      	ldr	r3, [r7, #4]
 801259a:	68db      	ldr	r3, [r3, #12]
 801259c:	68db      	ldr	r3, [r3, #12]
 801259e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80125a0:	693b      	ldr	r3, [r7, #16]
 80125a2:	2b00      	cmp	r3, #0
 80125a4:	d10a      	bne.n	80125bc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80125a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125aa:	f383 8811 	msr	BASEPRI, r3
 80125ae:	f3bf 8f6f 	isb	sy
 80125b2:	f3bf 8f4f 	dsb	sy
 80125b6:	60fb      	str	r3, [r7, #12]
}
 80125b8:	bf00      	nop
 80125ba:	e7fe      	b.n	80125ba <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80125bc:	693b      	ldr	r3, [r7, #16]
 80125be:	3318      	adds	r3, #24
 80125c0:	4618      	mov	r0, r3
 80125c2:	f7fe f8d5 	bl	8010770 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80125c6:	4b1e      	ldr	r3, [pc, #120]	; (8012640 <xTaskRemoveFromEventList+0xb0>)
 80125c8:	681b      	ldr	r3, [r3, #0]
 80125ca:	2b00      	cmp	r3, #0
 80125cc:	d11d      	bne.n	801260a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80125ce:	693b      	ldr	r3, [r7, #16]
 80125d0:	3304      	adds	r3, #4
 80125d2:	4618      	mov	r0, r3
 80125d4:	f7fe f8cc 	bl	8010770 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80125d8:	693b      	ldr	r3, [r7, #16]
 80125da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80125dc:	4b19      	ldr	r3, [pc, #100]	; (8012644 <xTaskRemoveFromEventList+0xb4>)
 80125de:	681b      	ldr	r3, [r3, #0]
 80125e0:	429a      	cmp	r2, r3
 80125e2:	d903      	bls.n	80125ec <xTaskRemoveFromEventList+0x5c>
 80125e4:	693b      	ldr	r3, [r7, #16]
 80125e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80125e8:	4a16      	ldr	r2, [pc, #88]	; (8012644 <xTaskRemoveFromEventList+0xb4>)
 80125ea:	6013      	str	r3, [r2, #0]
 80125ec:	693b      	ldr	r3, [r7, #16]
 80125ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80125f0:	4613      	mov	r3, r2
 80125f2:	009b      	lsls	r3, r3, #2
 80125f4:	4413      	add	r3, r2
 80125f6:	009b      	lsls	r3, r3, #2
 80125f8:	4a13      	ldr	r2, [pc, #76]	; (8012648 <xTaskRemoveFromEventList+0xb8>)
 80125fa:	441a      	add	r2, r3
 80125fc:	693b      	ldr	r3, [r7, #16]
 80125fe:	3304      	adds	r3, #4
 8012600:	4619      	mov	r1, r3
 8012602:	4610      	mov	r0, r2
 8012604:	f7fe f857 	bl	80106b6 <vListInsertEnd>
 8012608:	e005      	b.n	8012616 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801260a:	693b      	ldr	r3, [r7, #16]
 801260c:	3318      	adds	r3, #24
 801260e:	4619      	mov	r1, r3
 8012610:	480e      	ldr	r0, [pc, #56]	; (801264c <xTaskRemoveFromEventList+0xbc>)
 8012612:	f7fe f850 	bl	80106b6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8012616:	693b      	ldr	r3, [r7, #16]
 8012618:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801261a:	4b0d      	ldr	r3, [pc, #52]	; (8012650 <xTaskRemoveFromEventList+0xc0>)
 801261c:	681b      	ldr	r3, [r3, #0]
 801261e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012620:	429a      	cmp	r2, r3
 8012622:	d905      	bls.n	8012630 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8012624:	2301      	movs	r3, #1
 8012626:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8012628:	4b0a      	ldr	r3, [pc, #40]	; (8012654 <xTaskRemoveFromEventList+0xc4>)
 801262a:	2201      	movs	r2, #1
 801262c:	601a      	str	r2, [r3, #0]
 801262e:	e001      	b.n	8012634 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8012630:	2300      	movs	r3, #0
 8012632:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8012634:	697b      	ldr	r3, [r7, #20]
}
 8012636:	4618      	mov	r0, r3
 8012638:	3718      	adds	r7, #24
 801263a:	46bd      	mov	sp, r7
 801263c:	bd80      	pop	{r7, pc}
 801263e:	bf00      	nop
 8012640:	240054d4 	.word	0x240054d4
 8012644:	240054b4 	.word	0x240054b4
 8012648:	24004fdc 	.word	0x24004fdc
 801264c:	2400546c 	.word	0x2400546c
 8012650:	24004fd8 	.word	0x24004fd8
 8012654:	240054c0 	.word	0x240054c0

08012658 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8012658:	b480      	push	{r7}
 801265a:	b083      	sub	sp, #12
 801265c:	af00      	add	r7, sp, #0
 801265e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8012660:	4b06      	ldr	r3, [pc, #24]	; (801267c <vTaskInternalSetTimeOutState+0x24>)
 8012662:	681a      	ldr	r2, [r3, #0]
 8012664:	687b      	ldr	r3, [r7, #4]
 8012666:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8012668:	4b05      	ldr	r3, [pc, #20]	; (8012680 <vTaskInternalSetTimeOutState+0x28>)
 801266a:	681a      	ldr	r2, [r3, #0]
 801266c:	687b      	ldr	r3, [r7, #4]
 801266e:	605a      	str	r2, [r3, #4]
}
 8012670:	bf00      	nop
 8012672:	370c      	adds	r7, #12
 8012674:	46bd      	mov	sp, r7
 8012676:	f85d 7b04 	ldr.w	r7, [sp], #4
 801267a:	4770      	bx	lr
 801267c:	240054c4 	.word	0x240054c4
 8012680:	240054b0 	.word	0x240054b0

08012684 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8012684:	b580      	push	{r7, lr}
 8012686:	b088      	sub	sp, #32
 8012688:	af00      	add	r7, sp, #0
 801268a:	6078      	str	r0, [r7, #4]
 801268c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801268e:	687b      	ldr	r3, [r7, #4]
 8012690:	2b00      	cmp	r3, #0
 8012692:	d10a      	bne.n	80126aa <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8012694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012698:	f383 8811 	msr	BASEPRI, r3
 801269c:	f3bf 8f6f 	isb	sy
 80126a0:	f3bf 8f4f 	dsb	sy
 80126a4:	613b      	str	r3, [r7, #16]
}
 80126a6:	bf00      	nop
 80126a8:	e7fe      	b.n	80126a8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80126aa:	683b      	ldr	r3, [r7, #0]
 80126ac:	2b00      	cmp	r3, #0
 80126ae:	d10a      	bne.n	80126c6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80126b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126b4:	f383 8811 	msr	BASEPRI, r3
 80126b8:	f3bf 8f6f 	isb	sy
 80126bc:	f3bf 8f4f 	dsb	sy
 80126c0:	60fb      	str	r3, [r7, #12]
}
 80126c2:	bf00      	nop
 80126c4:	e7fe      	b.n	80126c4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80126c6:	f7fe f9ad 	bl	8010a24 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80126ca:	4b1d      	ldr	r3, [pc, #116]	; (8012740 <xTaskCheckForTimeOut+0xbc>)
 80126cc:	681b      	ldr	r3, [r3, #0]
 80126ce:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80126d0:	687b      	ldr	r3, [r7, #4]
 80126d2:	685b      	ldr	r3, [r3, #4]
 80126d4:	69ba      	ldr	r2, [r7, #24]
 80126d6:	1ad3      	subs	r3, r2, r3
 80126d8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80126da:	683b      	ldr	r3, [r7, #0]
 80126dc:	681b      	ldr	r3, [r3, #0]
 80126de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80126e2:	d102      	bne.n	80126ea <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80126e4:	2300      	movs	r3, #0
 80126e6:	61fb      	str	r3, [r7, #28]
 80126e8:	e023      	b.n	8012732 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80126ea:	687b      	ldr	r3, [r7, #4]
 80126ec:	681a      	ldr	r2, [r3, #0]
 80126ee:	4b15      	ldr	r3, [pc, #84]	; (8012744 <xTaskCheckForTimeOut+0xc0>)
 80126f0:	681b      	ldr	r3, [r3, #0]
 80126f2:	429a      	cmp	r2, r3
 80126f4:	d007      	beq.n	8012706 <xTaskCheckForTimeOut+0x82>
 80126f6:	687b      	ldr	r3, [r7, #4]
 80126f8:	685b      	ldr	r3, [r3, #4]
 80126fa:	69ba      	ldr	r2, [r7, #24]
 80126fc:	429a      	cmp	r2, r3
 80126fe:	d302      	bcc.n	8012706 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8012700:	2301      	movs	r3, #1
 8012702:	61fb      	str	r3, [r7, #28]
 8012704:	e015      	b.n	8012732 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8012706:	683b      	ldr	r3, [r7, #0]
 8012708:	681b      	ldr	r3, [r3, #0]
 801270a:	697a      	ldr	r2, [r7, #20]
 801270c:	429a      	cmp	r2, r3
 801270e:	d20b      	bcs.n	8012728 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8012710:	683b      	ldr	r3, [r7, #0]
 8012712:	681a      	ldr	r2, [r3, #0]
 8012714:	697b      	ldr	r3, [r7, #20]
 8012716:	1ad2      	subs	r2, r2, r3
 8012718:	683b      	ldr	r3, [r7, #0]
 801271a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801271c:	6878      	ldr	r0, [r7, #4]
 801271e:	f7ff ff9b 	bl	8012658 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8012722:	2300      	movs	r3, #0
 8012724:	61fb      	str	r3, [r7, #28]
 8012726:	e004      	b.n	8012732 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8012728:	683b      	ldr	r3, [r7, #0]
 801272a:	2200      	movs	r2, #0
 801272c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801272e:	2301      	movs	r3, #1
 8012730:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8012732:	f7fe f9a7 	bl	8010a84 <vPortExitCritical>

	return xReturn;
 8012736:	69fb      	ldr	r3, [r7, #28]
}
 8012738:	4618      	mov	r0, r3
 801273a:	3720      	adds	r7, #32
 801273c:	46bd      	mov	sp, r7
 801273e:	bd80      	pop	{r7, pc}
 8012740:	240054b0 	.word	0x240054b0
 8012744:	240054c4 	.word	0x240054c4

08012748 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8012748:	b480      	push	{r7}
 801274a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 801274c:	4b03      	ldr	r3, [pc, #12]	; (801275c <vTaskMissedYield+0x14>)
 801274e:	2201      	movs	r2, #1
 8012750:	601a      	str	r2, [r3, #0]
}
 8012752:	bf00      	nop
 8012754:	46bd      	mov	sp, r7
 8012756:	f85d 7b04 	ldr.w	r7, [sp], #4
 801275a:	4770      	bx	lr
 801275c:	240054c0 	.word	0x240054c0

08012760 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8012760:	b580      	push	{r7, lr}
 8012762:	b082      	sub	sp, #8
 8012764:	af00      	add	r7, sp, #0
 8012766:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8012768:	f000 f852 	bl	8012810 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801276c:	4b06      	ldr	r3, [pc, #24]	; (8012788 <prvIdleTask+0x28>)
 801276e:	681b      	ldr	r3, [r3, #0]
 8012770:	2b01      	cmp	r3, #1
 8012772:	d9f9      	bls.n	8012768 <prvIdleTask+0x8>
			{
				taskYIELD();
 8012774:	4b05      	ldr	r3, [pc, #20]	; (801278c <prvIdleTask+0x2c>)
 8012776:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801277a:	601a      	str	r2, [r3, #0]
 801277c:	f3bf 8f4f 	dsb	sy
 8012780:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8012784:	e7f0      	b.n	8012768 <prvIdleTask+0x8>
 8012786:	bf00      	nop
 8012788:	24004fdc 	.word	0x24004fdc
 801278c:	e000ed04 	.word	0xe000ed04

08012790 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8012790:	b580      	push	{r7, lr}
 8012792:	b082      	sub	sp, #8
 8012794:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8012796:	2300      	movs	r3, #0
 8012798:	607b      	str	r3, [r7, #4]
 801279a:	e00c      	b.n	80127b6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801279c:	687a      	ldr	r2, [r7, #4]
 801279e:	4613      	mov	r3, r2
 80127a0:	009b      	lsls	r3, r3, #2
 80127a2:	4413      	add	r3, r2
 80127a4:	009b      	lsls	r3, r3, #2
 80127a6:	4a12      	ldr	r2, [pc, #72]	; (80127f0 <prvInitialiseTaskLists+0x60>)
 80127a8:	4413      	add	r3, r2
 80127aa:	4618      	mov	r0, r3
 80127ac:	f7fd ff56 	bl	801065c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80127b0:	687b      	ldr	r3, [r7, #4]
 80127b2:	3301      	adds	r3, #1
 80127b4:	607b      	str	r3, [r7, #4]
 80127b6:	687b      	ldr	r3, [r7, #4]
 80127b8:	2b37      	cmp	r3, #55	; 0x37
 80127ba:	d9ef      	bls.n	801279c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80127bc:	480d      	ldr	r0, [pc, #52]	; (80127f4 <prvInitialiseTaskLists+0x64>)
 80127be:	f7fd ff4d 	bl	801065c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80127c2:	480d      	ldr	r0, [pc, #52]	; (80127f8 <prvInitialiseTaskLists+0x68>)
 80127c4:	f7fd ff4a 	bl	801065c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80127c8:	480c      	ldr	r0, [pc, #48]	; (80127fc <prvInitialiseTaskLists+0x6c>)
 80127ca:	f7fd ff47 	bl	801065c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80127ce:	480c      	ldr	r0, [pc, #48]	; (8012800 <prvInitialiseTaskLists+0x70>)
 80127d0:	f7fd ff44 	bl	801065c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80127d4:	480b      	ldr	r0, [pc, #44]	; (8012804 <prvInitialiseTaskLists+0x74>)
 80127d6:	f7fd ff41 	bl	801065c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80127da:	4b0b      	ldr	r3, [pc, #44]	; (8012808 <prvInitialiseTaskLists+0x78>)
 80127dc:	4a05      	ldr	r2, [pc, #20]	; (80127f4 <prvInitialiseTaskLists+0x64>)
 80127de:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80127e0:	4b0a      	ldr	r3, [pc, #40]	; (801280c <prvInitialiseTaskLists+0x7c>)
 80127e2:	4a05      	ldr	r2, [pc, #20]	; (80127f8 <prvInitialiseTaskLists+0x68>)
 80127e4:	601a      	str	r2, [r3, #0]
}
 80127e6:	bf00      	nop
 80127e8:	3708      	adds	r7, #8
 80127ea:	46bd      	mov	sp, r7
 80127ec:	bd80      	pop	{r7, pc}
 80127ee:	bf00      	nop
 80127f0:	24004fdc 	.word	0x24004fdc
 80127f4:	2400543c 	.word	0x2400543c
 80127f8:	24005450 	.word	0x24005450
 80127fc:	2400546c 	.word	0x2400546c
 8012800:	24005480 	.word	0x24005480
 8012804:	24005498 	.word	0x24005498
 8012808:	24005464 	.word	0x24005464
 801280c:	24005468 	.word	0x24005468

08012810 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8012810:	b580      	push	{r7, lr}
 8012812:	b082      	sub	sp, #8
 8012814:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8012816:	e019      	b.n	801284c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8012818:	f7fe f904 	bl	8010a24 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801281c:	4b10      	ldr	r3, [pc, #64]	; (8012860 <prvCheckTasksWaitingTermination+0x50>)
 801281e:	68db      	ldr	r3, [r3, #12]
 8012820:	68db      	ldr	r3, [r3, #12]
 8012822:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012824:	687b      	ldr	r3, [r7, #4]
 8012826:	3304      	adds	r3, #4
 8012828:	4618      	mov	r0, r3
 801282a:	f7fd ffa1 	bl	8010770 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801282e:	4b0d      	ldr	r3, [pc, #52]	; (8012864 <prvCheckTasksWaitingTermination+0x54>)
 8012830:	681b      	ldr	r3, [r3, #0]
 8012832:	3b01      	subs	r3, #1
 8012834:	4a0b      	ldr	r2, [pc, #44]	; (8012864 <prvCheckTasksWaitingTermination+0x54>)
 8012836:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8012838:	4b0b      	ldr	r3, [pc, #44]	; (8012868 <prvCheckTasksWaitingTermination+0x58>)
 801283a:	681b      	ldr	r3, [r3, #0]
 801283c:	3b01      	subs	r3, #1
 801283e:	4a0a      	ldr	r2, [pc, #40]	; (8012868 <prvCheckTasksWaitingTermination+0x58>)
 8012840:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8012842:	f7fe f91f 	bl	8010a84 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8012846:	6878      	ldr	r0, [r7, #4]
 8012848:	f000 f810 	bl	801286c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801284c:	4b06      	ldr	r3, [pc, #24]	; (8012868 <prvCheckTasksWaitingTermination+0x58>)
 801284e:	681b      	ldr	r3, [r3, #0]
 8012850:	2b00      	cmp	r3, #0
 8012852:	d1e1      	bne.n	8012818 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8012854:	bf00      	nop
 8012856:	bf00      	nop
 8012858:	3708      	adds	r7, #8
 801285a:	46bd      	mov	sp, r7
 801285c:	bd80      	pop	{r7, pc}
 801285e:	bf00      	nop
 8012860:	24005480 	.word	0x24005480
 8012864:	240054ac 	.word	0x240054ac
 8012868:	24005494 	.word	0x24005494

0801286c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801286c:	b580      	push	{r7, lr}
 801286e:	b084      	sub	sp, #16
 8012870:	af00      	add	r7, sp, #0
 8012872:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8012874:	687b      	ldr	r3, [r7, #4]
 8012876:	3354      	adds	r3, #84	; 0x54
 8012878:	4618      	mov	r0, r3
 801287a:	f001 fded 	bl	8014458 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801287e:	687b      	ldr	r3, [r7, #4]
 8012880:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8012884:	2b00      	cmp	r3, #0
 8012886:	d108      	bne.n	801289a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8012888:	687b      	ldr	r3, [r7, #4]
 801288a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801288c:	4618      	mov	r0, r3
 801288e:	f7fd fdc7 	bl	8010420 <vPortFree>
				vPortFree( pxTCB );
 8012892:	6878      	ldr	r0, [r7, #4]
 8012894:	f7fd fdc4 	bl	8010420 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8012898:	e018      	b.n	80128cc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801289a:	687b      	ldr	r3, [r7, #4]
 801289c:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80128a0:	2b01      	cmp	r3, #1
 80128a2:	d103      	bne.n	80128ac <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80128a4:	6878      	ldr	r0, [r7, #4]
 80128a6:	f7fd fdbb 	bl	8010420 <vPortFree>
	}
 80128aa:	e00f      	b.n	80128cc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80128ac:	687b      	ldr	r3, [r7, #4]
 80128ae:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80128b2:	2b02      	cmp	r3, #2
 80128b4:	d00a      	beq.n	80128cc <prvDeleteTCB+0x60>
	__asm volatile
 80128b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80128ba:	f383 8811 	msr	BASEPRI, r3
 80128be:	f3bf 8f6f 	isb	sy
 80128c2:	f3bf 8f4f 	dsb	sy
 80128c6:	60fb      	str	r3, [r7, #12]
}
 80128c8:	bf00      	nop
 80128ca:	e7fe      	b.n	80128ca <prvDeleteTCB+0x5e>
	}
 80128cc:	bf00      	nop
 80128ce:	3710      	adds	r7, #16
 80128d0:	46bd      	mov	sp, r7
 80128d2:	bd80      	pop	{r7, pc}

080128d4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80128d4:	b480      	push	{r7}
 80128d6:	b083      	sub	sp, #12
 80128d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80128da:	4b0c      	ldr	r3, [pc, #48]	; (801290c <prvResetNextTaskUnblockTime+0x38>)
 80128dc:	681b      	ldr	r3, [r3, #0]
 80128de:	681b      	ldr	r3, [r3, #0]
 80128e0:	2b00      	cmp	r3, #0
 80128e2:	d104      	bne.n	80128ee <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80128e4:	4b0a      	ldr	r3, [pc, #40]	; (8012910 <prvResetNextTaskUnblockTime+0x3c>)
 80128e6:	f04f 32ff 	mov.w	r2, #4294967295
 80128ea:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80128ec:	e008      	b.n	8012900 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80128ee:	4b07      	ldr	r3, [pc, #28]	; (801290c <prvResetNextTaskUnblockTime+0x38>)
 80128f0:	681b      	ldr	r3, [r3, #0]
 80128f2:	68db      	ldr	r3, [r3, #12]
 80128f4:	68db      	ldr	r3, [r3, #12]
 80128f6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80128f8:	687b      	ldr	r3, [r7, #4]
 80128fa:	685b      	ldr	r3, [r3, #4]
 80128fc:	4a04      	ldr	r2, [pc, #16]	; (8012910 <prvResetNextTaskUnblockTime+0x3c>)
 80128fe:	6013      	str	r3, [r2, #0]
}
 8012900:	bf00      	nop
 8012902:	370c      	adds	r7, #12
 8012904:	46bd      	mov	sp, r7
 8012906:	f85d 7b04 	ldr.w	r7, [sp], #4
 801290a:	4770      	bx	lr
 801290c:	24005464 	.word	0x24005464
 8012910:	240054cc 	.word	0x240054cc

08012914 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8012914:	b480      	push	{r7}
 8012916:	b083      	sub	sp, #12
 8012918:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801291a:	4b0b      	ldr	r3, [pc, #44]	; (8012948 <xTaskGetSchedulerState+0x34>)
 801291c:	681b      	ldr	r3, [r3, #0]
 801291e:	2b00      	cmp	r3, #0
 8012920:	d102      	bne.n	8012928 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8012922:	2301      	movs	r3, #1
 8012924:	607b      	str	r3, [r7, #4]
 8012926:	e008      	b.n	801293a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012928:	4b08      	ldr	r3, [pc, #32]	; (801294c <xTaskGetSchedulerState+0x38>)
 801292a:	681b      	ldr	r3, [r3, #0]
 801292c:	2b00      	cmp	r3, #0
 801292e:	d102      	bne.n	8012936 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8012930:	2302      	movs	r3, #2
 8012932:	607b      	str	r3, [r7, #4]
 8012934:	e001      	b.n	801293a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8012936:	2300      	movs	r3, #0
 8012938:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801293a:	687b      	ldr	r3, [r7, #4]
	}
 801293c:	4618      	mov	r0, r3
 801293e:	370c      	adds	r7, #12
 8012940:	46bd      	mov	sp, r7
 8012942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012946:	4770      	bx	lr
 8012948:	240054b8 	.word	0x240054b8
 801294c:	240054d4 	.word	0x240054d4

08012950 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8012950:	b580      	push	{r7, lr}
 8012952:	b084      	sub	sp, #16
 8012954:	af00      	add	r7, sp, #0
 8012956:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8012958:	687b      	ldr	r3, [r7, #4]
 801295a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 801295c:	2300      	movs	r3, #0
 801295e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8012960:	687b      	ldr	r3, [r7, #4]
 8012962:	2b00      	cmp	r3, #0
 8012964:	d051      	beq.n	8012a0a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8012966:	68bb      	ldr	r3, [r7, #8]
 8012968:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801296a:	4b2a      	ldr	r3, [pc, #168]	; (8012a14 <xTaskPriorityInherit+0xc4>)
 801296c:	681b      	ldr	r3, [r3, #0]
 801296e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012970:	429a      	cmp	r2, r3
 8012972:	d241      	bcs.n	80129f8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8012974:	68bb      	ldr	r3, [r7, #8]
 8012976:	699b      	ldr	r3, [r3, #24]
 8012978:	2b00      	cmp	r3, #0
 801297a:	db06      	blt.n	801298a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801297c:	4b25      	ldr	r3, [pc, #148]	; (8012a14 <xTaskPriorityInherit+0xc4>)
 801297e:	681b      	ldr	r3, [r3, #0]
 8012980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012982:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8012986:	68bb      	ldr	r3, [r7, #8]
 8012988:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801298a:	68bb      	ldr	r3, [r7, #8]
 801298c:	6959      	ldr	r1, [r3, #20]
 801298e:	68bb      	ldr	r3, [r7, #8]
 8012990:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012992:	4613      	mov	r3, r2
 8012994:	009b      	lsls	r3, r3, #2
 8012996:	4413      	add	r3, r2
 8012998:	009b      	lsls	r3, r3, #2
 801299a:	4a1f      	ldr	r2, [pc, #124]	; (8012a18 <xTaskPriorityInherit+0xc8>)
 801299c:	4413      	add	r3, r2
 801299e:	4299      	cmp	r1, r3
 80129a0:	d122      	bne.n	80129e8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80129a2:	68bb      	ldr	r3, [r7, #8]
 80129a4:	3304      	adds	r3, #4
 80129a6:	4618      	mov	r0, r3
 80129a8:	f7fd fee2 	bl	8010770 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80129ac:	4b19      	ldr	r3, [pc, #100]	; (8012a14 <xTaskPriorityInherit+0xc4>)
 80129ae:	681b      	ldr	r3, [r3, #0]
 80129b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80129b2:	68bb      	ldr	r3, [r7, #8]
 80129b4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80129b6:	68bb      	ldr	r3, [r7, #8]
 80129b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80129ba:	4b18      	ldr	r3, [pc, #96]	; (8012a1c <xTaskPriorityInherit+0xcc>)
 80129bc:	681b      	ldr	r3, [r3, #0]
 80129be:	429a      	cmp	r2, r3
 80129c0:	d903      	bls.n	80129ca <xTaskPriorityInherit+0x7a>
 80129c2:	68bb      	ldr	r3, [r7, #8]
 80129c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80129c6:	4a15      	ldr	r2, [pc, #84]	; (8012a1c <xTaskPriorityInherit+0xcc>)
 80129c8:	6013      	str	r3, [r2, #0]
 80129ca:	68bb      	ldr	r3, [r7, #8]
 80129cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80129ce:	4613      	mov	r3, r2
 80129d0:	009b      	lsls	r3, r3, #2
 80129d2:	4413      	add	r3, r2
 80129d4:	009b      	lsls	r3, r3, #2
 80129d6:	4a10      	ldr	r2, [pc, #64]	; (8012a18 <xTaskPriorityInherit+0xc8>)
 80129d8:	441a      	add	r2, r3
 80129da:	68bb      	ldr	r3, [r7, #8]
 80129dc:	3304      	adds	r3, #4
 80129de:	4619      	mov	r1, r3
 80129e0:	4610      	mov	r0, r2
 80129e2:	f7fd fe68 	bl	80106b6 <vListInsertEnd>
 80129e6:	e004      	b.n	80129f2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80129e8:	4b0a      	ldr	r3, [pc, #40]	; (8012a14 <xTaskPriorityInherit+0xc4>)
 80129ea:	681b      	ldr	r3, [r3, #0]
 80129ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80129ee:	68bb      	ldr	r3, [r7, #8]
 80129f0:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80129f2:	2301      	movs	r3, #1
 80129f4:	60fb      	str	r3, [r7, #12]
 80129f6:	e008      	b.n	8012a0a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80129f8:	68bb      	ldr	r3, [r7, #8]
 80129fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80129fc:	4b05      	ldr	r3, [pc, #20]	; (8012a14 <xTaskPriorityInherit+0xc4>)
 80129fe:	681b      	ldr	r3, [r3, #0]
 8012a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012a02:	429a      	cmp	r2, r3
 8012a04:	d201      	bcs.n	8012a0a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8012a06:	2301      	movs	r3, #1
 8012a08:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8012a0a:	68fb      	ldr	r3, [r7, #12]
	}
 8012a0c:	4618      	mov	r0, r3
 8012a0e:	3710      	adds	r7, #16
 8012a10:	46bd      	mov	sp, r7
 8012a12:	bd80      	pop	{r7, pc}
 8012a14:	24004fd8 	.word	0x24004fd8
 8012a18:	24004fdc 	.word	0x24004fdc
 8012a1c:	240054b4 	.word	0x240054b4

08012a20 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8012a20:	b580      	push	{r7, lr}
 8012a22:	b086      	sub	sp, #24
 8012a24:	af00      	add	r7, sp, #0
 8012a26:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8012a28:	687b      	ldr	r3, [r7, #4]
 8012a2a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8012a2c:	2300      	movs	r3, #0
 8012a2e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8012a30:	687b      	ldr	r3, [r7, #4]
 8012a32:	2b00      	cmp	r3, #0
 8012a34:	d056      	beq.n	8012ae4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8012a36:	4b2e      	ldr	r3, [pc, #184]	; (8012af0 <xTaskPriorityDisinherit+0xd0>)
 8012a38:	681b      	ldr	r3, [r3, #0]
 8012a3a:	693a      	ldr	r2, [r7, #16]
 8012a3c:	429a      	cmp	r2, r3
 8012a3e:	d00a      	beq.n	8012a56 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8012a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a44:	f383 8811 	msr	BASEPRI, r3
 8012a48:	f3bf 8f6f 	isb	sy
 8012a4c:	f3bf 8f4f 	dsb	sy
 8012a50:	60fb      	str	r3, [r7, #12]
}
 8012a52:	bf00      	nop
 8012a54:	e7fe      	b.n	8012a54 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8012a56:	693b      	ldr	r3, [r7, #16]
 8012a58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012a5a:	2b00      	cmp	r3, #0
 8012a5c:	d10a      	bne.n	8012a74 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8012a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a62:	f383 8811 	msr	BASEPRI, r3
 8012a66:	f3bf 8f6f 	isb	sy
 8012a6a:	f3bf 8f4f 	dsb	sy
 8012a6e:	60bb      	str	r3, [r7, #8]
}
 8012a70:	bf00      	nop
 8012a72:	e7fe      	b.n	8012a72 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8012a74:	693b      	ldr	r3, [r7, #16]
 8012a76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012a78:	1e5a      	subs	r2, r3, #1
 8012a7a:	693b      	ldr	r3, [r7, #16]
 8012a7c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8012a7e:	693b      	ldr	r3, [r7, #16]
 8012a80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012a82:	693b      	ldr	r3, [r7, #16]
 8012a84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012a86:	429a      	cmp	r2, r3
 8012a88:	d02c      	beq.n	8012ae4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8012a8a:	693b      	ldr	r3, [r7, #16]
 8012a8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012a8e:	2b00      	cmp	r3, #0
 8012a90:	d128      	bne.n	8012ae4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012a92:	693b      	ldr	r3, [r7, #16]
 8012a94:	3304      	adds	r3, #4
 8012a96:	4618      	mov	r0, r3
 8012a98:	f7fd fe6a 	bl	8010770 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8012a9c:	693b      	ldr	r3, [r7, #16]
 8012a9e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012aa0:	693b      	ldr	r3, [r7, #16]
 8012aa2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012aa4:	693b      	ldr	r3, [r7, #16]
 8012aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012aa8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8012aac:	693b      	ldr	r3, [r7, #16]
 8012aae:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8012ab0:	693b      	ldr	r3, [r7, #16]
 8012ab2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012ab4:	4b0f      	ldr	r3, [pc, #60]	; (8012af4 <xTaskPriorityDisinherit+0xd4>)
 8012ab6:	681b      	ldr	r3, [r3, #0]
 8012ab8:	429a      	cmp	r2, r3
 8012aba:	d903      	bls.n	8012ac4 <xTaskPriorityDisinherit+0xa4>
 8012abc:	693b      	ldr	r3, [r7, #16]
 8012abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ac0:	4a0c      	ldr	r2, [pc, #48]	; (8012af4 <xTaskPriorityDisinherit+0xd4>)
 8012ac2:	6013      	str	r3, [r2, #0]
 8012ac4:	693b      	ldr	r3, [r7, #16]
 8012ac6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012ac8:	4613      	mov	r3, r2
 8012aca:	009b      	lsls	r3, r3, #2
 8012acc:	4413      	add	r3, r2
 8012ace:	009b      	lsls	r3, r3, #2
 8012ad0:	4a09      	ldr	r2, [pc, #36]	; (8012af8 <xTaskPriorityDisinherit+0xd8>)
 8012ad2:	441a      	add	r2, r3
 8012ad4:	693b      	ldr	r3, [r7, #16]
 8012ad6:	3304      	adds	r3, #4
 8012ad8:	4619      	mov	r1, r3
 8012ada:	4610      	mov	r0, r2
 8012adc:	f7fd fdeb 	bl	80106b6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8012ae0:	2301      	movs	r3, #1
 8012ae2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8012ae4:	697b      	ldr	r3, [r7, #20]
	}
 8012ae6:	4618      	mov	r0, r3
 8012ae8:	3718      	adds	r7, #24
 8012aea:	46bd      	mov	sp, r7
 8012aec:	bd80      	pop	{r7, pc}
 8012aee:	bf00      	nop
 8012af0:	24004fd8 	.word	0x24004fd8
 8012af4:	240054b4 	.word	0x240054b4
 8012af8:	24004fdc 	.word	0x24004fdc

08012afc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8012afc:	b580      	push	{r7, lr}
 8012afe:	b088      	sub	sp, #32
 8012b00:	af00      	add	r7, sp, #0
 8012b02:	6078      	str	r0, [r7, #4]
 8012b04:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8012b06:	687b      	ldr	r3, [r7, #4]
 8012b08:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8012b0a:	2301      	movs	r3, #1
 8012b0c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8012b0e:	687b      	ldr	r3, [r7, #4]
 8012b10:	2b00      	cmp	r3, #0
 8012b12:	d06a      	beq.n	8012bea <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8012b14:	69bb      	ldr	r3, [r7, #24]
 8012b16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012b18:	2b00      	cmp	r3, #0
 8012b1a:	d10a      	bne.n	8012b32 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8012b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b20:	f383 8811 	msr	BASEPRI, r3
 8012b24:	f3bf 8f6f 	isb	sy
 8012b28:	f3bf 8f4f 	dsb	sy
 8012b2c:	60fb      	str	r3, [r7, #12]
}
 8012b2e:	bf00      	nop
 8012b30:	e7fe      	b.n	8012b30 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8012b32:	69bb      	ldr	r3, [r7, #24]
 8012b34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012b36:	683a      	ldr	r2, [r7, #0]
 8012b38:	429a      	cmp	r2, r3
 8012b3a:	d902      	bls.n	8012b42 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8012b3c:	683b      	ldr	r3, [r7, #0]
 8012b3e:	61fb      	str	r3, [r7, #28]
 8012b40:	e002      	b.n	8012b48 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8012b42:	69bb      	ldr	r3, [r7, #24]
 8012b44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012b46:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8012b48:	69bb      	ldr	r3, [r7, #24]
 8012b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012b4c:	69fa      	ldr	r2, [r7, #28]
 8012b4e:	429a      	cmp	r2, r3
 8012b50:	d04b      	beq.n	8012bea <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8012b52:	69bb      	ldr	r3, [r7, #24]
 8012b54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012b56:	697a      	ldr	r2, [r7, #20]
 8012b58:	429a      	cmp	r2, r3
 8012b5a:	d146      	bne.n	8012bea <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8012b5c:	4b25      	ldr	r3, [pc, #148]	; (8012bf4 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8012b5e:	681b      	ldr	r3, [r3, #0]
 8012b60:	69ba      	ldr	r2, [r7, #24]
 8012b62:	429a      	cmp	r2, r3
 8012b64:	d10a      	bne.n	8012b7c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8012b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b6a:	f383 8811 	msr	BASEPRI, r3
 8012b6e:	f3bf 8f6f 	isb	sy
 8012b72:	f3bf 8f4f 	dsb	sy
 8012b76:	60bb      	str	r3, [r7, #8]
}
 8012b78:	bf00      	nop
 8012b7a:	e7fe      	b.n	8012b7a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8012b7c:	69bb      	ldr	r3, [r7, #24]
 8012b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012b80:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8012b82:	69bb      	ldr	r3, [r7, #24]
 8012b84:	69fa      	ldr	r2, [r7, #28]
 8012b86:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8012b88:	69bb      	ldr	r3, [r7, #24]
 8012b8a:	699b      	ldr	r3, [r3, #24]
 8012b8c:	2b00      	cmp	r3, #0
 8012b8e:	db04      	blt.n	8012b9a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012b90:	69fb      	ldr	r3, [r7, #28]
 8012b92:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8012b96:	69bb      	ldr	r3, [r7, #24]
 8012b98:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8012b9a:	69bb      	ldr	r3, [r7, #24]
 8012b9c:	6959      	ldr	r1, [r3, #20]
 8012b9e:	693a      	ldr	r2, [r7, #16]
 8012ba0:	4613      	mov	r3, r2
 8012ba2:	009b      	lsls	r3, r3, #2
 8012ba4:	4413      	add	r3, r2
 8012ba6:	009b      	lsls	r3, r3, #2
 8012ba8:	4a13      	ldr	r2, [pc, #76]	; (8012bf8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8012baa:	4413      	add	r3, r2
 8012bac:	4299      	cmp	r1, r3
 8012bae:	d11c      	bne.n	8012bea <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012bb0:	69bb      	ldr	r3, [r7, #24]
 8012bb2:	3304      	adds	r3, #4
 8012bb4:	4618      	mov	r0, r3
 8012bb6:	f7fd fddb 	bl	8010770 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8012bba:	69bb      	ldr	r3, [r7, #24]
 8012bbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012bbe:	4b0f      	ldr	r3, [pc, #60]	; (8012bfc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8012bc0:	681b      	ldr	r3, [r3, #0]
 8012bc2:	429a      	cmp	r2, r3
 8012bc4:	d903      	bls.n	8012bce <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8012bc6:	69bb      	ldr	r3, [r7, #24]
 8012bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012bca:	4a0c      	ldr	r2, [pc, #48]	; (8012bfc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8012bcc:	6013      	str	r3, [r2, #0]
 8012bce:	69bb      	ldr	r3, [r7, #24]
 8012bd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012bd2:	4613      	mov	r3, r2
 8012bd4:	009b      	lsls	r3, r3, #2
 8012bd6:	4413      	add	r3, r2
 8012bd8:	009b      	lsls	r3, r3, #2
 8012bda:	4a07      	ldr	r2, [pc, #28]	; (8012bf8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8012bdc:	441a      	add	r2, r3
 8012bde:	69bb      	ldr	r3, [r7, #24]
 8012be0:	3304      	adds	r3, #4
 8012be2:	4619      	mov	r1, r3
 8012be4:	4610      	mov	r0, r2
 8012be6:	f7fd fd66 	bl	80106b6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8012bea:	bf00      	nop
 8012bec:	3720      	adds	r7, #32
 8012bee:	46bd      	mov	sp, r7
 8012bf0:	bd80      	pop	{r7, pc}
 8012bf2:	bf00      	nop
 8012bf4:	24004fd8 	.word	0x24004fd8
 8012bf8:	24004fdc 	.word	0x24004fdc
 8012bfc:	240054b4 	.word	0x240054b4

08012c00 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8012c00:	b480      	push	{r7}
 8012c02:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8012c04:	4b07      	ldr	r3, [pc, #28]	; (8012c24 <pvTaskIncrementMutexHeldCount+0x24>)
 8012c06:	681b      	ldr	r3, [r3, #0]
 8012c08:	2b00      	cmp	r3, #0
 8012c0a:	d004      	beq.n	8012c16 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8012c0c:	4b05      	ldr	r3, [pc, #20]	; (8012c24 <pvTaskIncrementMutexHeldCount+0x24>)
 8012c0e:	681b      	ldr	r3, [r3, #0]
 8012c10:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012c12:	3201      	adds	r2, #1
 8012c14:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8012c16:	4b03      	ldr	r3, [pc, #12]	; (8012c24 <pvTaskIncrementMutexHeldCount+0x24>)
 8012c18:	681b      	ldr	r3, [r3, #0]
	}
 8012c1a:	4618      	mov	r0, r3
 8012c1c:	46bd      	mov	sp, r7
 8012c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c22:	4770      	bx	lr
 8012c24:	24004fd8 	.word	0x24004fd8

08012c28 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8012c28:	b580      	push	{r7, lr}
 8012c2a:	b084      	sub	sp, #16
 8012c2c:	af00      	add	r7, sp, #0
 8012c2e:	6078      	str	r0, [r7, #4]
 8012c30:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8012c32:	4b21      	ldr	r3, [pc, #132]	; (8012cb8 <prvAddCurrentTaskToDelayedList+0x90>)
 8012c34:	681b      	ldr	r3, [r3, #0]
 8012c36:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012c38:	4b20      	ldr	r3, [pc, #128]	; (8012cbc <prvAddCurrentTaskToDelayedList+0x94>)
 8012c3a:	681b      	ldr	r3, [r3, #0]
 8012c3c:	3304      	adds	r3, #4
 8012c3e:	4618      	mov	r0, r3
 8012c40:	f7fd fd96 	bl	8010770 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8012c44:	687b      	ldr	r3, [r7, #4]
 8012c46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012c4a:	d10a      	bne.n	8012c62 <prvAddCurrentTaskToDelayedList+0x3a>
 8012c4c:	683b      	ldr	r3, [r7, #0]
 8012c4e:	2b00      	cmp	r3, #0
 8012c50:	d007      	beq.n	8012c62 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012c52:	4b1a      	ldr	r3, [pc, #104]	; (8012cbc <prvAddCurrentTaskToDelayedList+0x94>)
 8012c54:	681b      	ldr	r3, [r3, #0]
 8012c56:	3304      	adds	r3, #4
 8012c58:	4619      	mov	r1, r3
 8012c5a:	4819      	ldr	r0, [pc, #100]	; (8012cc0 <prvAddCurrentTaskToDelayedList+0x98>)
 8012c5c:	f7fd fd2b 	bl	80106b6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8012c60:	e026      	b.n	8012cb0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8012c62:	68fa      	ldr	r2, [r7, #12]
 8012c64:	687b      	ldr	r3, [r7, #4]
 8012c66:	4413      	add	r3, r2
 8012c68:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8012c6a:	4b14      	ldr	r3, [pc, #80]	; (8012cbc <prvAddCurrentTaskToDelayedList+0x94>)
 8012c6c:	681b      	ldr	r3, [r3, #0]
 8012c6e:	68ba      	ldr	r2, [r7, #8]
 8012c70:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8012c72:	68ba      	ldr	r2, [r7, #8]
 8012c74:	68fb      	ldr	r3, [r7, #12]
 8012c76:	429a      	cmp	r2, r3
 8012c78:	d209      	bcs.n	8012c8e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012c7a:	4b12      	ldr	r3, [pc, #72]	; (8012cc4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8012c7c:	681a      	ldr	r2, [r3, #0]
 8012c7e:	4b0f      	ldr	r3, [pc, #60]	; (8012cbc <prvAddCurrentTaskToDelayedList+0x94>)
 8012c80:	681b      	ldr	r3, [r3, #0]
 8012c82:	3304      	adds	r3, #4
 8012c84:	4619      	mov	r1, r3
 8012c86:	4610      	mov	r0, r2
 8012c88:	f7fd fd39 	bl	80106fe <vListInsert>
}
 8012c8c:	e010      	b.n	8012cb0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012c8e:	4b0e      	ldr	r3, [pc, #56]	; (8012cc8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8012c90:	681a      	ldr	r2, [r3, #0]
 8012c92:	4b0a      	ldr	r3, [pc, #40]	; (8012cbc <prvAddCurrentTaskToDelayedList+0x94>)
 8012c94:	681b      	ldr	r3, [r3, #0]
 8012c96:	3304      	adds	r3, #4
 8012c98:	4619      	mov	r1, r3
 8012c9a:	4610      	mov	r0, r2
 8012c9c:	f7fd fd2f 	bl	80106fe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8012ca0:	4b0a      	ldr	r3, [pc, #40]	; (8012ccc <prvAddCurrentTaskToDelayedList+0xa4>)
 8012ca2:	681b      	ldr	r3, [r3, #0]
 8012ca4:	68ba      	ldr	r2, [r7, #8]
 8012ca6:	429a      	cmp	r2, r3
 8012ca8:	d202      	bcs.n	8012cb0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8012caa:	4a08      	ldr	r2, [pc, #32]	; (8012ccc <prvAddCurrentTaskToDelayedList+0xa4>)
 8012cac:	68bb      	ldr	r3, [r7, #8]
 8012cae:	6013      	str	r3, [r2, #0]
}
 8012cb0:	bf00      	nop
 8012cb2:	3710      	adds	r7, #16
 8012cb4:	46bd      	mov	sp, r7
 8012cb6:	bd80      	pop	{r7, pc}
 8012cb8:	240054b0 	.word	0x240054b0
 8012cbc:	24004fd8 	.word	0x24004fd8
 8012cc0:	24005498 	.word	0x24005498
 8012cc4:	24005468 	.word	0x24005468
 8012cc8:	24005464 	.word	0x24005464
 8012ccc:	240054cc 	.word	0x240054cc

08012cd0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8012cd0:	b580      	push	{r7, lr}
 8012cd2:	b08a      	sub	sp, #40	; 0x28
 8012cd4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8012cd6:	2300      	movs	r3, #0
 8012cd8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8012cda:	f000 fb07 	bl	80132ec <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8012cde:	4b1c      	ldr	r3, [pc, #112]	; (8012d50 <xTimerCreateTimerTask+0x80>)
 8012ce0:	681b      	ldr	r3, [r3, #0]
 8012ce2:	2b00      	cmp	r3, #0
 8012ce4:	d021      	beq.n	8012d2a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8012ce6:	2300      	movs	r3, #0
 8012ce8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8012cea:	2300      	movs	r3, #0
 8012cec:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8012cee:	1d3a      	adds	r2, r7, #4
 8012cf0:	f107 0108 	add.w	r1, r7, #8
 8012cf4:	f107 030c 	add.w	r3, r7, #12
 8012cf8:	4618      	mov	r0, r3
 8012cfa:	f7fd faab 	bl	8010254 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8012cfe:	6879      	ldr	r1, [r7, #4]
 8012d00:	68bb      	ldr	r3, [r7, #8]
 8012d02:	68fa      	ldr	r2, [r7, #12]
 8012d04:	9202      	str	r2, [sp, #8]
 8012d06:	9301      	str	r3, [sp, #4]
 8012d08:	2302      	movs	r3, #2
 8012d0a:	9300      	str	r3, [sp, #0]
 8012d0c:	2300      	movs	r3, #0
 8012d0e:	460a      	mov	r2, r1
 8012d10:	4910      	ldr	r1, [pc, #64]	; (8012d54 <xTimerCreateTimerTask+0x84>)
 8012d12:	4811      	ldr	r0, [pc, #68]	; (8012d58 <xTimerCreateTimerTask+0x88>)
 8012d14:	f7fe ffb6 	bl	8011c84 <xTaskCreateStatic>
 8012d18:	4603      	mov	r3, r0
 8012d1a:	4a10      	ldr	r2, [pc, #64]	; (8012d5c <xTimerCreateTimerTask+0x8c>)
 8012d1c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8012d1e:	4b0f      	ldr	r3, [pc, #60]	; (8012d5c <xTimerCreateTimerTask+0x8c>)
 8012d20:	681b      	ldr	r3, [r3, #0]
 8012d22:	2b00      	cmp	r3, #0
 8012d24:	d001      	beq.n	8012d2a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8012d26:	2301      	movs	r3, #1
 8012d28:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8012d2a:	697b      	ldr	r3, [r7, #20]
 8012d2c:	2b00      	cmp	r3, #0
 8012d2e:	d10a      	bne.n	8012d46 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8012d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d34:	f383 8811 	msr	BASEPRI, r3
 8012d38:	f3bf 8f6f 	isb	sy
 8012d3c:	f3bf 8f4f 	dsb	sy
 8012d40:	613b      	str	r3, [r7, #16]
}
 8012d42:	bf00      	nop
 8012d44:	e7fe      	b.n	8012d44 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8012d46:	697b      	ldr	r3, [r7, #20]
}
 8012d48:	4618      	mov	r0, r3
 8012d4a:	3718      	adds	r7, #24
 8012d4c:	46bd      	mov	sp, r7
 8012d4e:	bd80      	pop	{r7, pc}
 8012d50:	24005508 	.word	0x24005508
 8012d54:	08017b20 	.word	0x08017b20
 8012d58:	08012e95 	.word	0x08012e95
 8012d5c:	2400550c 	.word	0x2400550c

08012d60 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8012d60:	b580      	push	{r7, lr}
 8012d62:	b08a      	sub	sp, #40	; 0x28
 8012d64:	af00      	add	r7, sp, #0
 8012d66:	60f8      	str	r0, [r7, #12]
 8012d68:	60b9      	str	r1, [r7, #8]
 8012d6a:	607a      	str	r2, [r7, #4]
 8012d6c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8012d6e:	2300      	movs	r3, #0
 8012d70:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8012d72:	68fb      	ldr	r3, [r7, #12]
 8012d74:	2b00      	cmp	r3, #0
 8012d76:	d10a      	bne.n	8012d8e <xTimerGenericCommand+0x2e>
	__asm volatile
 8012d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d7c:	f383 8811 	msr	BASEPRI, r3
 8012d80:	f3bf 8f6f 	isb	sy
 8012d84:	f3bf 8f4f 	dsb	sy
 8012d88:	623b      	str	r3, [r7, #32]
}
 8012d8a:	bf00      	nop
 8012d8c:	e7fe      	b.n	8012d8c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8012d8e:	4b1a      	ldr	r3, [pc, #104]	; (8012df8 <xTimerGenericCommand+0x98>)
 8012d90:	681b      	ldr	r3, [r3, #0]
 8012d92:	2b00      	cmp	r3, #0
 8012d94:	d02a      	beq.n	8012dec <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8012d96:	68bb      	ldr	r3, [r7, #8]
 8012d98:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8012d9a:	687b      	ldr	r3, [r7, #4]
 8012d9c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8012d9e:	68fb      	ldr	r3, [r7, #12]
 8012da0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8012da2:	68bb      	ldr	r3, [r7, #8]
 8012da4:	2b05      	cmp	r3, #5
 8012da6:	dc18      	bgt.n	8012dda <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8012da8:	f7ff fdb4 	bl	8012914 <xTaskGetSchedulerState>
 8012dac:	4603      	mov	r3, r0
 8012dae:	2b02      	cmp	r3, #2
 8012db0:	d109      	bne.n	8012dc6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8012db2:	4b11      	ldr	r3, [pc, #68]	; (8012df8 <xTimerGenericCommand+0x98>)
 8012db4:	6818      	ldr	r0, [r3, #0]
 8012db6:	f107 0110 	add.w	r1, r7, #16
 8012dba:	2300      	movs	r3, #0
 8012dbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012dbe:	f7fe f8fb 	bl	8010fb8 <xQueueGenericSend>
 8012dc2:	6278      	str	r0, [r7, #36]	; 0x24
 8012dc4:	e012      	b.n	8012dec <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8012dc6:	4b0c      	ldr	r3, [pc, #48]	; (8012df8 <xTimerGenericCommand+0x98>)
 8012dc8:	6818      	ldr	r0, [r3, #0]
 8012dca:	f107 0110 	add.w	r1, r7, #16
 8012dce:	2300      	movs	r3, #0
 8012dd0:	2200      	movs	r2, #0
 8012dd2:	f7fe f8f1 	bl	8010fb8 <xQueueGenericSend>
 8012dd6:	6278      	str	r0, [r7, #36]	; 0x24
 8012dd8:	e008      	b.n	8012dec <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8012dda:	4b07      	ldr	r3, [pc, #28]	; (8012df8 <xTimerGenericCommand+0x98>)
 8012ddc:	6818      	ldr	r0, [r3, #0]
 8012dde:	f107 0110 	add.w	r1, r7, #16
 8012de2:	2300      	movs	r3, #0
 8012de4:	683a      	ldr	r2, [r7, #0]
 8012de6:	f7fe f9e5 	bl	80111b4 <xQueueGenericSendFromISR>
 8012dea:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8012dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8012dee:	4618      	mov	r0, r3
 8012df0:	3728      	adds	r7, #40	; 0x28
 8012df2:	46bd      	mov	sp, r7
 8012df4:	bd80      	pop	{r7, pc}
 8012df6:	bf00      	nop
 8012df8:	24005508 	.word	0x24005508

08012dfc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8012dfc:	b580      	push	{r7, lr}
 8012dfe:	b088      	sub	sp, #32
 8012e00:	af02      	add	r7, sp, #8
 8012e02:	6078      	str	r0, [r7, #4]
 8012e04:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012e06:	4b22      	ldr	r3, [pc, #136]	; (8012e90 <prvProcessExpiredTimer+0x94>)
 8012e08:	681b      	ldr	r3, [r3, #0]
 8012e0a:	68db      	ldr	r3, [r3, #12]
 8012e0c:	68db      	ldr	r3, [r3, #12]
 8012e0e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012e10:	697b      	ldr	r3, [r7, #20]
 8012e12:	3304      	adds	r3, #4
 8012e14:	4618      	mov	r0, r3
 8012e16:	f7fd fcab 	bl	8010770 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8012e1a:	697b      	ldr	r3, [r7, #20]
 8012e1c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012e20:	f003 0304 	and.w	r3, r3, #4
 8012e24:	2b00      	cmp	r3, #0
 8012e26:	d022      	beq.n	8012e6e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8012e28:	697b      	ldr	r3, [r7, #20]
 8012e2a:	699a      	ldr	r2, [r3, #24]
 8012e2c:	687b      	ldr	r3, [r7, #4]
 8012e2e:	18d1      	adds	r1, r2, r3
 8012e30:	687b      	ldr	r3, [r7, #4]
 8012e32:	683a      	ldr	r2, [r7, #0]
 8012e34:	6978      	ldr	r0, [r7, #20]
 8012e36:	f000 f8d1 	bl	8012fdc <prvInsertTimerInActiveList>
 8012e3a:	4603      	mov	r3, r0
 8012e3c:	2b00      	cmp	r3, #0
 8012e3e:	d01f      	beq.n	8012e80 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8012e40:	2300      	movs	r3, #0
 8012e42:	9300      	str	r3, [sp, #0]
 8012e44:	2300      	movs	r3, #0
 8012e46:	687a      	ldr	r2, [r7, #4]
 8012e48:	2100      	movs	r1, #0
 8012e4a:	6978      	ldr	r0, [r7, #20]
 8012e4c:	f7ff ff88 	bl	8012d60 <xTimerGenericCommand>
 8012e50:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8012e52:	693b      	ldr	r3, [r7, #16]
 8012e54:	2b00      	cmp	r3, #0
 8012e56:	d113      	bne.n	8012e80 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8012e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e5c:	f383 8811 	msr	BASEPRI, r3
 8012e60:	f3bf 8f6f 	isb	sy
 8012e64:	f3bf 8f4f 	dsb	sy
 8012e68:	60fb      	str	r3, [r7, #12]
}
 8012e6a:	bf00      	nop
 8012e6c:	e7fe      	b.n	8012e6c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012e6e:	697b      	ldr	r3, [r7, #20]
 8012e70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012e74:	f023 0301 	bic.w	r3, r3, #1
 8012e78:	b2da      	uxtb	r2, r3
 8012e7a:	697b      	ldr	r3, [r7, #20]
 8012e7c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8012e80:	697b      	ldr	r3, [r7, #20]
 8012e82:	6a1b      	ldr	r3, [r3, #32]
 8012e84:	6978      	ldr	r0, [r7, #20]
 8012e86:	4798      	blx	r3
}
 8012e88:	bf00      	nop
 8012e8a:	3718      	adds	r7, #24
 8012e8c:	46bd      	mov	sp, r7
 8012e8e:	bd80      	pop	{r7, pc}
 8012e90:	24005500 	.word	0x24005500

08012e94 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8012e94:	b580      	push	{r7, lr}
 8012e96:	b084      	sub	sp, #16
 8012e98:	af00      	add	r7, sp, #0
 8012e9a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8012e9c:	f107 0308 	add.w	r3, r7, #8
 8012ea0:	4618      	mov	r0, r3
 8012ea2:	f000 f857 	bl	8012f54 <prvGetNextExpireTime>
 8012ea6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8012ea8:	68bb      	ldr	r3, [r7, #8]
 8012eaa:	4619      	mov	r1, r3
 8012eac:	68f8      	ldr	r0, [r7, #12]
 8012eae:	f000 f803 	bl	8012eb8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8012eb2:	f000 f8d5 	bl	8013060 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8012eb6:	e7f1      	b.n	8012e9c <prvTimerTask+0x8>

08012eb8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8012eb8:	b580      	push	{r7, lr}
 8012eba:	b084      	sub	sp, #16
 8012ebc:	af00      	add	r7, sp, #0
 8012ebe:	6078      	str	r0, [r7, #4]
 8012ec0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8012ec2:	f7ff f93b 	bl	801213c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8012ec6:	f107 0308 	add.w	r3, r7, #8
 8012eca:	4618      	mov	r0, r3
 8012ecc:	f000 f866 	bl	8012f9c <prvSampleTimeNow>
 8012ed0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8012ed2:	68bb      	ldr	r3, [r7, #8]
 8012ed4:	2b00      	cmp	r3, #0
 8012ed6:	d130      	bne.n	8012f3a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8012ed8:	683b      	ldr	r3, [r7, #0]
 8012eda:	2b00      	cmp	r3, #0
 8012edc:	d10a      	bne.n	8012ef4 <prvProcessTimerOrBlockTask+0x3c>
 8012ede:	687a      	ldr	r2, [r7, #4]
 8012ee0:	68fb      	ldr	r3, [r7, #12]
 8012ee2:	429a      	cmp	r2, r3
 8012ee4:	d806      	bhi.n	8012ef4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8012ee6:	f7ff f937 	bl	8012158 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8012eea:	68f9      	ldr	r1, [r7, #12]
 8012eec:	6878      	ldr	r0, [r7, #4]
 8012eee:	f7ff ff85 	bl	8012dfc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8012ef2:	e024      	b.n	8012f3e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8012ef4:	683b      	ldr	r3, [r7, #0]
 8012ef6:	2b00      	cmp	r3, #0
 8012ef8:	d008      	beq.n	8012f0c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8012efa:	4b13      	ldr	r3, [pc, #76]	; (8012f48 <prvProcessTimerOrBlockTask+0x90>)
 8012efc:	681b      	ldr	r3, [r3, #0]
 8012efe:	681b      	ldr	r3, [r3, #0]
 8012f00:	2b00      	cmp	r3, #0
 8012f02:	d101      	bne.n	8012f08 <prvProcessTimerOrBlockTask+0x50>
 8012f04:	2301      	movs	r3, #1
 8012f06:	e000      	b.n	8012f0a <prvProcessTimerOrBlockTask+0x52>
 8012f08:	2300      	movs	r3, #0
 8012f0a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8012f0c:	4b0f      	ldr	r3, [pc, #60]	; (8012f4c <prvProcessTimerOrBlockTask+0x94>)
 8012f0e:	6818      	ldr	r0, [r3, #0]
 8012f10:	687a      	ldr	r2, [r7, #4]
 8012f12:	68fb      	ldr	r3, [r7, #12]
 8012f14:	1ad3      	subs	r3, r2, r3
 8012f16:	683a      	ldr	r2, [r7, #0]
 8012f18:	4619      	mov	r1, r3
 8012f1a:	f7fe fe7f 	bl	8011c1c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8012f1e:	f7ff f91b 	bl	8012158 <xTaskResumeAll>
 8012f22:	4603      	mov	r3, r0
 8012f24:	2b00      	cmp	r3, #0
 8012f26:	d10a      	bne.n	8012f3e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8012f28:	4b09      	ldr	r3, [pc, #36]	; (8012f50 <prvProcessTimerOrBlockTask+0x98>)
 8012f2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012f2e:	601a      	str	r2, [r3, #0]
 8012f30:	f3bf 8f4f 	dsb	sy
 8012f34:	f3bf 8f6f 	isb	sy
}
 8012f38:	e001      	b.n	8012f3e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8012f3a:	f7ff f90d 	bl	8012158 <xTaskResumeAll>
}
 8012f3e:	bf00      	nop
 8012f40:	3710      	adds	r7, #16
 8012f42:	46bd      	mov	sp, r7
 8012f44:	bd80      	pop	{r7, pc}
 8012f46:	bf00      	nop
 8012f48:	24005504 	.word	0x24005504
 8012f4c:	24005508 	.word	0x24005508
 8012f50:	e000ed04 	.word	0xe000ed04

08012f54 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8012f54:	b480      	push	{r7}
 8012f56:	b085      	sub	sp, #20
 8012f58:	af00      	add	r7, sp, #0
 8012f5a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8012f5c:	4b0e      	ldr	r3, [pc, #56]	; (8012f98 <prvGetNextExpireTime+0x44>)
 8012f5e:	681b      	ldr	r3, [r3, #0]
 8012f60:	681b      	ldr	r3, [r3, #0]
 8012f62:	2b00      	cmp	r3, #0
 8012f64:	d101      	bne.n	8012f6a <prvGetNextExpireTime+0x16>
 8012f66:	2201      	movs	r2, #1
 8012f68:	e000      	b.n	8012f6c <prvGetNextExpireTime+0x18>
 8012f6a:	2200      	movs	r2, #0
 8012f6c:	687b      	ldr	r3, [r7, #4]
 8012f6e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8012f70:	687b      	ldr	r3, [r7, #4]
 8012f72:	681b      	ldr	r3, [r3, #0]
 8012f74:	2b00      	cmp	r3, #0
 8012f76:	d105      	bne.n	8012f84 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8012f78:	4b07      	ldr	r3, [pc, #28]	; (8012f98 <prvGetNextExpireTime+0x44>)
 8012f7a:	681b      	ldr	r3, [r3, #0]
 8012f7c:	68db      	ldr	r3, [r3, #12]
 8012f7e:	681b      	ldr	r3, [r3, #0]
 8012f80:	60fb      	str	r3, [r7, #12]
 8012f82:	e001      	b.n	8012f88 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8012f84:	2300      	movs	r3, #0
 8012f86:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8012f88:	68fb      	ldr	r3, [r7, #12]
}
 8012f8a:	4618      	mov	r0, r3
 8012f8c:	3714      	adds	r7, #20
 8012f8e:	46bd      	mov	sp, r7
 8012f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f94:	4770      	bx	lr
 8012f96:	bf00      	nop
 8012f98:	24005500 	.word	0x24005500

08012f9c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8012f9c:	b580      	push	{r7, lr}
 8012f9e:	b084      	sub	sp, #16
 8012fa0:	af00      	add	r7, sp, #0
 8012fa2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8012fa4:	f7ff f976 	bl	8012294 <xTaskGetTickCount>
 8012fa8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8012faa:	4b0b      	ldr	r3, [pc, #44]	; (8012fd8 <prvSampleTimeNow+0x3c>)
 8012fac:	681b      	ldr	r3, [r3, #0]
 8012fae:	68fa      	ldr	r2, [r7, #12]
 8012fb0:	429a      	cmp	r2, r3
 8012fb2:	d205      	bcs.n	8012fc0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8012fb4:	f000 f936 	bl	8013224 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8012fb8:	687b      	ldr	r3, [r7, #4]
 8012fba:	2201      	movs	r2, #1
 8012fbc:	601a      	str	r2, [r3, #0]
 8012fbe:	e002      	b.n	8012fc6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8012fc0:	687b      	ldr	r3, [r7, #4]
 8012fc2:	2200      	movs	r2, #0
 8012fc4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8012fc6:	4a04      	ldr	r2, [pc, #16]	; (8012fd8 <prvSampleTimeNow+0x3c>)
 8012fc8:	68fb      	ldr	r3, [r7, #12]
 8012fca:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8012fcc:	68fb      	ldr	r3, [r7, #12]
}
 8012fce:	4618      	mov	r0, r3
 8012fd0:	3710      	adds	r7, #16
 8012fd2:	46bd      	mov	sp, r7
 8012fd4:	bd80      	pop	{r7, pc}
 8012fd6:	bf00      	nop
 8012fd8:	24005510 	.word	0x24005510

08012fdc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8012fdc:	b580      	push	{r7, lr}
 8012fde:	b086      	sub	sp, #24
 8012fe0:	af00      	add	r7, sp, #0
 8012fe2:	60f8      	str	r0, [r7, #12]
 8012fe4:	60b9      	str	r1, [r7, #8]
 8012fe6:	607a      	str	r2, [r7, #4]
 8012fe8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8012fea:	2300      	movs	r3, #0
 8012fec:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8012fee:	68fb      	ldr	r3, [r7, #12]
 8012ff0:	68ba      	ldr	r2, [r7, #8]
 8012ff2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8012ff4:	68fb      	ldr	r3, [r7, #12]
 8012ff6:	68fa      	ldr	r2, [r7, #12]
 8012ff8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8012ffa:	68ba      	ldr	r2, [r7, #8]
 8012ffc:	687b      	ldr	r3, [r7, #4]
 8012ffe:	429a      	cmp	r2, r3
 8013000:	d812      	bhi.n	8013028 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013002:	687a      	ldr	r2, [r7, #4]
 8013004:	683b      	ldr	r3, [r7, #0]
 8013006:	1ad2      	subs	r2, r2, r3
 8013008:	68fb      	ldr	r3, [r7, #12]
 801300a:	699b      	ldr	r3, [r3, #24]
 801300c:	429a      	cmp	r2, r3
 801300e:	d302      	bcc.n	8013016 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8013010:	2301      	movs	r3, #1
 8013012:	617b      	str	r3, [r7, #20]
 8013014:	e01b      	b.n	801304e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8013016:	4b10      	ldr	r3, [pc, #64]	; (8013058 <prvInsertTimerInActiveList+0x7c>)
 8013018:	681a      	ldr	r2, [r3, #0]
 801301a:	68fb      	ldr	r3, [r7, #12]
 801301c:	3304      	adds	r3, #4
 801301e:	4619      	mov	r1, r3
 8013020:	4610      	mov	r0, r2
 8013022:	f7fd fb6c 	bl	80106fe <vListInsert>
 8013026:	e012      	b.n	801304e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8013028:	687a      	ldr	r2, [r7, #4]
 801302a:	683b      	ldr	r3, [r7, #0]
 801302c:	429a      	cmp	r2, r3
 801302e:	d206      	bcs.n	801303e <prvInsertTimerInActiveList+0x62>
 8013030:	68ba      	ldr	r2, [r7, #8]
 8013032:	683b      	ldr	r3, [r7, #0]
 8013034:	429a      	cmp	r2, r3
 8013036:	d302      	bcc.n	801303e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8013038:	2301      	movs	r3, #1
 801303a:	617b      	str	r3, [r7, #20]
 801303c:	e007      	b.n	801304e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801303e:	4b07      	ldr	r3, [pc, #28]	; (801305c <prvInsertTimerInActiveList+0x80>)
 8013040:	681a      	ldr	r2, [r3, #0]
 8013042:	68fb      	ldr	r3, [r7, #12]
 8013044:	3304      	adds	r3, #4
 8013046:	4619      	mov	r1, r3
 8013048:	4610      	mov	r0, r2
 801304a:	f7fd fb58 	bl	80106fe <vListInsert>
		}
	}

	return xProcessTimerNow;
 801304e:	697b      	ldr	r3, [r7, #20]
}
 8013050:	4618      	mov	r0, r3
 8013052:	3718      	adds	r7, #24
 8013054:	46bd      	mov	sp, r7
 8013056:	bd80      	pop	{r7, pc}
 8013058:	24005504 	.word	0x24005504
 801305c:	24005500 	.word	0x24005500

08013060 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8013060:	b580      	push	{r7, lr}
 8013062:	b08e      	sub	sp, #56	; 0x38
 8013064:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8013066:	e0ca      	b.n	80131fe <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8013068:	687b      	ldr	r3, [r7, #4]
 801306a:	2b00      	cmp	r3, #0
 801306c:	da18      	bge.n	80130a0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801306e:	1d3b      	adds	r3, r7, #4
 8013070:	3304      	adds	r3, #4
 8013072:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8013074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013076:	2b00      	cmp	r3, #0
 8013078:	d10a      	bne.n	8013090 <prvProcessReceivedCommands+0x30>
	__asm volatile
 801307a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801307e:	f383 8811 	msr	BASEPRI, r3
 8013082:	f3bf 8f6f 	isb	sy
 8013086:	f3bf 8f4f 	dsb	sy
 801308a:	61fb      	str	r3, [r7, #28]
}
 801308c:	bf00      	nop
 801308e:	e7fe      	b.n	801308e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8013090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013092:	681b      	ldr	r3, [r3, #0]
 8013094:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013096:	6850      	ldr	r0, [r2, #4]
 8013098:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801309a:	6892      	ldr	r2, [r2, #8]
 801309c:	4611      	mov	r1, r2
 801309e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80130a0:	687b      	ldr	r3, [r7, #4]
 80130a2:	2b00      	cmp	r3, #0
 80130a4:	f2c0 80ab 	blt.w	80131fe <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80130a8:	68fb      	ldr	r3, [r7, #12]
 80130aa:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80130ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80130ae:	695b      	ldr	r3, [r3, #20]
 80130b0:	2b00      	cmp	r3, #0
 80130b2:	d004      	beq.n	80130be <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80130b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80130b6:	3304      	adds	r3, #4
 80130b8:	4618      	mov	r0, r3
 80130ba:	f7fd fb59 	bl	8010770 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80130be:	463b      	mov	r3, r7
 80130c0:	4618      	mov	r0, r3
 80130c2:	f7ff ff6b 	bl	8012f9c <prvSampleTimeNow>
 80130c6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80130c8:	687b      	ldr	r3, [r7, #4]
 80130ca:	2b09      	cmp	r3, #9
 80130cc:	f200 8096 	bhi.w	80131fc <prvProcessReceivedCommands+0x19c>
 80130d0:	a201      	add	r2, pc, #4	; (adr r2, 80130d8 <prvProcessReceivedCommands+0x78>)
 80130d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80130d6:	bf00      	nop
 80130d8:	08013101 	.word	0x08013101
 80130dc:	08013101 	.word	0x08013101
 80130e0:	08013101 	.word	0x08013101
 80130e4:	08013175 	.word	0x08013175
 80130e8:	08013189 	.word	0x08013189
 80130ec:	080131d3 	.word	0x080131d3
 80130f0:	08013101 	.word	0x08013101
 80130f4:	08013101 	.word	0x08013101
 80130f8:	08013175 	.word	0x08013175
 80130fc:	08013189 	.word	0x08013189
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8013100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013102:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013106:	f043 0301 	orr.w	r3, r3, #1
 801310a:	b2da      	uxtb	r2, r3
 801310c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801310e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8013112:	68ba      	ldr	r2, [r7, #8]
 8013114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013116:	699b      	ldr	r3, [r3, #24]
 8013118:	18d1      	adds	r1, r2, r3
 801311a:	68bb      	ldr	r3, [r7, #8]
 801311c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801311e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013120:	f7ff ff5c 	bl	8012fdc <prvInsertTimerInActiveList>
 8013124:	4603      	mov	r3, r0
 8013126:	2b00      	cmp	r3, #0
 8013128:	d069      	beq.n	80131fe <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801312a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801312c:	6a1b      	ldr	r3, [r3, #32]
 801312e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013130:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8013132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013134:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013138:	f003 0304 	and.w	r3, r3, #4
 801313c:	2b00      	cmp	r3, #0
 801313e:	d05e      	beq.n	80131fe <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8013140:	68ba      	ldr	r2, [r7, #8]
 8013142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013144:	699b      	ldr	r3, [r3, #24]
 8013146:	441a      	add	r2, r3
 8013148:	2300      	movs	r3, #0
 801314a:	9300      	str	r3, [sp, #0]
 801314c:	2300      	movs	r3, #0
 801314e:	2100      	movs	r1, #0
 8013150:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013152:	f7ff fe05 	bl	8012d60 <xTimerGenericCommand>
 8013156:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8013158:	6a3b      	ldr	r3, [r7, #32]
 801315a:	2b00      	cmp	r3, #0
 801315c:	d14f      	bne.n	80131fe <prvProcessReceivedCommands+0x19e>
	__asm volatile
 801315e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013162:	f383 8811 	msr	BASEPRI, r3
 8013166:	f3bf 8f6f 	isb	sy
 801316a:	f3bf 8f4f 	dsb	sy
 801316e:	61bb      	str	r3, [r7, #24]
}
 8013170:	bf00      	nop
 8013172:	e7fe      	b.n	8013172 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8013174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013176:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801317a:	f023 0301 	bic.w	r3, r3, #1
 801317e:	b2da      	uxtb	r2, r3
 8013180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013182:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8013186:	e03a      	b.n	80131fe <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8013188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801318a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801318e:	f043 0301 	orr.w	r3, r3, #1
 8013192:	b2da      	uxtb	r2, r3
 8013194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013196:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801319a:	68ba      	ldr	r2, [r7, #8]
 801319c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801319e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80131a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131a2:	699b      	ldr	r3, [r3, #24]
 80131a4:	2b00      	cmp	r3, #0
 80131a6:	d10a      	bne.n	80131be <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80131a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80131ac:	f383 8811 	msr	BASEPRI, r3
 80131b0:	f3bf 8f6f 	isb	sy
 80131b4:	f3bf 8f4f 	dsb	sy
 80131b8:	617b      	str	r3, [r7, #20]
}
 80131ba:	bf00      	nop
 80131bc:	e7fe      	b.n	80131bc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80131be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131c0:	699a      	ldr	r2, [r3, #24]
 80131c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131c4:	18d1      	adds	r1, r2, r3
 80131c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80131ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80131cc:	f7ff ff06 	bl	8012fdc <prvInsertTimerInActiveList>
					break;
 80131d0:	e015      	b.n	80131fe <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80131d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80131d8:	f003 0302 	and.w	r3, r3, #2
 80131dc:	2b00      	cmp	r3, #0
 80131de:	d103      	bne.n	80131e8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80131e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80131e2:	f7fd f91d 	bl	8010420 <vPortFree>
 80131e6:	e00a      	b.n	80131fe <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80131e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80131ee:	f023 0301 	bic.w	r3, r3, #1
 80131f2:	b2da      	uxtb	r2, r3
 80131f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80131fa:	e000      	b.n	80131fe <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 80131fc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80131fe:	4b08      	ldr	r3, [pc, #32]	; (8013220 <prvProcessReceivedCommands+0x1c0>)
 8013200:	681b      	ldr	r3, [r3, #0]
 8013202:	1d39      	adds	r1, r7, #4
 8013204:	2200      	movs	r2, #0
 8013206:	4618      	mov	r0, r3
 8013208:	f7fe f8fc 	bl	8011404 <xQueueReceive>
 801320c:	4603      	mov	r3, r0
 801320e:	2b00      	cmp	r3, #0
 8013210:	f47f af2a 	bne.w	8013068 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8013214:	bf00      	nop
 8013216:	bf00      	nop
 8013218:	3730      	adds	r7, #48	; 0x30
 801321a:	46bd      	mov	sp, r7
 801321c:	bd80      	pop	{r7, pc}
 801321e:	bf00      	nop
 8013220:	24005508 	.word	0x24005508

08013224 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8013224:	b580      	push	{r7, lr}
 8013226:	b088      	sub	sp, #32
 8013228:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801322a:	e048      	b.n	80132be <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801322c:	4b2d      	ldr	r3, [pc, #180]	; (80132e4 <prvSwitchTimerLists+0xc0>)
 801322e:	681b      	ldr	r3, [r3, #0]
 8013230:	68db      	ldr	r3, [r3, #12]
 8013232:	681b      	ldr	r3, [r3, #0]
 8013234:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013236:	4b2b      	ldr	r3, [pc, #172]	; (80132e4 <prvSwitchTimerLists+0xc0>)
 8013238:	681b      	ldr	r3, [r3, #0]
 801323a:	68db      	ldr	r3, [r3, #12]
 801323c:	68db      	ldr	r3, [r3, #12]
 801323e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8013240:	68fb      	ldr	r3, [r7, #12]
 8013242:	3304      	adds	r3, #4
 8013244:	4618      	mov	r0, r3
 8013246:	f7fd fa93 	bl	8010770 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801324a:	68fb      	ldr	r3, [r7, #12]
 801324c:	6a1b      	ldr	r3, [r3, #32]
 801324e:	68f8      	ldr	r0, [r7, #12]
 8013250:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8013252:	68fb      	ldr	r3, [r7, #12]
 8013254:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013258:	f003 0304 	and.w	r3, r3, #4
 801325c:	2b00      	cmp	r3, #0
 801325e:	d02e      	beq.n	80132be <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8013260:	68fb      	ldr	r3, [r7, #12]
 8013262:	699b      	ldr	r3, [r3, #24]
 8013264:	693a      	ldr	r2, [r7, #16]
 8013266:	4413      	add	r3, r2
 8013268:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801326a:	68ba      	ldr	r2, [r7, #8]
 801326c:	693b      	ldr	r3, [r7, #16]
 801326e:	429a      	cmp	r2, r3
 8013270:	d90e      	bls.n	8013290 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8013272:	68fb      	ldr	r3, [r7, #12]
 8013274:	68ba      	ldr	r2, [r7, #8]
 8013276:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8013278:	68fb      	ldr	r3, [r7, #12]
 801327a:	68fa      	ldr	r2, [r7, #12]
 801327c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801327e:	4b19      	ldr	r3, [pc, #100]	; (80132e4 <prvSwitchTimerLists+0xc0>)
 8013280:	681a      	ldr	r2, [r3, #0]
 8013282:	68fb      	ldr	r3, [r7, #12]
 8013284:	3304      	adds	r3, #4
 8013286:	4619      	mov	r1, r3
 8013288:	4610      	mov	r0, r2
 801328a:	f7fd fa38 	bl	80106fe <vListInsert>
 801328e:	e016      	b.n	80132be <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8013290:	2300      	movs	r3, #0
 8013292:	9300      	str	r3, [sp, #0]
 8013294:	2300      	movs	r3, #0
 8013296:	693a      	ldr	r2, [r7, #16]
 8013298:	2100      	movs	r1, #0
 801329a:	68f8      	ldr	r0, [r7, #12]
 801329c:	f7ff fd60 	bl	8012d60 <xTimerGenericCommand>
 80132a0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80132a2:	687b      	ldr	r3, [r7, #4]
 80132a4:	2b00      	cmp	r3, #0
 80132a6:	d10a      	bne.n	80132be <prvSwitchTimerLists+0x9a>
	__asm volatile
 80132a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80132ac:	f383 8811 	msr	BASEPRI, r3
 80132b0:	f3bf 8f6f 	isb	sy
 80132b4:	f3bf 8f4f 	dsb	sy
 80132b8:	603b      	str	r3, [r7, #0]
}
 80132ba:	bf00      	nop
 80132bc:	e7fe      	b.n	80132bc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80132be:	4b09      	ldr	r3, [pc, #36]	; (80132e4 <prvSwitchTimerLists+0xc0>)
 80132c0:	681b      	ldr	r3, [r3, #0]
 80132c2:	681b      	ldr	r3, [r3, #0]
 80132c4:	2b00      	cmp	r3, #0
 80132c6:	d1b1      	bne.n	801322c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80132c8:	4b06      	ldr	r3, [pc, #24]	; (80132e4 <prvSwitchTimerLists+0xc0>)
 80132ca:	681b      	ldr	r3, [r3, #0]
 80132cc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80132ce:	4b06      	ldr	r3, [pc, #24]	; (80132e8 <prvSwitchTimerLists+0xc4>)
 80132d0:	681b      	ldr	r3, [r3, #0]
 80132d2:	4a04      	ldr	r2, [pc, #16]	; (80132e4 <prvSwitchTimerLists+0xc0>)
 80132d4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80132d6:	4a04      	ldr	r2, [pc, #16]	; (80132e8 <prvSwitchTimerLists+0xc4>)
 80132d8:	697b      	ldr	r3, [r7, #20]
 80132da:	6013      	str	r3, [r2, #0]
}
 80132dc:	bf00      	nop
 80132de:	3718      	adds	r7, #24
 80132e0:	46bd      	mov	sp, r7
 80132e2:	bd80      	pop	{r7, pc}
 80132e4:	24005500 	.word	0x24005500
 80132e8:	24005504 	.word	0x24005504

080132ec <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80132ec:	b580      	push	{r7, lr}
 80132ee:	b082      	sub	sp, #8
 80132f0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80132f2:	f7fd fb97 	bl	8010a24 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80132f6:	4b15      	ldr	r3, [pc, #84]	; (801334c <prvCheckForValidListAndQueue+0x60>)
 80132f8:	681b      	ldr	r3, [r3, #0]
 80132fa:	2b00      	cmp	r3, #0
 80132fc:	d120      	bne.n	8013340 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80132fe:	4814      	ldr	r0, [pc, #80]	; (8013350 <prvCheckForValidListAndQueue+0x64>)
 8013300:	f7fd f9ac 	bl	801065c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8013304:	4813      	ldr	r0, [pc, #76]	; (8013354 <prvCheckForValidListAndQueue+0x68>)
 8013306:	f7fd f9a9 	bl	801065c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801330a:	4b13      	ldr	r3, [pc, #76]	; (8013358 <prvCheckForValidListAndQueue+0x6c>)
 801330c:	4a10      	ldr	r2, [pc, #64]	; (8013350 <prvCheckForValidListAndQueue+0x64>)
 801330e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8013310:	4b12      	ldr	r3, [pc, #72]	; (801335c <prvCheckForValidListAndQueue+0x70>)
 8013312:	4a10      	ldr	r2, [pc, #64]	; (8013354 <prvCheckForValidListAndQueue+0x68>)
 8013314:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8013316:	2300      	movs	r3, #0
 8013318:	9300      	str	r3, [sp, #0]
 801331a:	4b11      	ldr	r3, [pc, #68]	; (8013360 <prvCheckForValidListAndQueue+0x74>)
 801331c:	4a11      	ldr	r2, [pc, #68]	; (8013364 <prvCheckForValidListAndQueue+0x78>)
 801331e:	2110      	movs	r1, #16
 8013320:	200a      	movs	r0, #10
 8013322:	f7fd fd09 	bl	8010d38 <xQueueGenericCreateStatic>
 8013326:	4603      	mov	r3, r0
 8013328:	4a08      	ldr	r2, [pc, #32]	; (801334c <prvCheckForValidListAndQueue+0x60>)
 801332a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 801332c:	4b07      	ldr	r3, [pc, #28]	; (801334c <prvCheckForValidListAndQueue+0x60>)
 801332e:	681b      	ldr	r3, [r3, #0]
 8013330:	2b00      	cmp	r3, #0
 8013332:	d005      	beq.n	8013340 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8013334:	4b05      	ldr	r3, [pc, #20]	; (801334c <prvCheckForValidListAndQueue+0x60>)
 8013336:	681b      	ldr	r3, [r3, #0]
 8013338:	490b      	ldr	r1, [pc, #44]	; (8013368 <prvCheckForValidListAndQueue+0x7c>)
 801333a:	4618      	mov	r0, r3
 801333c:	f7fe fc1a 	bl	8011b74 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8013340:	f7fd fba0 	bl	8010a84 <vPortExitCritical>
}
 8013344:	bf00      	nop
 8013346:	46bd      	mov	sp, r7
 8013348:	bd80      	pop	{r7, pc}
 801334a:	bf00      	nop
 801334c:	24005508 	.word	0x24005508
 8013350:	240054d8 	.word	0x240054d8
 8013354:	240054ec 	.word	0x240054ec
 8013358:	24005500 	.word	0x24005500
 801335c:	24005504 	.word	0x24005504
 8013360:	240055b4 	.word	0x240055b4
 8013364:	24005514 	.word	0x24005514
 8013368:	08017b28 	.word	0x08017b28

0801336c <_ZdlPvj>:
 801336c:	f000 b800 	b.w	8013370 <_ZdlPv>

08013370 <_ZdlPv>:
 8013370:	f000 b808 	b.w	8013384 <free>

08013374 <malloc>:
 8013374:	4b02      	ldr	r3, [pc, #8]	; (8013380 <malloc+0xc>)
 8013376:	4601      	mov	r1, r0
 8013378:	6818      	ldr	r0, [r3, #0]
 801337a:	f000 b82b 	b.w	80133d4 <_malloc_r>
 801337e:	bf00      	nop
 8013380:	2400006c 	.word	0x2400006c

08013384 <free>:
 8013384:	4b02      	ldr	r3, [pc, #8]	; (8013390 <free+0xc>)
 8013386:	4601      	mov	r1, r0
 8013388:	6818      	ldr	r0, [r3, #0]
 801338a:	f001 bf39 	b.w	8015200 <_free_r>
 801338e:	bf00      	nop
 8013390:	2400006c 	.word	0x2400006c

08013394 <sbrk_aligned>:
 8013394:	b570      	push	{r4, r5, r6, lr}
 8013396:	4e0e      	ldr	r6, [pc, #56]	; (80133d0 <sbrk_aligned+0x3c>)
 8013398:	460c      	mov	r4, r1
 801339a:	6831      	ldr	r1, [r6, #0]
 801339c:	4605      	mov	r5, r0
 801339e:	b911      	cbnz	r1, 80133a6 <sbrk_aligned+0x12>
 80133a0:	f001 f8d4 	bl	801454c <_sbrk_r>
 80133a4:	6030      	str	r0, [r6, #0]
 80133a6:	4621      	mov	r1, r4
 80133a8:	4628      	mov	r0, r5
 80133aa:	f001 f8cf 	bl	801454c <_sbrk_r>
 80133ae:	1c43      	adds	r3, r0, #1
 80133b0:	d00a      	beq.n	80133c8 <sbrk_aligned+0x34>
 80133b2:	1cc4      	adds	r4, r0, #3
 80133b4:	f024 0403 	bic.w	r4, r4, #3
 80133b8:	42a0      	cmp	r0, r4
 80133ba:	d007      	beq.n	80133cc <sbrk_aligned+0x38>
 80133bc:	1a21      	subs	r1, r4, r0
 80133be:	4628      	mov	r0, r5
 80133c0:	f001 f8c4 	bl	801454c <_sbrk_r>
 80133c4:	3001      	adds	r0, #1
 80133c6:	d101      	bne.n	80133cc <sbrk_aligned+0x38>
 80133c8:	f04f 34ff 	mov.w	r4, #4294967295
 80133cc:	4620      	mov	r0, r4
 80133ce:	bd70      	pop	{r4, r5, r6, pc}
 80133d0:	24005608 	.word	0x24005608

080133d4 <_malloc_r>:
 80133d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80133d8:	1ccd      	adds	r5, r1, #3
 80133da:	f025 0503 	bic.w	r5, r5, #3
 80133de:	3508      	adds	r5, #8
 80133e0:	2d0c      	cmp	r5, #12
 80133e2:	bf38      	it	cc
 80133e4:	250c      	movcc	r5, #12
 80133e6:	2d00      	cmp	r5, #0
 80133e8:	4607      	mov	r7, r0
 80133ea:	db01      	blt.n	80133f0 <_malloc_r+0x1c>
 80133ec:	42a9      	cmp	r1, r5
 80133ee:	d905      	bls.n	80133fc <_malloc_r+0x28>
 80133f0:	230c      	movs	r3, #12
 80133f2:	603b      	str	r3, [r7, #0]
 80133f4:	2600      	movs	r6, #0
 80133f6:	4630      	mov	r0, r6
 80133f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80133fc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80134d0 <_malloc_r+0xfc>
 8013400:	f000 f868 	bl	80134d4 <__malloc_lock>
 8013404:	f8d8 3000 	ldr.w	r3, [r8]
 8013408:	461c      	mov	r4, r3
 801340a:	bb5c      	cbnz	r4, 8013464 <_malloc_r+0x90>
 801340c:	4629      	mov	r1, r5
 801340e:	4638      	mov	r0, r7
 8013410:	f7ff ffc0 	bl	8013394 <sbrk_aligned>
 8013414:	1c43      	adds	r3, r0, #1
 8013416:	4604      	mov	r4, r0
 8013418:	d155      	bne.n	80134c6 <_malloc_r+0xf2>
 801341a:	f8d8 4000 	ldr.w	r4, [r8]
 801341e:	4626      	mov	r6, r4
 8013420:	2e00      	cmp	r6, #0
 8013422:	d145      	bne.n	80134b0 <_malloc_r+0xdc>
 8013424:	2c00      	cmp	r4, #0
 8013426:	d048      	beq.n	80134ba <_malloc_r+0xe6>
 8013428:	6823      	ldr	r3, [r4, #0]
 801342a:	4631      	mov	r1, r6
 801342c:	4638      	mov	r0, r7
 801342e:	eb04 0903 	add.w	r9, r4, r3
 8013432:	f001 f88b 	bl	801454c <_sbrk_r>
 8013436:	4581      	cmp	r9, r0
 8013438:	d13f      	bne.n	80134ba <_malloc_r+0xe6>
 801343a:	6821      	ldr	r1, [r4, #0]
 801343c:	1a6d      	subs	r5, r5, r1
 801343e:	4629      	mov	r1, r5
 8013440:	4638      	mov	r0, r7
 8013442:	f7ff ffa7 	bl	8013394 <sbrk_aligned>
 8013446:	3001      	adds	r0, #1
 8013448:	d037      	beq.n	80134ba <_malloc_r+0xe6>
 801344a:	6823      	ldr	r3, [r4, #0]
 801344c:	442b      	add	r3, r5
 801344e:	6023      	str	r3, [r4, #0]
 8013450:	f8d8 3000 	ldr.w	r3, [r8]
 8013454:	2b00      	cmp	r3, #0
 8013456:	d038      	beq.n	80134ca <_malloc_r+0xf6>
 8013458:	685a      	ldr	r2, [r3, #4]
 801345a:	42a2      	cmp	r2, r4
 801345c:	d12b      	bne.n	80134b6 <_malloc_r+0xe2>
 801345e:	2200      	movs	r2, #0
 8013460:	605a      	str	r2, [r3, #4]
 8013462:	e00f      	b.n	8013484 <_malloc_r+0xb0>
 8013464:	6822      	ldr	r2, [r4, #0]
 8013466:	1b52      	subs	r2, r2, r5
 8013468:	d41f      	bmi.n	80134aa <_malloc_r+0xd6>
 801346a:	2a0b      	cmp	r2, #11
 801346c:	d917      	bls.n	801349e <_malloc_r+0xca>
 801346e:	1961      	adds	r1, r4, r5
 8013470:	42a3      	cmp	r3, r4
 8013472:	6025      	str	r5, [r4, #0]
 8013474:	bf18      	it	ne
 8013476:	6059      	strne	r1, [r3, #4]
 8013478:	6863      	ldr	r3, [r4, #4]
 801347a:	bf08      	it	eq
 801347c:	f8c8 1000 	streq.w	r1, [r8]
 8013480:	5162      	str	r2, [r4, r5]
 8013482:	604b      	str	r3, [r1, #4]
 8013484:	4638      	mov	r0, r7
 8013486:	f104 060b 	add.w	r6, r4, #11
 801348a:	f000 f829 	bl	80134e0 <__malloc_unlock>
 801348e:	f026 0607 	bic.w	r6, r6, #7
 8013492:	1d23      	adds	r3, r4, #4
 8013494:	1af2      	subs	r2, r6, r3
 8013496:	d0ae      	beq.n	80133f6 <_malloc_r+0x22>
 8013498:	1b9b      	subs	r3, r3, r6
 801349a:	50a3      	str	r3, [r4, r2]
 801349c:	e7ab      	b.n	80133f6 <_malloc_r+0x22>
 801349e:	42a3      	cmp	r3, r4
 80134a0:	6862      	ldr	r2, [r4, #4]
 80134a2:	d1dd      	bne.n	8013460 <_malloc_r+0x8c>
 80134a4:	f8c8 2000 	str.w	r2, [r8]
 80134a8:	e7ec      	b.n	8013484 <_malloc_r+0xb0>
 80134aa:	4623      	mov	r3, r4
 80134ac:	6864      	ldr	r4, [r4, #4]
 80134ae:	e7ac      	b.n	801340a <_malloc_r+0x36>
 80134b0:	4634      	mov	r4, r6
 80134b2:	6876      	ldr	r6, [r6, #4]
 80134b4:	e7b4      	b.n	8013420 <_malloc_r+0x4c>
 80134b6:	4613      	mov	r3, r2
 80134b8:	e7cc      	b.n	8013454 <_malloc_r+0x80>
 80134ba:	230c      	movs	r3, #12
 80134bc:	603b      	str	r3, [r7, #0]
 80134be:	4638      	mov	r0, r7
 80134c0:	f000 f80e 	bl	80134e0 <__malloc_unlock>
 80134c4:	e797      	b.n	80133f6 <_malloc_r+0x22>
 80134c6:	6025      	str	r5, [r4, #0]
 80134c8:	e7dc      	b.n	8013484 <_malloc_r+0xb0>
 80134ca:	605b      	str	r3, [r3, #4]
 80134cc:	deff      	udf	#255	; 0xff
 80134ce:	bf00      	nop
 80134d0:	24005604 	.word	0x24005604

080134d4 <__malloc_lock>:
 80134d4:	4801      	ldr	r0, [pc, #4]	; (80134dc <__malloc_lock+0x8>)
 80134d6:	f001 b886 	b.w	80145e6 <__retarget_lock_acquire_recursive>
 80134da:	bf00      	nop
 80134dc:	2400574c 	.word	0x2400574c

080134e0 <__malloc_unlock>:
 80134e0:	4801      	ldr	r0, [pc, #4]	; (80134e8 <__malloc_unlock+0x8>)
 80134e2:	f001 b881 	b.w	80145e8 <__retarget_lock_release_recursive>
 80134e6:	bf00      	nop
 80134e8:	2400574c 	.word	0x2400574c

080134ec <__cvt>:
 80134ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80134ee:	ed2d 8b02 	vpush	{d8}
 80134f2:	eeb0 8b40 	vmov.f64	d8, d0
 80134f6:	b085      	sub	sp, #20
 80134f8:	4617      	mov	r7, r2
 80134fa:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80134fc:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80134fe:	ee18 2a90 	vmov	r2, s17
 8013502:	f025 0520 	bic.w	r5, r5, #32
 8013506:	2a00      	cmp	r2, #0
 8013508:	bfb6      	itet	lt
 801350a:	222d      	movlt	r2, #45	; 0x2d
 801350c:	2200      	movge	r2, #0
 801350e:	eeb1 8b40 	vneglt.f64	d8, d0
 8013512:	2d46      	cmp	r5, #70	; 0x46
 8013514:	460c      	mov	r4, r1
 8013516:	701a      	strb	r2, [r3, #0]
 8013518:	d004      	beq.n	8013524 <__cvt+0x38>
 801351a:	2d45      	cmp	r5, #69	; 0x45
 801351c:	d100      	bne.n	8013520 <__cvt+0x34>
 801351e:	3401      	adds	r4, #1
 8013520:	2102      	movs	r1, #2
 8013522:	e000      	b.n	8013526 <__cvt+0x3a>
 8013524:	2103      	movs	r1, #3
 8013526:	ab03      	add	r3, sp, #12
 8013528:	9301      	str	r3, [sp, #4]
 801352a:	ab02      	add	r3, sp, #8
 801352c:	9300      	str	r3, [sp, #0]
 801352e:	4622      	mov	r2, r4
 8013530:	4633      	mov	r3, r6
 8013532:	eeb0 0b48 	vmov.f64	d0, d8
 8013536:	f001 f8f7 	bl	8014728 <_dtoa_r>
 801353a:	2d47      	cmp	r5, #71	; 0x47
 801353c:	d101      	bne.n	8013542 <__cvt+0x56>
 801353e:	07fb      	lsls	r3, r7, #31
 8013540:	d51a      	bpl.n	8013578 <__cvt+0x8c>
 8013542:	2d46      	cmp	r5, #70	; 0x46
 8013544:	eb00 0204 	add.w	r2, r0, r4
 8013548:	d10c      	bne.n	8013564 <__cvt+0x78>
 801354a:	7803      	ldrb	r3, [r0, #0]
 801354c:	2b30      	cmp	r3, #48	; 0x30
 801354e:	d107      	bne.n	8013560 <__cvt+0x74>
 8013550:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8013554:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013558:	bf1c      	itt	ne
 801355a:	f1c4 0401 	rsbne	r4, r4, #1
 801355e:	6034      	strne	r4, [r6, #0]
 8013560:	6833      	ldr	r3, [r6, #0]
 8013562:	441a      	add	r2, r3
 8013564:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8013568:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801356c:	bf08      	it	eq
 801356e:	9203      	streq	r2, [sp, #12]
 8013570:	2130      	movs	r1, #48	; 0x30
 8013572:	9b03      	ldr	r3, [sp, #12]
 8013574:	4293      	cmp	r3, r2
 8013576:	d307      	bcc.n	8013588 <__cvt+0x9c>
 8013578:	9b03      	ldr	r3, [sp, #12]
 801357a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801357c:	1a1b      	subs	r3, r3, r0
 801357e:	6013      	str	r3, [r2, #0]
 8013580:	b005      	add	sp, #20
 8013582:	ecbd 8b02 	vpop	{d8}
 8013586:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013588:	1c5c      	adds	r4, r3, #1
 801358a:	9403      	str	r4, [sp, #12]
 801358c:	7019      	strb	r1, [r3, #0]
 801358e:	e7f0      	b.n	8013572 <__cvt+0x86>

08013590 <__exponent>:
 8013590:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013592:	4603      	mov	r3, r0
 8013594:	2900      	cmp	r1, #0
 8013596:	bfb8      	it	lt
 8013598:	4249      	neglt	r1, r1
 801359a:	f803 2b02 	strb.w	r2, [r3], #2
 801359e:	bfb4      	ite	lt
 80135a0:	222d      	movlt	r2, #45	; 0x2d
 80135a2:	222b      	movge	r2, #43	; 0x2b
 80135a4:	2909      	cmp	r1, #9
 80135a6:	7042      	strb	r2, [r0, #1]
 80135a8:	dd2a      	ble.n	8013600 <__exponent+0x70>
 80135aa:	f10d 0207 	add.w	r2, sp, #7
 80135ae:	4617      	mov	r7, r2
 80135b0:	260a      	movs	r6, #10
 80135b2:	4694      	mov	ip, r2
 80135b4:	fb91 f5f6 	sdiv	r5, r1, r6
 80135b8:	fb06 1415 	mls	r4, r6, r5, r1
 80135bc:	3430      	adds	r4, #48	; 0x30
 80135be:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80135c2:	460c      	mov	r4, r1
 80135c4:	2c63      	cmp	r4, #99	; 0x63
 80135c6:	f102 32ff 	add.w	r2, r2, #4294967295
 80135ca:	4629      	mov	r1, r5
 80135cc:	dcf1      	bgt.n	80135b2 <__exponent+0x22>
 80135ce:	3130      	adds	r1, #48	; 0x30
 80135d0:	f1ac 0402 	sub.w	r4, ip, #2
 80135d4:	f802 1c01 	strb.w	r1, [r2, #-1]
 80135d8:	1c41      	adds	r1, r0, #1
 80135da:	4622      	mov	r2, r4
 80135dc:	42ba      	cmp	r2, r7
 80135de:	d30a      	bcc.n	80135f6 <__exponent+0x66>
 80135e0:	f10d 0209 	add.w	r2, sp, #9
 80135e4:	eba2 020c 	sub.w	r2, r2, ip
 80135e8:	42bc      	cmp	r4, r7
 80135ea:	bf88      	it	hi
 80135ec:	2200      	movhi	r2, #0
 80135ee:	4413      	add	r3, r2
 80135f0:	1a18      	subs	r0, r3, r0
 80135f2:	b003      	add	sp, #12
 80135f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80135f6:	f812 5b01 	ldrb.w	r5, [r2], #1
 80135fa:	f801 5f01 	strb.w	r5, [r1, #1]!
 80135fe:	e7ed      	b.n	80135dc <__exponent+0x4c>
 8013600:	2330      	movs	r3, #48	; 0x30
 8013602:	3130      	adds	r1, #48	; 0x30
 8013604:	7083      	strb	r3, [r0, #2]
 8013606:	70c1      	strb	r1, [r0, #3]
 8013608:	1d03      	adds	r3, r0, #4
 801360a:	e7f1      	b.n	80135f0 <__exponent+0x60>
 801360c:	0000      	movs	r0, r0
	...

08013610 <_printf_float>:
 8013610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013614:	b08b      	sub	sp, #44	; 0x2c
 8013616:	460c      	mov	r4, r1
 8013618:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 801361c:	4616      	mov	r6, r2
 801361e:	461f      	mov	r7, r3
 8013620:	4605      	mov	r5, r0
 8013622:	f000 ff05 	bl	8014430 <_localeconv_r>
 8013626:	f8d0 b000 	ldr.w	fp, [r0]
 801362a:	4658      	mov	r0, fp
 801362c:	f7ec fea8 	bl	8000380 <strlen>
 8013630:	2300      	movs	r3, #0
 8013632:	9308      	str	r3, [sp, #32]
 8013634:	f8d8 3000 	ldr.w	r3, [r8]
 8013638:	f894 9018 	ldrb.w	r9, [r4, #24]
 801363c:	6822      	ldr	r2, [r4, #0]
 801363e:	3307      	adds	r3, #7
 8013640:	f023 0307 	bic.w	r3, r3, #7
 8013644:	f103 0108 	add.w	r1, r3, #8
 8013648:	f8c8 1000 	str.w	r1, [r8]
 801364c:	ed93 0b00 	vldr	d0, [r3]
 8013650:	ed9f 6b97 	vldr	d6, [pc, #604]	; 80138b0 <_printf_float+0x2a0>
 8013654:	eeb0 7bc0 	vabs.f64	d7, d0
 8013658:	eeb4 7b46 	vcmp.f64	d7, d6
 801365c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013660:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 8013664:	4682      	mov	sl, r0
 8013666:	dd24      	ble.n	80136b2 <_printf_float+0xa2>
 8013668:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801366c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013670:	d502      	bpl.n	8013678 <_printf_float+0x68>
 8013672:	232d      	movs	r3, #45	; 0x2d
 8013674:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013678:	498f      	ldr	r1, [pc, #572]	; (80138b8 <_printf_float+0x2a8>)
 801367a:	4b90      	ldr	r3, [pc, #576]	; (80138bc <_printf_float+0x2ac>)
 801367c:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8013680:	bf94      	ite	ls
 8013682:	4688      	movls	r8, r1
 8013684:	4698      	movhi	r8, r3
 8013686:	2303      	movs	r3, #3
 8013688:	6123      	str	r3, [r4, #16]
 801368a:	f022 0204 	bic.w	r2, r2, #4
 801368e:	2300      	movs	r3, #0
 8013690:	6022      	str	r2, [r4, #0]
 8013692:	9304      	str	r3, [sp, #16]
 8013694:	9700      	str	r7, [sp, #0]
 8013696:	4633      	mov	r3, r6
 8013698:	aa09      	add	r2, sp, #36	; 0x24
 801369a:	4621      	mov	r1, r4
 801369c:	4628      	mov	r0, r5
 801369e:	f000 f9d1 	bl	8013a44 <_printf_common>
 80136a2:	3001      	adds	r0, #1
 80136a4:	f040 808a 	bne.w	80137bc <_printf_float+0x1ac>
 80136a8:	f04f 30ff 	mov.w	r0, #4294967295
 80136ac:	b00b      	add	sp, #44	; 0x2c
 80136ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80136b2:	eeb4 0b40 	vcmp.f64	d0, d0
 80136b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80136ba:	d709      	bvc.n	80136d0 <_printf_float+0xc0>
 80136bc:	ee10 3a90 	vmov	r3, s1
 80136c0:	2b00      	cmp	r3, #0
 80136c2:	bfbc      	itt	lt
 80136c4:	232d      	movlt	r3, #45	; 0x2d
 80136c6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80136ca:	497d      	ldr	r1, [pc, #500]	; (80138c0 <_printf_float+0x2b0>)
 80136cc:	4b7d      	ldr	r3, [pc, #500]	; (80138c4 <_printf_float+0x2b4>)
 80136ce:	e7d5      	b.n	801367c <_printf_float+0x6c>
 80136d0:	6863      	ldr	r3, [r4, #4]
 80136d2:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80136d6:	9104      	str	r1, [sp, #16]
 80136d8:	1c59      	adds	r1, r3, #1
 80136da:	d13c      	bne.n	8013756 <_printf_float+0x146>
 80136dc:	2306      	movs	r3, #6
 80136de:	6063      	str	r3, [r4, #4]
 80136e0:	2300      	movs	r3, #0
 80136e2:	9303      	str	r3, [sp, #12]
 80136e4:	ab08      	add	r3, sp, #32
 80136e6:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80136ea:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80136ee:	ab07      	add	r3, sp, #28
 80136f0:	6861      	ldr	r1, [r4, #4]
 80136f2:	9300      	str	r3, [sp, #0]
 80136f4:	6022      	str	r2, [r4, #0]
 80136f6:	f10d 031b 	add.w	r3, sp, #27
 80136fa:	4628      	mov	r0, r5
 80136fc:	f7ff fef6 	bl	80134ec <__cvt>
 8013700:	9b04      	ldr	r3, [sp, #16]
 8013702:	9907      	ldr	r1, [sp, #28]
 8013704:	2b47      	cmp	r3, #71	; 0x47
 8013706:	4680      	mov	r8, r0
 8013708:	d108      	bne.n	801371c <_printf_float+0x10c>
 801370a:	1cc8      	adds	r0, r1, #3
 801370c:	db02      	blt.n	8013714 <_printf_float+0x104>
 801370e:	6863      	ldr	r3, [r4, #4]
 8013710:	4299      	cmp	r1, r3
 8013712:	dd41      	ble.n	8013798 <_printf_float+0x188>
 8013714:	f1a9 0902 	sub.w	r9, r9, #2
 8013718:	fa5f f989 	uxtb.w	r9, r9
 801371c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8013720:	d820      	bhi.n	8013764 <_printf_float+0x154>
 8013722:	3901      	subs	r1, #1
 8013724:	464a      	mov	r2, r9
 8013726:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801372a:	9107      	str	r1, [sp, #28]
 801372c:	f7ff ff30 	bl	8013590 <__exponent>
 8013730:	9a08      	ldr	r2, [sp, #32]
 8013732:	9004      	str	r0, [sp, #16]
 8013734:	1813      	adds	r3, r2, r0
 8013736:	2a01      	cmp	r2, #1
 8013738:	6123      	str	r3, [r4, #16]
 801373a:	dc02      	bgt.n	8013742 <_printf_float+0x132>
 801373c:	6822      	ldr	r2, [r4, #0]
 801373e:	07d2      	lsls	r2, r2, #31
 8013740:	d501      	bpl.n	8013746 <_printf_float+0x136>
 8013742:	3301      	adds	r3, #1
 8013744:	6123      	str	r3, [r4, #16]
 8013746:	f89d 301b 	ldrb.w	r3, [sp, #27]
 801374a:	2b00      	cmp	r3, #0
 801374c:	d0a2      	beq.n	8013694 <_printf_float+0x84>
 801374e:	232d      	movs	r3, #45	; 0x2d
 8013750:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013754:	e79e      	b.n	8013694 <_printf_float+0x84>
 8013756:	9904      	ldr	r1, [sp, #16]
 8013758:	2947      	cmp	r1, #71	; 0x47
 801375a:	d1c1      	bne.n	80136e0 <_printf_float+0xd0>
 801375c:	2b00      	cmp	r3, #0
 801375e:	d1bf      	bne.n	80136e0 <_printf_float+0xd0>
 8013760:	2301      	movs	r3, #1
 8013762:	e7bc      	b.n	80136de <_printf_float+0xce>
 8013764:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8013768:	d118      	bne.n	801379c <_printf_float+0x18c>
 801376a:	2900      	cmp	r1, #0
 801376c:	6863      	ldr	r3, [r4, #4]
 801376e:	dd0b      	ble.n	8013788 <_printf_float+0x178>
 8013770:	6121      	str	r1, [r4, #16]
 8013772:	b913      	cbnz	r3, 801377a <_printf_float+0x16a>
 8013774:	6822      	ldr	r2, [r4, #0]
 8013776:	07d0      	lsls	r0, r2, #31
 8013778:	d502      	bpl.n	8013780 <_printf_float+0x170>
 801377a:	3301      	adds	r3, #1
 801377c:	440b      	add	r3, r1
 801377e:	6123      	str	r3, [r4, #16]
 8013780:	2300      	movs	r3, #0
 8013782:	65a1      	str	r1, [r4, #88]	; 0x58
 8013784:	9304      	str	r3, [sp, #16]
 8013786:	e7de      	b.n	8013746 <_printf_float+0x136>
 8013788:	b913      	cbnz	r3, 8013790 <_printf_float+0x180>
 801378a:	6822      	ldr	r2, [r4, #0]
 801378c:	07d2      	lsls	r2, r2, #31
 801378e:	d501      	bpl.n	8013794 <_printf_float+0x184>
 8013790:	3302      	adds	r3, #2
 8013792:	e7f4      	b.n	801377e <_printf_float+0x16e>
 8013794:	2301      	movs	r3, #1
 8013796:	e7f2      	b.n	801377e <_printf_float+0x16e>
 8013798:	f04f 0967 	mov.w	r9, #103	; 0x67
 801379c:	9b08      	ldr	r3, [sp, #32]
 801379e:	4299      	cmp	r1, r3
 80137a0:	db05      	blt.n	80137ae <_printf_float+0x19e>
 80137a2:	6823      	ldr	r3, [r4, #0]
 80137a4:	6121      	str	r1, [r4, #16]
 80137a6:	07d8      	lsls	r0, r3, #31
 80137a8:	d5ea      	bpl.n	8013780 <_printf_float+0x170>
 80137aa:	1c4b      	adds	r3, r1, #1
 80137ac:	e7e7      	b.n	801377e <_printf_float+0x16e>
 80137ae:	2900      	cmp	r1, #0
 80137b0:	bfd4      	ite	le
 80137b2:	f1c1 0202 	rsble	r2, r1, #2
 80137b6:	2201      	movgt	r2, #1
 80137b8:	4413      	add	r3, r2
 80137ba:	e7e0      	b.n	801377e <_printf_float+0x16e>
 80137bc:	6823      	ldr	r3, [r4, #0]
 80137be:	055a      	lsls	r2, r3, #21
 80137c0:	d407      	bmi.n	80137d2 <_printf_float+0x1c2>
 80137c2:	6923      	ldr	r3, [r4, #16]
 80137c4:	4642      	mov	r2, r8
 80137c6:	4631      	mov	r1, r6
 80137c8:	4628      	mov	r0, r5
 80137ca:	47b8      	blx	r7
 80137cc:	3001      	adds	r0, #1
 80137ce:	d12a      	bne.n	8013826 <_printf_float+0x216>
 80137d0:	e76a      	b.n	80136a8 <_printf_float+0x98>
 80137d2:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80137d6:	f240 80e0 	bls.w	801399a <_printf_float+0x38a>
 80137da:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80137de:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80137e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80137e6:	d133      	bne.n	8013850 <_printf_float+0x240>
 80137e8:	4a37      	ldr	r2, [pc, #220]	; (80138c8 <_printf_float+0x2b8>)
 80137ea:	2301      	movs	r3, #1
 80137ec:	4631      	mov	r1, r6
 80137ee:	4628      	mov	r0, r5
 80137f0:	47b8      	blx	r7
 80137f2:	3001      	adds	r0, #1
 80137f4:	f43f af58 	beq.w	80136a8 <_printf_float+0x98>
 80137f8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80137fc:	429a      	cmp	r2, r3
 80137fe:	db02      	blt.n	8013806 <_printf_float+0x1f6>
 8013800:	6823      	ldr	r3, [r4, #0]
 8013802:	07d8      	lsls	r0, r3, #31
 8013804:	d50f      	bpl.n	8013826 <_printf_float+0x216>
 8013806:	4653      	mov	r3, sl
 8013808:	465a      	mov	r2, fp
 801380a:	4631      	mov	r1, r6
 801380c:	4628      	mov	r0, r5
 801380e:	47b8      	blx	r7
 8013810:	3001      	adds	r0, #1
 8013812:	f43f af49 	beq.w	80136a8 <_printf_float+0x98>
 8013816:	f04f 0800 	mov.w	r8, #0
 801381a:	f104 091a 	add.w	r9, r4, #26
 801381e:	9b08      	ldr	r3, [sp, #32]
 8013820:	3b01      	subs	r3, #1
 8013822:	4543      	cmp	r3, r8
 8013824:	dc09      	bgt.n	801383a <_printf_float+0x22a>
 8013826:	6823      	ldr	r3, [r4, #0]
 8013828:	079b      	lsls	r3, r3, #30
 801382a:	f100 8106 	bmi.w	8013a3a <_printf_float+0x42a>
 801382e:	68e0      	ldr	r0, [r4, #12]
 8013830:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013832:	4298      	cmp	r0, r3
 8013834:	bfb8      	it	lt
 8013836:	4618      	movlt	r0, r3
 8013838:	e738      	b.n	80136ac <_printf_float+0x9c>
 801383a:	2301      	movs	r3, #1
 801383c:	464a      	mov	r2, r9
 801383e:	4631      	mov	r1, r6
 8013840:	4628      	mov	r0, r5
 8013842:	47b8      	blx	r7
 8013844:	3001      	adds	r0, #1
 8013846:	f43f af2f 	beq.w	80136a8 <_printf_float+0x98>
 801384a:	f108 0801 	add.w	r8, r8, #1
 801384e:	e7e6      	b.n	801381e <_printf_float+0x20e>
 8013850:	9b07      	ldr	r3, [sp, #28]
 8013852:	2b00      	cmp	r3, #0
 8013854:	dc3a      	bgt.n	80138cc <_printf_float+0x2bc>
 8013856:	4a1c      	ldr	r2, [pc, #112]	; (80138c8 <_printf_float+0x2b8>)
 8013858:	2301      	movs	r3, #1
 801385a:	4631      	mov	r1, r6
 801385c:	4628      	mov	r0, r5
 801385e:	47b8      	blx	r7
 8013860:	3001      	adds	r0, #1
 8013862:	f43f af21 	beq.w	80136a8 <_printf_float+0x98>
 8013866:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 801386a:	4313      	orrs	r3, r2
 801386c:	d102      	bne.n	8013874 <_printf_float+0x264>
 801386e:	6823      	ldr	r3, [r4, #0]
 8013870:	07d9      	lsls	r1, r3, #31
 8013872:	d5d8      	bpl.n	8013826 <_printf_float+0x216>
 8013874:	4653      	mov	r3, sl
 8013876:	465a      	mov	r2, fp
 8013878:	4631      	mov	r1, r6
 801387a:	4628      	mov	r0, r5
 801387c:	47b8      	blx	r7
 801387e:	3001      	adds	r0, #1
 8013880:	f43f af12 	beq.w	80136a8 <_printf_float+0x98>
 8013884:	f04f 0900 	mov.w	r9, #0
 8013888:	f104 0a1a 	add.w	sl, r4, #26
 801388c:	9b07      	ldr	r3, [sp, #28]
 801388e:	425b      	negs	r3, r3
 8013890:	454b      	cmp	r3, r9
 8013892:	dc01      	bgt.n	8013898 <_printf_float+0x288>
 8013894:	9b08      	ldr	r3, [sp, #32]
 8013896:	e795      	b.n	80137c4 <_printf_float+0x1b4>
 8013898:	2301      	movs	r3, #1
 801389a:	4652      	mov	r2, sl
 801389c:	4631      	mov	r1, r6
 801389e:	4628      	mov	r0, r5
 80138a0:	47b8      	blx	r7
 80138a2:	3001      	adds	r0, #1
 80138a4:	f43f af00 	beq.w	80136a8 <_printf_float+0x98>
 80138a8:	f109 0901 	add.w	r9, r9, #1
 80138ac:	e7ee      	b.n	801388c <_printf_float+0x27c>
 80138ae:	bf00      	nop
 80138b0:	ffffffff 	.word	0xffffffff
 80138b4:	7fefffff 	.word	0x7fefffff
 80138b8:	08017c7c 	.word	0x08017c7c
 80138bc:	08017c80 	.word	0x08017c80
 80138c0:	08017c84 	.word	0x08017c84
 80138c4:	08017c88 	.word	0x08017c88
 80138c8:	08017c8c 	.word	0x08017c8c
 80138cc:	9a08      	ldr	r2, [sp, #32]
 80138ce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80138d0:	429a      	cmp	r2, r3
 80138d2:	bfa8      	it	ge
 80138d4:	461a      	movge	r2, r3
 80138d6:	2a00      	cmp	r2, #0
 80138d8:	4691      	mov	r9, r2
 80138da:	dc38      	bgt.n	801394e <_printf_float+0x33e>
 80138dc:	2300      	movs	r3, #0
 80138de:	9305      	str	r3, [sp, #20]
 80138e0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80138e4:	f104 021a 	add.w	r2, r4, #26
 80138e8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80138ea:	9905      	ldr	r1, [sp, #20]
 80138ec:	9304      	str	r3, [sp, #16]
 80138ee:	eba3 0309 	sub.w	r3, r3, r9
 80138f2:	428b      	cmp	r3, r1
 80138f4:	dc33      	bgt.n	801395e <_printf_float+0x34e>
 80138f6:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80138fa:	429a      	cmp	r2, r3
 80138fc:	db3c      	blt.n	8013978 <_printf_float+0x368>
 80138fe:	6823      	ldr	r3, [r4, #0]
 8013900:	07da      	lsls	r2, r3, #31
 8013902:	d439      	bmi.n	8013978 <_printf_float+0x368>
 8013904:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8013908:	eba2 0903 	sub.w	r9, r2, r3
 801390c:	9b04      	ldr	r3, [sp, #16]
 801390e:	1ad2      	subs	r2, r2, r3
 8013910:	4591      	cmp	r9, r2
 8013912:	bfa8      	it	ge
 8013914:	4691      	movge	r9, r2
 8013916:	f1b9 0f00 	cmp.w	r9, #0
 801391a:	dc35      	bgt.n	8013988 <_printf_float+0x378>
 801391c:	f04f 0800 	mov.w	r8, #0
 8013920:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013924:	f104 0a1a 	add.w	sl, r4, #26
 8013928:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801392c:	1a9b      	subs	r3, r3, r2
 801392e:	eba3 0309 	sub.w	r3, r3, r9
 8013932:	4543      	cmp	r3, r8
 8013934:	f77f af77 	ble.w	8013826 <_printf_float+0x216>
 8013938:	2301      	movs	r3, #1
 801393a:	4652      	mov	r2, sl
 801393c:	4631      	mov	r1, r6
 801393e:	4628      	mov	r0, r5
 8013940:	47b8      	blx	r7
 8013942:	3001      	adds	r0, #1
 8013944:	f43f aeb0 	beq.w	80136a8 <_printf_float+0x98>
 8013948:	f108 0801 	add.w	r8, r8, #1
 801394c:	e7ec      	b.n	8013928 <_printf_float+0x318>
 801394e:	4613      	mov	r3, r2
 8013950:	4631      	mov	r1, r6
 8013952:	4642      	mov	r2, r8
 8013954:	4628      	mov	r0, r5
 8013956:	47b8      	blx	r7
 8013958:	3001      	adds	r0, #1
 801395a:	d1bf      	bne.n	80138dc <_printf_float+0x2cc>
 801395c:	e6a4      	b.n	80136a8 <_printf_float+0x98>
 801395e:	2301      	movs	r3, #1
 8013960:	4631      	mov	r1, r6
 8013962:	4628      	mov	r0, r5
 8013964:	9204      	str	r2, [sp, #16]
 8013966:	47b8      	blx	r7
 8013968:	3001      	adds	r0, #1
 801396a:	f43f ae9d 	beq.w	80136a8 <_printf_float+0x98>
 801396e:	9b05      	ldr	r3, [sp, #20]
 8013970:	9a04      	ldr	r2, [sp, #16]
 8013972:	3301      	adds	r3, #1
 8013974:	9305      	str	r3, [sp, #20]
 8013976:	e7b7      	b.n	80138e8 <_printf_float+0x2d8>
 8013978:	4653      	mov	r3, sl
 801397a:	465a      	mov	r2, fp
 801397c:	4631      	mov	r1, r6
 801397e:	4628      	mov	r0, r5
 8013980:	47b8      	blx	r7
 8013982:	3001      	adds	r0, #1
 8013984:	d1be      	bne.n	8013904 <_printf_float+0x2f4>
 8013986:	e68f      	b.n	80136a8 <_printf_float+0x98>
 8013988:	9a04      	ldr	r2, [sp, #16]
 801398a:	464b      	mov	r3, r9
 801398c:	4442      	add	r2, r8
 801398e:	4631      	mov	r1, r6
 8013990:	4628      	mov	r0, r5
 8013992:	47b8      	blx	r7
 8013994:	3001      	adds	r0, #1
 8013996:	d1c1      	bne.n	801391c <_printf_float+0x30c>
 8013998:	e686      	b.n	80136a8 <_printf_float+0x98>
 801399a:	9a08      	ldr	r2, [sp, #32]
 801399c:	2a01      	cmp	r2, #1
 801399e:	dc01      	bgt.n	80139a4 <_printf_float+0x394>
 80139a0:	07db      	lsls	r3, r3, #31
 80139a2:	d537      	bpl.n	8013a14 <_printf_float+0x404>
 80139a4:	2301      	movs	r3, #1
 80139a6:	4642      	mov	r2, r8
 80139a8:	4631      	mov	r1, r6
 80139aa:	4628      	mov	r0, r5
 80139ac:	47b8      	blx	r7
 80139ae:	3001      	adds	r0, #1
 80139b0:	f43f ae7a 	beq.w	80136a8 <_printf_float+0x98>
 80139b4:	4653      	mov	r3, sl
 80139b6:	465a      	mov	r2, fp
 80139b8:	4631      	mov	r1, r6
 80139ba:	4628      	mov	r0, r5
 80139bc:	47b8      	blx	r7
 80139be:	3001      	adds	r0, #1
 80139c0:	f43f ae72 	beq.w	80136a8 <_printf_float+0x98>
 80139c4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80139c8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80139cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80139d0:	9b08      	ldr	r3, [sp, #32]
 80139d2:	d01a      	beq.n	8013a0a <_printf_float+0x3fa>
 80139d4:	3b01      	subs	r3, #1
 80139d6:	f108 0201 	add.w	r2, r8, #1
 80139da:	4631      	mov	r1, r6
 80139dc:	4628      	mov	r0, r5
 80139de:	47b8      	blx	r7
 80139e0:	3001      	adds	r0, #1
 80139e2:	d10e      	bne.n	8013a02 <_printf_float+0x3f2>
 80139e4:	e660      	b.n	80136a8 <_printf_float+0x98>
 80139e6:	2301      	movs	r3, #1
 80139e8:	464a      	mov	r2, r9
 80139ea:	4631      	mov	r1, r6
 80139ec:	4628      	mov	r0, r5
 80139ee:	47b8      	blx	r7
 80139f0:	3001      	adds	r0, #1
 80139f2:	f43f ae59 	beq.w	80136a8 <_printf_float+0x98>
 80139f6:	f108 0801 	add.w	r8, r8, #1
 80139fa:	9b08      	ldr	r3, [sp, #32]
 80139fc:	3b01      	subs	r3, #1
 80139fe:	4543      	cmp	r3, r8
 8013a00:	dcf1      	bgt.n	80139e6 <_printf_float+0x3d6>
 8013a02:	9b04      	ldr	r3, [sp, #16]
 8013a04:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8013a08:	e6dd      	b.n	80137c6 <_printf_float+0x1b6>
 8013a0a:	f04f 0800 	mov.w	r8, #0
 8013a0e:	f104 091a 	add.w	r9, r4, #26
 8013a12:	e7f2      	b.n	80139fa <_printf_float+0x3ea>
 8013a14:	2301      	movs	r3, #1
 8013a16:	4642      	mov	r2, r8
 8013a18:	e7df      	b.n	80139da <_printf_float+0x3ca>
 8013a1a:	2301      	movs	r3, #1
 8013a1c:	464a      	mov	r2, r9
 8013a1e:	4631      	mov	r1, r6
 8013a20:	4628      	mov	r0, r5
 8013a22:	47b8      	blx	r7
 8013a24:	3001      	adds	r0, #1
 8013a26:	f43f ae3f 	beq.w	80136a8 <_printf_float+0x98>
 8013a2a:	f108 0801 	add.w	r8, r8, #1
 8013a2e:	68e3      	ldr	r3, [r4, #12]
 8013a30:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013a32:	1a5b      	subs	r3, r3, r1
 8013a34:	4543      	cmp	r3, r8
 8013a36:	dcf0      	bgt.n	8013a1a <_printf_float+0x40a>
 8013a38:	e6f9      	b.n	801382e <_printf_float+0x21e>
 8013a3a:	f04f 0800 	mov.w	r8, #0
 8013a3e:	f104 0919 	add.w	r9, r4, #25
 8013a42:	e7f4      	b.n	8013a2e <_printf_float+0x41e>

08013a44 <_printf_common>:
 8013a44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013a48:	4616      	mov	r6, r2
 8013a4a:	4699      	mov	r9, r3
 8013a4c:	688a      	ldr	r2, [r1, #8]
 8013a4e:	690b      	ldr	r3, [r1, #16]
 8013a50:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013a54:	4293      	cmp	r3, r2
 8013a56:	bfb8      	it	lt
 8013a58:	4613      	movlt	r3, r2
 8013a5a:	6033      	str	r3, [r6, #0]
 8013a5c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013a60:	4607      	mov	r7, r0
 8013a62:	460c      	mov	r4, r1
 8013a64:	b10a      	cbz	r2, 8013a6a <_printf_common+0x26>
 8013a66:	3301      	adds	r3, #1
 8013a68:	6033      	str	r3, [r6, #0]
 8013a6a:	6823      	ldr	r3, [r4, #0]
 8013a6c:	0699      	lsls	r1, r3, #26
 8013a6e:	bf42      	ittt	mi
 8013a70:	6833      	ldrmi	r3, [r6, #0]
 8013a72:	3302      	addmi	r3, #2
 8013a74:	6033      	strmi	r3, [r6, #0]
 8013a76:	6825      	ldr	r5, [r4, #0]
 8013a78:	f015 0506 	ands.w	r5, r5, #6
 8013a7c:	d106      	bne.n	8013a8c <_printf_common+0x48>
 8013a7e:	f104 0a19 	add.w	sl, r4, #25
 8013a82:	68e3      	ldr	r3, [r4, #12]
 8013a84:	6832      	ldr	r2, [r6, #0]
 8013a86:	1a9b      	subs	r3, r3, r2
 8013a88:	42ab      	cmp	r3, r5
 8013a8a:	dc26      	bgt.n	8013ada <_printf_common+0x96>
 8013a8c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8013a90:	1e13      	subs	r3, r2, #0
 8013a92:	6822      	ldr	r2, [r4, #0]
 8013a94:	bf18      	it	ne
 8013a96:	2301      	movne	r3, #1
 8013a98:	0692      	lsls	r2, r2, #26
 8013a9a:	d42b      	bmi.n	8013af4 <_printf_common+0xb0>
 8013a9c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013aa0:	4649      	mov	r1, r9
 8013aa2:	4638      	mov	r0, r7
 8013aa4:	47c0      	blx	r8
 8013aa6:	3001      	adds	r0, #1
 8013aa8:	d01e      	beq.n	8013ae8 <_printf_common+0xa4>
 8013aaa:	6823      	ldr	r3, [r4, #0]
 8013aac:	6922      	ldr	r2, [r4, #16]
 8013aae:	f003 0306 	and.w	r3, r3, #6
 8013ab2:	2b04      	cmp	r3, #4
 8013ab4:	bf02      	ittt	eq
 8013ab6:	68e5      	ldreq	r5, [r4, #12]
 8013ab8:	6833      	ldreq	r3, [r6, #0]
 8013aba:	1aed      	subeq	r5, r5, r3
 8013abc:	68a3      	ldr	r3, [r4, #8]
 8013abe:	bf0c      	ite	eq
 8013ac0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013ac4:	2500      	movne	r5, #0
 8013ac6:	4293      	cmp	r3, r2
 8013ac8:	bfc4      	itt	gt
 8013aca:	1a9b      	subgt	r3, r3, r2
 8013acc:	18ed      	addgt	r5, r5, r3
 8013ace:	2600      	movs	r6, #0
 8013ad0:	341a      	adds	r4, #26
 8013ad2:	42b5      	cmp	r5, r6
 8013ad4:	d11a      	bne.n	8013b0c <_printf_common+0xc8>
 8013ad6:	2000      	movs	r0, #0
 8013ad8:	e008      	b.n	8013aec <_printf_common+0xa8>
 8013ada:	2301      	movs	r3, #1
 8013adc:	4652      	mov	r2, sl
 8013ade:	4649      	mov	r1, r9
 8013ae0:	4638      	mov	r0, r7
 8013ae2:	47c0      	blx	r8
 8013ae4:	3001      	adds	r0, #1
 8013ae6:	d103      	bne.n	8013af0 <_printf_common+0xac>
 8013ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8013aec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013af0:	3501      	adds	r5, #1
 8013af2:	e7c6      	b.n	8013a82 <_printf_common+0x3e>
 8013af4:	18e1      	adds	r1, r4, r3
 8013af6:	1c5a      	adds	r2, r3, #1
 8013af8:	2030      	movs	r0, #48	; 0x30
 8013afa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8013afe:	4422      	add	r2, r4
 8013b00:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8013b04:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8013b08:	3302      	adds	r3, #2
 8013b0a:	e7c7      	b.n	8013a9c <_printf_common+0x58>
 8013b0c:	2301      	movs	r3, #1
 8013b0e:	4622      	mov	r2, r4
 8013b10:	4649      	mov	r1, r9
 8013b12:	4638      	mov	r0, r7
 8013b14:	47c0      	blx	r8
 8013b16:	3001      	adds	r0, #1
 8013b18:	d0e6      	beq.n	8013ae8 <_printf_common+0xa4>
 8013b1a:	3601      	adds	r6, #1
 8013b1c:	e7d9      	b.n	8013ad2 <_printf_common+0x8e>
	...

08013b20 <_printf_i>:
 8013b20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013b24:	7e0f      	ldrb	r7, [r1, #24]
 8013b26:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8013b28:	2f78      	cmp	r7, #120	; 0x78
 8013b2a:	4691      	mov	r9, r2
 8013b2c:	4680      	mov	r8, r0
 8013b2e:	460c      	mov	r4, r1
 8013b30:	469a      	mov	sl, r3
 8013b32:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8013b36:	d807      	bhi.n	8013b48 <_printf_i+0x28>
 8013b38:	2f62      	cmp	r7, #98	; 0x62
 8013b3a:	d80a      	bhi.n	8013b52 <_printf_i+0x32>
 8013b3c:	2f00      	cmp	r7, #0
 8013b3e:	f000 80d4 	beq.w	8013cea <_printf_i+0x1ca>
 8013b42:	2f58      	cmp	r7, #88	; 0x58
 8013b44:	f000 80c0 	beq.w	8013cc8 <_printf_i+0x1a8>
 8013b48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013b4c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8013b50:	e03a      	b.n	8013bc8 <_printf_i+0xa8>
 8013b52:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8013b56:	2b15      	cmp	r3, #21
 8013b58:	d8f6      	bhi.n	8013b48 <_printf_i+0x28>
 8013b5a:	a101      	add	r1, pc, #4	; (adr r1, 8013b60 <_printf_i+0x40>)
 8013b5c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013b60:	08013bb9 	.word	0x08013bb9
 8013b64:	08013bcd 	.word	0x08013bcd
 8013b68:	08013b49 	.word	0x08013b49
 8013b6c:	08013b49 	.word	0x08013b49
 8013b70:	08013b49 	.word	0x08013b49
 8013b74:	08013b49 	.word	0x08013b49
 8013b78:	08013bcd 	.word	0x08013bcd
 8013b7c:	08013b49 	.word	0x08013b49
 8013b80:	08013b49 	.word	0x08013b49
 8013b84:	08013b49 	.word	0x08013b49
 8013b88:	08013b49 	.word	0x08013b49
 8013b8c:	08013cd1 	.word	0x08013cd1
 8013b90:	08013bf9 	.word	0x08013bf9
 8013b94:	08013c8b 	.word	0x08013c8b
 8013b98:	08013b49 	.word	0x08013b49
 8013b9c:	08013b49 	.word	0x08013b49
 8013ba0:	08013cf3 	.word	0x08013cf3
 8013ba4:	08013b49 	.word	0x08013b49
 8013ba8:	08013bf9 	.word	0x08013bf9
 8013bac:	08013b49 	.word	0x08013b49
 8013bb0:	08013b49 	.word	0x08013b49
 8013bb4:	08013c93 	.word	0x08013c93
 8013bb8:	682b      	ldr	r3, [r5, #0]
 8013bba:	1d1a      	adds	r2, r3, #4
 8013bbc:	681b      	ldr	r3, [r3, #0]
 8013bbe:	602a      	str	r2, [r5, #0]
 8013bc0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013bc4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013bc8:	2301      	movs	r3, #1
 8013bca:	e09f      	b.n	8013d0c <_printf_i+0x1ec>
 8013bcc:	6820      	ldr	r0, [r4, #0]
 8013bce:	682b      	ldr	r3, [r5, #0]
 8013bd0:	0607      	lsls	r7, r0, #24
 8013bd2:	f103 0104 	add.w	r1, r3, #4
 8013bd6:	6029      	str	r1, [r5, #0]
 8013bd8:	d501      	bpl.n	8013bde <_printf_i+0xbe>
 8013bda:	681e      	ldr	r6, [r3, #0]
 8013bdc:	e003      	b.n	8013be6 <_printf_i+0xc6>
 8013bde:	0646      	lsls	r6, r0, #25
 8013be0:	d5fb      	bpl.n	8013bda <_printf_i+0xba>
 8013be2:	f9b3 6000 	ldrsh.w	r6, [r3]
 8013be6:	2e00      	cmp	r6, #0
 8013be8:	da03      	bge.n	8013bf2 <_printf_i+0xd2>
 8013bea:	232d      	movs	r3, #45	; 0x2d
 8013bec:	4276      	negs	r6, r6
 8013bee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013bf2:	485a      	ldr	r0, [pc, #360]	; (8013d5c <_printf_i+0x23c>)
 8013bf4:	230a      	movs	r3, #10
 8013bf6:	e012      	b.n	8013c1e <_printf_i+0xfe>
 8013bf8:	682b      	ldr	r3, [r5, #0]
 8013bfa:	6820      	ldr	r0, [r4, #0]
 8013bfc:	1d19      	adds	r1, r3, #4
 8013bfe:	6029      	str	r1, [r5, #0]
 8013c00:	0605      	lsls	r5, r0, #24
 8013c02:	d501      	bpl.n	8013c08 <_printf_i+0xe8>
 8013c04:	681e      	ldr	r6, [r3, #0]
 8013c06:	e002      	b.n	8013c0e <_printf_i+0xee>
 8013c08:	0641      	lsls	r1, r0, #25
 8013c0a:	d5fb      	bpl.n	8013c04 <_printf_i+0xe4>
 8013c0c:	881e      	ldrh	r6, [r3, #0]
 8013c0e:	4853      	ldr	r0, [pc, #332]	; (8013d5c <_printf_i+0x23c>)
 8013c10:	2f6f      	cmp	r7, #111	; 0x6f
 8013c12:	bf0c      	ite	eq
 8013c14:	2308      	moveq	r3, #8
 8013c16:	230a      	movne	r3, #10
 8013c18:	2100      	movs	r1, #0
 8013c1a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8013c1e:	6865      	ldr	r5, [r4, #4]
 8013c20:	60a5      	str	r5, [r4, #8]
 8013c22:	2d00      	cmp	r5, #0
 8013c24:	bfa2      	ittt	ge
 8013c26:	6821      	ldrge	r1, [r4, #0]
 8013c28:	f021 0104 	bicge.w	r1, r1, #4
 8013c2c:	6021      	strge	r1, [r4, #0]
 8013c2e:	b90e      	cbnz	r6, 8013c34 <_printf_i+0x114>
 8013c30:	2d00      	cmp	r5, #0
 8013c32:	d04b      	beq.n	8013ccc <_printf_i+0x1ac>
 8013c34:	4615      	mov	r5, r2
 8013c36:	fbb6 f1f3 	udiv	r1, r6, r3
 8013c3a:	fb03 6711 	mls	r7, r3, r1, r6
 8013c3e:	5dc7      	ldrb	r7, [r0, r7]
 8013c40:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8013c44:	4637      	mov	r7, r6
 8013c46:	42bb      	cmp	r3, r7
 8013c48:	460e      	mov	r6, r1
 8013c4a:	d9f4      	bls.n	8013c36 <_printf_i+0x116>
 8013c4c:	2b08      	cmp	r3, #8
 8013c4e:	d10b      	bne.n	8013c68 <_printf_i+0x148>
 8013c50:	6823      	ldr	r3, [r4, #0]
 8013c52:	07de      	lsls	r6, r3, #31
 8013c54:	d508      	bpl.n	8013c68 <_printf_i+0x148>
 8013c56:	6923      	ldr	r3, [r4, #16]
 8013c58:	6861      	ldr	r1, [r4, #4]
 8013c5a:	4299      	cmp	r1, r3
 8013c5c:	bfde      	ittt	le
 8013c5e:	2330      	movle	r3, #48	; 0x30
 8013c60:	f805 3c01 	strble.w	r3, [r5, #-1]
 8013c64:	f105 35ff 	addle.w	r5, r5, #4294967295
 8013c68:	1b52      	subs	r2, r2, r5
 8013c6a:	6122      	str	r2, [r4, #16]
 8013c6c:	f8cd a000 	str.w	sl, [sp]
 8013c70:	464b      	mov	r3, r9
 8013c72:	aa03      	add	r2, sp, #12
 8013c74:	4621      	mov	r1, r4
 8013c76:	4640      	mov	r0, r8
 8013c78:	f7ff fee4 	bl	8013a44 <_printf_common>
 8013c7c:	3001      	adds	r0, #1
 8013c7e:	d14a      	bne.n	8013d16 <_printf_i+0x1f6>
 8013c80:	f04f 30ff 	mov.w	r0, #4294967295
 8013c84:	b004      	add	sp, #16
 8013c86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013c8a:	6823      	ldr	r3, [r4, #0]
 8013c8c:	f043 0320 	orr.w	r3, r3, #32
 8013c90:	6023      	str	r3, [r4, #0]
 8013c92:	4833      	ldr	r0, [pc, #204]	; (8013d60 <_printf_i+0x240>)
 8013c94:	2778      	movs	r7, #120	; 0x78
 8013c96:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8013c9a:	6823      	ldr	r3, [r4, #0]
 8013c9c:	6829      	ldr	r1, [r5, #0]
 8013c9e:	061f      	lsls	r7, r3, #24
 8013ca0:	f851 6b04 	ldr.w	r6, [r1], #4
 8013ca4:	d402      	bmi.n	8013cac <_printf_i+0x18c>
 8013ca6:	065f      	lsls	r7, r3, #25
 8013ca8:	bf48      	it	mi
 8013caa:	b2b6      	uxthmi	r6, r6
 8013cac:	07df      	lsls	r7, r3, #31
 8013cae:	bf48      	it	mi
 8013cb0:	f043 0320 	orrmi.w	r3, r3, #32
 8013cb4:	6029      	str	r1, [r5, #0]
 8013cb6:	bf48      	it	mi
 8013cb8:	6023      	strmi	r3, [r4, #0]
 8013cba:	b91e      	cbnz	r6, 8013cc4 <_printf_i+0x1a4>
 8013cbc:	6823      	ldr	r3, [r4, #0]
 8013cbe:	f023 0320 	bic.w	r3, r3, #32
 8013cc2:	6023      	str	r3, [r4, #0]
 8013cc4:	2310      	movs	r3, #16
 8013cc6:	e7a7      	b.n	8013c18 <_printf_i+0xf8>
 8013cc8:	4824      	ldr	r0, [pc, #144]	; (8013d5c <_printf_i+0x23c>)
 8013cca:	e7e4      	b.n	8013c96 <_printf_i+0x176>
 8013ccc:	4615      	mov	r5, r2
 8013cce:	e7bd      	b.n	8013c4c <_printf_i+0x12c>
 8013cd0:	682b      	ldr	r3, [r5, #0]
 8013cd2:	6826      	ldr	r6, [r4, #0]
 8013cd4:	6961      	ldr	r1, [r4, #20]
 8013cd6:	1d18      	adds	r0, r3, #4
 8013cd8:	6028      	str	r0, [r5, #0]
 8013cda:	0635      	lsls	r5, r6, #24
 8013cdc:	681b      	ldr	r3, [r3, #0]
 8013cde:	d501      	bpl.n	8013ce4 <_printf_i+0x1c4>
 8013ce0:	6019      	str	r1, [r3, #0]
 8013ce2:	e002      	b.n	8013cea <_printf_i+0x1ca>
 8013ce4:	0670      	lsls	r0, r6, #25
 8013ce6:	d5fb      	bpl.n	8013ce0 <_printf_i+0x1c0>
 8013ce8:	8019      	strh	r1, [r3, #0]
 8013cea:	2300      	movs	r3, #0
 8013cec:	6123      	str	r3, [r4, #16]
 8013cee:	4615      	mov	r5, r2
 8013cf0:	e7bc      	b.n	8013c6c <_printf_i+0x14c>
 8013cf2:	682b      	ldr	r3, [r5, #0]
 8013cf4:	1d1a      	adds	r2, r3, #4
 8013cf6:	602a      	str	r2, [r5, #0]
 8013cf8:	681d      	ldr	r5, [r3, #0]
 8013cfa:	6862      	ldr	r2, [r4, #4]
 8013cfc:	2100      	movs	r1, #0
 8013cfe:	4628      	mov	r0, r5
 8013d00:	f7ec faee 	bl	80002e0 <memchr>
 8013d04:	b108      	cbz	r0, 8013d0a <_printf_i+0x1ea>
 8013d06:	1b40      	subs	r0, r0, r5
 8013d08:	6060      	str	r0, [r4, #4]
 8013d0a:	6863      	ldr	r3, [r4, #4]
 8013d0c:	6123      	str	r3, [r4, #16]
 8013d0e:	2300      	movs	r3, #0
 8013d10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013d14:	e7aa      	b.n	8013c6c <_printf_i+0x14c>
 8013d16:	6923      	ldr	r3, [r4, #16]
 8013d18:	462a      	mov	r2, r5
 8013d1a:	4649      	mov	r1, r9
 8013d1c:	4640      	mov	r0, r8
 8013d1e:	47d0      	blx	sl
 8013d20:	3001      	adds	r0, #1
 8013d22:	d0ad      	beq.n	8013c80 <_printf_i+0x160>
 8013d24:	6823      	ldr	r3, [r4, #0]
 8013d26:	079b      	lsls	r3, r3, #30
 8013d28:	d413      	bmi.n	8013d52 <_printf_i+0x232>
 8013d2a:	68e0      	ldr	r0, [r4, #12]
 8013d2c:	9b03      	ldr	r3, [sp, #12]
 8013d2e:	4298      	cmp	r0, r3
 8013d30:	bfb8      	it	lt
 8013d32:	4618      	movlt	r0, r3
 8013d34:	e7a6      	b.n	8013c84 <_printf_i+0x164>
 8013d36:	2301      	movs	r3, #1
 8013d38:	4632      	mov	r2, r6
 8013d3a:	4649      	mov	r1, r9
 8013d3c:	4640      	mov	r0, r8
 8013d3e:	47d0      	blx	sl
 8013d40:	3001      	adds	r0, #1
 8013d42:	d09d      	beq.n	8013c80 <_printf_i+0x160>
 8013d44:	3501      	adds	r5, #1
 8013d46:	68e3      	ldr	r3, [r4, #12]
 8013d48:	9903      	ldr	r1, [sp, #12]
 8013d4a:	1a5b      	subs	r3, r3, r1
 8013d4c:	42ab      	cmp	r3, r5
 8013d4e:	dcf2      	bgt.n	8013d36 <_printf_i+0x216>
 8013d50:	e7eb      	b.n	8013d2a <_printf_i+0x20a>
 8013d52:	2500      	movs	r5, #0
 8013d54:	f104 0619 	add.w	r6, r4, #25
 8013d58:	e7f5      	b.n	8013d46 <_printf_i+0x226>
 8013d5a:	bf00      	nop
 8013d5c:	08017c8e 	.word	0x08017c8e
 8013d60:	08017c9f 	.word	0x08017c9f

08013d64 <_scanf_float>:
 8013d64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d68:	b087      	sub	sp, #28
 8013d6a:	4617      	mov	r7, r2
 8013d6c:	9303      	str	r3, [sp, #12]
 8013d6e:	688b      	ldr	r3, [r1, #8]
 8013d70:	1e5a      	subs	r2, r3, #1
 8013d72:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8013d76:	bf83      	ittte	hi
 8013d78:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8013d7c:	195b      	addhi	r3, r3, r5
 8013d7e:	9302      	strhi	r3, [sp, #8]
 8013d80:	2300      	movls	r3, #0
 8013d82:	bf86      	itte	hi
 8013d84:	f240 135d 	movwhi	r3, #349	; 0x15d
 8013d88:	608b      	strhi	r3, [r1, #8]
 8013d8a:	9302      	strls	r3, [sp, #8]
 8013d8c:	680b      	ldr	r3, [r1, #0]
 8013d8e:	468b      	mov	fp, r1
 8013d90:	2500      	movs	r5, #0
 8013d92:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8013d96:	f84b 3b1c 	str.w	r3, [fp], #28
 8013d9a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8013d9e:	4680      	mov	r8, r0
 8013da0:	460c      	mov	r4, r1
 8013da2:	465e      	mov	r6, fp
 8013da4:	46aa      	mov	sl, r5
 8013da6:	46a9      	mov	r9, r5
 8013da8:	9501      	str	r5, [sp, #4]
 8013daa:	68a2      	ldr	r2, [r4, #8]
 8013dac:	b152      	cbz	r2, 8013dc4 <_scanf_float+0x60>
 8013dae:	683b      	ldr	r3, [r7, #0]
 8013db0:	781b      	ldrb	r3, [r3, #0]
 8013db2:	2b4e      	cmp	r3, #78	; 0x4e
 8013db4:	d864      	bhi.n	8013e80 <_scanf_float+0x11c>
 8013db6:	2b40      	cmp	r3, #64	; 0x40
 8013db8:	d83c      	bhi.n	8013e34 <_scanf_float+0xd0>
 8013dba:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8013dbe:	b2c8      	uxtb	r0, r1
 8013dc0:	280e      	cmp	r0, #14
 8013dc2:	d93a      	bls.n	8013e3a <_scanf_float+0xd6>
 8013dc4:	f1b9 0f00 	cmp.w	r9, #0
 8013dc8:	d003      	beq.n	8013dd2 <_scanf_float+0x6e>
 8013dca:	6823      	ldr	r3, [r4, #0]
 8013dcc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8013dd0:	6023      	str	r3, [r4, #0]
 8013dd2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013dd6:	f1ba 0f01 	cmp.w	sl, #1
 8013dda:	f200 8113 	bhi.w	8014004 <_scanf_float+0x2a0>
 8013dde:	455e      	cmp	r6, fp
 8013de0:	f200 8105 	bhi.w	8013fee <_scanf_float+0x28a>
 8013de4:	2501      	movs	r5, #1
 8013de6:	4628      	mov	r0, r5
 8013de8:	b007      	add	sp, #28
 8013dea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013dee:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8013df2:	2a0d      	cmp	r2, #13
 8013df4:	d8e6      	bhi.n	8013dc4 <_scanf_float+0x60>
 8013df6:	a101      	add	r1, pc, #4	; (adr r1, 8013dfc <_scanf_float+0x98>)
 8013df8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8013dfc:	08013f3b 	.word	0x08013f3b
 8013e00:	08013dc5 	.word	0x08013dc5
 8013e04:	08013dc5 	.word	0x08013dc5
 8013e08:	08013dc5 	.word	0x08013dc5
 8013e0c:	08013f9b 	.word	0x08013f9b
 8013e10:	08013f73 	.word	0x08013f73
 8013e14:	08013dc5 	.word	0x08013dc5
 8013e18:	08013dc5 	.word	0x08013dc5
 8013e1c:	08013f49 	.word	0x08013f49
 8013e20:	08013dc5 	.word	0x08013dc5
 8013e24:	08013dc5 	.word	0x08013dc5
 8013e28:	08013dc5 	.word	0x08013dc5
 8013e2c:	08013dc5 	.word	0x08013dc5
 8013e30:	08013f01 	.word	0x08013f01
 8013e34:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8013e38:	e7db      	b.n	8013df2 <_scanf_float+0x8e>
 8013e3a:	290e      	cmp	r1, #14
 8013e3c:	d8c2      	bhi.n	8013dc4 <_scanf_float+0x60>
 8013e3e:	a001      	add	r0, pc, #4	; (adr r0, 8013e44 <_scanf_float+0xe0>)
 8013e40:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8013e44:	08013ef3 	.word	0x08013ef3
 8013e48:	08013dc5 	.word	0x08013dc5
 8013e4c:	08013ef3 	.word	0x08013ef3
 8013e50:	08013f87 	.word	0x08013f87
 8013e54:	08013dc5 	.word	0x08013dc5
 8013e58:	08013ea1 	.word	0x08013ea1
 8013e5c:	08013edd 	.word	0x08013edd
 8013e60:	08013edd 	.word	0x08013edd
 8013e64:	08013edd 	.word	0x08013edd
 8013e68:	08013edd 	.word	0x08013edd
 8013e6c:	08013edd 	.word	0x08013edd
 8013e70:	08013edd 	.word	0x08013edd
 8013e74:	08013edd 	.word	0x08013edd
 8013e78:	08013edd 	.word	0x08013edd
 8013e7c:	08013edd 	.word	0x08013edd
 8013e80:	2b6e      	cmp	r3, #110	; 0x6e
 8013e82:	d809      	bhi.n	8013e98 <_scanf_float+0x134>
 8013e84:	2b60      	cmp	r3, #96	; 0x60
 8013e86:	d8b2      	bhi.n	8013dee <_scanf_float+0x8a>
 8013e88:	2b54      	cmp	r3, #84	; 0x54
 8013e8a:	d077      	beq.n	8013f7c <_scanf_float+0x218>
 8013e8c:	2b59      	cmp	r3, #89	; 0x59
 8013e8e:	d199      	bne.n	8013dc4 <_scanf_float+0x60>
 8013e90:	2d07      	cmp	r5, #7
 8013e92:	d197      	bne.n	8013dc4 <_scanf_float+0x60>
 8013e94:	2508      	movs	r5, #8
 8013e96:	e029      	b.n	8013eec <_scanf_float+0x188>
 8013e98:	2b74      	cmp	r3, #116	; 0x74
 8013e9a:	d06f      	beq.n	8013f7c <_scanf_float+0x218>
 8013e9c:	2b79      	cmp	r3, #121	; 0x79
 8013e9e:	e7f6      	b.n	8013e8e <_scanf_float+0x12a>
 8013ea0:	6821      	ldr	r1, [r4, #0]
 8013ea2:	05c8      	lsls	r0, r1, #23
 8013ea4:	d51a      	bpl.n	8013edc <_scanf_float+0x178>
 8013ea6:	9b02      	ldr	r3, [sp, #8]
 8013ea8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8013eac:	6021      	str	r1, [r4, #0]
 8013eae:	f109 0901 	add.w	r9, r9, #1
 8013eb2:	b11b      	cbz	r3, 8013ebc <_scanf_float+0x158>
 8013eb4:	3b01      	subs	r3, #1
 8013eb6:	3201      	adds	r2, #1
 8013eb8:	9302      	str	r3, [sp, #8]
 8013eba:	60a2      	str	r2, [r4, #8]
 8013ebc:	68a3      	ldr	r3, [r4, #8]
 8013ebe:	3b01      	subs	r3, #1
 8013ec0:	60a3      	str	r3, [r4, #8]
 8013ec2:	6923      	ldr	r3, [r4, #16]
 8013ec4:	3301      	adds	r3, #1
 8013ec6:	6123      	str	r3, [r4, #16]
 8013ec8:	687b      	ldr	r3, [r7, #4]
 8013eca:	3b01      	subs	r3, #1
 8013ecc:	2b00      	cmp	r3, #0
 8013ece:	607b      	str	r3, [r7, #4]
 8013ed0:	f340 8084 	ble.w	8013fdc <_scanf_float+0x278>
 8013ed4:	683b      	ldr	r3, [r7, #0]
 8013ed6:	3301      	adds	r3, #1
 8013ed8:	603b      	str	r3, [r7, #0]
 8013eda:	e766      	b.n	8013daa <_scanf_float+0x46>
 8013edc:	eb1a 0f05 	cmn.w	sl, r5
 8013ee0:	f47f af70 	bne.w	8013dc4 <_scanf_float+0x60>
 8013ee4:	6822      	ldr	r2, [r4, #0]
 8013ee6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8013eea:	6022      	str	r2, [r4, #0]
 8013eec:	f806 3b01 	strb.w	r3, [r6], #1
 8013ef0:	e7e4      	b.n	8013ebc <_scanf_float+0x158>
 8013ef2:	6822      	ldr	r2, [r4, #0]
 8013ef4:	0610      	lsls	r0, r2, #24
 8013ef6:	f57f af65 	bpl.w	8013dc4 <_scanf_float+0x60>
 8013efa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8013efe:	e7f4      	b.n	8013eea <_scanf_float+0x186>
 8013f00:	f1ba 0f00 	cmp.w	sl, #0
 8013f04:	d10e      	bne.n	8013f24 <_scanf_float+0x1c0>
 8013f06:	f1b9 0f00 	cmp.w	r9, #0
 8013f0a:	d10e      	bne.n	8013f2a <_scanf_float+0x1c6>
 8013f0c:	6822      	ldr	r2, [r4, #0]
 8013f0e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8013f12:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8013f16:	d108      	bne.n	8013f2a <_scanf_float+0x1c6>
 8013f18:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8013f1c:	6022      	str	r2, [r4, #0]
 8013f1e:	f04f 0a01 	mov.w	sl, #1
 8013f22:	e7e3      	b.n	8013eec <_scanf_float+0x188>
 8013f24:	f1ba 0f02 	cmp.w	sl, #2
 8013f28:	d055      	beq.n	8013fd6 <_scanf_float+0x272>
 8013f2a:	2d01      	cmp	r5, #1
 8013f2c:	d002      	beq.n	8013f34 <_scanf_float+0x1d0>
 8013f2e:	2d04      	cmp	r5, #4
 8013f30:	f47f af48 	bne.w	8013dc4 <_scanf_float+0x60>
 8013f34:	3501      	adds	r5, #1
 8013f36:	b2ed      	uxtb	r5, r5
 8013f38:	e7d8      	b.n	8013eec <_scanf_float+0x188>
 8013f3a:	f1ba 0f01 	cmp.w	sl, #1
 8013f3e:	f47f af41 	bne.w	8013dc4 <_scanf_float+0x60>
 8013f42:	f04f 0a02 	mov.w	sl, #2
 8013f46:	e7d1      	b.n	8013eec <_scanf_float+0x188>
 8013f48:	b97d      	cbnz	r5, 8013f6a <_scanf_float+0x206>
 8013f4a:	f1b9 0f00 	cmp.w	r9, #0
 8013f4e:	f47f af3c 	bne.w	8013dca <_scanf_float+0x66>
 8013f52:	6822      	ldr	r2, [r4, #0]
 8013f54:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8013f58:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8013f5c:	f47f af39 	bne.w	8013dd2 <_scanf_float+0x6e>
 8013f60:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8013f64:	6022      	str	r2, [r4, #0]
 8013f66:	2501      	movs	r5, #1
 8013f68:	e7c0      	b.n	8013eec <_scanf_float+0x188>
 8013f6a:	2d03      	cmp	r5, #3
 8013f6c:	d0e2      	beq.n	8013f34 <_scanf_float+0x1d0>
 8013f6e:	2d05      	cmp	r5, #5
 8013f70:	e7de      	b.n	8013f30 <_scanf_float+0x1cc>
 8013f72:	2d02      	cmp	r5, #2
 8013f74:	f47f af26 	bne.w	8013dc4 <_scanf_float+0x60>
 8013f78:	2503      	movs	r5, #3
 8013f7a:	e7b7      	b.n	8013eec <_scanf_float+0x188>
 8013f7c:	2d06      	cmp	r5, #6
 8013f7e:	f47f af21 	bne.w	8013dc4 <_scanf_float+0x60>
 8013f82:	2507      	movs	r5, #7
 8013f84:	e7b2      	b.n	8013eec <_scanf_float+0x188>
 8013f86:	6822      	ldr	r2, [r4, #0]
 8013f88:	0591      	lsls	r1, r2, #22
 8013f8a:	f57f af1b 	bpl.w	8013dc4 <_scanf_float+0x60>
 8013f8e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8013f92:	6022      	str	r2, [r4, #0]
 8013f94:	f8cd 9004 	str.w	r9, [sp, #4]
 8013f98:	e7a8      	b.n	8013eec <_scanf_float+0x188>
 8013f9a:	6822      	ldr	r2, [r4, #0]
 8013f9c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8013fa0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8013fa4:	d006      	beq.n	8013fb4 <_scanf_float+0x250>
 8013fa6:	0550      	lsls	r0, r2, #21
 8013fa8:	f57f af0c 	bpl.w	8013dc4 <_scanf_float+0x60>
 8013fac:	f1b9 0f00 	cmp.w	r9, #0
 8013fb0:	f43f af0f 	beq.w	8013dd2 <_scanf_float+0x6e>
 8013fb4:	0591      	lsls	r1, r2, #22
 8013fb6:	bf58      	it	pl
 8013fb8:	9901      	ldrpl	r1, [sp, #4]
 8013fba:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8013fbe:	bf58      	it	pl
 8013fc0:	eba9 0101 	subpl.w	r1, r9, r1
 8013fc4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8013fc8:	bf58      	it	pl
 8013fca:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8013fce:	6022      	str	r2, [r4, #0]
 8013fd0:	f04f 0900 	mov.w	r9, #0
 8013fd4:	e78a      	b.n	8013eec <_scanf_float+0x188>
 8013fd6:	f04f 0a03 	mov.w	sl, #3
 8013fda:	e787      	b.n	8013eec <_scanf_float+0x188>
 8013fdc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8013fe0:	4639      	mov	r1, r7
 8013fe2:	4640      	mov	r0, r8
 8013fe4:	4798      	blx	r3
 8013fe6:	2800      	cmp	r0, #0
 8013fe8:	f43f aedf 	beq.w	8013daa <_scanf_float+0x46>
 8013fec:	e6ea      	b.n	8013dc4 <_scanf_float+0x60>
 8013fee:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013ff2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8013ff6:	463a      	mov	r2, r7
 8013ff8:	4640      	mov	r0, r8
 8013ffa:	4798      	blx	r3
 8013ffc:	6923      	ldr	r3, [r4, #16]
 8013ffe:	3b01      	subs	r3, #1
 8014000:	6123      	str	r3, [r4, #16]
 8014002:	e6ec      	b.n	8013dde <_scanf_float+0x7a>
 8014004:	1e6b      	subs	r3, r5, #1
 8014006:	2b06      	cmp	r3, #6
 8014008:	d825      	bhi.n	8014056 <_scanf_float+0x2f2>
 801400a:	2d02      	cmp	r5, #2
 801400c:	d836      	bhi.n	801407c <_scanf_float+0x318>
 801400e:	455e      	cmp	r6, fp
 8014010:	f67f aee8 	bls.w	8013de4 <_scanf_float+0x80>
 8014014:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014018:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801401c:	463a      	mov	r2, r7
 801401e:	4640      	mov	r0, r8
 8014020:	4798      	blx	r3
 8014022:	6923      	ldr	r3, [r4, #16]
 8014024:	3b01      	subs	r3, #1
 8014026:	6123      	str	r3, [r4, #16]
 8014028:	e7f1      	b.n	801400e <_scanf_float+0x2aa>
 801402a:	9802      	ldr	r0, [sp, #8]
 801402c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014030:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8014034:	9002      	str	r0, [sp, #8]
 8014036:	463a      	mov	r2, r7
 8014038:	4640      	mov	r0, r8
 801403a:	4798      	blx	r3
 801403c:	6923      	ldr	r3, [r4, #16]
 801403e:	3b01      	subs	r3, #1
 8014040:	6123      	str	r3, [r4, #16]
 8014042:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014046:	fa5f fa8a 	uxtb.w	sl, sl
 801404a:	f1ba 0f02 	cmp.w	sl, #2
 801404e:	d1ec      	bne.n	801402a <_scanf_float+0x2c6>
 8014050:	3d03      	subs	r5, #3
 8014052:	b2ed      	uxtb	r5, r5
 8014054:	1b76      	subs	r6, r6, r5
 8014056:	6823      	ldr	r3, [r4, #0]
 8014058:	05da      	lsls	r2, r3, #23
 801405a:	d52f      	bpl.n	80140bc <_scanf_float+0x358>
 801405c:	055b      	lsls	r3, r3, #21
 801405e:	d510      	bpl.n	8014082 <_scanf_float+0x31e>
 8014060:	455e      	cmp	r6, fp
 8014062:	f67f aebf 	bls.w	8013de4 <_scanf_float+0x80>
 8014066:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801406a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801406e:	463a      	mov	r2, r7
 8014070:	4640      	mov	r0, r8
 8014072:	4798      	blx	r3
 8014074:	6923      	ldr	r3, [r4, #16]
 8014076:	3b01      	subs	r3, #1
 8014078:	6123      	str	r3, [r4, #16]
 801407a:	e7f1      	b.n	8014060 <_scanf_float+0x2fc>
 801407c:	46aa      	mov	sl, r5
 801407e:	9602      	str	r6, [sp, #8]
 8014080:	e7df      	b.n	8014042 <_scanf_float+0x2de>
 8014082:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8014086:	6923      	ldr	r3, [r4, #16]
 8014088:	2965      	cmp	r1, #101	; 0x65
 801408a:	f103 33ff 	add.w	r3, r3, #4294967295
 801408e:	f106 35ff 	add.w	r5, r6, #4294967295
 8014092:	6123      	str	r3, [r4, #16]
 8014094:	d00c      	beq.n	80140b0 <_scanf_float+0x34c>
 8014096:	2945      	cmp	r1, #69	; 0x45
 8014098:	d00a      	beq.n	80140b0 <_scanf_float+0x34c>
 801409a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801409e:	463a      	mov	r2, r7
 80140a0:	4640      	mov	r0, r8
 80140a2:	4798      	blx	r3
 80140a4:	6923      	ldr	r3, [r4, #16]
 80140a6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80140aa:	3b01      	subs	r3, #1
 80140ac:	1eb5      	subs	r5, r6, #2
 80140ae:	6123      	str	r3, [r4, #16]
 80140b0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80140b4:	463a      	mov	r2, r7
 80140b6:	4640      	mov	r0, r8
 80140b8:	4798      	blx	r3
 80140ba:	462e      	mov	r6, r5
 80140bc:	6825      	ldr	r5, [r4, #0]
 80140be:	f015 0510 	ands.w	r5, r5, #16
 80140c2:	d14d      	bne.n	8014160 <_scanf_float+0x3fc>
 80140c4:	7035      	strb	r5, [r6, #0]
 80140c6:	6823      	ldr	r3, [r4, #0]
 80140c8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80140cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80140d0:	d11a      	bne.n	8014108 <_scanf_float+0x3a4>
 80140d2:	9b01      	ldr	r3, [sp, #4]
 80140d4:	454b      	cmp	r3, r9
 80140d6:	eba3 0209 	sub.w	r2, r3, r9
 80140da:	d122      	bne.n	8014122 <_scanf_float+0x3be>
 80140dc:	2200      	movs	r2, #0
 80140de:	4659      	mov	r1, fp
 80140e0:	4640      	mov	r0, r8
 80140e2:	f002 fb4f 	bl	8016784 <_strtod_r>
 80140e6:	9b03      	ldr	r3, [sp, #12]
 80140e8:	6821      	ldr	r1, [r4, #0]
 80140ea:	681b      	ldr	r3, [r3, #0]
 80140ec:	f011 0f02 	tst.w	r1, #2
 80140f0:	f103 0204 	add.w	r2, r3, #4
 80140f4:	d020      	beq.n	8014138 <_scanf_float+0x3d4>
 80140f6:	9903      	ldr	r1, [sp, #12]
 80140f8:	600a      	str	r2, [r1, #0]
 80140fa:	681b      	ldr	r3, [r3, #0]
 80140fc:	ed83 0b00 	vstr	d0, [r3]
 8014100:	68e3      	ldr	r3, [r4, #12]
 8014102:	3301      	adds	r3, #1
 8014104:	60e3      	str	r3, [r4, #12]
 8014106:	e66e      	b.n	8013de6 <_scanf_float+0x82>
 8014108:	9b04      	ldr	r3, [sp, #16]
 801410a:	2b00      	cmp	r3, #0
 801410c:	d0e6      	beq.n	80140dc <_scanf_float+0x378>
 801410e:	9905      	ldr	r1, [sp, #20]
 8014110:	230a      	movs	r3, #10
 8014112:	462a      	mov	r2, r5
 8014114:	3101      	adds	r1, #1
 8014116:	4640      	mov	r0, r8
 8014118:	f002 fbbc 	bl	8016894 <_strtol_r>
 801411c:	9b04      	ldr	r3, [sp, #16]
 801411e:	9e05      	ldr	r6, [sp, #20]
 8014120:	1ac2      	subs	r2, r0, r3
 8014122:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8014126:	429e      	cmp	r6, r3
 8014128:	bf28      	it	cs
 801412a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 801412e:	490d      	ldr	r1, [pc, #52]	; (8014164 <_scanf_float+0x400>)
 8014130:	4630      	mov	r0, r6
 8014132:	f000 f911 	bl	8014358 <siprintf>
 8014136:	e7d1      	b.n	80140dc <_scanf_float+0x378>
 8014138:	f011 0f04 	tst.w	r1, #4
 801413c:	9903      	ldr	r1, [sp, #12]
 801413e:	600a      	str	r2, [r1, #0]
 8014140:	d1db      	bne.n	80140fa <_scanf_float+0x396>
 8014142:	eeb4 0b40 	vcmp.f64	d0, d0
 8014146:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801414a:	681e      	ldr	r6, [r3, #0]
 801414c:	d705      	bvc.n	801415a <_scanf_float+0x3f6>
 801414e:	4806      	ldr	r0, [pc, #24]	; (8014168 <_scanf_float+0x404>)
 8014150:	f000 fa5a 	bl	8014608 <nanf>
 8014154:	ed86 0a00 	vstr	s0, [r6]
 8014158:	e7d2      	b.n	8014100 <_scanf_float+0x39c>
 801415a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801415e:	e7f9      	b.n	8014154 <_scanf_float+0x3f0>
 8014160:	2500      	movs	r5, #0
 8014162:	e640      	b.n	8013de6 <_scanf_float+0x82>
 8014164:	08017cb0 	.word	0x08017cb0
 8014168:	08018045 	.word	0x08018045

0801416c <std>:
 801416c:	2300      	movs	r3, #0
 801416e:	b510      	push	{r4, lr}
 8014170:	4604      	mov	r4, r0
 8014172:	e9c0 3300 	strd	r3, r3, [r0]
 8014176:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801417a:	6083      	str	r3, [r0, #8]
 801417c:	8181      	strh	r1, [r0, #12]
 801417e:	6643      	str	r3, [r0, #100]	; 0x64
 8014180:	81c2      	strh	r2, [r0, #14]
 8014182:	6183      	str	r3, [r0, #24]
 8014184:	4619      	mov	r1, r3
 8014186:	2208      	movs	r2, #8
 8014188:	305c      	adds	r0, #92	; 0x5c
 801418a:	f000 f948 	bl	801441e <memset>
 801418e:	4b0d      	ldr	r3, [pc, #52]	; (80141c4 <std+0x58>)
 8014190:	6263      	str	r3, [r4, #36]	; 0x24
 8014192:	4b0d      	ldr	r3, [pc, #52]	; (80141c8 <std+0x5c>)
 8014194:	62a3      	str	r3, [r4, #40]	; 0x28
 8014196:	4b0d      	ldr	r3, [pc, #52]	; (80141cc <std+0x60>)
 8014198:	62e3      	str	r3, [r4, #44]	; 0x2c
 801419a:	4b0d      	ldr	r3, [pc, #52]	; (80141d0 <std+0x64>)
 801419c:	6323      	str	r3, [r4, #48]	; 0x30
 801419e:	4b0d      	ldr	r3, [pc, #52]	; (80141d4 <std+0x68>)
 80141a0:	6224      	str	r4, [r4, #32]
 80141a2:	429c      	cmp	r4, r3
 80141a4:	d006      	beq.n	80141b4 <std+0x48>
 80141a6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80141aa:	4294      	cmp	r4, r2
 80141ac:	d002      	beq.n	80141b4 <std+0x48>
 80141ae:	33d0      	adds	r3, #208	; 0xd0
 80141b0:	429c      	cmp	r4, r3
 80141b2:	d105      	bne.n	80141c0 <std+0x54>
 80141b4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80141b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80141bc:	f000 ba12 	b.w	80145e4 <__retarget_lock_init_recursive>
 80141c0:	bd10      	pop	{r4, pc}
 80141c2:	bf00      	nop
 80141c4:	08014399 	.word	0x08014399
 80141c8:	080143bb 	.word	0x080143bb
 80141cc:	080143f3 	.word	0x080143f3
 80141d0:	08014417 	.word	0x08014417
 80141d4:	2400560c 	.word	0x2400560c

080141d8 <stdio_exit_handler>:
 80141d8:	4a02      	ldr	r2, [pc, #8]	; (80141e4 <stdio_exit_handler+0xc>)
 80141da:	4903      	ldr	r1, [pc, #12]	; (80141e8 <stdio_exit_handler+0x10>)
 80141dc:	4803      	ldr	r0, [pc, #12]	; (80141ec <stdio_exit_handler+0x14>)
 80141de:	f000 b869 	b.w	80142b4 <_fwalk_sglue>
 80141e2:	bf00      	nop
 80141e4:	24000014 	.word	0x24000014
 80141e8:	08016c55 	.word	0x08016c55
 80141ec:	24000020 	.word	0x24000020

080141f0 <cleanup_stdio>:
 80141f0:	6841      	ldr	r1, [r0, #4]
 80141f2:	4b0c      	ldr	r3, [pc, #48]	; (8014224 <cleanup_stdio+0x34>)
 80141f4:	4299      	cmp	r1, r3
 80141f6:	b510      	push	{r4, lr}
 80141f8:	4604      	mov	r4, r0
 80141fa:	d001      	beq.n	8014200 <cleanup_stdio+0x10>
 80141fc:	f002 fd2a 	bl	8016c54 <_fflush_r>
 8014200:	68a1      	ldr	r1, [r4, #8]
 8014202:	4b09      	ldr	r3, [pc, #36]	; (8014228 <cleanup_stdio+0x38>)
 8014204:	4299      	cmp	r1, r3
 8014206:	d002      	beq.n	801420e <cleanup_stdio+0x1e>
 8014208:	4620      	mov	r0, r4
 801420a:	f002 fd23 	bl	8016c54 <_fflush_r>
 801420e:	68e1      	ldr	r1, [r4, #12]
 8014210:	4b06      	ldr	r3, [pc, #24]	; (801422c <cleanup_stdio+0x3c>)
 8014212:	4299      	cmp	r1, r3
 8014214:	d004      	beq.n	8014220 <cleanup_stdio+0x30>
 8014216:	4620      	mov	r0, r4
 8014218:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801421c:	f002 bd1a 	b.w	8016c54 <_fflush_r>
 8014220:	bd10      	pop	{r4, pc}
 8014222:	bf00      	nop
 8014224:	2400560c 	.word	0x2400560c
 8014228:	24005674 	.word	0x24005674
 801422c:	240056dc 	.word	0x240056dc

08014230 <global_stdio_init.part.0>:
 8014230:	b510      	push	{r4, lr}
 8014232:	4b0b      	ldr	r3, [pc, #44]	; (8014260 <global_stdio_init.part.0+0x30>)
 8014234:	4c0b      	ldr	r4, [pc, #44]	; (8014264 <global_stdio_init.part.0+0x34>)
 8014236:	4a0c      	ldr	r2, [pc, #48]	; (8014268 <global_stdio_init.part.0+0x38>)
 8014238:	601a      	str	r2, [r3, #0]
 801423a:	4620      	mov	r0, r4
 801423c:	2200      	movs	r2, #0
 801423e:	2104      	movs	r1, #4
 8014240:	f7ff ff94 	bl	801416c <std>
 8014244:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8014248:	2201      	movs	r2, #1
 801424a:	2109      	movs	r1, #9
 801424c:	f7ff ff8e 	bl	801416c <std>
 8014250:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8014254:	2202      	movs	r2, #2
 8014256:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801425a:	2112      	movs	r1, #18
 801425c:	f7ff bf86 	b.w	801416c <std>
 8014260:	24005744 	.word	0x24005744
 8014264:	2400560c 	.word	0x2400560c
 8014268:	080141d9 	.word	0x080141d9

0801426c <__sfp_lock_acquire>:
 801426c:	4801      	ldr	r0, [pc, #4]	; (8014274 <__sfp_lock_acquire+0x8>)
 801426e:	f000 b9ba 	b.w	80145e6 <__retarget_lock_acquire_recursive>
 8014272:	bf00      	nop
 8014274:	2400574d 	.word	0x2400574d

08014278 <__sfp_lock_release>:
 8014278:	4801      	ldr	r0, [pc, #4]	; (8014280 <__sfp_lock_release+0x8>)
 801427a:	f000 b9b5 	b.w	80145e8 <__retarget_lock_release_recursive>
 801427e:	bf00      	nop
 8014280:	2400574d 	.word	0x2400574d

08014284 <__sinit>:
 8014284:	b510      	push	{r4, lr}
 8014286:	4604      	mov	r4, r0
 8014288:	f7ff fff0 	bl	801426c <__sfp_lock_acquire>
 801428c:	6a23      	ldr	r3, [r4, #32]
 801428e:	b11b      	cbz	r3, 8014298 <__sinit+0x14>
 8014290:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014294:	f7ff bff0 	b.w	8014278 <__sfp_lock_release>
 8014298:	4b04      	ldr	r3, [pc, #16]	; (80142ac <__sinit+0x28>)
 801429a:	6223      	str	r3, [r4, #32]
 801429c:	4b04      	ldr	r3, [pc, #16]	; (80142b0 <__sinit+0x2c>)
 801429e:	681b      	ldr	r3, [r3, #0]
 80142a0:	2b00      	cmp	r3, #0
 80142a2:	d1f5      	bne.n	8014290 <__sinit+0xc>
 80142a4:	f7ff ffc4 	bl	8014230 <global_stdio_init.part.0>
 80142a8:	e7f2      	b.n	8014290 <__sinit+0xc>
 80142aa:	bf00      	nop
 80142ac:	080141f1 	.word	0x080141f1
 80142b0:	24005744 	.word	0x24005744

080142b4 <_fwalk_sglue>:
 80142b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80142b8:	4607      	mov	r7, r0
 80142ba:	4688      	mov	r8, r1
 80142bc:	4614      	mov	r4, r2
 80142be:	2600      	movs	r6, #0
 80142c0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80142c4:	f1b9 0901 	subs.w	r9, r9, #1
 80142c8:	d505      	bpl.n	80142d6 <_fwalk_sglue+0x22>
 80142ca:	6824      	ldr	r4, [r4, #0]
 80142cc:	2c00      	cmp	r4, #0
 80142ce:	d1f7      	bne.n	80142c0 <_fwalk_sglue+0xc>
 80142d0:	4630      	mov	r0, r6
 80142d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80142d6:	89ab      	ldrh	r3, [r5, #12]
 80142d8:	2b01      	cmp	r3, #1
 80142da:	d907      	bls.n	80142ec <_fwalk_sglue+0x38>
 80142dc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80142e0:	3301      	adds	r3, #1
 80142e2:	d003      	beq.n	80142ec <_fwalk_sglue+0x38>
 80142e4:	4629      	mov	r1, r5
 80142e6:	4638      	mov	r0, r7
 80142e8:	47c0      	blx	r8
 80142ea:	4306      	orrs	r6, r0
 80142ec:	3568      	adds	r5, #104	; 0x68
 80142ee:	e7e9      	b.n	80142c4 <_fwalk_sglue+0x10>

080142f0 <sniprintf>:
 80142f0:	b40c      	push	{r2, r3}
 80142f2:	b530      	push	{r4, r5, lr}
 80142f4:	4b17      	ldr	r3, [pc, #92]	; (8014354 <sniprintf+0x64>)
 80142f6:	1e0c      	subs	r4, r1, #0
 80142f8:	681d      	ldr	r5, [r3, #0]
 80142fa:	b09d      	sub	sp, #116	; 0x74
 80142fc:	da08      	bge.n	8014310 <sniprintf+0x20>
 80142fe:	238b      	movs	r3, #139	; 0x8b
 8014300:	602b      	str	r3, [r5, #0]
 8014302:	f04f 30ff 	mov.w	r0, #4294967295
 8014306:	b01d      	add	sp, #116	; 0x74
 8014308:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801430c:	b002      	add	sp, #8
 801430e:	4770      	bx	lr
 8014310:	f44f 7302 	mov.w	r3, #520	; 0x208
 8014314:	f8ad 3014 	strh.w	r3, [sp, #20]
 8014318:	bf14      	ite	ne
 801431a:	f104 33ff 	addne.w	r3, r4, #4294967295
 801431e:	4623      	moveq	r3, r4
 8014320:	9304      	str	r3, [sp, #16]
 8014322:	9307      	str	r3, [sp, #28]
 8014324:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014328:	9002      	str	r0, [sp, #8]
 801432a:	9006      	str	r0, [sp, #24]
 801432c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8014330:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8014332:	ab21      	add	r3, sp, #132	; 0x84
 8014334:	a902      	add	r1, sp, #8
 8014336:	4628      	mov	r0, r5
 8014338:	9301      	str	r3, [sp, #4]
 801433a:	f002 fb07 	bl	801694c <_svfiprintf_r>
 801433e:	1c43      	adds	r3, r0, #1
 8014340:	bfbc      	itt	lt
 8014342:	238b      	movlt	r3, #139	; 0x8b
 8014344:	602b      	strlt	r3, [r5, #0]
 8014346:	2c00      	cmp	r4, #0
 8014348:	d0dd      	beq.n	8014306 <sniprintf+0x16>
 801434a:	9b02      	ldr	r3, [sp, #8]
 801434c:	2200      	movs	r2, #0
 801434e:	701a      	strb	r2, [r3, #0]
 8014350:	e7d9      	b.n	8014306 <sniprintf+0x16>
 8014352:	bf00      	nop
 8014354:	2400006c 	.word	0x2400006c

08014358 <siprintf>:
 8014358:	b40e      	push	{r1, r2, r3}
 801435a:	b500      	push	{lr}
 801435c:	b09c      	sub	sp, #112	; 0x70
 801435e:	ab1d      	add	r3, sp, #116	; 0x74
 8014360:	9002      	str	r0, [sp, #8]
 8014362:	9006      	str	r0, [sp, #24]
 8014364:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8014368:	4809      	ldr	r0, [pc, #36]	; (8014390 <siprintf+0x38>)
 801436a:	9107      	str	r1, [sp, #28]
 801436c:	9104      	str	r1, [sp, #16]
 801436e:	4909      	ldr	r1, [pc, #36]	; (8014394 <siprintf+0x3c>)
 8014370:	f853 2b04 	ldr.w	r2, [r3], #4
 8014374:	9105      	str	r1, [sp, #20]
 8014376:	6800      	ldr	r0, [r0, #0]
 8014378:	9301      	str	r3, [sp, #4]
 801437a:	a902      	add	r1, sp, #8
 801437c:	f002 fae6 	bl	801694c <_svfiprintf_r>
 8014380:	9b02      	ldr	r3, [sp, #8]
 8014382:	2200      	movs	r2, #0
 8014384:	701a      	strb	r2, [r3, #0]
 8014386:	b01c      	add	sp, #112	; 0x70
 8014388:	f85d eb04 	ldr.w	lr, [sp], #4
 801438c:	b003      	add	sp, #12
 801438e:	4770      	bx	lr
 8014390:	2400006c 	.word	0x2400006c
 8014394:	ffff0208 	.word	0xffff0208

08014398 <__sread>:
 8014398:	b510      	push	{r4, lr}
 801439a:	460c      	mov	r4, r1
 801439c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80143a0:	f000 f8c2 	bl	8014528 <_read_r>
 80143a4:	2800      	cmp	r0, #0
 80143a6:	bfab      	itete	ge
 80143a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80143aa:	89a3      	ldrhlt	r3, [r4, #12]
 80143ac:	181b      	addge	r3, r3, r0
 80143ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80143b2:	bfac      	ite	ge
 80143b4:	6563      	strge	r3, [r4, #84]	; 0x54
 80143b6:	81a3      	strhlt	r3, [r4, #12]
 80143b8:	bd10      	pop	{r4, pc}

080143ba <__swrite>:
 80143ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80143be:	461f      	mov	r7, r3
 80143c0:	898b      	ldrh	r3, [r1, #12]
 80143c2:	05db      	lsls	r3, r3, #23
 80143c4:	4605      	mov	r5, r0
 80143c6:	460c      	mov	r4, r1
 80143c8:	4616      	mov	r6, r2
 80143ca:	d505      	bpl.n	80143d8 <__swrite+0x1e>
 80143cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80143d0:	2302      	movs	r3, #2
 80143d2:	2200      	movs	r2, #0
 80143d4:	f000 f896 	bl	8014504 <_lseek_r>
 80143d8:	89a3      	ldrh	r3, [r4, #12]
 80143da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80143de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80143e2:	81a3      	strh	r3, [r4, #12]
 80143e4:	4632      	mov	r2, r6
 80143e6:	463b      	mov	r3, r7
 80143e8:	4628      	mov	r0, r5
 80143ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80143ee:	f000 b8bd 	b.w	801456c <_write_r>

080143f2 <__sseek>:
 80143f2:	b510      	push	{r4, lr}
 80143f4:	460c      	mov	r4, r1
 80143f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80143fa:	f000 f883 	bl	8014504 <_lseek_r>
 80143fe:	1c43      	adds	r3, r0, #1
 8014400:	89a3      	ldrh	r3, [r4, #12]
 8014402:	bf15      	itete	ne
 8014404:	6560      	strne	r0, [r4, #84]	; 0x54
 8014406:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801440a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801440e:	81a3      	strheq	r3, [r4, #12]
 8014410:	bf18      	it	ne
 8014412:	81a3      	strhne	r3, [r4, #12]
 8014414:	bd10      	pop	{r4, pc}

08014416 <__sclose>:
 8014416:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801441a:	f000 b80d 	b.w	8014438 <_close_r>

0801441e <memset>:
 801441e:	4402      	add	r2, r0
 8014420:	4603      	mov	r3, r0
 8014422:	4293      	cmp	r3, r2
 8014424:	d100      	bne.n	8014428 <memset+0xa>
 8014426:	4770      	bx	lr
 8014428:	f803 1b01 	strb.w	r1, [r3], #1
 801442c:	e7f9      	b.n	8014422 <memset+0x4>
	...

08014430 <_localeconv_r>:
 8014430:	4800      	ldr	r0, [pc, #0]	; (8014434 <_localeconv_r+0x4>)
 8014432:	4770      	bx	lr
 8014434:	24000160 	.word	0x24000160

08014438 <_close_r>:
 8014438:	b538      	push	{r3, r4, r5, lr}
 801443a:	4d06      	ldr	r5, [pc, #24]	; (8014454 <_close_r+0x1c>)
 801443c:	2300      	movs	r3, #0
 801443e:	4604      	mov	r4, r0
 8014440:	4608      	mov	r0, r1
 8014442:	602b      	str	r3, [r5, #0]
 8014444:	f7ef fa7d 	bl	8003942 <_close>
 8014448:	1c43      	adds	r3, r0, #1
 801444a:	d102      	bne.n	8014452 <_close_r+0x1a>
 801444c:	682b      	ldr	r3, [r5, #0]
 801444e:	b103      	cbz	r3, 8014452 <_close_r+0x1a>
 8014450:	6023      	str	r3, [r4, #0]
 8014452:	bd38      	pop	{r3, r4, r5, pc}
 8014454:	24005748 	.word	0x24005748

08014458 <_reclaim_reent>:
 8014458:	4b29      	ldr	r3, [pc, #164]	; (8014500 <_reclaim_reent+0xa8>)
 801445a:	681b      	ldr	r3, [r3, #0]
 801445c:	4283      	cmp	r3, r0
 801445e:	b570      	push	{r4, r5, r6, lr}
 8014460:	4604      	mov	r4, r0
 8014462:	d04b      	beq.n	80144fc <_reclaim_reent+0xa4>
 8014464:	69c3      	ldr	r3, [r0, #28]
 8014466:	b143      	cbz	r3, 801447a <_reclaim_reent+0x22>
 8014468:	68db      	ldr	r3, [r3, #12]
 801446a:	2b00      	cmp	r3, #0
 801446c:	d144      	bne.n	80144f8 <_reclaim_reent+0xa0>
 801446e:	69e3      	ldr	r3, [r4, #28]
 8014470:	6819      	ldr	r1, [r3, #0]
 8014472:	b111      	cbz	r1, 801447a <_reclaim_reent+0x22>
 8014474:	4620      	mov	r0, r4
 8014476:	f000 fec3 	bl	8015200 <_free_r>
 801447a:	6961      	ldr	r1, [r4, #20]
 801447c:	b111      	cbz	r1, 8014484 <_reclaim_reent+0x2c>
 801447e:	4620      	mov	r0, r4
 8014480:	f000 febe 	bl	8015200 <_free_r>
 8014484:	69e1      	ldr	r1, [r4, #28]
 8014486:	b111      	cbz	r1, 801448e <_reclaim_reent+0x36>
 8014488:	4620      	mov	r0, r4
 801448a:	f000 feb9 	bl	8015200 <_free_r>
 801448e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8014490:	b111      	cbz	r1, 8014498 <_reclaim_reent+0x40>
 8014492:	4620      	mov	r0, r4
 8014494:	f000 feb4 	bl	8015200 <_free_r>
 8014498:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801449a:	b111      	cbz	r1, 80144a2 <_reclaim_reent+0x4a>
 801449c:	4620      	mov	r0, r4
 801449e:	f000 feaf 	bl	8015200 <_free_r>
 80144a2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80144a4:	b111      	cbz	r1, 80144ac <_reclaim_reent+0x54>
 80144a6:	4620      	mov	r0, r4
 80144a8:	f000 feaa 	bl	8015200 <_free_r>
 80144ac:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80144ae:	b111      	cbz	r1, 80144b6 <_reclaim_reent+0x5e>
 80144b0:	4620      	mov	r0, r4
 80144b2:	f000 fea5 	bl	8015200 <_free_r>
 80144b6:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80144b8:	b111      	cbz	r1, 80144c0 <_reclaim_reent+0x68>
 80144ba:	4620      	mov	r0, r4
 80144bc:	f000 fea0 	bl	8015200 <_free_r>
 80144c0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80144c2:	b111      	cbz	r1, 80144ca <_reclaim_reent+0x72>
 80144c4:	4620      	mov	r0, r4
 80144c6:	f000 fe9b 	bl	8015200 <_free_r>
 80144ca:	6a23      	ldr	r3, [r4, #32]
 80144cc:	b1b3      	cbz	r3, 80144fc <_reclaim_reent+0xa4>
 80144ce:	4620      	mov	r0, r4
 80144d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80144d4:	4718      	bx	r3
 80144d6:	5949      	ldr	r1, [r1, r5]
 80144d8:	b941      	cbnz	r1, 80144ec <_reclaim_reent+0x94>
 80144da:	3504      	adds	r5, #4
 80144dc:	69e3      	ldr	r3, [r4, #28]
 80144de:	2d80      	cmp	r5, #128	; 0x80
 80144e0:	68d9      	ldr	r1, [r3, #12]
 80144e2:	d1f8      	bne.n	80144d6 <_reclaim_reent+0x7e>
 80144e4:	4620      	mov	r0, r4
 80144e6:	f000 fe8b 	bl	8015200 <_free_r>
 80144ea:	e7c0      	b.n	801446e <_reclaim_reent+0x16>
 80144ec:	680e      	ldr	r6, [r1, #0]
 80144ee:	4620      	mov	r0, r4
 80144f0:	f000 fe86 	bl	8015200 <_free_r>
 80144f4:	4631      	mov	r1, r6
 80144f6:	e7ef      	b.n	80144d8 <_reclaim_reent+0x80>
 80144f8:	2500      	movs	r5, #0
 80144fa:	e7ef      	b.n	80144dc <_reclaim_reent+0x84>
 80144fc:	bd70      	pop	{r4, r5, r6, pc}
 80144fe:	bf00      	nop
 8014500:	2400006c 	.word	0x2400006c

08014504 <_lseek_r>:
 8014504:	b538      	push	{r3, r4, r5, lr}
 8014506:	4d07      	ldr	r5, [pc, #28]	; (8014524 <_lseek_r+0x20>)
 8014508:	4604      	mov	r4, r0
 801450a:	4608      	mov	r0, r1
 801450c:	4611      	mov	r1, r2
 801450e:	2200      	movs	r2, #0
 8014510:	602a      	str	r2, [r5, #0]
 8014512:	461a      	mov	r2, r3
 8014514:	f7ef fa3c 	bl	8003990 <_lseek>
 8014518:	1c43      	adds	r3, r0, #1
 801451a:	d102      	bne.n	8014522 <_lseek_r+0x1e>
 801451c:	682b      	ldr	r3, [r5, #0]
 801451e:	b103      	cbz	r3, 8014522 <_lseek_r+0x1e>
 8014520:	6023      	str	r3, [r4, #0]
 8014522:	bd38      	pop	{r3, r4, r5, pc}
 8014524:	24005748 	.word	0x24005748

08014528 <_read_r>:
 8014528:	b538      	push	{r3, r4, r5, lr}
 801452a:	4d07      	ldr	r5, [pc, #28]	; (8014548 <_read_r+0x20>)
 801452c:	4604      	mov	r4, r0
 801452e:	4608      	mov	r0, r1
 8014530:	4611      	mov	r1, r2
 8014532:	2200      	movs	r2, #0
 8014534:	602a      	str	r2, [r5, #0]
 8014536:	461a      	mov	r2, r3
 8014538:	f7ef f9ca 	bl	80038d0 <_read>
 801453c:	1c43      	adds	r3, r0, #1
 801453e:	d102      	bne.n	8014546 <_read_r+0x1e>
 8014540:	682b      	ldr	r3, [r5, #0]
 8014542:	b103      	cbz	r3, 8014546 <_read_r+0x1e>
 8014544:	6023      	str	r3, [r4, #0]
 8014546:	bd38      	pop	{r3, r4, r5, pc}
 8014548:	24005748 	.word	0x24005748

0801454c <_sbrk_r>:
 801454c:	b538      	push	{r3, r4, r5, lr}
 801454e:	4d06      	ldr	r5, [pc, #24]	; (8014568 <_sbrk_r+0x1c>)
 8014550:	2300      	movs	r3, #0
 8014552:	4604      	mov	r4, r0
 8014554:	4608      	mov	r0, r1
 8014556:	602b      	str	r3, [r5, #0]
 8014558:	f7ef fa28 	bl	80039ac <_sbrk>
 801455c:	1c43      	adds	r3, r0, #1
 801455e:	d102      	bne.n	8014566 <_sbrk_r+0x1a>
 8014560:	682b      	ldr	r3, [r5, #0]
 8014562:	b103      	cbz	r3, 8014566 <_sbrk_r+0x1a>
 8014564:	6023      	str	r3, [r4, #0]
 8014566:	bd38      	pop	{r3, r4, r5, pc}
 8014568:	24005748 	.word	0x24005748

0801456c <_write_r>:
 801456c:	b538      	push	{r3, r4, r5, lr}
 801456e:	4d07      	ldr	r5, [pc, #28]	; (801458c <_write_r+0x20>)
 8014570:	4604      	mov	r4, r0
 8014572:	4608      	mov	r0, r1
 8014574:	4611      	mov	r1, r2
 8014576:	2200      	movs	r2, #0
 8014578:	602a      	str	r2, [r5, #0]
 801457a:	461a      	mov	r2, r3
 801457c:	f7ef f9c5 	bl	800390a <_write>
 8014580:	1c43      	adds	r3, r0, #1
 8014582:	d102      	bne.n	801458a <_write_r+0x1e>
 8014584:	682b      	ldr	r3, [r5, #0]
 8014586:	b103      	cbz	r3, 801458a <_write_r+0x1e>
 8014588:	6023      	str	r3, [r4, #0]
 801458a:	bd38      	pop	{r3, r4, r5, pc}
 801458c:	24005748 	.word	0x24005748

08014590 <__errno>:
 8014590:	4b01      	ldr	r3, [pc, #4]	; (8014598 <__errno+0x8>)
 8014592:	6818      	ldr	r0, [r3, #0]
 8014594:	4770      	bx	lr
 8014596:	bf00      	nop
 8014598:	2400006c 	.word	0x2400006c

0801459c <__libc_init_array>:
 801459c:	b570      	push	{r4, r5, r6, lr}
 801459e:	4d0d      	ldr	r5, [pc, #52]	; (80145d4 <__libc_init_array+0x38>)
 80145a0:	4c0d      	ldr	r4, [pc, #52]	; (80145d8 <__libc_init_array+0x3c>)
 80145a2:	1b64      	subs	r4, r4, r5
 80145a4:	10a4      	asrs	r4, r4, #2
 80145a6:	2600      	movs	r6, #0
 80145a8:	42a6      	cmp	r6, r4
 80145aa:	d109      	bne.n	80145c0 <__libc_init_array+0x24>
 80145ac:	4d0b      	ldr	r5, [pc, #44]	; (80145dc <__libc_init_array+0x40>)
 80145ae:	4c0c      	ldr	r4, [pc, #48]	; (80145e0 <__libc_init_array+0x44>)
 80145b0:	f003 fa4a 	bl	8017a48 <_init>
 80145b4:	1b64      	subs	r4, r4, r5
 80145b6:	10a4      	asrs	r4, r4, #2
 80145b8:	2600      	movs	r6, #0
 80145ba:	42a6      	cmp	r6, r4
 80145bc:	d105      	bne.n	80145ca <__libc_init_array+0x2e>
 80145be:	bd70      	pop	{r4, r5, r6, pc}
 80145c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80145c4:	4798      	blx	r3
 80145c6:	3601      	adds	r6, #1
 80145c8:	e7ee      	b.n	80145a8 <__libc_init_array+0xc>
 80145ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80145ce:	4798      	blx	r3
 80145d0:	3601      	adds	r6, #1
 80145d2:	e7f2      	b.n	80145ba <__libc_init_array+0x1e>
 80145d4:	080180b0 	.word	0x080180b0
 80145d8:	080180b0 	.word	0x080180b0
 80145dc:	080180b0 	.word	0x080180b0
 80145e0:	080180b4 	.word	0x080180b4

080145e4 <__retarget_lock_init_recursive>:
 80145e4:	4770      	bx	lr

080145e6 <__retarget_lock_acquire_recursive>:
 80145e6:	4770      	bx	lr

080145e8 <__retarget_lock_release_recursive>:
 80145e8:	4770      	bx	lr

080145ea <memcpy>:
 80145ea:	440a      	add	r2, r1
 80145ec:	4291      	cmp	r1, r2
 80145ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80145f2:	d100      	bne.n	80145f6 <memcpy+0xc>
 80145f4:	4770      	bx	lr
 80145f6:	b510      	push	{r4, lr}
 80145f8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80145fc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014600:	4291      	cmp	r1, r2
 8014602:	d1f9      	bne.n	80145f8 <memcpy+0xe>
 8014604:	bd10      	pop	{r4, pc}
	...

08014608 <nanf>:
 8014608:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8014610 <nanf+0x8>
 801460c:	4770      	bx	lr
 801460e:	bf00      	nop
 8014610:	7fc00000 	.word	0x7fc00000

08014614 <quorem>:
 8014614:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014618:	6903      	ldr	r3, [r0, #16]
 801461a:	690c      	ldr	r4, [r1, #16]
 801461c:	42a3      	cmp	r3, r4
 801461e:	4607      	mov	r7, r0
 8014620:	db7e      	blt.n	8014720 <quorem+0x10c>
 8014622:	3c01      	subs	r4, #1
 8014624:	f101 0814 	add.w	r8, r1, #20
 8014628:	f100 0514 	add.w	r5, r0, #20
 801462c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014630:	9301      	str	r3, [sp, #4]
 8014632:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8014636:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801463a:	3301      	adds	r3, #1
 801463c:	429a      	cmp	r2, r3
 801463e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8014642:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8014646:	fbb2 f6f3 	udiv	r6, r2, r3
 801464a:	d331      	bcc.n	80146b0 <quorem+0x9c>
 801464c:	f04f 0e00 	mov.w	lr, #0
 8014650:	4640      	mov	r0, r8
 8014652:	46ac      	mov	ip, r5
 8014654:	46f2      	mov	sl, lr
 8014656:	f850 2b04 	ldr.w	r2, [r0], #4
 801465a:	b293      	uxth	r3, r2
 801465c:	fb06 e303 	mla	r3, r6, r3, lr
 8014660:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8014664:	0c1a      	lsrs	r2, r3, #16
 8014666:	b29b      	uxth	r3, r3
 8014668:	ebaa 0303 	sub.w	r3, sl, r3
 801466c:	f8dc a000 	ldr.w	sl, [ip]
 8014670:	fa13 f38a 	uxtah	r3, r3, sl
 8014674:	fb06 220e 	mla	r2, r6, lr, r2
 8014678:	9300      	str	r3, [sp, #0]
 801467a:	9b00      	ldr	r3, [sp, #0]
 801467c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8014680:	b292      	uxth	r2, r2
 8014682:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8014686:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801468a:	f8bd 3000 	ldrh.w	r3, [sp]
 801468e:	4581      	cmp	r9, r0
 8014690:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014694:	f84c 3b04 	str.w	r3, [ip], #4
 8014698:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801469c:	d2db      	bcs.n	8014656 <quorem+0x42>
 801469e:	f855 300b 	ldr.w	r3, [r5, fp]
 80146a2:	b92b      	cbnz	r3, 80146b0 <quorem+0x9c>
 80146a4:	9b01      	ldr	r3, [sp, #4]
 80146a6:	3b04      	subs	r3, #4
 80146a8:	429d      	cmp	r5, r3
 80146aa:	461a      	mov	r2, r3
 80146ac:	d32c      	bcc.n	8014708 <quorem+0xf4>
 80146ae:	613c      	str	r4, [r7, #16]
 80146b0:	4638      	mov	r0, r7
 80146b2:	f001 f8b7 	bl	8015824 <__mcmp>
 80146b6:	2800      	cmp	r0, #0
 80146b8:	db22      	blt.n	8014700 <quorem+0xec>
 80146ba:	3601      	adds	r6, #1
 80146bc:	4629      	mov	r1, r5
 80146be:	2000      	movs	r0, #0
 80146c0:	f858 2b04 	ldr.w	r2, [r8], #4
 80146c4:	f8d1 c000 	ldr.w	ip, [r1]
 80146c8:	b293      	uxth	r3, r2
 80146ca:	1ac3      	subs	r3, r0, r3
 80146cc:	0c12      	lsrs	r2, r2, #16
 80146ce:	fa13 f38c 	uxtah	r3, r3, ip
 80146d2:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80146d6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80146da:	b29b      	uxth	r3, r3
 80146dc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80146e0:	45c1      	cmp	r9, r8
 80146e2:	f841 3b04 	str.w	r3, [r1], #4
 80146e6:	ea4f 4022 	mov.w	r0, r2, asr #16
 80146ea:	d2e9      	bcs.n	80146c0 <quorem+0xac>
 80146ec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80146f0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80146f4:	b922      	cbnz	r2, 8014700 <quorem+0xec>
 80146f6:	3b04      	subs	r3, #4
 80146f8:	429d      	cmp	r5, r3
 80146fa:	461a      	mov	r2, r3
 80146fc:	d30a      	bcc.n	8014714 <quorem+0x100>
 80146fe:	613c      	str	r4, [r7, #16]
 8014700:	4630      	mov	r0, r6
 8014702:	b003      	add	sp, #12
 8014704:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014708:	6812      	ldr	r2, [r2, #0]
 801470a:	3b04      	subs	r3, #4
 801470c:	2a00      	cmp	r2, #0
 801470e:	d1ce      	bne.n	80146ae <quorem+0x9a>
 8014710:	3c01      	subs	r4, #1
 8014712:	e7c9      	b.n	80146a8 <quorem+0x94>
 8014714:	6812      	ldr	r2, [r2, #0]
 8014716:	3b04      	subs	r3, #4
 8014718:	2a00      	cmp	r2, #0
 801471a:	d1f0      	bne.n	80146fe <quorem+0xea>
 801471c:	3c01      	subs	r4, #1
 801471e:	e7eb      	b.n	80146f8 <quorem+0xe4>
 8014720:	2000      	movs	r0, #0
 8014722:	e7ee      	b.n	8014702 <quorem+0xee>
 8014724:	0000      	movs	r0, r0
	...

08014728 <_dtoa_r>:
 8014728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801472c:	ed2d 8b02 	vpush	{d8}
 8014730:	69c5      	ldr	r5, [r0, #28]
 8014732:	b091      	sub	sp, #68	; 0x44
 8014734:	ed8d 0b02 	vstr	d0, [sp, #8]
 8014738:	ec59 8b10 	vmov	r8, r9, d0
 801473c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 801473e:	9106      	str	r1, [sp, #24]
 8014740:	4606      	mov	r6, r0
 8014742:	9208      	str	r2, [sp, #32]
 8014744:	930c      	str	r3, [sp, #48]	; 0x30
 8014746:	b975      	cbnz	r5, 8014766 <_dtoa_r+0x3e>
 8014748:	2010      	movs	r0, #16
 801474a:	f7fe fe13 	bl	8013374 <malloc>
 801474e:	4602      	mov	r2, r0
 8014750:	61f0      	str	r0, [r6, #28]
 8014752:	b920      	cbnz	r0, 801475e <_dtoa_r+0x36>
 8014754:	4ba6      	ldr	r3, [pc, #664]	; (80149f0 <_dtoa_r+0x2c8>)
 8014756:	21ef      	movs	r1, #239	; 0xef
 8014758:	48a6      	ldr	r0, [pc, #664]	; (80149f4 <_dtoa_r+0x2cc>)
 801475a:	f002 fad9 	bl	8016d10 <__assert_func>
 801475e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8014762:	6005      	str	r5, [r0, #0]
 8014764:	60c5      	str	r5, [r0, #12]
 8014766:	69f3      	ldr	r3, [r6, #28]
 8014768:	6819      	ldr	r1, [r3, #0]
 801476a:	b151      	cbz	r1, 8014782 <_dtoa_r+0x5a>
 801476c:	685a      	ldr	r2, [r3, #4]
 801476e:	604a      	str	r2, [r1, #4]
 8014770:	2301      	movs	r3, #1
 8014772:	4093      	lsls	r3, r2
 8014774:	608b      	str	r3, [r1, #8]
 8014776:	4630      	mov	r0, r6
 8014778:	f000 fdce 	bl	8015318 <_Bfree>
 801477c:	69f3      	ldr	r3, [r6, #28]
 801477e:	2200      	movs	r2, #0
 8014780:	601a      	str	r2, [r3, #0]
 8014782:	f1b9 0300 	subs.w	r3, r9, #0
 8014786:	bfbb      	ittet	lt
 8014788:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801478c:	9303      	strlt	r3, [sp, #12]
 801478e:	2300      	movge	r3, #0
 8014790:	2201      	movlt	r2, #1
 8014792:	bfac      	ite	ge
 8014794:	6023      	strge	r3, [r4, #0]
 8014796:	6022      	strlt	r2, [r4, #0]
 8014798:	4b97      	ldr	r3, [pc, #604]	; (80149f8 <_dtoa_r+0x2d0>)
 801479a:	9c03      	ldr	r4, [sp, #12]
 801479c:	43a3      	bics	r3, r4
 801479e:	d11c      	bne.n	80147da <_dtoa_r+0xb2>
 80147a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80147a2:	f242 730f 	movw	r3, #9999	; 0x270f
 80147a6:	6013      	str	r3, [r2, #0]
 80147a8:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80147ac:	ea53 0308 	orrs.w	r3, r3, r8
 80147b0:	f000 84fb 	beq.w	80151aa <_dtoa_r+0xa82>
 80147b4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80147b6:	b963      	cbnz	r3, 80147d2 <_dtoa_r+0xaa>
 80147b8:	4b90      	ldr	r3, [pc, #576]	; (80149fc <_dtoa_r+0x2d4>)
 80147ba:	e020      	b.n	80147fe <_dtoa_r+0xd6>
 80147bc:	4b90      	ldr	r3, [pc, #576]	; (8014a00 <_dtoa_r+0x2d8>)
 80147be:	9301      	str	r3, [sp, #4]
 80147c0:	3308      	adds	r3, #8
 80147c2:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80147c4:	6013      	str	r3, [r2, #0]
 80147c6:	9801      	ldr	r0, [sp, #4]
 80147c8:	b011      	add	sp, #68	; 0x44
 80147ca:	ecbd 8b02 	vpop	{d8}
 80147ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80147d2:	4b8a      	ldr	r3, [pc, #552]	; (80149fc <_dtoa_r+0x2d4>)
 80147d4:	9301      	str	r3, [sp, #4]
 80147d6:	3303      	adds	r3, #3
 80147d8:	e7f3      	b.n	80147c2 <_dtoa_r+0x9a>
 80147da:	ed9d 8b02 	vldr	d8, [sp, #8]
 80147de:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80147e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80147e6:	d10c      	bne.n	8014802 <_dtoa_r+0xda>
 80147e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80147ea:	2301      	movs	r3, #1
 80147ec:	6013      	str	r3, [r2, #0]
 80147ee:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80147f0:	2b00      	cmp	r3, #0
 80147f2:	f000 84d7 	beq.w	80151a4 <_dtoa_r+0xa7c>
 80147f6:	4b83      	ldr	r3, [pc, #524]	; (8014a04 <_dtoa_r+0x2dc>)
 80147f8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80147fa:	6013      	str	r3, [r2, #0]
 80147fc:	3b01      	subs	r3, #1
 80147fe:	9301      	str	r3, [sp, #4]
 8014800:	e7e1      	b.n	80147c6 <_dtoa_r+0x9e>
 8014802:	aa0e      	add	r2, sp, #56	; 0x38
 8014804:	a90f      	add	r1, sp, #60	; 0x3c
 8014806:	4630      	mov	r0, r6
 8014808:	eeb0 0b48 	vmov.f64	d0, d8
 801480c:	f001 f920 	bl	8015a50 <__d2b>
 8014810:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8014814:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014816:	4605      	mov	r5, r0
 8014818:	2b00      	cmp	r3, #0
 801481a:	d046      	beq.n	80148aa <_dtoa_r+0x182>
 801481c:	eeb0 7b48 	vmov.f64	d7, d8
 8014820:	ee18 1a90 	vmov	r1, s17
 8014824:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8014828:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 801482c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8014830:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8014834:	2000      	movs	r0, #0
 8014836:	ee07 1a90 	vmov	s15, r1
 801483a:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 801483e:	ed9f 5b66 	vldr	d5, [pc, #408]	; 80149d8 <_dtoa_r+0x2b0>
 8014842:	ee37 7b46 	vsub.f64	d7, d7, d6
 8014846:	ed9f 6b66 	vldr	d6, [pc, #408]	; 80149e0 <_dtoa_r+0x2b8>
 801484a:	eea7 6b05 	vfma.f64	d6, d7, d5
 801484e:	ed9f 5b66 	vldr	d5, [pc, #408]	; 80149e8 <_dtoa_r+0x2c0>
 8014852:	ee07 3a90 	vmov	s15, r3
 8014856:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 801485a:	eeb0 7b46 	vmov.f64	d7, d6
 801485e:	eea4 7b05 	vfma.f64	d7, d4, d5
 8014862:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8014866:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801486a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801486e:	ee16 ba90 	vmov	fp, s13
 8014872:	9009      	str	r0, [sp, #36]	; 0x24
 8014874:	d508      	bpl.n	8014888 <_dtoa_r+0x160>
 8014876:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 801487a:	eeb4 6b47 	vcmp.f64	d6, d7
 801487e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014882:	bf18      	it	ne
 8014884:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8014888:	f1bb 0f16 	cmp.w	fp, #22
 801488c:	d82b      	bhi.n	80148e6 <_dtoa_r+0x1be>
 801488e:	495e      	ldr	r1, [pc, #376]	; (8014a08 <_dtoa_r+0x2e0>)
 8014890:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8014894:	ed91 7b00 	vldr	d7, [r1]
 8014898:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801489c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80148a0:	d501      	bpl.n	80148a6 <_dtoa_r+0x17e>
 80148a2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80148a6:	2100      	movs	r1, #0
 80148a8:	e01e      	b.n	80148e8 <_dtoa_r+0x1c0>
 80148aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80148ac:	4413      	add	r3, r2
 80148ae:	f203 4132 	addw	r1, r3, #1074	; 0x432
 80148b2:	2920      	cmp	r1, #32
 80148b4:	bfc1      	itttt	gt
 80148b6:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 80148ba:	408c      	lslgt	r4, r1
 80148bc:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 80148c0:	fa28 f101 	lsrgt.w	r1, r8, r1
 80148c4:	bfd6      	itet	le
 80148c6:	f1c1 0120 	rsble	r1, r1, #32
 80148ca:	4321      	orrgt	r1, r4
 80148cc:	fa08 f101 	lslle.w	r1, r8, r1
 80148d0:	ee07 1a90 	vmov	s15, r1
 80148d4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80148d8:	3b01      	subs	r3, #1
 80148da:	ee17 1a90 	vmov	r1, s15
 80148de:	2001      	movs	r0, #1
 80148e0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80148e4:	e7a7      	b.n	8014836 <_dtoa_r+0x10e>
 80148e6:	2101      	movs	r1, #1
 80148e8:	1ad2      	subs	r2, r2, r3
 80148ea:	1e53      	subs	r3, r2, #1
 80148ec:	9305      	str	r3, [sp, #20]
 80148ee:	bf45      	ittet	mi
 80148f0:	f1c2 0301 	rsbmi	r3, r2, #1
 80148f4:	9304      	strmi	r3, [sp, #16]
 80148f6:	2300      	movpl	r3, #0
 80148f8:	2300      	movmi	r3, #0
 80148fa:	bf4c      	ite	mi
 80148fc:	9305      	strmi	r3, [sp, #20]
 80148fe:	9304      	strpl	r3, [sp, #16]
 8014900:	f1bb 0f00 	cmp.w	fp, #0
 8014904:	910b      	str	r1, [sp, #44]	; 0x2c
 8014906:	db18      	blt.n	801493a <_dtoa_r+0x212>
 8014908:	9b05      	ldr	r3, [sp, #20]
 801490a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 801490e:	445b      	add	r3, fp
 8014910:	9305      	str	r3, [sp, #20]
 8014912:	2300      	movs	r3, #0
 8014914:	9a06      	ldr	r2, [sp, #24]
 8014916:	2a09      	cmp	r2, #9
 8014918:	d848      	bhi.n	80149ac <_dtoa_r+0x284>
 801491a:	2a05      	cmp	r2, #5
 801491c:	bfc4      	itt	gt
 801491e:	3a04      	subgt	r2, #4
 8014920:	9206      	strgt	r2, [sp, #24]
 8014922:	9a06      	ldr	r2, [sp, #24]
 8014924:	f1a2 0202 	sub.w	r2, r2, #2
 8014928:	bfcc      	ite	gt
 801492a:	2400      	movgt	r4, #0
 801492c:	2401      	movle	r4, #1
 801492e:	2a03      	cmp	r2, #3
 8014930:	d847      	bhi.n	80149c2 <_dtoa_r+0x29a>
 8014932:	e8df f002 	tbb	[pc, r2]
 8014936:	2d0b      	.short	0x2d0b
 8014938:	392b      	.short	0x392b
 801493a:	9b04      	ldr	r3, [sp, #16]
 801493c:	2200      	movs	r2, #0
 801493e:	eba3 030b 	sub.w	r3, r3, fp
 8014942:	9304      	str	r3, [sp, #16]
 8014944:	920a      	str	r2, [sp, #40]	; 0x28
 8014946:	f1cb 0300 	rsb	r3, fp, #0
 801494a:	e7e3      	b.n	8014914 <_dtoa_r+0x1ec>
 801494c:	2200      	movs	r2, #0
 801494e:	9207      	str	r2, [sp, #28]
 8014950:	9a08      	ldr	r2, [sp, #32]
 8014952:	2a00      	cmp	r2, #0
 8014954:	dc38      	bgt.n	80149c8 <_dtoa_r+0x2a0>
 8014956:	f04f 0a01 	mov.w	sl, #1
 801495a:	46d1      	mov	r9, sl
 801495c:	4652      	mov	r2, sl
 801495e:	f8cd a020 	str.w	sl, [sp, #32]
 8014962:	69f7      	ldr	r7, [r6, #28]
 8014964:	2100      	movs	r1, #0
 8014966:	2004      	movs	r0, #4
 8014968:	f100 0c14 	add.w	ip, r0, #20
 801496c:	4594      	cmp	ip, r2
 801496e:	d930      	bls.n	80149d2 <_dtoa_r+0x2aa>
 8014970:	6079      	str	r1, [r7, #4]
 8014972:	4630      	mov	r0, r6
 8014974:	930d      	str	r3, [sp, #52]	; 0x34
 8014976:	f000 fc8f 	bl	8015298 <_Balloc>
 801497a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801497c:	9001      	str	r0, [sp, #4]
 801497e:	4602      	mov	r2, r0
 8014980:	2800      	cmp	r0, #0
 8014982:	d145      	bne.n	8014a10 <_dtoa_r+0x2e8>
 8014984:	4b21      	ldr	r3, [pc, #132]	; (8014a0c <_dtoa_r+0x2e4>)
 8014986:	f240 11af 	movw	r1, #431	; 0x1af
 801498a:	e6e5      	b.n	8014758 <_dtoa_r+0x30>
 801498c:	2201      	movs	r2, #1
 801498e:	e7de      	b.n	801494e <_dtoa_r+0x226>
 8014990:	2200      	movs	r2, #0
 8014992:	9207      	str	r2, [sp, #28]
 8014994:	9a08      	ldr	r2, [sp, #32]
 8014996:	eb0b 0a02 	add.w	sl, fp, r2
 801499a:	f10a 0901 	add.w	r9, sl, #1
 801499e:	464a      	mov	r2, r9
 80149a0:	2a01      	cmp	r2, #1
 80149a2:	bfb8      	it	lt
 80149a4:	2201      	movlt	r2, #1
 80149a6:	e7dc      	b.n	8014962 <_dtoa_r+0x23a>
 80149a8:	2201      	movs	r2, #1
 80149aa:	e7f2      	b.n	8014992 <_dtoa_r+0x26a>
 80149ac:	2401      	movs	r4, #1
 80149ae:	2200      	movs	r2, #0
 80149b0:	e9cd 2406 	strd	r2, r4, [sp, #24]
 80149b4:	f04f 3aff 	mov.w	sl, #4294967295
 80149b8:	2100      	movs	r1, #0
 80149ba:	46d1      	mov	r9, sl
 80149bc:	2212      	movs	r2, #18
 80149be:	9108      	str	r1, [sp, #32]
 80149c0:	e7cf      	b.n	8014962 <_dtoa_r+0x23a>
 80149c2:	2201      	movs	r2, #1
 80149c4:	9207      	str	r2, [sp, #28]
 80149c6:	e7f5      	b.n	80149b4 <_dtoa_r+0x28c>
 80149c8:	f8dd a020 	ldr.w	sl, [sp, #32]
 80149cc:	46d1      	mov	r9, sl
 80149ce:	4652      	mov	r2, sl
 80149d0:	e7c7      	b.n	8014962 <_dtoa_r+0x23a>
 80149d2:	3101      	adds	r1, #1
 80149d4:	0040      	lsls	r0, r0, #1
 80149d6:	e7c7      	b.n	8014968 <_dtoa_r+0x240>
 80149d8:	636f4361 	.word	0x636f4361
 80149dc:	3fd287a7 	.word	0x3fd287a7
 80149e0:	8b60c8b3 	.word	0x8b60c8b3
 80149e4:	3fc68a28 	.word	0x3fc68a28
 80149e8:	509f79fb 	.word	0x509f79fb
 80149ec:	3fd34413 	.word	0x3fd34413
 80149f0:	08017cc2 	.word	0x08017cc2
 80149f4:	08017cd9 	.word	0x08017cd9
 80149f8:	7ff00000 	.word	0x7ff00000
 80149fc:	08017cbe 	.word	0x08017cbe
 8014a00:	08017cb5 	.word	0x08017cb5
 8014a04:	08017c8d 	.word	0x08017c8d
 8014a08:	08017dc8 	.word	0x08017dc8
 8014a0c:	08017d31 	.word	0x08017d31
 8014a10:	69f2      	ldr	r2, [r6, #28]
 8014a12:	9901      	ldr	r1, [sp, #4]
 8014a14:	6011      	str	r1, [r2, #0]
 8014a16:	f1b9 0f0e 	cmp.w	r9, #14
 8014a1a:	d86c      	bhi.n	8014af6 <_dtoa_r+0x3ce>
 8014a1c:	2c00      	cmp	r4, #0
 8014a1e:	d06a      	beq.n	8014af6 <_dtoa_r+0x3ce>
 8014a20:	f1bb 0f00 	cmp.w	fp, #0
 8014a24:	f340 80a0 	ble.w	8014b68 <_dtoa_r+0x440>
 8014a28:	4ac1      	ldr	r2, [pc, #772]	; (8014d30 <_dtoa_r+0x608>)
 8014a2a:	f00b 010f 	and.w	r1, fp, #15
 8014a2e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8014a32:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8014a36:	ed92 7b00 	vldr	d7, [r2]
 8014a3a:	ea4f 122b 	mov.w	r2, fp, asr #4
 8014a3e:	f000 8087 	beq.w	8014b50 <_dtoa_r+0x428>
 8014a42:	49bc      	ldr	r1, [pc, #752]	; (8014d34 <_dtoa_r+0x60c>)
 8014a44:	ed91 6b08 	vldr	d6, [r1, #32]
 8014a48:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8014a4c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8014a50:	f002 020f 	and.w	r2, r2, #15
 8014a54:	2103      	movs	r1, #3
 8014a56:	48b7      	ldr	r0, [pc, #732]	; (8014d34 <_dtoa_r+0x60c>)
 8014a58:	2a00      	cmp	r2, #0
 8014a5a:	d17b      	bne.n	8014b54 <_dtoa_r+0x42c>
 8014a5c:	ed9d 6b02 	vldr	d6, [sp, #8]
 8014a60:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8014a64:	ed8d 7b02 	vstr	d7, [sp, #8]
 8014a68:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014a6a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014a6e:	2a00      	cmp	r2, #0
 8014a70:	f000 80a0 	beq.w	8014bb4 <_dtoa_r+0x48c>
 8014a74:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8014a78:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8014a7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a80:	f140 8098 	bpl.w	8014bb4 <_dtoa_r+0x48c>
 8014a84:	f1b9 0f00 	cmp.w	r9, #0
 8014a88:	f000 8094 	beq.w	8014bb4 <_dtoa_r+0x48c>
 8014a8c:	f1ba 0f00 	cmp.w	sl, #0
 8014a90:	dd2f      	ble.n	8014af2 <_dtoa_r+0x3ca>
 8014a92:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8014a96:	ee27 7b06 	vmul.f64	d7, d7, d6
 8014a9a:	ed8d 7b02 	vstr	d7, [sp, #8]
 8014a9e:	f10b 32ff 	add.w	r2, fp, #4294967295
 8014aa2:	3101      	adds	r1, #1
 8014aa4:	4654      	mov	r4, sl
 8014aa6:	ed9d 6b02 	vldr	d6, [sp, #8]
 8014aaa:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8014aae:	ee07 1a90 	vmov	s15, r1
 8014ab2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8014ab6:	eea7 5b06 	vfma.f64	d5, d7, d6
 8014aba:	ee15 7a90 	vmov	r7, s11
 8014abe:	ec51 0b15 	vmov	r0, r1, d5
 8014ac2:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 8014ac6:	2c00      	cmp	r4, #0
 8014ac8:	d177      	bne.n	8014bba <_dtoa_r+0x492>
 8014aca:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8014ace:	ee36 6b47 	vsub.f64	d6, d6, d7
 8014ad2:	ec41 0b17 	vmov	d7, r0, r1
 8014ad6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8014ada:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ade:	f300 826a 	bgt.w	8014fb6 <_dtoa_r+0x88e>
 8014ae2:	eeb1 7b47 	vneg.f64	d7, d7
 8014ae6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8014aea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014aee:	f100 8260 	bmi.w	8014fb2 <_dtoa_r+0x88a>
 8014af2:	ed8d 8b02 	vstr	d8, [sp, #8]
 8014af6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014af8:	2a00      	cmp	r2, #0
 8014afa:	f2c0 811d 	blt.w	8014d38 <_dtoa_r+0x610>
 8014afe:	f1bb 0f0e 	cmp.w	fp, #14
 8014b02:	f300 8119 	bgt.w	8014d38 <_dtoa_r+0x610>
 8014b06:	4b8a      	ldr	r3, [pc, #552]	; (8014d30 <_dtoa_r+0x608>)
 8014b08:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8014b0c:	ed93 6b00 	vldr	d6, [r3]
 8014b10:	9b08      	ldr	r3, [sp, #32]
 8014b12:	2b00      	cmp	r3, #0
 8014b14:	f280 80b7 	bge.w	8014c86 <_dtoa_r+0x55e>
 8014b18:	f1b9 0f00 	cmp.w	r9, #0
 8014b1c:	f300 80b3 	bgt.w	8014c86 <_dtoa_r+0x55e>
 8014b20:	f040 8246 	bne.w	8014fb0 <_dtoa_r+0x888>
 8014b24:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8014b28:	ee26 6b07 	vmul.f64	d6, d6, d7
 8014b2c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014b30:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8014b34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b38:	464c      	mov	r4, r9
 8014b3a:	464f      	mov	r7, r9
 8014b3c:	f280 821c 	bge.w	8014f78 <_dtoa_r+0x850>
 8014b40:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8014b44:	2331      	movs	r3, #49	; 0x31
 8014b46:	f808 3b01 	strb.w	r3, [r8], #1
 8014b4a:	f10b 0b01 	add.w	fp, fp, #1
 8014b4e:	e218      	b.n	8014f82 <_dtoa_r+0x85a>
 8014b50:	2102      	movs	r1, #2
 8014b52:	e780      	b.n	8014a56 <_dtoa_r+0x32e>
 8014b54:	07d4      	lsls	r4, r2, #31
 8014b56:	d504      	bpl.n	8014b62 <_dtoa_r+0x43a>
 8014b58:	ed90 6b00 	vldr	d6, [r0]
 8014b5c:	3101      	adds	r1, #1
 8014b5e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8014b62:	1052      	asrs	r2, r2, #1
 8014b64:	3008      	adds	r0, #8
 8014b66:	e777      	b.n	8014a58 <_dtoa_r+0x330>
 8014b68:	d022      	beq.n	8014bb0 <_dtoa_r+0x488>
 8014b6a:	f1cb 0200 	rsb	r2, fp, #0
 8014b6e:	4970      	ldr	r1, [pc, #448]	; (8014d30 <_dtoa_r+0x608>)
 8014b70:	f002 000f 	and.w	r0, r2, #15
 8014b74:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8014b78:	ed91 7b00 	vldr	d7, [r1]
 8014b7c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8014b80:	ed8d 7b02 	vstr	d7, [sp, #8]
 8014b84:	486b      	ldr	r0, [pc, #428]	; (8014d34 <_dtoa_r+0x60c>)
 8014b86:	1112      	asrs	r2, r2, #4
 8014b88:	2400      	movs	r4, #0
 8014b8a:	2102      	movs	r1, #2
 8014b8c:	b92a      	cbnz	r2, 8014b9a <_dtoa_r+0x472>
 8014b8e:	2c00      	cmp	r4, #0
 8014b90:	f43f af6a 	beq.w	8014a68 <_dtoa_r+0x340>
 8014b94:	ed8d 7b02 	vstr	d7, [sp, #8]
 8014b98:	e766      	b.n	8014a68 <_dtoa_r+0x340>
 8014b9a:	07d7      	lsls	r7, r2, #31
 8014b9c:	d505      	bpl.n	8014baa <_dtoa_r+0x482>
 8014b9e:	ed90 6b00 	vldr	d6, [r0]
 8014ba2:	3101      	adds	r1, #1
 8014ba4:	2401      	movs	r4, #1
 8014ba6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8014baa:	1052      	asrs	r2, r2, #1
 8014bac:	3008      	adds	r0, #8
 8014bae:	e7ed      	b.n	8014b8c <_dtoa_r+0x464>
 8014bb0:	2102      	movs	r1, #2
 8014bb2:	e759      	b.n	8014a68 <_dtoa_r+0x340>
 8014bb4:	465a      	mov	r2, fp
 8014bb6:	464c      	mov	r4, r9
 8014bb8:	e775      	b.n	8014aa6 <_dtoa_r+0x37e>
 8014bba:	ec41 0b17 	vmov	d7, r0, r1
 8014bbe:	495c      	ldr	r1, [pc, #368]	; (8014d30 <_dtoa_r+0x608>)
 8014bc0:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8014bc4:	ed11 4b02 	vldr	d4, [r1, #-8]
 8014bc8:	9901      	ldr	r1, [sp, #4]
 8014bca:	440c      	add	r4, r1
 8014bcc:	9907      	ldr	r1, [sp, #28]
 8014bce:	b351      	cbz	r1, 8014c26 <_dtoa_r+0x4fe>
 8014bd0:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8014bd4:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8014bd8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8014bdc:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8014be0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8014be4:	ee35 7b47 	vsub.f64	d7, d5, d7
 8014be8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8014bec:	ee14 1a90 	vmov	r1, s9
 8014bf0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8014bf4:	3130      	adds	r1, #48	; 0x30
 8014bf6:	ee36 6b45 	vsub.f64	d6, d6, d5
 8014bfa:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8014bfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c02:	f808 1b01 	strb.w	r1, [r8], #1
 8014c06:	d439      	bmi.n	8014c7c <_dtoa_r+0x554>
 8014c08:	ee32 5b46 	vsub.f64	d5, d2, d6
 8014c0c:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8014c10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c14:	d472      	bmi.n	8014cfc <_dtoa_r+0x5d4>
 8014c16:	45a0      	cmp	r8, r4
 8014c18:	f43f af6b 	beq.w	8014af2 <_dtoa_r+0x3ca>
 8014c1c:	ee27 7b03 	vmul.f64	d7, d7, d3
 8014c20:	ee26 6b03 	vmul.f64	d6, d6, d3
 8014c24:	e7e0      	b.n	8014be8 <_dtoa_r+0x4c0>
 8014c26:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8014c2a:	ee27 7b04 	vmul.f64	d7, d7, d4
 8014c2e:	4620      	mov	r0, r4
 8014c30:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8014c34:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8014c38:	ee14 1a90 	vmov	r1, s9
 8014c3c:	3130      	adds	r1, #48	; 0x30
 8014c3e:	f808 1b01 	strb.w	r1, [r8], #1
 8014c42:	45a0      	cmp	r8, r4
 8014c44:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8014c48:	ee36 6b45 	vsub.f64	d6, d6, d5
 8014c4c:	d118      	bne.n	8014c80 <_dtoa_r+0x558>
 8014c4e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8014c52:	ee37 4b05 	vadd.f64	d4, d7, d5
 8014c56:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8014c5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c5e:	dc4d      	bgt.n	8014cfc <_dtoa_r+0x5d4>
 8014c60:	ee35 5b47 	vsub.f64	d5, d5, d7
 8014c64:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8014c68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c6c:	f57f af41 	bpl.w	8014af2 <_dtoa_r+0x3ca>
 8014c70:	4680      	mov	r8, r0
 8014c72:	3801      	subs	r0, #1
 8014c74:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8014c78:	2b30      	cmp	r3, #48	; 0x30
 8014c7a:	d0f9      	beq.n	8014c70 <_dtoa_r+0x548>
 8014c7c:	4693      	mov	fp, r2
 8014c7e:	e02a      	b.n	8014cd6 <_dtoa_r+0x5ae>
 8014c80:	ee26 6b03 	vmul.f64	d6, d6, d3
 8014c84:	e7d6      	b.n	8014c34 <_dtoa_r+0x50c>
 8014c86:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014c8a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8014c8e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8014c92:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8014c96:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8014c9a:	ee15 3a10 	vmov	r3, s10
 8014c9e:	3330      	adds	r3, #48	; 0x30
 8014ca0:	f808 3b01 	strb.w	r3, [r8], #1
 8014ca4:	9b01      	ldr	r3, [sp, #4]
 8014ca6:	eba8 0303 	sub.w	r3, r8, r3
 8014caa:	4599      	cmp	r9, r3
 8014cac:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8014cb0:	eea3 7b46 	vfms.f64	d7, d3, d6
 8014cb4:	d133      	bne.n	8014d1e <_dtoa_r+0x5f6>
 8014cb6:	ee37 7b07 	vadd.f64	d7, d7, d7
 8014cba:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8014cbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014cc2:	dc1a      	bgt.n	8014cfa <_dtoa_r+0x5d2>
 8014cc4:	eeb4 7b46 	vcmp.f64	d7, d6
 8014cc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ccc:	d103      	bne.n	8014cd6 <_dtoa_r+0x5ae>
 8014cce:	ee15 3a10 	vmov	r3, s10
 8014cd2:	07d9      	lsls	r1, r3, #31
 8014cd4:	d411      	bmi.n	8014cfa <_dtoa_r+0x5d2>
 8014cd6:	4629      	mov	r1, r5
 8014cd8:	4630      	mov	r0, r6
 8014cda:	f000 fb1d 	bl	8015318 <_Bfree>
 8014cde:	2300      	movs	r3, #0
 8014ce0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014ce2:	f888 3000 	strb.w	r3, [r8]
 8014ce6:	f10b 0301 	add.w	r3, fp, #1
 8014cea:	6013      	str	r3, [r2, #0]
 8014cec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8014cee:	2b00      	cmp	r3, #0
 8014cf0:	f43f ad69 	beq.w	80147c6 <_dtoa_r+0x9e>
 8014cf4:	f8c3 8000 	str.w	r8, [r3]
 8014cf8:	e565      	b.n	80147c6 <_dtoa_r+0x9e>
 8014cfa:	465a      	mov	r2, fp
 8014cfc:	4643      	mov	r3, r8
 8014cfe:	4698      	mov	r8, r3
 8014d00:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 8014d04:	2939      	cmp	r1, #57	; 0x39
 8014d06:	d106      	bne.n	8014d16 <_dtoa_r+0x5ee>
 8014d08:	9901      	ldr	r1, [sp, #4]
 8014d0a:	4299      	cmp	r1, r3
 8014d0c:	d1f7      	bne.n	8014cfe <_dtoa_r+0x5d6>
 8014d0e:	9801      	ldr	r0, [sp, #4]
 8014d10:	2130      	movs	r1, #48	; 0x30
 8014d12:	3201      	adds	r2, #1
 8014d14:	7001      	strb	r1, [r0, #0]
 8014d16:	7819      	ldrb	r1, [r3, #0]
 8014d18:	3101      	adds	r1, #1
 8014d1a:	7019      	strb	r1, [r3, #0]
 8014d1c:	e7ae      	b.n	8014c7c <_dtoa_r+0x554>
 8014d1e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8014d22:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8014d26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d2a:	d1b2      	bne.n	8014c92 <_dtoa_r+0x56a>
 8014d2c:	e7d3      	b.n	8014cd6 <_dtoa_r+0x5ae>
 8014d2e:	bf00      	nop
 8014d30:	08017dc8 	.word	0x08017dc8
 8014d34:	08017da0 	.word	0x08017da0
 8014d38:	9907      	ldr	r1, [sp, #28]
 8014d3a:	2900      	cmp	r1, #0
 8014d3c:	f000 80d0 	beq.w	8014ee0 <_dtoa_r+0x7b8>
 8014d40:	9906      	ldr	r1, [sp, #24]
 8014d42:	2901      	cmp	r1, #1
 8014d44:	f300 80b4 	bgt.w	8014eb0 <_dtoa_r+0x788>
 8014d48:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014d4a:	2900      	cmp	r1, #0
 8014d4c:	f000 80ac 	beq.w	8014ea8 <_dtoa_r+0x780>
 8014d50:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8014d54:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8014d58:	461c      	mov	r4, r3
 8014d5a:	9309      	str	r3, [sp, #36]	; 0x24
 8014d5c:	9b04      	ldr	r3, [sp, #16]
 8014d5e:	4413      	add	r3, r2
 8014d60:	9304      	str	r3, [sp, #16]
 8014d62:	9b05      	ldr	r3, [sp, #20]
 8014d64:	2101      	movs	r1, #1
 8014d66:	4413      	add	r3, r2
 8014d68:	4630      	mov	r0, r6
 8014d6a:	9305      	str	r3, [sp, #20]
 8014d6c:	f000 fbd4 	bl	8015518 <__i2b>
 8014d70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014d72:	4607      	mov	r7, r0
 8014d74:	f1b8 0f00 	cmp.w	r8, #0
 8014d78:	d00d      	beq.n	8014d96 <_dtoa_r+0x66e>
 8014d7a:	9a05      	ldr	r2, [sp, #20]
 8014d7c:	2a00      	cmp	r2, #0
 8014d7e:	dd0a      	ble.n	8014d96 <_dtoa_r+0x66e>
 8014d80:	4542      	cmp	r2, r8
 8014d82:	9904      	ldr	r1, [sp, #16]
 8014d84:	bfa8      	it	ge
 8014d86:	4642      	movge	r2, r8
 8014d88:	1a89      	subs	r1, r1, r2
 8014d8a:	9104      	str	r1, [sp, #16]
 8014d8c:	9905      	ldr	r1, [sp, #20]
 8014d8e:	eba8 0802 	sub.w	r8, r8, r2
 8014d92:	1a8a      	subs	r2, r1, r2
 8014d94:	9205      	str	r2, [sp, #20]
 8014d96:	b303      	cbz	r3, 8014dda <_dtoa_r+0x6b2>
 8014d98:	9a07      	ldr	r2, [sp, #28]
 8014d9a:	2a00      	cmp	r2, #0
 8014d9c:	f000 80a5 	beq.w	8014eea <_dtoa_r+0x7c2>
 8014da0:	2c00      	cmp	r4, #0
 8014da2:	dd13      	ble.n	8014dcc <_dtoa_r+0x6a4>
 8014da4:	4639      	mov	r1, r7
 8014da6:	4622      	mov	r2, r4
 8014da8:	4630      	mov	r0, r6
 8014daa:	930d      	str	r3, [sp, #52]	; 0x34
 8014dac:	f000 fc74 	bl	8015698 <__pow5mult>
 8014db0:	462a      	mov	r2, r5
 8014db2:	4601      	mov	r1, r0
 8014db4:	4607      	mov	r7, r0
 8014db6:	4630      	mov	r0, r6
 8014db8:	f000 fbc4 	bl	8015544 <__multiply>
 8014dbc:	4629      	mov	r1, r5
 8014dbe:	9009      	str	r0, [sp, #36]	; 0x24
 8014dc0:	4630      	mov	r0, r6
 8014dc2:	f000 faa9 	bl	8015318 <_Bfree>
 8014dc6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014dc8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014dca:	4615      	mov	r5, r2
 8014dcc:	1b1a      	subs	r2, r3, r4
 8014dce:	d004      	beq.n	8014dda <_dtoa_r+0x6b2>
 8014dd0:	4629      	mov	r1, r5
 8014dd2:	4630      	mov	r0, r6
 8014dd4:	f000 fc60 	bl	8015698 <__pow5mult>
 8014dd8:	4605      	mov	r5, r0
 8014dda:	2101      	movs	r1, #1
 8014ddc:	4630      	mov	r0, r6
 8014dde:	f000 fb9b 	bl	8015518 <__i2b>
 8014de2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014de4:	2b00      	cmp	r3, #0
 8014de6:	4604      	mov	r4, r0
 8014de8:	f340 8081 	ble.w	8014eee <_dtoa_r+0x7c6>
 8014dec:	461a      	mov	r2, r3
 8014dee:	4601      	mov	r1, r0
 8014df0:	4630      	mov	r0, r6
 8014df2:	f000 fc51 	bl	8015698 <__pow5mult>
 8014df6:	9b06      	ldr	r3, [sp, #24]
 8014df8:	2b01      	cmp	r3, #1
 8014dfa:	4604      	mov	r4, r0
 8014dfc:	dd7a      	ble.n	8014ef4 <_dtoa_r+0x7cc>
 8014dfe:	2300      	movs	r3, #0
 8014e00:	9309      	str	r3, [sp, #36]	; 0x24
 8014e02:	6922      	ldr	r2, [r4, #16]
 8014e04:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8014e08:	6910      	ldr	r0, [r2, #16]
 8014e0a:	f000 fb37 	bl	801547c <__hi0bits>
 8014e0e:	f1c0 0020 	rsb	r0, r0, #32
 8014e12:	9b05      	ldr	r3, [sp, #20]
 8014e14:	4418      	add	r0, r3
 8014e16:	f010 001f 	ands.w	r0, r0, #31
 8014e1a:	f000 8093 	beq.w	8014f44 <_dtoa_r+0x81c>
 8014e1e:	f1c0 0220 	rsb	r2, r0, #32
 8014e22:	2a04      	cmp	r2, #4
 8014e24:	f340 8085 	ble.w	8014f32 <_dtoa_r+0x80a>
 8014e28:	9b04      	ldr	r3, [sp, #16]
 8014e2a:	f1c0 001c 	rsb	r0, r0, #28
 8014e2e:	4403      	add	r3, r0
 8014e30:	9304      	str	r3, [sp, #16]
 8014e32:	9b05      	ldr	r3, [sp, #20]
 8014e34:	4480      	add	r8, r0
 8014e36:	4403      	add	r3, r0
 8014e38:	9305      	str	r3, [sp, #20]
 8014e3a:	9b04      	ldr	r3, [sp, #16]
 8014e3c:	2b00      	cmp	r3, #0
 8014e3e:	dd05      	ble.n	8014e4c <_dtoa_r+0x724>
 8014e40:	4629      	mov	r1, r5
 8014e42:	461a      	mov	r2, r3
 8014e44:	4630      	mov	r0, r6
 8014e46:	f000 fc81 	bl	801574c <__lshift>
 8014e4a:	4605      	mov	r5, r0
 8014e4c:	9b05      	ldr	r3, [sp, #20]
 8014e4e:	2b00      	cmp	r3, #0
 8014e50:	dd05      	ble.n	8014e5e <_dtoa_r+0x736>
 8014e52:	4621      	mov	r1, r4
 8014e54:	461a      	mov	r2, r3
 8014e56:	4630      	mov	r0, r6
 8014e58:	f000 fc78 	bl	801574c <__lshift>
 8014e5c:	4604      	mov	r4, r0
 8014e5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014e60:	2b00      	cmp	r3, #0
 8014e62:	d071      	beq.n	8014f48 <_dtoa_r+0x820>
 8014e64:	4621      	mov	r1, r4
 8014e66:	4628      	mov	r0, r5
 8014e68:	f000 fcdc 	bl	8015824 <__mcmp>
 8014e6c:	2800      	cmp	r0, #0
 8014e6e:	da6b      	bge.n	8014f48 <_dtoa_r+0x820>
 8014e70:	2300      	movs	r3, #0
 8014e72:	4629      	mov	r1, r5
 8014e74:	220a      	movs	r2, #10
 8014e76:	4630      	mov	r0, r6
 8014e78:	f000 fa70 	bl	801535c <__multadd>
 8014e7c:	9b07      	ldr	r3, [sp, #28]
 8014e7e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8014e82:	4605      	mov	r5, r0
 8014e84:	2b00      	cmp	r3, #0
 8014e86:	f000 8197 	beq.w	80151b8 <_dtoa_r+0xa90>
 8014e8a:	4639      	mov	r1, r7
 8014e8c:	2300      	movs	r3, #0
 8014e8e:	220a      	movs	r2, #10
 8014e90:	4630      	mov	r0, r6
 8014e92:	f000 fa63 	bl	801535c <__multadd>
 8014e96:	f1ba 0f00 	cmp.w	sl, #0
 8014e9a:	4607      	mov	r7, r0
 8014e9c:	f300 8093 	bgt.w	8014fc6 <_dtoa_r+0x89e>
 8014ea0:	9b06      	ldr	r3, [sp, #24]
 8014ea2:	2b02      	cmp	r3, #2
 8014ea4:	dc57      	bgt.n	8014f56 <_dtoa_r+0x82e>
 8014ea6:	e08e      	b.n	8014fc6 <_dtoa_r+0x89e>
 8014ea8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014eaa:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8014eae:	e751      	b.n	8014d54 <_dtoa_r+0x62c>
 8014eb0:	f109 34ff 	add.w	r4, r9, #4294967295
 8014eb4:	42a3      	cmp	r3, r4
 8014eb6:	bfbf      	itttt	lt
 8014eb8:	1ae2      	sublt	r2, r4, r3
 8014eba:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8014ebc:	189b      	addlt	r3, r3, r2
 8014ebe:	930a      	strlt	r3, [sp, #40]	; 0x28
 8014ec0:	bfae      	itee	ge
 8014ec2:	1b1c      	subge	r4, r3, r4
 8014ec4:	4623      	movlt	r3, r4
 8014ec6:	2400      	movlt	r4, #0
 8014ec8:	f1b9 0f00 	cmp.w	r9, #0
 8014ecc:	bfb5      	itete	lt
 8014ece:	9a04      	ldrlt	r2, [sp, #16]
 8014ed0:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8014ed4:	eba2 0809 	sublt.w	r8, r2, r9
 8014ed8:	464a      	movge	r2, r9
 8014eda:	bfb8      	it	lt
 8014edc:	2200      	movlt	r2, #0
 8014ede:	e73c      	b.n	8014d5a <_dtoa_r+0x632>
 8014ee0:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8014ee4:	9f07      	ldr	r7, [sp, #28]
 8014ee6:	461c      	mov	r4, r3
 8014ee8:	e744      	b.n	8014d74 <_dtoa_r+0x64c>
 8014eea:	461a      	mov	r2, r3
 8014eec:	e770      	b.n	8014dd0 <_dtoa_r+0x6a8>
 8014eee:	9b06      	ldr	r3, [sp, #24]
 8014ef0:	2b01      	cmp	r3, #1
 8014ef2:	dc18      	bgt.n	8014f26 <_dtoa_r+0x7fe>
 8014ef4:	9b02      	ldr	r3, [sp, #8]
 8014ef6:	b9b3      	cbnz	r3, 8014f26 <_dtoa_r+0x7fe>
 8014ef8:	9b03      	ldr	r3, [sp, #12]
 8014efa:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8014efe:	b9a2      	cbnz	r2, 8014f2a <_dtoa_r+0x802>
 8014f00:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8014f04:	0d12      	lsrs	r2, r2, #20
 8014f06:	0512      	lsls	r2, r2, #20
 8014f08:	b18a      	cbz	r2, 8014f2e <_dtoa_r+0x806>
 8014f0a:	9b04      	ldr	r3, [sp, #16]
 8014f0c:	3301      	adds	r3, #1
 8014f0e:	9304      	str	r3, [sp, #16]
 8014f10:	9b05      	ldr	r3, [sp, #20]
 8014f12:	3301      	adds	r3, #1
 8014f14:	9305      	str	r3, [sp, #20]
 8014f16:	2301      	movs	r3, #1
 8014f18:	9309      	str	r3, [sp, #36]	; 0x24
 8014f1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014f1c:	2b00      	cmp	r3, #0
 8014f1e:	f47f af70 	bne.w	8014e02 <_dtoa_r+0x6da>
 8014f22:	2001      	movs	r0, #1
 8014f24:	e775      	b.n	8014e12 <_dtoa_r+0x6ea>
 8014f26:	2300      	movs	r3, #0
 8014f28:	e7f6      	b.n	8014f18 <_dtoa_r+0x7f0>
 8014f2a:	9b02      	ldr	r3, [sp, #8]
 8014f2c:	e7f4      	b.n	8014f18 <_dtoa_r+0x7f0>
 8014f2e:	9209      	str	r2, [sp, #36]	; 0x24
 8014f30:	e7f3      	b.n	8014f1a <_dtoa_r+0x7f2>
 8014f32:	d082      	beq.n	8014e3a <_dtoa_r+0x712>
 8014f34:	9b04      	ldr	r3, [sp, #16]
 8014f36:	321c      	adds	r2, #28
 8014f38:	4413      	add	r3, r2
 8014f3a:	9304      	str	r3, [sp, #16]
 8014f3c:	9b05      	ldr	r3, [sp, #20]
 8014f3e:	4490      	add	r8, r2
 8014f40:	4413      	add	r3, r2
 8014f42:	e779      	b.n	8014e38 <_dtoa_r+0x710>
 8014f44:	4602      	mov	r2, r0
 8014f46:	e7f5      	b.n	8014f34 <_dtoa_r+0x80c>
 8014f48:	f1b9 0f00 	cmp.w	r9, #0
 8014f4c:	dc36      	bgt.n	8014fbc <_dtoa_r+0x894>
 8014f4e:	9b06      	ldr	r3, [sp, #24]
 8014f50:	2b02      	cmp	r3, #2
 8014f52:	dd33      	ble.n	8014fbc <_dtoa_r+0x894>
 8014f54:	46ca      	mov	sl, r9
 8014f56:	f1ba 0f00 	cmp.w	sl, #0
 8014f5a:	d10d      	bne.n	8014f78 <_dtoa_r+0x850>
 8014f5c:	4621      	mov	r1, r4
 8014f5e:	4653      	mov	r3, sl
 8014f60:	2205      	movs	r2, #5
 8014f62:	4630      	mov	r0, r6
 8014f64:	f000 f9fa 	bl	801535c <__multadd>
 8014f68:	4601      	mov	r1, r0
 8014f6a:	4604      	mov	r4, r0
 8014f6c:	4628      	mov	r0, r5
 8014f6e:	f000 fc59 	bl	8015824 <__mcmp>
 8014f72:	2800      	cmp	r0, #0
 8014f74:	f73f ade4 	bgt.w	8014b40 <_dtoa_r+0x418>
 8014f78:	9b08      	ldr	r3, [sp, #32]
 8014f7a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8014f7e:	ea6f 0b03 	mvn.w	fp, r3
 8014f82:	f04f 0900 	mov.w	r9, #0
 8014f86:	4621      	mov	r1, r4
 8014f88:	4630      	mov	r0, r6
 8014f8a:	f000 f9c5 	bl	8015318 <_Bfree>
 8014f8e:	2f00      	cmp	r7, #0
 8014f90:	f43f aea1 	beq.w	8014cd6 <_dtoa_r+0x5ae>
 8014f94:	f1b9 0f00 	cmp.w	r9, #0
 8014f98:	d005      	beq.n	8014fa6 <_dtoa_r+0x87e>
 8014f9a:	45b9      	cmp	r9, r7
 8014f9c:	d003      	beq.n	8014fa6 <_dtoa_r+0x87e>
 8014f9e:	4649      	mov	r1, r9
 8014fa0:	4630      	mov	r0, r6
 8014fa2:	f000 f9b9 	bl	8015318 <_Bfree>
 8014fa6:	4639      	mov	r1, r7
 8014fa8:	4630      	mov	r0, r6
 8014faa:	f000 f9b5 	bl	8015318 <_Bfree>
 8014fae:	e692      	b.n	8014cd6 <_dtoa_r+0x5ae>
 8014fb0:	2400      	movs	r4, #0
 8014fb2:	4627      	mov	r7, r4
 8014fb4:	e7e0      	b.n	8014f78 <_dtoa_r+0x850>
 8014fb6:	4693      	mov	fp, r2
 8014fb8:	4627      	mov	r7, r4
 8014fba:	e5c1      	b.n	8014b40 <_dtoa_r+0x418>
 8014fbc:	9b07      	ldr	r3, [sp, #28]
 8014fbe:	46ca      	mov	sl, r9
 8014fc0:	2b00      	cmp	r3, #0
 8014fc2:	f000 8100 	beq.w	80151c6 <_dtoa_r+0xa9e>
 8014fc6:	f1b8 0f00 	cmp.w	r8, #0
 8014fca:	dd05      	ble.n	8014fd8 <_dtoa_r+0x8b0>
 8014fcc:	4639      	mov	r1, r7
 8014fce:	4642      	mov	r2, r8
 8014fd0:	4630      	mov	r0, r6
 8014fd2:	f000 fbbb 	bl	801574c <__lshift>
 8014fd6:	4607      	mov	r7, r0
 8014fd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014fda:	2b00      	cmp	r3, #0
 8014fdc:	d05d      	beq.n	801509a <_dtoa_r+0x972>
 8014fde:	6879      	ldr	r1, [r7, #4]
 8014fe0:	4630      	mov	r0, r6
 8014fe2:	f000 f959 	bl	8015298 <_Balloc>
 8014fe6:	4680      	mov	r8, r0
 8014fe8:	b928      	cbnz	r0, 8014ff6 <_dtoa_r+0x8ce>
 8014fea:	4b82      	ldr	r3, [pc, #520]	; (80151f4 <_dtoa_r+0xacc>)
 8014fec:	4602      	mov	r2, r0
 8014fee:	f240 21ef 	movw	r1, #751	; 0x2ef
 8014ff2:	f7ff bbb1 	b.w	8014758 <_dtoa_r+0x30>
 8014ff6:	693a      	ldr	r2, [r7, #16]
 8014ff8:	3202      	adds	r2, #2
 8014ffa:	0092      	lsls	r2, r2, #2
 8014ffc:	f107 010c 	add.w	r1, r7, #12
 8015000:	300c      	adds	r0, #12
 8015002:	f7ff faf2 	bl	80145ea <memcpy>
 8015006:	2201      	movs	r2, #1
 8015008:	4641      	mov	r1, r8
 801500a:	4630      	mov	r0, r6
 801500c:	f000 fb9e 	bl	801574c <__lshift>
 8015010:	9b01      	ldr	r3, [sp, #4]
 8015012:	3301      	adds	r3, #1
 8015014:	9304      	str	r3, [sp, #16]
 8015016:	9b01      	ldr	r3, [sp, #4]
 8015018:	4453      	add	r3, sl
 801501a:	9308      	str	r3, [sp, #32]
 801501c:	9b02      	ldr	r3, [sp, #8]
 801501e:	f003 0301 	and.w	r3, r3, #1
 8015022:	46b9      	mov	r9, r7
 8015024:	9307      	str	r3, [sp, #28]
 8015026:	4607      	mov	r7, r0
 8015028:	9b04      	ldr	r3, [sp, #16]
 801502a:	4621      	mov	r1, r4
 801502c:	3b01      	subs	r3, #1
 801502e:	4628      	mov	r0, r5
 8015030:	9302      	str	r3, [sp, #8]
 8015032:	f7ff faef 	bl	8014614 <quorem>
 8015036:	4603      	mov	r3, r0
 8015038:	3330      	adds	r3, #48	; 0x30
 801503a:	9005      	str	r0, [sp, #20]
 801503c:	4649      	mov	r1, r9
 801503e:	4628      	mov	r0, r5
 8015040:	9309      	str	r3, [sp, #36]	; 0x24
 8015042:	f000 fbef 	bl	8015824 <__mcmp>
 8015046:	463a      	mov	r2, r7
 8015048:	4682      	mov	sl, r0
 801504a:	4621      	mov	r1, r4
 801504c:	4630      	mov	r0, r6
 801504e:	f000 fc05 	bl	801585c <__mdiff>
 8015052:	68c2      	ldr	r2, [r0, #12]
 8015054:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015056:	4680      	mov	r8, r0
 8015058:	bb0a      	cbnz	r2, 801509e <_dtoa_r+0x976>
 801505a:	4601      	mov	r1, r0
 801505c:	4628      	mov	r0, r5
 801505e:	f000 fbe1 	bl	8015824 <__mcmp>
 8015062:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015064:	4602      	mov	r2, r0
 8015066:	4641      	mov	r1, r8
 8015068:	4630      	mov	r0, r6
 801506a:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 801506e:	f000 f953 	bl	8015318 <_Bfree>
 8015072:	9b06      	ldr	r3, [sp, #24]
 8015074:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015076:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801507a:	ea43 0102 	orr.w	r1, r3, r2
 801507e:	9b07      	ldr	r3, [sp, #28]
 8015080:	4319      	orrs	r1, r3
 8015082:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015084:	d10d      	bne.n	80150a2 <_dtoa_r+0x97a>
 8015086:	2b39      	cmp	r3, #57	; 0x39
 8015088:	d029      	beq.n	80150de <_dtoa_r+0x9b6>
 801508a:	f1ba 0f00 	cmp.w	sl, #0
 801508e:	dd01      	ble.n	8015094 <_dtoa_r+0x96c>
 8015090:	9b05      	ldr	r3, [sp, #20]
 8015092:	3331      	adds	r3, #49	; 0x31
 8015094:	9a02      	ldr	r2, [sp, #8]
 8015096:	7013      	strb	r3, [r2, #0]
 8015098:	e775      	b.n	8014f86 <_dtoa_r+0x85e>
 801509a:	4638      	mov	r0, r7
 801509c:	e7b8      	b.n	8015010 <_dtoa_r+0x8e8>
 801509e:	2201      	movs	r2, #1
 80150a0:	e7e1      	b.n	8015066 <_dtoa_r+0x93e>
 80150a2:	f1ba 0f00 	cmp.w	sl, #0
 80150a6:	db06      	blt.n	80150b6 <_dtoa_r+0x98e>
 80150a8:	9906      	ldr	r1, [sp, #24]
 80150aa:	ea41 0a0a 	orr.w	sl, r1, sl
 80150ae:	9907      	ldr	r1, [sp, #28]
 80150b0:	ea5a 0a01 	orrs.w	sl, sl, r1
 80150b4:	d120      	bne.n	80150f8 <_dtoa_r+0x9d0>
 80150b6:	2a00      	cmp	r2, #0
 80150b8:	ddec      	ble.n	8015094 <_dtoa_r+0x96c>
 80150ba:	4629      	mov	r1, r5
 80150bc:	2201      	movs	r2, #1
 80150be:	4630      	mov	r0, r6
 80150c0:	9304      	str	r3, [sp, #16]
 80150c2:	f000 fb43 	bl	801574c <__lshift>
 80150c6:	4621      	mov	r1, r4
 80150c8:	4605      	mov	r5, r0
 80150ca:	f000 fbab 	bl	8015824 <__mcmp>
 80150ce:	2800      	cmp	r0, #0
 80150d0:	9b04      	ldr	r3, [sp, #16]
 80150d2:	dc02      	bgt.n	80150da <_dtoa_r+0x9b2>
 80150d4:	d1de      	bne.n	8015094 <_dtoa_r+0x96c>
 80150d6:	07da      	lsls	r2, r3, #31
 80150d8:	d5dc      	bpl.n	8015094 <_dtoa_r+0x96c>
 80150da:	2b39      	cmp	r3, #57	; 0x39
 80150dc:	d1d8      	bne.n	8015090 <_dtoa_r+0x968>
 80150de:	9a02      	ldr	r2, [sp, #8]
 80150e0:	2339      	movs	r3, #57	; 0x39
 80150e2:	7013      	strb	r3, [r2, #0]
 80150e4:	4643      	mov	r3, r8
 80150e6:	4698      	mov	r8, r3
 80150e8:	3b01      	subs	r3, #1
 80150ea:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 80150ee:	2a39      	cmp	r2, #57	; 0x39
 80150f0:	d051      	beq.n	8015196 <_dtoa_r+0xa6e>
 80150f2:	3201      	adds	r2, #1
 80150f4:	701a      	strb	r2, [r3, #0]
 80150f6:	e746      	b.n	8014f86 <_dtoa_r+0x85e>
 80150f8:	2a00      	cmp	r2, #0
 80150fa:	dd03      	ble.n	8015104 <_dtoa_r+0x9dc>
 80150fc:	2b39      	cmp	r3, #57	; 0x39
 80150fe:	d0ee      	beq.n	80150de <_dtoa_r+0x9b6>
 8015100:	3301      	adds	r3, #1
 8015102:	e7c7      	b.n	8015094 <_dtoa_r+0x96c>
 8015104:	9a04      	ldr	r2, [sp, #16]
 8015106:	9908      	ldr	r1, [sp, #32]
 8015108:	f802 3c01 	strb.w	r3, [r2, #-1]
 801510c:	428a      	cmp	r2, r1
 801510e:	d02b      	beq.n	8015168 <_dtoa_r+0xa40>
 8015110:	4629      	mov	r1, r5
 8015112:	2300      	movs	r3, #0
 8015114:	220a      	movs	r2, #10
 8015116:	4630      	mov	r0, r6
 8015118:	f000 f920 	bl	801535c <__multadd>
 801511c:	45b9      	cmp	r9, r7
 801511e:	4605      	mov	r5, r0
 8015120:	f04f 0300 	mov.w	r3, #0
 8015124:	f04f 020a 	mov.w	r2, #10
 8015128:	4649      	mov	r1, r9
 801512a:	4630      	mov	r0, r6
 801512c:	d107      	bne.n	801513e <_dtoa_r+0xa16>
 801512e:	f000 f915 	bl	801535c <__multadd>
 8015132:	4681      	mov	r9, r0
 8015134:	4607      	mov	r7, r0
 8015136:	9b04      	ldr	r3, [sp, #16]
 8015138:	3301      	adds	r3, #1
 801513a:	9304      	str	r3, [sp, #16]
 801513c:	e774      	b.n	8015028 <_dtoa_r+0x900>
 801513e:	f000 f90d 	bl	801535c <__multadd>
 8015142:	4639      	mov	r1, r7
 8015144:	4681      	mov	r9, r0
 8015146:	2300      	movs	r3, #0
 8015148:	220a      	movs	r2, #10
 801514a:	4630      	mov	r0, r6
 801514c:	f000 f906 	bl	801535c <__multadd>
 8015150:	4607      	mov	r7, r0
 8015152:	e7f0      	b.n	8015136 <_dtoa_r+0xa0e>
 8015154:	f1ba 0f00 	cmp.w	sl, #0
 8015158:	9a01      	ldr	r2, [sp, #4]
 801515a:	bfcc      	ite	gt
 801515c:	46d0      	movgt	r8, sl
 801515e:	f04f 0801 	movle.w	r8, #1
 8015162:	4490      	add	r8, r2
 8015164:	f04f 0900 	mov.w	r9, #0
 8015168:	4629      	mov	r1, r5
 801516a:	2201      	movs	r2, #1
 801516c:	4630      	mov	r0, r6
 801516e:	9302      	str	r3, [sp, #8]
 8015170:	f000 faec 	bl	801574c <__lshift>
 8015174:	4621      	mov	r1, r4
 8015176:	4605      	mov	r5, r0
 8015178:	f000 fb54 	bl	8015824 <__mcmp>
 801517c:	2800      	cmp	r0, #0
 801517e:	dcb1      	bgt.n	80150e4 <_dtoa_r+0x9bc>
 8015180:	d102      	bne.n	8015188 <_dtoa_r+0xa60>
 8015182:	9b02      	ldr	r3, [sp, #8]
 8015184:	07db      	lsls	r3, r3, #31
 8015186:	d4ad      	bmi.n	80150e4 <_dtoa_r+0x9bc>
 8015188:	4643      	mov	r3, r8
 801518a:	4698      	mov	r8, r3
 801518c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8015190:	2a30      	cmp	r2, #48	; 0x30
 8015192:	d0fa      	beq.n	801518a <_dtoa_r+0xa62>
 8015194:	e6f7      	b.n	8014f86 <_dtoa_r+0x85e>
 8015196:	9a01      	ldr	r2, [sp, #4]
 8015198:	429a      	cmp	r2, r3
 801519a:	d1a4      	bne.n	80150e6 <_dtoa_r+0x9be>
 801519c:	f10b 0b01 	add.w	fp, fp, #1
 80151a0:	2331      	movs	r3, #49	; 0x31
 80151a2:	e778      	b.n	8015096 <_dtoa_r+0x96e>
 80151a4:	4b14      	ldr	r3, [pc, #80]	; (80151f8 <_dtoa_r+0xad0>)
 80151a6:	f7ff bb2a 	b.w	80147fe <_dtoa_r+0xd6>
 80151aa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80151ac:	2b00      	cmp	r3, #0
 80151ae:	f47f ab05 	bne.w	80147bc <_dtoa_r+0x94>
 80151b2:	4b12      	ldr	r3, [pc, #72]	; (80151fc <_dtoa_r+0xad4>)
 80151b4:	f7ff bb23 	b.w	80147fe <_dtoa_r+0xd6>
 80151b8:	f1ba 0f00 	cmp.w	sl, #0
 80151bc:	dc03      	bgt.n	80151c6 <_dtoa_r+0xa9e>
 80151be:	9b06      	ldr	r3, [sp, #24]
 80151c0:	2b02      	cmp	r3, #2
 80151c2:	f73f aec8 	bgt.w	8014f56 <_dtoa_r+0x82e>
 80151c6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80151ca:	4621      	mov	r1, r4
 80151cc:	4628      	mov	r0, r5
 80151ce:	f7ff fa21 	bl	8014614 <quorem>
 80151d2:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80151d6:	f808 3b01 	strb.w	r3, [r8], #1
 80151da:	9a01      	ldr	r2, [sp, #4]
 80151dc:	eba8 0202 	sub.w	r2, r8, r2
 80151e0:	4592      	cmp	sl, r2
 80151e2:	ddb7      	ble.n	8015154 <_dtoa_r+0xa2c>
 80151e4:	4629      	mov	r1, r5
 80151e6:	2300      	movs	r3, #0
 80151e8:	220a      	movs	r2, #10
 80151ea:	4630      	mov	r0, r6
 80151ec:	f000 f8b6 	bl	801535c <__multadd>
 80151f0:	4605      	mov	r5, r0
 80151f2:	e7ea      	b.n	80151ca <_dtoa_r+0xaa2>
 80151f4:	08017d31 	.word	0x08017d31
 80151f8:	08017c8c 	.word	0x08017c8c
 80151fc:	08017cb5 	.word	0x08017cb5

08015200 <_free_r>:
 8015200:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015202:	2900      	cmp	r1, #0
 8015204:	d044      	beq.n	8015290 <_free_r+0x90>
 8015206:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801520a:	9001      	str	r0, [sp, #4]
 801520c:	2b00      	cmp	r3, #0
 801520e:	f1a1 0404 	sub.w	r4, r1, #4
 8015212:	bfb8      	it	lt
 8015214:	18e4      	addlt	r4, r4, r3
 8015216:	f7fe f95d 	bl	80134d4 <__malloc_lock>
 801521a:	4a1e      	ldr	r2, [pc, #120]	; (8015294 <_free_r+0x94>)
 801521c:	9801      	ldr	r0, [sp, #4]
 801521e:	6813      	ldr	r3, [r2, #0]
 8015220:	b933      	cbnz	r3, 8015230 <_free_r+0x30>
 8015222:	6063      	str	r3, [r4, #4]
 8015224:	6014      	str	r4, [r2, #0]
 8015226:	b003      	add	sp, #12
 8015228:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801522c:	f7fe b958 	b.w	80134e0 <__malloc_unlock>
 8015230:	42a3      	cmp	r3, r4
 8015232:	d908      	bls.n	8015246 <_free_r+0x46>
 8015234:	6825      	ldr	r5, [r4, #0]
 8015236:	1961      	adds	r1, r4, r5
 8015238:	428b      	cmp	r3, r1
 801523a:	bf01      	itttt	eq
 801523c:	6819      	ldreq	r1, [r3, #0]
 801523e:	685b      	ldreq	r3, [r3, #4]
 8015240:	1949      	addeq	r1, r1, r5
 8015242:	6021      	streq	r1, [r4, #0]
 8015244:	e7ed      	b.n	8015222 <_free_r+0x22>
 8015246:	461a      	mov	r2, r3
 8015248:	685b      	ldr	r3, [r3, #4]
 801524a:	b10b      	cbz	r3, 8015250 <_free_r+0x50>
 801524c:	42a3      	cmp	r3, r4
 801524e:	d9fa      	bls.n	8015246 <_free_r+0x46>
 8015250:	6811      	ldr	r1, [r2, #0]
 8015252:	1855      	adds	r5, r2, r1
 8015254:	42a5      	cmp	r5, r4
 8015256:	d10b      	bne.n	8015270 <_free_r+0x70>
 8015258:	6824      	ldr	r4, [r4, #0]
 801525a:	4421      	add	r1, r4
 801525c:	1854      	adds	r4, r2, r1
 801525e:	42a3      	cmp	r3, r4
 8015260:	6011      	str	r1, [r2, #0]
 8015262:	d1e0      	bne.n	8015226 <_free_r+0x26>
 8015264:	681c      	ldr	r4, [r3, #0]
 8015266:	685b      	ldr	r3, [r3, #4]
 8015268:	6053      	str	r3, [r2, #4]
 801526a:	440c      	add	r4, r1
 801526c:	6014      	str	r4, [r2, #0]
 801526e:	e7da      	b.n	8015226 <_free_r+0x26>
 8015270:	d902      	bls.n	8015278 <_free_r+0x78>
 8015272:	230c      	movs	r3, #12
 8015274:	6003      	str	r3, [r0, #0]
 8015276:	e7d6      	b.n	8015226 <_free_r+0x26>
 8015278:	6825      	ldr	r5, [r4, #0]
 801527a:	1961      	adds	r1, r4, r5
 801527c:	428b      	cmp	r3, r1
 801527e:	bf04      	itt	eq
 8015280:	6819      	ldreq	r1, [r3, #0]
 8015282:	685b      	ldreq	r3, [r3, #4]
 8015284:	6063      	str	r3, [r4, #4]
 8015286:	bf04      	itt	eq
 8015288:	1949      	addeq	r1, r1, r5
 801528a:	6021      	streq	r1, [r4, #0]
 801528c:	6054      	str	r4, [r2, #4]
 801528e:	e7ca      	b.n	8015226 <_free_r+0x26>
 8015290:	b003      	add	sp, #12
 8015292:	bd30      	pop	{r4, r5, pc}
 8015294:	24005604 	.word	0x24005604

08015298 <_Balloc>:
 8015298:	b570      	push	{r4, r5, r6, lr}
 801529a:	69c6      	ldr	r6, [r0, #28]
 801529c:	4604      	mov	r4, r0
 801529e:	460d      	mov	r5, r1
 80152a0:	b976      	cbnz	r6, 80152c0 <_Balloc+0x28>
 80152a2:	2010      	movs	r0, #16
 80152a4:	f7fe f866 	bl	8013374 <malloc>
 80152a8:	4602      	mov	r2, r0
 80152aa:	61e0      	str	r0, [r4, #28]
 80152ac:	b920      	cbnz	r0, 80152b8 <_Balloc+0x20>
 80152ae:	4b18      	ldr	r3, [pc, #96]	; (8015310 <_Balloc+0x78>)
 80152b0:	4818      	ldr	r0, [pc, #96]	; (8015314 <_Balloc+0x7c>)
 80152b2:	216b      	movs	r1, #107	; 0x6b
 80152b4:	f001 fd2c 	bl	8016d10 <__assert_func>
 80152b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80152bc:	6006      	str	r6, [r0, #0]
 80152be:	60c6      	str	r6, [r0, #12]
 80152c0:	69e6      	ldr	r6, [r4, #28]
 80152c2:	68f3      	ldr	r3, [r6, #12]
 80152c4:	b183      	cbz	r3, 80152e8 <_Balloc+0x50>
 80152c6:	69e3      	ldr	r3, [r4, #28]
 80152c8:	68db      	ldr	r3, [r3, #12]
 80152ca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80152ce:	b9b8      	cbnz	r0, 8015300 <_Balloc+0x68>
 80152d0:	2101      	movs	r1, #1
 80152d2:	fa01 f605 	lsl.w	r6, r1, r5
 80152d6:	1d72      	adds	r2, r6, #5
 80152d8:	0092      	lsls	r2, r2, #2
 80152da:	4620      	mov	r0, r4
 80152dc:	f001 fd36 	bl	8016d4c <_calloc_r>
 80152e0:	b160      	cbz	r0, 80152fc <_Balloc+0x64>
 80152e2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80152e6:	e00e      	b.n	8015306 <_Balloc+0x6e>
 80152e8:	2221      	movs	r2, #33	; 0x21
 80152ea:	2104      	movs	r1, #4
 80152ec:	4620      	mov	r0, r4
 80152ee:	f001 fd2d 	bl	8016d4c <_calloc_r>
 80152f2:	69e3      	ldr	r3, [r4, #28]
 80152f4:	60f0      	str	r0, [r6, #12]
 80152f6:	68db      	ldr	r3, [r3, #12]
 80152f8:	2b00      	cmp	r3, #0
 80152fa:	d1e4      	bne.n	80152c6 <_Balloc+0x2e>
 80152fc:	2000      	movs	r0, #0
 80152fe:	bd70      	pop	{r4, r5, r6, pc}
 8015300:	6802      	ldr	r2, [r0, #0]
 8015302:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015306:	2300      	movs	r3, #0
 8015308:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801530c:	e7f7      	b.n	80152fe <_Balloc+0x66>
 801530e:	bf00      	nop
 8015310:	08017cc2 	.word	0x08017cc2
 8015314:	08017d42 	.word	0x08017d42

08015318 <_Bfree>:
 8015318:	b570      	push	{r4, r5, r6, lr}
 801531a:	69c6      	ldr	r6, [r0, #28]
 801531c:	4605      	mov	r5, r0
 801531e:	460c      	mov	r4, r1
 8015320:	b976      	cbnz	r6, 8015340 <_Bfree+0x28>
 8015322:	2010      	movs	r0, #16
 8015324:	f7fe f826 	bl	8013374 <malloc>
 8015328:	4602      	mov	r2, r0
 801532a:	61e8      	str	r0, [r5, #28]
 801532c:	b920      	cbnz	r0, 8015338 <_Bfree+0x20>
 801532e:	4b09      	ldr	r3, [pc, #36]	; (8015354 <_Bfree+0x3c>)
 8015330:	4809      	ldr	r0, [pc, #36]	; (8015358 <_Bfree+0x40>)
 8015332:	218f      	movs	r1, #143	; 0x8f
 8015334:	f001 fcec 	bl	8016d10 <__assert_func>
 8015338:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801533c:	6006      	str	r6, [r0, #0]
 801533e:	60c6      	str	r6, [r0, #12]
 8015340:	b13c      	cbz	r4, 8015352 <_Bfree+0x3a>
 8015342:	69eb      	ldr	r3, [r5, #28]
 8015344:	6862      	ldr	r2, [r4, #4]
 8015346:	68db      	ldr	r3, [r3, #12]
 8015348:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801534c:	6021      	str	r1, [r4, #0]
 801534e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8015352:	bd70      	pop	{r4, r5, r6, pc}
 8015354:	08017cc2 	.word	0x08017cc2
 8015358:	08017d42 	.word	0x08017d42

0801535c <__multadd>:
 801535c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015360:	690d      	ldr	r5, [r1, #16]
 8015362:	4607      	mov	r7, r0
 8015364:	460c      	mov	r4, r1
 8015366:	461e      	mov	r6, r3
 8015368:	f101 0c14 	add.w	ip, r1, #20
 801536c:	2000      	movs	r0, #0
 801536e:	f8dc 3000 	ldr.w	r3, [ip]
 8015372:	b299      	uxth	r1, r3
 8015374:	fb02 6101 	mla	r1, r2, r1, r6
 8015378:	0c1e      	lsrs	r6, r3, #16
 801537a:	0c0b      	lsrs	r3, r1, #16
 801537c:	fb02 3306 	mla	r3, r2, r6, r3
 8015380:	b289      	uxth	r1, r1
 8015382:	3001      	adds	r0, #1
 8015384:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8015388:	4285      	cmp	r5, r0
 801538a:	f84c 1b04 	str.w	r1, [ip], #4
 801538e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8015392:	dcec      	bgt.n	801536e <__multadd+0x12>
 8015394:	b30e      	cbz	r6, 80153da <__multadd+0x7e>
 8015396:	68a3      	ldr	r3, [r4, #8]
 8015398:	42ab      	cmp	r3, r5
 801539a:	dc19      	bgt.n	80153d0 <__multadd+0x74>
 801539c:	6861      	ldr	r1, [r4, #4]
 801539e:	4638      	mov	r0, r7
 80153a0:	3101      	adds	r1, #1
 80153a2:	f7ff ff79 	bl	8015298 <_Balloc>
 80153a6:	4680      	mov	r8, r0
 80153a8:	b928      	cbnz	r0, 80153b6 <__multadd+0x5a>
 80153aa:	4602      	mov	r2, r0
 80153ac:	4b0c      	ldr	r3, [pc, #48]	; (80153e0 <__multadd+0x84>)
 80153ae:	480d      	ldr	r0, [pc, #52]	; (80153e4 <__multadd+0x88>)
 80153b0:	21ba      	movs	r1, #186	; 0xba
 80153b2:	f001 fcad 	bl	8016d10 <__assert_func>
 80153b6:	6922      	ldr	r2, [r4, #16]
 80153b8:	3202      	adds	r2, #2
 80153ba:	f104 010c 	add.w	r1, r4, #12
 80153be:	0092      	lsls	r2, r2, #2
 80153c0:	300c      	adds	r0, #12
 80153c2:	f7ff f912 	bl	80145ea <memcpy>
 80153c6:	4621      	mov	r1, r4
 80153c8:	4638      	mov	r0, r7
 80153ca:	f7ff ffa5 	bl	8015318 <_Bfree>
 80153ce:	4644      	mov	r4, r8
 80153d0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80153d4:	3501      	adds	r5, #1
 80153d6:	615e      	str	r6, [r3, #20]
 80153d8:	6125      	str	r5, [r4, #16]
 80153da:	4620      	mov	r0, r4
 80153dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80153e0:	08017d31 	.word	0x08017d31
 80153e4:	08017d42 	.word	0x08017d42

080153e8 <__s2b>:
 80153e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80153ec:	460c      	mov	r4, r1
 80153ee:	4615      	mov	r5, r2
 80153f0:	461f      	mov	r7, r3
 80153f2:	2209      	movs	r2, #9
 80153f4:	3308      	adds	r3, #8
 80153f6:	4606      	mov	r6, r0
 80153f8:	fb93 f3f2 	sdiv	r3, r3, r2
 80153fc:	2100      	movs	r1, #0
 80153fe:	2201      	movs	r2, #1
 8015400:	429a      	cmp	r2, r3
 8015402:	db09      	blt.n	8015418 <__s2b+0x30>
 8015404:	4630      	mov	r0, r6
 8015406:	f7ff ff47 	bl	8015298 <_Balloc>
 801540a:	b940      	cbnz	r0, 801541e <__s2b+0x36>
 801540c:	4602      	mov	r2, r0
 801540e:	4b19      	ldr	r3, [pc, #100]	; (8015474 <__s2b+0x8c>)
 8015410:	4819      	ldr	r0, [pc, #100]	; (8015478 <__s2b+0x90>)
 8015412:	21d3      	movs	r1, #211	; 0xd3
 8015414:	f001 fc7c 	bl	8016d10 <__assert_func>
 8015418:	0052      	lsls	r2, r2, #1
 801541a:	3101      	adds	r1, #1
 801541c:	e7f0      	b.n	8015400 <__s2b+0x18>
 801541e:	9b08      	ldr	r3, [sp, #32]
 8015420:	6143      	str	r3, [r0, #20]
 8015422:	2d09      	cmp	r5, #9
 8015424:	f04f 0301 	mov.w	r3, #1
 8015428:	6103      	str	r3, [r0, #16]
 801542a:	dd16      	ble.n	801545a <__s2b+0x72>
 801542c:	f104 0909 	add.w	r9, r4, #9
 8015430:	46c8      	mov	r8, r9
 8015432:	442c      	add	r4, r5
 8015434:	f818 3b01 	ldrb.w	r3, [r8], #1
 8015438:	4601      	mov	r1, r0
 801543a:	3b30      	subs	r3, #48	; 0x30
 801543c:	220a      	movs	r2, #10
 801543e:	4630      	mov	r0, r6
 8015440:	f7ff ff8c 	bl	801535c <__multadd>
 8015444:	45a0      	cmp	r8, r4
 8015446:	d1f5      	bne.n	8015434 <__s2b+0x4c>
 8015448:	f1a5 0408 	sub.w	r4, r5, #8
 801544c:	444c      	add	r4, r9
 801544e:	1b2d      	subs	r5, r5, r4
 8015450:	1963      	adds	r3, r4, r5
 8015452:	42bb      	cmp	r3, r7
 8015454:	db04      	blt.n	8015460 <__s2b+0x78>
 8015456:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801545a:	340a      	adds	r4, #10
 801545c:	2509      	movs	r5, #9
 801545e:	e7f6      	b.n	801544e <__s2b+0x66>
 8015460:	f814 3b01 	ldrb.w	r3, [r4], #1
 8015464:	4601      	mov	r1, r0
 8015466:	3b30      	subs	r3, #48	; 0x30
 8015468:	220a      	movs	r2, #10
 801546a:	4630      	mov	r0, r6
 801546c:	f7ff ff76 	bl	801535c <__multadd>
 8015470:	e7ee      	b.n	8015450 <__s2b+0x68>
 8015472:	bf00      	nop
 8015474:	08017d31 	.word	0x08017d31
 8015478:	08017d42 	.word	0x08017d42

0801547c <__hi0bits>:
 801547c:	0c03      	lsrs	r3, r0, #16
 801547e:	041b      	lsls	r3, r3, #16
 8015480:	b9d3      	cbnz	r3, 80154b8 <__hi0bits+0x3c>
 8015482:	0400      	lsls	r0, r0, #16
 8015484:	2310      	movs	r3, #16
 8015486:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801548a:	bf04      	itt	eq
 801548c:	0200      	lsleq	r0, r0, #8
 801548e:	3308      	addeq	r3, #8
 8015490:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8015494:	bf04      	itt	eq
 8015496:	0100      	lsleq	r0, r0, #4
 8015498:	3304      	addeq	r3, #4
 801549a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801549e:	bf04      	itt	eq
 80154a0:	0080      	lsleq	r0, r0, #2
 80154a2:	3302      	addeq	r3, #2
 80154a4:	2800      	cmp	r0, #0
 80154a6:	db05      	blt.n	80154b4 <__hi0bits+0x38>
 80154a8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80154ac:	f103 0301 	add.w	r3, r3, #1
 80154b0:	bf08      	it	eq
 80154b2:	2320      	moveq	r3, #32
 80154b4:	4618      	mov	r0, r3
 80154b6:	4770      	bx	lr
 80154b8:	2300      	movs	r3, #0
 80154ba:	e7e4      	b.n	8015486 <__hi0bits+0xa>

080154bc <__lo0bits>:
 80154bc:	6803      	ldr	r3, [r0, #0]
 80154be:	f013 0207 	ands.w	r2, r3, #7
 80154c2:	d00c      	beq.n	80154de <__lo0bits+0x22>
 80154c4:	07d9      	lsls	r1, r3, #31
 80154c6:	d422      	bmi.n	801550e <__lo0bits+0x52>
 80154c8:	079a      	lsls	r2, r3, #30
 80154ca:	bf49      	itett	mi
 80154cc:	085b      	lsrmi	r3, r3, #1
 80154ce:	089b      	lsrpl	r3, r3, #2
 80154d0:	6003      	strmi	r3, [r0, #0]
 80154d2:	2201      	movmi	r2, #1
 80154d4:	bf5c      	itt	pl
 80154d6:	6003      	strpl	r3, [r0, #0]
 80154d8:	2202      	movpl	r2, #2
 80154da:	4610      	mov	r0, r2
 80154dc:	4770      	bx	lr
 80154de:	b299      	uxth	r1, r3
 80154e0:	b909      	cbnz	r1, 80154e6 <__lo0bits+0x2a>
 80154e2:	0c1b      	lsrs	r3, r3, #16
 80154e4:	2210      	movs	r2, #16
 80154e6:	b2d9      	uxtb	r1, r3
 80154e8:	b909      	cbnz	r1, 80154ee <__lo0bits+0x32>
 80154ea:	3208      	adds	r2, #8
 80154ec:	0a1b      	lsrs	r3, r3, #8
 80154ee:	0719      	lsls	r1, r3, #28
 80154f0:	bf04      	itt	eq
 80154f2:	091b      	lsreq	r3, r3, #4
 80154f4:	3204      	addeq	r2, #4
 80154f6:	0799      	lsls	r1, r3, #30
 80154f8:	bf04      	itt	eq
 80154fa:	089b      	lsreq	r3, r3, #2
 80154fc:	3202      	addeq	r2, #2
 80154fe:	07d9      	lsls	r1, r3, #31
 8015500:	d403      	bmi.n	801550a <__lo0bits+0x4e>
 8015502:	085b      	lsrs	r3, r3, #1
 8015504:	f102 0201 	add.w	r2, r2, #1
 8015508:	d003      	beq.n	8015512 <__lo0bits+0x56>
 801550a:	6003      	str	r3, [r0, #0]
 801550c:	e7e5      	b.n	80154da <__lo0bits+0x1e>
 801550e:	2200      	movs	r2, #0
 8015510:	e7e3      	b.n	80154da <__lo0bits+0x1e>
 8015512:	2220      	movs	r2, #32
 8015514:	e7e1      	b.n	80154da <__lo0bits+0x1e>
	...

08015518 <__i2b>:
 8015518:	b510      	push	{r4, lr}
 801551a:	460c      	mov	r4, r1
 801551c:	2101      	movs	r1, #1
 801551e:	f7ff febb 	bl	8015298 <_Balloc>
 8015522:	4602      	mov	r2, r0
 8015524:	b928      	cbnz	r0, 8015532 <__i2b+0x1a>
 8015526:	4b05      	ldr	r3, [pc, #20]	; (801553c <__i2b+0x24>)
 8015528:	4805      	ldr	r0, [pc, #20]	; (8015540 <__i2b+0x28>)
 801552a:	f240 1145 	movw	r1, #325	; 0x145
 801552e:	f001 fbef 	bl	8016d10 <__assert_func>
 8015532:	2301      	movs	r3, #1
 8015534:	6144      	str	r4, [r0, #20]
 8015536:	6103      	str	r3, [r0, #16]
 8015538:	bd10      	pop	{r4, pc}
 801553a:	bf00      	nop
 801553c:	08017d31 	.word	0x08017d31
 8015540:	08017d42 	.word	0x08017d42

08015544 <__multiply>:
 8015544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015548:	4691      	mov	r9, r2
 801554a:	690a      	ldr	r2, [r1, #16]
 801554c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015550:	429a      	cmp	r2, r3
 8015552:	bfb8      	it	lt
 8015554:	460b      	movlt	r3, r1
 8015556:	460c      	mov	r4, r1
 8015558:	bfbc      	itt	lt
 801555a:	464c      	movlt	r4, r9
 801555c:	4699      	movlt	r9, r3
 801555e:	6927      	ldr	r7, [r4, #16]
 8015560:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8015564:	68a3      	ldr	r3, [r4, #8]
 8015566:	6861      	ldr	r1, [r4, #4]
 8015568:	eb07 060a 	add.w	r6, r7, sl
 801556c:	42b3      	cmp	r3, r6
 801556e:	b085      	sub	sp, #20
 8015570:	bfb8      	it	lt
 8015572:	3101      	addlt	r1, #1
 8015574:	f7ff fe90 	bl	8015298 <_Balloc>
 8015578:	b930      	cbnz	r0, 8015588 <__multiply+0x44>
 801557a:	4602      	mov	r2, r0
 801557c:	4b44      	ldr	r3, [pc, #272]	; (8015690 <__multiply+0x14c>)
 801557e:	4845      	ldr	r0, [pc, #276]	; (8015694 <__multiply+0x150>)
 8015580:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8015584:	f001 fbc4 	bl	8016d10 <__assert_func>
 8015588:	f100 0514 	add.w	r5, r0, #20
 801558c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8015590:	462b      	mov	r3, r5
 8015592:	2200      	movs	r2, #0
 8015594:	4543      	cmp	r3, r8
 8015596:	d321      	bcc.n	80155dc <__multiply+0x98>
 8015598:	f104 0314 	add.w	r3, r4, #20
 801559c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80155a0:	f109 0314 	add.w	r3, r9, #20
 80155a4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80155a8:	9202      	str	r2, [sp, #8]
 80155aa:	1b3a      	subs	r2, r7, r4
 80155ac:	3a15      	subs	r2, #21
 80155ae:	f022 0203 	bic.w	r2, r2, #3
 80155b2:	3204      	adds	r2, #4
 80155b4:	f104 0115 	add.w	r1, r4, #21
 80155b8:	428f      	cmp	r7, r1
 80155ba:	bf38      	it	cc
 80155bc:	2204      	movcc	r2, #4
 80155be:	9201      	str	r2, [sp, #4]
 80155c0:	9a02      	ldr	r2, [sp, #8]
 80155c2:	9303      	str	r3, [sp, #12]
 80155c4:	429a      	cmp	r2, r3
 80155c6:	d80c      	bhi.n	80155e2 <__multiply+0x9e>
 80155c8:	2e00      	cmp	r6, #0
 80155ca:	dd03      	ble.n	80155d4 <__multiply+0x90>
 80155cc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80155d0:	2b00      	cmp	r3, #0
 80155d2:	d05b      	beq.n	801568c <__multiply+0x148>
 80155d4:	6106      	str	r6, [r0, #16]
 80155d6:	b005      	add	sp, #20
 80155d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80155dc:	f843 2b04 	str.w	r2, [r3], #4
 80155e0:	e7d8      	b.n	8015594 <__multiply+0x50>
 80155e2:	f8b3 a000 	ldrh.w	sl, [r3]
 80155e6:	f1ba 0f00 	cmp.w	sl, #0
 80155ea:	d024      	beq.n	8015636 <__multiply+0xf2>
 80155ec:	f104 0e14 	add.w	lr, r4, #20
 80155f0:	46a9      	mov	r9, r5
 80155f2:	f04f 0c00 	mov.w	ip, #0
 80155f6:	f85e 2b04 	ldr.w	r2, [lr], #4
 80155fa:	f8d9 1000 	ldr.w	r1, [r9]
 80155fe:	fa1f fb82 	uxth.w	fp, r2
 8015602:	b289      	uxth	r1, r1
 8015604:	fb0a 110b 	mla	r1, sl, fp, r1
 8015608:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801560c:	f8d9 2000 	ldr.w	r2, [r9]
 8015610:	4461      	add	r1, ip
 8015612:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8015616:	fb0a c20b 	mla	r2, sl, fp, ip
 801561a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801561e:	b289      	uxth	r1, r1
 8015620:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8015624:	4577      	cmp	r7, lr
 8015626:	f849 1b04 	str.w	r1, [r9], #4
 801562a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801562e:	d8e2      	bhi.n	80155f6 <__multiply+0xb2>
 8015630:	9a01      	ldr	r2, [sp, #4]
 8015632:	f845 c002 	str.w	ip, [r5, r2]
 8015636:	9a03      	ldr	r2, [sp, #12]
 8015638:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801563c:	3304      	adds	r3, #4
 801563e:	f1b9 0f00 	cmp.w	r9, #0
 8015642:	d021      	beq.n	8015688 <__multiply+0x144>
 8015644:	6829      	ldr	r1, [r5, #0]
 8015646:	f104 0c14 	add.w	ip, r4, #20
 801564a:	46ae      	mov	lr, r5
 801564c:	f04f 0a00 	mov.w	sl, #0
 8015650:	f8bc b000 	ldrh.w	fp, [ip]
 8015654:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8015658:	fb09 220b 	mla	r2, r9, fp, r2
 801565c:	4452      	add	r2, sl
 801565e:	b289      	uxth	r1, r1
 8015660:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8015664:	f84e 1b04 	str.w	r1, [lr], #4
 8015668:	f85c 1b04 	ldr.w	r1, [ip], #4
 801566c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8015670:	f8be 1000 	ldrh.w	r1, [lr]
 8015674:	fb09 110a 	mla	r1, r9, sl, r1
 8015678:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 801567c:	4567      	cmp	r7, ip
 801567e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8015682:	d8e5      	bhi.n	8015650 <__multiply+0x10c>
 8015684:	9a01      	ldr	r2, [sp, #4]
 8015686:	50a9      	str	r1, [r5, r2]
 8015688:	3504      	adds	r5, #4
 801568a:	e799      	b.n	80155c0 <__multiply+0x7c>
 801568c:	3e01      	subs	r6, #1
 801568e:	e79b      	b.n	80155c8 <__multiply+0x84>
 8015690:	08017d31 	.word	0x08017d31
 8015694:	08017d42 	.word	0x08017d42

08015698 <__pow5mult>:
 8015698:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801569c:	4615      	mov	r5, r2
 801569e:	f012 0203 	ands.w	r2, r2, #3
 80156a2:	4606      	mov	r6, r0
 80156a4:	460f      	mov	r7, r1
 80156a6:	d007      	beq.n	80156b8 <__pow5mult+0x20>
 80156a8:	4c25      	ldr	r4, [pc, #148]	; (8015740 <__pow5mult+0xa8>)
 80156aa:	3a01      	subs	r2, #1
 80156ac:	2300      	movs	r3, #0
 80156ae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80156b2:	f7ff fe53 	bl	801535c <__multadd>
 80156b6:	4607      	mov	r7, r0
 80156b8:	10ad      	asrs	r5, r5, #2
 80156ba:	d03d      	beq.n	8015738 <__pow5mult+0xa0>
 80156bc:	69f4      	ldr	r4, [r6, #28]
 80156be:	b97c      	cbnz	r4, 80156e0 <__pow5mult+0x48>
 80156c0:	2010      	movs	r0, #16
 80156c2:	f7fd fe57 	bl	8013374 <malloc>
 80156c6:	4602      	mov	r2, r0
 80156c8:	61f0      	str	r0, [r6, #28]
 80156ca:	b928      	cbnz	r0, 80156d8 <__pow5mult+0x40>
 80156cc:	4b1d      	ldr	r3, [pc, #116]	; (8015744 <__pow5mult+0xac>)
 80156ce:	481e      	ldr	r0, [pc, #120]	; (8015748 <__pow5mult+0xb0>)
 80156d0:	f240 11b3 	movw	r1, #435	; 0x1b3
 80156d4:	f001 fb1c 	bl	8016d10 <__assert_func>
 80156d8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80156dc:	6004      	str	r4, [r0, #0]
 80156de:	60c4      	str	r4, [r0, #12]
 80156e0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80156e4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80156e8:	b94c      	cbnz	r4, 80156fe <__pow5mult+0x66>
 80156ea:	f240 2171 	movw	r1, #625	; 0x271
 80156ee:	4630      	mov	r0, r6
 80156f0:	f7ff ff12 	bl	8015518 <__i2b>
 80156f4:	2300      	movs	r3, #0
 80156f6:	f8c8 0008 	str.w	r0, [r8, #8]
 80156fa:	4604      	mov	r4, r0
 80156fc:	6003      	str	r3, [r0, #0]
 80156fe:	f04f 0900 	mov.w	r9, #0
 8015702:	07eb      	lsls	r3, r5, #31
 8015704:	d50a      	bpl.n	801571c <__pow5mult+0x84>
 8015706:	4639      	mov	r1, r7
 8015708:	4622      	mov	r2, r4
 801570a:	4630      	mov	r0, r6
 801570c:	f7ff ff1a 	bl	8015544 <__multiply>
 8015710:	4639      	mov	r1, r7
 8015712:	4680      	mov	r8, r0
 8015714:	4630      	mov	r0, r6
 8015716:	f7ff fdff 	bl	8015318 <_Bfree>
 801571a:	4647      	mov	r7, r8
 801571c:	106d      	asrs	r5, r5, #1
 801571e:	d00b      	beq.n	8015738 <__pow5mult+0xa0>
 8015720:	6820      	ldr	r0, [r4, #0]
 8015722:	b938      	cbnz	r0, 8015734 <__pow5mult+0x9c>
 8015724:	4622      	mov	r2, r4
 8015726:	4621      	mov	r1, r4
 8015728:	4630      	mov	r0, r6
 801572a:	f7ff ff0b 	bl	8015544 <__multiply>
 801572e:	6020      	str	r0, [r4, #0]
 8015730:	f8c0 9000 	str.w	r9, [r0]
 8015734:	4604      	mov	r4, r0
 8015736:	e7e4      	b.n	8015702 <__pow5mult+0x6a>
 8015738:	4638      	mov	r0, r7
 801573a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801573e:	bf00      	nop
 8015740:	08017e90 	.word	0x08017e90
 8015744:	08017cc2 	.word	0x08017cc2
 8015748:	08017d42 	.word	0x08017d42

0801574c <__lshift>:
 801574c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015750:	460c      	mov	r4, r1
 8015752:	6849      	ldr	r1, [r1, #4]
 8015754:	6923      	ldr	r3, [r4, #16]
 8015756:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801575a:	68a3      	ldr	r3, [r4, #8]
 801575c:	4607      	mov	r7, r0
 801575e:	4691      	mov	r9, r2
 8015760:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8015764:	f108 0601 	add.w	r6, r8, #1
 8015768:	42b3      	cmp	r3, r6
 801576a:	db0b      	blt.n	8015784 <__lshift+0x38>
 801576c:	4638      	mov	r0, r7
 801576e:	f7ff fd93 	bl	8015298 <_Balloc>
 8015772:	4605      	mov	r5, r0
 8015774:	b948      	cbnz	r0, 801578a <__lshift+0x3e>
 8015776:	4602      	mov	r2, r0
 8015778:	4b28      	ldr	r3, [pc, #160]	; (801581c <__lshift+0xd0>)
 801577a:	4829      	ldr	r0, [pc, #164]	; (8015820 <__lshift+0xd4>)
 801577c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8015780:	f001 fac6 	bl	8016d10 <__assert_func>
 8015784:	3101      	adds	r1, #1
 8015786:	005b      	lsls	r3, r3, #1
 8015788:	e7ee      	b.n	8015768 <__lshift+0x1c>
 801578a:	2300      	movs	r3, #0
 801578c:	f100 0114 	add.w	r1, r0, #20
 8015790:	f100 0210 	add.w	r2, r0, #16
 8015794:	4618      	mov	r0, r3
 8015796:	4553      	cmp	r3, sl
 8015798:	db33      	blt.n	8015802 <__lshift+0xb6>
 801579a:	6920      	ldr	r0, [r4, #16]
 801579c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80157a0:	f104 0314 	add.w	r3, r4, #20
 80157a4:	f019 091f 	ands.w	r9, r9, #31
 80157a8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80157ac:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80157b0:	d02b      	beq.n	801580a <__lshift+0xbe>
 80157b2:	f1c9 0e20 	rsb	lr, r9, #32
 80157b6:	468a      	mov	sl, r1
 80157b8:	2200      	movs	r2, #0
 80157ba:	6818      	ldr	r0, [r3, #0]
 80157bc:	fa00 f009 	lsl.w	r0, r0, r9
 80157c0:	4310      	orrs	r0, r2
 80157c2:	f84a 0b04 	str.w	r0, [sl], #4
 80157c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80157ca:	459c      	cmp	ip, r3
 80157cc:	fa22 f20e 	lsr.w	r2, r2, lr
 80157d0:	d8f3      	bhi.n	80157ba <__lshift+0x6e>
 80157d2:	ebac 0304 	sub.w	r3, ip, r4
 80157d6:	3b15      	subs	r3, #21
 80157d8:	f023 0303 	bic.w	r3, r3, #3
 80157dc:	3304      	adds	r3, #4
 80157de:	f104 0015 	add.w	r0, r4, #21
 80157e2:	4584      	cmp	ip, r0
 80157e4:	bf38      	it	cc
 80157e6:	2304      	movcc	r3, #4
 80157e8:	50ca      	str	r2, [r1, r3]
 80157ea:	b10a      	cbz	r2, 80157f0 <__lshift+0xa4>
 80157ec:	f108 0602 	add.w	r6, r8, #2
 80157f0:	3e01      	subs	r6, #1
 80157f2:	4638      	mov	r0, r7
 80157f4:	612e      	str	r6, [r5, #16]
 80157f6:	4621      	mov	r1, r4
 80157f8:	f7ff fd8e 	bl	8015318 <_Bfree>
 80157fc:	4628      	mov	r0, r5
 80157fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015802:	f842 0f04 	str.w	r0, [r2, #4]!
 8015806:	3301      	adds	r3, #1
 8015808:	e7c5      	b.n	8015796 <__lshift+0x4a>
 801580a:	3904      	subs	r1, #4
 801580c:	f853 2b04 	ldr.w	r2, [r3], #4
 8015810:	f841 2f04 	str.w	r2, [r1, #4]!
 8015814:	459c      	cmp	ip, r3
 8015816:	d8f9      	bhi.n	801580c <__lshift+0xc0>
 8015818:	e7ea      	b.n	80157f0 <__lshift+0xa4>
 801581a:	bf00      	nop
 801581c:	08017d31 	.word	0x08017d31
 8015820:	08017d42 	.word	0x08017d42

08015824 <__mcmp>:
 8015824:	b530      	push	{r4, r5, lr}
 8015826:	6902      	ldr	r2, [r0, #16]
 8015828:	690c      	ldr	r4, [r1, #16]
 801582a:	1b12      	subs	r2, r2, r4
 801582c:	d10e      	bne.n	801584c <__mcmp+0x28>
 801582e:	f100 0314 	add.w	r3, r0, #20
 8015832:	3114      	adds	r1, #20
 8015834:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8015838:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801583c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8015840:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8015844:	42a5      	cmp	r5, r4
 8015846:	d003      	beq.n	8015850 <__mcmp+0x2c>
 8015848:	d305      	bcc.n	8015856 <__mcmp+0x32>
 801584a:	2201      	movs	r2, #1
 801584c:	4610      	mov	r0, r2
 801584e:	bd30      	pop	{r4, r5, pc}
 8015850:	4283      	cmp	r3, r0
 8015852:	d3f3      	bcc.n	801583c <__mcmp+0x18>
 8015854:	e7fa      	b.n	801584c <__mcmp+0x28>
 8015856:	f04f 32ff 	mov.w	r2, #4294967295
 801585a:	e7f7      	b.n	801584c <__mcmp+0x28>

0801585c <__mdiff>:
 801585c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015860:	460c      	mov	r4, r1
 8015862:	4606      	mov	r6, r0
 8015864:	4611      	mov	r1, r2
 8015866:	4620      	mov	r0, r4
 8015868:	4690      	mov	r8, r2
 801586a:	f7ff ffdb 	bl	8015824 <__mcmp>
 801586e:	1e05      	subs	r5, r0, #0
 8015870:	d110      	bne.n	8015894 <__mdiff+0x38>
 8015872:	4629      	mov	r1, r5
 8015874:	4630      	mov	r0, r6
 8015876:	f7ff fd0f 	bl	8015298 <_Balloc>
 801587a:	b930      	cbnz	r0, 801588a <__mdiff+0x2e>
 801587c:	4b3a      	ldr	r3, [pc, #232]	; (8015968 <__mdiff+0x10c>)
 801587e:	4602      	mov	r2, r0
 8015880:	f240 2137 	movw	r1, #567	; 0x237
 8015884:	4839      	ldr	r0, [pc, #228]	; (801596c <__mdiff+0x110>)
 8015886:	f001 fa43 	bl	8016d10 <__assert_func>
 801588a:	2301      	movs	r3, #1
 801588c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8015890:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015894:	bfa4      	itt	ge
 8015896:	4643      	movge	r3, r8
 8015898:	46a0      	movge	r8, r4
 801589a:	4630      	mov	r0, r6
 801589c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80158a0:	bfa6      	itte	ge
 80158a2:	461c      	movge	r4, r3
 80158a4:	2500      	movge	r5, #0
 80158a6:	2501      	movlt	r5, #1
 80158a8:	f7ff fcf6 	bl	8015298 <_Balloc>
 80158ac:	b920      	cbnz	r0, 80158b8 <__mdiff+0x5c>
 80158ae:	4b2e      	ldr	r3, [pc, #184]	; (8015968 <__mdiff+0x10c>)
 80158b0:	4602      	mov	r2, r0
 80158b2:	f240 2145 	movw	r1, #581	; 0x245
 80158b6:	e7e5      	b.n	8015884 <__mdiff+0x28>
 80158b8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80158bc:	6926      	ldr	r6, [r4, #16]
 80158be:	60c5      	str	r5, [r0, #12]
 80158c0:	f104 0914 	add.w	r9, r4, #20
 80158c4:	f108 0514 	add.w	r5, r8, #20
 80158c8:	f100 0e14 	add.w	lr, r0, #20
 80158cc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80158d0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80158d4:	f108 0210 	add.w	r2, r8, #16
 80158d8:	46f2      	mov	sl, lr
 80158da:	2100      	movs	r1, #0
 80158dc:	f859 3b04 	ldr.w	r3, [r9], #4
 80158e0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80158e4:	fa11 f88b 	uxtah	r8, r1, fp
 80158e8:	b299      	uxth	r1, r3
 80158ea:	0c1b      	lsrs	r3, r3, #16
 80158ec:	eba8 0801 	sub.w	r8, r8, r1
 80158f0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80158f4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80158f8:	fa1f f888 	uxth.w	r8, r8
 80158fc:	1419      	asrs	r1, r3, #16
 80158fe:	454e      	cmp	r6, r9
 8015900:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8015904:	f84a 3b04 	str.w	r3, [sl], #4
 8015908:	d8e8      	bhi.n	80158dc <__mdiff+0x80>
 801590a:	1b33      	subs	r3, r6, r4
 801590c:	3b15      	subs	r3, #21
 801590e:	f023 0303 	bic.w	r3, r3, #3
 8015912:	3304      	adds	r3, #4
 8015914:	3415      	adds	r4, #21
 8015916:	42a6      	cmp	r6, r4
 8015918:	bf38      	it	cc
 801591a:	2304      	movcc	r3, #4
 801591c:	441d      	add	r5, r3
 801591e:	4473      	add	r3, lr
 8015920:	469e      	mov	lr, r3
 8015922:	462e      	mov	r6, r5
 8015924:	4566      	cmp	r6, ip
 8015926:	d30e      	bcc.n	8015946 <__mdiff+0xea>
 8015928:	f10c 0203 	add.w	r2, ip, #3
 801592c:	1b52      	subs	r2, r2, r5
 801592e:	f022 0203 	bic.w	r2, r2, #3
 8015932:	3d03      	subs	r5, #3
 8015934:	45ac      	cmp	ip, r5
 8015936:	bf38      	it	cc
 8015938:	2200      	movcc	r2, #0
 801593a:	4413      	add	r3, r2
 801593c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8015940:	b17a      	cbz	r2, 8015962 <__mdiff+0x106>
 8015942:	6107      	str	r7, [r0, #16]
 8015944:	e7a4      	b.n	8015890 <__mdiff+0x34>
 8015946:	f856 8b04 	ldr.w	r8, [r6], #4
 801594a:	fa11 f288 	uxtah	r2, r1, r8
 801594e:	1414      	asrs	r4, r2, #16
 8015950:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8015954:	b292      	uxth	r2, r2
 8015956:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801595a:	f84e 2b04 	str.w	r2, [lr], #4
 801595e:	1421      	asrs	r1, r4, #16
 8015960:	e7e0      	b.n	8015924 <__mdiff+0xc8>
 8015962:	3f01      	subs	r7, #1
 8015964:	e7ea      	b.n	801593c <__mdiff+0xe0>
 8015966:	bf00      	nop
 8015968:	08017d31 	.word	0x08017d31
 801596c:	08017d42 	.word	0x08017d42

08015970 <__ulp>:
 8015970:	b082      	sub	sp, #8
 8015972:	ed8d 0b00 	vstr	d0, [sp]
 8015976:	9a01      	ldr	r2, [sp, #4]
 8015978:	4b0f      	ldr	r3, [pc, #60]	; (80159b8 <__ulp+0x48>)
 801597a:	4013      	ands	r3, r2
 801597c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8015980:	2b00      	cmp	r3, #0
 8015982:	dc08      	bgt.n	8015996 <__ulp+0x26>
 8015984:	425b      	negs	r3, r3
 8015986:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 801598a:	ea4f 5223 	mov.w	r2, r3, asr #20
 801598e:	da04      	bge.n	801599a <__ulp+0x2a>
 8015990:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8015994:	4113      	asrs	r3, r2
 8015996:	2200      	movs	r2, #0
 8015998:	e008      	b.n	80159ac <__ulp+0x3c>
 801599a:	f1a2 0314 	sub.w	r3, r2, #20
 801599e:	2b1e      	cmp	r3, #30
 80159a0:	bfda      	itte	le
 80159a2:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80159a6:	40da      	lsrle	r2, r3
 80159a8:	2201      	movgt	r2, #1
 80159aa:	2300      	movs	r3, #0
 80159ac:	4619      	mov	r1, r3
 80159ae:	4610      	mov	r0, r2
 80159b0:	ec41 0b10 	vmov	d0, r0, r1
 80159b4:	b002      	add	sp, #8
 80159b6:	4770      	bx	lr
 80159b8:	7ff00000 	.word	0x7ff00000

080159bc <__b2d>:
 80159bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80159c0:	6906      	ldr	r6, [r0, #16]
 80159c2:	f100 0814 	add.w	r8, r0, #20
 80159c6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80159ca:	1f37      	subs	r7, r6, #4
 80159cc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80159d0:	4610      	mov	r0, r2
 80159d2:	f7ff fd53 	bl	801547c <__hi0bits>
 80159d6:	f1c0 0320 	rsb	r3, r0, #32
 80159da:	280a      	cmp	r0, #10
 80159dc:	600b      	str	r3, [r1, #0]
 80159de:	491b      	ldr	r1, [pc, #108]	; (8015a4c <__b2d+0x90>)
 80159e0:	dc15      	bgt.n	8015a0e <__b2d+0x52>
 80159e2:	f1c0 0c0b 	rsb	ip, r0, #11
 80159e6:	fa22 f30c 	lsr.w	r3, r2, ip
 80159ea:	45b8      	cmp	r8, r7
 80159ec:	ea43 0501 	orr.w	r5, r3, r1
 80159f0:	bf34      	ite	cc
 80159f2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80159f6:	2300      	movcs	r3, #0
 80159f8:	3015      	adds	r0, #21
 80159fa:	fa02 f000 	lsl.w	r0, r2, r0
 80159fe:	fa23 f30c 	lsr.w	r3, r3, ip
 8015a02:	4303      	orrs	r3, r0
 8015a04:	461c      	mov	r4, r3
 8015a06:	ec45 4b10 	vmov	d0, r4, r5
 8015a0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015a0e:	45b8      	cmp	r8, r7
 8015a10:	bf3a      	itte	cc
 8015a12:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8015a16:	f1a6 0708 	subcc.w	r7, r6, #8
 8015a1a:	2300      	movcs	r3, #0
 8015a1c:	380b      	subs	r0, #11
 8015a1e:	d012      	beq.n	8015a46 <__b2d+0x8a>
 8015a20:	f1c0 0120 	rsb	r1, r0, #32
 8015a24:	fa23 f401 	lsr.w	r4, r3, r1
 8015a28:	4082      	lsls	r2, r0
 8015a2a:	4322      	orrs	r2, r4
 8015a2c:	4547      	cmp	r7, r8
 8015a2e:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8015a32:	bf8c      	ite	hi
 8015a34:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8015a38:	2200      	movls	r2, #0
 8015a3a:	4083      	lsls	r3, r0
 8015a3c:	40ca      	lsrs	r2, r1
 8015a3e:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8015a42:	4313      	orrs	r3, r2
 8015a44:	e7de      	b.n	8015a04 <__b2d+0x48>
 8015a46:	ea42 0501 	orr.w	r5, r2, r1
 8015a4a:	e7db      	b.n	8015a04 <__b2d+0x48>
 8015a4c:	3ff00000 	.word	0x3ff00000

08015a50 <__d2b>:
 8015a50:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8015a54:	460f      	mov	r7, r1
 8015a56:	2101      	movs	r1, #1
 8015a58:	ec59 8b10 	vmov	r8, r9, d0
 8015a5c:	4616      	mov	r6, r2
 8015a5e:	f7ff fc1b 	bl	8015298 <_Balloc>
 8015a62:	4604      	mov	r4, r0
 8015a64:	b930      	cbnz	r0, 8015a74 <__d2b+0x24>
 8015a66:	4602      	mov	r2, r0
 8015a68:	4b24      	ldr	r3, [pc, #144]	; (8015afc <__d2b+0xac>)
 8015a6a:	4825      	ldr	r0, [pc, #148]	; (8015b00 <__d2b+0xb0>)
 8015a6c:	f240 310f 	movw	r1, #783	; 0x30f
 8015a70:	f001 f94e 	bl	8016d10 <__assert_func>
 8015a74:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8015a78:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8015a7c:	bb2d      	cbnz	r5, 8015aca <__d2b+0x7a>
 8015a7e:	9301      	str	r3, [sp, #4]
 8015a80:	f1b8 0300 	subs.w	r3, r8, #0
 8015a84:	d026      	beq.n	8015ad4 <__d2b+0x84>
 8015a86:	4668      	mov	r0, sp
 8015a88:	9300      	str	r3, [sp, #0]
 8015a8a:	f7ff fd17 	bl	80154bc <__lo0bits>
 8015a8e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8015a92:	b1e8      	cbz	r0, 8015ad0 <__d2b+0x80>
 8015a94:	f1c0 0320 	rsb	r3, r0, #32
 8015a98:	fa02 f303 	lsl.w	r3, r2, r3
 8015a9c:	430b      	orrs	r3, r1
 8015a9e:	40c2      	lsrs	r2, r0
 8015aa0:	6163      	str	r3, [r4, #20]
 8015aa2:	9201      	str	r2, [sp, #4]
 8015aa4:	9b01      	ldr	r3, [sp, #4]
 8015aa6:	61a3      	str	r3, [r4, #24]
 8015aa8:	2b00      	cmp	r3, #0
 8015aaa:	bf14      	ite	ne
 8015aac:	2202      	movne	r2, #2
 8015aae:	2201      	moveq	r2, #1
 8015ab0:	6122      	str	r2, [r4, #16]
 8015ab2:	b1bd      	cbz	r5, 8015ae4 <__d2b+0x94>
 8015ab4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8015ab8:	4405      	add	r5, r0
 8015aba:	603d      	str	r5, [r7, #0]
 8015abc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8015ac0:	6030      	str	r0, [r6, #0]
 8015ac2:	4620      	mov	r0, r4
 8015ac4:	b003      	add	sp, #12
 8015ac6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015aca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8015ace:	e7d6      	b.n	8015a7e <__d2b+0x2e>
 8015ad0:	6161      	str	r1, [r4, #20]
 8015ad2:	e7e7      	b.n	8015aa4 <__d2b+0x54>
 8015ad4:	a801      	add	r0, sp, #4
 8015ad6:	f7ff fcf1 	bl	80154bc <__lo0bits>
 8015ada:	9b01      	ldr	r3, [sp, #4]
 8015adc:	6163      	str	r3, [r4, #20]
 8015ade:	3020      	adds	r0, #32
 8015ae0:	2201      	movs	r2, #1
 8015ae2:	e7e5      	b.n	8015ab0 <__d2b+0x60>
 8015ae4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8015ae8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8015aec:	6038      	str	r0, [r7, #0]
 8015aee:	6918      	ldr	r0, [r3, #16]
 8015af0:	f7ff fcc4 	bl	801547c <__hi0bits>
 8015af4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8015af8:	e7e2      	b.n	8015ac0 <__d2b+0x70>
 8015afa:	bf00      	nop
 8015afc:	08017d31 	.word	0x08017d31
 8015b00:	08017d42 	.word	0x08017d42

08015b04 <__ratio>:
 8015b04:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b08:	4688      	mov	r8, r1
 8015b0a:	4669      	mov	r1, sp
 8015b0c:	4681      	mov	r9, r0
 8015b0e:	f7ff ff55 	bl	80159bc <__b2d>
 8015b12:	a901      	add	r1, sp, #4
 8015b14:	4640      	mov	r0, r8
 8015b16:	ec55 4b10 	vmov	r4, r5, d0
 8015b1a:	ee10 aa10 	vmov	sl, s0
 8015b1e:	f7ff ff4d 	bl	80159bc <__b2d>
 8015b22:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8015b26:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8015b2a:	1ad2      	subs	r2, r2, r3
 8015b2c:	e9dd 3100 	ldrd	r3, r1, [sp]
 8015b30:	1a5b      	subs	r3, r3, r1
 8015b32:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8015b36:	ec57 6b10 	vmov	r6, r7, d0
 8015b3a:	2b00      	cmp	r3, #0
 8015b3c:	bfd6      	itet	le
 8015b3e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8015b42:	462a      	movgt	r2, r5
 8015b44:	463a      	movle	r2, r7
 8015b46:	46ab      	mov	fp, r5
 8015b48:	bfd6      	itet	le
 8015b4a:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 8015b4e:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8015b52:	ee00 3a90 	vmovle	s1, r3
 8015b56:	ec4b ab17 	vmov	d7, sl, fp
 8015b5a:	ee87 0b00 	vdiv.f64	d0, d7, d0
 8015b5e:	b003      	add	sp, #12
 8015b60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015b64 <__copybits>:
 8015b64:	3901      	subs	r1, #1
 8015b66:	b570      	push	{r4, r5, r6, lr}
 8015b68:	1149      	asrs	r1, r1, #5
 8015b6a:	6914      	ldr	r4, [r2, #16]
 8015b6c:	3101      	adds	r1, #1
 8015b6e:	f102 0314 	add.w	r3, r2, #20
 8015b72:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8015b76:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8015b7a:	1f05      	subs	r5, r0, #4
 8015b7c:	42a3      	cmp	r3, r4
 8015b7e:	d30c      	bcc.n	8015b9a <__copybits+0x36>
 8015b80:	1aa3      	subs	r3, r4, r2
 8015b82:	3b11      	subs	r3, #17
 8015b84:	f023 0303 	bic.w	r3, r3, #3
 8015b88:	3211      	adds	r2, #17
 8015b8a:	42a2      	cmp	r2, r4
 8015b8c:	bf88      	it	hi
 8015b8e:	2300      	movhi	r3, #0
 8015b90:	4418      	add	r0, r3
 8015b92:	2300      	movs	r3, #0
 8015b94:	4288      	cmp	r0, r1
 8015b96:	d305      	bcc.n	8015ba4 <__copybits+0x40>
 8015b98:	bd70      	pop	{r4, r5, r6, pc}
 8015b9a:	f853 6b04 	ldr.w	r6, [r3], #4
 8015b9e:	f845 6f04 	str.w	r6, [r5, #4]!
 8015ba2:	e7eb      	b.n	8015b7c <__copybits+0x18>
 8015ba4:	f840 3b04 	str.w	r3, [r0], #4
 8015ba8:	e7f4      	b.n	8015b94 <__copybits+0x30>

08015baa <__any_on>:
 8015baa:	f100 0214 	add.w	r2, r0, #20
 8015bae:	6900      	ldr	r0, [r0, #16]
 8015bb0:	114b      	asrs	r3, r1, #5
 8015bb2:	4298      	cmp	r0, r3
 8015bb4:	b510      	push	{r4, lr}
 8015bb6:	db11      	blt.n	8015bdc <__any_on+0x32>
 8015bb8:	dd0a      	ble.n	8015bd0 <__any_on+0x26>
 8015bba:	f011 011f 	ands.w	r1, r1, #31
 8015bbe:	d007      	beq.n	8015bd0 <__any_on+0x26>
 8015bc0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8015bc4:	fa24 f001 	lsr.w	r0, r4, r1
 8015bc8:	fa00 f101 	lsl.w	r1, r0, r1
 8015bcc:	428c      	cmp	r4, r1
 8015bce:	d10b      	bne.n	8015be8 <__any_on+0x3e>
 8015bd0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8015bd4:	4293      	cmp	r3, r2
 8015bd6:	d803      	bhi.n	8015be0 <__any_on+0x36>
 8015bd8:	2000      	movs	r0, #0
 8015bda:	bd10      	pop	{r4, pc}
 8015bdc:	4603      	mov	r3, r0
 8015bde:	e7f7      	b.n	8015bd0 <__any_on+0x26>
 8015be0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8015be4:	2900      	cmp	r1, #0
 8015be6:	d0f5      	beq.n	8015bd4 <__any_on+0x2a>
 8015be8:	2001      	movs	r0, #1
 8015bea:	e7f6      	b.n	8015bda <__any_on+0x30>

08015bec <sulp>:
 8015bec:	b570      	push	{r4, r5, r6, lr}
 8015bee:	4604      	mov	r4, r0
 8015bf0:	460d      	mov	r5, r1
 8015bf2:	4616      	mov	r6, r2
 8015bf4:	ec45 4b10 	vmov	d0, r4, r5
 8015bf8:	f7ff feba 	bl	8015970 <__ulp>
 8015bfc:	b17e      	cbz	r6, 8015c1e <sulp+0x32>
 8015bfe:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8015c02:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8015c06:	2b00      	cmp	r3, #0
 8015c08:	dd09      	ble.n	8015c1e <sulp+0x32>
 8015c0a:	051b      	lsls	r3, r3, #20
 8015c0c:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8015c10:	2000      	movs	r0, #0
 8015c12:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 8015c16:	ec41 0b17 	vmov	d7, r0, r1
 8015c1a:	ee20 0b07 	vmul.f64	d0, d0, d7
 8015c1e:	bd70      	pop	{r4, r5, r6, pc}

08015c20 <_strtod_l>:
 8015c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c24:	ed2d 8b0e 	vpush	{d8-d14}
 8015c28:	b097      	sub	sp, #92	; 0x5c
 8015c2a:	4604      	mov	r4, r0
 8015c2c:	920d      	str	r2, [sp, #52]	; 0x34
 8015c2e:	2200      	movs	r2, #0
 8015c30:	9212      	str	r2, [sp, #72]	; 0x48
 8015c32:	468a      	mov	sl, r1
 8015c34:	f04f 0800 	mov.w	r8, #0
 8015c38:	f04f 0900 	mov.w	r9, #0
 8015c3c:	460a      	mov	r2, r1
 8015c3e:	9211      	str	r2, [sp, #68]	; 0x44
 8015c40:	7811      	ldrb	r1, [r2, #0]
 8015c42:	292b      	cmp	r1, #43	; 0x2b
 8015c44:	d04c      	beq.n	8015ce0 <_strtod_l+0xc0>
 8015c46:	d839      	bhi.n	8015cbc <_strtod_l+0x9c>
 8015c48:	290d      	cmp	r1, #13
 8015c4a:	d833      	bhi.n	8015cb4 <_strtod_l+0x94>
 8015c4c:	2908      	cmp	r1, #8
 8015c4e:	d833      	bhi.n	8015cb8 <_strtod_l+0x98>
 8015c50:	2900      	cmp	r1, #0
 8015c52:	d03c      	beq.n	8015cce <_strtod_l+0xae>
 8015c54:	2200      	movs	r2, #0
 8015c56:	9208      	str	r2, [sp, #32]
 8015c58:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8015c5a:	7832      	ldrb	r2, [r6, #0]
 8015c5c:	2a30      	cmp	r2, #48	; 0x30
 8015c5e:	f040 80b8 	bne.w	8015dd2 <_strtod_l+0x1b2>
 8015c62:	7872      	ldrb	r2, [r6, #1]
 8015c64:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8015c68:	2a58      	cmp	r2, #88	; 0x58
 8015c6a:	d170      	bne.n	8015d4e <_strtod_l+0x12e>
 8015c6c:	9302      	str	r3, [sp, #8]
 8015c6e:	9b08      	ldr	r3, [sp, #32]
 8015c70:	9301      	str	r3, [sp, #4]
 8015c72:	ab12      	add	r3, sp, #72	; 0x48
 8015c74:	9300      	str	r3, [sp, #0]
 8015c76:	4a91      	ldr	r2, [pc, #580]	; (8015ebc <_strtod_l+0x29c>)
 8015c78:	ab13      	add	r3, sp, #76	; 0x4c
 8015c7a:	a911      	add	r1, sp, #68	; 0x44
 8015c7c:	4620      	mov	r0, r4
 8015c7e:	f001 f8e3 	bl	8016e48 <__gethex>
 8015c82:	f010 070f 	ands.w	r7, r0, #15
 8015c86:	4605      	mov	r5, r0
 8015c88:	d005      	beq.n	8015c96 <_strtod_l+0x76>
 8015c8a:	2f06      	cmp	r7, #6
 8015c8c:	d12a      	bne.n	8015ce4 <_strtod_l+0xc4>
 8015c8e:	3601      	adds	r6, #1
 8015c90:	2300      	movs	r3, #0
 8015c92:	9611      	str	r6, [sp, #68]	; 0x44
 8015c94:	9308      	str	r3, [sp, #32]
 8015c96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015c98:	2b00      	cmp	r3, #0
 8015c9a:	f040 8555 	bne.w	8016748 <_strtod_l+0xb28>
 8015c9e:	9b08      	ldr	r3, [sp, #32]
 8015ca0:	ec49 8b10 	vmov	d0, r8, r9
 8015ca4:	b1cb      	cbz	r3, 8015cda <_strtod_l+0xba>
 8015ca6:	eeb1 0b40 	vneg.f64	d0, d0
 8015caa:	b017      	add	sp, #92	; 0x5c
 8015cac:	ecbd 8b0e 	vpop	{d8-d14}
 8015cb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015cb4:	2920      	cmp	r1, #32
 8015cb6:	d1cd      	bne.n	8015c54 <_strtod_l+0x34>
 8015cb8:	3201      	adds	r2, #1
 8015cba:	e7c0      	b.n	8015c3e <_strtod_l+0x1e>
 8015cbc:	292d      	cmp	r1, #45	; 0x2d
 8015cbe:	d1c9      	bne.n	8015c54 <_strtod_l+0x34>
 8015cc0:	2101      	movs	r1, #1
 8015cc2:	9108      	str	r1, [sp, #32]
 8015cc4:	1c51      	adds	r1, r2, #1
 8015cc6:	9111      	str	r1, [sp, #68]	; 0x44
 8015cc8:	7852      	ldrb	r2, [r2, #1]
 8015cca:	2a00      	cmp	r2, #0
 8015ccc:	d1c4      	bne.n	8015c58 <_strtod_l+0x38>
 8015cce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015cd0:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 8015cd4:	2b00      	cmp	r3, #0
 8015cd6:	f040 8535 	bne.w	8016744 <_strtod_l+0xb24>
 8015cda:	ec49 8b10 	vmov	d0, r8, r9
 8015cde:	e7e4      	b.n	8015caa <_strtod_l+0x8a>
 8015ce0:	2100      	movs	r1, #0
 8015ce2:	e7ee      	b.n	8015cc2 <_strtod_l+0xa2>
 8015ce4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015ce6:	b13a      	cbz	r2, 8015cf8 <_strtod_l+0xd8>
 8015ce8:	2135      	movs	r1, #53	; 0x35
 8015cea:	a814      	add	r0, sp, #80	; 0x50
 8015cec:	f7ff ff3a 	bl	8015b64 <__copybits>
 8015cf0:	9912      	ldr	r1, [sp, #72]	; 0x48
 8015cf2:	4620      	mov	r0, r4
 8015cf4:	f7ff fb10 	bl	8015318 <_Bfree>
 8015cf8:	1e7b      	subs	r3, r7, #1
 8015cfa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8015cfc:	2b04      	cmp	r3, #4
 8015cfe:	d806      	bhi.n	8015d0e <_strtod_l+0xee>
 8015d00:	e8df f003 	tbb	[pc, r3]
 8015d04:	201d0314 	.word	0x201d0314
 8015d08:	14          	.byte	0x14
 8015d09:	00          	.byte	0x00
 8015d0a:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 8015d0e:	05eb      	lsls	r3, r5, #23
 8015d10:	bf48      	it	mi
 8015d12:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8015d16:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8015d1a:	0d1b      	lsrs	r3, r3, #20
 8015d1c:	051b      	lsls	r3, r3, #20
 8015d1e:	2b00      	cmp	r3, #0
 8015d20:	d1b9      	bne.n	8015c96 <_strtod_l+0x76>
 8015d22:	f7fe fc35 	bl	8014590 <__errno>
 8015d26:	2322      	movs	r3, #34	; 0x22
 8015d28:	6003      	str	r3, [r0, #0]
 8015d2a:	e7b4      	b.n	8015c96 <_strtod_l+0x76>
 8015d2c:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 8015d30:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8015d34:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8015d38:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8015d3c:	e7e7      	b.n	8015d0e <_strtod_l+0xee>
 8015d3e:	f8df 9184 	ldr.w	r9, [pc, #388]	; 8015ec4 <_strtod_l+0x2a4>
 8015d42:	e7e4      	b.n	8015d0e <_strtod_l+0xee>
 8015d44:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8015d48:	f04f 38ff 	mov.w	r8, #4294967295
 8015d4c:	e7df      	b.n	8015d0e <_strtod_l+0xee>
 8015d4e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015d50:	1c5a      	adds	r2, r3, #1
 8015d52:	9211      	str	r2, [sp, #68]	; 0x44
 8015d54:	785b      	ldrb	r3, [r3, #1]
 8015d56:	2b30      	cmp	r3, #48	; 0x30
 8015d58:	d0f9      	beq.n	8015d4e <_strtod_l+0x12e>
 8015d5a:	2b00      	cmp	r3, #0
 8015d5c:	d09b      	beq.n	8015c96 <_strtod_l+0x76>
 8015d5e:	2301      	movs	r3, #1
 8015d60:	9306      	str	r3, [sp, #24]
 8015d62:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015d64:	9309      	str	r3, [sp, #36]	; 0x24
 8015d66:	2300      	movs	r3, #0
 8015d68:	9305      	str	r3, [sp, #20]
 8015d6a:	9307      	str	r3, [sp, #28]
 8015d6c:	461e      	mov	r6, r3
 8015d6e:	220a      	movs	r2, #10
 8015d70:	9811      	ldr	r0, [sp, #68]	; 0x44
 8015d72:	7805      	ldrb	r5, [r0, #0]
 8015d74:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8015d78:	b2d9      	uxtb	r1, r3
 8015d7a:	2909      	cmp	r1, #9
 8015d7c:	d92b      	bls.n	8015dd6 <_strtod_l+0x1b6>
 8015d7e:	4950      	ldr	r1, [pc, #320]	; (8015ec0 <_strtod_l+0x2a0>)
 8015d80:	2201      	movs	r2, #1
 8015d82:	f000 ffa9 	bl	8016cd8 <strncmp>
 8015d86:	2800      	cmp	r0, #0
 8015d88:	d035      	beq.n	8015df6 <_strtod_l+0x1d6>
 8015d8a:	2000      	movs	r0, #0
 8015d8c:	462a      	mov	r2, r5
 8015d8e:	4633      	mov	r3, r6
 8015d90:	4683      	mov	fp, r0
 8015d92:	4601      	mov	r1, r0
 8015d94:	2a65      	cmp	r2, #101	; 0x65
 8015d96:	d001      	beq.n	8015d9c <_strtod_l+0x17c>
 8015d98:	2a45      	cmp	r2, #69	; 0x45
 8015d9a:	d118      	bne.n	8015dce <_strtod_l+0x1ae>
 8015d9c:	b91b      	cbnz	r3, 8015da6 <_strtod_l+0x186>
 8015d9e:	9b06      	ldr	r3, [sp, #24]
 8015da0:	4303      	orrs	r3, r0
 8015da2:	d094      	beq.n	8015cce <_strtod_l+0xae>
 8015da4:	2300      	movs	r3, #0
 8015da6:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
 8015daa:	f10a 0201 	add.w	r2, sl, #1
 8015dae:	9211      	str	r2, [sp, #68]	; 0x44
 8015db0:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8015db4:	2a2b      	cmp	r2, #43	; 0x2b
 8015db6:	d075      	beq.n	8015ea4 <_strtod_l+0x284>
 8015db8:	2a2d      	cmp	r2, #45	; 0x2d
 8015dba:	d07b      	beq.n	8015eb4 <_strtod_l+0x294>
 8015dbc:	f04f 0e00 	mov.w	lr, #0
 8015dc0:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8015dc4:	2d09      	cmp	r5, #9
 8015dc6:	f240 8083 	bls.w	8015ed0 <_strtod_l+0x2b0>
 8015dca:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 8015dce:	2500      	movs	r5, #0
 8015dd0:	e09e      	b.n	8015f10 <_strtod_l+0x2f0>
 8015dd2:	2300      	movs	r3, #0
 8015dd4:	e7c4      	b.n	8015d60 <_strtod_l+0x140>
 8015dd6:	2e08      	cmp	r6, #8
 8015dd8:	bfd5      	itete	le
 8015dda:	9907      	ldrle	r1, [sp, #28]
 8015ddc:	9905      	ldrgt	r1, [sp, #20]
 8015dde:	fb02 3301 	mlale	r3, r2, r1, r3
 8015de2:	fb02 3301 	mlagt	r3, r2, r1, r3
 8015de6:	f100 0001 	add.w	r0, r0, #1
 8015dea:	bfd4      	ite	le
 8015dec:	9307      	strle	r3, [sp, #28]
 8015dee:	9305      	strgt	r3, [sp, #20]
 8015df0:	3601      	adds	r6, #1
 8015df2:	9011      	str	r0, [sp, #68]	; 0x44
 8015df4:	e7bc      	b.n	8015d70 <_strtod_l+0x150>
 8015df6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015df8:	1c5a      	adds	r2, r3, #1
 8015dfa:	9211      	str	r2, [sp, #68]	; 0x44
 8015dfc:	785a      	ldrb	r2, [r3, #1]
 8015dfe:	b3ae      	cbz	r6, 8015e6c <_strtod_l+0x24c>
 8015e00:	4683      	mov	fp, r0
 8015e02:	4633      	mov	r3, r6
 8015e04:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8015e08:	2909      	cmp	r1, #9
 8015e0a:	d912      	bls.n	8015e32 <_strtod_l+0x212>
 8015e0c:	2101      	movs	r1, #1
 8015e0e:	e7c1      	b.n	8015d94 <_strtod_l+0x174>
 8015e10:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015e12:	1c5a      	adds	r2, r3, #1
 8015e14:	9211      	str	r2, [sp, #68]	; 0x44
 8015e16:	785a      	ldrb	r2, [r3, #1]
 8015e18:	3001      	adds	r0, #1
 8015e1a:	2a30      	cmp	r2, #48	; 0x30
 8015e1c:	d0f8      	beq.n	8015e10 <_strtod_l+0x1f0>
 8015e1e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8015e22:	2b08      	cmp	r3, #8
 8015e24:	f200 8495 	bhi.w	8016752 <_strtod_l+0xb32>
 8015e28:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015e2a:	9309      	str	r3, [sp, #36]	; 0x24
 8015e2c:	4683      	mov	fp, r0
 8015e2e:	2000      	movs	r0, #0
 8015e30:	4603      	mov	r3, r0
 8015e32:	3a30      	subs	r2, #48	; 0x30
 8015e34:	f100 0101 	add.w	r1, r0, #1
 8015e38:	d012      	beq.n	8015e60 <_strtod_l+0x240>
 8015e3a:	448b      	add	fp, r1
 8015e3c:	eb00 0c03 	add.w	ip, r0, r3
 8015e40:	4619      	mov	r1, r3
 8015e42:	250a      	movs	r5, #10
 8015e44:	4561      	cmp	r1, ip
 8015e46:	d113      	bne.n	8015e70 <_strtod_l+0x250>
 8015e48:	1819      	adds	r1, r3, r0
 8015e4a:	2908      	cmp	r1, #8
 8015e4c:	f103 0301 	add.w	r3, r3, #1
 8015e50:	4403      	add	r3, r0
 8015e52:	dc1b      	bgt.n	8015e8c <_strtod_l+0x26c>
 8015e54:	9807      	ldr	r0, [sp, #28]
 8015e56:	210a      	movs	r1, #10
 8015e58:	fb01 2200 	mla	r2, r1, r0, r2
 8015e5c:	9207      	str	r2, [sp, #28]
 8015e5e:	2100      	movs	r1, #0
 8015e60:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8015e62:	1c50      	adds	r0, r2, #1
 8015e64:	9011      	str	r0, [sp, #68]	; 0x44
 8015e66:	7852      	ldrb	r2, [r2, #1]
 8015e68:	4608      	mov	r0, r1
 8015e6a:	e7cb      	b.n	8015e04 <_strtod_l+0x1e4>
 8015e6c:	4630      	mov	r0, r6
 8015e6e:	e7d4      	b.n	8015e1a <_strtod_l+0x1fa>
 8015e70:	2908      	cmp	r1, #8
 8015e72:	f101 0101 	add.w	r1, r1, #1
 8015e76:	dc03      	bgt.n	8015e80 <_strtod_l+0x260>
 8015e78:	9f07      	ldr	r7, [sp, #28]
 8015e7a:	436f      	muls	r7, r5
 8015e7c:	9707      	str	r7, [sp, #28]
 8015e7e:	e7e1      	b.n	8015e44 <_strtod_l+0x224>
 8015e80:	2910      	cmp	r1, #16
 8015e82:	bfde      	ittt	le
 8015e84:	9f05      	ldrle	r7, [sp, #20]
 8015e86:	436f      	mulle	r7, r5
 8015e88:	9705      	strle	r7, [sp, #20]
 8015e8a:	e7db      	b.n	8015e44 <_strtod_l+0x224>
 8015e8c:	2b10      	cmp	r3, #16
 8015e8e:	bfdf      	itttt	le
 8015e90:	9805      	ldrle	r0, [sp, #20]
 8015e92:	210a      	movle	r1, #10
 8015e94:	fb01 2200 	mlale	r2, r1, r0, r2
 8015e98:	9205      	strle	r2, [sp, #20]
 8015e9a:	e7e0      	b.n	8015e5e <_strtod_l+0x23e>
 8015e9c:	f04f 0b00 	mov.w	fp, #0
 8015ea0:	2101      	movs	r1, #1
 8015ea2:	e77c      	b.n	8015d9e <_strtod_l+0x17e>
 8015ea4:	f04f 0e00 	mov.w	lr, #0
 8015ea8:	f10a 0202 	add.w	r2, sl, #2
 8015eac:	9211      	str	r2, [sp, #68]	; 0x44
 8015eae:	f89a 2002 	ldrb.w	r2, [sl, #2]
 8015eb2:	e785      	b.n	8015dc0 <_strtod_l+0x1a0>
 8015eb4:	f04f 0e01 	mov.w	lr, #1
 8015eb8:	e7f6      	b.n	8015ea8 <_strtod_l+0x288>
 8015eba:	bf00      	nop
 8015ebc:	08017ea0 	.word	0x08017ea0
 8015ec0:	08017e9c 	.word	0x08017e9c
 8015ec4:	7ff00000 	.word	0x7ff00000
 8015ec8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8015eca:	1c55      	adds	r5, r2, #1
 8015ecc:	9511      	str	r5, [sp, #68]	; 0x44
 8015ece:	7852      	ldrb	r2, [r2, #1]
 8015ed0:	2a30      	cmp	r2, #48	; 0x30
 8015ed2:	d0f9      	beq.n	8015ec8 <_strtod_l+0x2a8>
 8015ed4:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 8015ed8:	2d08      	cmp	r5, #8
 8015eda:	f63f af78 	bhi.w	8015dce <_strtod_l+0x1ae>
 8015ede:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8015ee2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8015ee4:	920a      	str	r2, [sp, #40]	; 0x28
 8015ee6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8015ee8:	1c55      	adds	r5, r2, #1
 8015eea:	9511      	str	r5, [sp, #68]	; 0x44
 8015eec:	7852      	ldrb	r2, [r2, #1]
 8015eee:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 8015ef2:	2f09      	cmp	r7, #9
 8015ef4:	d937      	bls.n	8015f66 <_strtod_l+0x346>
 8015ef6:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8015ef8:	1bed      	subs	r5, r5, r7
 8015efa:	2d08      	cmp	r5, #8
 8015efc:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8015f00:	dc02      	bgt.n	8015f08 <_strtod_l+0x2e8>
 8015f02:	4565      	cmp	r5, ip
 8015f04:	bfa8      	it	ge
 8015f06:	4665      	movge	r5, ip
 8015f08:	f1be 0f00 	cmp.w	lr, #0
 8015f0c:	d000      	beq.n	8015f10 <_strtod_l+0x2f0>
 8015f0e:	426d      	negs	r5, r5
 8015f10:	2b00      	cmp	r3, #0
 8015f12:	d14d      	bne.n	8015fb0 <_strtod_l+0x390>
 8015f14:	9b06      	ldr	r3, [sp, #24]
 8015f16:	4303      	orrs	r3, r0
 8015f18:	f47f aebd 	bne.w	8015c96 <_strtod_l+0x76>
 8015f1c:	2900      	cmp	r1, #0
 8015f1e:	f47f aed6 	bne.w	8015cce <_strtod_l+0xae>
 8015f22:	2a69      	cmp	r2, #105	; 0x69
 8015f24:	d027      	beq.n	8015f76 <_strtod_l+0x356>
 8015f26:	dc24      	bgt.n	8015f72 <_strtod_l+0x352>
 8015f28:	2a49      	cmp	r2, #73	; 0x49
 8015f2a:	d024      	beq.n	8015f76 <_strtod_l+0x356>
 8015f2c:	2a4e      	cmp	r2, #78	; 0x4e
 8015f2e:	f47f aece 	bne.w	8015cce <_strtod_l+0xae>
 8015f32:	4995      	ldr	r1, [pc, #596]	; (8016188 <_strtod_l+0x568>)
 8015f34:	a811      	add	r0, sp, #68	; 0x44
 8015f36:	f001 f9c7 	bl	80172c8 <__match>
 8015f3a:	2800      	cmp	r0, #0
 8015f3c:	f43f aec7 	beq.w	8015cce <_strtod_l+0xae>
 8015f40:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015f42:	781b      	ldrb	r3, [r3, #0]
 8015f44:	2b28      	cmp	r3, #40	; 0x28
 8015f46:	d12d      	bne.n	8015fa4 <_strtod_l+0x384>
 8015f48:	4990      	ldr	r1, [pc, #576]	; (801618c <_strtod_l+0x56c>)
 8015f4a:	aa14      	add	r2, sp, #80	; 0x50
 8015f4c:	a811      	add	r0, sp, #68	; 0x44
 8015f4e:	f001 f9cf 	bl	80172f0 <__hexnan>
 8015f52:	2805      	cmp	r0, #5
 8015f54:	d126      	bne.n	8015fa4 <_strtod_l+0x384>
 8015f56:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015f58:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8015f5c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8015f60:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8015f64:	e697      	b.n	8015c96 <_strtod_l+0x76>
 8015f66:	250a      	movs	r5, #10
 8015f68:	fb05 2c0c 	mla	ip, r5, ip, r2
 8015f6c:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8015f70:	e7b9      	b.n	8015ee6 <_strtod_l+0x2c6>
 8015f72:	2a6e      	cmp	r2, #110	; 0x6e
 8015f74:	e7db      	b.n	8015f2e <_strtod_l+0x30e>
 8015f76:	4986      	ldr	r1, [pc, #536]	; (8016190 <_strtod_l+0x570>)
 8015f78:	a811      	add	r0, sp, #68	; 0x44
 8015f7a:	f001 f9a5 	bl	80172c8 <__match>
 8015f7e:	2800      	cmp	r0, #0
 8015f80:	f43f aea5 	beq.w	8015cce <_strtod_l+0xae>
 8015f84:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015f86:	4983      	ldr	r1, [pc, #524]	; (8016194 <_strtod_l+0x574>)
 8015f88:	3b01      	subs	r3, #1
 8015f8a:	a811      	add	r0, sp, #68	; 0x44
 8015f8c:	9311      	str	r3, [sp, #68]	; 0x44
 8015f8e:	f001 f99b 	bl	80172c8 <__match>
 8015f92:	b910      	cbnz	r0, 8015f9a <_strtod_l+0x37a>
 8015f94:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015f96:	3301      	adds	r3, #1
 8015f98:	9311      	str	r3, [sp, #68]	; 0x44
 8015f9a:	f8df 920c 	ldr.w	r9, [pc, #524]	; 80161a8 <_strtod_l+0x588>
 8015f9e:	f04f 0800 	mov.w	r8, #0
 8015fa2:	e678      	b.n	8015c96 <_strtod_l+0x76>
 8015fa4:	487c      	ldr	r0, [pc, #496]	; (8016198 <_strtod_l+0x578>)
 8015fa6:	f000 feab 	bl	8016d00 <nan>
 8015faa:	ec59 8b10 	vmov	r8, r9, d0
 8015fae:	e672      	b.n	8015c96 <_strtod_l+0x76>
 8015fb0:	eddd 7a07 	vldr	s15, [sp, #28]
 8015fb4:	eba5 020b 	sub.w	r2, r5, fp
 8015fb8:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8015fbc:	2e00      	cmp	r6, #0
 8015fbe:	bf08      	it	eq
 8015fc0:	461e      	moveq	r6, r3
 8015fc2:	2b10      	cmp	r3, #16
 8015fc4:	9206      	str	r2, [sp, #24]
 8015fc6:	461a      	mov	r2, r3
 8015fc8:	bfa8      	it	ge
 8015fca:	2210      	movge	r2, #16
 8015fcc:	2b09      	cmp	r3, #9
 8015fce:	ec59 8b17 	vmov	r8, r9, d7
 8015fd2:	dd0c      	ble.n	8015fee <_strtod_l+0x3ce>
 8015fd4:	4971      	ldr	r1, [pc, #452]	; (801619c <_strtod_l+0x57c>)
 8015fd6:	eddd 6a05 	vldr	s13, [sp, #20]
 8015fda:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8015fde:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 8015fe2:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 8015fe6:	eea7 6b05 	vfma.f64	d6, d7, d5
 8015fea:	ec59 8b16 	vmov	r8, r9, d6
 8015fee:	2b0f      	cmp	r3, #15
 8015ff0:	dc37      	bgt.n	8016062 <_strtod_l+0x442>
 8015ff2:	9906      	ldr	r1, [sp, #24]
 8015ff4:	2900      	cmp	r1, #0
 8015ff6:	f43f ae4e 	beq.w	8015c96 <_strtod_l+0x76>
 8015ffa:	dd23      	ble.n	8016044 <_strtod_l+0x424>
 8015ffc:	2916      	cmp	r1, #22
 8015ffe:	dc0b      	bgt.n	8016018 <_strtod_l+0x3f8>
 8016000:	4b66      	ldr	r3, [pc, #408]	; (801619c <_strtod_l+0x57c>)
 8016002:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8016006:	ed93 7b00 	vldr	d7, [r3]
 801600a:	ec49 8b16 	vmov	d6, r8, r9
 801600e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8016012:	ec59 8b17 	vmov	r8, r9, d7
 8016016:	e63e      	b.n	8015c96 <_strtod_l+0x76>
 8016018:	9806      	ldr	r0, [sp, #24]
 801601a:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 801601e:	4281      	cmp	r1, r0
 8016020:	db1f      	blt.n	8016062 <_strtod_l+0x442>
 8016022:	4a5e      	ldr	r2, [pc, #376]	; (801619c <_strtod_l+0x57c>)
 8016024:	f1c3 030f 	rsb	r3, r3, #15
 8016028:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 801602c:	ed91 7b00 	vldr	d7, [r1]
 8016030:	ec49 8b16 	vmov	d6, r8, r9
 8016034:	1ac3      	subs	r3, r0, r3
 8016036:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 801603a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801603e:	ed92 6b00 	vldr	d6, [r2]
 8016042:	e7e4      	b.n	801600e <_strtod_l+0x3ee>
 8016044:	9906      	ldr	r1, [sp, #24]
 8016046:	3116      	adds	r1, #22
 8016048:	db0b      	blt.n	8016062 <_strtod_l+0x442>
 801604a:	4b54      	ldr	r3, [pc, #336]	; (801619c <_strtod_l+0x57c>)
 801604c:	ebab 0505 	sub.w	r5, fp, r5
 8016050:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8016054:	ed95 7b00 	vldr	d7, [r5]
 8016058:	ec49 8b16 	vmov	d6, r8, r9
 801605c:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8016060:	e7d7      	b.n	8016012 <_strtod_l+0x3f2>
 8016062:	9906      	ldr	r1, [sp, #24]
 8016064:	1a9a      	subs	r2, r3, r2
 8016066:	440a      	add	r2, r1
 8016068:	2a00      	cmp	r2, #0
 801606a:	dd6e      	ble.n	801614a <_strtod_l+0x52a>
 801606c:	f012 000f 	ands.w	r0, r2, #15
 8016070:	d00a      	beq.n	8016088 <_strtod_l+0x468>
 8016072:	494a      	ldr	r1, [pc, #296]	; (801619c <_strtod_l+0x57c>)
 8016074:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8016078:	ed91 7b00 	vldr	d7, [r1]
 801607c:	ec49 8b16 	vmov	d6, r8, r9
 8016080:	ee27 7b06 	vmul.f64	d7, d7, d6
 8016084:	ec59 8b17 	vmov	r8, r9, d7
 8016088:	f032 020f 	bics.w	r2, r2, #15
 801608c:	d04e      	beq.n	801612c <_strtod_l+0x50c>
 801608e:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 8016092:	dd22      	ble.n	80160da <_strtod_l+0x4ba>
 8016094:	2500      	movs	r5, #0
 8016096:	462e      	mov	r6, r5
 8016098:	9507      	str	r5, [sp, #28]
 801609a:	462f      	mov	r7, r5
 801609c:	2322      	movs	r3, #34	; 0x22
 801609e:	f8df 9108 	ldr.w	r9, [pc, #264]	; 80161a8 <_strtod_l+0x588>
 80160a2:	6023      	str	r3, [r4, #0]
 80160a4:	f04f 0800 	mov.w	r8, #0
 80160a8:	9b07      	ldr	r3, [sp, #28]
 80160aa:	2b00      	cmp	r3, #0
 80160ac:	f43f adf3 	beq.w	8015c96 <_strtod_l+0x76>
 80160b0:	9912      	ldr	r1, [sp, #72]	; 0x48
 80160b2:	4620      	mov	r0, r4
 80160b4:	f7ff f930 	bl	8015318 <_Bfree>
 80160b8:	4639      	mov	r1, r7
 80160ba:	4620      	mov	r0, r4
 80160bc:	f7ff f92c 	bl	8015318 <_Bfree>
 80160c0:	4631      	mov	r1, r6
 80160c2:	4620      	mov	r0, r4
 80160c4:	f7ff f928 	bl	8015318 <_Bfree>
 80160c8:	9907      	ldr	r1, [sp, #28]
 80160ca:	4620      	mov	r0, r4
 80160cc:	f7ff f924 	bl	8015318 <_Bfree>
 80160d0:	4629      	mov	r1, r5
 80160d2:	4620      	mov	r0, r4
 80160d4:	f7ff f920 	bl	8015318 <_Bfree>
 80160d8:	e5dd      	b.n	8015c96 <_strtod_l+0x76>
 80160da:	2000      	movs	r0, #0
 80160dc:	ec49 8b17 	vmov	d7, r8, r9
 80160e0:	4f2f      	ldr	r7, [pc, #188]	; (80161a0 <_strtod_l+0x580>)
 80160e2:	1112      	asrs	r2, r2, #4
 80160e4:	4601      	mov	r1, r0
 80160e6:	2a01      	cmp	r2, #1
 80160e8:	dc23      	bgt.n	8016132 <_strtod_l+0x512>
 80160ea:	b108      	cbz	r0, 80160f0 <_strtod_l+0x4d0>
 80160ec:	ec59 8b17 	vmov	r8, r9, d7
 80160f0:	4a2b      	ldr	r2, [pc, #172]	; (80161a0 <_strtod_l+0x580>)
 80160f2:	482c      	ldr	r0, [pc, #176]	; (80161a4 <_strtod_l+0x584>)
 80160f4:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80160f8:	ed92 7b00 	vldr	d7, [r2]
 80160fc:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8016100:	ec49 8b16 	vmov	d6, r8, r9
 8016104:	4a28      	ldr	r2, [pc, #160]	; (80161a8 <_strtod_l+0x588>)
 8016106:	ee27 7b06 	vmul.f64	d7, d7, d6
 801610a:	ee17 1a90 	vmov	r1, s15
 801610e:	400a      	ands	r2, r1
 8016110:	4282      	cmp	r2, r0
 8016112:	ec59 8b17 	vmov	r8, r9, d7
 8016116:	d8bd      	bhi.n	8016094 <_strtod_l+0x474>
 8016118:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 801611c:	4282      	cmp	r2, r0
 801611e:	bf86      	itte	hi
 8016120:	f8df 9088 	ldrhi.w	r9, [pc, #136]	; 80161ac <_strtod_l+0x58c>
 8016124:	f04f 38ff 	movhi.w	r8, #4294967295
 8016128:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 801612c:	2200      	movs	r2, #0
 801612e:	9205      	str	r2, [sp, #20]
 8016130:	e076      	b.n	8016220 <_strtod_l+0x600>
 8016132:	f012 0f01 	tst.w	r2, #1
 8016136:	d004      	beq.n	8016142 <_strtod_l+0x522>
 8016138:	ed97 6b00 	vldr	d6, [r7]
 801613c:	2001      	movs	r0, #1
 801613e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8016142:	3101      	adds	r1, #1
 8016144:	1052      	asrs	r2, r2, #1
 8016146:	3708      	adds	r7, #8
 8016148:	e7cd      	b.n	80160e6 <_strtod_l+0x4c6>
 801614a:	d0ef      	beq.n	801612c <_strtod_l+0x50c>
 801614c:	4252      	negs	r2, r2
 801614e:	f012 000f 	ands.w	r0, r2, #15
 8016152:	d00a      	beq.n	801616a <_strtod_l+0x54a>
 8016154:	4911      	ldr	r1, [pc, #68]	; (801619c <_strtod_l+0x57c>)
 8016156:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 801615a:	ed91 7b00 	vldr	d7, [r1]
 801615e:	ec49 8b16 	vmov	d6, r8, r9
 8016162:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8016166:	ec59 8b17 	vmov	r8, r9, d7
 801616a:	1112      	asrs	r2, r2, #4
 801616c:	d0de      	beq.n	801612c <_strtod_l+0x50c>
 801616e:	2a1f      	cmp	r2, #31
 8016170:	dd1e      	ble.n	80161b0 <_strtod_l+0x590>
 8016172:	2500      	movs	r5, #0
 8016174:	462e      	mov	r6, r5
 8016176:	9507      	str	r5, [sp, #28]
 8016178:	462f      	mov	r7, r5
 801617a:	2322      	movs	r3, #34	; 0x22
 801617c:	f04f 0800 	mov.w	r8, #0
 8016180:	f04f 0900 	mov.w	r9, #0
 8016184:	6023      	str	r3, [r4, #0]
 8016186:	e78f      	b.n	80160a8 <_strtod_l+0x488>
 8016188:	08017c89 	.word	0x08017c89
 801618c:	08017eb4 	.word	0x08017eb4
 8016190:	08017c81 	.word	0x08017c81
 8016194:	08017cb8 	.word	0x08017cb8
 8016198:	08018045 	.word	0x08018045
 801619c:	08017dc8 	.word	0x08017dc8
 80161a0:	08017da0 	.word	0x08017da0
 80161a4:	7ca00000 	.word	0x7ca00000
 80161a8:	7ff00000 	.word	0x7ff00000
 80161ac:	7fefffff 	.word	0x7fefffff
 80161b0:	f012 0110 	ands.w	r1, r2, #16
 80161b4:	bf18      	it	ne
 80161b6:	216a      	movne	r1, #106	; 0x6a
 80161b8:	9105      	str	r1, [sp, #20]
 80161ba:	ec49 8b17 	vmov	d7, r8, r9
 80161be:	49be      	ldr	r1, [pc, #760]	; (80164b8 <_strtod_l+0x898>)
 80161c0:	2000      	movs	r0, #0
 80161c2:	07d7      	lsls	r7, r2, #31
 80161c4:	d504      	bpl.n	80161d0 <_strtod_l+0x5b0>
 80161c6:	ed91 6b00 	vldr	d6, [r1]
 80161ca:	2001      	movs	r0, #1
 80161cc:	ee27 7b06 	vmul.f64	d7, d7, d6
 80161d0:	1052      	asrs	r2, r2, #1
 80161d2:	f101 0108 	add.w	r1, r1, #8
 80161d6:	d1f4      	bne.n	80161c2 <_strtod_l+0x5a2>
 80161d8:	b108      	cbz	r0, 80161de <_strtod_l+0x5be>
 80161da:	ec59 8b17 	vmov	r8, r9, d7
 80161de:	9a05      	ldr	r2, [sp, #20]
 80161e0:	b1ba      	cbz	r2, 8016212 <_strtod_l+0x5f2>
 80161e2:	f3c9 510a 	ubfx	r1, r9, #20, #11
 80161e6:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 80161ea:	2a00      	cmp	r2, #0
 80161ec:	4648      	mov	r0, r9
 80161ee:	dd10      	ble.n	8016212 <_strtod_l+0x5f2>
 80161f0:	2a1f      	cmp	r2, #31
 80161f2:	f340 812c 	ble.w	801644e <_strtod_l+0x82e>
 80161f6:	2a34      	cmp	r2, #52	; 0x34
 80161f8:	bfde      	ittt	le
 80161fa:	f04f 32ff 	movle.w	r2, #4294967295
 80161fe:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 8016202:	408a      	lslle	r2, r1
 8016204:	f04f 0800 	mov.w	r8, #0
 8016208:	bfcc      	ite	gt
 801620a:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 801620e:	ea02 0900 	andle.w	r9, r2, r0
 8016212:	ec49 8b17 	vmov	d7, r8, r9
 8016216:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801621a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801621e:	d0a8      	beq.n	8016172 <_strtod_l+0x552>
 8016220:	9a07      	ldr	r2, [sp, #28]
 8016222:	9200      	str	r2, [sp, #0]
 8016224:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016226:	4632      	mov	r2, r6
 8016228:	4620      	mov	r0, r4
 801622a:	f7ff f8dd 	bl	80153e8 <__s2b>
 801622e:	9007      	str	r0, [sp, #28]
 8016230:	2800      	cmp	r0, #0
 8016232:	f43f af2f 	beq.w	8016094 <_strtod_l+0x474>
 8016236:	9a06      	ldr	r2, [sp, #24]
 8016238:	2a00      	cmp	r2, #0
 801623a:	ebab 0305 	sub.w	r3, fp, r5
 801623e:	ed9f 9b96 	vldr	d9, [pc, #600]	; 8016498 <_strtod_l+0x878>
 8016242:	bfa8      	it	ge
 8016244:	2300      	movge	r3, #0
 8016246:	ed9f ab96 	vldr	d10, [pc, #600]	; 80164a0 <_strtod_l+0x880>
 801624a:	ed9f bb97 	vldr	d11, [pc, #604]	; 80164a8 <_strtod_l+0x888>
 801624e:	9309      	str	r3, [sp, #36]	; 0x24
 8016250:	2500      	movs	r5, #0
 8016252:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8016256:	930c      	str	r3, [sp, #48]	; 0x30
 8016258:	462e      	mov	r6, r5
 801625a:	9b07      	ldr	r3, [sp, #28]
 801625c:	4620      	mov	r0, r4
 801625e:	6859      	ldr	r1, [r3, #4]
 8016260:	f7ff f81a 	bl	8015298 <_Balloc>
 8016264:	4607      	mov	r7, r0
 8016266:	2800      	cmp	r0, #0
 8016268:	f43f af18 	beq.w	801609c <_strtod_l+0x47c>
 801626c:	9b07      	ldr	r3, [sp, #28]
 801626e:	691a      	ldr	r2, [r3, #16]
 8016270:	3202      	adds	r2, #2
 8016272:	f103 010c 	add.w	r1, r3, #12
 8016276:	0092      	lsls	r2, r2, #2
 8016278:	300c      	adds	r0, #12
 801627a:	f7fe f9b6 	bl	80145ea <memcpy>
 801627e:	ec49 8b10 	vmov	d0, r8, r9
 8016282:	aa14      	add	r2, sp, #80	; 0x50
 8016284:	a913      	add	r1, sp, #76	; 0x4c
 8016286:	4620      	mov	r0, r4
 8016288:	f7ff fbe2 	bl	8015a50 <__d2b>
 801628c:	ec49 8b18 	vmov	d8, r8, r9
 8016290:	9012      	str	r0, [sp, #72]	; 0x48
 8016292:	2800      	cmp	r0, #0
 8016294:	f43f af02 	beq.w	801609c <_strtod_l+0x47c>
 8016298:	2101      	movs	r1, #1
 801629a:	4620      	mov	r0, r4
 801629c:	f7ff f93c 	bl	8015518 <__i2b>
 80162a0:	4606      	mov	r6, r0
 80162a2:	2800      	cmp	r0, #0
 80162a4:	f43f aefa 	beq.w	801609c <_strtod_l+0x47c>
 80162a8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80162aa:	9914      	ldr	r1, [sp, #80]	; 0x50
 80162ac:	2b00      	cmp	r3, #0
 80162ae:	bfab      	itete	ge
 80162b0:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 80162b2:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 80162b4:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 80162b8:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 80162bc:	bfac      	ite	ge
 80162be:	eb03 0b02 	addge.w	fp, r3, r2
 80162c2:	eba2 0a03 	sublt.w	sl, r2, r3
 80162c6:	9a05      	ldr	r2, [sp, #20]
 80162c8:	1a9b      	subs	r3, r3, r2
 80162ca:	440b      	add	r3, r1
 80162cc:	4a7b      	ldr	r2, [pc, #492]	; (80164bc <_strtod_l+0x89c>)
 80162ce:	3b01      	subs	r3, #1
 80162d0:	4293      	cmp	r3, r2
 80162d2:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 80162d6:	f280 80cd 	bge.w	8016474 <_strtod_l+0x854>
 80162da:	1ad2      	subs	r2, r2, r3
 80162dc:	2a1f      	cmp	r2, #31
 80162de:	eba1 0102 	sub.w	r1, r1, r2
 80162e2:	f04f 0001 	mov.w	r0, #1
 80162e6:	f300 80b9 	bgt.w	801645c <_strtod_l+0x83c>
 80162ea:	fa00 f302 	lsl.w	r3, r0, r2
 80162ee:	930b      	str	r3, [sp, #44]	; 0x2c
 80162f0:	2300      	movs	r3, #0
 80162f2:	930a      	str	r3, [sp, #40]	; 0x28
 80162f4:	eb0b 0301 	add.w	r3, fp, r1
 80162f8:	9a05      	ldr	r2, [sp, #20]
 80162fa:	459b      	cmp	fp, r3
 80162fc:	448a      	add	sl, r1
 80162fe:	4492      	add	sl, r2
 8016300:	465a      	mov	r2, fp
 8016302:	bfa8      	it	ge
 8016304:	461a      	movge	r2, r3
 8016306:	4552      	cmp	r2, sl
 8016308:	bfa8      	it	ge
 801630a:	4652      	movge	r2, sl
 801630c:	2a00      	cmp	r2, #0
 801630e:	bfc2      	ittt	gt
 8016310:	1a9b      	subgt	r3, r3, r2
 8016312:	ebaa 0a02 	subgt.w	sl, sl, r2
 8016316:	ebab 0b02 	subgt.w	fp, fp, r2
 801631a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801631c:	2a00      	cmp	r2, #0
 801631e:	dd18      	ble.n	8016352 <_strtod_l+0x732>
 8016320:	4631      	mov	r1, r6
 8016322:	4620      	mov	r0, r4
 8016324:	930f      	str	r3, [sp, #60]	; 0x3c
 8016326:	f7ff f9b7 	bl	8015698 <__pow5mult>
 801632a:	4606      	mov	r6, r0
 801632c:	2800      	cmp	r0, #0
 801632e:	f43f aeb5 	beq.w	801609c <_strtod_l+0x47c>
 8016332:	4601      	mov	r1, r0
 8016334:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016336:	4620      	mov	r0, r4
 8016338:	f7ff f904 	bl	8015544 <__multiply>
 801633c:	900e      	str	r0, [sp, #56]	; 0x38
 801633e:	2800      	cmp	r0, #0
 8016340:	f43f aeac 	beq.w	801609c <_strtod_l+0x47c>
 8016344:	9912      	ldr	r1, [sp, #72]	; 0x48
 8016346:	4620      	mov	r0, r4
 8016348:	f7fe ffe6 	bl	8015318 <_Bfree>
 801634c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801634e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016350:	9212      	str	r2, [sp, #72]	; 0x48
 8016352:	2b00      	cmp	r3, #0
 8016354:	f300 8093 	bgt.w	801647e <_strtod_l+0x85e>
 8016358:	9b06      	ldr	r3, [sp, #24]
 801635a:	2b00      	cmp	r3, #0
 801635c:	dd08      	ble.n	8016370 <_strtod_l+0x750>
 801635e:	4639      	mov	r1, r7
 8016360:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016362:	4620      	mov	r0, r4
 8016364:	f7ff f998 	bl	8015698 <__pow5mult>
 8016368:	4607      	mov	r7, r0
 801636a:	2800      	cmp	r0, #0
 801636c:	f43f ae96 	beq.w	801609c <_strtod_l+0x47c>
 8016370:	f1ba 0f00 	cmp.w	sl, #0
 8016374:	dd08      	ble.n	8016388 <_strtod_l+0x768>
 8016376:	4639      	mov	r1, r7
 8016378:	4652      	mov	r2, sl
 801637a:	4620      	mov	r0, r4
 801637c:	f7ff f9e6 	bl	801574c <__lshift>
 8016380:	4607      	mov	r7, r0
 8016382:	2800      	cmp	r0, #0
 8016384:	f43f ae8a 	beq.w	801609c <_strtod_l+0x47c>
 8016388:	f1bb 0f00 	cmp.w	fp, #0
 801638c:	dd08      	ble.n	80163a0 <_strtod_l+0x780>
 801638e:	4631      	mov	r1, r6
 8016390:	465a      	mov	r2, fp
 8016392:	4620      	mov	r0, r4
 8016394:	f7ff f9da 	bl	801574c <__lshift>
 8016398:	4606      	mov	r6, r0
 801639a:	2800      	cmp	r0, #0
 801639c:	f43f ae7e 	beq.w	801609c <_strtod_l+0x47c>
 80163a0:	9912      	ldr	r1, [sp, #72]	; 0x48
 80163a2:	463a      	mov	r2, r7
 80163a4:	4620      	mov	r0, r4
 80163a6:	f7ff fa59 	bl	801585c <__mdiff>
 80163aa:	4605      	mov	r5, r0
 80163ac:	2800      	cmp	r0, #0
 80163ae:	f43f ae75 	beq.w	801609c <_strtod_l+0x47c>
 80163b2:	2300      	movs	r3, #0
 80163b4:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 80163b8:	60c3      	str	r3, [r0, #12]
 80163ba:	4631      	mov	r1, r6
 80163bc:	f7ff fa32 	bl	8015824 <__mcmp>
 80163c0:	2800      	cmp	r0, #0
 80163c2:	da7f      	bge.n	80164c4 <_strtod_l+0x8a4>
 80163c4:	ea5a 0a08 	orrs.w	sl, sl, r8
 80163c8:	f040 80a5 	bne.w	8016516 <_strtod_l+0x8f6>
 80163cc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80163d0:	2b00      	cmp	r3, #0
 80163d2:	f040 80a0 	bne.w	8016516 <_strtod_l+0x8f6>
 80163d6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80163da:	0d1b      	lsrs	r3, r3, #20
 80163dc:	051b      	lsls	r3, r3, #20
 80163de:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80163e2:	f240 8098 	bls.w	8016516 <_strtod_l+0x8f6>
 80163e6:	696b      	ldr	r3, [r5, #20]
 80163e8:	b91b      	cbnz	r3, 80163f2 <_strtod_l+0x7d2>
 80163ea:	692b      	ldr	r3, [r5, #16]
 80163ec:	2b01      	cmp	r3, #1
 80163ee:	f340 8092 	ble.w	8016516 <_strtod_l+0x8f6>
 80163f2:	4629      	mov	r1, r5
 80163f4:	2201      	movs	r2, #1
 80163f6:	4620      	mov	r0, r4
 80163f8:	f7ff f9a8 	bl	801574c <__lshift>
 80163fc:	4631      	mov	r1, r6
 80163fe:	4605      	mov	r5, r0
 8016400:	f7ff fa10 	bl	8015824 <__mcmp>
 8016404:	2800      	cmp	r0, #0
 8016406:	f340 8086 	ble.w	8016516 <_strtod_l+0x8f6>
 801640a:	9905      	ldr	r1, [sp, #20]
 801640c:	4a2c      	ldr	r2, [pc, #176]	; (80164c0 <_strtod_l+0x8a0>)
 801640e:	464b      	mov	r3, r9
 8016410:	2900      	cmp	r1, #0
 8016412:	f000 809f 	beq.w	8016554 <_strtod_l+0x934>
 8016416:	ea02 0109 	and.w	r1, r2, r9
 801641a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801641e:	f300 8099 	bgt.w	8016554 <_strtod_l+0x934>
 8016422:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8016426:	f77f aea8 	ble.w	801617a <_strtod_l+0x55a>
 801642a:	ed9f 7b21 	vldr	d7, [pc, #132]	; 80164b0 <_strtod_l+0x890>
 801642e:	ec49 8b16 	vmov	d6, r8, r9
 8016432:	4b23      	ldr	r3, [pc, #140]	; (80164c0 <_strtod_l+0x8a0>)
 8016434:	ee26 7b07 	vmul.f64	d7, d6, d7
 8016438:	ee17 2a90 	vmov	r2, s15
 801643c:	4013      	ands	r3, r2
 801643e:	ec59 8b17 	vmov	r8, r9, d7
 8016442:	2b00      	cmp	r3, #0
 8016444:	f47f ae34 	bne.w	80160b0 <_strtod_l+0x490>
 8016448:	2322      	movs	r3, #34	; 0x22
 801644a:	6023      	str	r3, [r4, #0]
 801644c:	e630      	b.n	80160b0 <_strtod_l+0x490>
 801644e:	f04f 31ff 	mov.w	r1, #4294967295
 8016452:	fa01 f202 	lsl.w	r2, r1, r2
 8016456:	ea02 0808 	and.w	r8, r2, r8
 801645a:	e6da      	b.n	8016212 <_strtod_l+0x5f2>
 801645c:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 8016460:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8016464:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 8016468:	33e2      	adds	r3, #226	; 0xe2
 801646a:	fa00 f303 	lsl.w	r3, r0, r3
 801646e:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 8016472:	e73f      	b.n	80162f4 <_strtod_l+0x6d4>
 8016474:	2200      	movs	r2, #0
 8016476:	2301      	movs	r3, #1
 8016478:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801647c:	e73a      	b.n	80162f4 <_strtod_l+0x6d4>
 801647e:	9912      	ldr	r1, [sp, #72]	; 0x48
 8016480:	461a      	mov	r2, r3
 8016482:	4620      	mov	r0, r4
 8016484:	f7ff f962 	bl	801574c <__lshift>
 8016488:	9012      	str	r0, [sp, #72]	; 0x48
 801648a:	2800      	cmp	r0, #0
 801648c:	f47f af64 	bne.w	8016358 <_strtod_l+0x738>
 8016490:	e604      	b.n	801609c <_strtod_l+0x47c>
 8016492:	bf00      	nop
 8016494:	f3af 8000 	nop.w
 8016498:	94a03595 	.word	0x94a03595
 801649c:	3fcfffff 	.word	0x3fcfffff
 80164a0:	94a03595 	.word	0x94a03595
 80164a4:	3fdfffff 	.word	0x3fdfffff
 80164a8:	35afe535 	.word	0x35afe535
 80164ac:	3fe00000 	.word	0x3fe00000
 80164b0:	00000000 	.word	0x00000000
 80164b4:	39500000 	.word	0x39500000
 80164b8:	08017ec8 	.word	0x08017ec8
 80164bc:	fffffc02 	.word	0xfffffc02
 80164c0:	7ff00000 	.word	0x7ff00000
 80164c4:	46cb      	mov	fp, r9
 80164c6:	d15f      	bne.n	8016588 <_strtod_l+0x968>
 80164c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80164cc:	f1ba 0f00 	cmp.w	sl, #0
 80164d0:	d02a      	beq.n	8016528 <_strtod_l+0x908>
 80164d2:	4aa7      	ldr	r2, [pc, #668]	; (8016770 <_strtod_l+0xb50>)
 80164d4:	4293      	cmp	r3, r2
 80164d6:	d12b      	bne.n	8016530 <_strtod_l+0x910>
 80164d8:	9b05      	ldr	r3, [sp, #20]
 80164da:	4642      	mov	r2, r8
 80164dc:	b1fb      	cbz	r3, 801651e <_strtod_l+0x8fe>
 80164de:	4ba5      	ldr	r3, [pc, #660]	; (8016774 <_strtod_l+0xb54>)
 80164e0:	ea09 0303 	and.w	r3, r9, r3
 80164e4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80164e8:	f04f 31ff 	mov.w	r1, #4294967295
 80164ec:	d81a      	bhi.n	8016524 <_strtod_l+0x904>
 80164ee:	0d1b      	lsrs	r3, r3, #20
 80164f0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80164f4:	fa01 f303 	lsl.w	r3, r1, r3
 80164f8:	429a      	cmp	r2, r3
 80164fa:	d119      	bne.n	8016530 <_strtod_l+0x910>
 80164fc:	4b9e      	ldr	r3, [pc, #632]	; (8016778 <_strtod_l+0xb58>)
 80164fe:	459b      	cmp	fp, r3
 8016500:	d102      	bne.n	8016508 <_strtod_l+0x8e8>
 8016502:	3201      	adds	r2, #1
 8016504:	f43f adca 	beq.w	801609c <_strtod_l+0x47c>
 8016508:	4b9a      	ldr	r3, [pc, #616]	; (8016774 <_strtod_l+0xb54>)
 801650a:	ea0b 0303 	and.w	r3, fp, r3
 801650e:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8016512:	f04f 0800 	mov.w	r8, #0
 8016516:	9b05      	ldr	r3, [sp, #20]
 8016518:	2b00      	cmp	r3, #0
 801651a:	d186      	bne.n	801642a <_strtod_l+0x80a>
 801651c:	e5c8      	b.n	80160b0 <_strtod_l+0x490>
 801651e:	f04f 33ff 	mov.w	r3, #4294967295
 8016522:	e7e9      	b.n	80164f8 <_strtod_l+0x8d8>
 8016524:	460b      	mov	r3, r1
 8016526:	e7e7      	b.n	80164f8 <_strtod_l+0x8d8>
 8016528:	ea53 0308 	orrs.w	r3, r3, r8
 801652c:	f43f af6d 	beq.w	801640a <_strtod_l+0x7ea>
 8016530:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016532:	b1cb      	cbz	r3, 8016568 <_strtod_l+0x948>
 8016534:	ea13 0f0b 	tst.w	r3, fp
 8016538:	d0ed      	beq.n	8016516 <_strtod_l+0x8f6>
 801653a:	9a05      	ldr	r2, [sp, #20]
 801653c:	4640      	mov	r0, r8
 801653e:	4649      	mov	r1, r9
 8016540:	f1ba 0f00 	cmp.w	sl, #0
 8016544:	d014      	beq.n	8016570 <_strtod_l+0x950>
 8016546:	f7ff fb51 	bl	8015bec <sulp>
 801654a:	ee38 7b00 	vadd.f64	d7, d8, d0
 801654e:	ec59 8b17 	vmov	r8, r9, d7
 8016552:	e7e0      	b.n	8016516 <_strtod_l+0x8f6>
 8016554:	4013      	ands	r3, r2
 8016556:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801655a:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 801655e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8016562:	f04f 38ff 	mov.w	r8, #4294967295
 8016566:	e7d6      	b.n	8016516 <_strtod_l+0x8f6>
 8016568:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801656a:	ea13 0f08 	tst.w	r3, r8
 801656e:	e7e3      	b.n	8016538 <_strtod_l+0x918>
 8016570:	f7ff fb3c 	bl	8015bec <sulp>
 8016574:	ee38 0b40 	vsub.f64	d0, d8, d0
 8016578:	eeb5 0b40 	vcmp.f64	d0, #0.0
 801657c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016580:	ec59 8b10 	vmov	r8, r9, d0
 8016584:	d1c7      	bne.n	8016516 <_strtod_l+0x8f6>
 8016586:	e5f8      	b.n	801617a <_strtod_l+0x55a>
 8016588:	4631      	mov	r1, r6
 801658a:	4628      	mov	r0, r5
 801658c:	f7ff faba 	bl	8015b04 <__ratio>
 8016590:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8016594:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8016598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801659c:	d85f      	bhi.n	801665e <_strtod_l+0xa3e>
 801659e:	f1ba 0f00 	cmp.w	sl, #0
 80165a2:	d166      	bne.n	8016672 <_strtod_l+0xa52>
 80165a4:	f1b8 0f00 	cmp.w	r8, #0
 80165a8:	d14d      	bne.n	8016646 <_strtod_l+0xa26>
 80165aa:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80165ae:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 80165b2:	2b00      	cmp	r3, #0
 80165b4:	d162      	bne.n	801667c <_strtod_l+0xa5c>
 80165b6:	eeb4 0bcd 	vcmpe.f64	d0, d13
 80165ba:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 80165be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80165c2:	d401      	bmi.n	80165c8 <_strtod_l+0x9a8>
 80165c4:	ee20 db0d 	vmul.f64	d13, d0, d13
 80165c8:	eeb1 cb4d 	vneg.f64	d12, d13
 80165cc:	4869      	ldr	r0, [pc, #420]	; (8016774 <_strtod_l+0xb54>)
 80165ce:	f8df c1b0 	ldr.w	ip, [pc, #432]	; 8016780 <_strtod_l+0xb60>
 80165d2:	ea0b 0100 	and.w	r1, fp, r0
 80165d6:	4561      	cmp	r1, ip
 80165d8:	ec53 2b1c 	vmov	r2, r3, d12
 80165dc:	d17a      	bne.n	80166d4 <_strtod_l+0xab4>
 80165de:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 80165e2:	ec49 8b10 	vmov	d0, r8, r9
 80165e6:	910a      	str	r1, [sp, #40]	; 0x28
 80165e8:	f7ff f9c2 	bl	8015970 <__ulp>
 80165ec:	ec49 8b1e 	vmov	d14, r8, r9
 80165f0:	4860      	ldr	r0, [pc, #384]	; (8016774 <_strtod_l+0xb54>)
 80165f2:	eea0 eb0c 	vfma.f64	d14, d0, d12
 80165f6:	ee1e 3a90 	vmov	r3, s29
 80165fa:	4a60      	ldr	r2, [pc, #384]	; (801677c <_strtod_l+0xb5c>)
 80165fc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80165fe:	4018      	ands	r0, r3
 8016600:	4290      	cmp	r0, r2
 8016602:	ec59 8b1e 	vmov	r8, r9, d14
 8016606:	d93c      	bls.n	8016682 <_strtod_l+0xa62>
 8016608:	ee18 2a90 	vmov	r2, s17
 801660c:	4b5a      	ldr	r3, [pc, #360]	; (8016778 <_strtod_l+0xb58>)
 801660e:	429a      	cmp	r2, r3
 8016610:	d104      	bne.n	801661c <_strtod_l+0x9fc>
 8016612:	ee18 3a10 	vmov	r3, s16
 8016616:	3301      	adds	r3, #1
 8016618:	f43f ad40 	beq.w	801609c <_strtod_l+0x47c>
 801661c:	f8df 9158 	ldr.w	r9, [pc, #344]	; 8016778 <_strtod_l+0xb58>
 8016620:	f04f 38ff 	mov.w	r8, #4294967295
 8016624:	9912      	ldr	r1, [sp, #72]	; 0x48
 8016626:	4620      	mov	r0, r4
 8016628:	f7fe fe76 	bl	8015318 <_Bfree>
 801662c:	4639      	mov	r1, r7
 801662e:	4620      	mov	r0, r4
 8016630:	f7fe fe72 	bl	8015318 <_Bfree>
 8016634:	4631      	mov	r1, r6
 8016636:	4620      	mov	r0, r4
 8016638:	f7fe fe6e 	bl	8015318 <_Bfree>
 801663c:	4629      	mov	r1, r5
 801663e:	4620      	mov	r0, r4
 8016640:	f7fe fe6a 	bl	8015318 <_Bfree>
 8016644:	e609      	b.n	801625a <_strtod_l+0x63a>
 8016646:	f1b8 0f01 	cmp.w	r8, #1
 801664a:	d103      	bne.n	8016654 <_strtod_l+0xa34>
 801664c:	f1b9 0f00 	cmp.w	r9, #0
 8016650:	f43f ad93 	beq.w	801617a <_strtod_l+0x55a>
 8016654:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 8016658:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 801665c:	e7b6      	b.n	80165cc <_strtod_l+0x9ac>
 801665e:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 8016662:	ee20 db0d 	vmul.f64	d13, d0, d13
 8016666:	f1ba 0f00 	cmp.w	sl, #0
 801666a:	d0ad      	beq.n	80165c8 <_strtod_l+0x9a8>
 801666c:	eeb0 cb4d 	vmov.f64	d12, d13
 8016670:	e7ac      	b.n	80165cc <_strtod_l+0x9ac>
 8016672:	eeb7 cb00 	vmov.f64	d12, #112	; 0x3f800000  1.0
 8016676:	eeb0 db4c 	vmov.f64	d13, d12
 801667a:	e7a7      	b.n	80165cc <_strtod_l+0x9ac>
 801667c:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 8016680:	e7a4      	b.n	80165cc <_strtod_l+0x9ac>
 8016682:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8016686:	9b05      	ldr	r3, [sp, #20]
 8016688:	46cb      	mov	fp, r9
 801668a:	2b00      	cmp	r3, #0
 801668c:	d1ca      	bne.n	8016624 <_strtod_l+0xa04>
 801668e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8016692:	0d1b      	lsrs	r3, r3, #20
 8016694:	051b      	lsls	r3, r3, #20
 8016696:	4299      	cmp	r1, r3
 8016698:	d1c4      	bne.n	8016624 <_strtod_l+0xa04>
 801669a:	ec51 0b1d 	vmov	r0, r1, d13
 801669e:	f7ea f84b 	bl	8000738 <__aeabi_d2lz>
 80166a2:	f7ea f803 	bl	80006ac <__aeabi_l2d>
 80166a6:	f3c9 0b13 	ubfx	fp, r9, #0, #20
 80166aa:	ec41 0b17 	vmov	d7, r0, r1
 80166ae:	ea4b 0b08 	orr.w	fp, fp, r8
 80166b2:	ea5b 0b0a 	orrs.w	fp, fp, sl
 80166b6:	ee3d db47 	vsub.f64	d13, d13, d7
 80166ba:	d03c      	beq.n	8016736 <_strtod_l+0xb16>
 80166bc:	eeb4 dbca 	vcmpe.f64	d13, d10
 80166c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80166c4:	f53f acf4 	bmi.w	80160b0 <_strtod_l+0x490>
 80166c8:	eeb4 dbcb 	vcmpe.f64	d13, d11
 80166cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80166d0:	dda8      	ble.n	8016624 <_strtod_l+0xa04>
 80166d2:	e4ed      	b.n	80160b0 <_strtod_l+0x490>
 80166d4:	9805      	ldr	r0, [sp, #20]
 80166d6:	b1f0      	cbz	r0, 8016716 <_strtod_l+0xaf6>
 80166d8:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 80166dc:	d81b      	bhi.n	8016716 <_strtod_l+0xaf6>
 80166de:	ed9f 7b22 	vldr	d7, [pc, #136]	; 8016768 <_strtod_l+0xb48>
 80166e2:	eeb4 dbc7 	vcmpe.f64	d13, d7
 80166e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80166ea:	d811      	bhi.n	8016710 <_strtod_l+0xaf0>
 80166ec:	eebc dbcd 	vcvt.u32.f64	s26, d13
 80166f0:	ee1d 3a10 	vmov	r3, s26
 80166f4:	2b01      	cmp	r3, #1
 80166f6:	bf38      	it	cc
 80166f8:	2301      	movcc	r3, #1
 80166fa:	ee0d 3a10 	vmov	s26, r3
 80166fe:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 8016702:	f1ba 0f00 	cmp.w	sl, #0
 8016706:	d113      	bne.n	8016730 <_strtod_l+0xb10>
 8016708:	eeb1 7b4d 	vneg.f64	d7, d13
 801670c:	ec53 2b17 	vmov	r2, r3, d7
 8016710:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 8016714:	1a43      	subs	r3, r0, r1
 8016716:	eeb0 0b48 	vmov.f64	d0, d8
 801671a:	ec43 2b1c 	vmov	d12, r2, r3
 801671e:	910a      	str	r1, [sp, #40]	; 0x28
 8016720:	f7ff f926 	bl	8015970 <__ulp>
 8016724:	990a      	ldr	r1, [sp, #40]	; 0x28
 8016726:	eeac 8b00 	vfma.f64	d8, d12, d0
 801672a:	ec59 8b18 	vmov	r8, r9, d8
 801672e:	e7aa      	b.n	8016686 <_strtod_l+0xa66>
 8016730:	eeb0 7b4d 	vmov.f64	d7, d13
 8016734:	e7ea      	b.n	801670c <_strtod_l+0xaec>
 8016736:	eeb4 dbc9 	vcmpe.f64	d13, d9
 801673a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801673e:	f57f af71 	bpl.w	8016624 <_strtod_l+0xa04>
 8016742:	e4b5      	b.n	80160b0 <_strtod_l+0x490>
 8016744:	2300      	movs	r3, #0
 8016746:	9308      	str	r3, [sp, #32]
 8016748:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801674a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801674c:	6013      	str	r3, [r2, #0]
 801674e:	f7ff baa6 	b.w	8015c9e <_strtod_l+0x7e>
 8016752:	2a65      	cmp	r2, #101	; 0x65
 8016754:	f43f aba2 	beq.w	8015e9c <_strtod_l+0x27c>
 8016758:	2a45      	cmp	r2, #69	; 0x45
 801675a:	f43f ab9f 	beq.w	8015e9c <_strtod_l+0x27c>
 801675e:	2101      	movs	r1, #1
 8016760:	f7ff bbd8 	b.w	8015f14 <_strtod_l+0x2f4>
 8016764:	f3af 8000 	nop.w
 8016768:	ffc00000 	.word	0xffc00000
 801676c:	41dfffff 	.word	0x41dfffff
 8016770:	000fffff 	.word	0x000fffff
 8016774:	7ff00000 	.word	0x7ff00000
 8016778:	7fefffff 	.word	0x7fefffff
 801677c:	7c9fffff 	.word	0x7c9fffff
 8016780:	7fe00000 	.word	0x7fe00000

08016784 <_strtod_r>:
 8016784:	4b01      	ldr	r3, [pc, #4]	; (801678c <_strtod_r+0x8>)
 8016786:	f7ff ba4b 	b.w	8015c20 <_strtod_l>
 801678a:	bf00      	nop
 801678c:	24000070 	.word	0x24000070

08016790 <_strtol_l.constprop.0>:
 8016790:	2b01      	cmp	r3, #1
 8016792:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016796:	d001      	beq.n	801679c <_strtol_l.constprop.0+0xc>
 8016798:	2b24      	cmp	r3, #36	; 0x24
 801679a:	d906      	bls.n	80167aa <_strtol_l.constprop.0+0x1a>
 801679c:	f7fd fef8 	bl	8014590 <__errno>
 80167a0:	2316      	movs	r3, #22
 80167a2:	6003      	str	r3, [r0, #0]
 80167a4:	2000      	movs	r0, #0
 80167a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80167aa:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8016890 <_strtol_l.constprop.0+0x100>
 80167ae:	460d      	mov	r5, r1
 80167b0:	462e      	mov	r6, r5
 80167b2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80167b6:	f81c 7004 	ldrb.w	r7, [ip, r4]
 80167ba:	f017 0708 	ands.w	r7, r7, #8
 80167be:	d1f7      	bne.n	80167b0 <_strtol_l.constprop.0+0x20>
 80167c0:	2c2d      	cmp	r4, #45	; 0x2d
 80167c2:	d132      	bne.n	801682a <_strtol_l.constprop.0+0x9a>
 80167c4:	782c      	ldrb	r4, [r5, #0]
 80167c6:	2701      	movs	r7, #1
 80167c8:	1cb5      	adds	r5, r6, #2
 80167ca:	2b00      	cmp	r3, #0
 80167cc:	d05b      	beq.n	8016886 <_strtol_l.constprop.0+0xf6>
 80167ce:	2b10      	cmp	r3, #16
 80167d0:	d109      	bne.n	80167e6 <_strtol_l.constprop.0+0x56>
 80167d2:	2c30      	cmp	r4, #48	; 0x30
 80167d4:	d107      	bne.n	80167e6 <_strtol_l.constprop.0+0x56>
 80167d6:	782c      	ldrb	r4, [r5, #0]
 80167d8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80167dc:	2c58      	cmp	r4, #88	; 0x58
 80167de:	d14d      	bne.n	801687c <_strtol_l.constprop.0+0xec>
 80167e0:	786c      	ldrb	r4, [r5, #1]
 80167e2:	2310      	movs	r3, #16
 80167e4:	3502      	adds	r5, #2
 80167e6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80167ea:	f108 38ff 	add.w	r8, r8, #4294967295
 80167ee:	f04f 0e00 	mov.w	lr, #0
 80167f2:	fbb8 f9f3 	udiv	r9, r8, r3
 80167f6:	4676      	mov	r6, lr
 80167f8:	fb03 8a19 	mls	sl, r3, r9, r8
 80167fc:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8016800:	f1bc 0f09 	cmp.w	ip, #9
 8016804:	d816      	bhi.n	8016834 <_strtol_l.constprop.0+0xa4>
 8016806:	4664      	mov	r4, ip
 8016808:	42a3      	cmp	r3, r4
 801680a:	dd24      	ble.n	8016856 <_strtol_l.constprop.0+0xc6>
 801680c:	f1be 3fff 	cmp.w	lr, #4294967295
 8016810:	d008      	beq.n	8016824 <_strtol_l.constprop.0+0x94>
 8016812:	45b1      	cmp	r9, r6
 8016814:	d31c      	bcc.n	8016850 <_strtol_l.constprop.0+0xc0>
 8016816:	d101      	bne.n	801681c <_strtol_l.constprop.0+0x8c>
 8016818:	45a2      	cmp	sl, r4
 801681a:	db19      	blt.n	8016850 <_strtol_l.constprop.0+0xc0>
 801681c:	fb06 4603 	mla	r6, r6, r3, r4
 8016820:	f04f 0e01 	mov.w	lr, #1
 8016824:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016828:	e7e8      	b.n	80167fc <_strtol_l.constprop.0+0x6c>
 801682a:	2c2b      	cmp	r4, #43	; 0x2b
 801682c:	bf04      	itt	eq
 801682e:	782c      	ldrbeq	r4, [r5, #0]
 8016830:	1cb5      	addeq	r5, r6, #2
 8016832:	e7ca      	b.n	80167ca <_strtol_l.constprop.0+0x3a>
 8016834:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8016838:	f1bc 0f19 	cmp.w	ip, #25
 801683c:	d801      	bhi.n	8016842 <_strtol_l.constprop.0+0xb2>
 801683e:	3c37      	subs	r4, #55	; 0x37
 8016840:	e7e2      	b.n	8016808 <_strtol_l.constprop.0+0x78>
 8016842:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8016846:	f1bc 0f19 	cmp.w	ip, #25
 801684a:	d804      	bhi.n	8016856 <_strtol_l.constprop.0+0xc6>
 801684c:	3c57      	subs	r4, #87	; 0x57
 801684e:	e7db      	b.n	8016808 <_strtol_l.constprop.0+0x78>
 8016850:	f04f 3eff 	mov.w	lr, #4294967295
 8016854:	e7e6      	b.n	8016824 <_strtol_l.constprop.0+0x94>
 8016856:	f1be 3fff 	cmp.w	lr, #4294967295
 801685a:	d105      	bne.n	8016868 <_strtol_l.constprop.0+0xd8>
 801685c:	2322      	movs	r3, #34	; 0x22
 801685e:	6003      	str	r3, [r0, #0]
 8016860:	4646      	mov	r6, r8
 8016862:	b942      	cbnz	r2, 8016876 <_strtol_l.constprop.0+0xe6>
 8016864:	4630      	mov	r0, r6
 8016866:	e79e      	b.n	80167a6 <_strtol_l.constprop.0+0x16>
 8016868:	b107      	cbz	r7, 801686c <_strtol_l.constprop.0+0xdc>
 801686a:	4276      	negs	r6, r6
 801686c:	2a00      	cmp	r2, #0
 801686e:	d0f9      	beq.n	8016864 <_strtol_l.constprop.0+0xd4>
 8016870:	f1be 0f00 	cmp.w	lr, #0
 8016874:	d000      	beq.n	8016878 <_strtol_l.constprop.0+0xe8>
 8016876:	1e69      	subs	r1, r5, #1
 8016878:	6011      	str	r1, [r2, #0]
 801687a:	e7f3      	b.n	8016864 <_strtol_l.constprop.0+0xd4>
 801687c:	2430      	movs	r4, #48	; 0x30
 801687e:	2b00      	cmp	r3, #0
 8016880:	d1b1      	bne.n	80167e6 <_strtol_l.constprop.0+0x56>
 8016882:	2308      	movs	r3, #8
 8016884:	e7af      	b.n	80167e6 <_strtol_l.constprop.0+0x56>
 8016886:	2c30      	cmp	r4, #48	; 0x30
 8016888:	d0a5      	beq.n	80167d6 <_strtol_l.constprop.0+0x46>
 801688a:	230a      	movs	r3, #10
 801688c:	e7ab      	b.n	80167e6 <_strtol_l.constprop.0+0x56>
 801688e:	bf00      	nop
 8016890:	08017ef1 	.word	0x08017ef1

08016894 <_strtol_r>:
 8016894:	f7ff bf7c 	b.w	8016790 <_strtol_l.constprop.0>

08016898 <__ssputs_r>:
 8016898:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801689c:	688e      	ldr	r6, [r1, #8]
 801689e:	461f      	mov	r7, r3
 80168a0:	42be      	cmp	r6, r7
 80168a2:	680b      	ldr	r3, [r1, #0]
 80168a4:	4682      	mov	sl, r0
 80168a6:	460c      	mov	r4, r1
 80168a8:	4690      	mov	r8, r2
 80168aa:	d82c      	bhi.n	8016906 <__ssputs_r+0x6e>
 80168ac:	898a      	ldrh	r2, [r1, #12]
 80168ae:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80168b2:	d026      	beq.n	8016902 <__ssputs_r+0x6a>
 80168b4:	6965      	ldr	r5, [r4, #20]
 80168b6:	6909      	ldr	r1, [r1, #16]
 80168b8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80168bc:	eba3 0901 	sub.w	r9, r3, r1
 80168c0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80168c4:	1c7b      	adds	r3, r7, #1
 80168c6:	444b      	add	r3, r9
 80168c8:	106d      	asrs	r5, r5, #1
 80168ca:	429d      	cmp	r5, r3
 80168cc:	bf38      	it	cc
 80168ce:	461d      	movcc	r5, r3
 80168d0:	0553      	lsls	r3, r2, #21
 80168d2:	d527      	bpl.n	8016924 <__ssputs_r+0x8c>
 80168d4:	4629      	mov	r1, r5
 80168d6:	f7fc fd7d 	bl	80133d4 <_malloc_r>
 80168da:	4606      	mov	r6, r0
 80168dc:	b360      	cbz	r0, 8016938 <__ssputs_r+0xa0>
 80168de:	6921      	ldr	r1, [r4, #16]
 80168e0:	464a      	mov	r2, r9
 80168e2:	f7fd fe82 	bl	80145ea <memcpy>
 80168e6:	89a3      	ldrh	r3, [r4, #12]
 80168e8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80168ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80168f0:	81a3      	strh	r3, [r4, #12]
 80168f2:	6126      	str	r6, [r4, #16]
 80168f4:	6165      	str	r5, [r4, #20]
 80168f6:	444e      	add	r6, r9
 80168f8:	eba5 0509 	sub.w	r5, r5, r9
 80168fc:	6026      	str	r6, [r4, #0]
 80168fe:	60a5      	str	r5, [r4, #8]
 8016900:	463e      	mov	r6, r7
 8016902:	42be      	cmp	r6, r7
 8016904:	d900      	bls.n	8016908 <__ssputs_r+0x70>
 8016906:	463e      	mov	r6, r7
 8016908:	6820      	ldr	r0, [r4, #0]
 801690a:	4632      	mov	r2, r6
 801690c:	4641      	mov	r1, r8
 801690e:	f000 f9c9 	bl	8016ca4 <memmove>
 8016912:	68a3      	ldr	r3, [r4, #8]
 8016914:	1b9b      	subs	r3, r3, r6
 8016916:	60a3      	str	r3, [r4, #8]
 8016918:	6823      	ldr	r3, [r4, #0]
 801691a:	4433      	add	r3, r6
 801691c:	6023      	str	r3, [r4, #0]
 801691e:	2000      	movs	r0, #0
 8016920:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016924:	462a      	mov	r2, r5
 8016926:	f000 fd90 	bl	801744a <_realloc_r>
 801692a:	4606      	mov	r6, r0
 801692c:	2800      	cmp	r0, #0
 801692e:	d1e0      	bne.n	80168f2 <__ssputs_r+0x5a>
 8016930:	6921      	ldr	r1, [r4, #16]
 8016932:	4650      	mov	r0, sl
 8016934:	f7fe fc64 	bl	8015200 <_free_r>
 8016938:	230c      	movs	r3, #12
 801693a:	f8ca 3000 	str.w	r3, [sl]
 801693e:	89a3      	ldrh	r3, [r4, #12]
 8016940:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016944:	81a3      	strh	r3, [r4, #12]
 8016946:	f04f 30ff 	mov.w	r0, #4294967295
 801694a:	e7e9      	b.n	8016920 <__ssputs_r+0x88>

0801694c <_svfiprintf_r>:
 801694c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016950:	4698      	mov	r8, r3
 8016952:	898b      	ldrh	r3, [r1, #12]
 8016954:	061b      	lsls	r3, r3, #24
 8016956:	b09d      	sub	sp, #116	; 0x74
 8016958:	4607      	mov	r7, r0
 801695a:	460d      	mov	r5, r1
 801695c:	4614      	mov	r4, r2
 801695e:	d50e      	bpl.n	801697e <_svfiprintf_r+0x32>
 8016960:	690b      	ldr	r3, [r1, #16]
 8016962:	b963      	cbnz	r3, 801697e <_svfiprintf_r+0x32>
 8016964:	2140      	movs	r1, #64	; 0x40
 8016966:	f7fc fd35 	bl	80133d4 <_malloc_r>
 801696a:	6028      	str	r0, [r5, #0]
 801696c:	6128      	str	r0, [r5, #16]
 801696e:	b920      	cbnz	r0, 801697a <_svfiprintf_r+0x2e>
 8016970:	230c      	movs	r3, #12
 8016972:	603b      	str	r3, [r7, #0]
 8016974:	f04f 30ff 	mov.w	r0, #4294967295
 8016978:	e0d0      	b.n	8016b1c <_svfiprintf_r+0x1d0>
 801697a:	2340      	movs	r3, #64	; 0x40
 801697c:	616b      	str	r3, [r5, #20]
 801697e:	2300      	movs	r3, #0
 8016980:	9309      	str	r3, [sp, #36]	; 0x24
 8016982:	2320      	movs	r3, #32
 8016984:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016988:	f8cd 800c 	str.w	r8, [sp, #12]
 801698c:	2330      	movs	r3, #48	; 0x30
 801698e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8016b34 <_svfiprintf_r+0x1e8>
 8016992:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016996:	f04f 0901 	mov.w	r9, #1
 801699a:	4623      	mov	r3, r4
 801699c:	469a      	mov	sl, r3
 801699e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80169a2:	b10a      	cbz	r2, 80169a8 <_svfiprintf_r+0x5c>
 80169a4:	2a25      	cmp	r2, #37	; 0x25
 80169a6:	d1f9      	bne.n	801699c <_svfiprintf_r+0x50>
 80169a8:	ebba 0b04 	subs.w	fp, sl, r4
 80169ac:	d00b      	beq.n	80169c6 <_svfiprintf_r+0x7a>
 80169ae:	465b      	mov	r3, fp
 80169b0:	4622      	mov	r2, r4
 80169b2:	4629      	mov	r1, r5
 80169b4:	4638      	mov	r0, r7
 80169b6:	f7ff ff6f 	bl	8016898 <__ssputs_r>
 80169ba:	3001      	adds	r0, #1
 80169bc:	f000 80a9 	beq.w	8016b12 <_svfiprintf_r+0x1c6>
 80169c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80169c2:	445a      	add	r2, fp
 80169c4:	9209      	str	r2, [sp, #36]	; 0x24
 80169c6:	f89a 3000 	ldrb.w	r3, [sl]
 80169ca:	2b00      	cmp	r3, #0
 80169cc:	f000 80a1 	beq.w	8016b12 <_svfiprintf_r+0x1c6>
 80169d0:	2300      	movs	r3, #0
 80169d2:	f04f 32ff 	mov.w	r2, #4294967295
 80169d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80169da:	f10a 0a01 	add.w	sl, sl, #1
 80169de:	9304      	str	r3, [sp, #16]
 80169e0:	9307      	str	r3, [sp, #28]
 80169e2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80169e6:	931a      	str	r3, [sp, #104]	; 0x68
 80169e8:	4654      	mov	r4, sl
 80169ea:	2205      	movs	r2, #5
 80169ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80169f0:	4850      	ldr	r0, [pc, #320]	; (8016b34 <_svfiprintf_r+0x1e8>)
 80169f2:	f7e9 fc75 	bl	80002e0 <memchr>
 80169f6:	9a04      	ldr	r2, [sp, #16]
 80169f8:	b9d8      	cbnz	r0, 8016a32 <_svfiprintf_r+0xe6>
 80169fa:	06d0      	lsls	r0, r2, #27
 80169fc:	bf44      	itt	mi
 80169fe:	2320      	movmi	r3, #32
 8016a00:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016a04:	0711      	lsls	r1, r2, #28
 8016a06:	bf44      	itt	mi
 8016a08:	232b      	movmi	r3, #43	; 0x2b
 8016a0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016a0e:	f89a 3000 	ldrb.w	r3, [sl]
 8016a12:	2b2a      	cmp	r3, #42	; 0x2a
 8016a14:	d015      	beq.n	8016a42 <_svfiprintf_r+0xf6>
 8016a16:	9a07      	ldr	r2, [sp, #28]
 8016a18:	4654      	mov	r4, sl
 8016a1a:	2000      	movs	r0, #0
 8016a1c:	f04f 0c0a 	mov.w	ip, #10
 8016a20:	4621      	mov	r1, r4
 8016a22:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016a26:	3b30      	subs	r3, #48	; 0x30
 8016a28:	2b09      	cmp	r3, #9
 8016a2a:	d94d      	bls.n	8016ac8 <_svfiprintf_r+0x17c>
 8016a2c:	b1b0      	cbz	r0, 8016a5c <_svfiprintf_r+0x110>
 8016a2e:	9207      	str	r2, [sp, #28]
 8016a30:	e014      	b.n	8016a5c <_svfiprintf_r+0x110>
 8016a32:	eba0 0308 	sub.w	r3, r0, r8
 8016a36:	fa09 f303 	lsl.w	r3, r9, r3
 8016a3a:	4313      	orrs	r3, r2
 8016a3c:	9304      	str	r3, [sp, #16]
 8016a3e:	46a2      	mov	sl, r4
 8016a40:	e7d2      	b.n	80169e8 <_svfiprintf_r+0x9c>
 8016a42:	9b03      	ldr	r3, [sp, #12]
 8016a44:	1d19      	adds	r1, r3, #4
 8016a46:	681b      	ldr	r3, [r3, #0]
 8016a48:	9103      	str	r1, [sp, #12]
 8016a4a:	2b00      	cmp	r3, #0
 8016a4c:	bfbb      	ittet	lt
 8016a4e:	425b      	neglt	r3, r3
 8016a50:	f042 0202 	orrlt.w	r2, r2, #2
 8016a54:	9307      	strge	r3, [sp, #28]
 8016a56:	9307      	strlt	r3, [sp, #28]
 8016a58:	bfb8      	it	lt
 8016a5a:	9204      	strlt	r2, [sp, #16]
 8016a5c:	7823      	ldrb	r3, [r4, #0]
 8016a5e:	2b2e      	cmp	r3, #46	; 0x2e
 8016a60:	d10c      	bne.n	8016a7c <_svfiprintf_r+0x130>
 8016a62:	7863      	ldrb	r3, [r4, #1]
 8016a64:	2b2a      	cmp	r3, #42	; 0x2a
 8016a66:	d134      	bne.n	8016ad2 <_svfiprintf_r+0x186>
 8016a68:	9b03      	ldr	r3, [sp, #12]
 8016a6a:	1d1a      	adds	r2, r3, #4
 8016a6c:	681b      	ldr	r3, [r3, #0]
 8016a6e:	9203      	str	r2, [sp, #12]
 8016a70:	2b00      	cmp	r3, #0
 8016a72:	bfb8      	it	lt
 8016a74:	f04f 33ff 	movlt.w	r3, #4294967295
 8016a78:	3402      	adds	r4, #2
 8016a7a:	9305      	str	r3, [sp, #20]
 8016a7c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8016b44 <_svfiprintf_r+0x1f8>
 8016a80:	7821      	ldrb	r1, [r4, #0]
 8016a82:	2203      	movs	r2, #3
 8016a84:	4650      	mov	r0, sl
 8016a86:	f7e9 fc2b 	bl	80002e0 <memchr>
 8016a8a:	b138      	cbz	r0, 8016a9c <_svfiprintf_r+0x150>
 8016a8c:	9b04      	ldr	r3, [sp, #16]
 8016a8e:	eba0 000a 	sub.w	r0, r0, sl
 8016a92:	2240      	movs	r2, #64	; 0x40
 8016a94:	4082      	lsls	r2, r0
 8016a96:	4313      	orrs	r3, r2
 8016a98:	3401      	adds	r4, #1
 8016a9a:	9304      	str	r3, [sp, #16]
 8016a9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016aa0:	4825      	ldr	r0, [pc, #148]	; (8016b38 <_svfiprintf_r+0x1ec>)
 8016aa2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016aa6:	2206      	movs	r2, #6
 8016aa8:	f7e9 fc1a 	bl	80002e0 <memchr>
 8016aac:	2800      	cmp	r0, #0
 8016aae:	d038      	beq.n	8016b22 <_svfiprintf_r+0x1d6>
 8016ab0:	4b22      	ldr	r3, [pc, #136]	; (8016b3c <_svfiprintf_r+0x1f0>)
 8016ab2:	bb1b      	cbnz	r3, 8016afc <_svfiprintf_r+0x1b0>
 8016ab4:	9b03      	ldr	r3, [sp, #12]
 8016ab6:	3307      	adds	r3, #7
 8016ab8:	f023 0307 	bic.w	r3, r3, #7
 8016abc:	3308      	adds	r3, #8
 8016abe:	9303      	str	r3, [sp, #12]
 8016ac0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016ac2:	4433      	add	r3, r6
 8016ac4:	9309      	str	r3, [sp, #36]	; 0x24
 8016ac6:	e768      	b.n	801699a <_svfiprintf_r+0x4e>
 8016ac8:	fb0c 3202 	mla	r2, ip, r2, r3
 8016acc:	460c      	mov	r4, r1
 8016ace:	2001      	movs	r0, #1
 8016ad0:	e7a6      	b.n	8016a20 <_svfiprintf_r+0xd4>
 8016ad2:	2300      	movs	r3, #0
 8016ad4:	3401      	adds	r4, #1
 8016ad6:	9305      	str	r3, [sp, #20]
 8016ad8:	4619      	mov	r1, r3
 8016ada:	f04f 0c0a 	mov.w	ip, #10
 8016ade:	4620      	mov	r0, r4
 8016ae0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016ae4:	3a30      	subs	r2, #48	; 0x30
 8016ae6:	2a09      	cmp	r2, #9
 8016ae8:	d903      	bls.n	8016af2 <_svfiprintf_r+0x1a6>
 8016aea:	2b00      	cmp	r3, #0
 8016aec:	d0c6      	beq.n	8016a7c <_svfiprintf_r+0x130>
 8016aee:	9105      	str	r1, [sp, #20]
 8016af0:	e7c4      	b.n	8016a7c <_svfiprintf_r+0x130>
 8016af2:	fb0c 2101 	mla	r1, ip, r1, r2
 8016af6:	4604      	mov	r4, r0
 8016af8:	2301      	movs	r3, #1
 8016afa:	e7f0      	b.n	8016ade <_svfiprintf_r+0x192>
 8016afc:	ab03      	add	r3, sp, #12
 8016afe:	9300      	str	r3, [sp, #0]
 8016b00:	462a      	mov	r2, r5
 8016b02:	4b0f      	ldr	r3, [pc, #60]	; (8016b40 <_svfiprintf_r+0x1f4>)
 8016b04:	a904      	add	r1, sp, #16
 8016b06:	4638      	mov	r0, r7
 8016b08:	f7fc fd82 	bl	8013610 <_printf_float>
 8016b0c:	1c42      	adds	r2, r0, #1
 8016b0e:	4606      	mov	r6, r0
 8016b10:	d1d6      	bne.n	8016ac0 <_svfiprintf_r+0x174>
 8016b12:	89ab      	ldrh	r3, [r5, #12]
 8016b14:	065b      	lsls	r3, r3, #25
 8016b16:	f53f af2d 	bmi.w	8016974 <_svfiprintf_r+0x28>
 8016b1a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016b1c:	b01d      	add	sp, #116	; 0x74
 8016b1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016b22:	ab03      	add	r3, sp, #12
 8016b24:	9300      	str	r3, [sp, #0]
 8016b26:	462a      	mov	r2, r5
 8016b28:	4b05      	ldr	r3, [pc, #20]	; (8016b40 <_svfiprintf_r+0x1f4>)
 8016b2a:	a904      	add	r1, sp, #16
 8016b2c:	4638      	mov	r0, r7
 8016b2e:	f7fc fff7 	bl	8013b20 <_printf_i>
 8016b32:	e7eb      	b.n	8016b0c <_svfiprintf_r+0x1c0>
 8016b34:	08017ff1 	.word	0x08017ff1
 8016b38:	08017ffb 	.word	0x08017ffb
 8016b3c:	08013611 	.word	0x08013611
 8016b40:	08016899 	.word	0x08016899
 8016b44:	08017ff7 	.word	0x08017ff7

08016b48 <__sflush_r>:
 8016b48:	898a      	ldrh	r2, [r1, #12]
 8016b4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016b4e:	4605      	mov	r5, r0
 8016b50:	0710      	lsls	r0, r2, #28
 8016b52:	460c      	mov	r4, r1
 8016b54:	d458      	bmi.n	8016c08 <__sflush_r+0xc0>
 8016b56:	684b      	ldr	r3, [r1, #4]
 8016b58:	2b00      	cmp	r3, #0
 8016b5a:	dc05      	bgt.n	8016b68 <__sflush_r+0x20>
 8016b5c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8016b5e:	2b00      	cmp	r3, #0
 8016b60:	dc02      	bgt.n	8016b68 <__sflush_r+0x20>
 8016b62:	2000      	movs	r0, #0
 8016b64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016b68:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016b6a:	2e00      	cmp	r6, #0
 8016b6c:	d0f9      	beq.n	8016b62 <__sflush_r+0x1a>
 8016b6e:	2300      	movs	r3, #0
 8016b70:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8016b74:	682f      	ldr	r7, [r5, #0]
 8016b76:	6a21      	ldr	r1, [r4, #32]
 8016b78:	602b      	str	r3, [r5, #0]
 8016b7a:	d032      	beq.n	8016be2 <__sflush_r+0x9a>
 8016b7c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8016b7e:	89a3      	ldrh	r3, [r4, #12]
 8016b80:	075a      	lsls	r2, r3, #29
 8016b82:	d505      	bpl.n	8016b90 <__sflush_r+0x48>
 8016b84:	6863      	ldr	r3, [r4, #4]
 8016b86:	1ac0      	subs	r0, r0, r3
 8016b88:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016b8a:	b10b      	cbz	r3, 8016b90 <__sflush_r+0x48>
 8016b8c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8016b8e:	1ac0      	subs	r0, r0, r3
 8016b90:	2300      	movs	r3, #0
 8016b92:	4602      	mov	r2, r0
 8016b94:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016b96:	6a21      	ldr	r1, [r4, #32]
 8016b98:	4628      	mov	r0, r5
 8016b9a:	47b0      	blx	r6
 8016b9c:	1c43      	adds	r3, r0, #1
 8016b9e:	89a3      	ldrh	r3, [r4, #12]
 8016ba0:	d106      	bne.n	8016bb0 <__sflush_r+0x68>
 8016ba2:	6829      	ldr	r1, [r5, #0]
 8016ba4:	291d      	cmp	r1, #29
 8016ba6:	d82b      	bhi.n	8016c00 <__sflush_r+0xb8>
 8016ba8:	4a29      	ldr	r2, [pc, #164]	; (8016c50 <__sflush_r+0x108>)
 8016baa:	410a      	asrs	r2, r1
 8016bac:	07d6      	lsls	r6, r2, #31
 8016bae:	d427      	bmi.n	8016c00 <__sflush_r+0xb8>
 8016bb0:	2200      	movs	r2, #0
 8016bb2:	6062      	str	r2, [r4, #4]
 8016bb4:	04d9      	lsls	r1, r3, #19
 8016bb6:	6922      	ldr	r2, [r4, #16]
 8016bb8:	6022      	str	r2, [r4, #0]
 8016bba:	d504      	bpl.n	8016bc6 <__sflush_r+0x7e>
 8016bbc:	1c42      	adds	r2, r0, #1
 8016bbe:	d101      	bne.n	8016bc4 <__sflush_r+0x7c>
 8016bc0:	682b      	ldr	r3, [r5, #0]
 8016bc2:	b903      	cbnz	r3, 8016bc6 <__sflush_r+0x7e>
 8016bc4:	6560      	str	r0, [r4, #84]	; 0x54
 8016bc6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016bc8:	602f      	str	r7, [r5, #0]
 8016bca:	2900      	cmp	r1, #0
 8016bcc:	d0c9      	beq.n	8016b62 <__sflush_r+0x1a>
 8016bce:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016bd2:	4299      	cmp	r1, r3
 8016bd4:	d002      	beq.n	8016bdc <__sflush_r+0x94>
 8016bd6:	4628      	mov	r0, r5
 8016bd8:	f7fe fb12 	bl	8015200 <_free_r>
 8016bdc:	2000      	movs	r0, #0
 8016bde:	6360      	str	r0, [r4, #52]	; 0x34
 8016be0:	e7c0      	b.n	8016b64 <__sflush_r+0x1c>
 8016be2:	2301      	movs	r3, #1
 8016be4:	4628      	mov	r0, r5
 8016be6:	47b0      	blx	r6
 8016be8:	1c41      	adds	r1, r0, #1
 8016bea:	d1c8      	bne.n	8016b7e <__sflush_r+0x36>
 8016bec:	682b      	ldr	r3, [r5, #0]
 8016bee:	2b00      	cmp	r3, #0
 8016bf0:	d0c5      	beq.n	8016b7e <__sflush_r+0x36>
 8016bf2:	2b1d      	cmp	r3, #29
 8016bf4:	d001      	beq.n	8016bfa <__sflush_r+0xb2>
 8016bf6:	2b16      	cmp	r3, #22
 8016bf8:	d101      	bne.n	8016bfe <__sflush_r+0xb6>
 8016bfa:	602f      	str	r7, [r5, #0]
 8016bfc:	e7b1      	b.n	8016b62 <__sflush_r+0x1a>
 8016bfe:	89a3      	ldrh	r3, [r4, #12]
 8016c00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016c04:	81a3      	strh	r3, [r4, #12]
 8016c06:	e7ad      	b.n	8016b64 <__sflush_r+0x1c>
 8016c08:	690f      	ldr	r7, [r1, #16]
 8016c0a:	2f00      	cmp	r7, #0
 8016c0c:	d0a9      	beq.n	8016b62 <__sflush_r+0x1a>
 8016c0e:	0793      	lsls	r3, r2, #30
 8016c10:	680e      	ldr	r6, [r1, #0]
 8016c12:	bf08      	it	eq
 8016c14:	694b      	ldreq	r3, [r1, #20]
 8016c16:	600f      	str	r7, [r1, #0]
 8016c18:	bf18      	it	ne
 8016c1a:	2300      	movne	r3, #0
 8016c1c:	eba6 0807 	sub.w	r8, r6, r7
 8016c20:	608b      	str	r3, [r1, #8]
 8016c22:	f1b8 0f00 	cmp.w	r8, #0
 8016c26:	dd9c      	ble.n	8016b62 <__sflush_r+0x1a>
 8016c28:	6a21      	ldr	r1, [r4, #32]
 8016c2a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8016c2c:	4643      	mov	r3, r8
 8016c2e:	463a      	mov	r2, r7
 8016c30:	4628      	mov	r0, r5
 8016c32:	47b0      	blx	r6
 8016c34:	2800      	cmp	r0, #0
 8016c36:	dc06      	bgt.n	8016c46 <__sflush_r+0xfe>
 8016c38:	89a3      	ldrh	r3, [r4, #12]
 8016c3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016c3e:	81a3      	strh	r3, [r4, #12]
 8016c40:	f04f 30ff 	mov.w	r0, #4294967295
 8016c44:	e78e      	b.n	8016b64 <__sflush_r+0x1c>
 8016c46:	4407      	add	r7, r0
 8016c48:	eba8 0800 	sub.w	r8, r8, r0
 8016c4c:	e7e9      	b.n	8016c22 <__sflush_r+0xda>
 8016c4e:	bf00      	nop
 8016c50:	dfbffffe 	.word	0xdfbffffe

08016c54 <_fflush_r>:
 8016c54:	b538      	push	{r3, r4, r5, lr}
 8016c56:	690b      	ldr	r3, [r1, #16]
 8016c58:	4605      	mov	r5, r0
 8016c5a:	460c      	mov	r4, r1
 8016c5c:	b913      	cbnz	r3, 8016c64 <_fflush_r+0x10>
 8016c5e:	2500      	movs	r5, #0
 8016c60:	4628      	mov	r0, r5
 8016c62:	bd38      	pop	{r3, r4, r5, pc}
 8016c64:	b118      	cbz	r0, 8016c6e <_fflush_r+0x1a>
 8016c66:	6a03      	ldr	r3, [r0, #32]
 8016c68:	b90b      	cbnz	r3, 8016c6e <_fflush_r+0x1a>
 8016c6a:	f7fd fb0b 	bl	8014284 <__sinit>
 8016c6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016c72:	2b00      	cmp	r3, #0
 8016c74:	d0f3      	beq.n	8016c5e <_fflush_r+0xa>
 8016c76:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8016c78:	07d0      	lsls	r0, r2, #31
 8016c7a:	d404      	bmi.n	8016c86 <_fflush_r+0x32>
 8016c7c:	0599      	lsls	r1, r3, #22
 8016c7e:	d402      	bmi.n	8016c86 <_fflush_r+0x32>
 8016c80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016c82:	f7fd fcb0 	bl	80145e6 <__retarget_lock_acquire_recursive>
 8016c86:	4628      	mov	r0, r5
 8016c88:	4621      	mov	r1, r4
 8016c8a:	f7ff ff5d 	bl	8016b48 <__sflush_r>
 8016c8e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016c90:	07da      	lsls	r2, r3, #31
 8016c92:	4605      	mov	r5, r0
 8016c94:	d4e4      	bmi.n	8016c60 <_fflush_r+0xc>
 8016c96:	89a3      	ldrh	r3, [r4, #12]
 8016c98:	059b      	lsls	r3, r3, #22
 8016c9a:	d4e1      	bmi.n	8016c60 <_fflush_r+0xc>
 8016c9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016c9e:	f7fd fca3 	bl	80145e8 <__retarget_lock_release_recursive>
 8016ca2:	e7dd      	b.n	8016c60 <_fflush_r+0xc>

08016ca4 <memmove>:
 8016ca4:	4288      	cmp	r0, r1
 8016ca6:	b510      	push	{r4, lr}
 8016ca8:	eb01 0402 	add.w	r4, r1, r2
 8016cac:	d902      	bls.n	8016cb4 <memmove+0x10>
 8016cae:	4284      	cmp	r4, r0
 8016cb0:	4623      	mov	r3, r4
 8016cb2:	d807      	bhi.n	8016cc4 <memmove+0x20>
 8016cb4:	1e43      	subs	r3, r0, #1
 8016cb6:	42a1      	cmp	r1, r4
 8016cb8:	d008      	beq.n	8016ccc <memmove+0x28>
 8016cba:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016cbe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8016cc2:	e7f8      	b.n	8016cb6 <memmove+0x12>
 8016cc4:	4402      	add	r2, r0
 8016cc6:	4601      	mov	r1, r0
 8016cc8:	428a      	cmp	r2, r1
 8016cca:	d100      	bne.n	8016cce <memmove+0x2a>
 8016ccc:	bd10      	pop	{r4, pc}
 8016cce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8016cd2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8016cd6:	e7f7      	b.n	8016cc8 <memmove+0x24>

08016cd8 <strncmp>:
 8016cd8:	b510      	push	{r4, lr}
 8016cda:	b16a      	cbz	r2, 8016cf8 <strncmp+0x20>
 8016cdc:	3901      	subs	r1, #1
 8016cde:	1884      	adds	r4, r0, r2
 8016ce0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016ce4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8016ce8:	429a      	cmp	r2, r3
 8016cea:	d103      	bne.n	8016cf4 <strncmp+0x1c>
 8016cec:	42a0      	cmp	r0, r4
 8016cee:	d001      	beq.n	8016cf4 <strncmp+0x1c>
 8016cf0:	2a00      	cmp	r2, #0
 8016cf2:	d1f5      	bne.n	8016ce0 <strncmp+0x8>
 8016cf4:	1ad0      	subs	r0, r2, r3
 8016cf6:	bd10      	pop	{r4, pc}
 8016cf8:	4610      	mov	r0, r2
 8016cfa:	e7fc      	b.n	8016cf6 <strncmp+0x1e>
 8016cfc:	0000      	movs	r0, r0
	...

08016d00 <nan>:
 8016d00:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8016d08 <nan+0x8>
 8016d04:	4770      	bx	lr
 8016d06:	bf00      	nop
 8016d08:	00000000 	.word	0x00000000
 8016d0c:	7ff80000 	.word	0x7ff80000

08016d10 <__assert_func>:
 8016d10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8016d12:	4614      	mov	r4, r2
 8016d14:	461a      	mov	r2, r3
 8016d16:	4b09      	ldr	r3, [pc, #36]	; (8016d3c <__assert_func+0x2c>)
 8016d18:	681b      	ldr	r3, [r3, #0]
 8016d1a:	4605      	mov	r5, r0
 8016d1c:	68d8      	ldr	r0, [r3, #12]
 8016d1e:	b14c      	cbz	r4, 8016d34 <__assert_func+0x24>
 8016d20:	4b07      	ldr	r3, [pc, #28]	; (8016d40 <__assert_func+0x30>)
 8016d22:	9100      	str	r1, [sp, #0]
 8016d24:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8016d28:	4906      	ldr	r1, [pc, #24]	; (8016d44 <__assert_func+0x34>)
 8016d2a:	462b      	mov	r3, r5
 8016d2c:	f000 fbca 	bl	80174c4 <fiprintf>
 8016d30:	f000 fbda 	bl	80174e8 <abort>
 8016d34:	4b04      	ldr	r3, [pc, #16]	; (8016d48 <__assert_func+0x38>)
 8016d36:	461c      	mov	r4, r3
 8016d38:	e7f3      	b.n	8016d22 <__assert_func+0x12>
 8016d3a:	bf00      	nop
 8016d3c:	2400006c 	.word	0x2400006c
 8016d40:	0801800a 	.word	0x0801800a
 8016d44:	08018017 	.word	0x08018017
 8016d48:	08018045 	.word	0x08018045

08016d4c <_calloc_r>:
 8016d4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016d4e:	fba1 2402 	umull	r2, r4, r1, r2
 8016d52:	b94c      	cbnz	r4, 8016d68 <_calloc_r+0x1c>
 8016d54:	4611      	mov	r1, r2
 8016d56:	9201      	str	r2, [sp, #4]
 8016d58:	f7fc fb3c 	bl	80133d4 <_malloc_r>
 8016d5c:	9a01      	ldr	r2, [sp, #4]
 8016d5e:	4605      	mov	r5, r0
 8016d60:	b930      	cbnz	r0, 8016d70 <_calloc_r+0x24>
 8016d62:	4628      	mov	r0, r5
 8016d64:	b003      	add	sp, #12
 8016d66:	bd30      	pop	{r4, r5, pc}
 8016d68:	220c      	movs	r2, #12
 8016d6a:	6002      	str	r2, [r0, #0]
 8016d6c:	2500      	movs	r5, #0
 8016d6e:	e7f8      	b.n	8016d62 <_calloc_r+0x16>
 8016d70:	4621      	mov	r1, r4
 8016d72:	f7fd fb54 	bl	801441e <memset>
 8016d76:	e7f4      	b.n	8016d62 <_calloc_r+0x16>

08016d78 <rshift>:
 8016d78:	6903      	ldr	r3, [r0, #16]
 8016d7a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8016d7e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016d82:	ea4f 1261 	mov.w	r2, r1, asr #5
 8016d86:	f100 0414 	add.w	r4, r0, #20
 8016d8a:	dd45      	ble.n	8016e18 <rshift+0xa0>
 8016d8c:	f011 011f 	ands.w	r1, r1, #31
 8016d90:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8016d94:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8016d98:	d10c      	bne.n	8016db4 <rshift+0x3c>
 8016d9a:	f100 0710 	add.w	r7, r0, #16
 8016d9e:	4629      	mov	r1, r5
 8016da0:	42b1      	cmp	r1, r6
 8016da2:	d334      	bcc.n	8016e0e <rshift+0x96>
 8016da4:	1a9b      	subs	r3, r3, r2
 8016da6:	009b      	lsls	r3, r3, #2
 8016da8:	1eea      	subs	r2, r5, #3
 8016daa:	4296      	cmp	r6, r2
 8016dac:	bf38      	it	cc
 8016dae:	2300      	movcc	r3, #0
 8016db0:	4423      	add	r3, r4
 8016db2:	e015      	b.n	8016de0 <rshift+0x68>
 8016db4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8016db8:	f1c1 0820 	rsb	r8, r1, #32
 8016dbc:	40cf      	lsrs	r7, r1
 8016dbe:	f105 0e04 	add.w	lr, r5, #4
 8016dc2:	46a1      	mov	r9, r4
 8016dc4:	4576      	cmp	r6, lr
 8016dc6:	46f4      	mov	ip, lr
 8016dc8:	d815      	bhi.n	8016df6 <rshift+0x7e>
 8016dca:	1a9a      	subs	r2, r3, r2
 8016dcc:	0092      	lsls	r2, r2, #2
 8016dce:	3a04      	subs	r2, #4
 8016dd0:	3501      	adds	r5, #1
 8016dd2:	42ae      	cmp	r6, r5
 8016dd4:	bf38      	it	cc
 8016dd6:	2200      	movcc	r2, #0
 8016dd8:	18a3      	adds	r3, r4, r2
 8016dda:	50a7      	str	r7, [r4, r2]
 8016ddc:	b107      	cbz	r7, 8016de0 <rshift+0x68>
 8016dde:	3304      	adds	r3, #4
 8016de0:	1b1a      	subs	r2, r3, r4
 8016de2:	42a3      	cmp	r3, r4
 8016de4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8016de8:	bf08      	it	eq
 8016dea:	2300      	moveq	r3, #0
 8016dec:	6102      	str	r2, [r0, #16]
 8016dee:	bf08      	it	eq
 8016df0:	6143      	streq	r3, [r0, #20]
 8016df2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016df6:	f8dc c000 	ldr.w	ip, [ip]
 8016dfa:	fa0c fc08 	lsl.w	ip, ip, r8
 8016dfe:	ea4c 0707 	orr.w	r7, ip, r7
 8016e02:	f849 7b04 	str.w	r7, [r9], #4
 8016e06:	f85e 7b04 	ldr.w	r7, [lr], #4
 8016e0a:	40cf      	lsrs	r7, r1
 8016e0c:	e7da      	b.n	8016dc4 <rshift+0x4c>
 8016e0e:	f851 cb04 	ldr.w	ip, [r1], #4
 8016e12:	f847 cf04 	str.w	ip, [r7, #4]!
 8016e16:	e7c3      	b.n	8016da0 <rshift+0x28>
 8016e18:	4623      	mov	r3, r4
 8016e1a:	e7e1      	b.n	8016de0 <rshift+0x68>

08016e1c <__hexdig_fun>:
 8016e1c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8016e20:	2b09      	cmp	r3, #9
 8016e22:	d802      	bhi.n	8016e2a <__hexdig_fun+0xe>
 8016e24:	3820      	subs	r0, #32
 8016e26:	b2c0      	uxtb	r0, r0
 8016e28:	4770      	bx	lr
 8016e2a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8016e2e:	2b05      	cmp	r3, #5
 8016e30:	d801      	bhi.n	8016e36 <__hexdig_fun+0x1a>
 8016e32:	3847      	subs	r0, #71	; 0x47
 8016e34:	e7f7      	b.n	8016e26 <__hexdig_fun+0xa>
 8016e36:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8016e3a:	2b05      	cmp	r3, #5
 8016e3c:	d801      	bhi.n	8016e42 <__hexdig_fun+0x26>
 8016e3e:	3827      	subs	r0, #39	; 0x27
 8016e40:	e7f1      	b.n	8016e26 <__hexdig_fun+0xa>
 8016e42:	2000      	movs	r0, #0
 8016e44:	4770      	bx	lr
	...

08016e48 <__gethex>:
 8016e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016e4c:	4617      	mov	r7, r2
 8016e4e:	680a      	ldr	r2, [r1, #0]
 8016e50:	b085      	sub	sp, #20
 8016e52:	f102 0b02 	add.w	fp, r2, #2
 8016e56:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8016e5a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8016e5e:	4681      	mov	r9, r0
 8016e60:	468a      	mov	sl, r1
 8016e62:	9302      	str	r3, [sp, #8]
 8016e64:	32fe      	adds	r2, #254	; 0xfe
 8016e66:	eb02 030b 	add.w	r3, r2, fp
 8016e6a:	46d8      	mov	r8, fp
 8016e6c:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8016e70:	9301      	str	r3, [sp, #4]
 8016e72:	2830      	cmp	r0, #48	; 0x30
 8016e74:	d0f7      	beq.n	8016e66 <__gethex+0x1e>
 8016e76:	f7ff ffd1 	bl	8016e1c <__hexdig_fun>
 8016e7a:	4604      	mov	r4, r0
 8016e7c:	2800      	cmp	r0, #0
 8016e7e:	d138      	bne.n	8016ef2 <__gethex+0xaa>
 8016e80:	49a7      	ldr	r1, [pc, #668]	; (8017120 <__gethex+0x2d8>)
 8016e82:	2201      	movs	r2, #1
 8016e84:	4640      	mov	r0, r8
 8016e86:	f7ff ff27 	bl	8016cd8 <strncmp>
 8016e8a:	4606      	mov	r6, r0
 8016e8c:	2800      	cmp	r0, #0
 8016e8e:	d169      	bne.n	8016f64 <__gethex+0x11c>
 8016e90:	f898 0001 	ldrb.w	r0, [r8, #1]
 8016e94:	465d      	mov	r5, fp
 8016e96:	f7ff ffc1 	bl	8016e1c <__hexdig_fun>
 8016e9a:	2800      	cmp	r0, #0
 8016e9c:	d064      	beq.n	8016f68 <__gethex+0x120>
 8016e9e:	465a      	mov	r2, fp
 8016ea0:	7810      	ldrb	r0, [r2, #0]
 8016ea2:	2830      	cmp	r0, #48	; 0x30
 8016ea4:	4690      	mov	r8, r2
 8016ea6:	f102 0201 	add.w	r2, r2, #1
 8016eaa:	d0f9      	beq.n	8016ea0 <__gethex+0x58>
 8016eac:	f7ff ffb6 	bl	8016e1c <__hexdig_fun>
 8016eb0:	2301      	movs	r3, #1
 8016eb2:	fab0 f480 	clz	r4, r0
 8016eb6:	0964      	lsrs	r4, r4, #5
 8016eb8:	465e      	mov	r6, fp
 8016eba:	9301      	str	r3, [sp, #4]
 8016ebc:	4642      	mov	r2, r8
 8016ebe:	4615      	mov	r5, r2
 8016ec0:	3201      	adds	r2, #1
 8016ec2:	7828      	ldrb	r0, [r5, #0]
 8016ec4:	f7ff ffaa 	bl	8016e1c <__hexdig_fun>
 8016ec8:	2800      	cmp	r0, #0
 8016eca:	d1f8      	bne.n	8016ebe <__gethex+0x76>
 8016ecc:	4994      	ldr	r1, [pc, #592]	; (8017120 <__gethex+0x2d8>)
 8016ece:	2201      	movs	r2, #1
 8016ed0:	4628      	mov	r0, r5
 8016ed2:	f7ff ff01 	bl	8016cd8 <strncmp>
 8016ed6:	b978      	cbnz	r0, 8016ef8 <__gethex+0xb0>
 8016ed8:	b946      	cbnz	r6, 8016eec <__gethex+0xa4>
 8016eda:	1c6e      	adds	r6, r5, #1
 8016edc:	4632      	mov	r2, r6
 8016ede:	4615      	mov	r5, r2
 8016ee0:	3201      	adds	r2, #1
 8016ee2:	7828      	ldrb	r0, [r5, #0]
 8016ee4:	f7ff ff9a 	bl	8016e1c <__hexdig_fun>
 8016ee8:	2800      	cmp	r0, #0
 8016eea:	d1f8      	bne.n	8016ede <__gethex+0x96>
 8016eec:	1b73      	subs	r3, r6, r5
 8016eee:	009e      	lsls	r6, r3, #2
 8016ef0:	e004      	b.n	8016efc <__gethex+0xb4>
 8016ef2:	2400      	movs	r4, #0
 8016ef4:	4626      	mov	r6, r4
 8016ef6:	e7e1      	b.n	8016ebc <__gethex+0x74>
 8016ef8:	2e00      	cmp	r6, #0
 8016efa:	d1f7      	bne.n	8016eec <__gethex+0xa4>
 8016efc:	782b      	ldrb	r3, [r5, #0]
 8016efe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8016f02:	2b50      	cmp	r3, #80	; 0x50
 8016f04:	d13d      	bne.n	8016f82 <__gethex+0x13a>
 8016f06:	786b      	ldrb	r3, [r5, #1]
 8016f08:	2b2b      	cmp	r3, #43	; 0x2b
 8016f0a:	d02f      	beq.n	8016f6c <__gethex+0x124>
 8016f0c:	2b2d      	cmp	r3, #45	; 0x2d
 8016f0e:	d031      	beq.n	8016f74 <__gethex+0x12c>
 8016f10:	1c69      	adds	r1, r5, #1
 8016f12:	f04f 0b00 	mov.w	fp, #0
 8016f16:	7808      	ldrb	r0, [r1, #0]
 8016f18:	f7ff ff80 	bl	8016e1c <__hexdig_fun>
 8016f1c:	1e42      	subs	r2, r0, #1
 8016f1e:	b2d2      	uxtb	r2, r2
 8016f20:	2a18      	cmp	r2, #24
 8016f22:	d82e      	bhi.n	8016f82 <__gethex+0x13a>
 8016f24:	f1a0 0210 	sub.w	r2, r0, #16
 8016f28:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8016f2c:	f7ff ff76 	bl	8016e1c <__hexdig_fun>
 8016f30:	f100 3cff 	add.w	ip, r0, #4294967295
 8016f34:	fa5f fc8c 	uxtb.w	ip, ip
 8016f38:	f1bc 0f18 	cmp.w	ip, #24
 8016f3c:	d91d      	bls.n	8016f7a <__gethex+0x132>
 8016f3e:	f1bb 0f00 	cmp.w	fp, #0
 8016f42:	d000      	beq.n	8016f46 <__gethex+0xfe>
 8016f44:	4252      	negs	r2, r2
 8016f46:	4416      	add	r6, r2
 8016f48:	f8ca 1000 	str.w	r1, [sl]
 8016f4c:	b1dc      	cbz	r4, 8016f86 <__gethex+0x13e>
 8016f4e:	9b01      	ldr	r3, [sp, #4]
 8016f50:	2b00      	cmp	r3, #0
 8016f52:	bf14      	ite	ne
 8016f54:	f04f 0800 	movne.w	r8, #0
 8016f58:	f04f 0806 	moveq.w	r8, #6
 8016f5c:	4640      	mov	r0, r8
 8016f5e:	b005      	add	sp, #20
 8016f60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016f64:	4645      	mov	r5, r8
 8016f66:	4626      	mov	r6, r4
 8016f68:	2401      	movs	r4, #1
 8016f6a:	e7c7      	b.n	8016efc <__gethex+0xb4>
 8016f6c:	f04f 0b00 	mov.w	fp, #0
 8016f70:	1ca9      	adds	r1, r5, #2
 8016f72:	e7d0      	b.n	8016f16 <__gethex+0xce>
 8016f74:	f04f 0b01 	mov.w	fp, #1
 8016f78:	e7fa      	b.n	8016f70 <__gethex+0x128>
 8016f7a:	230a      	movs	r3, #10
 8016f7c:	fb03 0002 	mla	r0, r3, r2, r0
 8016f80:	e7d0      	b.n	8016f24 <__gethex+0xdc>
 8016f82:	4629      	mov	r1, r5
 8016f84:	e7e0      	b.n	8016f48 <__gethex+0x100>
 8016f86:	eba5 0308 	sub.w	r3, r5, r8
 8016f8a:	3b01      	subs	r3, #1
 8016f8c:	4621      	mov	r1, r4
 8016f8e:	2b07      	cmp	r3, #7
 8016f90:	dc0a      	bgt.n	8016fa8 <__gethex+0x160>
 8016f92:	4648      	mov	r0, r9
 8016f94:	f7fe f980 	bl	8015298 <_Balloc>
 8016f98:	4604      	mov	r4, r0
 8016f9a:	b940      	cbnz	r0, 8016fae <__gethex+0x166>
 8016f9c:	4b61      	ldr	r3, [pc, #388]	; (8017124 <__gethex+0x2dc>)
 8016f9e:	4602      	mov	r2, r0
 8016fa0:	21e4      	movs	r1, #228	; 0xe4
 8016fa2:	4861      	ldr	r0, [pc, #388]	; (8017128 <__gethex+0x2e0>)
 8016fa4:	f7ff feb4 	bl	8016d10 <__assert_func>
 8016fa8:	3101      	adds	r1, #1
 8016faa:	105b      	asrs	r3, r3, #1
 8016fac:	e7ef      	b.n	8016f8e <__gethex+0x146>
 8016fae:	f100 0a14 	add.w	sl, r0, #20
 8016fb2:	2300      	movs	r3, #0
 8016fb4:	495a      	ldr	r1, [pc, #360]	; (8017120 <__gethex+0x2d8>)
 8016fb6:	f8cd a004 	str.w	sl, [sp, #4]
 8016fba:	469b      	mov	fp, r3
 8016fbc:	45a8      	cmp	r8, r5
 8016fbe:	d342      	bcc.n	8017046 <__gethex+0x1fe>
 8016fc0:	9801      	ldr	r0, [sp, #4]
 8016fc2:	f840 bb04 	str.w	fp, [r0], #4
 8016fc6:	eba0 000a 	sub.w	r0, r0, sl
 8016fca:	1080      	asrs	r0, r0, #2
 8016fcc:	6120      	str	r0, [r4, #16]
 8016fce:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8016fd2:	4658      	mov	r0, fp
 8016fd4:	f7fe fa52 	bl	801547c <__hi0bits>
 8016fd8:	683d      	ldr	r5, [r7, #0]
 8016fda:	eba8 0000 	sub.w	r0, r8, r0
 8016fde:	42a8      	cmp	r0, r5
 8016fe0:	dd59      	ble.n	8017096 <__gethex+0x24e>
 8016fe2:	eba0 0805 	sub.w	r8, r0, r5
 8016fe6:	4641      	mov	r1, r8
 8016fe8:	4620      	mov	r0, r4
 8016fea:	f7fe fdde 	bl	8015baa <__any_on>
 8016fee:	4683      	mov	fp, r0
 8016ff0:	b1b8      	cbz	r0, 8017022 <__gethex+0x1da>
 8016ff2:	f108 33ff 	add.w	r3, r8, #4294967295
 8016ff6:	1159      	asrs	r1, r3, #5
 8016ff8:	f003 021f 	and.w	r2, r3, #31
 8016ffc:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8017000:	f04f 0b01 	mov.w	fp, #1
 8017004:	fa0b f202 	lsl.w	r2, fp, r2
 8017008:	420a      	tst	r2, r1
 801700a:	d00a      	beq.n	8017022 <__gethex+0x1da>
 801700c:	455b      	cmp	r3, fp
 801700e:	dd06      	ble.n	801701e <__gethex+0x1d6>
 8017010:	f1a8 0102 	sub.w	r1, r8, #2
 8017014:	4620      	mov	r0, r4
 8017016:	f7fe fdc8 	bl	8015baa <__any_on>
 801701a:	2800      	cmp	r0, #0
 801701c:	d138      	bne.n	8017090 <__gethex+0x248>
 801701e:	f04f 0b02 	mov.w	fp, #2
 8017022:	4641      	mov	r1, r8
 8017024:	4620      	mov	r0, r4
 8017026:	f7ff fea7 	bl	8016d78 <rshift>
 801702a:	4446      	add	r6, r8
 801702c:	68bb      	ldr	r3, [r7, #8]
 801702e:	42b3      	cmp	r3, r6
 8017030:	da41      	bge.n	80170b6 <__gethex+0x26e>
 8017032:	4621      	mov	r1, r4
 8017034:	4648      	mov	r0, r9
 8017036:	f7fe f96f 	bl	8015318 <_Bfree>
 801703a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801703c:	2300      	movs	r3, #0
 801703e:	6013      	str	r3, [r2, #0]
 8017040:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8017044:	e78a      	b.n	8016f5c <__gethex+0x114>
 8017046:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 801704a:	2a2e      	cmp	r2, #46	; 0x2e
 801704c:	d014      	beq.n	8017078 <__gethex+0x230>
 801704e:	2b20      	cmp	r3, #32
 8017050:	d106      	bne.n	8017060 <__gethex+0x218>
 8017052:	9b01      	ldr	r3, [sp, #4]
 8017054:	f843 bb04 	str.w	fp, [r3], #4
 8017058:	f04f 0b00 	mov.w	fp, #0
 801705c:	9301      	str	r3, [sp, #4]
 801705e:	465b      	mov	r3, fp
 8017060:	7828      	ldrb	r0, [r5, #0]
 8017062:	9303      	str	r3, [sp, #12]
 8017064:	f7ff feda 	bl	8016e1c <__hexdig_fun>
 8017068:	9b03      	ldr	r3, [sp, #12]
 801706a:	f000 000f 	and.w	r0, r0, #15
 801706e:	4098      	lsls	r0, r3
 8017070:	ea4b 0b00 	orr.w	fp, fp, r0
 8017074:	3304      	adds	r3, #4
 8017076:	e7a1      	b.n	8016fbc <__gethex+0x174>
 8017078:	45a8      	cmp	r8, r5
 801707a:	d8e8      	bhi.n	801704e <__gethex+0x206>
 801707c:	2201      	movs	r2, #1
 801707e:	4628      	mov	r0, r5
 8017080:	9303      	str	r3, [sp, #12]
 8017082:	f7ff fe29 	bl	8016cd8 <strncmp>
 8017086:	4926      	ldr	r1, [pc, #152]	; (8017120 <__gethex+0x2d8>)
 8017088:	9b03      	ldr	r3, [sp, #12]
 801708a:	2800      	cmp	r0, #0
 801708c:	d1df      	bne.n	801704e <__gethex+0x206>
 801708e:	e795      	b.n	8016fbc <__gethex+0x174>
 8017090:	f04f 0b03 	mov.w	fp, #3
 8017094:	e7c5      	b.n	8017022 <__gethex+0x1da>
 8017096:	da0b      	bge.n	80170b0 <__gethex+0x268>
 8017098:	eba5 0800 	sub.w	r8, r5, r0
 801709c:	4621      	mov	r1, r4
 801709e:	4642      	mov	r2, r8
 80170a0:	4648      	mov	r0, r9
 80170a2:	f7fe fb53 	bl	801574c <__lshift>
 80170a6:	eba6 0608 	sub.w	r6, r6, r8
 80170aa:	4604      	mov	r4, r0
 80170ac:	f100 0a14 	add.w	sl, r0, #20
 80170b0:	f04f 0b00 	mov.w	fp, #0
 80170b4:	e7ba      	b.n	801702c <__gethex+0x1e4>
 80170b6:	687b      	ldr	r3, [r7, #4]
 80170b8:	42b3      	cmp	r3, r6
 80170ba:	dd73      	ble.n	80171a4 <__gethex+0x35c>
 80170bc:	1b9e      	subs	r6, r3, r6
 80170be:	42b5      	cmp	r5, r6
 80170c0:	dc34      	bgt.n	801712c <__gethex+0x2e4>
 80170c2:	68fb      	ldr	r3, [r7, #12]
 80170c4:	2b02      	cmp	r3, #2
 80170c6:	d023      	beq.n	8017110 <__gethex+0x2c8>
 80170c8:	2b03      	cmp	r3, #3
 80170ca:	d025      	beq.n	8017118 <__gethex+0x2d0>
 80170cc:	2b01      	cmp	r3, #1
 80170ce:	d115      	bne.n	80170fc <__gethex+0x2b4>
 80170d0:	42b5      	cmp	r5, r6
 80170d2:	d113      	bne.n	80170fc <__gethex+0x2b4>
 80170d4:	2d01      	cmp	r5, #1
 80170d6:	d10b      	bne.n	80170f0 <__gethex+0x2a8>
 80170d8:	9a02      	ldr	r2, [sp, #8]
 80170da:	687b      	ldr	r3, [r7, #4]
 80170dc:	6013      	str	r3, [r2, #0]
 80170de:	2301      	movs	r3, #1
 80170e0:	6123      	str	r3, [r4, #16]
 80170e2:	f8ca 3000 	str.w	r3, [sl]
 80170e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80170e8:	f04f 0862 	mov.w	r8, #98	; 0x62
 80170ec:	601c      	str	r4, [r3, #0]
 80170ee:	e735      	b.n	8016f5c <__gethex+0x114>
 80170f0:	1e69      	subs	r1, r5, #1
 80170f2:	4620      	mov	r0, r4
 80170f4:	f7fe fd59 	bl	8015baa <__any_on>
 80170f8:	2800      	cmp	r0, #0
 80170fa:	d1ed      	bne.n	80170d8 <__gethex+0x290>
 80170fc:	4621      	mov	r1, r4
 80170fe:	4648      	mov	r0, r9
 8017100:	f7fe f90a 	bl	8015318 <_Bfree>
 8017104:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8017106:	2300      	movs	r3, #0
 8017108:	6013      	str	r3, [r2, #0]
 801710a:	f04f 0850 	mov.w	r8, #80	; 0x50
 801710e:	e725      	b.n	8016f5c <__gethex+0x114>
 8017110:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017112:	2b00      	cmp	r3, #0
 8017114:	d1f2      	bne.n	80170fc <__gethex+0x2b4>
 8017116:	e7df      	b.n	80170d8 <__gethex+0x290>
 8017118:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801711a:	2b00      	cmp	r3, #0
 801711c:	d1dc      	bne.n	80170d8 <__gethex+0x290>
 801711e:	e7ed      	b.n	80170fc <__gethex+0x2b4>
 8017120:	08017e9c 	.word	0x08017e9c
 8017124:	08017d31 	.word	0x08017d31
 8017128:	08018046 	.word	0x08018046
 801712c:	f106 38ff 	add.w	r8, r6, #4294967295
 8017130:	f1bb 0f00 	cmp.w	fp, #0
 8017134:	d133      	bne.n	801719e <__gethex+0x356>
 8017136:	f1b8 0f00 	cmp.w	r8, #0
 801713a:	d004      	beq.n	8017146 <__gethex+0x2fe>
 801713c:	4641      	mov	r1, r8
 801713e:	4620      	mov	r0, r4
 8017140:	f7fe fd33 	bl	8015baa <__any_on>
 8017144:	4683      	mov	fp, r0
 8017146:	ea4f 1268 	mov.w	r2, r8, asr #5
 801714a:	2301      	movs	r3, #1
 801714c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8017150:	f008 081f 	and.w	r8, r8, #31
 8017154:	fa03 f308 	lsl.w	r3, r3, r8
 8017158:	4213      	tst	r3, r2
 801715a:	4631      	mov	r1, r6
 801715c:	4620      	mov	r0, r4
 801715e:	bf18      	it	ne
 8017160:	f04b 0b02 	orrne.w	fp, fp, #2
 8017164:	1bad      	subs	r5, r5, r6
 8017166:	f7ff fe07 	bl	8016d78 <rshift>
 801716a:	687e      	ldr	r6, [r7, #4]
 801716c:	f04f 0802 	mov.w	r8, #2
 8017170:	f1bb 0f00 	cmp.w	fp, #0
 8017174:	d04a      	beq.n	801720c <__gethex+0x3c4>
 8017176:	68fb      	ldr	r3, [r7, #12]
 8017178:	2b02      	cmp	r3, #2
 801717a:	d016      	beq.n	80171aa <__gethex+0x362>
 801717c:	2b03      	cmp	r3, #3
 801717e:	d018      	beq.n	80171b2 <__gethex+0x36a>
 8017180:	2b01      	cmp	r3, #1
 8017182:	d109      	bne.n	8017198 <__gethex+0x350>
 8017184:	f01b 0f02 	tst.w	fp, #2
 8017188:	d006      	beq.n	8017198 <__gethex+0x350>
 801718a:	f8da 3000 	ldr.w	r3, [sl]
 801718e:	ea4b 0b03 	orr.w	fp, fp, r3
 8017192:	f01b 0f01 	tst.w	fp, #1
 8017196:	d10f      	bne.n	80171b8 <__gethex+0x370>
 8017198:	f048 0810 	orr.w	r8, r8, #16
 801719c:	e036      	b.n	801720c <__gethex+0x3c4>
 801719e:	f04f 0b01 	mov.w	fp, #1
 80171a2:	e7d0      	b.n	8017146 <__gethex+0x2fe>
 80171a4:	f04f 0801 	mov.w	r8, #1
 80171a8:	e7e2      	b.n	8017170 <__gethex+0x328>
 80171aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80171ac:	f1c3 0301 	rsb	r3, r3, #1
 80171b0:	930f      	str	r3, [sp, #60]	; 0x3c
 80171b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80171b4:	2b00      	cmp	r3, #0
 80171b6:	d0ef      	beq.n	8017198 <__gethex+0x350>
 80171b8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80171bc:	f104 0214 	add.w	r2, r4, #20
 80171c0:	ea4f 038b 	mov.w	r3, fp, lsl #2
 80171c4:	9301      	str	r3, [sp, #4]
 80171c6:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 80171ca:	2300      	movs	r3, #0
 80171cc:	4694      	mov	ip, r2
 80171ce:	f852 1b04 	ldr.w	r1, [r2], #4
 80171d2:	f1b1 3fff 	cmp.w	r1, #4294967295
 80171d6:	d01e      	beq.n	8017216 <__gethex+0x3ce>
 80171d8:	3101      	adds	r1, #1
 80171da:	f8cc 1000 	str.w	r1, [ip]
 80171de:	f1b8 0f02 	cmp.w	r8, #2
 80171e2:	f104 0214 	add.w	r2, r4, #20
 80171e6:	d13d      	bne.n	8017264 <__gethex+0x41c>
 80171e8:	683b      	ldr	r3, [r7, #0]
 80171ea:	3b01      	subs	r3, #1
 80171ec:	42ab      	cmp	r3, r5
 80171ee:	d10b      	bne.n	8017208 <__gethex+0x3c0>
 80171f0:	1169      	asrs	r1, r5, #5
 80171f2:	2301      	movs	r3, #1
 80171f4:	f005 051f 	and.w	r5, r5, #31
 80171f8:	fa03 f505 	lsl.w	r5, r3, r5
 80171fc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017200:	421d      	tst	r5, r3
 8017202:	bf18      	it	ne
 8017204:	f04f 0801 	movne.w	r8, #1
 8017208:	f048 0820 	orr.w	r8, r8, #32
 801720c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801720e:	601c      	str	r4, [r3, #0]
 8017210:	9b02      	ldr	r3, [sp, #8]
 8017212:	601e      	str	r6, [r3, #0]
 8017214:	e6a2      	b.n	8016f5c <__gethex+0x114>
 8017216:	4290      	cmp	r0, r2
 8017218:	f842 3c04 	str.w	r3, [r2, #-4]
 801721c:	d8d6      	bhi.n	80171cc <__gethex+0x384>
 801721e:	68a2      	ldr	r2, [r4, #8]
 8017220:	4593      	cmp	fp, r2
 8017222:	db17      	blt.n	8017254 <__gethex+0x40c>
 8017224:	6861      	ldr	r1, [r4, #4]
 8017226:	4648      	mov	r0, r9
 8017228:	3101      	adds	r1, #1
 801722a:	f7fe f835 	bl	8015298 <_Balloc>
 801722e:	4682      	mov	sl, r0
 8017230:	b918      	cbnz	r0, 801723a <__gethex+0x3f2>
 8017232:	4b1b      	ldr	r3, [pc, #108]	; (80172a0 <__gethex+0x458>)
 8017234:	4602      	mov	r2, r0
 8017236:	2184      	movs	r1, #132	; 0x84
 8017238:	e6b3      	b.n	8016fa2 <__gethex+0x15a>
 801723a:	6922      	ldr	r2, [r4, #16]
 801723c:	3202      	adds	r2, #2
 801723e:	f104 010c 	add.w	r1, r4, #12
 8017242:	0092      	lsls	r2, r2, #2
 8017244:	300c      	adds	r0, #12
 8017246:	f7fd f9d0 	bl	80145ea <memcpy>
 801724a:	4621      	mov	r1, r4
 801724c:	4648      	mov	r0, r9
 801724e:	f7fe f863 	bl	8015318 <_Bfree>
 8017252:	4654      	mov	r4, sl
 8017254:	6922      	ldr	r2, [r4, #16]
 8017256:	1c51      	adds	r1, r2, #1
 8017258:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801725c:	6121      	str	r1, [r4, #16]
 801725e:	2101      	movs	r1, #1
 8017260:	6151      	str	r1, [r2, #20]
 8017262:	e7bc      	b.n	80171de <__gethex+0x396>
 8017264:	6921      	ldr	r1, [r4, #16]
 8017266:	4559      	cmp	r1, fp
 8017268:	dd0b      	ble.n	8017282 <__gethex+0x43a>
 801726a:	2101      	movs	r1, #1
 801726c:	4620      	mov	r0, r4
 801726e:	f7ff fd83 	bl	8016d78 <rshift>
 8017272:	68bb      	ldr	r3, [r7, #8]
 8017274:	3601      	adds	r6, #1
 8017276:	42b3      	cmp	r3, r6
 8017278:	f6ff aedb 	blt.w	8017032 <__gethex+0x1ea>
 801727c:	f04f 0801 	mov.w	r8, #1
 8017280:	e7c2      	b.n	8017208 <__gethex+0x3c0>
 8017282:	f015 051f 	ands.w	r5, r5, #31
 8017286:	d0f9      	beq.n	801727c <__gethex+0x434>
 8017288:	9b01      	ldr	r3, [sp, #4]
 801728a:	441a      	add	r2, r3
 801728c:	f1c5 0520 	rsb	r5, r5, #32
 8017290:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8017294:	f7fe f8f2 	bl	801547c <__hi0bits>
 8017298:	42a8      	cmp	r0, r5
 801729a:	dbe6      	blt.n	801726a <__gethex+0x422>
 801729c:	e7ee      	b.n	801727c <__gethex+0x434>
 801729e:	bf00      	nop
 80172a0:	08017d31 	.word	0x08017d31

080172a4 <L_shift>:
 80172a4:	f1c2 0208 	rsb	r2, r2, #8
 80172a8:	0092      	lsls	r2, r2, #2
 80172aa:	b570      	push	{r4, r5, r6, lr}
 80172ac:	f1c2 0620 	rsb	r6, r2, #32
 80172b0:	6843      	ldr	r3, [r0, #4]
 80172b2:	6804      	ldr	r4, [r0, #0]
 80172b4:	fa03 f506 	lsl.w	r5, r3, r6
 80172b8:	432c      	orrs	r4, r5
 80172ba:	40d3      	lsrs	r3, r2
 80172bc:	6004      	str	r4, [r0, #0]
 80172be:	f840 3f04 	str.w	r3, [r0, #4]!
 80172c2:	4288      	cmp	r0, r1
 80172c4:	d3f4      	bcc.n	80172b0 <L_shift+0xc>
 80172c6:	bd70      	pop	{r4, r5, r6, pc}

080172c8 <__match>:
 80172c8:	b530      	push	{r4, r5, lr}
 80172ca:	6803      	ldr	r3, [r0, #0]
 80172cc:	3301      	adds	r3, #1
 80172ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80172d2:	b914      	cbnz	r4, 80172da <__match+0x12>
 80172d4:	6003      	str	r3, [r0, #0]
 80172d6:	2001      	movs	r0, #1
 80172d8:	bd30      	pop	{r4, r5, pc}
 80172da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80172de:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80172e2:	2d19      	cmp	r5, #25
 80172e4:	bf98      	it	ls
 80172e6:	3220      	addls	r2, #32
 80172e8:	42a2      	cmp	r2, r4
 80172ea:	d0f0      	beq.n	80172ce <__match+0x6>
 80172ec:	2000      	movs	r0, #0
 80172ee:	e7f3      	b.n	80172d8 <__match+0x10>

080172f0 <__hexnan>:
 80172f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80172f4:	680b      	ldr	r3, [r1, #0]
 80172f6:	6801      	ldr	r1, [r0, #0]
 80172f8:	115e      	asrs	r6, r3, #5
 80172fa:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80172fe:	f013 031f 	ands.w	r3, r3, #31
 8017302:	b087      	sub	sp, #28
 8017304:	bf18      	it	ne
 8017306:	3604      	addne	r6, #4
 8017308:	2500      	movs	r5, #0
 801730a:	1f37      	subs	r7, r6, #4
 801730c:	4682      	mov	sl, r0
 801730e:	4690      	mov	r8, r2
 8017310:	9301      	str	r3, [sp, #4]
 8017312:	f846 5c04 	str.w	r5, [r6, #-4]
 8017316:	46b9      	mov	r9, r7
 8017318:	463c      	mov	r4, r7
 801731a:	9502      	str	r5, [sp, #8]
 801731c:	46ab      	mov	fp, r5
 801731e:	784a      	ldrb	r2, [r1, #1]
 8017320:	1c4b      	adds	r3, r1, #1
 8017322:	9303      	str	r3, [sp, #12]
 8017324:	b342      	cbz	r2, 8017378 <__hexnan+0x88>
 8017326:	4610      	mov	r0, r2
 8017328:	9105      	str	r1, [sp, #20]
 801732a:	9204      	str	r2, [sp, #16]
 801732c:	f7ff fd76 	bl	8016e1c <__hexdig_fun>
 8017330:	2800      	cmp	r0, #0
 8017332:	d14f      	bne.n	80173d4 <__hexnan+0xe4>
 8017334:	9a04      	ldr	r2, [sp, #16]
 8017336:	9905      	ldr	r1, [sp, #20]
 8017338:	2a20      	cmp	r2, #32
 801733a:	d818      	bhi.n	801736e <__hexnan+0x7e>
 801733c:	9b02      	ldr	r3, [sp, #8]
 801733e:	459b      	cmp	fp, r3
 8017340:	dd13      	ble.n	801736a <__hexnan+0x7a>
 8017342:	454c      	cmp	r4, r9
 8017344:	d206      	bcs.n	8017354 <__hexnan+0x64>
 8017346:	2d07      	cmp	r5, #7
 8017348:	dc04      	bgt.n	8017354 <__hexnan+0x64>
 801734a:	462a      	mov	r2, r5
 801734c:	4649      	mov	r1, r9
 801734e:	4620      	mov	r0, r4
 8017350:	f7ff ffa8 	bl	80172a4 <L_shift>
 8017354:	4544      	cmp	r4, r8
 8017356:	d950      	bls.n	80173fa <__hexnan+0x10a>
 8017358:	2300      	movs	r3, #0
 801735a:	f1a4 0904 	sub.w	r9, r4, #4
 801735e:	f844 3c04 	str.w	r3, [r4, #-4]
 8017362:	f8cd b008 	str.w	fp, [sp, #8]
 8017366:	464c      	mov	r4, r9
 8017368:	461d      	mov	r5, r3
 801736a:	9903      	ldr	r1, [sp, #12]
 801736c:	e7d7      	b.n	801731e <__hexnan+0x2e>
 801736e:	2a29      	cmp	r2, #41	; 0x29
 8017370:	d155      	bne.n	801741e <__hexnan+0x12e>
 8017372:	3102      	adds	r1, #2
 8017374:	f8ca 1000 	str.w	r1, [sl]
 8017378:	f1bb 0f00 	cmp.w	fp, #0
 801737c:	d04f      	beq.n	801741e <__hexnan+0x12e>
 801737e:	454c      	cmp	r4, r9
 8017380:	d206      	bcs.n	8017390 <__hexnan+0xa0>
 8017382:	2d07      	cmp	r5, #7
 8017384:	dc04      	bgt.n	8017390 <__hexnan+0xa0>
 8017386:	462a      	mov	r2, r5
 8017388:	4649      	mov	r1, r9
 801738a:	4620      	mov	r0, r4
 801738c:	f7ff ff8a 	bl	80172a4 <L_shift>
 8017390:	4544      	cmp	r4, r8
 8017392:	d934      	bls.n	80173fe <__hexnan+0x10e>
 8017394:	f1a8 0204 	sub.w	r2, r8, #4
 8017398:	4623      	mov	r3, r4
 801739a:	f853 1b04 	ldr.w	r1, [r3], #4
 801739e:	f842 1f04 	str.w	r1, [r2, #4]!
 80173a2:	429f      	cmp	r7, r3
 80173a4:	d2f9      	bcs.n	801739a <__hexnan+0xaa>
 80173a6:	1b3b      	subs	r3, r7, r4
 80173a8:	f023 0303 	bic.w	r3, r3, #3
 80173ac:	3304      	adds	r3, #4
 80173ae:	3e03      	subs	r6, #3
 80173b0:	3401      	adds	r4, #1
 80173b2:	42a6      	cmp	r6, r4
 80173b4:	bf38      	it	cc
 80173b6:	2304      	movcc	r3, #4
 80173b8:	4443      	add	r3, r8
 80173ba:	2200      	movs	r2, #0
 80173bc:	f843 2b04 	str.w	r2, [r3], #4
 80173c0:	429f      	cmp	r7, r3
 80173c2:	d2fb      	bcs.n	80173bc <__hexnan+0xcc>
 80173c4:	683b      	ldr	r3, [r7, #0]
 80173c6:	b91b      	cbnz	r3, 80173d0 <__hexnan+0xe0>
 80173c8:	4547      	cmp	r7, r8
 80173ca:	d126      	bne.n	801741a <__hexnan+0x12a>
 80173cc:	2301      	movs	r3, #1
 80173ce:	603b      	str	r3, [r7, #0]
 80173d0:	2005      	movs	r0, #5
 80173d2:	e025      	b.n	8017420 <__hexnan+0x130>
 80173d4:	3501      	adds	r5, #1
 80173d6:	2d08      	cmp	r5, #8
 80173d8:	f10b 0b01 	add.w	fp, fp, #1
 80173dc:	dd06      	ble.n	80173ec <__hexnan+0xfc>
 80173de:	4544      	cmp	r4, r8
 80173e0:	d9c3      	bls.n	801736a <__hexnan+0x7a>
 80173e2:	2300      	movs	r3, #0
 80173e4:	f844 3c04 	str.w	r3, [r4, #-4]
 80173e8:	2501      	movs	r5, #1
 80173ea:	3c04      	subs	r4, #4
 80173ec:	6822      	ldr	r2, [r4, #0]
 80173ee:	f000 000f 	and.w	r0, r0, #15
 80173f2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80173f6:	6020      	str	r0, [r4, #0]
 80173f8:	e7b7      	b.n	801736a <__hexnan+0x7a>
 80173fa:	2508      	movs	r5, #8
 80173fc:	e7b5      	b.n	801736a <__hexnan+0x7a>
 80173fe:	9b01      	ldr	r3, [sp, #4]
 8017400:	2b00      	cmp	r3, #0
 8017402:	d0df      	beq.n	80173c4 <__hexnan+0xd4>
 8017404:	f1c3 0320 	rsb	r3, r3, #32
 8017408:	f04f 32ff 	mov.w	r2, #4294967295
 801740c:	40da      	lsrs	r2, r3
 801740e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8017412:	4013      	ands	r3, r2
 8017414:	f846 3c04 	str.w	r3, [r6, #-4]
 8017418:	e7d4      	b.n	80173c4 <__hexnan+0xd4>
 801741a:	3f04      	subs	r7, #4
 801741c:	e7d2      	b.n	80173c4 <__hexnan+0xd4>
 801741e:	2004      	movs	r0, #4
 8017420:	b007      	add	sp, #28
 8017422:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017426 <__ascii_mbtowc>:
 8017426:	b082      	sub	sp, #8
 8017428:	b901      	cbnz	r1, 801742c <__ascii_mbtowc+0x6>
 801742a:	a901      	add	r1, sp, #4
 801742c:	b142      	cbz	r2, 8017440 <__ascii_mbtowc+0x1a>
 801742e:	b14b      	cbz	r3, 8017444 <__ascii_mbtowc+0x1e>
 8017430:	7813      	ldrb	r3, [r2, #0]
 8017432:	600b      	str	r3, [r1, #0]
 8017434:	7812      	ldrb	r2, [r2, #0]
 8017436:	1e10      	subs	r0, r2, #0
 8017438:	bf18      	it	ne
 801743a:	2001      	movne	r0, #1
 801743c:	b002      	add	sp, #8
 801743e:	4770      	bx	lr
 8017440:	4610      	mov	r0, r2
 8017442:	e7fb      	b.n	801743c <__ascii_mbtowc+0x16>
 8017444:	f06f 0001 	mvn.w	r0, #1
 8017448:	e7f8      	b.n	801743c <__ascii_mbtowc+0x16>

0801744a <_realloc_r>:
 801744a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801744e:	4680      	mov	r8, r0
 8017450:	4614      	mov	r4, r2
 8017452:	460e      	mov	r6, r1
 8017454:	b921      	cbnz	r1, 8017460 <_realloc_r+0x16>
 8017456:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801745a:	4611      	mov	r1, r2
 801745c:	f7fb bfba 	b.w	80133d4 <_malloc_r>
 8017460:	b92a      	cbnz	r2, 801746e <_realloc_r+0x24>
 8017462:	f7fd fecd 	bl	8015200 <_free_r>
 8017466:	4625      	mov	r5, r4
 8017468:	4628      	mov	r0, r5
 801746a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801746e:	f000 f842 	bl	80174f6 <_malloc_usable_size_r>
 8017472:	4284      	cmp	r4, r0
 8017474:	4607      	mov	r7, r0
 8017476:	d802      	bhi.n	801747e <_realloc_r+0x34>
 8017478:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801747c:	d812      	bhi.n	80174a4 <_realloc_r+0x5a>
 801747e:	4621      	mov	r1, r4
 8017480:	4640      	mov	r0, r8
 8017482:	f7fb ffa7 	bl	80133d4 <_malloc_r>
 8017486:	4605      	mov	r5, r0
 8017488:	2800      	cmp	r0, #0
 801748a:	d0ed      	beq.n	8017468 <_realloc_r+0x1e>
 801748c:	42bc      	cmp	r4, r7
 801748e:	4622      	mov	r2, r4
 8017490:	4631      	mov	r1, r6
 8017492:	bf28      	it	cs
 8017494:	463a      	movcs	r2, r7
 8017496:	f7fd f8a8 	bl	80145ea <memcpy>
 801749a:	4631      	mov	r1, r6
 801749c:	4640      	mov	r0, r8
 801749e:	f7fd feaf 	bl	8015200 <_free_r>
 80174a2:	e7e1      	b.n	8017468 <_realloc_r+0x1e>
 80174a4:	4635      	mov	r5, r6
 80174a6:	e7df      	b.n	8017468 <_realloc_r+0x1e>

080174a8 <__ascii_wctomb>:
 80174a8:	b149      	cbz	r1, 80174be <__ascii_wctomb+0x16>
 80174aa:	2aff      	cmp	r2, #255	; 0xff
 80174ac:	bf85      	ittet	hi
 80174ae:	238a      	movhi	r3, #138	; 0x8a
 80174b0:	6003      	strhi	r3, [r0, #0]
 80174b2:	700a      	strbls	r2, [r1, #0]
 80174b4:	f04f 30ff 	movhi.w	r0, #4294967295
 80174b8:	bf98      	it	ls
 80174ba:	2001      	movls	r0, #1
 80174bc:	4770      	bx	lr
 80174be:	4608      	mov	r0, r1
 80174c0:	4770      	bx	lr
	...

080174c4 <fiprintf>:
 80174c4:	b40e      	push	{r1, r2, r3}
 80174c6:	b503      	push	{r0, r1, lr}
 80174c8:	4601      	mov	r1, r0
 80174ca:	ab03      	add	r3, sp, #12
 80174cc:	4805      	ldr	r0, [pc, #20]	; (80174e4 <fiprintf+0x20>)
 80174ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80174d2:	6800      	ldr	r0, [r0, #0]
 80174d4:	9301      	str	r3, [sp, #4]
 80174d6:	f000 f83f 	bl	8017558 <_vfiprintf_r>
 80174da:	b002      	add	sp, #8
 80174dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80174e0:	b003      	add	sp, #12
 80174e2:	4770      	bx	lr
 80174e4:	2400006c 	.word	0x2400006c

080174e8 <abort>:
 80174e8:	b508      	push	{r3, lr}
 80174ea:	2006      	movs	r0, #6
 80174ec:	f000 fa0c 	bl	8017908 <raise>
 80174f0:	2001      	movs	r0, #1
 80174f2:	f7ec f9e3 	bl	80038bc <_exit>

080174f6 <_malloc_usable_size_r>:
 80174f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80174fa:	1f18      	subs	r0, r3, #4
 80174fc:	2b00      	cmp	r3, #0
 80174fe:	bfbc      	itt	lt
 8017500:	580b      	ldrlt	r3, [r1, r0]
 8017502:	18c0      	addlt	r0, r0, r3
 8017504:	4770      	bx	lr

08017506 <__sfputc_r>:
 8017506:	6893      	ldr	r3, [r2, #8]
 8017508:	3b01      	subs	r3, #1
 801750a:	2b00      	cmp	r3, #0
 801750c:	b410      	push	{r4}
 801750e:	6093      	str	r3, [r2, #8]
 8017510:	da08      	bge.n	8017524 <__sfputc_r+0x1e>
 8017512:	6994      	ldr	r4, [r2, #24]
 8017514:	42a3      	cmp	r3, r4
 8017516:	db01      	blt.n	801751c <__sfputc_r+0x16>
 8017518:	290a      	cmp	r1, #10
 801751a:	d103      	bne.n	8017524 <__sfputc_r+0x1e>
 801751c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017520:	f000 b934 	b.w	801778c <__swbuf_r>
 8017524:	6813      	ldr	r3, [r2, #0]
 8017526:	1c58      	adds	r0, r3, #1
 8017528:	6010      	str	r0, [r2, #0]
 801752a:	7019      	strb	r1, [r3, #0]
 801752c:	4608      	mov	r0, r1
 801752e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017532:	4770      	bx	lr

08017534 <__sfputs_r>:
 8017534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017536:	4606      	mov	r6, r0
 8017538:	460f      	mov	r7, r1
 801753a:	4614      	mov	r4, r2
 801753c:	18d5      	adds	r5, r2, r3
 801753e:	42ac      	cmp	r4, r5
 8017540:	d101      	bne.n	8017546 <__sfputs_r+0x12>
 8017542:	2000      	movs	r0, #0
 8017544:	e007      	b.n	8017556 <__sfputs_r+0x22>
 8017546:	f814 1b01 	ldrb.w	r1, [r4], #1
 801754a:	463a      	mov	r2, r7
 801754c:	4630      	mov	r0, r6
 801754e:	f7ff ffda 	bl	8017506 <__sfputc_r>
 8017552:	1c43      	adds	r3, r0, #1
 8017554:	d1f3      	bne.n	801753e <__sfputs_r+0xa>
 8017556:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08017558 <_vfiprintf_r>:
 8017558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801755c:	460d      	mov	r5, r1
 801755e:	b09d      	sub	sp, #116	; 0x74
 8017560:	4614      	mov	r4, r2
 8017562:	4698      	mov	r8, r3
 8017564:	4606      	mov	r6, r0
 8017566:	b118      	cbz	r0, 8017570 <_vfiprintf_r+0x18>
 8017568:	6a03      	ldr	r3, [r0, #32]
 801756a:	b90b      	cbnz	r3, 8017570 <_vfiprintf_r+0x18>
 801756c:	f7fc fe8a 	bl	8014284 <__sinit>
 8017570:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017572:	07d9      	lsls	r1, r3, #31
 8017574:	d405      	bmi.n	8017582 <_vfiprintf_r+0x2a>
 8017576:	89ab      	ldrh	r3, [r5, #12]
 8017578:	059a      	lsls	r2, r3, #22
 801757a:	d402      	bmi.n	8017582 <_vfiprintf_r+0x2a>
 801757c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801757e:	f7fd f832 	bl	80145e6 <__retarget_lock_acquire_recursive>
 8017582:	89ab      	ldrh	r3, [r5, #12]
 8017584:	071b      	lsls	r3, r3, #28
 8017586:	d501      	bpl.n	801758c <_vfiprintf_r+0x34>
 8017588:	692b      	ldr	r3, [r5, #16]
 801758a:	b99b      	cbnz	r3, 80175b4 <_vfiprintf_r+0x5c>
 801758c:	4629      	mov	r1, r5
 801758e:	4630      	mov	r0, r6
 8017590:	f000 f93a 	bl	8017808 <__swsetup_r>
 8017594:	b170      	cbz	r0, 80175b4 <_vfiprintf_r+0x5c>
 8017596:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017598:	07dc      	lsls	r4, r3, #31
 801759a:	d504      	bpl.n	80175a6 <_vfiprintf_r+0x4e>
 801759c:	f04f 30ff 	mov.w	r0, #4294967295
 80175a0:	b01d      	add	sp, #116	; 0x74
 80175a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80175a6:	89ab      	ldrh	r3, [r5, #12]
 80175a8:	0598      	lsls	r0, r3, #22
 80175aa:	d4f7      	bmi.n	801759c <_vfiprintf_r+0x44>
 80175ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80175ae:	f7fd f81b 	bl	80145e8 <__retarget_lock_release_recursive>
 80175b2:	e7f3      	b.n	801759c <_vfiprintf_r+0x44>
 80175b4:	2300      	movs	r3, #0
 80175b6:	9309      	str	r3, [sp, #36]	; 0x24
 80175b8:	2320      	movs	r3, #32
 80175ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80175be:	f8cd 800c 	str.w	r8, [sp, #12]
 80175c2:	2330      	movs	r3, #48	; 0x30
 80175c4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8017778 <_vfiprintf_r+0x220>
 80175c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80175cc:	f04f 0901 	mov.w	r9, #1
 80175d0:	4623      	mov	r3, r4
 80175d2:	469a      	mov	sl, r3
 80175d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80175d8:	b10a      	cbz	r2, 80175de <_vfiprintf_r+0x86>
 80175da:	2a25      	cmp	r2, #37	; 0x25
 80175dc:	d1f9      	bne.n	80175d2 <_vfiprintf_r+0x7a>
 80175de:	ebba 0b04 	subs.w	fp, sl, r4
 80175e2:	d00b      	beq.n	80175fc <_vfiprintf_r+0xa4>
 80175e4:	465b      	mov	r3, fp
 80175e6:	4622      	mov	r2, r4
 80175e8:	4629      	mov	r1, r5
 80175ea:	4630      	mov	r0, r6
 80175ec:	f7ff ffa2 	bl	8017534 <__sfputs_r>
 80175f0:	3001      	adds	r0, #1
 80175f2:	f000 80a9 	beq.w	8017748 <_vfiprintf_r+0x1f0>
 80175f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80175f8:	445a      	add	r2, fp
 80175fa:	9209      	str	r2, [sp, #36]	; 0x24
 80175fc:	f89a 3000 	ldrb.w	r3, [sl]
 8017600:	2b00      	cmp	r3, #0
 8017602:	f000 80a1 	beq.w	8017748 <_vfiprintf_r+0x1f0>
 8017606:	2300      	movs	r3, #0
 8017608:	f04f 32ff 	mov.w	r2, #4294967295
 801760c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017610:	f10a 0a01 	add.w	sl, sl, #1
 8017614:	9304      	str	r3, [sp, #16]
 8017616:	9307      	str	r3, [sp, #28]
 8017618:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801761c:	931a      	str	r3, [sp, #104]	; 0x68
 801761e:	4654      	mov	r4, sl
 8017620:	2205      	movs	r2, #5
 8017622:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017626:	4854      	ldr	r0, [pc, #336]	; (8017778 <_vfiprintf_r+0x220>)
 8017628:	f7e8 fe5a 	bl	80002e0 <memchr>
 801762c:	9a04      	ldr	r2, [sp, #16]
 801762e:	b9d8      	cbnz	r0, 8017668 <_vfiprintf_r+0x110>
 8017630:	06d1      	lsls	r1, r2, #27
 8017632:	bf44      	itt	mi
 8017634:	2320      	movmi	r3, #32
 8017636:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801763a:	0713      	lsls	r3, r2, #28
 801763c:	bf44      	itt	mi
 801763e:	232b      	movmi	r3, #43	; 0x2b
 8017640:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017644:	f89a 3000 	ldrb.w	r3, [sl]
 8017648:	2b2a      	cmp	r3, #42	; 0x2a
 801764a:	d015      	beq.n	8017678 <_vfiprintf_r+0x120>
 801764c:	9a07      	ldr	r2, [sp, #28]
 801764e:	4654      	mov	r4, sl
 8017650:	2000      	movs	r0, #0
 8017652:	f04f 0c0a 	mov.w	ip, #10
 8017656:	4621      	mov	r1, r4
 8017658:	f811 3b01 	ldrb.w	r3, [r1], #1
 801765c:	3b30      	subs	r3, #48	; 0x30
 801765e:	2b09      	cmp	r3, #9
 8017660:	d94d      	bls.n	80176fe <_vfiprintf_r+0x1a6>
 8017662:	b1b0      	cbz	r0, 8017692 <_vfiprintf_r+0x13a>
 8017664:	9207      	str	r2, [sp, #28]
 8017666:	e014      	b.n	8017692 <_vfiprintf_r+0x13a>
 8017668:	eba0 0308 	sub.w	r3, r0, r8
 801766c:	fa09 f303 	lsl.w	r3, r9, r3
 8017670:	4313      	orrs	r3, r2
 8017672:	9304      	str	r3, [sp, #16]
 8017674:	46a2      	mov	sl, r4
 8017676:	e7d2      	b.n	801761e <_vfiprintf_r+0xc6>
 8017678:	9b03      	ldr	r3, [sp, #12]
 801767a:	1d19      	adds	r1, r3, #4
 801767c:	681b      	ldr	r3, [r3, #0]
 801767e:	9103      	str	r1, [sp, #12]
 8017680:	2b00      	cmp	r3, #0
 8017682:	bfbb      	ittet	lt
 8017684:	425b      	neglt	r3, r3
 8017686:	f042 0202 	orrlt.w	r2, r2, #2
 801768a:	9307      	strge	r3, [sp, #28]
 801768c:	9307      	strlt	r3, [sp, #28]
 801768e:	bfb8      	it	lt
 8017690:	9204      	strlt	r2, [sp, #16]
 8017692:	7823      	ldrb	r3, [r4, #0]
 8017694:	2b2e      	cmp	r3, #46	; 0x2e
 8017696:	d10c      	bne.n	80176b2 <_vfiprintf_r+0x15a>
 8017698:	7863      	ldrb	r3, [r4, #1]
 801769a:	2b2a      	cmp	r3, #42	; 0x2a
 801769c:	d134      	bne.n	8017708 <_vfiprintf_r+0x1b0>
 801769e:	9b03      	ldr	r3, [sp, #12]
 80176a0:	1d1a      	adds	r2, r3, #4
 80176a2:	681b      	ldr	r3, [r3, #0]
 80176a4:	9203      	str	r2, [sp, #12]
 80176a6:	2b00      	cmp	r3, #0
 80176a8:	bfb8      	it	lt
 80176aa:	f04f 33ff 	movlt.w	r3, #4294967295
 80176ae:	3402      	adds	r4, #2
 80176b0:	9305      	str	r3, [sp, #20]
 80176b2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8017788 <_vfiprintf_r+0x230>
 80176b6:	7821      	ldrb	r1, [r4, #0]
 80176b8:	2203      	movs	r2, #3
 80176ba:	4650      	mov	r0, sl
 80176bc:	f7e8 fe10 	bl	80002e0 <memchr>
 80176c0:	b138      	cbz	r0, 80176d2 <_vfiprintf_r+0x17a>
 80176c2:	9b04      	ldr	r3, [sp, #16]
 80176c4:	eba0 000a 	sub.w	r0, r0, sl
 80176c8:	2240      	movs	r2, #64	; 0x40
 80176ca:	4082      	lsls	r2, r0
 80176cc:	4313      	orrs	r3, r2
 80176ce:	3401      	adds	r4, #1
 80176d0:	9304      	str	r3, [sp, #16]
 80176d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80176d6:	4829      	ldr	r0, [pc, #164]	; (801777c <_vfiprintf_r+0x224>)
 80176d8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80176dc:	2206      	movs	r2, #6
 80176de:	f7e8 fdff 	bl	80002e0 <memchr>
 80176e2:	2800      	cmp	r0, #0
 80176e4:	d03f      	beq.n	8017766 <_vfiprintf_r+0x20e>
 80176e6:	4b26      	ldr	r3, [pc, #152]	; (8017780 <_vfiprintf_r+0x228>)
 80176e8:	bb1b      	cbnz	r3, 8017732 <_vfiprintf_r+0x1da>
 80176ea:	9b03      	ldr	r3, [sp, #12]
 80176ec:	3307      	adds	r3, #7
 80176ee:	f023 0307 	bic.w	r3, r3, #7
 80176f2:	3308      	adds	r3, #8
 80176f4:	9303      	str	r3, [sp, #12]
 80176f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80176f8:	443b      	add	r3, r7
 80176fa:	9309      	str	r3, [sp, #36]	; 0x24
 80176fc:	e768      	b.n	80175d0 <_vfiprintf_r+0x78>
 80176fe:	fb0c 3202 	mla	r2, ip, r2, r3
 8017702:	460c      	mov	r4, r1
 8017704:	2001      	movs	r0, #1
 8017706:	e7a6      	b.n	8017656 <_vfiprintf_r+0xfe>
 8017708:	2300      	movs	r3, #0
 801770a:	3401      	adds	r4, #1
 801770c:	9305      	str	r3, [sp, #20]
 801770e:	4619      	mov	r1, r3
 8017710:	f04f 0c0a 	mov.w	ip, #10
 8017714:	4620      	mov	r0, r4
 8017716:	f810 2b01 	ldrb.w	r2, [r0], #1
 801771a:	3a30      	subs	r2, #48	; 0x30
 801771c:	2a09      	cmp	r2, #9
 801771e:	d903      	bls.n	8017728 <_vfiprintf_r+0x1d0>
 8017720:	2b00      	cmp	r3, #0
 8017722:	d0c6      	beq.n	80176b2 <_vfiprintf_r+0x15a>
 8017724:	9105      	str	r1, [sp, #20]
 8017726:	e7c4      	b.n	80176b2 <_vfiprintf_r+0x15a>
 8017728:	fb0c 2101 	mla	r1, ip, r1, r2
 801772c:	4604      	mov	r4, r0
 801772e:	2301      	movs	r3, #1
 8017730:	e7f0      	b.n	8017714 <_vfiprintf_r+0x1bc>
 8017732:	ab03      	add	r3, sp, #12
 8017734:	9300      	str	r3, [sp, #0]
 8017736:	462a      	mov	r2, r5
 8017738:	4b12      	ldr	r3, [pc, #72]	; (8017784 <_vfiprintf_r+0x22c>)
 801773a:	a904      	add	r1, sp, #16
 801773c:	4630      	mov	r0, r6
 801773e:	f7fb ff67 	bl	8013610 <_printf_float>
 8017742:	4607      	mov	r7, r0
 8017744:	1c78      	adds	r0, r7, #1
 8017746:	d1d6      	bne.n	80176f6 <_vfiprintf_r+0x19e>
 8017748:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801774a:	07d9      	lsls	r1, r3, #31
 801774c:	d405      	bmi.n	801775a <_vfiprintf_r+0x202>
 801774e:	89ab      	ldrh	r3, [r5, #12]
 8017750:	059a      	lsls	r2, r3, #22
 8017752:	d402      	bmi.n	801775a <_vfiprintf_r+0x202>
 8017754:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017756:	f7fc ff47 	bl	80145e8 <__retarget_lock_release_recursive>
 801775a:	89ab      	ldrh	r3, [r5, #12]
 801775c:	065b      	lsls	r3, r3, #25
 801775e:	f53f af1d 	bmi.w	801759c <_vfiprintf_r+0x44>
 8017762:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017764:	e71c      	b.n	80175a0 <_vfiprintf_r+0x48>
 8017766:	ab03      	add	r3, sp, #12
 8017768:	9300      	str	r3, [sp, #0]
 801776a:	462a      	mov	r2, r5
 801776c:	4b05      	ldr	r3, [pc, #20]	; (8017784 <_vfiprintf_r+0x22c>)
 801776e:	a904      	add	r1, sp, #16
 8017770:	4630      	mov	r0, r6
 8017772:	f7fc f9d5 	bl	8013b20 <_printf_i>
 8017776:	e7e4      	b.n	8017742 <_vfiprintf_r+0x1ea>
 8017778:	08017ff1 	.word	0x08017ff1
 801777c:	08017ffb 	.word	0x08017ffb
 8017780:	08013611 	.word	0x08013611
 8017784:	08017535 	.word	0x08017535
 8017788:	08017ff7 	.word	0x08017ff7

0801778c <__swbuf_r>:
 801778c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801778e:	460e      	mov	r6, r1
 8017790:	4614      	mov	r4, r2
 8017792:	4605      	mov	r5, r0
 8017794:	b118      	cbz	r0, 801779e <__swbuf_r+0x12>
 8017796:	6a03      	ldr	r3, [r0, #32]
 8017798:	b90b      	cbnz	r3, 801779e <__swbuf_r+0x12>
 801779a:	f7fc fd73 	bl	8014284 <__sinit>
 801779e:	69a3      	ldr	r3, [r4, #24]
 80177a0:	60a3      	str	r3, [r4, #8]
 80177a2:	89a3      	ldrh	r3, [r4, #12]
 80177a4:	071a      	lsls	r2, r3, #28
 80177a6:	d525      	bpl.n	80177f4 <__swbuf_r+0x68>
 80177a8:	6923      	ldr	r3, [r4, #16]
 80177aa:	b31b      	cbz	r3, 80177f4 <__swbuf_r+0x68>
 80177ac:	6823      	ldr	r3, [r4, #0]
 80177ae:	6922      	ldr	r2, [r4, #16]
 80177b0:	1a98      	subs	r0, r3, r2
 80177b2:	6963      	ldr	r3, [r4, #20]
 80177b4:	b2f6      	uxtb	r6, r6
 80177b6:	4283      	cmp	r3, r0
 80177b8:	4637      	mov	r7, r6
 80177ba:	dc04      	bgt.n	80177c6 <__swbuf_r+0x3a>
 80177bc:	4621      	mov	r1, r4
 80177be:	4628      	mov	r0, r5
 80177c0:	f7ff fa48 	bl	8016c54 <_fflush_r>
 80177c4:	b9e0      	cbnz	r0, 8017800 <__swbuf_r+0x74>
 80177c6:	68a3      	ldr	r3, [r4, #8]
 80177c8:	3b01      	subs	r3, #1
 80177ca:	60a3      	str	r3, [r4, #8]
 80177cc:	6823      	ldr	r3, [r4, #0]
 80177ce:	1c5a      	adds	r2, r3, #1
 80177d0:	6022      	str	r2, [r4, #0]
 80177d2:	701e      	strb	r6, [r3, #0]
 80177d4:	6962      	ldr	r2, [r4, #20]
 80177d6:	1c43      	adds	r3, r0, #1
 80177d8:	429a      	cmp	r2, r3
 80177da:	d004      	beq.n	80177e6 <__swbuf_r+0x5a>
 80177dc:	89a3      	ldrh	r3, [r4, #12]
 80177de:	07db      	lsls	r3, r3, #31
 80177e0:	d506      	bpl.n	80177f0 <__swbuf_r+0x64>
 80177e2:	2e0a      	cmp	r6, #10
 80177e4:	d104      	bne.n	80177f0 <__swbuf_r+0x64>
 80177e6:	4621      	mov	r1, r4
 80177e8:	4628      	mov	r0, r5
 80177ea:	f7ff fa33 	bl	8016c54 <_fflush_r>
 80177ee:	b938      	cbnz	r0, 8017800 <__swbuf_r+0x74>
 80177f0:	4638      	mov	r0, r7
 80177f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80177f4:	4621      	mov	r1, r4
 80177f6:	4628      	mov	r0, r5
 80177f8:	f000 f806 	bl	8017808 <__swsetup_r>
 80177fc:	2800      	cmp	r0, #0
 80177fe:	d0d5      	beq.n	80177ac <__swbuf_r+0x20>
 8017800:	f04f 37ff 	mov.w	r7, #4294967295
 8017804:	e7f4      	b.n	80177f0 <__swbuf_r+0x64>
	...

08017808 <__swsetup_r>:
 8017808:	b538      	push	{r3, r4, r5, lr}
 801780a:	4b2a      	ldr	r3, [pc, #168]	; (80178b4 <__swsetup_r+0xac>)
 801780c:	4605      	mov	r5, r0
 801780e:	6818      	ldr	r0, [r3, #0]
 8017810:	460c      	mov	r4, r1
 8017812:	b118      	cbz	r0, 801781c <__swsetup_r+0x14>
 8017814:	6a03      	ldr	r3, [r0, #32]
 8017816:	b90b      	cbnz	r3, 801781c <__swsetup_r+0x14>
 8017818:	f7fc fd34 	bl	8014284 <__sinit>
 801781c:	89a3      	ldrh	r3, [r4, #12]
 801781e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017822:	0718      	lsls	r0, r3, #28
 8017824:	d422      	bmi.n	801786c <__swsetup_r+0x64>
 8017826:	06d9      	lsls	r1, r3, #27
 8017828:	d407      	bmi.n	801783a <__swsetup_r+0x32>
 801782a:	2309      	movs	r3, #9
 801782c:	602b      	str	r3, [r5, #0]
 801782e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8017832:	81a3      	strh	r3, [r4, #12]
 8017834:	f04f 30ff 	mov.w	r0, #4294967295
 8017838:	e034      	b.n	80178a4 <__swsetup_r+0x9c>
 801783a:	0758      	lsls	r0, r3, #29
 801783c:	d512      	bpl.n	8017864 <__swsetup_r+0x5c>
 801783e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017840:	b141      	cbz	r1, 8017854 <__swsetup_r+0x4c>
 8017842:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017846:	4299      	cmp	r1, r3
 8017848:	d002      	beq.n	8017850 <__swsetup_r+0x48>
 801784a:	4628      	mov	r0, r5
 801784c:	f7fd fcd8 	bl	8015200 <_free_r>
 8017850:	2300      	movs	r3, #0
 8017852:	6363      	str	r3, [r4, #52]	; 0x34
 8017854:	89a3      	ldrh	r3, [r4, #12]
 8017856:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801785a:	81a3      	strh	r3, [r4, #12]
 801785c:	2300      	movs	r3, #0
 801785e:	6063      	str	r3, [r4, #4]
 8017860:	6923      	ldr	r3, [r4, #16]
 8017862:	6023      	str	r3, [r4, #0]
 8017864:	89a3      	ldrh	r3, [r4, #12]
 8017866:	f043 0308 	orr.w	r3, r3, #8
 801786a:	81a3      	strh	r3, [r4, #12]
 801786c:	6923      	ldr	r3, [r4, #16]
 801786e:	b94b      	cbnz	r3, 8017884 <__swsetup_r+0x7c>
 8017870:	89a3      	ldrh	r3, [r4, #12]
 8017872:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8017876:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801787a:	d003      	beq.n	8017884 <__swsetup_r+0x7c>
 801787c:	4621      	mov	r1, r4
 801787e:	4628      	mov	r0, r5
 8017880:	f000 f884 	bl	801798c <__smakebuf_r>
 8017884:	89a0      	ldrh	r0, [r4, #12]
 8017886:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801788a:	f010 0301 	ands.w	r3, r0, #1
 801788e:	d00a      	beq.n	80178a6 <__swsetup_r+0x9e>
 8017890:	2300      	movs	r3, #0
 8017892:	60a3      	str	r3, [r4, #8]
 8017894:	6963      	ldr	r3, [r4, #20]
 8017896:	425b      	negs	r3, r3
 8017898:	61a3      	str	r3, [r4, #24]
 801789a:	6923      	ldr	r3, [r4, #16]
 801789c:	b943      	cbnz	r3, 80178b0 <__swsetup_r+0xa8>
 801789e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80178a2:	d1c4      	bne.n	801782e <__swsetup_r+0x26>
 80178a4:	bd38      	pop	{r3, r4, r5, pc}
 80178a6:	0781      	lsls	r1, r0, #30
 80178a8:	bf58      	it	pl
 80178aa:	6963      	ldrpl	r3, [r4, #20]
 80178ac:	60a3      	str	r3, [r4, #8]
 80178ae:	e7f4      	b.n	801789a <__swsetup_r+0x92>
 80178b0:	2000      	movs	r0, #0
 80178b2:	e7f7      	b.n	80178a4 <__swsetup_r+0x9c>
 80178b4:	2400006c 	.word	0x2400006c

080178b8 <_raise_r>:
 80178b8:	291f      	cmp	r1, #31
 80178ba:	b538      	push	{r3, r4, r5, lr}
 80178bc:	4604      	mov	r4, r0
 80178be:	460d      	mov	r5, r1
 80178c0:	d904      	bls.n	80178cc <_raise_r+0x14>
 80178c2:	2316      	movs	r3, #22
 80178c4:	6003      	str	r3, [r0, #0]
 80178c6:	f04f 30ff 	mov.w	r0, #4294967295
 80178ca:	bd38      	pop	{r3, r4, r5, pc}
 80178cc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80178ce:	b112      	cbz	r2, 80178d6 <_raise_r+0x1e>
 80178d0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80178d4:	b94b      	cbnz	r3, 80178ea <_raise_r+0x32>
 80178d6:	4620      	mov	r0, r4
 80178d8:	f000 f830 	bl	801793c <_getpid_r>
 80178dc:	462a      	mov	r2, r5
 80178de:	4601      	mov	r1, r0
 80178e0:	4620      	mov	r0, r4
 80178e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80178e6:	f000 b817 	b.w	8017918 <_kill_r>
 80178ea:	2b01      	cmp	r3, #1
 80178ec:	d00a      	beq.n	8017904 <_raise_r+0x4c>
 80178ee:	1c59      	adds	r1, r3, #1
 80178f0:	d103      	bne.n	80178fa <_raise_r+0x42>
 80178f2:	2316      	movs	r3, #22
 80178f4:	6003      	str	r3, [r0, #0]
 80178f6:	2001      	movs	r0, #1
 80178f8:	e7e7      	b.n	80178ca <_raise_r+0x12>
 80178fa:	2400      	movs	r4, #0
 80178fc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8017900:	4628      	mov	r0, r5
 8017902:	4798      	blx	r3
 8017904:	2000      	movs	r0, #0
 8017906:	e7e0      	b.n	80178ca <_raise_r+0x12>

08017908 <raise>:
 8017908:	4b02      	ldr	r3, [pc, #8]	; (8017914 <raise+0xc>)
 801790a:	4601      	mov	r1, r0
 801790c:	6818      	ldr	r0, [r3, #0]
 801790e:	f7ff bfd3 	b.w	80178b8 <_raise_r>
 8017912:	bf00      	nop
 8017914:	2400006c 	.word	0x2400006c

08017918 <_kill_r>:
 8017918:	b538      	push	{r3, r4, r5, lr}
 801791a:	4d07      	ldr	r5, [pc, #28]	; (8017938 <_kill_r+0x20>)
 801791c:	2300      	movs	r3, #0
 801791e:	4604      	mov	r4, r0
 8017920:	4608      	mov	r0, r1
 8017922:	4611      	mov	r1, r2
 8017924:	602b      	str	r3, [r5, #0]
 8017926:	f7eb ffb9 	bl	800389c <_kill>
 801792a:	1c43      	adds	r3, r0, #1
 801792c:	d102      	bne.n	8017934 <_kill_r+0x1c>
 801792e:	682b      	ldr	r3, [r5, #0]
 8017930:	b103      	cbz	r3, 8017934 <_kill_r+0x1c>
 8017932:	6023      	str	r3, [r4, #0]
 8017934:	bd38      	pop	{r3, r4, r5, pc}
 8017936:	bf00      	nop
 8017938:	24005748 	.word	0x24005748

0801793c <_getpid_r>:
 801793c:	f7eb bfa6 	b.w	800388c <_getpid>

08017940 <__swhatbuf_r>:
 8017940:	b570      	push	{r4, r5, r6, lr}
 8017942:	460c      	mov	r4, r1
 8017944:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017948:	2900      	cmp	r1, #0
 801794a:	b096      	sub	sp, #88	; 0x58
 801794c:	4615      	mov	r5, r2
 801794e:	461e      	mov	r6, r3
 8017950:	da0d      	bge.n	801796e <__swhatbuf_r+0x2e>
 8017952:	89a3      	ldrh	r3, [r4, #12]
 8017954:	f013 0f80 	tst.w	r3, #128	; 0x80
 8017958:	f04f 0100 	mov.w	r1, #0
 801795c:	bf0c      	ite	eq
 801795e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8017962:	2340      	movne	r3, #64	; 0x40
 8017964:	2000      	movs	r0, #0
 8017966:	6031      	str	r1, [r6, #0]
 8017968:	602b      	str	r3, [r5, #0]
 801796a:	b016      	add	sp, #88	; 0x58
 801796c:	bd70      	pop	{r4, r5, r6, pc}
 801796e:	466a      	mov	r2, sp
 8017970:	f000 f848 	bl	8017a04 <_fstat_r>
 8017974:	2800      	cmp	r0, #0
 8017976:	dbec      	blt.n	8017952 <__swhatbuf_r+0x12>
 8017978:	9901      	ldr	r1, [sp, #4]
 801797a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801797e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8017982:	4259      	negs	r1, r3
 8017984:	4159      	adcs	r1, r3
 8017986:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801798a:	e7eb      	b.n	8017964 <__swhatbuf_r+0x24>

0801798c <__smakebuf_r>:
 801798c:	898b      	ldrh	r3, [r1, #12]
 801798e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017990:	079d      	lsls	r5, r3, #30
 8017992:	4606      	mov	r6, r0
 8017994:	460c      	mov	r4, r1
 8017996:	d507      	bpl.n	80179a8 <__smakebuf_r+0x1c>
 8017998:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801799c:	6023      	str	r3, [r4, #0]
 801799e:	6123      	str	r3, [r4, #16]
 80179a0:	2301      	movs	r3, #1
 80179a2:	6163      	str	r3, [r4, #20]
 80179a4:	b002      	add	sp, #8
 80179a6:	bd70      	pop	{r4, r5, r6, pc}
 80179a8:	ab01      	add	r3, sp, #4
 80179aa:	466a      	mov	r2, sp
 80179ac:	f7ff ffc8 	bl	8017940 <__swhatbuf_r>
 80179b0:	9900      	ldr	r1, [sp, #0]
 80179b2:	4605      	mov	r5, r0
 80179b4:	4630      	mov	r0, r6
 80179b6:	f7fb fd0d 	bl	80133d4 <_malloc_r>
 80179ba:	b948      	cbnz	r0, 80179d0 <__smakebuf_r+0x44>
 80179bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80179c0:	059a      	lsls	r2, r3, #22
 80179c2:	d4ef      	bmi.n	80179a4 <__smakebuf_r+0x18>
 80179c4:	f023 0303 	bic.w	r3, r3, #3
 80179c8:	f043 0302 	orr.w	r3, r3, #2
 80179cc:	81a3      	strh	r3, [r4, #12]
 80179ce:	e7e3      	b.n	8017998 <__smakebuf_r+0xc>
 80179d0:	89a3      	ldrh	r3, [r4, #12]
 80179d2:	6020      	str	r0, [r4, #0]
 80179d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80179d8:	81a3      	strh	r3, [r4, #12]
 80179da:	9b00      	ldr	r3, [sp, #0]
 80179dc:	6163      	str	r3, [r4, #20]
 80179de:	9b01      	ldr	r3, [sp, #4]
 80179e0:	6120      	str	r0, [r4, #16]
 80179e2:	b15b      	cbz	r3, 80179fc <__smakebuf_r+0x70>
 80179e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80179e8:	4630      	mov	r0, r6
 80179ea:	f000 f81d 	bl	8017a28 <_isatty_r>
 80179ee:	b128      	cbz	r0, 80179fc <__smakebuf_r+0x70>
 80179f0:	89a3      	ldrh	r3, [r4, #12]
 80179f2:	f023 0303 	bic.w	r3, r3, #3
 80179f6:	f043 0301 	orr.w	r3, r3, #1
 80179fa:	81a3      	strh	r3, [r4, #12]
 80179fc:	89a3      	ldrh	r3, [r4, #12]
 80179fe:	431d      	orrs	r5, r3
 8017a00:	81a5      	strh	r5, [r4, #12]
 8017a02:	e7cf      	b.n	80179a4 <__smakebuf_r+0x18>

08017a04 <_fstat_r>:
 8017a04:	b538      	push	{r3, r4, r5, lr}
 8017a06:	4d07      	ldr	r5, [pc, #28]	; (8017a24 <_fstat_r+0x20>)
 8017a08:	2300      	movs	r3, #0
 8017a0a:	4604      	mov	r4, r0
 8017a0c:	4608      	mov	r0, r1
 8017a0e:	4611      	mov	r1, r2
 8017a10:	602b      	str	r3, [r5, #0]
 8017a12:	f7eb ffa2 	bl	800395a <_fstat>
 8017a16:	1c43      	adds	r3, r0, #1
 8017a18:	d102      	bne.n	8017a20 <_fstat_r+0x1c>
 8017a1a:	682b      	ldr	r3, [r5, #0]
 8017a1c:	b103      	cbz	r3, 8017a20 <_fstat_r+0x1c>
 8017a1e:	6023      	str	r3, [r4, #0]
 8017a20:	bd38      	pop	{r3, r4, r5, pc}
 8017a22:	bf00      	nop
 8017a24:	24005748 	.word	0x24005748

08017a28 <_isatty_r>:
 8017a28:	b538      	push	{r3, r4, r5, lr}
 8017a2a:	4d06      	ldr	r5, [pc, #24]	; (8017a44 <_isatty_r+0x1c>)
 8017a2c:	2300      	movs	r3, #0
 8017a2e:	4604      	mov	r4, r0
 8017a30:	4608      	mov	r0, r1
 8017a32:	602b      	str	r3, [r5, #0]
 8017a34:	f7eb ffa1 	bl	800397a <_isatty>
 8017a38:	1c43      	adds	r3, r0, #1
 8017a3a:	d102      	bne.n	8017a42 <_isatty_r+0x1a>
 8017a3c:	682b      	ldr	r3, [r5, #0]
 8017a3e:	b103      	cbz	r3, 8017a42 <_isatty_r+0x1a>
 8017a40:	6023      	str	r3, [r4, #0]
 8017a42:	bd38      	pop	{r3, r4, r5, pc}
 8017a44:	24005748 	.word	0x24005748

08017a48 <_init>:
 8017a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017a4a:	bf00      	nop
 8017a4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017a4e:	bc08      	pop	{r3}
 8017a50:	469e      	mov	lr, r3
 8017a52:	4770      	bx	lr

08017a54 <_fini>:
 8017a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017a56:	bf00      	nop
 8017a58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017a5a:	bc08      	pop	{r3}
 8017a5c:	469e      	mov	lr, r3
 8017a5e:	4770      	bx	lr
